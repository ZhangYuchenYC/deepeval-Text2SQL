{"question": "How many singers do we have?", "sql": "SELECT count(*) FROM singer", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many singers do we have?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many singers do we have?. \nSELECT  SELECT COUNT(*) as C FROM Singer;\n# \n# \n# SELECT * FROM Singer WHERE CONSTRAINT singername EXISTS (\n# SELECT 1 FROM singer WHERE name = 'Rihanna');\n#\n# SELECT * FROM Singer WHERE CONSTRAINT singername EXISTS (\n# SELECT 1 FROM singer WHERE name = 'Janet Jackson');\n#\n# \n# \n# SELECT * FROM Singer WHERE CONSTRAINT stadium EXISTS (\n# SELECT 1 FROM stadium WHERE name = 'RingCentral Coliseum');\n#\n# SELECT * FROM Singer WHERE CONSTRAINT stadium EXISTS (\n# SELECT 1 FROM stadium WHERE name = 'Madison Square Garden');\n# \n# SELECT * FROM Singer WHERE CONSTRAINT stadium EXISTS (\n# SELECT 1 FROM stadium WHERE name = 'United Center');\n# \n# SELECT * FROM Singer WHERE CONSTRAINT stadium EXISTS (\n# SELECT 1 FROM stadium WHERE name = 'T-Mobile Arena');\n#\n# \n# \n# SELECT * FROM Singer WHERE CONSTRAINT stadium EXISTS (\n# SELECT "}
{"question": "What is the total number of singers?", "sql": "SELECT count(*) FROM singer", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the total number of singers?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the total number of singers?. \nSELECT  SELECT COUNT(*) AS num FROM concerts \nSELECT  SELECT COUNT(*) AS num FROM concerts \n\n#create a temporary table to insert into\ntemptable = [[select concerts.num as num; select concerts.concert_name as concert_name; select stadium.name as stadium_name; select stadium.location as stadium_location; select stadium.capacity as stadium_capacity; select stadium.highest as stadium_highest; select stadium.lowest as stadium_lowest; select stadium.average as stadium_average; select singers.name as singer_name; select singers.country as singer_country; select singers.song_name as singer_song_name; select singers.song_release_year as singer_song_release_year; select singers.age as singer_age; select singers.is_male as singer_is_male; select singers.highest as singer_highest; select singers.lowest as singer_lowest; select singers.average as singer_average; select concerts.concert_name as concert_name;"}
{"question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow name, country, age for all singers ordered by age from the oldest to the youngest.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow name, country, age for all singers ordered by age from the oldest to the youngest.. \nSELECT  SELECT *, age, name, country, year FROM concerts ORDER BY name DESC;\n###\n\n### Concerts, with their properties:\n### stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n### singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n### concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n### singer_in_concert('concert_ID', 'Singer_ID')\n#\n#SELECT *, year FROM concerts;\n#SELECT name, country, age, year FROM concerts;\n#SELECT *, year FROM concerts ORDER BY name;\n#SELECT *, age FROM concerts ORDER BY name DESC;\n\n### This is how to find the oldest and the youngest singer\n#SELECT *, max(age) as max_age, min(age) as min_age FROM singers GROUP BY name ORDER BY min_"}
{"question": "What are the names, countries, and ages for every singer in descending order of age?", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names, countries, and ages for every singer in descending order of age?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names, countries, and ages for every singer in descending order of age?. \nSELECT  SELECT  SELECT\n\n#check the query\nSELECT concert.name,\n      SUM(concert.year) AS concert_years,\n      GROUP_CONCAT(CONCAT(singer.name, ' (', singer.country, ')'), ', ') AS singers,\n      GROUP_CONCAT(CONCAT(singer.name, ' (', singer.age, ')'), ', ') AS ages\nFROM concert\n  JOIN singer ON concert.year = singer.year\nGROUP BY concert.name\nORDER BY concert_years DESC;\n\n#use the query\nSELECT name,\n      SUM(year) AS years,\n      GROUP_CONCAT(CONCAT(singer.name, ' (', singer.country, ')'), ', ') AS singers,\n      GROUP_CONCAT(CONCAT(singer.name, ' (', singer.age, ')'), ', ') AS ages\nFROM stadium\n  JOIN singer ON stadium.year = singer.year\nGROUP BY name\nORDER BY years DESC;\n\n"}
{"question": "What is the average, minimum, and maximum age of all singers from France?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average, minimum, and maximum age of all singers from France?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average, minimum, and maximum age of all singers from France?. \nSELECT  SELECT COUNT(*) AS Number_of_singers_from_france_age, MAX(Age) AS Max_age, MIN(Age) AS Min_age FROM Singer WHERE Country = 'France' GROUP BY Country;\n\n#What is the average age of all singers from Italy?\nSELECT AVG(Age) AS Average_age, MIN(Age) AS Min_age, MAX(Age) AS Max_age FROM Singer WHERE Country = 'Italy' GROUP BY Country;\n\n#What is the average age of all singers from Spain?\nSELECT AVG(Age) AS Average_age, MIN(Age) AS Min_age, MAX(Age) AS Max_age FROM Singer WHERE Country = 'Spain' GROUP BY Country;\n\n#What is the average age of all singers who are not male?\nSELECT AVG(Age) AS Average_age, MIN(Age) AS Min_age, MAX(Age) AS Max_age FROM Singer WHERE Gender = 'Female' GROUP BY Country;\n\n#What is the average age of all singers who are not from France?\nSELECT AVG(Age"}
{"question": "What is the average, minimum, and maximum age for all French singers?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average, minimum, and maximum age for all French singers?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average, minimum, and maximum age for all French singers?. \nSELECT  SELECT\n    IFNULL(avg(age), 0) AS average,\n    MIN(age), MAX(age)\nFROM\n    concert\nJOIN\n    singer ON concert.concert_ID = singer.concert_ID\nJOIN\n    concert_singer ON concert_singer.singer_ID = singer.singer_ID\nGROUP BY\n    concert_singer.concert_ID\nORDER BY\n    average DESC\n###\n\n\n# This is a quick example, showing how to do a JOIN (where the database is small enough that a single query suffices).\n# SELECT\n#   IFNULL(avg(age), 0) AS average,\n#   MIN(age), MAX(age)\n# FROM\n#   concert\n# JOIN\n#   singer ON concert.concert_ID = singer.concert_ID\n# JOIN\n#   concert_singer ON concert_singer.singer_ID = singer.singer_ID\n# GROUP BY\n#   concert_singer.concert_ID\n# ORDER BY\n#   average DESC\n\n\n# Join with the singer.\n#"}
{"question": "Show the name and the release year of the song by the youngest singer.", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the name and the release year of the song by the youngest singer.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the name and the release year of the song by the youngest singer.. \nSELECT  SELECT CONCAT_WS(\" \", Singer_Name, Singer_release_year) AS Song, Singer_release_year AS Year FROM singer WHERE Singer_release_year = (SELECT MIN(Singer_release_year) FROM singer GROUP BY Singer_release_year);\n\n\n\n# Write SQL to calculate the average age for each singer.\nSELECT  CONCAT_WS(\" \", Singer_Name, Singer_release_year) AS Singer, Average AS Average_Age FROM singer WHERE Singer_release_year = (SELECT MIN(Singer_release_year) FROM singer GROUP BY Singer_release_year);\n# SELECT Name, Age FROM singer WHERE Year = (SELECT MIN(Singer_release_year) FROM singer GROUP BY Singer_release_year);\n# SELECT Average AS Average_Age FROM singer WHERE Year = (SELECT MIN(Singer_release_year) FROM singer GROUP BY Singer_release_year);\n# SELECT Name, Average_Age FROM singer WHERE Year = (SELECT MIN(Singer_release_year) FROM singer GROUP BY Singer_release_year);\n# SELECT Name"}
{"question": "What are the names and release years for all the songs of the youngest singer?", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names and release years for all the songs of the youngest singer?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names and release years for all the songs of the youngest singer?. \nSELECT  SELECT concert_singer.Singer_ID, concert_singer.Name, concert_singer.Release_year, concert_concert.Concert_Name, concert_singer.Stadium_ID, concert_concert.Year,\n  (SELECT Name FROM concert_singer WHERE Singer_ID = concert_singer.Singer_ID AND Release_year = concert_singer.Release_year ORDER BY Release_year) AS Name_of_Youngest_Singer,\n  (SELECT Stadium_ID FROM concert_singer WHERE Singer_ID = concert_singer.Singer_ID AND Release_year = concert_singer.Release_year ORDER BY Release_year) AS Stadium_Name_of_Youngest_Singer\n  FROM concert_singer\n  WHERE Release_year = (SELECT MAX(Release_year) FROM concert_singer);\n"}
{"question": "What are all distinct countries where singers above age 20 are from?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are all distinct countries where singers above age 20 are from?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are all distinct countries where singers above age 20 are from?. \nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT DISTINCT Country FROM singer WHERE age > 20\nSELECT  SELECT"}
{"question": "What are  the different countries with singers above age 20?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are  the different countries with singers above age 20?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are  the different countries with singers above age 20?. \n}
{"question": "Show all countries and the number of singers in each country.", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow all countries and the number of singers in each country.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow all countries and the number of singers in each country.. \nSELECT  SELECT country FROM singer_in_concert\nGROUP BY country; \nGROUP BY country;\n\nGROUP BY country;\n\n#first show the singer who appears in the most number of concerts\n#SELECT COUNT(concert_ID) AS 'Concerts_appearing_number'\n#FROM singer_in_concert\n#GROUP BY country; \n#ORDER BY Concerts_appearing_number;\n\n#this query shows the number of concerts by a singer in different countries\n#SELECT  SELECT country FROM singer_in_concert GROUP BY country;\n#GROUP BY country;\n\n#this query shows the number of concerts by a singer in different countries\n#SELECT  SELECT concert_ID FROM singer_in_concert GROUP BY country;\n#GROUP BY country;\n\n#this query shows the concerts with most number of singers\n#SELECT  SELECT country FROM singer_in_concert GROUP BY country;\n#GROUP BY country;\n\n#this query shows the concerts with most number of singers\n#SELECT  SELECT concert_ID FROM singer_in_concert GROUP BY country;\n#GROUP BY country;\n\n#"}
{"question": "How many singers are from each country?", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many singers are from each country?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many singers are from each country?. \nSELECT  SELECT s.Name AS Country, COUNT(*) AS Count FROM singer s GROUP BY s.Name\n\nHow many stadiums are there in each country?. \nSELECT  SELECT s.Location, COUNT(*) AS Count FROM stadium s GROUP BY s.Location\n\nHow many concerts are there?. \nSELECT  SELECT c.concert_Name, COUNT(*) AS Count FROM concert c GROUP BY c.concert_Name\n\nHow many singers sang in each concert?. \nSELECT  SELECT c.concert_ID, COUNT(*) AS Count FROM singer_in_concert c GROUP BY c.concert_ID\n\nThe most popular singers (by concerts). \nSELECT  SELECT c.concert_ID, c.concert_Name, s.Name, COUNT(*) AS Count FROM concert c, singer s WHERE c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, s.Name ORDER BY Count DESC\n\nHow many concerts are there from each theme?. \nSELECT  SELECT c.concert_Name, COUNT(*) AS Count FROM concert c WHERE c.Theme IN ('Country', 'Rock',"}
{"question": "List all song names by singers above the average age.", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList all song names by singers above the average age.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList all song names by singers above the average age.. \n}
{"question": "What are all the song names by singers who are older than average?", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are all the song names by singers who are older than average?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are all the song names by singers who are older than average?. \nSELECT  SELECT Singer_Name, Singer_Age\nFROM    singer, concert, song\nWHERE   (SELECT song_Name\n           FROM    song\n           WHERE   singer_ID = Singer_ID\n           ORDER BY song_release_year)\nORDER BY Singer_Age;\n\nWhat are all the stadium names that have held a concert by a singer with average age 26.\nSELECT stadium_Name, stadium_Capacity\nFROM    stadium, concert, singer\nWHERE   (SELECT stadium_Name\n           FROM    stadium\n           WHERE   singer_ID = Singer_ID\n           ORDER BY song_release_year)\nORDER BY stadium_Capacity;\n\nWhat are all the stadium names that have held a concert by a singer whose age is below average.\nSELECT stadium_Name, stadium_Capacity\nFROM    stadium, concert, singer\nWHERE   (SELECT stadium_Name\n           FROM    stadium\n           WHERE   singer_ID = Singer_ID\n           AND     song_release_year = (SELECT MAX(Song_release_year)\n                                           FROM    song\n                                           WHERE  "}
{"question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow location and name for all stadiums with a capacity between 5000 and 10000.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow location and name for all stadiums with a capacity between 5000 and 10000.. \n}
{"question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the locations and names of all stations with capacity between 5000 and 10000?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the locations and names of all stations with capacity between 5000 and 10000?. \nSELECT  SELECT `Name` FROM `Stadium` WHERE `Capacity` BETWEEN 5000 AND 10000;\n\n# Find a stadium with the largest capacity. \nSELECT Name, Max(Capacity) AS MaxCapacity FROM `Stadium` GROUP BY `Name`;\n\n#Find a singer whose age is between 10 and 15 years. \nSELECT Name, Min(Age) AS MinAge FROM `singer` GROUP BY `Name` HAVING MinAge BETWEEN 10 AND 15;\n\n#Find all concerts with the theme \"rock\". \nSELECT Name, Count(*) AS Count FROM `concert` WHERE Theme = 'rock';\n\n#Find all singers who are performing in the concerts with the theme \"rock\"\nSELECT Singer_Name, Concert_Name, Count(*) AS Count FROM `singer_in_concert` WHERE Concert_Name = 'rock';\n\n\n### Using the SQLite SQL tool, we can do an interactive search with a prompt.\n#Create a table that contains the location, the name and the capacity of the stadiums\n"}
{"question": "What is the maximum capacity and the average of all stadiums ?", "sql": "select max(capacity), average from stadium", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the maximum capacity and the average of all stadiums ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the maximum capacity and the average of all stadiums ?. \n}
{"question": "What is the average and maximum capacities for all stadiums ?", "sql": "select avg(capacity) ,  max(capacity) from stadium", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average and maximum capacities for all stadiums ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average and maximum capacities for all stadiums ?. \n}
{"question": "What is the name and capacity for the stadium with highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity for the stadium with highest average attendance?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity for the stadium with highest average attendance?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What is the name and capacity for the stadium with the highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity for the stadium with the highest average attendance?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity for the stadium with the highest average attendance?. \n}
{"question": "How many concerts are there in year 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many concerts are there in year 2014 or 2015?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many concerts are there in year 2014 or 2015?. \nSELECT  SELECT * FROM concert_singer WHERE Year = '2014'\nSELECT  SELECT * FROM concert_singer WHERE Year = '2015'\nIn the result, we will get list of concerts and their singers in year 2014 or 2015.\n\n\n"}
{"question": "How many concerts occurred in 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many concerts occurred in 2014 or 2015?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many concerts occurred in 2014 or 2015?. \nSELECT  SELECT CONCERT_ID, COUNT(CONCERT_ID) AS COUNT\nFROM   concert\nGROUP BY CONCERT_ID\nORDER BY COUNT DESC\n\n# What's the age of the oldest singer in 2014?.\nSELECT  SINGER_ID, SINGER_AGE\nFROM   singer_in_concert\nWHERE  CONCERT_ID = 103\n\n# What's the age of the youngest singer in 2015?.\nSELECT  SINGER_ID, SINGER_AGE\nFROM   singer_in_concert\nWHERE  CONCERT_ID = 115\n\n# What's the oldest singer that performed in 2015?.\nSELECT  SINGER_ID, SINGER_AGE\nFROM   singer_in_concert\nWHERE  CONCERT_ID = 115\nAND    SINGER_AGE > 25\n\n# What's the youngest singer that performed in 2015?.\nSELECT  SINGER_ID, SINGER_AGE\nFROM   singer_in_concert\nWHERE  CON"}
{"question": "Show the stadium name and the number of concerts in each stadium.", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium name and the number of concerts in each stadium.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium name and the number of concerts in each stadium.. \nSELECT  SELECT COUNT(*) AS cnt, stadium.stadium_name\nFROM concert_singer\nJOIN stadium ON stadium.stadium_ID=concert_singer.stadium_ID\nGROUP BY stadium.stadium_name\nORDER BY cnt DESC\n\n#Show the number of concerts held in each stadium, in each year.. \nSELECT  SELECT COUNT(*) AS cnt, concert_year\nFROM concert_singer\nJOIN stadium ON stadium.stadium_ID=concert_singer.stadium_ID\nGROUP BY concert_year\nORDER BY cnt DESC\n\n#Show the number of concerts held in each stadium, by each singer.. \nSELECT  SELECT COUNT(*) AS cnt, singer_id\nFROM concert_singer\nJOIN stadium ON stadium.stadium_ID=concert_singer.stadium_ID\nGROUP BY singer_id\nORDER BY cnt DESC\n\n#Show the number of concerts held in each stadium, by each singer, in each year.. \nSELECT  SELECT COUNT(*) AS cnt, singer_id, concert_year\nFROM concert_singer"}
{"question": "For each stadium, how many concerts play there?", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFor each stadium, how many concerts play there?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFor each stadium, how many concerts play there?. \nSELECT  SELECT COUNT(*) FROM concerts WHERE stadium_ID = '2';\n#Result: 1\nFor each singer, how many concerts have they played?. \nSELECT  SELECT COUNT(*) FROM concerts WHERE singer_ID = '2';\n#Result: 1\nFor each singer, how many concerts are they currently playing?. \nSELECT  SELECT COUNT(*) FROM concerts WHERE singer_ID = '2' AND concert_ID != '2';\n#Result: 0\nFor each singer, how many concerts have they played?. \nSELECT  SELECT COUNT(*) FROM concerts WHERE singer_ID = '2' AND concert_ID != '2';\n#Result: 0\nFor each singer, how many concerts are they currently playing?. \nSELECT  SELECT COUNT(*) FROM concerts WHERE singer_ID = '2' AND concert_ID != '2' AND singer_ID != '2' AND concert_ID != '2';\n#Result: 0\n\n### SQLite SQLite stadium_concerts_player database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', '"}
{"question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium name and capacity with most number of concerts in year 2014 or after.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium name and capacity with most number of concerts in year 2014 or after.. \nSELECT  SELECT stadium.Location, count(*) FROM concert_singer GROUP BY stadium.Location ORDER BY count(*) DESC\n\nShow the singer name and country with most number of concerts in year 2014 or after..\nSELECT  SELECT singer.Name, singer.Country, count(*) FROM concert_singer GROUP BY singer.Name, singer.Country ORDER BY count(*) DESC\n\nShow the singer with most number of concerts in year 2014 or after..\nSELECT  SELECT singer.Name, count(*) FROM concert_singer GROUP BY singer.Name ORDER BY count(*) DESC\n\nShow the singer and the stadium name with most number of concerts in year 2014 or after..\nSELECT  SELECT singer.Name, stadium.Location, count(*) FROM concert_singer GROUP BY singer.Name, stadium.Location ORDER BY count(*) DESC\n\nShow the singer name, stadium name and the concert theme with most number of concerts in year 2014 or after..\nSELECT  SELECT singer.Name, stadium.Location, concert.Theme, count(*) FROM concert_singer GROUP BY singer.Name, stadium.Location, concert.Theme ORDER"}
{"question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity of the stadium with the most concerts after 2013 ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity of the stadium with the most concerts after 2013 ?. \nSELECT  SELECT stadium.Name, stadium.Capacity, concert.Year, MAX(concert.Year) AS max_year\nFROM stadium\nJOIN concert ON stadium.id = concert.stadium_id\nJOIN singer ON singer.id = concert.sunger_id\nGROUP BY stadium.id, stadium.name, concert.year, stadium.capacity\n\n\nWhat is the name and age of the singer with the most concerts after 2013 ?. \nSELECT  SELECT singer.Name, singer.Age, singer_in_concert.year\nFROM singer\nJOIN singer_in_concert ON singer.id = singer_in_concert.singer_id\nJOIN concert ON concert.year = singer_in_concert.year\nGROUP BY singer.id, singer.name\n\n\nWhat is the name of the singer with the most concerts after 2013 ?. \nSELECT  SELECT singer.Name, singer_in_concert.year\nFROM singer\nJOIN singer_in_concert ON singer.id = singer_in_concert.singer_id\nGROUP BY"}
{"question": "Which year has most number of concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhich year has most number of concerts?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhich year has most number of concerts?. \nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What is the year that had the most concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the year that had the most concerts?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the year that had the most concerts?. \nSELECT  SELECT CONCERT_ID AS CONCERT_ID,\nSTADIUM_ID AS STADIUM_ID,\nconcert_Name AS concert_Name,\nTheme AS Theme,\nYEAR(Year) AS Year\nFROM concert_singer\nWHERE Stadium_ID = 2\nGROUP BY concert_Name, Theme, Year(Year)\nORDER BY Year(Year) DESC\nLIMIT 3\nThe query\nSELECT * FROM concert_singer GROUP BY concert_Name, Theme, Year(Year) ORDER BY Year(Year) DESC\nreturns the following information about the concerts in the year 2008.\n+----+------------+---------+----------+\n|   | STADIUM_ID  | CONCERT_ID | CONCERT_NAME |\n|   |             |          |             |\n+----+------------+---------+----------+\n|  1 |          1 |        1 | This is    |\n|  2 |          1 |        2 | the year |\n|  3 |          2 |        3 | rock       |\n|  4 |          2 |        4 | pop        |\n|  5 |          2 |"}
{"question": "Show the stadium names without any concert.", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium names without any concert.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium names without any concert.. \n}
{"question": "What are the names of the stadiums without any concerts?", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the stadiums without any concerts?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the stadiums without any concerts?. \nSELECT  SELECT * FROM sqlite_master WHERE type=\"table\" AND name=\"stadium\" AND NOT (SELECT count(*) FROM sqlite_master WHERE type=\"table\" AND name=\"concert\")\n\nWhat are the names of the singers without any concerts?. \nSELECT  SELECT * FROM sqlite_master WHERE type=\"table\" AND name=\"singer\" AND NOT (SELECT count(*) FROM sqlite_master WHERE type=\"table\" AND name=\"concert\")\n\nWhat are the names of the songs without any concerts?. \nSELECT  SELECT * FROM sqlite_master WHERE type=\"table\" AND name=\"song\" AND NOT (SELECT count(*) FROM sqlite_master WHERE type=\"table\" AND name=\"concert\")\n\nWhat are the names of the singers who performed with a specific concert?. \nSELECT  SELECT * FROM sqlite_master WHERE type=\"table\" AND name=\"singer_in_concert\" AND stadium_id=45 AND year=2014\n\nWhat are the names of the concerts?. \nSELECT  SELECT * FROM sqlite_master WHERE type=\"table\" AND name=\"concert\" AND NOT (SELECT count(*) FROM sqlite_master WHERE type=\"table\" AND name"}
{"question": "Show countries where a singer above age 40 and a singer below 30 are from.", "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow countries where a singer above age 40 and a singer below 30 are from.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow countries where a singer above age 40 and a singer below 30 are from.. \nSELECT  SELECT * FROM concerts JOIN stadiums ON stadiums.ID=concerts.Stadium_ID\nJOIN singers ON singers.ID=concerts.Singer_ID\nWHERE concerts.Year = '2017' AND singers.Age = 40\nAND singers.Age < 30\n\nShow stadiums with at least 5000 seats and are outdoor.. \nSELECT  SELECT * FROM concerts JOIN stadiums ON stadiums.ID=concerts.Stadium_ID\nJOIN singers ON singers.ID=concerts.Singer_ID\nWHERE concerts.Year = '2017' AND stadiums.Capacity >= 5000\nAND stadiums.Capacity > 0\nAND stadiums.Outdoor = 1\n\nShow all singers who have done at least 20 concerts.. \nSELECT  SELECT * FROM concerts JOIN singers ON singers.ID=concerts.Singer_ID\nJOIN concerts ON concerts.ID=singers.concert_ID\nWHERE concerts.Year = '2017"}
{"question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow names for all stadiums except for stadiums having a concert in year 2014.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow names for all stadiums except for stadiums having a concert in year 2014.. \n}
{"question": "What are the names of all stadiums that did not have a concert in 2014?", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of all stadiums that did not have a concert in 2014?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of all stadiums that did not have a concert in 2014?. \nSELECT  SELECT 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nfrom sqlite_master WHERE type='table' AND name=~'stadium'\nFROM sqlite_master\nWHERE type='table' AND name=~'stadium'\nWhat are the names of all stadiums that did not have a concert in 2014?. \nSELECT  SELECT 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nfrom sqlite_master WHERE type='table' AND name=~'singer'\nFROM sqlite_master\nWHERE type='table' AND name=~'singer'\nWhat are the names of all concerts that did not have a singer in 2014?. \nSELECT  SELECT 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nfrom sqlite_master WHERE type='table' AND name=~'concert'\nFROM sqlite_master\nWHERE type='table' AND name=~'concert'\nWhat"}
{"question": "Show the name and theme for all concerts and the number of singers in each concert.", "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the name and theme for all concerts and the number of singers in each concert.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the name and theme for all concerts and the number of singers in each concert.. \nSELECT  SELECT  SELECT  SELECT\nCONCERT_NAME, CONCERT_THEME, STADIUM_ID, YEAR\nFROM    concert\nWHERE   YEAR = 2003\nGROUP BY CONCERT_NAME, CONCERT_THEME, STADIUM_ID, YEAR\nORDER BY CONCERT_NAME, YEAR\n\nselect name from stadium;\n\nselect name from singer;\n\nselect name from concert;\n\nselect name from singer in concert;\n\n\n### Connect to SQLite database\n#database_path = '../sqlite/sqlite_test.db';\n#database_path = 'sqlite/sqlite_test.db';\n#database_path = 'sqlite/sqlite_test.db';\n#database_path = 'sqlite/sqlite_test.db';\n#database_path = '../sqlite/sqlite_test.db';\n\n##database_path = '../sqlite/sqlite_test.db';\n\n#database_path = 'sqlite/sqlite_test.db';\n\n##database_path = '../sqlite/sqlite_test.db';\n\n#database_path = 'sqlite"}
{"question": "What are the names , themes , and number of singers for every concert ?", "sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names , themes , and number of singers for every concert ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names , themes , and number of singers for every concert ?. \nSELECT  SELECT stadium_id, COUNT(*) AS count FROM singer_in_concert GROUP BY stadium_id\n\n\nHow many people in total were at the concerts? \nSELECT stadium_id, SUM(COUNT(*)) AS count FROM concert GROUP BY stadium_id\n\n\nWhat is the average age of the people who attended a concert? \nSELECT stadium_id, SUM(AGE) AS average FROM singer_in_concert GROUP BY stadium_id\n\nWhat is the average age of the people who attended the 2016 concerts? \nSELECT stadium_id, SUM(AGE) AS average FROM concert WHERE year = 2016 GROUP BY stadium_id\n\nWhat is the average age of the people who attended the 2015 concerts? \nSELECT stadium_id, SUM(AGE) AS average FROM concert WHERE year = 2015 GROUP BY stadium_id\n\nWhat are the average ages of the people at the 2016 concerts? \nSELECT stadium_id, AVG(age) AS average FROM concert WHERE year = 2016 GROUP BY stadium_id\n"}
{"question": "List singer names and number of concerts for each singer.", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList singer names and number of concerts for each singer.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList singer names and number of concerts for each singer.. \nSELECT  SELECTive columns in SQLite\n## IN SQL\nSELECT name, count(concert_ID) as count\nFROM singer, concert, singer_in_concert\nGROUP BY singer.singer_ID\n## IN R\nsinger_id <- 3\nconcert_id <- 1\n## from SQLite\nsql <- \"SELECT * FROM singer s, concert c, singer_in_concert si WHERE s.singer_id = si.singer_id and s.concert_id = c.concert_id\"\n## sql1 <- \"SELECT name, count(concert_id) as count FROM singer, concert, singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id and singer.concert_id = concert.concert_id and concert.concert_id = singer_in_concert.concert_id GROUP BY singer.singer_id\"\n## sql2 <- \"SELECT name, count(concert_id) as count FROM singer, concert, singer_in_concert WHERE s.singer_id = si.singer_id and si.concert_id ="}
{"question": "What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the singers and number of concerts for each person?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the singers and number of concerts for each person?. \nSELECT  SELECT CONCERT_ID, SINGER_ID, COUNT(*) FROM concert_singer GROUP BY CONCERT_ID, SINGER_ID\n\n###\n\n\n# SELECT * FROM concert_singer GROUP BY CONCERT_ID, SINGER_ID, YEAR\n\n\n###\n\n# SELECT CONCERT_ID, SINGER_ID, COUNT(*) FROM concert_singer GROUP BY CONCERT_ID, SINGER_ID\n\n# What are the names of the concerts for each singer?.\n# SELECT CONCERT_ID, NAME, COUNT(*) FROM concert GROUP BY CONCERT_ID\n\n\n###\n\n# SELECT CONCERT_ID, NAME, COUNT(*) FROM concert GROUP BY CONCERT_ID\n\n# What is the name of the stadium for each concert?.\n# SELECT STADIUM_ID, NAME, COUNT(*) FROM stadium GROUP BY STADIUM_ID\n\n###\n\n# SELECT STADIUM_ID, NAME, COUNT(*) FROM stadium GROUP BY STADIUM_ID\n\n# What is the name of the singer for each concert?.\n# SELECT"}
{"question": "List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList all singer names in concerts in year 2014.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList all singer names in concerts in year 2014.. \nSELECT  SELECT  SELECT\nstadium.Name, stadium.Location,\nsinger.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male\nFROM stadium\nLEFT JOIN singer ON singer.Stadium_ID=stadium.Stadium_ID\nLEFT JOIN concert ON concert.Stadium_ID=stadium.Stadium_ID\nWHERE year='2014' AND concert.Theme='Celebration'\nGROUP BY stadium.Name, stadium.Location, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male\n\nsinger.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male\n\n\nSELECT  SELECT  SELECT\nstadium.Name, stadium.Location,\nsinger.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male\nFROM stadium\nLEFT JOIN"}
{"question": "What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the singers who performed in a concert in 2014?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the singers who performed in a concert in 2014?. \nSELECT  SELECT * FROM concert WHERE year=2014 \nORDER BY concert_Name, singer_Name, stadium_Name\n```\n\n### SQL Server SQL Server database, with their properties:\n#stadium('Location', 'Name')\n#singer('Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\n\n### PostgreSQL\n#SELECT 'Foo', 'Bar' FROM public.stadium\n#SELECT 'Foo', 'Bar' FROM public.singer\n#SELECT 'Foo', 'Bar' FROM public.concert\n#SELECT 'Foo', 'Bar' FROM public.singer_in_concert\n### MySQL\n#SELECT 'Foo', 'Bar' FROM public.stadium\n#SELECT 'Foo', 'Bar' FROM public.singer\n#SELECT 'Foo', 'Bar' FROM public.concert\n#SELECT 'Foo', 'Bar' FROM public.singer_in_"}
{"question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nwhat is the name and nation of the singer who have a song having 'Hey' in its name?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nwhat is the name and nation of the singer who have a song having 'Hey' in its name?. \n}
{"question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and country of origin of every singer who has a song with the word 'Hey' in its title?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and country of origin of every singer who has a song with the word 'Hey' in its title?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT"}
{"question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFind the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFind the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.. \nSELECT  SELECT_SINGER_IN_CONCERT(stadium.stadium_id, concert.year) FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND concert.year = (SELECT MIN(year) FROM concert WHERE stadium.stadium_id = concert.stadium_id);\n#\n#SELECT  SELECT_SINGER_IN_CONCERT(stadium.stadium_id, concert.year) FROM concert, stadium WHERE concert.stadium_id = stadium.stadium_id AND stadium.stadium_id = (SELECT MAX(stadium.stadium_id) FROM stadium WHERE concert.stadium_id = stadium.stadium_id) AND year = (SELECT MIN(year) FROM concert WHERE stadium.stadium_id = stadium.stadium_id);\n#SELECT  SELECT_SINGER_IN_CONCERT(stadium.stadium_id, concert.year) FROM concert, stadium WHERE concert.stadium_id = stadium.stadium_id AND stadium.stadium_id = (SELECT MAX(stadium."}
{"question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?. \nSELECT  SELECT \n\t\tstadium_id, location, name, capacity, \n\t\t(highest - lowest) AS average\n\tFROM stadium\n\tWHERE\n\t\tcapacity > 0 AND\n\t\thighest > 0 AND\n\t\tlowest > 0 AND\n\t\t(highest > lowest) AND\n\t\t(capacity > 0) AND\n\t\t(2014 AND year(2015))\n\nWhat are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?\nSELECT\n\t\tstadium_id, location, name, capacity,\n\t\t(highest - lowest) AS average\n\tFROM stadium\n\tWHERE\n\t\tcapacity > 0 AND\n\t\thighest > 0 AND\n\t\tlowest > 0 AND\n\t\t(highest > lowest) AND\n\t\t(capacity > 0) AND\n\t\t(2014 AND year(2015))\n\nWhat are the names and locations of the stadiums that had concerts that occurred in both 2014 and"}
{"question": "Find the number of concerts happened in the stadium with the highest capacity .", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFind the number of concerts happened in the stadium with the highest capacity .. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFind the number of concerts happened in the stadium with the highest capacity .. \nSELECT  SELECT count(*) AS stadium_count\nFROM    concert\nWHERE   stadium IN (SELECT stadium_id FROM stadium WHERE capacity > 45000)\nGROUP BY stadium_id;\nFind the number of concerts happened in the stadium with the lowest capacity ...\nSELECT  SELECT count(*) AS stadium_count\nFROM    concert\nWHERE   stadium IN (SELECT stadium_id FROM stadium WHERE capacity < 5000)\nGROUP BY stadium_id;\nFind the average number of concerts happened in the stadium with the highest capacity .. \nSELECT  SELECT avg(count(*)) AS stadium_count\nFROM    concert\nWHERE   stadium IN (SELECT stadium_id FROM stadium WHERE capacity > 45000)\nGROUP BY stadium_id;\nFind the average number of concerts happened in the stadium with the lowest capacity .. \nSELECT  SELECT avg(count(*)) AS stadium_count\nFROM    concert\nWHERE   stadium IN (SELECT stadium_id FROM stadium WHERE capacity < 5000)\nGROUP BY stadium_id;\nFind the number of concerts"}
{"question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the number of concerts that occurred in the stadium with the largest capacity ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the number of concerts that occurred in the stadium with the largest capacity ?. \nSELECT  SELECT count(concert_ID) FROM concert_singer WHERE stadium_ID = 1\n#=> 5\n\nWhat is the name of the singer with the second highest capacity in stadium with the largest capacity? \nSELECT  SELECT singer_Name FROM concert_singer WHERE stadium_ID = 1 ORDER BY singer_Name DESC\n#=> \"Hannah Montana\"\n\nWhat is the name of the singer with the third highest capacity in the stadium with the largest capacity? \nSELECT  SELECT singer_Name FROM concert_singer WHERE stadium_ID = 1 ORDER BY singer_Name DESC\n#=> \"Beyonce\"\n\nWhat is the name of the singer with the fourth highest capacity in the stadium with the largest capacity? \nSELECT  SELECT singer_Name FROM concert_singer WHERE stadium_ID = 1 ORDER BY singer_Name DESC\n#=> \"Beyonce\"\n\nWhat is the age of the singer with the lowest capacity in the stadium with the largest capacity? \nSELECT  SELECT singer_Age FROM concert_singer WHERE stadium_ID = 1 ORDER BY singer_Age DESC\n#=> \"30\""}
{"question": "Find the number of pets whose weight is heavier than 10.", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of pets whose weight is heavier than 10.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of pets whose weight is heavier than 10.. \nSELECT  SELECT \nCOUNT(PetID) AS total_pets, \nMAX(weight) AS heaviest_weight \nFROM   Pets \nWHERE  weight > 10 \nGROUP BY  weight;\n\n\n#print total_pets, heaviest_weight\n\n#Find the number of pet IDs with a heaviest weight of 10. \nSELECT  SELECT \nCOUNT(PetID) AS total_pets, \nMAX(weight) AS heaviest_weight \nFROM   Pets \nGROUP BY  weight \nHAVING   heaviest_weight = 10;\n\n#print total_pets, heaviest_weight\n\n#Find the number of pets whose age is 10. \nSELECT  SELECT \nCOUNT(PetID) AS total_pets, \nMAX(age) AS heaviest_age \nFROM   Pets \nGROUP BY  age \nHAVING   heaviest_age = 10;\n\n#print total_pets, heaviest_age\n\n#Find the number of pets whose pet_age is 10. \n"}
{"question": "How many pets have a greater weight than 10?", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many pets have a greater weight than 10?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many pets have a greater weight than 10?. \nSELECT  SELECT  SELECT \nSELECT  SUM(Weigh)>10 \nFROM    Students,\n        Has_Pet,\n        Pets;\n\n#\n# What is the average age of all pets?.\n#\n#SELECT AVG(PetAge) FROM Pets;\n\n#\n# What is the average age of all students who have pets?.\n#\nSELECT AVG(StuAge) FROM Students WHERE Has_Pet IS NOT NULL;\n\n#\n# What is the average age of all students who do not have pets?.\n#\nSELECT AVG(StuAge) FROM Students WHERE Has_Pet IS NULL;\n\n#\n# How many students are between 20 and 30?.\n#\nSELECT COUNT(*) FROM Students WHERE StuAge BETWEEN 20 AND 30;\n\n#\n# How many students are between 20 and 30 and have pets?.\n#\nSELECT COUNT(*) FROM Students WHERE StuAge BETWEEN 20 AND 30 AND Has_Pet IS NOT NULL;\n\n#\n# How many students are between 20 and"}
{"question": "Find the weight of the youngest dog.", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the weight of the youngest dog.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the weight of the youngest dog.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "How much does the youngest dog weigh?", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow much does the youngest dog weigh?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow much does the youngest dog weigh?. \nSELECT  SELECT p.PetType,\n         p.weight,\n         p.Age\n    FROM pets p,\n         student s\n    WHERE s.StuID=p.StuID AND s.PetID=p.PetID\n    ORDER BY s.StuID, p.PetType\n\nBut, how much does the oldest dog weigh?. \nSELECT  SELECT p.PetType,\n         p.weight,\n         p.Age\n    FROM pets p,\n         student s\n    WHERE s.StuID=p.StuID AND s.PetID=p.PetID\n    ORDER BY s.StuID, p.PetType DESC\n\n###\n\n###\nHow many dogs do we have?. \nSELECT  COUNT(p.StuID)\n    FROM pets p\n    WHERE p.StuID IS NOT NULL;\n\n###\n\n###\nHow much does a certain dog weigh?. \nSELECT  SELECT p.PetType,\n         p.weight\n    FROM pets p\n    WHERE p.StuID=1 AND p."}
{"question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the maximum weight for each type of pet. List the maximum weight and pet type.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the maximum weight for each type of pet. List the maximum weight and pet type.. \nSELECT  SELECT \nDISTINCT `Pets`.`PetID`, `Pets`.`PetType`, MAX(`Pets`.`weight`) `Max_weight`\nFROM (\n\t\tSELECT  `Pets`.`PetID`, `Pets`.`PetType`\n\t\tFROM  (\n\t\t\t\tSELECT  `Students`.`PetID`, `Students`.`LName`, `Students`.`Fname`, `Students`.`Age`, `Students`.`Sex`, `Students`.`Major`, `Students`.`Advisor`, `Students`.`city_code`\n\t\t\t\tFROM  `Students`\n\t\t\t\tWHERE `Students`.`CityCode` = 1\n\t\t\t\tGROUP BY `Students`.`PetID`, `Students`.`LName`, `Students`.`Fname`, `Students`.`Age`, `Students`.`Sex`, `Students`.`Major`, `Students`.`Advisor`, `Students`.`city_code`\n\t\t\t\tHAVING COUNT(*) >= 2\n\t\t\t\t"}
{"question": "List the maximum weight and type for each type of pet.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nList the maximum weight and type for each type of pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nList the maximum weight and type for each type of pet.. \nSELECT  SELECT MAX(pet_weight) AS max_weight, pet_type FROM pets WHERE pet_type = 'Cat'\nSELECT  SELECT MAX(pet_weight) AS max_weight, pet_type FROM pets WHERE pet_type = 'Dog'\nSELECT  SELECT MAX(pet_weight) AS max_weight, pet_type FROM pets WHERE pet_type = 'Hamster'\nSELECT  SELECT MAX(pet_weight) AS max_weight, pet_type FROM pets WHERE pet_type = 'Turtle'\n#List all pet weights, grouped by pet type.\nSELECT  SELECT pet_type, MIN(pet_weight) AS min_weight, MAX(pet_weight) AS max_weight FROM pets GROUP BY pet_type\n#Select a specific pet_type.\n#List the pets with a specific pet_type. \nSELECT  SELECT pet_type FROM pets WHERE pet_type = 'Dog'\n#Select a specific pet. \nSELECT  SELECT pet_type FROM pets WHERE pet_type = 'P1'\n#Select all pets by ID\nSELECT  SELECT pet_type FROM pets WHERE pet"}
{"question": "Find number of pets owned by students who are older than 20.", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind number of pets owned by students who are older than 20.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind number of pets owned by students who are older than 20.. \nSELECT  SELECT * FROM student WHERE age > 20;\nSELECT  SELECT * FROM pet WHERE age > 20;\n#Find number of students who have a pet that is a goldfish..\nSELECT  SELECT * FROM student WHERE Pets.PetType = 'Goldfish';\n#Find the oldest goldfish pet owned by a student..\nSELECT  SELECT * FROM pet WHERE Pets.PetType = 'Goldfish';\n#Select the youngest goldfish pet owned by a student..\nSELECT  SELECT * FROM pet WHERE Pets.PetType = 'Goldfish' AND Pet.PetAge > 5;\n#Select the oldest goldfish pet owned by a student whose age is greater than 20..\nSELECT  SELECT * FROM pet WHERE Pets.PetType = 'Goldfish' AND Pet.PetAge > 20 AND Pet.PetAge < 5;\n#Select the youngest goldfish pet owned by a student whose age is greater than 20..\nSELECT  SELECT * FROM pet WHERE Pets.PetType = 'Goldfish' AND Pet.PetAge > 20;\n#Select the oldest"}
{"question": "How many pets are owned by students that have an age greater than 20?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many pets are owned by students that have an age greater than 20?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many pets are owned by students that have an age greater than 20?. \nSELECT  SELECT COUNT(*) as cnt\nFROM  pets\nWHERE\nStuID IS NOT NULL AND\nPetID IS NOT NULL AND\n(age > 20)\n\nHow many pets are owned by students that have an age greater than 20?. \nSELECT  SELECT COUNT(*) as cnt\nFROM  pets\nWHERE\nStuID IS NOT NULL AND\nPetID IS NOT NULL AND\n(age > 20)\n\nHow many pets are owned by students that have an age greater than 20?\nSELECT  SELECT COUNT(*) as cnt\nFROM  pets\nWHERE\nStuID IS NOT NULL AND\nPetID IS NOT NULL AND\n(age > 20)\n\nHow many pets are owned by students that have an age greater than 20?.\nSELECT  SELECT COUNT(*) as cnt\nFROM  pets\nWHERE\nStuID IS NOT NULL AND\nPetID IS NOT NULL AND\n(age > 20)\n\nHow many pets are owned by students that have an age greater than 20?.\nSELECT  SELECT COUNT(*) as cnt\nFROM  pets\nWHERE\nStu"}
{"question": "Find the number of dog pets that are raised by female students (with sex F).", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of dog pets that are raised by female students (with sex F).. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of dog pets that are raised by female students (with sex F).. \nSELECT  SELECT (SELECT COUNT(1) FROM pets WHERE sex = F AND pet_type = 1) AS dog_pets,\nSELECT (SELECT COUNT(1) FROM pets WHERE sex = M AND pet_type = 1) AS cat_pets,\nSELECT (SELECT COUNT(1) FROM pets WHERE sex = F AND pet_type = 2) AS fish_pets,\nSELECT (SELECT COUNT(1) FROM pets WHERE sex = M AND pet_type = 2) AS bird_pets,\nSELECT (SELECT COUNT(1) FROM pets WHERE sex = F AND pet_type = 3) AS rabbit_pets\nFROM student\nWHERE student.sex = F;\n\n### Raising an animal, you can specify whether it is a cat, dog, bird, rabbit or a fish.\n#Each animal has different life expectancy and weight.\n#If you raise a cat, you will have to wait until the cat is 2 years old before you can sell it.\n#If you raise a rabbit, the rabbit will be sold after 10 months old.\n#If you raise a bird, it will be sold"}
{"question": "How many dog pets are raised by female students?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many dog pets are raised by female students?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many dog pets are raised by female students?. \nSELECT  SELECT COUNT(1),\n        FROM Pet,\n        WHERE PetType = 'dog' AND Advisor = 100\n    AND PetOwner = 50\n    AND Advisor = 50\n    AND PetAge >= 3 AND PetAge < 5\n    AND PetAge >= 2 AND PetAge <= 5\n    AND PetWeight >= 10 AND PetWeight < 15\n\\end{code}\n\n### sql_1 (from sql_1.txt):\n\nHow many students have dogs?. \nSELECT  SELECT COUNT(1),\n        FROM Student,\n        WHERE Advisor = 50\n    AND PetAge >= 2 AND PetAge <= 5\n    AND PetOwner = 50\n    AND Advisor = 100\n\n### sql_2 (from sql_2.txt):\n\nHow many students have dogs?. \nSELECT  SELECT COUNT(1),\n        FROM Student,\n        WHERE Advisor = 50\n    AND PetAge >= 2 AND PetAge <= 5\n    AND PetOwner = 50\n    AND Advisor = 100\n    AND Pet"}
{"question": "Find the number of distinct type of pets.", "sql": "SELECT count(DISTINCT pettype) FROM pets", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of distinct type of pets.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of distinct type of pets.. \nSELECT  SELECT DISTINCT\nFROM  Pets\nWHERE\nPetType = \"Cat\" \nAND pet_age = 2;\n\n# Pets with age of 2, weight less than 10 kg, and from the same student.\nSELECT\nFROM  Pets\nWHERE\n(pet_age <= 2 AND pet_weight <= 10) AND\nStuID = 1;\n#AND PetType = \"Cat\";\n#AND PetType = \"Dog\";\n#AND PetType = \"Dog\";\n#AND PetType = \"Cat\";\n#AND pet_weight = 10;\n#AND PetType = \"Dog\";\n#AND pet_age >= 3 AND pet_age <= 5;\n#AND PetType = \"Cat\";\n#AND pet_age >= 3 AND pet_age <= 5 AND pet_weight < 10;\n#AND PetType = \"Cat\";\n#AND pet_age >= 3 AND pet_age <= 5 AND pet_weight = 10;\n\n\n#Sort pets by pet age\nSELECT  SELECT DISTINCT\nFROM  Pets\nORDER"}
{"question": "How many different types of pet are there?", "sql": "SELECT count(DISTINCT pettype) FROM pets", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many different types of pet are there?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many different types of pet are there?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nstudent_id, major, advisor, city_code, pet_id, pet_type, pet_age, pet_weight\nFROM pets_1 WHERE pet_type IS NOT NULL\nGROUP BY student_id, major, advisor, city_code, pet_id, pet_type, pet_age, pet_weight\nHAVING COUNT(*) > 1\nSELECT  COUNT(*)\nFROM pets_1 WHERE pet_type IS NOT NULL\nGROUP BY student_id, major, advisor, city_code, pet_id, pet_type, pet_age, pet_weight\nHAVING COUNT(*) > 1\n\n####\n\nHow many different types of pet are there?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nstudent_id, major, advisor, city_code, pet_id, pet_type, pet_age, pet_weight\nFROM pets_1 WHERE pet_type IS NOT NULL\nGROUP BY student_id, major, advisor, city_code, pet_id, pet_type, pet_age, pet_weight\nHAVING COUNT(*) > 1\nSELECT "}
{"question": "Find the first name of students who have cat or dog pet.", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name of students who have cat or dog pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name of students who have cat or dog pet.. \nSELECT  SELECT  SELECT\nFROM    pets \nWHERE   \n        (pet_type = 'cat' AND weight > 5)\n       OR (pet_type = 'dog' AND weight > 5)\n       OR (pet_type = 'cat' AND weight <= 5)\n       OR (pet_type = 'dog' AND weight <= 5)\n       OR (pet_type = 'cat' AND weight >= 5)\n       OR (pet_type = 'dog' AND weight >= 5)\n"}
{"question": "What are the first names of every student who has a cat or dog as a pet?", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the first names of every student who has a cat or dog as a pet?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the first names of every student who has a cat or dog as a pet?. \nSELECT  SELECT  Student.StuID, \n   Student.LName, \n   Student.Fname, \n   Student.Age, \n   Student.Sex, \n   Student.Major, \n   Student.Advisor, \n   City.city_code \nFROM    Student \nJOIN    Pets ON  Pets.StuID = Student.StuID\nWHERE   Pets.PetType = 'Cat'\nOR      Pets.PetType = 'Dog'\n\nSELECT  SELECT  Student.StuID, \n   Student.LName, \n   Student.Fname, \n   Student.Age, \n   Student.Sex, \n   Student.Major, \n   Student.Advisor, \n   City.city_code \nFROM    Student \nJOIN    Pets ON  Pets.StuID = Student.StuID\nWHERE   Pets.PetType = 'Cat'\nOR      Pets.PetType = 'Dog'\n\n#This is a SELECT statement that will return the name and pet type of every student"}
{"question": "Find the first name of students who have both cat and dog pets .", "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name of students who have both cat and dog pets .. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name of students who have both cat and dog pets .. \nSELECT  SELECT lname,\nFROM    Student s1 INNER JOIN \nHas_Pet hp ON hp.StuID = s1.StuID INNER JOIN \nPets p ON p.PetID = hp.PetID\nWHERE  hp.PetType = 'Cat' AND p.PetType = 'Dog'\nGROUP BY s1.StuID\nHAVING COUNT(DISTINCT p.PetType) = 2;\n#print s1.StuID\n#print p.PetType\n#print p.PetAge\n#print p.PetWeight\n#print hp.PetType\n#print hp.StuID\n#print p.PetType\n#print p.PetAge\n#print p.PetWeight\n#print s1.StuID\n#print s1.LName\n#print s1.Fname\n#print s1.Age\n#print s1.Sex\n#print s1.Major\n#print s1.Advisor\n#print s1.city_code\n\n##\n#The result is:\n"}
{"question": "What are the students' first names who have both cats and dogs as pets?", "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the students' first names who have both cats and dogs as pets?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the students' first names who have both cats and dogs as pets?. \nSELECT  SELECT *\nFROM    Student AS S\n    INNER JOIN Has_Pet AS HP ON S.StuID = HP.StuID\n    INNER JOIN Pets AS P ON P.PetID = HP.PetID\nWHERE\n    S.LName LIKE 'Rich%'\n    AND HP.PetType = 'Cat'\n    AND P.PetType = 'Dog'\nGROUP BY S.StuID\nORDER BY S.StuID;\n#SELECT * FROM Student AS S, Has_Pet AS HP, Pets AS P WHERE S.StuID = HP.StuID AND P.PetID = HP.PetID AND S.LName LIKE 'Rich%' AND HP.PetType = 'Cat' AND P.PetType = 'Dog' GROUP BY S.StuID ORDER BY S.StuID;\n\n\n\n#############################################################################################################\n# 2. \n# SELECT  P.PetType, SUM(pet_age) AS AverageAge\n# FROM    Pets AS P\n# GROUP BY P.PetType"}
{"question": "Find the major and age of students who do not have a cat pet.", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the major and age of students who do not have a cat pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the major and age of students who do not have a cat pet.. \nSELECT  SELECT stu.id, stu.lname, stu.fname, stu.age, stu.sex, stu.major, stu.advisor,\ncity_code\nFROM students stu, pets p\nWHERE stu.id = p.stu_id AND p.pet_type = 'cat'\nGROUP BY stu.id, stu.lname, stu.fname, stu.age, stu.sex, stu.major, stu.advisor,\nORDER BY stu.id;\n\n#Find the major and age of students who have a cat pet..\nSELECT  SELECT stu.id, stu.lname, stu.fname, stu.age, stu.sex, stu.major, stu.advisor,\ncity_code\nFROM students stu, pets p\nWHERE stu.id = p.stu_id AND p.pet_type = 'cat'\nGROUP BY stu.id, stu.lname, stu.fname, stu.age, stu.sex, stu.major, stu.ad"}
{"question": "What major is every student who does not own a cat as a pet, and also how old are they?", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat major is every student who does not own a cat as a pet, and also how old are they?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat major is every student who does not own a cat as a pet, and also how old are they?. \nSELECT  SELECT \nStuID, Major, Age\nFROM    students s LEFT JOIN pets p ON s.StuID = p.StuID\nWHERE   p.PetType IS NULL\nGROUP BY StuID, Major, Age\nHAVING  HAVING \nCOUNT(1) = 0 AND Age >= 18\nORDER BY StuID, Age DESC, Major\n#############################################################################\n\n\n\n\n##### MYSQL ####\n\n# create a database\nmysql -D pets_1 -e \"CREATE DATABASE pets_1;\"\n\n# create a table\nmysql -D pets_1 -e \"USE pets_1; CREATE TABLE students(StuID INT NOT NULL AUTO_INCREMENT, LName VARCHAR(255) NOT NULL, Fname VARCHAR(255) NOT NULL, Age INTEGER NOT NULL, Sex VARCHAR(255) NOT NULL, Major VARCHAR(255) NOT NULL, Advisor VARCHAR(255) NOT NULL, city_code VARCHAR(255) NOT NULL, PRIMARY KEY (StuID));\"\nmysql -D pets_1 -e"}
{"question": "Find the id of students who do not have a cat pet.", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id of students who do not have a cat pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id of students who do not have a cat pet.. \nSELECT  SELECT * FROM student\nWHERE NOT EXISTS (\n    SELECT pet_id FROM pet WHERE student_id=id\n);\n#Find the id of students who have cats, with no other pets.\nSELECT  SELECT * FROM student\nWHERE EXISTS (\n    SELECT pet_id FROM pet WHERE student_id=id\n) AND NOT EXISTS (\n    SELECT pet_id FROM pet WHERE student_id=id\n);\n#Find the id of students who have cats and dogs, with no other pets.\nSELECT  SELECT * FROM student\nWHERE EXISTS (\n    SELECT pet_id FROM pet WHERE student_id=id\n) AND EXISTS (\n    SELECT pet_id FROM pet WHERE student_id=id\n) AND NOT EXISTS (\n    SELECT pet_id FROM pet WHERE student_id=id\n);\n#Find the id of students who have no cats, dogs or fish.\nSELECT  SELECT * FROM student\nWHERE NOT EXISTS (\n    SELECT pet_id FROM pet WHERE student_id=id\n) AND NOT EXISTS (\n    SELECT pet_id FROM pet WHERE student_id=id\n) AND NOT EXISTS (\n    SELECT pet_id FROM pet WHERE student_id"}
{"question": "What are the ids of the students who do not own cats as pets?", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the ids of the students who do not own cats as pets?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the ids of the students who do not own cats as pets?. \nSELECT  SELECT  SELECT \nWHERE  WHERE  WHERE  WHERE \nFROM    FROM    FROM    FROM   \nStuID,PetID   StuID,PetID   StuID,PetID   StuID,PetID  \nWHERE    WHERE    WHERE    WHERE    WHERE   \nStuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet)  StuID NOT IN (SELECT StuID FROM Pet) "}
{"question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and age of students who have a dog but do not have a cat as a pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and age of students who have a dog but do not have a cat as a pet.. \nSELECT  SELECT \nStuID,\nFname,\nage\nFROM   Student\nINNER JOIN\nPets ON StuID=PetID\nWHERE\nPetType='Dog'\nAND NOT PetType='Cat'\nGROUP BY\nStuID,\nFname,\nage\n;\n\nWhat is the name of the most popular dog? \nSELECT \nMajor\nFROM   Student\nINNER JOIN \nPets\nON\nStudent.PetType=Pet.PetType\nWHERE\nPetType='Dog'\nGROUP BY\nMajor\nORDER BY\nCOUNT(Major) DESC\nLIMIT 1;\n\nHow old is the student with the lowest age?\nSELECT \nMost_Young\nFROM   Student\nINNER JOIN \nPets\nON\nStudent.PetType=Pet.PetType\nWHERE\nPetType='Dog'\nAND PetAge=min(PetAge)\nGROUP BY\nMost_Young\nORDER BY\nPetAge;\n\nWhat is the age of a student who has a cat but does not have a dog as a pet?\nSELECT"}
{"question": "What is the first name of every student who has a dog but does not have a cat?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the first name of every student who has a dog but does not have a cat?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the first name of every student who has a dog but does not have a cat?. \nSELECT  SELECT  SELECT \n \nA.StuID, \n \n  A.Fname,\n  B.LName,\n  C.Sex,\n  D.Major,\n  E.Advisor,\n  F.city_code,\n  G.PetID,\n  H.PetType,\n  I.PetAge,\n  J.pet_weight\nFROM\n  Student A\n  INNER JOIN Student B ON B.StuID = A.StuID\n  LEFT JOIN Pet  C ON A.StuID = C.StuID\n  INNER JOIN Student D ON D.StuID = A.StuID\n  LEFT JOIN Pet  E ON E.StuID = D.StuID\n  INNER JOIN Student F ON F.StuID = A.StuID\n  LEFT JOIN Pet  G ON F.StuID = G.StuID\n  INNER JOIN Student H ON H.StuID = A.StuID\n  LEFT JOIN Pet  I ON I.StuID = H.StuID\n  INNER JOIN Student J ON J.StuID"}
{"question": "Find the type and weight of the youngest pet.", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the type and weight of the youngest pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the type and weight of the youngest pet.. \nSELECT  SELECT  SELECT  SELECT\nStudent('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\nHas_Pet('StuID', 'PetID')\nPets('PetID', 'PetType', 'pet_age', 'weight')\nWHERE\nFROM (\nSELECT StuID, Fname FROM Student\nWHERE\nLName IN ('Anna', 'Kate', 'Kate')\nAND Sex = 'Female'\n)\nAND StuID = PetID;\n\n# ?Pets(PetID, PetType, pet_age, weight)\n# WHERE\n# StuID = PetID\n# AND StuID = ?\n\n# AND PetType = ?\n# ? PetType\n# WHERE\n# StuID = ?\n# AND PetType = ?\n# ? PetType\n# WHERE\n# StuID = ?\n# AND PetType = ?\n\n# WHERE\n# StuID = ?\n# AND StuID = ?\n# AND PetType = ?\n# ? PetType\n\n# SELECT ?\n# StuID = ?\n#"}
{"question": "What type of pet is the youngest animal, and how much does it weigh?", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat type of pet is the youngest animal, and how much does it weigh?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat type of pet is the youngest animal, and how much does it weigh?. \nSELECT  SELECT Pets.PetType, \n                   Pet.PetAge,\n                   Pet.PetWeight\n            FROM Pets \n            JOIN Students ON Students.StuID = Pets.StuID\n            JOIN Has_Pet ON Has_Pet.StuID = Students.StuID\n            JOIN Pets ON Pets.PetID = Has_Pet.PetID\n                     WHERE Students.Sex = 'F'\n                        AND Pets.PetAge < Pets.PetAge;\n\n#What is the age of the oldest animal, and what type of pet is it? \n#SELECT  SELECT Students.StuID, \n#                   Students.LName,\n#                   Students.Fname,\n#                   Students.Age,\n#                   Students.Sex,\n#                   Students.Major,\n#                   Students.Advisor,\n#                   Students.city_code, \n#                   Pets.PetID,\n#                   Pets.PetType,\n#                "}
{"question": "Find the id and weight of all pets whose age is older than 1.", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id and weight of all pets whose age is older than 1.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id and weight of all pets whose age is older than 1.. \nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT"}
{"question": "What is the id and weight of every pet who is older than 1?", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the id and weight of every pet who is older than 1?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the id and weight of every pet who is older than 1?. \nSELECT  SELECT  SELECT\nSELECT  Student.StuID, Pet.PetID, PetType.PetType, Pet.PetAge, Pet.PetWeight\nFROM    Student\nINNER JOIN  PetType\nON      Student.StuID = PetType.StuID\nINNER JOIN  Pet\nON      PetType.PetType = Pet.PetType\nWHERE    Pet.PetAge > 1;\n\nWhat is the age and weight of every student who owns a cat?. \nSELECT  SELECT  SELECT\nSELECT  Student.StuID, PetType.PetType, Pet.PetAge, Pet.PetWeight\nFROM    Student\nINNER JOIN  PetType\nON      Student.StuID = PetType.StuID\nINNER JOIN  Pet\nON      PetType.PetType = Pet.PetType\nWHERE    Pet.PetType = 'cat';\n\nWhat is the age and weight of every student who owns a dog?. \nSELECT  SELECT  SELECT\nSELECT  Student.StuID, PetType.PetType, Pet.PetAge, Pet.PetWeight\n"}
{"question": "Find the average and maximum age for each type of pet.", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average and maximum age for each type of pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average and maximum age for each type of pet.. \nSELECT  SELECT SUM(pet_age) / COUNT(pet_type) AS avg_age\nFROM   pets\nWHERE  pet_type IN (1,2)\nGROUP BY pet_type\n\nSELECT  SELECT MAX(pet_age) AS max_age\nFROM   pets\nWHERE  pet_type IN (1,2)\nGROUP BY pet_type\n\n\n\n# Select the minimum age for each pet_type.\nSELECT  SELECT MIN(pet_age)\nFROM   pets\nWHERE  pet_type IN (1,2)\nGROUP BY pet_type\n\n# Select the pets that have a maximum age less than 100.\nSELECT  SELECT pet_age\nFROM   pets\nWHERE  pet_age <= 100\nGROUP BY pet_type\n\n# Find the maximum weight of the pet that has a pet_age less than 100.\nSELECT  SELECT MAX(weight)\nFROM   pets\nWHERE  pet_age <= 100\nGROUP BY pet_age\n\n# Find the average weight for the pet that has a pet_age less than 100.\nSELECT  SELECT"}
{"question": "What is the average and maximum age for each pet type?", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average and maximum age for each pet type?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average and maximum age for each pet type?. \nSELECT  SELECT AVG(age), MAX(age) FROM Pets GROUP BY pet_type;\nSELECT  SELECT AVG(age), MAX(age) FROM Pets GROUP BY pet_type;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Find the average weight for each pet type.", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average weight for each pet type.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average weight for each pet type.. \nSELECT  SELECT AVG(weight) FROM Pets WHERE PetType = 1\nSELECT  SELECT AVG(weight) FROM Pets WHERE PetType = 2\nSELECT  SELECT AVG(weight) FROM Pets WHERE PetType = 3\nSELECT  SELECT AVG(weight) FROM Pets WHERE PetType = 4\nSELECT  SELECT AVG(weight) FROM Pets WHERE PetType = 5\nSELECT  SELECT AVG(weight) FROM Pets WHERE PetType = 6\nSELECT  SELECT AVG(weight) FROM Pets WHERE PetType = 7\n\n###\n#   #SQLite SQL pets_2 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average weight for each pet type.. \nSELECT  SELECT AVG(weight) FROM Pets WHERE PetType = 1\nSELECT  SELECT AVG(weight)"}
{"question": "What is the average weight for each type of pet?", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average weight for each type of pet?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average weight for each type of pet?. \nSELECT  SELECT AVG(PetWeight) FROM Pets WHERE PetType IN ('Dog', 'Cat', 'Rabbit')\nWhich type of pet is most popular?.\nSELECT * FROM Pets WHERE PetType IN ('Dog', 'Cat', 'Rabbit') ORDER BY PetType;\nWhich pets are the oldest?.\nSELECT * FROM Pets WHERE PetAge IN (SELECT MAX(PetAge) FROM Pets);\nA pet is sick. \nINSERT INTO Pets(PetID, PetType, PetAge, PetWeight) VALUES (34, 'Dog', 5, 30);\nSELECT * FROM Pets WHERE PetID = 34;\nHow many students have a dog?.\nSELECT * FROM Students WHERE Has_Pet = 1;\nIf a student has a dog, what is the type of dog?.\nSELECT PetType FROM Students WHERE Has_Pet = 1;\nWhat is the weight of a cat?.\nSELECT PetWeight FROM Students WHERE Has_Pet = 1;\nWhat is the average age for a dog?.\nSELECT AVG(PetAge) FROM Pets;\nWhat is the"}
{"question": "Find the first name and age of students who have a pet.", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and age of students who have a pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and age of students who have a pet.. \nSELECT  SELECT  SELECT\nStudent.LName, Student.Fname, Student.Age, Pet.PetType, Pet.PetAge, Pet.PetWeight\nFROM  Student\nLEFT JOIN Pets ON Student.StuID = Pets.StuID\nWHERE  Pet.PetType = 'cat'\n\n########################################################################\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n"}
{"question": "What are the different first names and ages of the students who do have pets?", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the different first names and ages of the students who do have pets?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the different first names and ages of the students who do have pets?. \nSELECT  SELECT * FROM pets WHERE PetID IN (SELECT PetID FROM Has_Pet WHERE StudentID IN \n(SELECT StuID FROM Student WHERE Sex = 'M') AND Has_Pet.StudentID <> 1) \nORDER BY StudentID ASC, PetID ASC\n#The students' first names and ages are:\n#Bob, 25, 10.0\n#Joe, 26, 9.0\n#Dave, 24, 10.0\n#John, 26, 9.0\n#Mike, 24, 10.0\n\n#Using the same tables, but this time with different keys.\n#What are the different first names and ages of the students who do have pets?. \nSELECT  SELECT * FROM pets WHERE StudentID IN (SELECT StuID FROM Student WHERE Sex = 'M') \nWHERE PetID IN (SELECT PetID FROM Has_Pet WHERE StudentID IN \n(SELECT StuID FROM Student WHERE Sex = 'M') AND Has_Pet.StudentID <> 1) \nORDER BY StudentID ASC, PetID ASC\n#The students' first"}
{"question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id of the pet owned by student whose last name is \u2018Smith\u2019.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id of the pet owned by student whose last name is \u2018Smith\u2019.. \nSELECT  SELECT Student.StuID,\n          Pet.PetID,\n          Pets.PetType,\n          Pets.pet_age,\n          Pets.weight\nFROM Students AS Student, \n     Pets AS Pet,\n     Pets AS Pets\nWHERE Student.StuID = Pet.StuID\n  AND Student.StuID = Pets.StuID\n  AND Pets.PetID = Smith;\n\n#StuID |  PetID |  PetType |  pet_age | weight\n--------+---------+----------+------------+--------\n     22 |    23 |  cat      |     5       |  50\n\n#Find the name of the pet owned by the student with id 22..\nSELECT  Student.StuID,\n          Pets.PetType,\n          Pets.pet_age,\n          Pets.weight\nFROM Students AS Student, \n     Pets AS Pet,\n     Pets AS Pets\nWHERE Student.StuID = Pet.StuID\n  AND PetType = 'cat';\n\n#StuID |  PetType"}
{"question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the id of the pet owned by the student whose last name is 'Smith'?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the id of the pet owned by the student whose last name is 'Smith'?. \nSELECT  SELECT * FROM student WHERE last_name='Smith'; \nThis is a valid SQL query, but what if you wanted to get the pet ID of the pet owned by the student with the last name of 'Smith'? \nSELECT  SELECT * FROM student WHERE last_name='Smith';\nAND pet_id=SELECT pet_id FROM pets WHERE student_id=\n\n#Based on the above, how would you write a program that would read the student data file and output the information in the pet data file.\n##EXAMPLE\n#import sqlite3, csv\n#DB = sqlite3.connect('../data/pets.db')\n#DB = sqlite3.connect('../data/pet_students.db')\n#db = sqlite3.connect('../data/pets.db')\n\n#csvreader = csv.reader(open('../data/pets.csv', 'rb'), delimiter=' ')\n#csvreader = csv.reader(open('../data/pet_students.csv', 'rb'), delimiter=' ')\n\n#db.execute(\"SELECT * FROM student\")\n#db.execute(\"SELECT * FROM student\")\n#db.execute"}
{"question": "Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of pets for each student who has any pet and student id.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of pets for each student who has any pet and student id.. \nSELECT  SELECT  SELECT\nStuID, PetID, PetType, pet_age, weight\nFROM  pets\nWHERE\nStuID in (SELECT StuID FROM Has_Pet)\nGROUP BY StuID, PetType, pet_age, weight\nHAVING Count(PetType) = Count(PetID)\n\n#Does this work?\n### SELECT  SELECT  SELECT\nStuID, PetID, PetType, pet_age, weight\nFROM  pets\nWHERE\nStuID in (SELECT StuID FROM Has_Pet)\nGROUP BY StuID, PetType, pet_age, weight\nHAVING Count(PetType) = Count(PetID)\n\n#Nope...\n#What am I missing?\n\n### SELECT  SELECT  SELECT\nStuID, PetID, PetType, pet_age, weight\nFROM  pets\nWHERE\nStuID in (SELECT StuID FROM Has_Pet)\nGROUP BY StuID, PetType, pet_age, weight\nHAVING Count(PetType) = Count(PetID)\n\n\n#Wow! That really works"}
{"question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFor students who have pets , how many pets does each student have ? list their ids instead of names .. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFor students who have pets , how many pets does each student have ? list their ids instead of names .. \nSELECT  SELECT  select,count(StuID), PetID\nFROM  Pet  \nWHERE  1=1\n\n\n\n# 1. pets_1.sql\n# INSERT INTO pets_1 VALUES ('StuID1', 'PetType1', 'PetAge1', 'PetWeight1');\n# INSERT INTO pets_1 VALUES ('StuID2', 'PetType2', 'PetAge2', 'PetWeight2');\n# INSERT INTO pets_1 VALUES ('StuID3', 'PetType3', 'PetAge3', 'PetWeight3');\n# INSERT INTO pets_1 VALUES ('StuID4', 'PetType4', 'PetAge4', 'PetWeight4');\n# INSERT INTO pets_1 VALUES ('StuID5', 'PetType5', 'PetAge5', 'PetWeight5');\n# INSERT INTO pets_1 VALUES ('StuID6', 'PetType6', 'PetAge6', 'PetWeight6');\n# INSERT INTO pets_1 VALUES ('StuID7', 'PetType7', '"}
{"question": "Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and gender of student who have more than one pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and gender of student who have more than one pet.. \nSELECT  SELECT StuID,\nLName,\nFname,\nAge,\nSex,\nMajor,\nAdvisor,\ncity_code\nFROM    Pets\nWHERE   StuID\nIN (SELECT StuID\nFROM    Students\nGROUP BY StuID\nHAVING COUNT(PetID) > 1)\n\\end{code}\n\nComment: I did this with the group by and the having part, but I need to know how to select the first and last name, the gender, and the major of the student, as well as how to return the list of pets that belongs to each student with all the information about the pet such as the pet_type, the pet_age, the weight, and the city_code.\n\nComment: For pets: SELECT PetID,PetType,pet_age,weight\nFROM Students\nWHERE StuID IN (SELECT StuID FROM Students GROUP BY StuID HAVING COUNT(PetID) > 1)\n\nComment: And for student:  SELECT StuID,LName,Fname,Age,Sex,Major,Advisor,city_code FROM Students\nWHERE StuID"}
{"question": "What is the first name and gender of the all the students who have more than one pet?", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the first name and gender of the all the students who have more than one pet?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the first name and gender of the all the students who have more than one pet?. \nSELECT  SELECT  SELECT\nStu_ID, Stu_LName, Stu_Fname, Stu_Sex, Stu_Major, Stu_Advisor, Stu_city_code,\nHas_Pet.Stu_ID, Has_Pet.Pet_ID, \nStu_Has_Pet.Pet_Type, Stu_Has_Pet.Pet_Age, Stu_Has_Pet.Pet_Weight,\nPet.Pet_ID, Pet.Pet_Type, Pet.Pet_Age, Pet.Pet_Weight\nFROM (Student\nJOIN Has_Pet ON Stu_ID = Has_Pet.Stu_ID)\nJOIN Pets ON Stu_Has_Pet.Pet_ID = Pets.Pet_ID\nWHERE Stu_Has_Pet.Stu_ID > 1;\nSELECT Stu_ID, Stu_LName, Stu_Fname, Stu_Sex, Stu_Major, Stu_Advisor, Stu_city_code,\nHas_Pet.Stu_ID, Has_Pet.Pet_ID,"}
{"question": "Find the last name of the student who has a cat that is age 3.", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the last name of the student who has a cat that is age 3.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the last name of the student who has a cat that is age 3.. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  `StuID`, `LName`, `Fname`, `Age`, `Sex`, `Major`, `Advisor`, `city_code` \nFROM   `pets_1` \nWHERE  `PetID` = 2 AND `PetType` = 3 \nORDER  BY `LName` \nLIMIT  1 \n\n# select the id of the last student (the one with the cat)\nSELECT  `StuID` \nFROM   `pets_1` \nWHERE  `PetID` = 2 AND `PetType` = 3 \n\n# select the name of the last student (the one with the cat)\nSELECT  `LName` \nFROM   `pets_1` \nWHERE  `PetID` = 2 AND `PetType` = 3 \n\n# select the age of the last student (the one with the cat)\nSELECT  `Age` \nFROM   `pets_1` \nWHERE  `PetID` = 2 AND `PetType` ="}
{"question": "What is the last name of the student who has a cat that is 3 years old?", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the last name of the student who has a cat that is 3 years old?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the last name of the student who has a cat that is 3 years old?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n\tSELECT \t\tSELECT \t\tSELECT \t\tSELECT \t\tSELECT \t\tSELECT \t\tSELECT \t\tSELECT \n\tStudent('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Find the average age of students who do not have any pet .", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average age of students who do not have any pet .. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average age of students who do not have any pet .. \nSELECT  SELECT AVG(PetID) FROM Pets WHERE PetType = 0\n\n# Find the average age of students who do have pet\nSELECT  SELECT AVG(PetID) FROM Pets WHERE PetType = 1\n\nFind the average age of students who have a pet with age 2 years\nSELECT  SELECT AVG(PetID) FROM Pets WHERE PetType = 1 AND PetAge = 2\n\nFind the average age of students who have a pet with age 3 years\nSELECT  SELECT AVG(PetID) FROM Pets WHERE PetType = 1 AND PetAge = 3\n\nFind the average age of students who have a pet with age 4 years\nSELECT  SELECT AVG(PetID) FROM Pets WHERE PetType = 1 AND PetAge = 4\n\nFind the average age of students who have a pet with age 5 years\nSELECT  SELECT AVG(PetID) FROM Pets WHERE PetType = 1 AND PetAge = 5\n\nFind the average age of students who have a pet with age 6 years\nSELECT  SELECT AVG(PetID) FROM Pets WHERE PetType ="}
{"question": "What is the average age for all students who do not own any pets ?", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average age for all students who do not own any pets ?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average age for all students who do not own any pets ?. \nSELECT  SELECT AVG(age) FROM student WHERE pet_id is NULL\nWhat is the average age for all students who own a dog? \nSELECT  SELECT AVG(age) FROM student WHERE pet_id = 'Dog'\nWhat is the average age for all students who own a cat? \nSELECT  SELECT AVG(age) FROM student WHERE pet_id = 'Cat'\nWhat is the average age for all students who own a rabbit? \nSELECT  SELECT AVG(age) FROM student WHERE pet_id = 'Rabbit'\nWhat is the average age for all students who own a hamster? \nSELECT  SELECT AVG(age) FROM student WHERE pet_id = 'Hamster'\nWhat is the average age for all students who own a fish? \nSELECT  SELECT AVG(age) FROM student WHERE pet_id = 'Fish'\nWhat is the average age for all students who own a snake? \nSELECT  SELECT AVG(age) FROM student WHERE pet_id = 'Snake'\nWhat is the average age for all students who own a turtle? \nSELECT  SELECT AVG(age) FROM student WHERE"}
{"question": "How many continents are there?", "sql": "SELECT count(*) FROM CONTINENTS;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many continents are there?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many continents are there?. \n}
{"question": "What is the number of continents?", "sql": "SELECT count(*) FROM CONTINENTS;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of continents?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of continents?. \nSELECT  SELECT COUNT(*) FROM continents\nWhat is the number of countries in the United States?. \nSELECT  SELECT COUNT(*) FROM countries\nWhat is the number of car manufacturers in the United States?. \nSELECT  SELECT COUNT(*) FROM car_makers\nWhat is the name of the first car manufacturer in the United States?. \nSELECT  SELECT * FROM car_makers WHERE Country='USA' AND Maker='Ford'\nWhat is the name of the second car manufacturer in the United States?. \nSELECT  SELECT * FROM car_makers WHERE Country='USA' AND Maker='GM'\nWhat is the name of the third car manufacturer in the United States?. \nSELECT  SELECT * FROM car_makers WHERE Country='USA' AND Maker='Chrysler'\nWhat are the names of the first three car manufacturers in the United States?. \nSELECT  SELECT * FROM car_makers WHERE Country='USA' AND Name IN (Ford, GM, Chrysler)\nWhat is the name of the first car manufacturer in the United States? \nSELECT  SELECT * FROM car_makers WHERE Country='USA' AND Maker='Ford"}
{"question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries does each continent have? List the continent id, continent name and the number of countries.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries does each continent have? List the continent id, continent name and the number of countries.. \nSELECT  SELECT  SELECT\nContinents.ContId, Continents.Continent, Countries.CountyId FROM Continents \nLEFT JOIN Countries ON Continents.ContId = Countries.ContId\nGROUP BY Continents.ContId\nORDER BY Countries.CountyId\n\n#######\nHow many car makers are there? List the car maker id, car maker, full name and the number of countries.. \nSELECT  SELECT  SELECT\nCarMakers.Id, CarMakers.Maker, FullName, Countries.CountyId FROM CarMakers \nLEFT JOIN Countries ON CarMakers.Id = Countries.CountyId\nGROUP BY CarMakers.Id\nORDER BY CarMakers.Id\n\n#######\nHow many models are there for each car maker? List the model id, model, car maker and the number of models.. \nSELECT  SELECT  SELECT\nCarMakers.Id, CarMakers.Maker, Models.ModelId, Models.Model, Countries.CountyId FROM CarMakers \nLEFT JOIN Models ON CarMakers.Id = Models"}
{"question": "For each continent, list its id, name, and how many countries it has?", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor each continent, list its id, name, and how many countries it has?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor each continent, list its id, name, and how many countries it has?. \nSELECT  SELECT * FROM continent\nSELECT  SELECT * FROM country WHERE continent = continent.Continent\nSELECT  SELECT * FROM car_makers WHERE country = country.CountryName\nSELECT  SELECT * FROM model_list WHERE car_makers = car_makers.Id\nSELECT  SELECT * FROM car_names WHERE maker = maker.Id\nSELECT  SELECT * FROM cars_data WHERE car_names = car_names.MakeId\n\nFor each country, list its id, name, how many car_makers it has?, and its car_names?. \nSELECT  SELECT * FROM countries\nSELECT  SELECT * FROM car_makers WHERE countries = countries.CountryId\nSELECT  SELECT * FROM car_names WHERE car_makers = car_makers.Id\n\nFor each country, list its id, name, how many model_list it has? and its car_names?. \nSELECT  SELECT * FROM countries\nSELECT  SELECT * FROM model_list WHERE countries = countries.CountryId\nSELECT  SELECT * FROM car_names WHERE model_list = model_list.Id\n\nFor each car_maker, list its id, name, and how many cars it has?. "}
{"question": "How many countries are listed?", "sql": "SELECT count(*) FROM COUNTRIES;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries are listed?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries are listed?. \n}
{"question": "How many countries exist?", "sql": "SELECT count(*) FROM COUNTRIES;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries exist?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries exist?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT"}
{"question": "How many models does each car maker produce? List maker full name, id and the number.", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many models does each car maker produce? List maker full name, id and the number.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many models does each car maker produce? List maker full name, id and the number.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "What is the full name of each car maker, along with its id and how many models it produces?", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the full name of each car maker, along with its id and how many models it produces?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the full name of each car maker, along with its id and how many models it produces?. \nSELECT  SELECT car_makers.Id, car_makers.FullName, COUNT(*) as car_makers_count \nFROM car_makers, car_names \nGROUP BY car_makers.Id;\nSELECT  SELECT car_makers.Id, car_makers.FullName, car_makers.car_names.ModelId, car_names.Maker, car_names.FullName \nFROM car_makers, car_names \nWHERE car_makers.FullName IS NOT NULL;\n\n#SELECT  SELECT cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year \n#FROM cars_data, model_list \n#GROUP BY cars_data.Id;\n#SELECT  SELECT car_makers.Id, car_makers.FullName, car_makers.car_names.ModelId, car_names.Maker, car_names.FullName \n#FROM car_makers, model_"}
{"question": "Which model of the car has the minimum horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model of the car has the minimum horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model of the car has the minimum horsepower?. \n}
{"question": "What is the model of the car with the smallest amount of horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the model of the car with the smallest amount of horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the model of the car with the smallest amount of horsepower?. \nSELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT "}
{"question": "Find the model of the car whose weight is below the average weight.", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the model of the car whose weight is below the average weight.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the model of the car whose weight is below the average weight.. \n}
{"question": "What is the model for the car with a weight smaller than the average?", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the model for the car with a weight smaller than the average?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the model for the car with a weight smaller than the average?. \n}
{"question": "Find the name of the makers that produced some cars in the year of 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the name of the makers that produced some cars in the year of 1970?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the name of the makers that produced some cars in the year of 1970?. \nSELECT  SELECT MAKERS.id, \n        MAKERS.name, \n        COUNT(MODELS.id) AS CARS\nFROM MODELS \nJOIN MAKERS ON MODELS.maker_id = MAKERS.id \nWHERE year(models.year) = '1970';\n\nSELECT  SELECT MAKERS.id, \n        MAKERS.name, \n        COUNT(MODELS.id) AS CARS\nFROM MODELS \nJOIN MAKERS ON MODELS.maker_id = MAKERS.id \nWHERE year(models.year) = '1970' AND model_name = 'Camaro';\n\nSELECT  SELECT MAKERS.id, \n        MAKERS.name, \n        COUNT(MODELS.id) AS CARS\nFROM MODELS \nJOIN MAKERS ON MODELS.maker_id = MAKERS.id \nWHERE year(models.year) = '1970' AND model_name = 'Firebird';\n\nSELECT  SELECT MAKERS.id, \n        MA"}
{"question": "What is the name of the different car makers who produced a car in 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of the different car makers who produced a car in 1970?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of the different car makers who produced a car in 1970?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT "}
{"question": "Find the make and production time of the cars that were produced in the earliest year?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the make and production time of the cars that were produced in the earliest year?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the make and production time of the cars that were produced in the earliest year?. \nSELECT  SELECT car_maker_1.id, car_maker_1.maker, car_maker_1.model, car_maker_1.make\n  FROM car_maker_1\n WHERE  car_maker_1.year < 1900;\n\n### SQLite SQL car_2 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the make and production time of the cars that were produced in the latest year?.\nSELECT  SELECT car_maker_2.id, car_maker_2.maker, car_maker_2.model, car_maker_2.make\n  FROM car_maker_2\n WHERE  car"}
{"question": "What is the maker of the carr produced in the earliest year and what year was it?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maker of the carr produced in the earliest year and what year was it?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maker of the carr produced in the earliest year and what year was it?. \nSELECT  SELECT\n    manufacturer,\n    model,\n    \"YEAR\"\nFROM\n    \"car_1\"\n\nSELECT\n    manufacturer,\n    model,\n    \"YEAR\"\nFROM\n    \"car_1\"\nJOIN\n    (\n    SELECT\n        MIN(\"YEAR\") AS \"MIN_YEAR\",\n        \"MANUFACTURER\",\n        \"MODEL\"\n    FROM\n        \"car_1\"\n    GROUP BY\n        \"MANUFACTURER\",\n        \"MODEL\"\n    )\n    ON \"car_1\".\"MANUFACTURER\" = \"car_1\".\"MIN_MANUFACTURER\"\n    AND \"car_1\".\"MODEL\" = \"car_1\".\"MIN_MODEL\";\n###\n\n\n\n"}
{"question": "Which distinct car models are the produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich distinct car models are the produced after 1980?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich distinct car models are the produced after 1980?. \nSELECT  SELECT DISTINCT ModelId FROM car_makers WHERE ModelId >= 1980;\nWhich car models are produced in a country? \nSELECT  SELECT DISTINCT CountryId, CarMakerId, ModelId FROM cars_data WHERE CountryId = 'United States' AND ModelId >= 1980;\nWhich are the countries that produce the models 'C10' and 'C100'? \nSELECT  SELECT DISTINCT CountryId, CarMakerId, ModelId FROM cars_data WHERE ModelId = 'C10' AND ModelId = 'C100' AND Continent IN ('Africa','Asia','Australia','Europe','North America')\n\n## \n#Example 2:\n\n## With SQLite SQL, we have the following indexes:\n#cars_data('ModelId', 'CountryId')\n#cars_data('CarMakerId', 'CountryId')\n#cars_data('Id', 'CountryId', 'CarMakerId')\n\n## A query is able to use indexes to order and reduce the number of result rows by using an index key. \n##"}
{"question": "What are the different models for the cards produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models for the cards produced after 1980?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models for the cards produced after 1980?. \nSELECT  SELECT *,make_date\nFROM    car_makers\nWHERE   make_date >= '1980-01-01 00:00:00';\nSELECT  SELECT *,make_date\nFROM    cars_data\nWHERE   make_date >= '1980-01-01 00:00:00';\nSELECT  SELECT *,make_date\nFROM    car_names\nWHERE   make_date >= '1980-01-01 00:00:00';\n###\n\n#Create a new car_1 database.\nsqlite3 car_1.db \"DROP TABLE IF EXISTS cars_data;CREATE TABLE cars_data (\n  id INT NOT NULL,\n  mpg REAL NOT NULL,\n  cylinders INTEGER NOT NULL,\n  edisplacement REAL NOT NULL,\n  horsepower INTEGER NOT NULL,\n  weight REAL NOT NULL,\n  accelerate INTEGER NOT NULL,\n  make_date TEXT NOT NULL,\n  PRIMARY KEY (id)\n)\";\n#Add the data to the"}
{"question": "How many car makers are there in each continents? List the continent name and the count.", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car makers are there in each continents? List the continent name and the count.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car makers are there in each continents? List the continent name and the count.. \nSELECT  SELECT COUNT(*) FROM `car_1` WHERE Maker.Continent.ContinentId\nWHERE Maker.Country.CountryId\nGROUP BY Maker.Continent.ContinentId;\nSELECT Maker.Continent.ContinentId AS `Continent`, COUNT(*) AS `Count`\nFROM `car_1` AS `Maker`\nWHERE Maker.Country.CountryId\nGROUP BY Maker.Continent.ContinentId;\n\nHow many different car models are there in each continent? List the continent name and the count.. \nSELECT  SELECT COUNT(*) FROM `car_1` WHERE Model.Continent.ContinentId\nWHERE Model.Make.MakeId\nGROUP BY Model.Continent.ContinentId;\nSELECT Model.Continent.ContinentId AS `Continent`, COUNT(*) AS `Count`\nFROM `car_1` AS `Model`\nWHERE Model.Make.MakeId\nGROUP BY Model.Continent.ContinentId;\n\nHow many different car models are there in each country? List the country name and the count.. \nSELECT  SELECT COUNT(*) FROM `car_1` WHERE Model.Country.CountryId\nWHERE Model."}
{"question": "What is the name of each continent and how many car makers are there in each one?", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of each continent and how many car makers are there in each one?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of each continent and how many car makers are there in each one?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nCONSTRAINT car_cont_ContId\n  FOREIGN KEY (ContId)\n  REFERENCES continents(ContId)\nCONSTRAINT car_makers_MakerId\n  FOREIGN KEY (Maker)\n  REFERENCES car_makers(Maker)\nCONSTRAINT car_makers_Id\n  FOREIGN KEY (Id)\n  REFERENCES car_makers(Id)\nCONSTRAINT car_makers_MakerName\n  FOREIGN KEY (MakerName)\n  REFERENCES car_makers(MakerName)\nCONSTRAINT car_makers_ModelId\n  FOREIGN KEY (ModelId)\n  REFERENCES car_makers(ModelId)\nCONSTRAINT car_makers_Year\n  FOREIGN KEY (Year)\n  REFERENCES car_makers(Year)\nCONSTRAINT car_names_MakeId\n  FOREIGN KEY (MakeId)\n  REFERENCES car_names(Make"}
{"question": "Which of the countries has the most car makers? List the country name.", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich of the countries has the most car makers? List the country name.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich of the countries has the most car makers? List the country name.. \nSELECT  SELECT  SELECT  SELECT  SELECT \nFROM  FROM  FROM  FROM  FROM \nWHERE  WHERE  WHERE  WHERE  WHERE \nCONDITION  CONDITION  CONDITION  CONDITION  CONDITION \nORDER BY  ORDER BY  ORDER BY  ORDER BY  ORDER BY \nTITLE  TITLE  TITLE  TITLE  TITLE  TITLE \n\n\n\n\n### SQL SELECT car_1_makers, and show the number of cars for each country\n\nSELECT  SELECT  SELECT  SELECT  SELECT \nFROM  FROM  FROM  FROM  FROM \nWHERE  WHERE  WHERE  WHERE  WHERE \nCONDITION  CONDITION  CONDITION  CONDITION  CONDITION \nORDER BY  ORDER BY  ORDER BY  ORDER BY  ORDER BY \nTITLE  TITLE  TITLE  TITLE  TITLE  TITLE \n\n\n\n\n### SQL SELECT car_1_makers, and show the number of cars for each country\n\nSELECT  SELECT  SELECT  SELECT  SELECT \nFROM  FROM  FROM "}
{"question": "What is the name of the country with the most car makers?", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of the country with the most car makers?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of the country with the most car makers?. \nSELECT  SELECT DISTINCT Country.Name FROM CarMaker JOIN Car MAINTAIN (INNER JOIN Continent ON Continent.Id = Country.ContinentId) WHERE Car.MakerId = CarMaker.Id GROUP BY CarMaker.CountryId;\nWhat is the name of the country with the most car makers?.\nSELECT Car.Country, COUNT(*) FROM CarMaker JOIN Car WHERE Car.MakerId = CarMaker.Id GROUP BY Car.Country;\nWhat is the name of the country with the most car models?.\nSELECT Car.MakerId, COUNT(*) FROM Car Maintain (INNER JOIN CarModel ON CarModel.Id = Car.ModelId) WHERE Car.MakerId = CarMaker.Id GROUP BY CarMaker.CountryId;\nWhat is the name of the country with the most car names?.\nSELECT CarMaker.Name, MAX(Car.Name) FROM Car JOIN CarMaker WHERE Car.MakerId = CarMaker.Id GROUP BY CarMaker.Name;\nWhat is the name of the country with the most cars?.\nSELECT Car.MakerId, COUNT(*) FROM Car JOIN CarMaker WHERE Car.M"}
{"question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models are produced by each maker ? Only list the count and the maker full name .. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models are produced by each maker ? Only list the count and the maker full name .. \nSELECT  SELECT count(*) as CNT, maker, full_name FROM car_1 GROUP BY maker, full_name\nHow many cars are produced by each car maker?\nSELECT COUNT(*) as CNT, maker, model FROM car_1 GROUP BY maker, model\nHow many models are produced by each car maker?\nSELECT COUNT(*) as CNT, model FROM car_1 GROUP BY model\nHow many cars are produced by each country?\nSELECT COUNT(*) as CNT, country FROM car_1 GROUP BY country\nHow many car models are produced by each country?\nSELECT COUNT(*) as CNT, country, model FROM car_1 GROUP BY country, model\nHow many cars are produced by each continent?\nSELECT COUNT(*) as CNT, continent FROM car_1 GROUP BY continent\nHow many car models are produced by each continent?\nSELECT COUNT(*) as CNT, continent, model FROM car_1 GROUP BY continent, model\nThe query in the previous section uses GROUP BY, as we saw previously. \nThere are many situations, however, where we want to use grouping in a different way. \nGROUP BY is so powerful because it enables us to return multiple columns, but if we have"}
{"question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of car models that are produced by each maker and what is the id and full name of each maker?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of car models that are produced by each maker and what is the id and full name of each maker?. \nSELECT  SELECT \n#  SELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \n"}
{"question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the accelerate of the car make amc hornet sportabout (sw)?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the accelerate of the car make amc hornet sportabout (sw)?. \nSELECT  SELECT\n    amchornetsportabout.Id,\n    MAX(amchornetsportabout.Year) AS Year,\n    MAX(amchornetsportabout.Accelerate) AS Accelerate,\n    MAX(amchornetsportabout.Weight) AS Weight,\n    MAX(amchornetsportabout.MPG) AS MPG,\n    MAX(amchornetsportabout.Cylinders) AS Cylinders,\n    MAX(amchornetsportabout.Edispl) AS Edispl,\n    MAX(amchornetsportabout.Horsepower) AS Horsepower\nFROM amchornetsportabout\nGROUP BY amchornetsportabout.Id\n\nSELECT  SELECT\n    amchornetsportabout.Id,\n    MAX(amchornetsportabout.Year) AS Year,\n    MAX(amchornetsportabout.Accelerate) AS Accelerate,\n    MAX(amchornetsportabout.Weight) AS Weight,\n    MAX(amchornetsportabout"}
{"question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow much does the car accelerate that makes amc hornet sportabout (sw)?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow much does the car accelerate that makes amc hornet sportabout (sw)?. \nSELECT  SELECT \n  CONTINENTS.ContId, \n  CONTINENTS.Continent, \n  COUNTRIES.CountryId, \n  COUNTRIES.CountryName, \n  COUNTRIES.Continent, \n  CAR_MAKERS.Id, \n  CAR_MAKERS.Maker, \n  CAR_MAKERS.FullName, \n  CAR_MAKERS.Continent, \n  MODEL_LIST.Id, \n  MODEL_LIST.Maker, \n  MODEL_LIST.Model, \n  MODEL_LIST.Maker, \n  CAR_NAMES.MakeId, \n  CAR_NAMES.Model, \n  CAR_NAMES.Make, \n  CAR_DATA.Id, \n  CAR_DATA.MPG, \n  CAR_DATA.Cylinders, \n  CAR_DATA.Edispl, \n  CAR_DATA.Horsepower, \n  CAR_DATA.Weight, \n "}
{"question": "How many car makers are there in france?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car makers are there in france?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car makers are there in france?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT "}
{"question": "What is the number of makers of care in France?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of makers of care in France?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of makers of care in France?. \nSELECT  SELECT DISTINCT maker FROM car_makers ORDER BY maker;\nSELECT car_makers.maker, COUNT(*) AS maker_count\nFROM car_makers;\n\nWhat is the number of models of car in France?. \nSELECT  SELECT DISTINCT model FROM car_makers ORDER BY model;\nSELECT car_makers.model, COUNT(*) AS model_count\nFROM car_makers;\n\nWhat is the number of make of car in France?. \nSELECT  SELECT DISTINCT make FROM car_makers ORDER BY make;\nSELECT car_makers.make, COUNT(*) AS make_count\nFROM car_makers;\n\nWhat is the number of car in France?. \nSELECT  SELECT DISTINCT car FROM car_makers ORDER BY car;\nSELECT car_makers.car, COUNT(*) AS car_count\nFROM car_makers;\n\nWhat is the average of the mileage of car in France?. \nSELECT  SELECT DISTINCT model, AVG(mpg) FROM cars_data WHERE model = 'BMW 320i' ORDER BY model;\nSELECT car_makers.maker, car"}
{"question": "How many car models are produced in the usa?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models are produced in the usa?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models are produced in the usa?. \nSELECT  SELECT model_list.Id, model_list.Maker, model_list.Model, model_list.Year FROM model_list\nSELECT  SELECT model_list.Id, model_list.Maker, model_list.Model, model_list.Year FROM model_list\nSELECT  SELECT model_list.Id, model_list.Maker, model_list.Model, model_list.Year FROM model_list\nSELECT  SELECT model_list.Id, model_list.Maker, model_list.Model, model_list.Year FROM model_list\nSELECT  SELECT model_list.Id, model_list.Maker, model_list.Model, model_list.Year FROM model_list\nSELECT  SELECT model_list.Id, model_list.Maker, model_list.Model, model_list.Year FROM model_list\nSELECT  SELECT model_list.Id, model_list.Maker, model_list.Model, model_list.Year FROM model_list\nSELECT  SELECT model_list.Id, model_list.Maker, model_list.Model, model_list.Year FROM model_list\nSELECT  SELECT"}
{"question": "What is the count of the car models produced in the United States?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the count of the car models produced in the United States?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the count of the car models produced in the United States?. \nSELECT  SELECT MAX(cars_data.ModelId)\nFROM    cars_data\nGROUP BY cars_data.Maker, cars_data.Model\nThe example shows the use of the MAX function and the GROUP BY keyword in order to achieve the desired result.\n##### SQL SQLITE - INSERT STATEMENT ######\nThe INSERT statement inserts a record into a table. If the table doesn't exist, the INSERT statement creates the table. \nCREATE TABLE `cars`( \n  `Id` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY, \n  `MPG` REAL NOT NULL, \n  `Cylinders` INTEGER NOT NULL, \n  `Edispl` REAL NOT NULL, \n  `Horsepower` REAL NOT NULL, \n  `Weight` REAL NOT NULL, \n  `Accelerate` REAL NOT NULL, \n  `Year` REAL NOT NULL, \n  `Model` INTEGER NOT NULL, \n  `MakeId` INTEGER NOT NULL, \n  `CountryId` INTEGER NOT NULL, \n  `FullName`"}
{"question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average miles per gallon(mpg) of the cars with 4 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average miles per gallon(mpg) of the cars with 4 cylinders?. \nSELECT  SELECT avg(mpg) AS mpg_4, count(Id) AS num_4 FROM car_1 \nWHERE 4 IN (Cylinders)\n\nWhat is the average miles per gallon of the cars with 6 cylinders?.\nSELECT  SELECT avg(mpg) AS mpg_6, count(Id) AS num_6 FROM car_1 \nWHERE 6 IN (Cylinders)\n\nWhat is the average miles per gallon of the cars with 8 cylinders?.\nSELECT  SELECT avg(mpg) AS mpg_8, count(Id) AS num_8 FROM car_1 \nWHERE 8 IN (Cylinders)\n\nWhat is the average miles per gallon of the cars with 10 cylinders?.\nSELECT  SELECT avg(mpg) AS mpg_10, count(Id) AS num_10 FROM car_1 \nWHERE 10 IN (Cylinders)\n\nWhat is the average miles per gallon of the cars with 12 cylinders?.\nSELECT  SELECT avg(mpg) AS mpg_1"}
{"question": "What is the average miles per gallon of all the cards with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average miles per gallon of all the cards with 4 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average miles per gallon of all the cards with 4 cylinders?. \nSELECT  SELECT avg(mpg) FROM car_1 WHERE cylinders = 4\n\nWhat is the average miles per gallon of all the cards with 4 cylinders and 250000 miles?. \nSELECT  SELECT avg(mpg) FROM car_1 WHERE cylinders = 4 AND miles = 250000\n\nWhat is the average miles per gallon of all the cars with 1992 year and 250000 miles?. \nSELECT  SELECT avg(mpg) FROM car_1 WHERE model = '92' AND miles = 250000\n\nWhat is the average miles per gallon of all the cars with 1992 year, 4 cylinders and 250000 miles?. \nSELECT  SELECT avg(mpg) FROM car_1 WHERE year = '92' AND cylinders = 4 AND miles = 250000\n\nWhat is the average miles per gallon of all the cars with 1992 year and 250000 miles?. \nSELECT  SELECT avg"}
{"question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the smallest weight of the car produced with 8 cylinders on 1974 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the smallest weight of the car produced with 8 cylinders on 1974 ?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n\n\n"}
{"question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the minimum weight of the car with 8 cylinders produced in 1974 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the minimum weight of the car with 8 cylinders produced in 1974 ?. \nSELECT  SELECT * FROM car_1 WHERE 8 = model_id and year = 1974\nAnd why would you use the SUM() function in this case ?\nSELECT  SELECT * FROM car_1 WHERE 8 = model_id and year = 1974 GROUP BY model_id\n\n\n#Given two car_1 tables, car_2 and car_3, with the following data:\n#car_1:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\n#car_2:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('"}
{"question": "What are all the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are all the makers and models?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are all the makers and models?. \nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT "}
{"question": "What are the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the makers and models?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the makers and models?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "What are the countries having at least one car maker? List name and id.", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the countries having at least one car maker? List name and id.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the countries having at least one car maker? List name and id.. \nSELECT  SELECT country_name, country_id FROM countries WHERE country_id IN (SELECT id FROM car_makers GROUP BY id HAVING COUNT(*) > 1)\n\nWhat are the car makers which have at least 1 car? \nSELECT  SELECT car_maker, COUNT(*) AS cnt FROM car_makers GROUP BY car_maker HAVING COUNT(*) > 1;\n\nWhat are the cars with at least 1 car maker? \nSELECT  SELECT car_name, COUNT(car_maker) AS cnt FROM cars GROUP BY car_maker HAVING COUNT(car_maker) > 1;\n\nWhat are the cars with at least 1 country? \nSELECT  SELECT car_name, COUNT(country_name) AS cnt FROM cars GROUP BY country_name HAVING COUNT(country_name) > 1;\n\nWhat are the cars having at least 1 country? \nSELECT  SELECT car_name, COUNT(country_name) AS cnt FROM cars GROUP BY country_name HAVING COUNT(country_name) > 1;\n\nWhat are the cars having at least 1 model? \nSELECT  SELECT"}
{"question": "What are the names and ids of all countries with at least one car maker?", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names and ids of all countries with at least one car maker?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names and ids of all countries with at least one car maker?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What is the number of the cars with horsepower more than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of the cars with horsepower more than 150?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of the cars with horsepower more than 150?. \n}
{"question": "What is the number of cars with a horsepower greater than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with a horsepower greater than 150?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with a horsepower greater than 150?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT"}
{"question": "What is the average weight of cars each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average weight of cars each year?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average weight of cars each year?. \nSELECT  SELECT AVG(weight) FROM cars_data WHERE year = 2018\n\n# SELECT * FROM countries WHERE country LIKE '%India%';\n\n# SELECT COUNT(*) FROM countries WHERE country LIKE '%India%';\n\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n\n# SELECT * FROM countries WHERE country LIKE '%South Africa%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%Austria%';\n# SELECT * FROM countries WHERE country LIKE '%A"}
{"question": "What is the average weight and year for each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average weight and year for each year?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average weight and year for each year?. \n}
{"question": "Which countries in europe have at least 3 car manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich countries in europe have at least 3 car manufacturers?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich countries in europe have at least 3 car manufacturers?. \nSELECT  SELECT DISTINCT\n    SELECT \"Continent\", \"Continent\" AS \"ContId\",\n    SELECT \"CountryName\", \"Continent\" AS \"ContId\"\nFROM \"countries\"\nWHERE \"Maker\" IS NOT NULL AND \"Country\" IS NOT NULL\nGROUP BY \"Continent\", \"Continent\"\nHAVING COUNT(*) >= 3\nORDER BY \"Country\" ASC\n\n# SELECT DISTINCT \"Country\", \"Country\", \"Country\" AS \"ContId\",\n# SELECT \"Continent\", \"Continent\" AS \"ContId\"\n# FROM \"countries\"\n# WHERE \"Maker\" IS NOT NULL AND \"Country\" IS NOT NULL\n# GROUP BY \"Continent\", \"Continent\"\n# HAVING COUNT(*) >= 3\n\n# SELECT \"Maker\", \"Maker\", \"Maker\" AS \"ContId\"\n# FROM \"countries\"\n# WHERE \"Maker\" IS NOT NULL AND \"Continent\" IS NOT NULL\n# GROUP BY \"Maker\", \"Maker\"\n# HAVING COUNT(*) >= 3\n\n\n# SELECT DISTINCT \"Country\", \"Continent\", \"Continent\" AS \""}
{"question": "What are the names of all European countries with at least 3 manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names of all European countries with at least 3 manufacturers?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names of all European countries with at least 3 manufacturers?. \nSELECT  SELECT \n  Continent AS ContId,\n  Continent AS Continent,\n  COUNT(*) AS Cnt,\n  COUNT(*) AS Cnt,\n  (COUNT(*)/Cnt) AS Count,\n  GROUP_CONCAT(Maker, ', ') AS Maker,\n  GROUP_CONCAT(FullName, ', ') AS FullName,\n  GROUP_CONCAT(Maker, ', ') AS Model\n \n  GROUP BY \n    GROUP BY \n      Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Continent\n    ,  Cont"}
{"question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum horsepower and the make of the car models with 3 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum horsepower and the make of the car models with 3 cylinders?. \nSELECT  SELECT DISTINCT MAX(HP) AS HP, Maker FROM car_makers GROUP BY Maker; \nSELECT Maker, MAX(HP) AS HP FROM car_makers GROUP BY Maker; \nSELECT Maker, MAX(HP) AS HP FROM car_makers GROUP BY Maker HAVING Max(HP) < 250; \nSELECT Maker, MAX(HP) AS HP FROM car_makers GROUP BY Maker HAVING Max(HP) < 250 ORDER BY Maker; \nSELECT Maker, MAX(HP) AS HP FROM car_makers GROUP BY Maker HAVING Max(HP) < 250 ORDER BY Maker; \nSELECT Maker, MAX(HP) AS HP FROM car_makers GROUP BY Maker HAVING Max(HP) < 250 ORDER BY Maker; \nSELECT Maker, MAX(HP) AS HP FROM car_makers GROUP BY Maker HAVING Max(HP) < 250; \nSELECT Maker, MAX(HP) AS HP FROM car_makers GROUP BY Maker H"}
{"question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the largest amount of horsepower for the models with 3 cylinders and what make is it?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the largest amount of horsepower for the models with 3 cylinders and what make is it?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT\n    continents.Continent,\n    countries.CountryName,\n    car_makers.Maker,\n    car_makers.FullName,\n    car_makers.Id,\n    model_list.Model,\n    model_list.Id,\n    car_names.Make,\n    car_names.Id,\n    cars_data.Id,\n    cars_data.MPG,\n    cars_data.Cylinders,\n    cars_data.Edispl,\n    cars_data.Horsepower,\n    cars_data.Weight,\n    cars_data.Accelerate,\n    cars_data.Year\nFROM\n    continents\nINNER JOIN\n    countries\n    ON\n        countries.Continent = continents.ContId\nINNER JOIN\n    car_makers\n    ON\n        car_makers.Country = countries.CountryId\nINNER JOIN\n    model_list\n    ON\n        model_list.Id = car_makers.Id\nINNER JOIN\n"}
{"question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model saves the most gasoline? That is to say, have the maximum miles per gallon.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model saves the most gasoline? That is to say, have the maximum miles per gallon.. \nSELECT  SELECT * FROM model_list WHERE MPG is MAX\n\nWhich model saves the least gasoline? That is to say, have the minimum miles per gallon.. \nSELECT  SELECT * FROM model_list WHERE MPG is MIN\n\nWhich model is the most expensive? That is to say, have the highest MSRP.. \nSELECT  SELECT * FROM model_list WHERE MSRP is MAX\n\nWhich model is the least expensive? That is to say, have the lowest MSRP.. \nSELECT  SELECT * FROM model_list WHERE MSRP is MIN\n\nWhich car maker sells the most cars? That is to say, have the most Count.. \nSELECT  SELECT * FROM car_makers WHERE Count is MAX\n\nWhich car maker sells the least cars? That is to say, have the least Count.. \nSELECT  SELECT * FROM car_makers WHERE Count is MIN\n\nWhich car maker has the highest average MPG? That is to say, have the highest AverageMPG.. \nSELECT  SELECT * FROM car_makers WHERE AverageMPG is MAX\n\nWhich car maker"}
{"question": "What is the car model with the highest mpg ?", "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the car model with the highest mpg ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the car model with the highest mpg ?. \n}
{"question": "What is the average horsepower of the cars before 1980?", "sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average horsepower of the cars before 1980?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average horsepower of the cars before 1980?. \nSELECT  SELECT avg(Horsepower) FROM cars WHERE Year<1980\n\nWhat is the average horsepower of the cars after 1980? \nSELECT  SELECT avg(Horsepower) FROM cars WHERE Year>1980\n\nWhat is the average horsepower of the cars after 1980? \nSELECT  SELECT avg(Horsepower) FROM cars WHERE Year>1980\n\nWhat is the average weight of the cars before 1980? \nSELECT  SELECT avg(Weight) FROM cars WHERE Year<1980\n\nWhat is the average weight of the cars after 1980? \nSELECT  SELECT avg(Weight) FROM cars WHERE Year>1980\n\nWhat is the average horsepower of the cars after 1980? \nSELECT  SELECT avg(Horsepower) FROM cars WHERE Year>1980\n\nWhat is the average weight of the cars after 1980? \nSELECT  SELECT avg(Weight) FROM cars WHERE Year>1980\n\nWhat is the average horsepower of the cars after 19"}
{"question": "What is the average horsepower for all cars produced before 1980 ?", "sql": "select avg(horsepower) from cars_data where year  <  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average horsepower for all cars produced before 1980 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average horsepower for all cars produced before 1980 ?. \n}
{"question": "What is the average edispl of the cars of model volvo?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average edispl of the cars of model volvo?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average edispl of the cars of model volvo?. \nSELECT  SELECT COUNT(1) FROM car_1 WHERE Model=\u201cVolvo\u201d\n\n### Data structure for MySQL\nCREATE TABLE IF NOT EXISTS car_2 (Id INT NOT NULL AUTO_INCREMENT,\nModel VARCHAR(20) NOT NULL,\nHorsepower INT NOT NULL,\nWeight INT NOT NULL,\nYear INT NOT NULL,\nMPG INT NOT NULL);\n\nINSERT INTO car_2 VALUES (1,\u201cVolvo\u201d,120,1500,2012,35);\nINSERT INTO car_2 VALUES (2,\u201cVW\u201d,115,1500,2012,42);\nINSERT INTO car_2 VALUES (3,\u201cMercedes\u201d,135,1500,2012,33);\nINSERT INTO car_2 VALUES (4,\u201cFord\u201d,105,1500,2012,26);\nINSERT INTO car_2 VALUES (5,\u201cRenault\u201d,130,1500,2012,32);\nINSERT INTO car_2 VALUES (6,\u201cBMW\u201d,110,"}
{"question": "What is the average edispl for all volvos?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average edispl for all volvos?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average edispl for all volvos?. \nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId = 12\nSELECT  SELECT AVG(edispl) FROM cars_data WHERE MakeId"}
{"question": "What is the maximum accelerate for different number of cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum accelerate for different number of cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum accelerate for different number of cylinders?. \nSELECT  SELECT MAX(accelerate) FROM cars_data WHERE cylinders=3;\n\nWhat is the smallest accelerate for different number of cylinders?. \nSELECT  SELECT MIN(accelerate) FROM cars_data WHERE cylinders=4;\n\n#what is the number of cylinders for the car with the largest accelerate?.\nSELECT  SELECT cylinders FROM cars_data WHERE MIN(accelerate)\n\n#what is the smallest accelerate for the car with 3 cylinders?.\nSELECT  SELECT MIN(accelerate) FROM cars_data WHERE cylinders=3\n\n#what is the number of cylinders for the car with the smallest weight?.\nSELECT  SELECT cylinders FROM cars_data WHERE MIN(weight)\n\n#what is the smallest weight for the car with 6 cylinders?.\nSELECT  SELECT MIN(weight) FROM cars_data WHERE cylinders=6\n\n#what is the number of cylinders for the car with the largest MPG?.\nSELECT  SELECT cylinders FROM cars_data WHERE MIN(MPG)\n\n#what is the"}
{"question": "What is the maximum accelerate for all the different cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum accelerate for all the different cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum accelerate for all the different cylinders?. \nSELECT  SELECT MAX(accelerate) FROM cars_data WHERE MPG='21' AND cylinders='4' AND edispl='4.0' AND weight='3300' AND accelerate>='21'. \nSELECT  SELECT MAX(accelerate) FROM cars_data WHERE MPG='21' AND cylinders='4' AND edispl='4.0' AND weight='3300' AND accelerate<='21'. \nSELECT  SELECT MAX(accelerate) FROM cars_data WHERE MPG='21' AND cylinders='8' AND edispl='5.0' AND weight='3200' AND accelerate>='21'. \nSELECT  SELECT MAX(accelerate) FROM cars_data WHERE MPG='21' AND cylinders='8' AND edispl='5.0' AND weight='3200' AND accelerate<='21'. \nSELECT  SELECT MAX(accelerate) FROM cars_data WHERE MPG='21' AND cylinders='8' AND edispl='5.0' AND weight"}
{"question": "Which model has the most version(make) of cars?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model has the most version(make) of cars?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model has the most version(make) of cars?. \n}
{"question": "What model has the most different versions?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat model has the most different versions?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat model has the most different versions?. \n}
{"question": "How many cars have more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars have more than 4 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars have more than 4 cylinders?. \nSELECT  SELECT car_makers.Maker,\n        SUM(car_names.MakeId)\n        FROM car_1\n        JOIN car_makers ON car_makers.Id = car_names.Maker\n        JOIN countries ON countries.Id = car_names.Country\n        GROUP BY car_makers.Maker\n        HAVING SUM(car_names.MakeId) > 3;\n\n\nHow many cars have more than 4 cylinders? \nSELECT  SELECT car_makers.Maker,\n        COUNT(car_names.MakeId)\n        FROM car_1\n        JOIN car_makers ON car_makers.Id = car_names.Maker\n        JOIN countries ON countries.Id = car_names.Country\n        GROUP BY car_makers.Maker\n        HAVING COUNT(car_names.MakeId) > 3;\n\n\n\n\nHow many cars have more than 4 cylinders? \nSELECT  SELECT car_makers.Maker,\n        SUM(car_names.MakeId)\n        FROM car_1\n        JOIN car_makers ON car_m"}
{"question": "What is the number of cars with more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with more than 4 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with more than 4 cylinders?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "how many cars were produced in 1980?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nhow many cars were produced in 1980?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nhow many cars were produced in 1980?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nCOUNTY_M  COUNTY_A  COUNTY_B  COUNTY_C  COUNTY_D  COUNTY_E  COUNTY_F \nMODEL_M   MODEL_A   MODEL_B   MODEL_C   MODEL_D   MODEL_E   MODEL_F  \nCOUNTY_M_ID COUNTY_A_ID COUNTY_B_ID COUNTY_C_ID COUNTY_D_ID COUNTY_E_ID COUNTY_F_ID \nMODEL_M_ID MODEL_A_ID MODEL_B_ID MODEL_C_ID MODEL_D_ID MODEL_E_ID MODEL_F_ID\n\nfrom car_1\nwhere Maker='BMW'\nGROUP BY County_Id, Model_Id\n\nWhat is the total number of cars produced in 1980?.\nSELECT COUNTY_M, COUNTY_A, COUNTY_B, COUNTY_C, COUNTY_D,"}
{"question": "In 1980, how many cars were made?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nIn 1980, how many cars were made?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nIn 1980, how many cars were made?. \n}
{"question": "How many car models were produced by the maker with full name American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models were produced by the maker with full name American Motor Company?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models were produced by the maker with full name American Motor Company?. \n}
{"question": "What is the number of car models created by the car maker American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of car models created by the car maker American Motor Company?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of car models created by the car maker American Motor Company?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT"}
{"question": "Which makers designed more than 3 car models? List full name and the id.", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich makers designed more than 3 car models? List full name and the id.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich makers designed more than 3 car models? List full name and the id.. \nSELECT  SELECT \nSELECT  SELECT\n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT "}
{"question": "What are the names and ids of all makers with more than 3 models?", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names and ids of all makers with more than 3 models?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names and ids of all makers with more than 3 models?. \nSELECT  SELECT MAKER, COUNT(*) FROM MAKER_MODEL GROUP BY MAKER;\n\nWhat are the names and ids of all countries with at least 3 models?. \nSELECT  SELECT COUNTRY, COUNT(*) FROM MAKER_MODEL GROUP BY COUNTRY;\n\nWhat are the names and ids of all cars with at least 3 models?. \nSELECT  SELECT CAR, COUNT(*) FROM MAKER_MODEL GROUP BY CAR;\n\nWhat are the names and ids of all makers with 2 or more models?. \nSELECT  SELECT MAKER, COUNT(MOD) FROM MAKER_MODEL GROUP BY MAKER HAVING (COUNT(MOD)>1);\n\nWhat are the names and ids of all cars with a price over 100000?. \nSELECT  SELECT CAR, COUNT(*) FROM CARS_DATA WHERE CAR_PRICE>100000 GROUP BY CAR;\n\nWhat are the names and ids of all cars with an acceleration under 5 seconds?. \nSELECT  SELECT CAR, COUNT(*) FROM CARS_DATA WHERE CAR_AC"}
{"question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich distinctive models are produced by maker with the full name General Motors or weighing more than 3500?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich distinctive models are produced by maker with the full name General Motors or weighing more than 3500?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models created by either the car maker General Motors or weighed more than 3500?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models created by either the car maker General Motors or weighed more than 3500?. \n}
{"question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nIn which years cars were produced weighing no less than 3000 and no more than 4000 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nIn which years cars were produced weighing no less than 3000 and no more than 4000 ?. \nSELECT  SELECT car_1.id,\n                    car_1.year,\n                    car_1.mpg,\n                    car_1.cylinders,\n                    car_1.edispl,\n                    car_1.horsepower,\n                    car_1.weight,\n                    car_1.accelerate\n                    FROM car_1\n                    WHERE weight >= 3000 AND weight <= 4000\n                    AND horsepower >= 100 AND horsepower <= 200\n                    AND cylinders >= 4 AND cylinders <= 6\n                    AND edispl >= 30 AND edispl <= 40;\n\n\n\nThe following is a general statement that can be used for queries on tables without a primary key:\n#create a temporary table called tmp_table to store the rows\n#copy the rows of table car_1 into it\n#replace the table car_1 by the temporary table\n#drop the temporary table\n#drop the table car_1\n\n\n\n\n\n\n\n\n\n\n\n#Select all the cars that have a"}
{"question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?. \nSELECT  SELECT *, (cars_data.MPG) AS \"MPG\", (cars_data.Cylinders) AS \"Cylinders\", (cars_data.Edispl) AS \"Edispl\", (cars_data.Horsepower) AS \"Horsepower\", (cars_data.Weight) AS \"Weight\", (cars_data.Accelerate) AS \"Accelerate\", (cars_data.Year) AS \"Year\" FROM \"car_1\" ORDER BY \"Year\" DESC, \"MPG\", \"Accelerate\", \"Weight\" ASC, \"Cylinders\", \"Edispl\", \"Horsepower\" DESC, \"Model\" ASC; \n## Cars that weighed less than 4000\nSELECT *, 4000 AS \"Year\" FROM \"car_1\" WHERE \"MPG\" < 4000 ORDER BY \"Year\" DESC, \"MPG\" ASC; \n## Cars that weighted more than 3000\nSELECT *, 3000 AS \"Year\" FROM \"car_1\" WHERE \"Weight\" > 30"}
{"question": "What is the horsepower of the car with the largest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the horsepower of the car with the largest accelerate?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the horsepower of the car with the largest accelerate?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT "}
{"question": "What is the horsepower of the car with the greatest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the horsepower of the car with the greatest accelerate?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the horsepower of the car with the greatest accelerate?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "For model volvo, how many cylinders does the car with the least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor model volvo, how many cylinders does the car with the least accelerate have?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor model volvo, how many cylinders does the car with the least accelerate have?. \nSELECT  SELECT car_makers.Id,\nSELECT model_list.Id, \nSELECT model.Id, \nSELECT cars_data.Id, \nSELECT car_names.Id, \nSELECT car_names.Maker,\nSELECT car_names.Make, \nSELECT model_list.Maker,\nSELECT model.Maker,\nSELECT car_makers.Maker,\nSELECT model_list.Model,\nSELECT model.Model,\nSELECT cars_data.MPG,\nSELECT cars_data.Cylinders,\nSELECT cars_data.Edispl,\nSELECT cars_data.Horsepower,\nSELECT cars_data.Weight,\nSELECT cars_data.Accelerate,\nSELECT cars_data.Year\nFROM car_makers LEFT OUTER JOIN model_list ON car_makers.Id = model_list.Id LEFT OUTER JOIN model ON model_list.Id = model.Id LEFT OUTER JOIN cars_data ON car_makers.Id = cars_data.Id\nWHERE car_makers.Country = 1\nGROUP BY car_names.Id;\n\n#Cars name car_makers M"}
{"question": "For a volvo model, how many cylinders does the version with least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor a volvo model, how many cylinders does the version with least accelerate have?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor a volvo model, how many cylinders does the version with least accelerate have?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT "}
{"question": "How many cars have a larger accelerate than the car with the largest horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars have a larger accelerate than the car with the largest horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars have a larger accelerate than the car with the largest horsepower?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT"}
{"question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with a greater accelerate than the one with the most horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with a greater accelerate than the one with the most horsepower?. \nSELECT  SELECT \n  MAX(Accelerate)\nFROM cars_data\nGROUP BY MakeId, Model\nWHERE Accelerate > Horsepower\n\n#car_names('MakeId', 'Model', 'Make')\n\nWhat is the name of the car with the highest horsepower?. \nSELECT  SELECT \n  MAX(Horsepower)\nFROM cars_data\nGROUP BY MakeId, Model\nWHERE Horsepower = MAX(Horsepower)\n\nWhat is the model with the most cylinders?. \nSELECT  SELECT \n  MAX(Cylinders)\nFROM cars_data\nGROUP BY MakeId, Model\nWHERE Cylinders = MAX(Cylinders)\n\n#What are the models with more cylinders than the one with the most cylinders?. \nSELECT  SELECT \n  MAX(Cylinders)\nFROM cars_data\nGROUP BY MakeId, Model\nWHERE Cylinders < MAX(Cylinders)\n\n#car_names('MakeId', 'Model', 'Make')\n\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#count"}
{"question": "How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries has more than 2 car makers ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries has more than 2 car makers ?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n}
{"question": "What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of countries with more than 2 car makers ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of countries with more than 2 car makers ?. \nSELECT  SELECT count(*) FROM countries WHERE COUNT(Country) > 2 \n#SELECT  SELECT count(*) FROM countries WHERE COUNT(Country) > 2\n\nWhat is the number of countries that have more than 2 cars of the same make?\nSELECT  SELECT count(*) FROM countries WHERE COUNT(Country) > 2 AND COUNT(Model) > 1\n\nWhat is the number of cars from each country with the same make?\nSELECT  SELECT count(*) FROM countries WHERE COUNT(Country) > 2 AND COUNT(Model) > 1 AND Model IN (SELECT DISTINCT(Model) FROM cars_data WHERE Model IN ('Honda', 'Toyota', 'Mazda'))\n\nSELECT  SELECT count(*) FROM countries WHERE COUNT(Country) > 2 AND COUNT(Model) > 1 AND Model IN (SELECT DISTINCT(Model) FROM cars_data WHERE Model IN ('Honda', 'Toyota', 'Mazda'))\n\nSELECT  SELECT count(*) FROM cars_data WHERE Model IN ('Honda', 'Toyota', 'Mazda') AND Model IN ('Honda', 'Toyota', 'Mazda') \n\nSELECT  SELECT count(*)"}
{"question": "How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars has over 6 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars has over 6 cylinders?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT"}
{"question": "What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of carsw ith over 6 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of carsw ith over 6 cylinders?. \nSELECT  SELECT count(*)\nFROM car_1 WHERE (Cylinders) > 6;\nWhat is the number of carsw with names starting with E?\nSELECT COUNT(*)\nFROM car_1\nWHERE (Model) LIKE 'E%';\nWhat is the number of carsw with their make in the third column?\nSELECT COUNT(*)\nFROM car_1\nWHERE (Maker) LIKE '%FullName%';\nWhat is the number of carsw with their make in the second column?\nSELECT COUNT(*)\nFROM car_1\nWHERE (Maker) LIKE '%FullName%';\nWhat is the number of carsw with their make in the third column and country in the fourth column?\nSELECT COUNT(*)\nFROM car_1\nWHERE (Maker) LIKE '%FullName%'\nAND (Country) LIKE '%FullName%';\nWhat is the number of carsw with their make in the third column and country in the fourth column?\nSELECT COUNT(*)\nFROM car_1\nWHERE (Maker) LIKE '%FullName%'\nAND (Country) LIKE '%FullName%';\nWhat is the number of carsw with their make in the second column and country in the fourth column?\nSELECT COUNT"}
{"question": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor the cars with 4 cylinders, which model has the largest horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor the cars with 4 cylinders, which model has the largest horsepower?. \nSELECT  SELECT Countries.CountryName, Countries.Continent, Model.Maker, Model.Model, \n(SELECT  MAX(Horsepower) FROM cars WHERE Cylinders = 4) AS MaxHorsepower\nFROM Continents\nINNER JOIN Countries ON Continents.Continent = Countries.Continent\nINNER JOIN Model ON Countries.CountryId = Model.CountryId\nGROUP BY Countries.CountryName, Countries.Continent, Model.Maker, Model.Model\nHAVING MaxHorsepower > 200;\n1.3.3.4. An example of a query involving a group by clause\nSELECT  Continents.Continent, Countries.CountryName, \nCOUNT(Countries.CountryName) AS CountryCount, \nMAX(Horsepower) AS MaxHorsepower\nFROM Continents\nINNER JOIN Countries ON Continents.Continent = Countries.Continent\nINNER JOIN Model ON Countries.CountryId = Model.CountryId\nGROUP BY Continents.Continent, Countries.CountryName, \nMAX(Horsepower)\nHAVING Country"}
{"question": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor all of the 4 cylinder cars, which model has the most horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor all of the 4 cylinder cars, which model has the most horsepower?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nAmong the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nAmong the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.. \nSELECT  SELECT car_maker.Maker,\ncar_maker.FullName\n\nFROM car_maker\n\nWHERE car_maker.id =\n(\n    SELECT car_maker.Id\n    FROM car_maker\n    WHERE car_maker.Id in (\n        SELECT car_maker.Id\n        FROM car_maker\n        WHERE car_maker.Horsepower > 200\n    )\n    AND car_maker.Cylinders < 4\n    GROUP BY car_maker.Id\n    HAVING COUNT(car_maker.Id) > 1\n    )\n    and car_maker.FullName NOT IN ('Aston Martin', 'Audi', 'Bentley', 'BMW', 'Citroen', 'Ferrari', 'Honda', 'Hummer', 'Jaguar', 'Lamborghini', 'Lotus', 'Maserati', 'McLaren', 'MG', 'Mercedes', 'Mini', 'Morgan', 'Motorhome', 'Nissan', 'Opel', 'Peugeot', 'Porsche', 'Renault', 'Rolls Roy"}
{"question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nAmong the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nAmong the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?. \nSELECT  SELECT MAX(Continent) FROM Continents;\nSELECT  SELECT MIN(Country) FROM Countries;\nSELECT  SELECT MAX(Continent) FROM Countries;\nSELECT  SELECT MAX(Year) FROM Cars_data;\nSELECT  SELECT MAX(Horsepower) FROM Cars_data;\nSELECT  SELECT MAX(Weight) FROM Cars_data;\nSELECT  SELECT MAX(Edispl) FROM Cars_data;\nSELECT  SELECT MAX(MPG) FROM Cars_data;\nSELECT  SELECT MAX(Cylinders) FROM Cars_data;\nSELECT  SELECT MIN(Year) FROM Cars_data;\nSELECT  SELECT MIN(Horsepower) FROM Cars_data;\nSELECT  SELECT MIN(Weight) FROM Cars_data;\nSELECT  SELECT MIN(Edispl) FROM Cars_data;\nSELECT  SELECT MIN(MPG) FROM Cars_data;\nSELECT  SELECT MIN(Cylinders) FROM Cars_data;\nSELECT  SELECT MIN(Year) FROM Cars_data;\nSELECT  SELECT MIN(Horsepower) FROM Cars_"}
{"question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?. \nSELECT  SELECT MAX(mpg) AS maxMPG, MAX(Year) AS maxYear\nFROM car_makers\nWHERE FullName LIKE 'Car%' AND\n   FullName LIKE '1980%' AND\n   Maker = 'Ford';\nThe result will be:\n\nmaxMPG: 23.50\nmaxYear: 1980\n\nYou can get a result with 2 columns:\nSELECT  SELECT MAX(mpg) AS maxMPG, MAX(Year) AS maxYear\nFROM car_makers\nWHERE FullName LIKE 'Car%' AND\n   FullName LIKE '1980%' AND\n   Maker = 'Ford';\n\n\n\n\nSELECT  SELECT MAX(mpg) AS maxMPG, MAX(Year) AS maxYear\nFROM car_makers\nWHERE FullName LIKE 'Car%' AND\n   FullName LIKE '1980%' AND\n   Maker = 'Ford';\n\n\n### Using SQL in Python\n\n#read the data from csv file\ndata = csv.reader(open(r'C:\\Users\\bajin\\Desktop\\SQLiteTest\\car_1"}
{"question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nM.MPG, M.Cylinders, M.Edispl, M.Horsepower, M.Weight, M.Accelerate, M.Year\nFROM  car_1.cars M\nWHERE  M.Cylinders <= 8\nOR  M.Year <= 1980\nOrder by M.MPG\nSELECT M.MPG, M.Cylinders, M.Edispl, M.Horsepower, M.Weight, M.Accelerate, M.Year\nFROM car_1.cars M\nGROUP BY M.Cylinders, M.Edispl, M.Horsepower, M.Weight, M.Accelerate, M.Year\nORDER BY M.MPG\nSELECT M.MPG, M.Cylinders, M.Edispl, M.Horsepower, M.Weight, M.Accelerate, M.Year\nFROM car_1.cars M\nGROUP BY M.Cylinders, M.Edispl, M.Horsepower, M.Weight, M.Accelerate, M"}
{"question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich models are lighter than 3500 but not built by the 'Ford Motor Company'?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich models are lighter than 3500 but not built by the 'Ford Motor Company'?. \nSELECT  SELECT `ModelId` FROM `car_makers` WHERE `Maker` = 'Ford' AND `FullName` != 'Ford Motor Company';\nSELECT  SELECT `Id` FROM `cars_data` WHERE `MPG` < 3500 AND NOT `FullName` = 'Ford Motor Company';\n### END OF CODE\n\n### BEGIN OF SOLUTION\nSELECT  SELECT `ModelId` FROM `car_makers` WHERE `Maker` = 'Ford' AND `FullName` != 'Ford Motor Company';\nSELECT  SELECT `Id` FROM `cars_data` WHERE `MPG` < 3500 AND NOT `FullName` = 'Ford Motor Company';\n\n### END OF SOLUTION\n"}
{"question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?. \nSELECT  SELECT DISTINCT model_list.Id,\n                      model_list.Make,\n                      model_list.Model,\n                      model_list.Year\n        FROM cars_data\n        LEFT JOIN model_list ON model_list.Id = cars_data.Id\n        WHERE cars_data.MPG < 3500\n        AND cars_data.Cylinders > 4;\n\n\nWhat are the different models wthat have 6 cylinders but were not built by the Ford Motor Company?. \nSELECT  SELECT DISTINCT model_list.Id,\n                      model_list.Make,\n                      model_list.Model,\n                      model_list.Year\n        FROM cars_data\n        LEFT JOIN model_list ON model_list.Id = cars_data.Id\n        WHERE cars_data.Cylinders = 6\n        AND cars_data.Year < 2000;\n\n\nWhat are the different models wthat have 6 cylinders and are manufactured by the Ford Motor Company?. \nSELECT  SELECT DISTINCT model_list.Id,\n                      model_list"}
{"question": "What are the name of the countries where there is not a single car maker?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the name of the countries where there is not a single car maker?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the name of the countries where there is not a single car maker?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What are the names of the countries with no car makers?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names of the countries with no car makers?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names of the countries with no car makers?. \n}
{"question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nFROM cars c\nWHERE (SELECT \n  COUNT(SELECT \n    GROUP_CONCAT(CASE WHEN max(mpg) > 3 THEN max(mpg) END)\n    FROM cars\n    WHERE maker = c.maker\n      AND country = c.country\n      AND model IN (\n        SELECT \n          GROUP_CONCAT(CASE WHEN max(mpg) > 3 THEN max(mpg) END)\n        FROM cars\n        WHERE maker = c.maker\n          AND country = c.country\n          AND model IN (SELECT \n            GROUP_CONCAT(CASE WHEN max(mpg) > 3 THEN max(mpg) END)\n          FROM cars\n          WHERE maker = c.maker\n            AND country = c.country\n            AND model IN (SELECT \n              GROUP_CONCAT(CASE WHEN max(mpg) > 3 THEN max(mpg) END)\n            FROM cars\n            WHERE maker = c.maker\n              AND country = c.country\n              AND model IN (SELECT \n                GROUP_CONCAT(CASE WHEN max"}
{"question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?. \nSELECT  SELECT_ALL countries.Id, countries.FullName, COUNT(*) as Number of Car Makers\nFROM countries,\nCOUNT(continent.Id) as Number of Car Makes,\nCOUNT(car_makers.Maker) as Number of Fiat Car Makers,\nCOUNT(model_list.Maker) as Number of Fiat Cars,\nCOUNT(cars_data.Id) as Number of Fiat Cars\nFROM car_1\nJOIN continent\nON continent.Id = countries.Continent\nJOIN car_makers\nON car_makers.Id = countries.Country\nJOIN model_list\nON model_list.Id = car_makers.Maker\nJOIN cars_data\nON cars_data.Id = model_list.Model\nWHERE  countries.Continent = 'Europe' AND model_list.Maker = 'Fiat'\nGROUP BY countries.Id, countries.FullName\nHAVING Number of Car Makes = 3\n\n\n### SQLite SQL car_2 database, with their properties:\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl"}
{"question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nGROUP BY GROUP BY GROUP BY GROUP BY GROUP BY GROUP BY GROUP BY\n\nSELECT countries.CountryId, countries.Continent, countries.FullName, models.Maker, models.Model\nFROM countries\nJOIN countries ON countries.CountryId = models.Continent\nJOIN models ON models.Maker = countries.FullName\nWHERE (((countries.Continent)=\u2019\u2019)\nAND (models.FullName=\u2019\u2019))\nAND (((countries.Continent)=\u2019\u2019)\nAND (models.FullName is not null))\nAND (((countries.Continent)=\u2019\u2019)\nAND (models.FullName is not null))\nAND (((countries.Continent)=\u2019\u2019)\nAND (models.FullName is not null))\nAND (((countries.Continent)=\u2019\u2019)\nAND (models.FullName is not null))\n\nCREATE VIEW stats AS\nSELECT  model_list.Id, model_list.Maker, models.FullName, Count(car_makers.Id) AS cars_count,\nsum(car_names.FullName) AS"}
{"question": "Which country does Airline \"JetBlue Airways\" belong to?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich country does Airline \"JetBlue Airways\" belong to?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich country does Airline \"JetBlue Airways\" belong to?. \nSELECT  SELECT city_id, city_name, country_name, country_abbr\n    FROM country\n    WHERE country_id = 44\n    UNION ALL\n    SELECT airport_id, airport_name, airport_city, airport_country\n        FROM airport\n        WHERE airport_country = 44\n    UNION ALL\n    SELECT airline_id, airline_name, airline_country, country_name\n        FROM airline\n        WHERE airline_country = 44\n    UNION ALL\n    SELECT flight_id, flight_no, source_airport_id, destination_airport_id\n        FROM flight\n        WHERE source_airport_country = 44\n        AND destination_airport_country = 44\n        ORDER BY 1;\n\n# Now you can check if the airline exists in this database:\n# SELECT flight_no, source_airport_name, destination_airport_name\n#   FROM flight_2\n# WHERE airline_id = 17\n\n# Get the country that JetBlue belongs to.\n#SELECT  flight_no, source_airport"}
{"question": "What country is Jetblue Airways affiliated with?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat country is Jetblue Airways affiliated with?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat country is Jetblue Airways affiliated with?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nAirline, AirlineAbbr, Country, CountryAbbr, City, \nCountry, CountryAbbrev, Airport, AirportName, FlightNo \nFROM    airlines\nWHERE   Airline = 'Jetblue Airways'\nORDER BY City, FlightNo DESC\nOnly the FIRST 10 rows are returned. The result can be saved to a .csv file by clicking the CSV link:\nClicking this link will save the results to a .csv file, which can then be opened in Excel or another spreadsheet application:\nAnd to save the result in another file format, click the link for the type of file you wish to save it as, then select the file and save.\nIf you use this same web page, it will take you to the last page that you were at (not page 1). To see the results of the query from another page, click the \"Back\" button in your browser.\nhttp://www.bostontechjournal.com/wiki/index.php/RDMS/SQLite/SQL_queries/Retrieving_information_from_a_database#"}
{"question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the abbreviation of Airline \"JetBlue Airways\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the abbreviation of Airline \"JetBlue Airways\"?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT"}
{"question": "Which abbreviation corresponds to Jetblue Airways?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich abbreviation corresponds to Jetblue Airways?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich abbreviation corresponds to Jetblue Airways?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nAirline  Abbreviation    \n\n### Write a Python function named guess_flights() that takes a flight number \n#as its argument, and returns the name of the airline and the abbreviation \n#for the country of its destination. \ndef guess_flights(flight):\n    # First, construct a query using the `db` module, as we did for the \n    # airlines database.\n    # Note that the `cur.execute()` is optional. If you use it, the query \n    # is executed immediately, so that any operations performed before the \n    # query can be used in the query. If you omit it, the query will be \n    # executed in a future query. This is useful if you want to take advantage \n    # of the `rows` property and obtain a list of rows returned by the query.\n    # If you omit it, your query will return a generator object.\n    cur = db.connect()\n    cur.execute(\"SELECT  Abbreviation, SourceAirport, DestAirport FROM flights WHERE FlightNo = ?"}
{"question": "List all airline names and their abbreviations in \"USA\".", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nList all airline names and their abbreviations in \"USA\".. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nList all airline names and their abbreviations in \"USA\".. \nSELECT  SELECT distinct country_name, airline_name FROM flight_2 WHERE airline_name != ''\nUNION ALL\nSELECT airline_name, country_name, '' AS country_name FROM flight_2 WHERE airline_name != ''\nUNION ALL\nSELECT '' AS country_name, '' AS airline_name, country_name FROM flight_2 WHERE country_name != ''\nUNION ALL\nSELECT '' AS airline_name, '' AS country_name, country_name FROM flight_2 WHERE country_name != ''\n\nList all airports and their abbreviations in \"USA\"... \nSELECT  SELECT distinct country_name, airport_name FROM flight_2 WHERE airport_name != ''\nUNION ALL\nSELECT airport_name, country_name, '' AS country_name FROM flight_2 WHERE airport_name != ''\nUNION ALL\nSELECT '' AS country_name, '' AS airport_name, country_name FROM flight_2 WHERE country_name != ''\nUNION ALL\nSELECT '' AS airport_name, '' AS country_name, country_name FROM flight_2 WHERE country_name != ''\n\nList all fl"}
{"question": "What are the airline names and abbreviations for airlines in the USA?", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are the airline names and abbreviations for airlines in the USA?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are the airline names and abbreviations for airlines in the USA?. \nSELECT  SELECT airlines.airline, airlines.abbreviation, COUNT(*) AS numAirlines\nFROM    airlines\nGROUP BY airlines.airline, airlines.abbreviation\nORDER BY airlines.airline;\n#airlines('F','American', 'AM', 'US', 'USA')\n#airlines('N','Northwest', 'NW', 'US', 'USA')\n#airlines('U','United', 'UA', 'US', 'USA')\n#airlines('UA','United', 'UA', 'US', 'USA')\n#airlines('N','Northwest', 'NW', 'US', 'USA')\n#airlines('S','Southwest', 'WN', 'US', 'USA')\n#airlines('AA','American', 'AA', 'US', 'USA')\n#airlines('UA','United', 'UA', 'US', 'USA')\n#airlines('N','Northwest', 'NW', 'US', 'USA')\n#airlines('S','Southwest', 'WN', 'US', 'USA')\n#airlines('AA"}
{"question": "List the airport code and name in the city of Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nList the airport code and name in the city of Anthony.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nList the airport code and name in the city of Anthony.. \nSELECT  SELECT * FROM airports\nWHERE city = 'Anthony';\nAnthony, United States\n"}
{"question": "Give the airport code and airport name corresonding to the city Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the airport code and airport name corresonding to the city Anthony.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the airport code and airport name corresonding to the city Anthony.. \nSELECT  SELECT * FROM airports WHERE city = \"Anthony\"\nSELECT  SELECT * FROM airports WHERE city = \"Anthony\"\nSELECT  SELECT * FROM airports WHERE city = \"Anthony\"\nSELECT  SELECT * FROM airports WHERE city = \"Anthony\"\n\n### You can call the following command to get a list of cities, the code\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#Give the airport code and airport name corresonding to the city Anthony..\n#Select the airport code and airport name of the 3 cities. \nSELECT  SELECT airport.airportCode, airport.airportName FROM airports airport\nLEFT OUTER JOIN airlines airline ON airline.airlineCode = airport.airlineCode\nWHERE airport.city = 'Anthony' AND airline.airlineCode NOT IN ('DHL', 'FedEx', 'UPS')\nORDER BY airport.airportCode;\n\n### You can call the following command to get a list of airports, the code\n"}
{"question": "How many airlines do we have?", "sql": "SELECT count(*) FROM AIRLINES", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airlines do we have?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airlines do we have?. \nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM \"airlines\"\nSELECT  SELECT COUNT(*) FROM"}
{"question": "What is the total number of airlines?", "sql": "SELECT count(*) FROM AIRLINES", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the total number of airlines?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the total number of airlines?. \nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='index';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='view';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='trigger';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='view' and type='trigger';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='view' and type='index';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='index' and type='trigger';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='index' and type='view';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='trigger' and type='view';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='view' and type='trigger' and type='index';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='index' and type='trigger' and type='view';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='trigger' and type='view' and type='index';\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='view' and type='trigger' and type='index'"}
{"question": "How many airports do we have?", "sql": "SELECT count(*) FROM AIRPORTS", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airports do we have?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airports do we have?. \nSELECT  SELECT  SELECT  SELECT\ncountry, abbreviation, country_code FROM countries;\nHow many airlines do we have? \nSELECT  SELECT  SELECT  SELECT  SELECT\nairline, airline_id, airline_abbreviation, airline_name, airline_code FROM airlines;\nHow many airports do we have?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\ncity, airport_code, airport_name, country_code, country_abbrev FROM airports;\nHow many flights do we have?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nairline, flight_no, source_airport, destination_airport FROM flights;\n\nAirline Abbreviation Country\nAeroflot SU Russia\nAer Lingus EI Ireland\nAir Canada AC Canada\nAir France AF France\nAir India AI India\nAir New Zealand NZ New Zealand\nAir Pacific Fiji\nAir Tahiti NT Polynesia\nAir UK UK\nAir Transat NT Canada\nAir Tran AH United States\nAir Canada AJ"}
{"question": "Return the number of  airports.", "sql": "SELECT count(*) FROM AIRPORTS", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of  airports.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of  airports.. \nSELECT  SELECT \"Airports\".\"City\" AS \"City\", \"Airports\".\"AirportCode\" AS \"AirportCode\", \"Airports\".\"AirportName\" AS \"AirportName\", \"Airports\".\"Country\" AS \"Country\", \"Airports\".\"CountryAbbrev\" AS \"CountryAbbrev\" FROM \"Airports\"\n\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\nReturn the number of  airports.. \nSELECT  SELECT \"Airports\".\"City\" AS \"City\", \"Airports\".\"AirportCode\" AS \"AirportCode\", \"Airports\".\"AirportName\" AS \"AirportName\", \"Airports\".\"Country\" AS \"Country\", \"Airports\".\"CountryAbbrev\" AS \"CountryAbbrev\" FROM \"Airports\"\n\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of  flights.. \nSELECT  SELECT \"Flights"}
{"question": "How many flights do we have?", "sql": "SELECT count(*) FROM FLIGHTS", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights do we have?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights do we have?. \nSELECT  SELECT count(*) FROM flights\nHow many airports do we have?. \nSELECT  SELECT count(*) FROM airports\nHow many airlines do we have?. \nSELECT  SELECT count(*) FROM airlines\nThe 3 queries will give you the number of rows in each table.\nNow that we know how many of each type of table we have, we can query the tables to see what is in each one. \nThe SELECT query returns all of the data from a single table, or a set of tables.\nSELECT  SELECT Country FROM airlines\nSELECT  SELECT AirportName FROM airports\nSELECT  SELECT DestAirport FROM flights\nThe TABLE command returns the number of rows in a single table, or all tables in a database.\nTABLE  SELECT COUNT(*) FROM airlines\nTABLE  SELECT COUNT(*) FROM flights\nTABLE  SELECT COUNT(*) FROM airports\nIn our example database, airlines has 4 records, flights has 8 records, and airports has 12 records.\nNot all SELECT queries need to return data. \nThe WHERE clause in a SELECT query is used to select rows that meet certain criteria. \nThe AND and OR operators combine the criteria that are used to"}
{"question": "Return the number of flights.", "sql": "SELECT count(*) FROM FLIGHTS", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights.. \nSELECT  SELECT  SELECT\nSUM(CASE WHEN (FlightNo) THEN 1 ELSE 0 END) AS TotalFlights\nFROM  flights\nWHERE (Airline) = (uid)\nGROUP BY (Airline)\n```\n\n```\nSelect * from flights WHERE (Airline) = (uid);\n```\n\nThe syntax for declaring a new table is:\n\n```\nCREATE TABLE 'tablename' (\n\t'fieldname' 'type',\n\t...\n);\n```\n\nFor example, to declare a new table, airlines, with three fields, uid, airline, and airlineabbreviation:\n\n```\nCREATE TABLE airlines(\n\tuid INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\tairline VARCHAR(15),\n\tairlineabbreviation VARCHAR(15)\n);\n```\n\n```\nSelect * from flights WHERE (Airline) = (uid);\n```\n\n## See also\n\n* SQLite\n* List of relational databases\n* SQL\n* Structured query language\n\n## External links\n\n* http://www.sqlite.org/\n* https"}
{"question": "Which airline has abbreviation 'UAL'?", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airline has abbreviation 'UAL'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airline has abbreviation 'UAL'?. \n}
{"question": "Give the airline with abbreviation 'UAL'.", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the airline with abbreviation 'UAL'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the airline with abbreviation 'UAL'.. \nSELECT  SELECT  SELECT \n  Airline, \n  Abbreviation, \n  Country,\n  CountryAbbrev \nFROM sqlite_master\nWHERE type = \"table\"\nAND name = \"airlines\";\n\nGive the airport code 'ORD'.. \nSELECT  SELECT  SELECT \n  City, \n  AirportCode, \n  AirportName,\n  Country, \n  CountryAbbrev \nFROM sqlite_master\nWHERE type = \"table\"\nAND name = \"airports\";\n\nGive the flight number '1234'.. \nSELECT  SELECT  SELECT \n  Airline, \n  FlightNo, \n  SourceAirport, \n  DestAirport \nFROM sqlite_master\nWHERE type = \"table\"\nAND name = \"flights\";\n\nSQLite SQL - Query Flight 1, flight 2, flight 3 and flight 4..\nSELECT  SELECT  SELECT \n  FlightNo, \n  SourceAirport, \n  DestAirport \nFROM sqlite_master\nWHERE type = \"table\"\nAND name = \"fl"}
{"question": "How many airlines are from USA?", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airlines are from USA?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airlines are from USA?. \nSELECT  SELECT \n        COUNT(*) AS Count \nFROM    \"airlines\" \nGROUP BY \"airlines\".\"airline\"\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\n\n## How many airports are in USA?.\nSELECT  SELECT \n        COUNT(*) AS Count \nFROM    \"airports\" \nGROUP BY \"airports\".\"city\"\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\n\n## How many flights are from USA?.\nSELECT  SELECT \n        COUNT(*) AS Count \nFROM    \"flights\" \nGROUP BY \"flights\".\"air"}
{"question": "Return the number of airlines in the USA.", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of airlines in the USA.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of airlines in the USA.. \nSELECT  SELECT count(*) FROM sqlite_master WHERE type='table' AND name='airlines'\nReturn the number of airports in the USA.. \nSELECT  SELECT count(*) FROM sqlite_master WHERE type='table' AND name='airports'\nReturn the number of flights in the USA.. \nSELECT  SELECT count(*) FROM sqlite_master WHERE type='table' AND name='flights'\nSelect the number of airlines in each country, grouped by country.. \nSELECT DISTINCT airline_name, country FROM airlines GROUP BY airline_name, country;\nSelect the number of airports in each country, grouped by country.. \nSELECT DISTINCT airport_name, country FROM airports GROUP BY airport_name, country;\nSelect the number of flights in each country, grouped by country.. \nSELECT DISTINCT flight_no, country FROM flights GROUP BY flight_no, country;\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Which city and country is the Alton airport at?", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city and country is the Alton airport at?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city and country is the Alton airport at?. \nSELECT  SELECT  SELECT  SELECT\nairport_code,\nairport_name,\nairport_country,\nairport_country_abbrev\nFROM airports\nWHERE city='ALTON';\nSELECT  SELECT  SELECT  SELECT\nairline_abbr,\nairline_name,\nairline_country,\nairline_country_abbrev\nFROM airlines\nWHERE airline_name LIKE '%UAL%';\n\n\n"}
{"question": "Give the city and country for the Alton airport.", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the city and country for the Alton airport.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the city and country for the Alton airport.. \nSELECT  SELECT city, country\nFROM     airports\nWHERE    airports.airportName = 'ALT'\nAND      airports.country = 'USA'\nAND      airports.countryAbbrev = 'USA'\n\n#SELECT  SELECT city, country\n#FROM     airports\n#WHERE    airports.airportName = 'ALT'\n#AND      airports.country = 'USA'\n#AND      airports.countryAbbrev = 'USA'\n\nGive the city and country for the Toronto airport.. \nSELECT  SELECT city, country\nFROM     airports\nWHERE    airports.airportName = 'YYZ'\nAND      airports.country = 'Canada'\nAND      airports.countryAbbrev = 'Canada'\n\n#SELECT  SELECT city, country\n#FROM     airports\n#WHERE    airports.airportName = 'YYZ'\n#AND      airports.country = 'Canada'\n#AND      airports.countryAbbrev = 'Canada'\n"}
{"question": "What is the airport name for airport 'AKO'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the airport name for airport 'AKO'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the airport name for airport 'AKO'?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n}
{"question": "Return the name of the airport with code 'AKO'.", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the name of the airport with code 'AKO'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the name of the airport with code 'AKO'.. \nSELECT  SELECT * FROM airports WHERE City = 'Anchorage' AND CountryAbbrev = 'US';\nReturn the name of the airport with code 'AMS'.. \nSELECT  SELECT * FROM airports WHERE City = 'Amsterdam' AND CountryAbbrev = 'NLD';\nReturn the name of the airport with code 'BOS'.. \nSELECT  SELECT * FROM airports WHERE City = 'Boston' AND CountryAbbrev = 'US';\nReturn the name of the airport with code 'CDG'.. \nSELECT  SELECT * FROM airports WHERE City = 'Paris' AND CountryAbbrev = 'FRA';\nReturn the name of the airport with code 'CHC'.. \nSELECT  SELECT * FROM airports WHERE City = 'Christchurch' AND CountryAbbrev = 'NZL';\nReturn the name of the airport with code 'CHO'.. \nSELECT  SELECT * FROM airports WHERE City = 'Chicago' AND CountryAbbrev = 'US';\nReturn the name of the airport with code 'DEN'.. \nSELECT  SELECT * FROM airports WHERE City = 'Denver"}
{"question": "What are airport names at City 'Aberdeen'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airport names at City 'Aberdeen'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airport names at City 'Aberdeen'?. \nSELECT  SELECT  SELECT\nairport_name(City, City) as airport_name\nairport_name(City, City)\nflights('Airport', 'FlightNo', 'SourceAirport', 'DestAirport')\nairport_name(City, City) as airport_name\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City)\nairport_name(City, City"}
{"question": "What are the names of airports in Aberdeen?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are the names of airports in Aberdeen?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are the names of airports in Aberdeen?. \nSELECT  SELECT  SELECT \n#airlines('Aberdeen', 'Airline', 'Abbreviation', 'Country')\n#airports('Aberdeen', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Aberdeen', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are the names of airports in Rome?. \nSELECT  SELECT  SELECT \n#airlines('Rome', 'Airline', 'Abbreviation', 'Country')\n#airports('Rome', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Rome', 'FlightNo', 'SourceAirport', 'DestAirport')\nAirlines and airports have properties that can be retrieved by a SELECT query. \nBoth tables have an airline_id and an airport_id. \nAirport, airlines, and flights have fields in a SELECT query. \nThere is one more table that we will need for this exercise: a flight_2 table. \n"}
{"question": "How many flights depart from 'APG'?", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from 'APG'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from 'APG'?. \nSELECT  SELECT Count(*) FROM flights WHERE DEPART=APG;\nIt returns the number of flights that have departed from 'APG'. \n\nThe following SQL statement is the same as above, but it uses the \nforeign key:\nSELECT  SELECT Count(*) FROM flights WHERE DEPART=APG AND AIRLINE='AAL';\n\nTherefore, the next SQL statement is also the same:\nSELECT  SELECT Count(*) FROM flights WHERE DEPART=APG AND AIRLINE='AAL' AND FLIGHTNO=1;\n\nThis SQL statement is the same as above, but it uses the function:\nSELECT  SELECT Count(*) FROM flights WHERE DEPART=APG AND AIRLINE='AAL' AND FLIGHTNO=SABA;\n\nThe following SQL statement is the same as above, but it uses the \nindex:\nSELECT  SELECT Count(*) FROM flights WHERE DEPART=APG AND AIRLINE='AAL' AND FLIGHTNO=SABA AND AIRLINE='SWA';\n\nThe following SQL statement is the same as above, but it uses the \n"}
{"question": "Count the number of flights departing from 'APG'.", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of flights departing from 'APG'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of flights departing from 'APG'.. \nSELECT  SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'\nSELECT  SELECT COUNT(*) FROM flights WHERE DestAirport = 'APG'\n\n\n### And then grab the flight number\nairlines('APG', 'KLM', 'Netherlands', 'Netherlands')\nflight = flights('KLM', 'KL123')\n\n### \n# But now, how to handle a `NULL` in the number ?\n###\n### Right, we can add a boolean to see if it is `NULL` or not.\n###\n\nairlines('APG', 'KLM', 'Netherlands', 'Netherlands')\nflight = flights('KLM', 'KL123', 'NULL')\n\n###\n# We can also add a default value `NULL` as well, but this is not necessary if we use the boolean.\n###\n\nairlines('APG', 'KLM', 'Netherlands', 'Netherlands')\nflight = flights('KLM', 'KL123', 'NULL')\n\n###\n# We can"}
{"question": "How many flights have destination ATO?", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights have destination ATO?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights have destination ATO?. \nSELECT  SELECT COUNT(*) FROM flights WHERE DEST_AIRPORT = 'ATO';\n\nHow many airlines are from ATO?. \nSELECT  SELECT COUNT(*) FROM flights WHERE DEST_AIRPORT = 'ATO' AND SRC_AIRPORT = 'ATO';\n\nWhat are the airlines from ATO? \nSELECT  SELECT name FROM airlines WHERE DEST_AIRPORT = 'ATO';\n\nWhat are the airports in ATO?. \nSELECT  SELECT name FROM airports WHERE city = 'ATO';\n\nHow many flights are from ATO to NYC?. \nSELECT  SELECT COUNT(*) FROM flights WHERE DEST_AIRPORT = 'NYC' AND SRC_AIRPORT = 'ATO';\n\nWhat are the airlines from NYC?. \nSELECT  SELECT name FROM airlines WHERE city = 'NYC';\n\nWhat are the airports in NYC?. \nSELECT  SELECT name FROM airports WHERE city = 'NYC';\n\nHow many flights are from NYC to ATO?. \nSELECT  SELECT COUNT(*) FROM flights WHERE DEST_AIR"}
{"question": "Count the number of flights into ATO.", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of flights into ATO.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of flights into ATO.. \nSELECT  SELECT count(*) FROM flights WHERE DestAirport = 'ATO';\n\n\n#Retrieve the 20 last flights from ATO, and check the number of non-pending flights\n#There should be 10 flights out and 10 flights in\nSELECT  SELECT * FROM flights WHERE DestAirport = 'ATO' ORDER BY DestAirport DESC LIMIT 20;\n\n\n#Retrieve the 20 latest flights from ATO, and check the number of non-pending flights\n#There should be 10 flights out and 10 flights in\nSELECT  SELECT * FROM flights WHERE DestAirport = 'ATO' ORDER BY DestAirport ASC LIMIT 20;\n\n\n#Retrieve the 20 latest flights from ATO, and check the number of non-pending flights\n#There should be 10 flights out and 10 flights in\nSELECT  SELECT * FROM flights WHERE DestAirport = 'ATO' ORDER BY DestAirport DESC LIMIT 20;\n\n\n#Retrieve the 2"}
{"question": "How many flights depart from City Aberdeen?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from City Aberdeen?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from City Aberdeen?. \n}
{"question": "Return the number of flights departing from Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights departing from Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights departing from Aberdeen.. \nSELECT  SELECT  SELECT  SELECT  SELECT \nairlines('uid', 'Airline', 'Abbreviation', 'Country') \nairports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev') \nflights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGROUP BY airlines('uid') \nhaving COUNT(flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport'))>0\nLIMIT 1\n\n## A SQL-only query\n## SELECT  SELECT  SELECT  SELECT  SELECT \nairlines('uid', 'Airline', 'Abbreviation', 'Country') \nairports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev') \nflights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGROUP BY airlines('uid') \nhaving COUNT(flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport'))"}
{"question": "How many flights arriving in Aberdeen city?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights arriving in Aberdeen city?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights arriving in Aberdeen city?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nairlines(flights.Airline, flights.FlightNo, \nairports(flights.DestAirport, flights.DestAirport, \nairports(flights.SourceAirport, flights.SourceAirport)\nfrom flights\nGROUP BY flights.DestAirport, flights.SourceAirport)\nGROUP BY airlines.Abbreviation, airports.Abbreviation\nORDER BY airlines.Abbreviation, airports.Abbreviation\n10 results returned.\n'SELECT  SELECT  SELECT  SELECT  SELECT'\nThis selects the columns used in the query, and 'SELECT  SELECT  SELECT  SELECT  SELECT' is the query. \nThe database is now fully defined. \n\n##### Using the SQLite3 command line utility\n\n```\nsqlite3 <database.db> \"SELECT  SELECT  SELECT  SELECT  SELECT\"\n```\n\n```\nSelecting a subset of rows from the output:\n```\n\n```\nsqlite3 <database.db> \"SELECT  SELECT  SELECT  SELECT  SELECT\" -\n\"WHERE DestAirport"}
{"question": "Return the number of flights arriving in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights arriving in Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights arriving in Aberdeen.. \nSELECT  SELECT COUNT(*) FROM flight_2\nWHERE FlightNo BETWEEN 1 AND 1000;\n\n# Return the number of flights arriving in Aberdeen..\nSELECT  SELECT COUNT(*) FROM flight_2\nWHERE FlightNo BETWEEN 1 AND 1000;\n\n# Return the number of flights arriving in Aberdeen..\n# SELECT  SELECT COUNT(*) FROM flight_2\n# WHERE FlightNo BETWEEN 1 AND 1000;\n\n# Return the number of flights departing from Edinburgh..\n# SELECT  SELECT COUNT(*) FROM flight_2\n# WHERE FlightNo BETWEEN 1 AND 1000;\n\n# Return the number of flights departing from Edinburgh..\n# SELECT  SELECT COUNT(*) FROM flight_2\n# WHERE FlightNo BETWEEN 1 AND 1000;\n\n# SELECT * FROM flight_2;\n\n# SELECT * FROM flight_2;\n\n# Returns a list of airports..\n# SELECT * FROM airports;\n\n# Returns a list of airports..\n# SELECT * FROM air"}
{"question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from City 'Aberdeen' and have destination City 'Ashley'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from City 'Aberdeen' and have destination City 'Ashley'?. \nSELECT  SELECT  SELECT  SELECT \nairlines('Aberdeen', 'Aberdeen Airport', 'ABZ', 'GBR') flights('Aberdeen', '001', 'ABZ', 'Aberdeen Airport')\nairports('Ashley', 'Gatwick Airport', 'LGW', 'GBR') flights('Aberdeen', '002', 'LGW', 'Gatwick Airport')\nairlines('Aberdeen', 'Edinburgh Airport', 'EDI', 'GBR') flights('Aberdeen', '003', 'EDI', 'Edinburgh Airport')\nairlines('Aberdeen', 'Glasgow Airport', 'GLA', 'GBR') flights('Aberdeen', '004', 'GLA', 'Glasgow Airport')\nairlines('Aberdeen', 'Stornoway Airport', 'SYY', 'GBR') flights('Aberdeen', '005', 'SYY', 'Stornoway Airport')\nairlines('Aberdeen', 'Inverness Airport', 'INV"}
{"question": "How many flights fly from Aberdeen to Ashley?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights fly from Aberdeen to Ashley?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights fly from Aberdeen to Ashley?. \n}
{"question": "How many flights does airline 'JetBlue Airways' have?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights does airline 'JetBlue Airways' have?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights does airline 'JetBlue Airways' have?. \nSELECT  SELECT flightNo, sourceAirport, destinationAirport FROM flights \n\tWHERE airline = 'JetBlue Airways';\n\n# EXAMPLE 2:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airports does airline 'British Airways' have?. \nSELECT  SELECT airportName, country, countryAbbrev FROM airports \n\tWHERE airline = 'British Airways';\n\n# EXAMPLE 3:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airlines does airport 'DTW'"}
{"question": "Give the number of Jetblue Airways flights.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the number of Jetblue Airways flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the number of Jetblue Airways flights.. \nSELECT  SELECT  SELECT\nf.airline, f.flightno, f.sourcename, f.destname\nFROM flights AS f\nWHERE f.destname = 'JFK'\nGROUP BY f.airline, f.flightno, f.sourcename, f.destname\nORDER BY f.airline, f.flightno, f.sourcename, f.destname\n### SQL - Executes: \n#(1) Select all rows from the flights table for which the destname is JFK.\n#(2) Group them by airline, flightno, sourcename, destname\n#(3) Order them by airline, flightno, sourcename, destname.\n\n#You can think of the WHERE clause as an \"if then\" statement, if the\n#if is true, the then is executed. \n#The WHERE clause is applied first, \n#so the only rows remaining are the ones where the statement is true. \n#After that, grouping, ordering, and selecting are applied, where\n#the values from the SELECT statement are the rows returned.\n"}
{"question": "How many 'United Airlines' flights go to Airport 'ASY'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many 'United Airlines' flights go to Airport 'ASY'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many 'United Airlines' flights go to Airport 'ASY'?. \nSELECT  SELECT 'United Airlines' FROM flights WHERE 'United Airlines'=FlightNo and DestAirport='ASY'\n\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport', 'DepTime', 'ArrivalTime')\n#Make a flight (destAirport='KUL', from=airline=airline, destAirport=flightNo, depTime=0900, arrivalTime=1000)\nINSERT INTO flights VALUES ('United Airlines', '565', 'SIN', 'KUL', '2006-09-13', '2006-09-13 0900:00:00')\n\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName"}
{"question": "Count the number of United Airlines flights arriving in ASY Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of United Airlines flights arriving in ASY Airport.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of United Airlines flights arriving in ASY Airport.. \nSELECT  SELECT count(*) AS cnt FROM flights WHERE (Airline = 'United Airlines' AND SourceAirport = 'ASY Airport')\n########################################################################################################################\n#GROUP BY airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#SELECT  SELECT count(*) AS cnt, airlines('uid', 'Airline', 'Abbreviation', 'Country') AS uid FROM flights WHERE (Airline = 'United Airlines' AND SourceAirport = 'ASY Airport') GROUP BY airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#########################################################################################################################\n#Airport, Aircraft, AircraftOrigin, Destination, DestAirport\n#Count the number of flights leaving from LHR Airport going to ASY Airport.. \nSELECT  SELECT count(*) AS cnt, airlines('uid', 'Airline', 'Abbreviation', 'Country') AS uid, airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev') AS airport FROM flights WHERE (Air"}
{"question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many 'United Airlines' flights depart from Airport 'AHD'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many 'United Airlines' flights depart from Airport 'AHD'?. \nSELECT  SELECT  SELECT  SELECT \n     'Abbreviation'   'Airline'   'FlightNo'   'SourceAirport'   'DestAirport' \nFROM    'airlines' UNION ALL\nSELECT  SELECT  SELECT  SELECT \n     'Country'       'Airline'   'FlightNo'   'SourceAirport'   'DestAirport' \nFROM    'airports' UNION ALL\nSELECT  SELECT  SELECT  SELECT \n     'CountryAbbrev' 'Airline'   'FlightNo'   'SourceAirport'   'DestAirport' \nFROM    'flights'\n\n\n# ADB CODE\n# # These SELECT statements use aggregate functions and joins to calculate\n# # the number of flights by airline that originate from one airport and\n# # then arrive at another.\n# SELECT  SELECT  SELECT  SELECT \n#     'Abbreviation'   'Airline'   'FlightNo'   'SourceAirport'   'DestAirport' \n# FROM    'airlines'  JOIN 'airports' ON"}
{"question": "Return the number of United Airlines flights leaving from AHD Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of United Airlines flights leaving from AHD Airport.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of United Airlines flights leaving from AHD Airport.. \nSELECT  SELECT COUNT(*) FROM \"flights\" \"FlightNo\" \"AirportName\"\nReturn the number of flights departing from DEN Airport.. \nSELECT  SELECT COUNT(*) FROM \"flights\" \"FlightNo\" \"AirportName\"\nReturn the number of flights departing from PDX Airport.. \nSELECT  SELECT COUNT(*) FROM \"flights\" \"FlightNo\" \"AirportName\"\nReturn the number of flights departing from SAN Airport.. \nSELECT  SELECT COUNT(*) FROM \"flights\" \"FlightNo\" \"AirportName\"\nReturn the number of flights departing from SFO Airport.. \nSELECT  SELECT COUNT(*) FROM \"flights\" \"FlightNo\" \"AirportName\"\nReturn the number of flights departing from SEA Airport.. \nSELECT  SELECT COUNT(*) FROM \"flights\" \"FlightNo\" \"AirportName\"\n\n# Select all airlines with two letter codes, and their abbreviations\nSELECT  SELECT 'Airline' 'Abbreviation' FROM \"airlines\" \"Airline\"\nWHERE \"Airline\" LIKE \"%ab%"}
{"question": "How many United Airlines flights go to City 'Aberdeen'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many United Airlines flights go to City 'Aberdeen'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many United Airlines flights go to City 'Aberdeen'?. \nSELECT  SELECT flights.FlightNo, airports.AirportName, airlines.Abbreviation, cities.City\nFROM flights, airlines, airports, cities\nWHERE flights.Airline=airlines.uid\nAND airports.AirportCode=flights.DestAirport\nAND cities.City=flights.DestAirport\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many United Airlines flights go to City 'Aberdeen'?. \nSELECT  SELECT flights.FlightNo, airports.AirportName, airlines.Abbreviation, cities.City\nFROM flights, airlines, airports, cities\nWHERE flights.Airline=airlines.uid\nAND airports.AirportName=cities.City\n#airlines('uid', 'Airline', 'Abbreviation"}
{"question": "Count the number of United Airlines flights that arrive in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of United Airlines flights that arrive in Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of United Airlines flights that arrive in Aberdeen.. \nSELECT  SELECT * FROM flight WHERE airline = \"United\" AND \n                    DESTAIRPORT = \"ABZ\" ;\nSELECT  SELECT * FROM flight WHERE airline = \"United\" AND \n                    DESTAIRPORT = \"ABZ\" ;\nSELECT  SELECT * FROM flight WHERE airline = \"United\" AND \n                    DESTAIRPORT = \"ABZ\" ;\nSELECT  SELECT * FROM flight WHERE airline = \"United\" AND \n                    DESTAIRPORT = \"ABZ\" ;\nSELECT  SELECT * FROM flight WHERE airline = \"United\" AND \n                    DESTAIRPORT = \"ABZ\" ;\nSELECT  SELECT * FROM flight WHERE airline = \"United\" AND \n                    DESTAIRPORT = \"ABZ\" ;\nSELECT  SELECT * FROM flight WHERE airline = \"United\" AND \n                    DESTAIRPORT = \"ABZ\" ;\nSELECT  SELECT * FROM flight WHERE airline = \"United\" AND \n                    DESTAIRPORT = \"ABZ\" ;\nSELECT  SELECT * FROM flight WHERE airline = \""}
{"question": "Which city has most number of arriving flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has most number of arriving flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has most number of arriving flights?. \nSELECT  SELECT City, COUNT(*) AS Count FROM flights \nGROUP BY City;\n\n#Which country has more flights?. \nSELECT  SELECT Country, COUNT(*) AS Count FROM flights \nGROUP BY Country;\n\n#Which country has most number of flights departing?. \nSELECT  SELECT Country, SUM(CASE WHEN FlightNo = 'FlightNo' THEN 1 END) AS Count FROM flights \nGROUP BY Country;\n\n#Which airline company has more number of flights?. \nSELECT  SELECT Airline, SUM(CASE WHEN FlightNo = 'FlightNo' THEN 1 END) AS Count FROM flights \nGROUP BY Airline;\n\n#Which city has more number of departing flights?. \nSELECT  SELECT SourceAirport, SUM(CASE WHEN FlightNo = 'FlightNo' THEN 1 END) AS Count FROM flights \nGROUP BY SourceAirport;\n\n#Which airport has more number of arriving flights?. \nSELECT  SELECT DestAirport, SUM(CASE WHEN FlightNo = 'FlightNo' THEN 1 END) AS Count FROM flights"}
{"question": "Which city has the most frequent destination airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has the most frequent destination airport?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has the most frequent destination airport?. \nSELECT  SELECT Count(DISTINCT FlightNo) FROM Flights GROUP BY SourceAirport\n\n### YOUR FUNCTION:\n#airlines(from, to, args)\n#airports(from, to, args)\n#flights(args)\n#print your results\n\n# Your code goes here\n\n### CODE FOR SQL FLIGHT_1 TABLE\n#airlines(from, to, args)\n#airports(from, to, args)\n#flights(args)\n#print your results\n\n# Your code goes here\n\n### CODE FOR SQL FLIGHT_2 TABLE\n#airlines(from, to, args)\n#airports(from, to, args)\n#flights(args)\n#print your results\n\n# Your code goes here\n\n# Flights\n# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# SELECT from_airline, from_airport, to_airport,\n#    COUNT(*) AS num_flights\n# FROM flight_1\n# GROUP BY from_airline, from_airport, to_airport\n"}
{"question": "Which city has most number of departing flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has most number of departing flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has most number of departing flights?. \n}
{"question": "Which city is the most frequent source airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city is the most frequent source airport?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city is the most frequent source airport?. \nSELECT  SELECT  airlines(\"SourceAirport\", \"Airline\", \"Abbreviation\", \"Country\"),\n  airports(\"DestAirport\", \"AirportCode\", \"AirportName\", \"Country\", \"CountryAbbrev\"),\n  flights(\"Airline\", \"FlightNo\", \"SourceAirport\", \"DestAirport\")\nFROM sqlite_master\nWHERE airports.Country = 'US'\nORDER BY flights.FlightNo;\n\n#Select flights from the flights table (only for the US)\nSELECT  SELECT  flights(\"Airline\", \"FlightNo\", \"SourceAirport\", \"DestAirport\")\nFROM sqlite_master\nWHERE airlines.Country = 'US'\nORDER BY flights.FlightNo;\n\n#Select flights from the flights table (only for the US)\nSELECT  SELECT  flights(\"Airline\", \"FlightNo\", \"SourceAirport\", \"DestAirport\")\nFROM sqlite_master\nWHERE airports.Country = 'US'\nORDER BY flights.FlightNo;\n\n#Select flights from the flights"}
{"question": "What is the code of airport that has the highest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the code of airport that has the highest number of flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the code of airport that has the highest number of flights?. \nSELECT  SELECT airports.airport_code\nFROM airports\nGROUP BY airports.airport_code\nORDER BY COUNT(*) DESC;\nWhat is the code of airport that has the highest number of flights to Frankfurt?. \nSELECT  SELECT airports.airport_code\nFROM airports\nGROUP BY airports.airport_code\nHAVING COUNT(DISTINCT FLIGHTS.DEST_AIRPORT) = '10'\nORDER BY COUNT(*) DESC;\n\n# what is the code of airport that has the highest number of flights from all airports\nSELECT  SELECT airports.airport_code\nFROM airports\nGROUP BY airports.airport_code\nORDER BY COUNT(*) DESC;\n\n\n# what is the code of airport that has the lowest number of flights to Frankfurt?. \n# SELECT  SELECT airports.airport_code\n# FROM airports\n# GROUP BY airports.airport_code\n# HAVING COUNT(DISTINCT FLIGHTS.DEST_AIRPORT) = '0'\n# ORDER BY COUNT(*) DESC;\n\n# what is the code of air"}
{"question": "What is the airport code of the airport with the most flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the airport code of the airport with the most flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the airport code of the airport with the most flights?. \nSELECT  SELECT `AirportCode`, COUNT(FlightNo) AS \"Count of Flights\" FROM `flights` GROUP BY `AirportCode` ORDER BY Count of Flights DESC LIMIT 1;\n\nWhat is the abbreviation of the airline with the most flights?. \nSELECT  SELECT `Abbreviation`, COUNT(FlightNo) AS \"Count of Flights\" FROM `flights` GROUP BY `Abbreviation` ORDER BY Count of Flights DESC LIMIT 1;\n\nWhat is the name of the airline with the most flights?. \nSELECT  SELECT `Airline`, COUNT(FlightNo) AS \"Count of Flights\" FROM `flights` GROUP BY `Airline` ORDER BY Count of Flights DESC LIMIT 1;\n\nWhat is the name of the airport with the most flights?. \nSELECT  SELECT `DestAirport`, COUNT(FlightNo) AS \"Count of Flights\" FROM `flights` GROUP BY `DestAirport` ORDER BY Count of Flights DESC LIMIT 1;\n\nWhat is the name of the airport with the most flights?. \nSELECT  SELECT `SourceA"}
{"question": "What is the code of airport that has fewest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the code of airport that has fewest number of flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the code of airport that has fewest number of flights?. \nSELECT  SELECT  SELECT\nAirportCode,  CountryAbbrv,  AirportName,  Count(*) AS Flights\nFROM  Flights\nWHERE  Airline = 'Air France'\nGROUP BY  CountryAbbrv,  AirportName;\nYou are given a data set that contains information about the flights of 3 airlines from 10 different airports. There is a line for each flight, with columns that identify the airline, the flight number, the source airport, and the destination airport.\nWrite a query that will retrieve the 3 airports that have the fewest number of flights. You can assume that all airports will have at least one flight.\nThe input file contains 20 lines, each of the form:\nAirline FlightNo SourceAirport DestAirport\nAir France 1 POSI 66\nAir France 35 POSI 66\nAir France 135 FRAI 70\nAir France 137 POSI 88\nAir France 140 FRAI 88\nAir France 202 FRAI "}
{"question": "Give the code of the airport with the least flights.", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the code of the airport with the least flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the code of the airport with the least flights.. \nSELECT  SELECTED.airport FROM (SELECT airports.*, airlines.airline_id, airlines.airline_name, airlines.airline_abbreviation, airports.airport_code, airports.airport_name, airports.country, airports.country_abbreviation FROM airports INNER JOIN airlines ON airlines.airline_id=airports.airline_id WHERE airports.airport_name='airport code') AS SELECTED;\n\n#Write a program that takes the airport and airline names and the airline code.\n#Use the code to find the destination airport with the most flights.\n#Output the airport name and the destination airport code.\n\na=('airport code', 'airline code', 'airline name')\nd=('airport code', 'airport name')\n\nx=[]\ny=[]\nfor i in a:\n    x.append(a[i])\nfor i in d:\n    y.append(d[i])\n\na=('airport code', 'airline name')\n\nm=[]\n\nfor i in a"}
{"question": "Which airline has most number of flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airline has most number of flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airline has most number of flights?. \nSELECT  SELECT \nCOUNT(*) \nFROM airlines AS A\nGROUP BY A.uid;\n\n# GROUP BY clause to get all the numbers of airline\n# There are 5 airlines in database, so the number of airline is 5\n# But there are 12 flights, so the number of flights is 12\n# \n# Result is:\n# uid  | Airline  | Abbreviation  | Country\n# ---- | ------  | ------------ | ------\n# 001  | AER LINGUS | AER LINGUS | IRE\n# 002  | EASYJET   | EASYJET   | SWE\n# 003  | AIR FRANCE | AIR FRANCE | FRA\n# 004  | BMI AIRWAYS | BMI AIRWAYS | GBR\n# 005  | IBERIA    | IBERIA    | ESP\n# \n# The answer is: AIR FRANCE\n# \n# \n# Which airport has most number of flights?. \nSELECT  SELECT"}
{"question": "What airline serves the most flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat airline serves the most flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat airline serves the most flights?. \nSELECT  SELECT *  FROM \nairlines\nSELECT  SELECT DISTINCT *  FROM \nairlines\n#airlines\n#airlines('uid')\n#airlines('uid', 'Abbr')\n#airlines('uid', 'Abbr', 'Country')\n#airlines('uid', 'Abbr', 'Country', 'CountryAbbr')\n#airlines('uid', 'Abbr', 'CountryAbbr', 'Country')\n#airlines('uid', 'Country')\n#airlines('uid', 'Country', 'CountryAbbr')\n#airlines('uid', 'CountryAbbr')\n#airlines('uid', 'Airline')\n#airlines('uid', 'Airline', 'Abbr')\n#airlines('uid', 'Airline', 'Abbr', 'Country')\n#airlines('uid', 'Airline', 'Abbr', 'Country', 'CountryAbbr')\n#airlines('uid', 'Airline', 'Abbr', 'CountryAbbr', 'Country')\n#airlines('uid', 'Airline', 'Abbr', 'CountryAbbr')\n#airlines('uid', '"}
{"question": "Find the abbreviation and country of the airline that has fewest number of flights?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the abbreviation and country of the airline that has fewest number of flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the abbreviation and country of the airline that has fewest number of flights?. \nSELECT  SELECT distinct airlines.abbreviation, countries.abbreviation\nFROM    airlines\nJOIN    countries\nON      countries.country_code = airlines.country\nWHERE   flights.airline = airlines.uid\nAND     flights.airport_code = airports.airport_code\nGROUP BY airlines.abbreviation, countries.abbreviation\nOrder by flights.airline desc\n\nSQLite SQL flight_3 database, with their properties:\n#flights('FlightNo', 'SourceAirport', 'DestAirport')\n\nFind the abbreviation and country of the airport that has fewest number of flights?.\nSELECT  SELECT distinct airports.abbreviation, countries.abbreviation\nFROM    airports\nJOIN    countries\nON      countries.country_code = airports.country\nWHERE   flights.airport_code = airports.airport_code\nGROUP BY airports.abbreviation, countries.abbreviation\nOrder by flights.airport_code desc\n"}
{"question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the abbreviation of the airilne has the fewest flights and what country is it in?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the abbreviation of the airilne has the fewest flights and what country is it in?. \nSELECT  SELECT  SELECT\nAbbreviation, Country, Airline\nFROM ( SELECT  Airline, COUNT(*) AS Count FROM  flight_2 GROUP BY Airline ) as t\nORDER BY Count DESC\nGROUP BY t.Airline, t.Country\n\n#airlines_2('uid', 'Airline', 'Abbreviation', 'Country')\n#airports_2('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights_2('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\n"}
{"question": "What are airlines that have some flight departing from airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airlines that have some flight departing from airport 'AHD'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airlines that have some flight departing from airport 'AHD'?. \nSELECT  SELECT  SELECT\nairlines(\"AHD\", \"Airline\", \"Abbreviation\", \"Country\")\nairports(\"AHD\", \"AirportCode\", \"AirportName\", \"Country\", \"CountryAbbrev\")\nflights(\"AHD\", \"FlightNo\", \"SourceAirport\", \"DestAirport\");\n\n#Now select all airports of the country 'UZB', as we will use it in the next query.\nSELECT  airports(\"UZB\", \"AirportCode\", \"AirportName\", \"Country\", \"CountryAbbrev\");\n\n#We select all airlines that have some flight departing from some airport of the country 'UZB'. \nSELECT  SELECT  SELECT\nairlines(\"UZB\", \"Airline\", \"Abbreviation\", \"Country\")\nairports(\"UZB\", \"AirportCode\", \"AirportName\", \"Country\", \"CountryAbbrev\")\nflights(\"UZB\", \"FlightNo\", \"SourceAirport\", \"DestAirport\");\n\n#All airlines that have some flight departing from airport 'B"}
{"question": "Which airlines have a flight with source airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have a flight with source airport AHD?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have a flight with source airport AHD?. \nSELECT  SELECT *\nFROM    airlines\nWHERE   airlines.uid IN (SELECT airportcode FROM airports WHERE airportname='AHD');\n#Which airports have flights to AMS?. \nSELECT  SELECT *\nFROM    flights\nWHERE   flights.airline IN (SELECT airline FROM airlines WHERE flights.sourceairport='AMS');\n#Which airports have flights to AMS from MUC?. \nSELECT  SELECT *\nFROM    flights\nWHERE   flights.airline IN (SELECT airline FROM airlines WHERE flights.destairport='MUC') AND flights.sourceairport='AMS';\n#Which airports have flights to MUC from AMS?. \nSELECT  SELECT *\nFROM    flights\nWHERE   flights.airline IN (SELECT airline FROM airlines WHERE flights.destairport='MUC') AND flights.sourceairport='AMS';\n#Which airports have flights to AMS from MUC?. \nSELECT  SELECT *\nFROM    flights\nWHERE   flights.airline IN (SELECT airline FROM airlines WHERE fl"}
{"question": "What are airlines that have flights arriving at airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airlines that have flights arriving at airport 'AHD'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airlines that have flights arriving at airport 'AHD'?. \nSELECT  SELECT DISTINCT AIRLINE.UID, AIRPORT.CITY, FLIGHT.DESTAIRPORT\nFROM AIRPORT, FLIGHT, AIRLINE\nWHERE FLIGHT.DESTAIRPORT = AIRPORT.CITY\nAND AIRPORT.CITY = 'AHD'\n\n\n### Reading in the database\n\n#D:\\SQLite-3.8.6\\lib>sqlite3 flight_2.sqlite\nSQLite version 3.8.6 2012-02-25 09:53:03\nEnter \".help\" for instructions\nEnter SQL statements terminated with a \";\"\nsqlite> .help\nsqlite> .dbpath flight_2.sqlite\nsqlite> .tables\nAIRPORT - 1 record(s)\nairlines - 1 record(s)\nflights - 2 record(s)\nAIRPORT.CITY - 1 record(s)\nAIRPORT.UID - 1 record(s)\nAIRPORT.UUID - 1 record(s)\nAIRPORT.CITY - 1 record(s"}
{"question": "Which airlines have a flight with destination airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have a flight with destination airport AHD?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have a flight with destination airport AHD?. \nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT"}
{"question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have flights from both airports 'APG' and 'CVO'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have flights from both airports 'APG' and 'CVO'.. \nSELECT  SELECT A.uid, A.Abbreviation, A.Country FROM airlines A, flights F WHERE A.uid=F.Airline AND A.uid='APG' AND F.DestAirport='CVO'\n\nSELECT  SELECT A.uid, A.Abbreviation, A.Country FROM airlines A, flights F WHERE A.uid=F.Airline AND A.uid='APG' AND F.SourceAirport='CVO'\n\nSELECT  SELECT A.uid, A.Abbreviation, A.Country FROM airlines A, flights F WHERE A.uid=F.Airline AND F.SourceAirport='APG' AND F.DestAirport='CVO'\n\nSELECT  SELECT A.uid, A.Abbreviation, A.Country FROM airlines A, flights F WHERE A.uid=F.Airline AND F.DestAirport='APG' AND F.SourceAirport='CVO'\n\nSELECT  SELECT A.uid, A.Abbreviation, A.Country FROM airlines A, flights F WHERE A.uid=F.Air"}
{"question": "Which airlines have departing flights from both APG and CVO airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have departing flights from both APG and CVO airports?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have departing flights from both APG and CVO airports?. \nSELECT  SELECT * FROM sqlite_master;\nSELECT * FROM sqlite_master ORDER BY name;\n\n#airlines('airline', 'country')\n\nSELECT * FROM sqlite_master WHERE type = \"table\" ORDER BY name;\nSELECT * FROM sqlite_master;\n\n#airports('airport', 'airportcode')\n\nSELECT * FROM sqlite_master WHERE type = \"table\" ORDER BY name;\nSELECT * FROM sqlite_master;\n\n#flights('airline', 'flightno')\n#flights('airline', 'sourceairport', 'destairport')\n\nSELECT * FROM sqlite_master WHERE type = \"table\" ORDER BY name;\nSELECT * FROM sqlite_master;\n\n#flights('airline', 'flightno', 'sourceairport', 'destairport')\n#flights('airline', 'flightno', 'sourceairport', 'destairport', 'airportcode')\n\nSELECT * FROM sqlite_master WHERE type = \"table\" ORDER BY name;\nSELECT * FROM sqlite_master;\n\n#flights('airline', 'flightno', 'sourceairport', 'destairport', '"}
{"question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have flights from airport 'CVO' but not from 'APG'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have flights from airport 'CVO' but not from 'APG'.. \nSELECT  SELECT * FROM flights \nWHERE airline NOT IN (SELECT airline FROM flights WHERE destination_airport = 'APG')\nOR source_airport NOT IN (SELECT airport FROM flights WHERE destination_airport = 'APG') \nORDER BY source_airport ASC, destination_airport ASC;\n\n\n\n\n"}
{"question": "Which airlines have departures from CVO but not from APG airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have departures from CVO but not from APG airports?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have departures from CVO but not from APG airports?. \nSELECT  SELECT airlines.uid, airlines.abbreviation, COUNT(airports.airportcode),\n   airports.airportname, airports.country, airports.countryabbrev \n   FROM airlines\n   LEFT JOIN airports ON airlines.uid=airports.airlineuid\n   WHERE airports.airportcode != 'APG'\nGROUP BY airlines.uid, airlines.abbreviation\nORDER BY airlines.uid, airlines.abbreviation;\n\n#which airports have flights to 2 airports?.\n#SELECT airports.airportcode, airports.airportname, COUNT(airlines.uid),\n#   airlines.abbreviation, airports.country, airports.countryabbrev\n#   FROM airlines\n#   LEFT JOIN airports ON airlines.uid=airports.airlineuid\n#   WHERE airports.airportcode IN ('CPT','APG')\n#GROUP BY airports.airportcode, airports.airportname, airlines.uid, airlines.abbreviation, airports.country, airports.countryabbrev\n"}
{"question": "Find all airlines that have at least 10 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have at least 10 flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have at least 10 flights.. \nSELECT  SELECT avg(Flight_2.Duration) AS FlightTime,\n      airline.Name AS Airline,\n      airport.Name AS SourceAirport,\n      airport.Name AS DestAirport\n    FROM flights as Flight_2\n    INNER JOIN airlines as airline ON airline.uid = Flight_2.Airline\n    INNER JOIN airports as airport ON airport.uid = Flight_2.SourceAirport\n    INNER JOIN airports as airport ON airport.uid = Flight_2.DestAirport\n    WHERE Flight_2.Airline IN (\n                                SELECT airline.uid FROM airlines as airline WHERE airline.uid IN (\n                                    SELECT airline.uid FROM airlines as airline WHERE airline.uid IN (\n                                        SELECT airline.uid FROM airlines as airline WHERE airline.uid IN (\n                                            SELECT airline.uid FROM airlines as airline WHERE airline.uid IN (\n                                                SELECT airline.uid FROM airlines as airline WHERE airline.uid IN (\n                                                   "}
{"question": "Which airlines have at least 10 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have at least 10 flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have at least 10 flights?. \nSELECT  SELECT  (Airline.Abbreviation) \"Airline\", (Airline.Name) \"Airline Name\", (Country.Abbrev) \"Country\", COUNT(*) \"Number of Flights\"\nFROM    Airlines\nJOIN    Flights ON Flights.Airline = Airlines.uid\nGROUP BY (Airline.Abbreviation), (Airline.Name), (Country.Abbrev)\nHAVING   COUNT(*) >= 10\n\n#Other SQL statements:\nSELECT * FROM flights;\n\nSELECT  (Flight.Airline) \"Airline\", (Flight.FlightNo) \"FlightNo\", (Flight.SourceAirport) \"SourceAirport\", (Flight.DestAirport) \"DestAirport\"\nFROM    Flights Flight\nWHERE   (Flight.Airline) = (Airports.Abbreviation)\n\nSELECT  (Flight.Airline) \"Airline\", (Flight.FlightNo) \"FlightNo\", (Flight.SourceAirport) \"SourceAirport\", (Flight.Dest"}
{"question": "Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have fewer than 200 flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have fewer than 200 flights.. \nSELECT  SELECT A.Airline, B.FlightNo, C.AirportCode, D.AirportName, E.Country, F.CountryAbbrev\nFROM airlines A, flights B, airports C, countries D, country_abbrev E\nWHERE A.uid = B.uid\n  AND A.uid = C.uid\n  AND A.uid = D.uid\n  AND A.uid = E.uid\n  AND A.uid = B.uid\n  AND A.uid = B.uid\n  AND A.uid = E.uid\n  AND A.uid = D.uid\n  AND A.uid = C.uid\n  AND A.uid = E.uid\n  AND A.uid = B.uid\n  AND A.uid = E.uid\n  AND A.uid = B.uid\n  AND A.uid = E.uid\n  AND A.uid = C.uid\n  AND A.uid = B.uid\n  AND A.uid = E.uid\n  AND A.uid = D.uid\n  AND A.uid = B.uid\n  AND A.uid = E"}
{"question": "Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have less than 200 flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have less than 200 flights?. \nSELECT  SELECT A.uid, COUNT(A.uid) as num_flights\n  FROM   flights AS A\n  JOIN   airlines AS B ON A.Airline = B.uid\n  WHERE  A.DestAirport = 1\n  GROUP  BY A.uid\n  HAVING  num_flights < 200\nORDER  BY num_flights DESC\n\nWhich airports have no flights?\nSELECT  SELECT A.uid, COUNT(A.uid) as num_flights\n  FROM   flights AS A\n  JOIN   airports AS B ON A.SourceAirport = B.uid\n  WHERE  A.FlightNo = 0\n  GROUP  BY A.uid\n  HAVING  num_flights = 0\nORDER  BY num_flights DESC\n\nWhich airports are not linked to any airline?\nSELECT  SELECT A.uid, COUNT(A.uid) as num_flights\n  FROM   flights AS A\n  JOIN   airlines AS B ON A.Airline = B.uid\n  JOIN   airports AS C ON A.Dest"}
{"question": "What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of Airline \"United Airlines\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of Airline \"United Airlines\"?. \nSELECT  SELECT  SELECT \ns.airline,\ns.flight_no,\ns.source_airport,\ns.destination_airport\nFROM flights f\nJOIN (SELECT airline, flight_no, source_airport, destination_airport\n      FROM flights WHERE country = 'USA') s on f.airline = s.airline\nWHERE f.airline = \"United Airlines\"\n\n#Select all flights from airlines and airports with the given airline, that are scheduled for today\n#Note that this is a three-pass query.  The first pass selects the airlines, the second pass selects the flights\n#from the airlines, and the third pass selects the flights from the flights.\n#It is possible to reduce the number of passes with the help of index, but for this exercise, we'll stick with this query.\nSELECT airline,\n   flights.flight_no,\n   source_airport,\n   destination_airport,\n   FROM flights f\n   JOIN airlines a on a.airline = f.airline\n   JOIN (SELECT flight_no, source_"}
{"question": "Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich flight numbers correspond to United Airlines flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich flight numbers correspond to United Airlines flights?. \nSELECT  SELECT  SELECT \nFLIGHT_NO, \nSOURCE_AIRPORT, \nDESTINATION_AIRPORT\nFROM FLIGHTS;\n\nWhich airlines fly to which airports?. \nSELECT  SELECT  SELECT \nAIRLINE, \nSOURCE_AIRPORT, \nDESTINATION_AIRPORT\nFROM FLIGHTS;\n\nWhich airports can be reached by United Airlines?. \nSELECT  SELECT  SELECT \nAIRPORT, \nSOURCE_AIRPORT, \nDESTINATION_AIRPORT\nFROM FLIGHTS;\n\nThese tables are related through an entity-relationship model (ER diagram), \nwhich defines the relationships between these tables. The relationships are \nshown in the following diagram.\n\n       \nE\n             /\nA\n\nThe following statements create the tables and fill in the information\n       \nCREATE TABLE AIRLINES (\n    AIRLINE_ID INTEGER PRIMARY KEY,\n    AIRLINE_ABBREV VARCHAR,\n    AIRLINE_COUNTRY VARCHAR"}
{"question": "What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights departing from Airport \"APG\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights departing from Airport \"APG\"?. \nSELECT  SELECT  SELECT  SELECT  SELECT \n*  FROM  *  FROM  *  FROM  *  FROM  *\nFROM  * FROM  * FROM  * FROM  * FROM \n*  FROM  *  FROM  *  FROM  *  FROM  *\nFROM  * FROM  * FROM  * FROM  * FROM \n*  FROM  *  FROM  *  FROM  *  FROM  *\nFROM  * FROM  * FROM  * FROM  * FROM \n*  FROM  *  FROM  *  FROM  *  FROM  *\nFROM  * FROM  * FROM  * FROM  * FROM \n*  FROM  *  FROM  *  FROM  *  FROM  *\nFROM  * FROM  * FROM  * FROM  * FROM \n*  FROM  *  FROM  *  FROM  *  FROM  *\nFROM  * FROM  * FROM  * FROM  * FROM \n*  FROM  *  FROM  *  FROM  *  FROM  *\nFROM  * FROM  * FROM  * FROM  * FROM \n*  FROM  *  FROM  *  FROM  *  FROM  *"}
{"question": "Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights leaving from APG.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights leaving from APG.. \n}
{"question": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights arriving at Airport \"APG\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights arriving at Airport \"APG\"?. \nSELECT  SELECT 'APG' AS \"Airport\" FROM \"flights\" WHERE \"FlightNo\" LIKE '%APG%'\n\n#You can also specify an array of cities or airports in a single query. \nSELECT  'APG' AS \"Airport\" FROM \"flights\" WHERE \"FlightNo\" LIKE '%APG%' OR \"AirportName\" LIKE '%APG%' OR \"City\" LIKE '%APG%'\n\n#This is a common approach in the RDBMS world to create a 'virtual' table of\n#intersections between two tables.\nSELECT  'APG' AS \"Airport\" FROM \"flights\" LEFT JOIN \"airports\" ON \"FlightNo\" = \"FlightNo\" AND \"AirportCode\" = \"AirportCode\"\n\n#This would return all flights which fly between \"APG\" and \"SFO\", for example.\n#Warning: it's not efficient and usually not very practical.\n#SELECT  'APG' AS \"Airport\" FROM \"flights\" LEFT JOIN \"airports\" ON \"FlightNo\" = \"FlightNo\" AND \"Air"}
{"question": "Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights landing at APG.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights landing at APG.. \n}
{"question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights departing from City \"Aberdeen \"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights departing from City \"Aberdeen \"?. \nSELECT  SELECT DISTINCT airline, flightno, sourceairport, destairport FROM flights \nWHERE destairport = 'Aberdeen ' AND sourceairport != 'Aberdeen ' ORDER BY flightno\nSELECT  SELECT DISTINCT airline, flightno, sourceairport, destairport FROM flights \nWHERE destairport = 'Aberdeen ' AND sourceairport != 'Aberdeen ' ORDER BY flightno, sourceairport\nThe result of the first query should be 10 flights from \"London\" to \"Aberdeen\", \nof which 2 are on \"British Airways\" and 8 are on \"Easyjet\".\nThe result of the second query should be all 10 flights plus the ones from \"Edinburgh\" to \"Aberdeen\",\nof which 2 are on \"British Airways\" and 8 are on \"Easyjet\".\n\n## External links\n\n* http://www.sqlite.org/\n* http://www.sqlite.org/fundamentals.html#select\n* http://www.sqlite.org/lang_select.html"}
{"question": "Give the flight numbers of flights leaving from Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights leaving from Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights leaving from Aberdeen.. \nSELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \nFROM    SELECT  SELECT  SELECT \n"}
{"question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights arriving at City \"Aberdeen\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights arriving at City \"Aberdeen\"?. \nSELECT  SELECT  SELECT \nAirline, FlightNo, SourceAirport, DestAirport\nFROM      airlines, flights, airports\nWHERE     airlines.uid = flights.Airline\nAND      airports.City = flights.DestAirport\nAND      airports.City = flights.SourceAirport\nORDER BY \nAirline, FlightNo, SourceAirport\nThe query needs the following information:\nThe two flights must have two flights that use the same airline and use the same source and destination.\nYou can use the following query to retrieve the flight numbers and the airline of the flight.\nSELECT  Airline, FlightNo, SourceAirport, DestAirport\nFROM      flights\nWHERE     FlightNo = 100\nAND      SourceAirport = 'Aberdeen'\nAND      DestAirport = 'Aberdeen'\nYou can find all flights that arrive at the London airport.\nSELECT  Airline, FlightNo, SourceAirport, DestAirport\nFROM      flights\nWHERE     FlightNo = 2"}
{"question": "Give the flight numbers of flights arriving in Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights arriving in Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights arriving in Aberdeen.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nairlines.uid airlines.name airlines.abbreviation airlines.country_name airlines.country_code airports.city airports.airport_code airports.airport_name airports.country_name airports.country_abbrev\nflights.airline flights.flight_no flights.source_airport flights.destination_airport\n\n###SQLite SQL flight_3 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\n\n###SQLite SQL flight_4 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('A"}
{"question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the number of flights landing in the city of Aberdeen or Abilene.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the number of flights landing in the city of Aberdeen or Abilene.. \nSELECT  SELECT COUNT(*) FROM flights \nWHERE  source_airport = 'ABZ' \nAND  dest_airport = 'ABI'\n\n\n"}
{"question": "How many flights land in Aberdeen or Abilene?", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights land in Aberdeen or Abilene?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights land in Aberdeen or Abilene?. \nSELECT  SELECT * FROM flights WHERE DestAirport = 'ABI' AND SourceAirport = 'ABZ' \nSELECT  SELECT * FROM flights WHERE DestAirport = 'ABI' AND SourceAirport = 'ABZ' \nSELECT  SELECT * FROM flights WHERE DestAirport = 'ABI' AND SourceAirport = 'ABZ' \n\n### SQL query\n#Select airports, airlines, and flights from the database.\n#Run this query by entering: \n#airports, airlines, and flights from the database.\n#Run this query by entering: \n#airports, airlines, and flights from the database.\n#airports, airlines, and flights from the database.\nSELECT  airlines, airports, flights FROM flights;\n\n### SQL statement\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport"}
{"question": "Find the name of airports which do not have any flight in and out.", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the name of airports which do not have any flight in and out.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the name of airports which do not have any flight in and out.. \nSELECT  SELECT City, AirportCode, AirportName, Country, CountryAbbrev\nFROM    flights\nWHERE   AirportName NOT IN\n        (\n        SELECT AirportName\n        FROM    flights\n        WHERE   AirportCode NOT IN\n                    (\n                    SELECT AirportCode\n                    FROM    flights\n                    WHERE   FlightNo NOT IN\n                            (\n                            SELECT FlightNo\n                            FROM    flights\n                            WHERE   AirportCode = 'airportCode'\n                            )\n                    )\n        )\n        AND AirportName != ''\n;\n\n$cursor = db_query_all_records(\n    \"SELECT airports.AirportCode, airports.AirportName, airlines.Abbreviation, airlines.Country, airlines.CountryAbbrev FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports ON airports.AirportCode = flights.DestAirport WHERE (airlines.CountryAbbrev != airlines.Country) AND airlines.Abbreviation != ' '\",\n    array(\n        array(\"AirportCode"}
{"question": "Which airports do not have departing or arriving flights?", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airports do not have departing or arriving flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airports do not have departing or arriving flights?. \nSELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\n\nSELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\n\nSELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT  SELECT  SELECT  SELECT\nFROM  SELECT"}
{"question": "How many employees are there?", "sql": "SELECT count(*) FROM employee", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many employees are there?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many employees are there?. \nSELECT  SELECT COUNT(1) FROM employee\nWhich is the most popular shop?. \nSELECT  SELECT  SHOP_ID,COUNT(1) FROM shop GROUP BY SHOP_ID ORDER BY COUNT(1) DESC LIMIT 1;\nSELECT  SELECT  SHOP_ID,COUNT(1) FROM shop GROUP BY SHOP_ID ORDER BY COUNT(1) ASC LIMIT 1;\nWrite the SQL code to select the name of the shop that has the highest number of employees. \nSELECT  SHOP_ID,NAME FROM shop GROUP BY SHOP_ID ORDER BY COUNT(1) DESC LIMIT 1;\nWrite the SQL code to select the number of employees of the shop with the most employees. \nSELECT  SHOP_ID,COUNT(1) FROM shop GROUP BY SHOP_ID ORDER BY COUNT(1) ASC LIMIT 1;\nWrite the SQL code to select the shop with the most employees. \nSELECT  SHOP_ID,NAME FROM shop GROUP BY SHOP_ID ORDER BY COUNT(1) DESC LIMIT 1;\nWrite the SQL code to select the shop that has the highest number of employees and shops. \nSELECT  SHOP_ID,COUNT("}
{"question": "Count the number of employees", "sql": "SELECT count(*) FROM employee", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of employees. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of employees. \nSELECT  SELECT employee_id, COUNT(employee_id) AS employees\nFROM    employee_hire_evaluation\nGROUP BY employee_id\n## SELECT SELECT shop_id, COUNT(shop_id) AS shops\nSELECT  SELECT shop_id, COUNT(shop_id) AS shops\nFROM    shop\nGROUP BY shop_id\n## SELECT SELECT hiring_id, COUNT(hiring_id) AS hiring\nSELECT  SELECT hiring_id, COUNT(hiring_id) AS hiring\nFROM    hiring\nGROUP BY hiring_id\nSELECT  SELECT evaluation_id, COUNT(evaluation_id) AS evaluation\nFROM    evaluation\nGROUP BY evaluation_id\n\nSELECT shop_id, employee_id, hiring_id, evaluation_id\nFROM employee_hire_evaluation\nWHERE\n    employee_id IS NOT NULL\n    AND shop_id IS NOT NULL\n    AND hiring_id IS NOT NULL\n    AND evaluation_id IS NOT NULL\nORDER BY shop_id ASC, employee_id ASC, hiring_id ASC, evaluation_id ASC\n## SELECT shop_id, employee_id, hiring_id, evaluation_id\n"}
{"question": "Sort employee names by their age in ascending order.", "sql": "SELECT name FROM employee ORDER BY age", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nSort employee names by their age in ascending order.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nSort employee names by their age in ascending order.. \n}
{"question": "List the names of employees and sort in ascending order of age.", "sql": "SELECT name FROM employee ORDER BY age", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nList the names of employees and sort in ascending order of age.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nList the names of employees and sort in ascending order of age.. \nSELECT  SELECT 'Employee_ID' AS 'Name', \n\t\t'Age' AS 'Name', \n\t\t'City' \nFROM employee;\n\nSELECT  SELECT 'Employee_ID' AS 'Name', \n\t\t'Name' AS 'Name', \n\t\t'Age' \nFROM employee;\n\nSELECT  SELECT 'Employee_ID' AS 'Name', \n\t\t'Name' AS 'Name', \n\t\t'Age' AS 'Name', \n\t\t'City' AS 'Name' \nFROM employee;\n\nSELECT  SELECT 'Employee_ID' AS 'Name', \n\t\t'Name' AS 'Name', \n\t\t'Age' AS 'Name', \n\t\t'City' AS 'Name' \nFROM employee;\n\nSELECT  SELECT 'Employee_ID' AS 'Name', \n\t\t'Name' AS 'Name', \n\t\t'Age' AS 'Name', \n\t\t'City' AS 'Name' \nFROM employee;\n\nSELECT  SELECT 'Employee_ID' AS 'Name', \n\t\t'Name' AS 'Name', \n\t\t'Age"}
{"question": "What is the number of employees from each city?", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is the number of employees from each city?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is the number of employees from each city?. \nSELECT  SELECT city, count(*) FROM employee GROUP BY city;\nWhat is the number of shops from each district? \nSELECT  SELECT district, count(*) FROM shop GROUP BY district;\nWhat is the number of shops owned by each employee? \nSELECT  SELECT employee_id, count(*) FROM shop GROUP BY employee_id;\nWhat is the number of shops from each employee? \nSELECT  SELECT employee_id, count(*) FROM shop GROUP BY employee_id;\nWhat is the number of shops owned by each shop? \nSELECT  SELECT shop_id, count(*) FROM shop GROUP BY shop_id;\nWhat is the total number of shops in each district? \nSELECT  SELECT district, sum(count(*)) FROM shop GROUP BY district;\nWhat is the total number of employees from each city? \nSELECT  SELECT city, sum(count(*)) FROM employee GROUP BY city;\nWhat is the total number of employees? \nSELECT  SELECT employee_id, sum(count(*)) FROM shop GROUP BY employee_id;\nWhat is the total number of employees from each district? \nSELECT  SELECT district, sum(count(*)) FROM employee GROUP BY district;\nWhat"}
{"question": "Count the number of employees for each city.", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of employees for each city.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of employees for each city.. \nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Jinan\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Beijing\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Guangzhou\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Shanghai\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Wuhan\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Xi'an\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Chongqing\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Shenzhen\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Tianjin\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location = \"Xiamen\";\n\nSELECT  SELECT\nCount(*) as Employee_Total\nFROM employee\nWHERE Location"}
{"question": "Which cities do more than one employee under age 30 come from?", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich cities do more than one employee under age 30 come from?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich cities do more than one employee under age 30 come from?. \nSELECT  SELECT  SELECT\nemployee.Shop_ID, employee.Name, employee.Age, district.Name,\nGROUP_CONCAT(shop.Name ORDER BY shop.Name DESC SEPARATOR ' ') AS \"Most_popular_district\"\nFROM employee, shop, district\nWHERE employee.Shop_ID = shop.Shop_ID\nAND shop.District_ID = district.District_ID\nGROUP BY employee.Shop_ID, employee.Name, employee.Age, district.Name;\n\nSELECT  SELECT  SELECT\nemployee.Shop_ID, employee.Name, employee.Age, shop.Name,\nGROUP_CONCAT(employee.City ORDER BY employee.City DESC SEPARATOR ' ') AS \"Most_popular_city\"\nFROM employee, shop\nWHERE employee.Shop_ID = shop.Shop_ID\nGROUP BY employee.Shop_ID, employee.Name, employee.Age, shop.Name;\n\n\nSELECT  SELECT  SELECT\nemployee.Shop_ID, employee.Name, employee.Age, shop.Name,\nGROUP_CONCAT(employee.City ORDER BY employee.City DESC"}
{"question": "Find the cities that have more than one employee under age 30.", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the cities that have more than one employee under age 30.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the cities that have more than one employee under age 30.. \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT \nSELECT  SELECT \nemployee.City,\nemployee.Age,\nemployee.Name,\nshop.City,\nshop.Number_products,\nmanager.Name,\nhiring.Start_from,\nhiring.Is_full_time\nFROM employee, shop, hiring, manager\nWHERE employee.City = shop.City\nAND employee.Age < 30\nAND shop.Number_products > 0\nAND shop.Manager_name = manager.Name\nAND hiring.Shop_ID = shop.Shop_ID\nAND hiring.Start_from = hiring.Is_full_time = 'true'\nGROUP BY employee.City, employee.Age, employee.Name, shop.City, shop.Number_products, manager.Name, hiring.Start_from, hiring.Is_full_time\nhaving COUNT(DISTINCT employee.City) > 1\n\n\n### SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', '"}
{"question": "Find the number of shops in each location.", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the number of shops in each location.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the number of shops in each location.. \nSELECT  SELECT shops.Location, COUNT(*) AS N FROM shops\nUNION\nSELECT  SELECT locations.Location, COUNT(*) AS N FROM locations\nGROUP BY 1\n\nInventory is the most important thing in business and it should be done correctly. You can use Python to compare the actual inventory with the actual inventory. \n\nSELECT SUM(shops.Number_products) AS N FROM shops\nUNION\nSELECT SUM(locations.Number_products) AS N FROM locations\nGROUP BY 1\n\nThe next step is to create a script for the next step which will execute the next query for the next stage. \n\nFind the number of shops in each location.. \nSELECT  SELECT shops.Location, COUNT(*) AS N FROM shops\nUNION\nSELECT  SELECT locations.Location, COUNT(*) AS N FROM locations\nGROUP BY 1\n\n##Test Scripts for Employee evaluation\nSELECT  SELECT employees.Employee_ID, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "How many shops are there in each location?", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many shops are there in each location?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many shops are there in each location?. \nSELECT  SELECT \nDistrict,\nCount(*)\nFROM (SELECT \n\t\t\t\tShop_ID,\n\t\t\t\t'Canada' AS Country_ID,\n\t\t\t\t'Toronto' AS City_ID\n\t\t\tFROM (SELECT \n\t\t\t\t\t\tShop_ID,\n\t\t\t\t\t\tCountry_ID,\n\t\t\t\t\t\tCity_ID\n\t\t\t\tFROM Table_A) \n\t\t\tGROUP BY \n\t\t\t\t\tShop_ID,\n\t\t\t\t\tCountry_ID,\n\t\t\t\t\tCity_ID\n\t\t\t\t\t) \nGROUP BY \n\t\t\t\tDistrict,\n\t\t\t\tCountry_ID,\n\t\t\t\tCity_ID\n\t\t\t\t\t) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Find the manager name and district of the shop whose number of products is the largest.", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the manager name and district of the shop whose number of products is the largest.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the manager name and district of the shop whose number of products is the largest.. \nSELECT  SELECT \n      manager(shop.Shop_ID) as Manager_name,\n      shop.Location,\n      district(shop.Shop_ID),\n      COUNT(product.Product_ID) AS Number_products\nFROM  employee JOIN product ON employee.Employee_ID = product.Employee_ID JOIN shop ON product.Shop_ID = shop.Shop_ID\nGROUP BY shop.Shop_ID\nORDER BY COUNT(product.Product_ID) DESC\n\n#Hint:  employee('Employee_ID', 'Name', 'Age', 'City')\n#Hint:  shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#Hint:  hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#Hint:  evaluation('Employee_ID', 'Year_awarded', 'Bonus')\n#Hint:  sqlite3_single_table_query_with_values\n"}
{"question": "What are the manager name and district of the shop that sells the largest number of products?", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the manager name and district of the shop that sells the largest number of products?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the manager name and district of the shop that sells the largest number of products?. \nSELECT  SELECT  SELECT\n SELECT employee.employee_id employee.employee_id employee.employee_id employee.employee_id\n  FROM employee_hire_evaluation employee_hire_evaluation employee_hire_evaluation employee_hire_evaluation employee_hire_evaluation\n WHERE employee_hire_evaluation.shop_id = employee_hire_evaluation.shop_id\n   AND employee_hire_evaluation.employee_id = 5689\n   AND employee_hire_evaluation.year_awarded = 2009\n\n\"\"\"\n\ndef select():\n    \"\"\"\n    SELECT shop.shop_id, shop.name, location.district, location.location, location.number_products, employee_hire_evaluation.employee_id\n    FROM employee_hire_evaluation\n    JOIN employee ON employee.employee_id = employee_hire_evaluation.employee_id\n    JOIN shop ON shop.shop_id = employee_hire_evaluation.shop_id\n    JOIN location ON location.location = shop.location\n    WHERE employee_hire_evaluation.employee_id = 5689\n    AND employee"}
{"question": "find the minimum and maximum number of products of all stores.", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nfind the minimum and maximum number of products of all stores.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nfind the minimum and maximum number of products of all stores.. \nSELECT  SELECT MIN(Number_products) AS MinNumberProducts,\n         SELECT MAX(Number_products) AS MaxNumberProducts\n        FROM Shop\n        GROUP BY Shop_ID\n\nfind the minimum and maximum bonus of all employees.. \nSELECT  SELECT MIN(Bonus) AS MinBonus,\n         SELECT MAX(Bonus) AS MaxBonus\n        FROM Employee\n        GROUP BY Employee_ID\n\n##### Find the top 10 employees with the highest bonus... \n##### and their name, the year and the bonus\nSELECT  SELECT Employee_ID,\n         Employee_Name,\n         Year_awarded,\n         Bonus\n        FROM Employee\n        GROUP BY Employee_ID\n        ORDER BY Bonus DESC\n\n#if you need to find the top 10 employees with the highest bonus, then do:\n#find the top 10 employees with the highest bonus.. \n#SELECT  SELECT Employee_ID,\n#         Employee_Name,\n#         Year_awarded,\n#         Bonus\n#        FROM Employee\n#        GROUP BY Employee_ID\n#        ORDER BY Bonus DESC"}
{"question": "What are the minimum and maximum number of products across all the shops?", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the minimum and maximum number of products across all the shops?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the minimum and maximum number of products across all the shops?. \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT"}
{"question": "Return the name, location and district of all shops in descending order of number of products.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nReturn the name, location and district of all shops in descending order of number of products.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nReturn the name, location and district of all shops in descending order of number of products.. \nSELECT  SELECT  SELECT\n10000000 10000000\nFROM  employee \nLEFT JOIN  shop ON employee.employee_id = shop.employee_id\nLEFT JOIN  hiring ON shop.shop_id = hiring.shop_id\nLEFT JOIN  evaluation ON employee.employee_id = evaluation.employee_id\nORDER BY district DESC, products DESC\n\n\n#Rewrite the above query to get the same results from the database and place the result into a hash table.\n\ndef index_shop_by_district_and_number_of_products\n    db = SQLite3::Database.new(\"employee_hire_evaluation.db\")\n    db.results_as_hash = true\n    db.results_as_array = true\n    db.id_column = :employee_id\n    db.table_name_map = {:employee => :employee_id, :shop => :shop_id, :hiring => :employee_id, :evaluation => :employee_id}\n    db.columns = %w{employee_id name location district products hiring.year_awarded bonus}\n"}
{"question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nSort all the shops by number products in descending order, and return the name, location and district of each shop.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nSort all the shops by number products in descending order, and return the name, location and district of each shop.. \nSELECT  SELECT \n  Name\n  Location\n  District\nFROM \n  shop\nGROUP BY\n  Name, Location, District\nORDER BY\n  Number_products DESC\n\n\n\n## Write a function named `get_employees_info` to return the\n## information of all employees.\n#employees_info = get_employees_info(employee_id)\n\n# @return the employee name, age, city and department.\n# @param employee_id string.\ndef get_employees_info(employee_id)\n    #employee('Employee_ID', 'Name', 'Age', 'City')\n    #employees_info = []\n    #SELECT \n      #Name\n      #Age\n      #City\n    #FROM \n      #employee\n    #WHERE \n      #Employee_ID = 'Employee_ID'\n    #GROUP BY\n      #Name\n      #Age\n      #City\n    #ORDER BY\n      #Name\n      #Age\n      #City\n    #get_employees_info(employee_id)\n    #employees_info.each do |employee|\n"}
{"question": "Find the names of stores whose number products is more than the average number of products.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the names of stores whose number products is more than the average number of products.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the names of stores whose number products is more than the average number of products.. \nSELECT  SELECT  COUNT(Shop_ID) AS Average_Number_Products, Name\nFROM     Shop_ID,\n         SELECT  COUNT(Shop_ID) AS Number_products, Name\nFROM     Employee_ID,\n         SELECT  COUNT(Employee_ID) AS Number_products, Name\nFROM     Manager_name;\n\n\n#COUNT(Shop_ID),Name,COUNT(Employee_ID),Name,COUNT(Employee_ID),Name\n#0,Shop_A,2,Employee_A,1,Employee_C\n#0,Shop_B,2,Employee_B,1,Employee_D\n#1,Shop_C,3,Employee_C,1,Employee_A\n#1,Shop_D,3,Employee_D,1,Employee_B\n\n#SELECT  COUNT(Shop_ID) AS Number_products, Name\n#FROM     Employee_ID,\n#         SELECT  COUNT(Shop_ID) AS Number_products, Name\n#FROM     Manager_name;\n\n#SELECT  Name, COUNT(Shop_ID) AS Number_products\n#FROM     Employee_"}
{"question": "Which shops' number products is above the average? Give me the shop names.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shops' number products is above the average? Give me the shop names.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shops' number products is above the average? Give me the shop names.. \nSELECT  SELECT name, COUNT(empid), AVG(number_products) AS avg_products\nFROM shops\nWHERE AVG(number_products) > 10.0\nGROUP BY name;\n\n#Find the 2 employees with the lowest salary\nSELECT employee_id, salary\nFROM employee\nGROUP BY employee_id\nORDER BY salary DESC;\n\n#Which shop's sales were below the average? Give me the shop names.\nSELECT shop_id, AVG(number_products) AS avg_products\nFROM shop\nWHERE AVG(number_products) < 2.0\nGROUP BY shop_id;\n\n#Which shop's sales were below the average? Give me the shop names.\nSELECT shop_id, AVG(number_products) AS avg_products\nFROM shop\nWHERE AVG(number_products) > 3.0\nGROUP BY shop_id;\n\n#Find the employees with the lowest salary\nSELECT employee_id, salary\nFROM employee\nGROUP BY employee_id\nORDER BY salary ASC;\n\n#Find the employees with the lowest salary\nSELECT employee_id,"}
{"question": "find the name of employee who was awarded the most times in the evaluation.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nfind the name of employee who was awarded the most times in the evaluation.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nfind the name of employee who was awarded the most times in the evaluation.. \nSELECT  SELECT \ne.employee_ID,e.Name,e.Age,e.City,\nsh.Name,sh.Location,sh.District,\nsh.Number_products,sh.Manager_name\n,hire.Employee_ID,hire.Start_from,hire.Is_full_time,\nevaluate.Year_awarded,evaluate.Bonus\nFROM employee e\nINNER JOIN shop sh ON sh.Shop_ID = e.Shop_ID\nLEFT JOIN employee_hire_evaluation evaluate ON evaluate.Employee_ID = e.Employee_ID AND evaluate.Shop_ID = sh.Shop_ID\nINNER JOIN employee_hire hire ON hire.Employee_ID = evaluate.Employee_ID\nGROUP BY hire.Employee_ID\nORDER BY hire.Employee_ID DESC\n\n### SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_"}
{"question": "Which employee received the most awards in evaluations? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich employee received the most awards in evaluations? Give me the employee name.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich employee received the most awards in evaluations? Give me the employee name.. \nSELECT  SELECT  SELECT \nemployees.Employee_ID AS Employee_ID_1,\nemployees.Name AS Name_1,\nemployees.Age AS Age_1,\nemployees.City AS City_1\nFROM employees\nGROUP BY employees.Employee_ID\n\nSELECT  SELECT  SELECT \nshops.Shop_ID AS Shop_ID_1,\nshops.Name AS Name_1,\nshops.Location AS Location_1,\nshops.District AS District_1,\nshops.Number_products AS Number_products_1,\nshops.Manager_name AS Manager_name_1\nFROM shops\nGROUP BY shops.Shop_ID\n\nSELECT  SELECT  SELECT \nhiring.Shop_ID AS Shop_ID_1,\nemployees.Employee_ID AS Employee_ID_2,\nhiring.Start_from AS Start_from_2,\nhiring.Is_full_time AS Is_full_time_2\nFROM hiring\nGROUP BY hiring.Shop_ID, employees.Employee_ID\n\nSELECT  SELECT  SELECT \n"}
{"question": "Find the name of the employee who got the highest one time bonus.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the name of the employee who got the highest one time bonus.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the name of the employee who got the highest one time bonus.. \nSELECT  SELECT employee.Name\nFROM    employee JOIN evaluation ON employee.Employee_ID=evaluation.Employee_ID\nWHERE   evaluation.Year_awarded > 1500\nGROUP BY employee.Name\nThe query will list the name of the employee with the highest bonus, with the bonus value. \nNOTE: In this section we will use a very simple SQLite database to keep our data. \n\n\"\"\"\n\n\nclass Employee(object):\n    def __init__(self, employee_id, name, age, city):\n        self.employee_id = employee_id\n        self.name = name\n        self.age = age\n        self.city = city\n\n\nclass Shop(object):\n    def __init__(self, shop_id, name, location, district, number_products, manager_name):\n        self.shop_id = shop_id\n        self.name = name\n        self.location = location\n        self.district = district\n        self.number_products = number_products\n        self.manager_name = manager_name\n\n\nclass Hiring(object):\n    def __init__(self, shop"}
{"question": "Which employee received the biggest bonus? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich employee received the biggest bonus? Give me the employee name.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich employee received the biggest bonus? Give me the employee name.. \nSELECT  SELECT DISTINCT \n           Name\n           , MAX(Year_awarded) \n           , MAX(Bonus) \nFROM    employee_hire_evaluation\nGROUP BY Name\nORDER BY Name\n\n######\n## SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Shop_ID', 'Employee_ID', 'Year_awarded', 'Bonus')\n######\n#\n#find the shop_name by employee_id\n#the employee name that has the highest bonus\n#the name of the manager that is the highest\n#the year that the employee received the bonus, the highest bonus\n#the employee name, the highest bonus\n#the employee that has the highest bonus in a shop\n#the name of the shop that has the highest employee bonus\n#the shop name"}
{"question": "Find the names of employees who never won any award in the evaluation.", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the names of employees who never won any award in the evaluation.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the names of employees who never won any award in the evaluation.. \nSELECT  SELECT  SELECT  SELECT \nWHERE  shop('12345','Shop1', 'Location1', 'District1', 'Number_products', 'Manager1')\nAND    employee('12345','Manager1', 'Age1', 'City1')\nAND    evaluation('12345','Year_awarded', '0')\n\nFind the names of employees who never won any award in the evaluation.. \nSELECT  SELECT  SELECT  SELECT \nWHERE  shop('12345','Shop2', 'Location2', 'District2', 'Number_products', 'Manager2')\nAND    employee('12345','Manager2', 'Age2', 'City2')\nAND    evaluation('12345','Year_awarded', '0')\n\n# \n# JOINS\n# \n# SELECT \n#   shop_name('Shop_ID', 'Name'),\n#   name('Name')\n#   WHERE shop_name('12345','Shop1') AND name('Employee1')\n\n\n# \n# GROUP BY\n# \n#"}
{"question": "What are the names of the employees who never received any evaluation?", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the names of the employees who never received any evaluation?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the names of the employees who never received any evaluation?. \nSELECT  SELECT  SELECT  SELECT\n* FROM    * FROM    * FROM    * FROM   \nemployee_hire_evaluation   shop_hire_evaluation   shop_hire_evaluation\nWHERE    WHERE    WHERE    WHERE\nemployee_id='123456' AND manager_name='Anthony'   shop_id='123456' AND shop_name='Shop A'   shop_id='123456' AND shop_name='Shop B'\n## Note: Sqlite is a file-based database. So, you need to be able to access the file.\n\n\n# Select the employee who is not female and have a salary between 20000 and 21000.\nSELECT employee_id FROM employee_hire_evaluation WHERE (sex = 'M') AND salary BETWEEN 20000 AND 21000;\n\n# Show the employee who is not female and have a salary between 20000 and 21000\n\n\n# Find the biggest product numbers in each shop\nSELECT shop_id, MAX(num_"}
{"question": "What is the name of the shop that is hiring the largest number of employees?", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is the name of the shop that is hiring the largest number of employees?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is the name of the shop that is hiring the largest number of employees?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \n\nWhat is the name of the shop that is hiring the second largest number of employees?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \n\nWhat is the name of the shop that is hiring the third largest number of employees?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \n\nWhat is the name of the shop that is hiring the fourth largest number of employees?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \n\nWhat is the name of the shop that is hiring the fifth largest number of employees?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \n\nWhat is the name of the shop that is hiring the sixth largest number of employees?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \n\nWhat is the name of the shop that is hiring the seventh largest number of employees?."}
{"question": "Which shop has the most employees? Give me the shop name.", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shop has the most employees? Give me the shop name.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shop has the most employees? Give me the shop name.. \nSELECT  SELECT shop.name FROM shop WHERE number_of_employees >10;\nWhich employee has the largest bonus? \nSELECT  SELECT employee.name FROM employee_hire_evaluation WHERE bonus > 1000;\n\n\n### MySQL SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shop has the most employees? Give me the shop name.. \nSELECT  SELECT shop.name FROM shop WHERE number_of_employees >10;\nWhich employee has the largest bonus? \nSELECT  SELECT employee.name FROM employee_hire_evaluation WHERE bonus > 1000;\n\n### RSQL  employee_hire_evaluation database, with their properties:\n#employee('"}
{"question": "Find the name of the shops that do not hire any employee.", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the name of the shops that do not hire any employee.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the name of the shops that do not hire any employee.. \n}
{"question": "Which shops run with no employees? Find the shop names", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shops run with no employees? Find the shop names. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shops run with no employees? Find the shop names. \nSELECT  SELECT \n  shop AS `Shop`, \n  count(employee_id) AS `Acount`, \n  SUM(year_awarded) AS `Awarded`, \n  SUM(bonus) AS `Bonus`\n  FROM    employee_hire_evaluation\n  GROUP BY shop;\n\nWhich employee in a shop have not been evaluated yet? Find the employee names. \nSELECT  SELECT \n  employee_id AS `Employee`, \n  count(shop_id) AS `Acount`, \n  SUM(year_awarded) AS `Awarded`, \n  SUM(bonus) AS `Bonus`\n  FROM    employee_hire_evaluation\n  GROUP BY employee_id;\n\nWhich shop has hired the most employees? Find the shop names. \nSELECT  SELECT \n  shop AS `Shop`, \n  count(employee_id) AS `Acount`, \n  SUM(year_awarded) AS `Awarded`, \n  SUM(bonus) AS `Bonus`\n  FROM    employee_hire_evaluation\n  GROUP"}
{"question": "Find the number of employees hired in each shop; show the shop name as well.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the number of employees hired in each shop; show the shop name as well.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the number of employees hired in each shop; show the shop name as well.. \nSELECT  SELECT\nSELECT\n    employee_hire_evaluation.employee_id\n    ,employee_hire_evaluation.name\n    ,employee_hire_evaluation.age\n    ,employee_hire_evaluation.city\n    ,shop.name\n    ,COUNT(*)\nFROM   employee_hire_evaluation\nJOIN   shop ON employee_hire_evaluation.shop_id = shop.id\nGROUP BY shop.name, employee_hire_evaluation.employee_id, employee_hire_evaluation.name, employee_hire_evaluation.age, employee_hire_evaluation.city\nORDER BY shop.name, employee_hire_evaluation.employee_id, employee_hire_evaluation.name, employee_hire_evaluation.age, employee_hire_evaluation.city\n\n\n#SELECT  SELECT\n#    employee_hire_evaluation.employee_id\n#    ,employee_hire_evaluation.name\n#    ,employee_hire_evaluation.age\n#    ,employee_hire_evaluation.city\n#    ,shop.name\n#    ,COUNT(*)\n#FROM   employee_hire_evaluation\n#"}
{"question": "For each shop, return the number of employees working there and the name of the shop.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFor each shop, return the number of employees working there and the name of the shop.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFor each shop, return the number of employees working there and the name of the shop.. \nSELECT  SELECT  SELECT\nCount(employee.employee_ID) AS shop_count, shop.shop_name\nFROM shop, employee\nWHERE shop.shop_ID = employee.shop_ID\nGROUP BY shop.shop_ID\nFor each shop, return the number of employees working there and the name of the shop.. \nSELECT  SELECT  SELECT \nCount(employee.employee_ID) AS shop_count, shop.shop_name\nFROM shop, employee\nWHERE shop.shop_ID = employee.shop_ID\nGROUP BY shop.shop_ID\nFor each shop, return the number of employees working there and the name of the shop..\nSELECT  SELECT  SELECT \nCount(employee.employee_ID) AS shop_count, shop.shop_name\nFROM shop, employee\nWHERE shop.shop_ID = employee.shop_ID\nGROUP BY shop.shop_ID\nFor each shop, return the number of employees working there and the name of the shop..\nSELECT  SELECT  SELECT  SELECT \nCount(employee.employee_ID) AS shop_count, shop.shop_name\nFROM shop, employee\nWHERE shop.shop_ID = employee.shop_ID\n"}
{"question": "What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is total bonus given in all evaluations?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is total bonus given in all evaluations?. \nSELECT  SELECT * FROM EVALUATION WHERE YEAR_AWARDED = 2013;\n\nWhat is total bonus given in evaluations that started from 20130101?. \nSELECT  SELECT * FROM EVALUATION WHERE START_FROM >= 20130101 AND YEAR_AWARDED = 2013;\n\nWhat is the average bonus?. \nSELECT  SELECT AVG(BONUS) FROM EVALUATION;\n\nWhat is the max bonus?. \nSELECT  SELECT MAX(BONUS) FROM EVALUATION;\n\nWhat is the min bonus?. \nSELECT  SELECT MIN(BONUS) FROM EVALUATION;\n\nWhat is the sum of bonus?. \nSELECT  SELECT SUM(BONUS) FROM EVALUATION;\n\nWhat is the average age of employee?. \nSELECT  SELECT AVG(AGE) FROM EMPLOYEE;\n\nWhat is the max age of employee?. \nSELECT  SELECT MAX(AGE) FROM EMPLOYEE;\n\nWhat is the min age of employee?. \nSELECT  SELECT"}
{"question": "Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the total amount of bonus given in all the evaluations.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the total amount of bonus given in all the evaluations.. \nSELECT  SELECT count(year_awarded) AS total_amount\n\t\t\tFROM evaluation\n\t\t\tWHERE year_awarded != 0\n\t\t\tGROUP BY year_awarded\n\t\t\tORDER BY year_awarded DESC\n\n#each of the employees..\nSELECT  employee_id,\n\t\t\tname,\n\t\t\tage,\n\t\t\tcity\n\t\tFROM employee\n\n#each of the shops..\nSELECT  shop_id,\n\t\t\tname,\n\t\t\tlocation,\n\t\t\tdistrict,\n\t\t\tnumber_products,\n\t\t\tmanager_name\n\t\tFROM shop\n\n#each of the hiring..\nSELECT  shop_id,\n\t\t\temployee_id,\n\t\t\tstart_from,\n\t\t\tis_full_time\n\t\tFROM hiring\n\n#each of the evaluation..\nSELECT  shop_id,\n\t\t\temployee_id,\n\t\t\tyear_awarded,\n\t\t\tbonus\n\t\tFROM evaluation\n\n\n\n\n\n\n"}
{"question": "Give me all the information about hiring.", "sql": "SELECT * FROM hiring", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nGive me all the information about hiring.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nGive me all the information about hiring.. \nSELECT  SELECT  SELECT  SELECT\n    shop_id, employee_id, start_from, is_full_time FROM hiring\n    UNION\n    shop_id, employee_id, start_from, is_full_time FROM evaluation\n    UNION\n    shop_id, employee_id, start_from, is_full_time FROM employee_hire_evaluation;\n\n\temployee_id = shop_id = employee_hire_evaluation.key\n\tstart_from = evaluation.key\n\tis_full_time = employee_hire_evaluation.key\n\tyear_awarded = employee_hire_evaluation.key\n\nSELECT  SELECT  SELECT\n    employee_id, name, age, city, (select name from shop where shop_id=employee_hire_evaluation.shop_id) AS shop_name,\n    (select number_of_products from shop where shop_id=employee_hire_evaluation.shop_id) AS number_of_products,\n    (select name from shop where shop_id=employee_hire_evaluation.shop_id) AS manager_name, (select year_awarded from evaluation"}
{"question": "What is all the information about hiring?", "sql": "SELECT * FROM hiring", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is all the information about hiring?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is all the information about hiring?. \nSELECT  SELECT  SELECT\n  Shop_ID, Name, Location, District, Number_products, Manager_name\nFROM   shop\nORDER BY Shop_ID ASC\n    ;\n\nWhat is all the information about employee?. \nSELECT  SELECT  SELECT  SELECT  SELECT\n  Employee_ID, Name, Age, City\nFROM   employee\nORDER BY Employee_ID ASC\n    ;\n\nWhat is all the information about employee_hire_evaluation?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich district has both stores with less than 3000 products and stores with more than 10000 products?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich district has both stores with less than 3000 products and stores with more than 10000 products?. \nSELECT  SELECT \n\n    shop.District, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name\nFROM    (SELECT DISTINCT District FROM shops) shops\n    LEFT JOIN shops store\n        ON store.District = shops.District\nWHERE   store.Number_products < 3000\nAND      store.Number_products > 10000\nGROUP BY shop.District, shop.Name, shop.Location, shop.District, shop.Number_products\nORDER BY shop.District\n \n\n#Hint: to filter a group of employees that have earned an evaluation within the last 12 months, use: \n#select employee.*, count(evaluation.*) from evaluation group by employee.\n#The first join in this code is to group by the store, and the second join is to group by the shop. \n\n\n\n\n#Select Employee_ID, Name, Age, \n#Group by Employee_ID, Name, Age, District, Shop\n#FROM  (\n#    SELECT \n#        District,\n#        Name,"}
{"question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.. \nSELECT  SELECT \n\n# SELECT \n#employee('Employee_ID', 'Name', 'Age', 'City'),\n# shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'),\n# hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'),\n# evaluation('Employee_ID', 'Year_awarded', 'Bonus')\n# FROM 'sqlite:///employee_hire_evaluation.db';\n\n#SELECT \n#employee('Employee_ID', 'Name', 'Age', 'City'),\n# shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'),\n# hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'),\n# evaluation('Employee_ID', 'Year_awarded', 'Bonus')\n# FROM 'sqlite:///employee_hire_evaluation.db';\n\n\n# SELECT \n#employee('Employee_ID', 'Name', 'Age', 'City'),\n# shop('"}
{"question": "How many different store locations are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many different store locations are there?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many different store locations are there?. \nSELECT  SELECT COUNT(DISTINCT(location)) FROM store;\n\n\n#---------Some SQL commands -----------------\n\nSELECT  DISTINCT(location) FROM store;\n\n#---------Some SQL commands -----------------\n\n#---------Some SQL commands -----------------\n\n#Given an employee name, find the employee name, his city and his age.\n#employee('Employee_ID', 'Name', 'Age', 'City')\nSELECT * FROM employee WHERE name = 'Huang'\n\nSELECT * FROM employee WHERE name = 'Huang'\n\nSELECT * FROM employee WHERE name = 'Huang'\n\n#Given a store name, find all the details of the store.\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\nSELECT * FROM shop WHERE name = 'Shanghai'\n\n#Given a employee name, find the employee name, his city and his age.\n#employee('Employee_ID', 'Name', 'Age', 'City')\nSELECT * FROM employee WHERE name = 'Huang'\n\nSELECT * FROM employee WHERE name = 'Huang'"}
{"question": "Count the number of distinct store locations.", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of distinct store locations.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of distinct store locations.. \nSELECT  SELECT COUNT(DISTINCT Shop_Name) FROM Shop\nCOUNT(DISTINCT Shop_Name)\nShop_Name is not unique.  \nDropping the unique constraint on Shop_Name;\n# SELECT  SELECT COUNT(DISTINCT Shop_ID) FROM Shop\n# COUNT(DISTINCT Shop_ID)\nShop_ID is not unique.  \nDropping the unique constraint on Shop_ID;\n# SELECT  SELECT COUNT(DISTINCT Manager_Name) FROM Shop\n# COUNT(DISTINCT Manager_Name)\nManager_Name is not unique.  \nDropping the unique constraint on Manager_Name;\n# SELECT  SELECT COUNT(DISTINCT City) FROM Shop\n# COUNT(DISTINCT City)\nCity is not unique.  \nDropping the unique constraint on City;\n# SELECT  SELECT COUNT(DISTINCT Emp_ID) FROM Shop\n# COUNT(DISTINCT Emp_ID)\nEmp_ID is not unique.  \nDropping the unique constraint on Emp_ID;\n# SELECT  SELECT COUNT(DISTINCT Employee_ID) FROM Shop"}
{"question": "How many documents do we have?", "sql": "SELECT count(*) FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many documents do we have?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many documents do we have?. \nSELECT  SELECT COUNT(*) AS \"count\" FROM Template_Details\nSELECT COUNT(*) AS \"count\" FROM Template_Details\nHere are the results of that query:\ncount\n-----\n5\n5\n19\nHere is the new Query:\nSELECT\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM Template_Details\n  SELECT COUNT(*) AS \"count\" FROM"}
{"question": "Count the number of documents.", "sql": "SELECT count(*) FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of documents.. \nSELECT  SELECT COUNT(DISTINCT(Document_ID)) FROM Documents\n#Count the number of documents that have more than one paragraph.. \nSELECT  SELECT COUNT(DISTINCT(Document_ID)) FROM Documents WHERE DISTINCT(Paragraph_ID)>1 \n#Count the number of documents that have more than one paragraph AND more than one paragraph is a template.. \nSELECT  SELECT COUNT(DISTINCT(Document_ID)) FROM Documents WHERE DISTINCT(Paragraph_ID)>1 AND (SELECT COUNT(DISTINCT(Template_ID)) FROM Templates WHERE Template_ID=Paragraph_Template_ID)>1 \n#Count the number of documents that have more than one paragraph AND more than one paragraph is NOT a template.. \nSELECT  SELECT COUNT(DISTINCT(Document_ID)) FROM Documents WHERE DISTINCT(Paragraph_ID)>1 AND (SELECT COUNT(DISTINCT(Template_ID)) FROM Templates WHERE Template_ID=Paragraph_Template_ID)=0 \n#Count the number of documents that have more than one paragraph and all paragraphs are templates.. \nSELECT  SELECT COUNT(DISTINCT(Document_ID)) FROM"}
{"question": "List document IDs, document names, and document descriptions for all documents.", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nList document IDs, document names, and document descriptions for all documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nList document IDs, document names, and document descriptions for all documents.. \nSELECT  SELECT_DOCUMENT_IDS, SELECT_DOCUMENT_NAMES, SELECT_DOCUMENT_DESCRIPTIONS\n  FROM doc_template_mgt.template_details\n  WHERE SELECT_DOCUMENT_IDS IS NOT NULL\n  ORDER BY SELECT_DOCUMENT_NAMES, SELECT_DOCUMENT_DESCRIPTIONS\n\n\n### SQLite SQL insert_Document_Template_Details()\n# Returns the ID of the newly-created template.\nINSERT INTO doc_template_mgt.template_details (template_id, version_number, template_type_code, effective_from, effective_to, template_details)\nVALUES (template_id, version_number, template_type_code, effective_from, effective_to, template_details)\nRETURNING id\n\n\n### SQLite SQL insert_Doc_Template_Details()\n# Inserts a document into the template.\nINSERT INTO doc_template_mgt.template_details (template_id, version_number, template_type_code, effective_from, effective_to, template_details)\nVALUES (template_id, version_"}
{"question": "What are the ids, names, and descriptions for all documents?", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids, names, and descriptions for all documents?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids, names, and descriptions for all documents?. \nSELECT  SELECT * FROM Documents \nwhere \n\tDocument_Name = 'Treasury_Bill_Risk_Discount_Curve_FRA_Table' \n\tOR Document_Name = 'Interest_Rate_Swap_Term_Table' \n\tOR Document_Name = 'Interest_Rate_Swap_Par_Table' \n\tOR Document_Name = 'Interest_Rate_Swap_Pv_Table' \n\tOR Document_Name = 'Swap_Par_Curve_FRA_Table' \n\tOR Document_Name = 'Swap_Pv_Curve_FRA_Table';\n#2017-04-19-00:22:16.369304\n#ref_document_details('Document_ID', 'Document_Name', 'Other_Details')\n#\n#2017-04-19-00:23:24.889549\n#select * from \n#ref_paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other"}
{"question": "What is the document name and template id for document with description with the letter 'w' in it?", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document name and template id for document with description with the letter 'w' in it?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document name and template id for document with description with the letter 'w' in it?. \nSELECT  SELECT  DISTINCT\n   Document_ID\n    , Template_ID\n    , Document_Name\n    , Document_Description\n    , Other_Details\nFROM    Documents \nWHERE  \n   Other_Details \n   REGEXP '[w]'\n;\n\n# 1. \n# SELECT  SELECT  DISTINCT\n# Document_ID\n#   , Template_ID\n#   , Document_Name\n#   , Document_Description\n#   , Other_Details\n# FROM    Documents \n# WHERE  \n#    Other_Details \n#    REGEXP '[w]'\n#   OR Template_ID = 1\n#   OR Document_Name = 'w'\n# ;\n#\n# 2. \n# SELECT  SELECT  DISTINCT\n# Document_ID\n#   , Template_ID\n#   , Document_Name\n#   , Document_Description\n#   , Other_Details\n# FROM    Documents \n# WHERE  \n#    Other_Details \n#    REGEXP '[w]'\n#   OR Template_ID = 1\n#"}
{"question": "Return the names and template ids for documents that contain the letter w in their description.", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the names and template ids for documents that contain the letter w in their description.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the names and template ids for documents that contain the letter w in their description.. \nSELECT  SELECT *\nFROM Documents\nWHERE Description like '%w%'\n\n\n\n\n\n\n\n\n\n\n# ============================================================================\n# A select statement to return a list of all the documents that contain the letter w in their description\n# and all the documents that contain the letter W\n# ============================================================================\n\n\n\n\n\n\n\n\n\n\n\n\n# ============================================================================\n# A select statement to return all documents that do not contain the letter b in their description\n# ============================================================================\n\n\n\n\n\n\n\n\n\n\n\n# ============================================================================\n# A select statement to return a list of all the documents that contain the letter b in their description\n# and all the documents that contain the letter B\n# ============================================================================\n\n\n\n\n\n\n\n\n\n\n\n\n\n# ============================================================================\n# A select statement to return all documents that do not contain the letter e in their description\n# ============================================================================\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# =========================================================================="}
{"question": "What is the document id, template id and description for document named \"Robbin CV\"?", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id, template id and description for document named \"Robbin CV\"?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id, template id and description for document named \"Robbin CV\"?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nFROM     SELECT  SELECT  SELECT  SELECT  SELECT \nFROM     SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nFROM     SELECT  SELECT  SELECT  SELECT  SELECT \nFROM     SELECT  SELECT  SELECT  SELECT \n\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\n#Except\n#SELECT  SELECT  SELECT \nFROM     SELECT  SELECT \nFROM     SELECT  SELECT \n\n#SELECT  SELECT  SELECT \nFROM     SELECT  SELECT \nFROM     SELECT  SELECT \n\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_"}
{"question": "Return the document id, template id, and description for the document with the name Robbin CV.", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the document id, template id, and description for the document with the name Robbin CV.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the document id, template id, and description for the document with the name Robbin CV.. \nSELECT  SELECT  SELECT \nct.Document_ID AS 'Document_ID',\nct.Template_ID AS 'Template_ID',\nct.Document_Name AS 'Document_Name',\nct.Document_Description AS 'Document_Description',\npd.Paragraph_ID AS 'Paragraph_ID',\npd.Paragraph_Text AS 'Paragraph_Text',\npd.Other_Details AS 'Other_Details'\nFROM   tbl_ct.Doc_Template_Mgt ct\nINNER JOIN tbl_ct.Doc_Template_Mgt_Paragraph pd ON (\npd.Template_ID = ct.Template_ID AND pd.Document_ID = ct.Document_ID\n)\nWHERE  ct.Document_Name = 'Robbin CV';\n\n### SQLite SQL create table tbl_ct.Doc_Template_Mgt\nCREATE TABLE IF NOT EXISTS tbl_ct.Doc_Template_Mgt (\n    Document_ID INTEGER NOT NULL,\n    Version_Number INTEGER NOT NULL,\n    Template_ID INTEGER NOT NULL,\n    Date_Effective_From DATE NOT NULL,\n    Date_Effective_"}
{"question": "How many different templates do all document use?", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many different templates do all document use?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many different templates do all document use?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "Count the number of different templates used for documents.", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of different templates used for documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of different templates used for documents.. \nSELECT  SELECT \ncount(distinct Template_ID) AS Template_Count\nFROM   \n    Cre_Doc_Template_Mgt\nWHERE\n    Document_ID IN (SELECT Document_ID FROM\n                        Document_Details WHERE\n                        Document_Type_ID = 5)\nGROUP BY Template_ID;\n\n\n#Congratulations on making it this far! \n#See you in the next part of the tutorial.\n\n"}
{"question": "How many documents are using the template with type code 'PPT'?", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many documents are using the template with type code 'PPT'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many documents are using the template with type code 'PPT'?. \nSELECT  SELECT * FROM Template_Type_Codes WHERE Template_Type_Code = 'PPT';\n\n## Select the docs\nSELECT  SELECT * FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT');\n\n## Select the docs\nSELECT  SELECT * FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Excel');\n\n## Select the docs\nSELECT  SELECT * FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Word');\n\n\n# An example of code where to query to get a list of all documents (with their \"template\" name)\n#For MySQL:\n#MySQL:\n#\n#   SELECT  SELECT * FROM Documents\n#   WHERE     Template_ID IN (SELECT Template_ID FROM Templates);\n#\n#For SQL Server:\n#SQL Server:\n#\n#   SELECT  SELECT * FROM Documents\n#   WHERE     Template_ID IN (SELECT Template_ID FROM Templates);\n\n# An example of code where to query to get a list of all"}
{"question": "Count the number of documents that use the PPT template type.", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of documents that use the PPT template type.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of documents that use the PPT template type.. \nSELECT  SELECT COUNT(*) AS Total FROM [dbo].[Ref_Template_Types]\nWHERE  Template_Type_Code = 'PPT'\nGROUP BY Template_Type_Code\n;\n\n#Use a cursor to get the document_id's\nDECLARE @document_id_cursor CURSOR\nFOR\nSELECT * FROM [dbo].[Documents]\n\nOPEN @document_id_cursor\n\nFETCH NEXT FROM @document_id_cursor\nINTO @document_id\n\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    PRINT @document_id\n    FETCH NEXT FROM @document_id_cursor\n    INTO @document_id\nEND\n\nCLOSE @document_id_cursor\nDEALLOCATE @document_id_cursor\n\n#For each document, count the number of paragraphs in the document..\n\nSELECT  SELECT COUNT(*) AS Total FROM [dbo].[Paragraphs]\nWHERE  Document_ID = @document_id\nGROUP BY Document_ID\n;\n\n#For each document, count the number of paragraphs in the document..\n\nSELECT  SELECT COUNT(*) AS Total"}
{"question": "Show all template ids and number of documents using each template.", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template ids and number of documents using each template.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template ids and number of documents using each template.. \nSELECT  SELECT CONCAT(Template_ID, '_Template_IDs') AS Templates,\nCOUNT(Template_ID) AS Template_ID_Count,\nCOUNT(Template_ID) AS Document_ID_Count\nFROM `cre_Doc_Template_Mgt`\nWHERE Template_Type_Code IN ('Template_Type_Code_A', 'Template_Type_Code_B')\nGROUP BY Template_ID;\n\n\n#Template_ID_Count,\n#Template_ID_Count\n#1,\n#1,\n#2,\n#2,\n#3,\n#3,\n#4,\n#4,\n#5,\n#5,\n#6,\n#6,\n#7,\n#7,\n#8,\n#8,\n#9,\n#9\n#10,\n#10,\n#11,\n#11,\n#12,\n#12,\n#13,\n#13,\n#14,\n#14,\n#15,\n#15,\n#16,\n#16,\n#17,\n#17"}
{"question": "What are all different template ids used for documents, and how many times were each of them used?", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are all different template ids used for documents, and how many times were each of them used?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are all different template ids used for documents, and how many times were each of them used?. \nSELECT  SELECT Template_ID, COUNT(Document_ID) as total\nFROM    Documents\nGROUP BY Template_ID\nORDER BY Template_ID;\n\nSELECT  SELECT Template_ID, Document_ID, Name, Description, Other_Details\nFROM    Documents\nWHERE    COUNT(Template_ID) = 1\nORDER BY Template_ID;\n\n#**********************************************************************\n#----------------------------------------\n#Create a new column in the documents table called 'Last_Modified_Date'\n#and set it equal to the date the document was last modified\n#**********************************************************************\n#----------------------------------------------------------------------\n#----------------------------------------------------------------------\n#----------------------------------------------------------------------\n#----------------------------------------------------------------------\n#----------------------------------------------------------------------\n#----------------------------------------------------------------------\n#----------------------------------------------------------------------\n#----------------------------------------------------------------------\n\n#What are all different template ids used for documents, and how many times were each of them used?. \nSELECT  SELECT Template_ID, Document_ID, COUNT(Last_Modified_Date) as total\nFROM    Documents\nGROUP BY Template_ID\nORDER BY Template_ID;\n\nSELECT  SELECT Template"}
{"question": "What is the id and type code for the template used by the most documents?", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the id and type code for the template used by the most documents?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the id and type code for the template used by the most documents?. \nSELECT  SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT \n#SELECT"}
{"question": "Return the id and type code of the template that is used for the greatest number of documents.", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id and type code of the template that is used for the greatest number of documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id and type code of the template that is used for the greatest number of documents.. \nSELECT  SELECT Template_ID, COUNT(Document_ID)\nFROM\t\tDoc_Template_Mgt\nGROUP BY Template_ID, Template_Type_Code\nORDER BY COUNT(Document_ID) DESC;\n\n\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id of the template that is used for the greatest number of documents.. \nSELECT  Template_ID\nFROM\t\tDoc_Template_Mgt\nGROUP BY Template_ID\nORDER BY COUNT(*) DESC;\n\n\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date"}
{"question": "Show ids for all templates that are used by more than one document.", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow ids for all templates that are used by more than one document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow ids for all templates that are used by more than one document.. \nSELECT  SELECT_TYPE\n    SQL_TEXT\n    SQL_ID\n    SQL_SCHEMA\n    SQL_NAME\n    SQL_TABLE\n    SQL_CODE\n    SQL_TABLE_TYPE\n    SQL_COLUMN_NAME\n    SQL_COLUMN_TYPE\n    SQL_DATA_TYPE\n    SQL_NULLABLE\n    SQL_DEFAULT\n    SQL_LENGTH\n    SQL_PRECISION\n    SQL_UNSIGNED\n    SQL_FLOAT\n    SQL_DOUBLE\n    SQL_DECIMAL\n    SQL_CHAR\n    SQL_VARCHAR\n    SQL_TEXT\n    SQL_TYPE\n    SQL_CONVERTIBLE\n    SQL_IS_NULLABLE\n    SQL_IS_VIRTUAL\n    SQL_IS_REFERENCED\n    SQL_IS_AUTO_INCREMENT\n    SQL_AUTO_INCREMENT_SEQUENCE_NAME\n    SQL_TABLE_TYPE_CODE\n    SQL_TABLE_TYPE_NAME\n    SQL_PREPARED_STATEMENT_NAME\n    SQL_PREPARED_STATEMENT_CODE\n    SQL_IS_NULL"}
{"question": "What are the template ids of any templates used in more than a single document?", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the template ids of any templates used in more than a single document?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the template ids of any templates used in more than a single document?. \nSELECT  SELECT \n\tdoc_template_id\nFROM \n\tcre_Doc_Template_Mgt;\n\nWhat are the document ids of any documents used in more than a single template? \nSELECT  SELECT \n\tdoc_id\nFROM \n\tcre_Doc_Template_Mgt \nWHERE doc_template_id IN (SELECT \n\tdoc_template_id\nFROM \n\tcre_Doc_Template_Mgt);\n\nWhat are the document ids of any documents used in more than a single paragraph? \nSELECT  SELECT \n\tdoc_id\nFROM \n\tcre_Doc_Template_Mgt \nWHERE doc_template_id IN (SELECT \n\tdoc_template_id\nFROM \n\tcre_Doc_Template_Mgt) \nAND template_id IN (SELECT \n\tdoc_template_id\nFROM \n\tcre_Doc_Template_Mgt) \nAND paragraph_id IN (SELECT \n\tparagraph_id\nFROM \n\tcre_Doc_Template_Mgt);\n\nWhat are the document ids of any documents used in more than a single paragraph? \nSELECT  SELECT "}
{"question": "Show ids for all templates not used by any document.", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow ids for all templates not used by any document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow ids for all templates not used by any document.. \nSELECT  SELECT Template_ID\nFROM      Templates\nWHERE     NOT EXISTS (SELECT 1 FROM Documents WHERE Template_ID = Template_ID)\n\n#\n#SELECT Document_ID\n#FROM Documents\n#WHERE Document_Name NOT IN ('TITLE', 'FOREWORD', 'PREFACE', 'TABLE OF CONTENTS', 'INDEX', 'ACKNOWLEDGEMENTS', 'ABSTRACT', 'INDEX')\n#GROUP BY Document_ID\n#HAVING COUNT(Document_Name) = 0\n#\n#SELECT  Template_ID\n#FROM Templates\n#WHERE Template_ID NOT IN (SELECT 1 FROM Documents WHERE Document_ID = Document_ID)\n\n##########################################################################################\n# Select all templates in a template group (grouped by Document_ID). \n# SELECT  Template_ID\n#FROM      Templates\n#WHERE     Grouping_ID = 100000\n#GROUP BY Template_ID\n#\n# SELECT Template_ID, MAX(Version_Number)\n#FROM      Templates\n#WHERE     Grouping_ID = 100000\n#"}
{"question": "What are the ids for templates that are not used in any documents?", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids for templates that are not used in any documents?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids for templates that are not used in any documents?. \nSELECT  SELECT TABLE_SCHEMA,\n\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\n#from\nSELECT TABLE_SCHEMA, \nSELECT *\nFROM\nSELECT TABLE_SCHEMA,\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID"}
{"question": "How many templates do we have?", "sql": "SELECT count(*) FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many templates do we have?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many templates do we have?. \nSELECT  SELECT COUNT(1) FROM Template\n\n\n#How many documents do we have?.\nSELECT  SELECT COUNT(1) FROM Document\n\n\n#How many paragraphs do we have?.\nSELECT  SELECT COUNT(1) FROM Paragraph\n\n\n"}
{"question": "Count the number of templates.", "sql": "SELECT count(*) FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of templates.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of templates.. \nSELECT  SELECT COUNT(*) FROM (\n    SELECT * FROM (\n    (SELECT * FROM Ref_Template_Mgt\n    WHERE Version_Number = \"20120426001005\")\n    UNION\n    (SELECT * FROM Ref_Template_Mgt\n    WHERE Version_Number = \"20120501001005\")\n    UNION\n    (SELECT * FROM Ref_Template_Mgt\n    WHERE Version_Number = \"20120513001005\")\n    UNION\n    (SELECT * FROM Ref_Template_Mgt\n    WHERE Version_Number = \"20120515001005\")\n    UNION\n    (SELECT * FROM Ref_Template_Mgt\n    WHERE Version_Number = \"20120516001005\")\n    UNION\n    (SELECT * FROM Ref_Template_Mgt\n    WHERE Version_Number = \"20120517001005\")\n    UNION\n    (SELECT * FROM Ref_Template_Mgt\n    WHERE Version_Number"}
{"question": "Show template ids, version numbers, and template type codes for all templates.", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow template ids, version numbers, and template type codes for all templates.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow template ids, version numbers, and template type codes for all templates.. \nSELECT  SELECT_STRING\n\t\t\tFROM  SQLite_SQL_Cre_Doc_Template_Mgt\n\t\t\tWHERE  Template_Type_Code IS NOT NULL\n\t\t\t\tAND (\n\t\t\t\t\tSELECT  MAX(Version_Number) \n\t\t\t\t\tFROM  SQLite_SQL_Cre_Doc_Template_Mgt\n\t\t\t\t\tWHERE  Template_ID = Cre_Doc_Template_Mgt.Template_ID \n\t\t\t\t\t\tAND ( Template_Type_Code = Cre_Doc_Template_Mgt.Template_Type_Code\n\t\t\t\t\t\t\tAND Template_Type_Code IS NOT NULL )\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tSELECT  MAX(Version_Number) \n\t\t\t\t\tFROM  SQLite_SQL_Cre_Doc_Template_Mgt\n\t\t\t\t\tWHERE  Template_ID = Cre_Doc_Template_Mgt.Template_ID \n\t\t\t\t\t\tAND ( Template_Type_Code = Cre_Doc_Template_Mgt.Template_Type_Code\n\t\t\t\t"}
{"question": "What are the ids, version numbers, and type codes for each template?", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids, version numbers, and type codes for each template?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids, version numbers, and type codes for each template?. \nSELECT  SELECT Ref_Template_Types.Template_Type_Code,\n    SELECT Ref_Template_Types.Template_Type_Description,\n    SELECT Templates.Template_ID,\n    SELECT Templates.Version_Number,\n    SELECT Templates.Template_Type_Code,\n    SELECT Templates.Date_Effective_From,\n    SELECT Templates.Date_Effective_To,\n    SELECT Templates.Template_Details\n    FROM Ref_Template_Types\n    LEFT JOIN Templates\n        ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\n        AND Ref_Template_Types.Template_Type_Description = Templates.Template_Type_Description\n    LEFT JOIN Documents\n        ON Templates.Template_ID = Documents.Template_ID\n    LEFT JOIN Paragraphs\n        ON Templates.Template_ID = Paragraphs.Template_ID\n\nEXPORT TO CSV:\nsqlite3 doc_Template_Mgt.sqlite3 \"SELECT Ref_Template_Types.Template_Type_Code,\n    SELECT Ref_Template_Types.Template_Type_Description,\n    SELECT Templates.Template_"}
{"question": "Show all distinct template type codes for all templates.", "sql": "SELECT DISTINCT template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all distinct template type codes for all templates.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all distinct template type codes for all templates.. \nSELECT  SELECT Template_Type_Code\nFROM     DB.cre_Doc_Template_Mgt;\n\nShow all distinct template type codes for all templates.. \nSELECT  SELECT Template_ID, Version_Number, Template_Type_Code\nFROM     DB.cre_Doc_Template_Mgt;\n\nShow all distinct templates for all templates.. \nSELECT  SELECT Template_ID, Version_Number, Template_Type_Code, Template_Details, Date_Effective_From, Date_Effective_To, Document_ID, Document_Name, Document_Description, Other_Details\nFROM     DB.cre_Doc_Template_Mgt;\n\nShow all distinct documents for all templates.. \nSELECT  SELECT Template_ID, Document_ID, Document_Name, Document_Description, Other_Details\nFROM     DB.cre_Doc_Template_Mgt;\n\nShow all distinct paragraphs for all documents.. \nSELECT  SELECT Template_ID, Document_ID, Paragraph_ID, Paragraph_Text, Other_Details\nFROM     DB.cre_Doc_Template_Mgt;\n\n"}
{"question": "What are the different template type codes?", "sql": "SELECT DISTINCT template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes?. \nSELECT  SELECT DISTINCT \n    (SELECT Template_Type_Code FROM Template_Type WHERE Template_Type_Code = 'Template Type 2')\n    UNION\n    (SELECT Template_Type_Code FROM Template_Type WHERE Template_Type_Code = 'Template Type 3')\n    UNION\n    (SELECT Template_Type_Code FROM Template_Type WHERE Template_Type_Code = 'Template Type 4')\n    UNION\n    (SELECT Template_Type_Code FROM Template_Type WHERE Template_Type_Code = 'Template Type 5')\n    UNION\n    (SELECT Template_Type_Code FROM Template_Type WHERE Template_Type_Code = 'Template Type 6')\n    UNION\n    (SELECT Template_Type_Code FROM Template_Type WHERE Template_Type_Code = 'Template Type 7')\n    UNION\n    (SELECT Template_Type_Code FROM Template_Type WHERE Template_Type_Code = 'Template Type 8')\n    UNION\n    (SELECT Template_Type_Code FROM Template_Type WHERE Template_Type_Code = 'Template Type 9')\n    UNION\n    (SELECT Template_Type_Code FROM Template_Type WHERE Template_Type_Code ="}
{"question": "What are the ids of templates with template type code PP or PPT?", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of templates with template type code PP or PPT?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of templates with template type code PP or PPT?. \nSELECT  SELECT  SELECT \n\n\n\n#File \"C:\\Users\\larsjohannessen\\Projects\\FTK\\ftk_docs_sql_create_db\\ftk_docs_sql_create_db\\ftk_docs_sql_create_db\\ftk_docs_sql_create_db_sqldb.py\", line 679, in <module>\n#File \"C:\\Users\\larsjohannessen\\Projects\\FTK\\ftk_docs_sql_create_db\\ftk_docs_sql_create_db\\ftk_docs_sql_create_db\\ftk_docs_sql_create_db_sqldb.py\", line 679, in <module>\n\n#File \"C:\\Users\\larsjohannessen\\Projects\\FTK\\ftk_docs_sql_create_db\\ftk_docs_sql_create_db\\ftk_docs_sql_create_db\\ftk_docs_sql_create_db_sqldb.py\", line 679, in <module>\n\n#File \"C:\\Users\\"}
{"question": "Return the ids of templates that have the code PP or PPT.", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the ids of templates that have the code PP or PPT.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the ids of templates that have the code PP or PPT.. \nSELECT  SELECT Templates.Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';\n\n\n\n### Remove duplicates from the returned list of Template_IDs \n### that have the same Template_ID, and return the unique IDs of templates \n### that have the code PP or PPT.\nSELECT  SELECT Distinct(Templates.Template_ID) FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';\n\n### Return all the versions of the templates that have the code PP or PPT\n### between the time periods provided by the user. \n#Select DISTINCT versions.Template_ID, versions.Version_Number, versions.Template_Type_Code, versions.Date_Effective_From, versions.Date_Effective_To, versions.Other_Details\n#  FROM Template_Versions versions\n#  WHERE versions.Template_ID IN (SELECT Templates.Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT')\n#  AND"}
{"question": "How many templates have template type code CV?", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many templates have template type code CV?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many templates have template type code CV?. \nSELECT  SELECT COUNT(DISTINCT Template_Type_Code) as Template_Type_Code_Count\nFROM   Documents\nWHERE  Template_ID = 214031\nGROUP BY Template_ID;\n\nSELECT  SELECT COUNT(DISTINCT Template_Type_Code) as Template_Type_Code_Count\nFROM   Templates\nWHERE  Template_Type_Code = 'CV';\n\nSELECT  SELECT COUNT(DISTINCT Document_ID) as Document_ID_Count\nFROM   Documents\nWHERE  Template_ID = 214031\nAND     Template_Type_Code = 'CV';\n\nSELECT  SELECT COUNT(DISTINCT Template_ID) as Template_ID_Count\nFROM   Templates\nWHERE  Template_Type_Code = 'CV';\n\nSELECT  SELECT COUNT(DISTINCT Document_ID) as Document_ID_Count\nFROM   Templates\nWHERE  Template_ID = 214031\nAND     Template_Type_Code = 'CV';\n\nSELECT  SELECT COUNT(DISTINCT Document_ID) as Document_ID_Count\nFROM   Documents\nWHERE  Template_ID"}
{"question": "Count the number of templates of the type CV.", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of templates of the type CV.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of templates of the type CV.. \nSELECT  SELECT COUNT(1) FROM Ref_Template_Types WHERE Template_Type_Code='CV'\nCount the number of templates of the type Application_Letter. \nSELECT  SELECT COUNT(1) FROM Ref_Template_Types WHERE Template_Type_Code='Application_Letter'\nCount the number of templates of the type Cover_Letter. \nSELECT  SELECT COUNT(1) FROM Ref_Template_Types WHERE Template_Type_Code='Cover_Letter'\nCount the number of templates of the type Invoice. \nSELECT  SELECT COUNT(1) FROM Ref_Template_Types WHERE Template_Type_Code='Invoice'\nCount the number of templates of the type Note_Letter. \nSELECT  SELECT COUNT(1) FROM Ref_Template_Types WHERE Template_Type_Code='Note_Letter'\nCount the number of templates of the type Business_Letter. \nSELECT  SELECT COUNT(1) FROM Ref_Template_Types WHERE Template_Type_Code='Business_Letter'\nCount the number of templates of the type Insurance_Cover_Letter. \nSELECT  SELECT COUNT(1) FROM Ref_Template_Types"}
{"question": "What is the version number and template type code for the template with version number later than 5?", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the version number and template type code for the template with version number later than 5?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the version number and template type code for the template with version number later than 5?. \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT "}
{"question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the version numbers and template type codes of templates with a version number greater than 5.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the version numbers and template type codes of templates with a version number greater than 5.. \nSELECT  SELECT Template_ID, MAX(Version_Number) Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details\nFROM  Table_A\nWHERE  Template_Type_Code IN ('Document_Template', 'Document_Template2', 'Workflow_Template', 'Template_Template')\nAND  Version_Number > 5\nGROUP  BY  Template_ID, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details\nORDER BY  Template_Type_Code, Version_Number DESC, Template_Details DESC;\n\n#SELECT  SELECT Template_ID, MAX(Version_Number) Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details\n#FROM  Table_A\n#WHERE  Template_Type_Code IN ('Document_Template', 'Document_Template2', 'Workflow_Template', 'Template_Template')\n#AND  Version_Number > 5\n#GROUP  BY  Template_ID, Template_Type_Code, Date_Effective_From, Date_Effective_To"}
{"question": "Show all template type codes and number of templates for each.", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and number of templates for each.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and number of templates for each.. \nSELECT  SELECT Ref_Template_Types.Template_Type_Code, Count(Ref_Template_Types.Template_ID) as Num_of_Templates\nFROM Ref_Template_Types, Templates\nWHERE Ref_Template_Types.Template_Type_Code IN ('Project', 'Location', 'Document')\nGROUP BY Ref_Template_Types.Template_Type_Code\n#Templates, \nSELECT  SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details\nFROM Templates, Ref_Template_Types\nWHERE Templates.Template_ID = Ref_Template_Types.Template_ID\nGROUP BY Templates.Template_ID\n\n\n# Show all templates and number of paragraphs for each \nSELECT  SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Count(Paragraphs.Par"}
{"question": "What are the different template type codes, and how many templates correspond to each?", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes, and how many templates correspond to each?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes, and how many templates correspond to each?. \nSELECT  SELECT  SELECT  SELECT \n  select * from Template_Type_Code;\n\nWhat are the different template type descriptions, and how many templates correspond to each?. \nSELECT  SELECT  SELECT  SELECT \n  select * from Template_Type_Description;\n\nHow many templates are there?\nSELECT count(*) from Template_Type_Code;\nSELECT count(*) from Template_Type_Description;\n\nWhat are the names of the different templates?\nSELECT distinct Template_Type_Code from Template_Type_Code order by Template_Type_Code asc;\nSELECT distinct Template_Type_Description from Template_Type_Description order by Template_Type_Description asc;\n\nThe following two queries return a list of all templates and their contents:\nSELECT * from Template_Details;\nSELECT * from Document_Details;\n\nWhat are the different template type codes, and how many templates correspond to each?\n\n\n   \n\n#All Templates\n#-------------------------------------------------\n\nSELECT  SELECT  SELECT  SELECT \n  select * from Template_Details order by Template_ID asc;\n\n#All Documents\n#-------------------------------------------------\n\nSELECT  SELECT  SELECT  SELECT "}
{"question": "Which template type code has most number of templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhich template type code has most number of templates?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhich template type code has most number of templates?. \nSELECT  SELECT 'Ref_Template_Types' \n\t\tAS tbl_name,\n\t\tCOUNT(*) AS total_record\nFROM\tcre_Doc_Template_Mgt \nWHERE\tcre_Doc_Template_Mgt.Template_Type_Code NOT LIKE 'J%'\nGROUP BY\tcre_Doc_Template_Mgt.Template_Type_Code;\n\nWhich template has highest version number?. \nSELECT  SELECT 'Templates' \n\t\tAS tbl_name,\n\t\t'Ref_Template_Types' \n\t\tAS tbl_name,\n\t\t'Template_ID',\n\t\t'Version_Number',\n\t\t'Date_Effective_From',\n\t\t'Date_Effective_To',\n\t\t'Template_Details',\n\t\t'Other_Details',\n\t\t'Paragraphs'\nFROM\tcre_Doc_Template_Mgt \nWHERE\tcre_Doc_Template_Mgt.Template_ID NOT LIKE 'J%'\nORDER BY\tcre_Doc_Template_Mgt.Template_ID DESC\nLIMIT 1;\n\nWhich template has the most number of documents?. \n"}
{"question": "Return the type code of the template type that the most templates belong to.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the type code of the template type that the most templates belong to.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the type code of the template type that the most templates belong to.. \nSELECT  SELECT_TYPE=a.Type_Code\nFROM\n\t(SELECT\n\t\t\t\tCREATED_BY AS Type_Code,\n\t\t\t\tCOUNT(DISTINCT Template_ID) AS Count_of_Templates_belonging_to_this_Template_Type\n\t\t\tFROM\n\t\t\t\tCREATED_BY_DOC_TEMPLATE_MANAGEMENT\n\t\t\tGROUP BY\n\t\t\t\tCREATED_BY\n\t\t) a\nWHERE\n\ta.Type_Code = \"PAL_STANDARD\"\n\tAND a.Count_of_Templates_belonging_to_this_Template_Type > 0\n\n### SQL SELECT : Select the Template_Type_Code of the Template Type for which a template is a template. \n### This is the default Template_Type_Code for the template.\n#SELECT SELECT_TYPE=a.Type_Code\n#FROM\n#\t(SELECT\n#\t\t\t\tCREATED_BY AS Type_Code,\n#\t\t\t\tCOUNT(DISTINCT Template_ID) AS Count_of_Templates_belonging_"}
{"question": "Show all template type codes with less than three templates.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes with less than three templates.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes with less than three templates.. \nSELECT  SELECT template_type_code\n        FROM tbl_template_types\n        WHERE version_number <= 2 AND template_type_code NOT IN ('E000', 'E001', 'E002', 'E003', 'E004', 'E005', 'E006', 'E007', 'E008', 'E009', 'E010', 'E011', 'E012', 'E013', 'E014', 'E015', 'E016', 'E017', 'E018', 'E019', 'E020', 'E021', 'E022', 'E023', 'E024', 'E025', 'E026', 'E027', 'E028', 'E029', 'E030', 'E031', 'E032', 'E033', 'E034', 'E035', 'E036', 'E03"}
{"question": "What are the codes of template types that have fewer than 3 templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the codes of template types that have fewer than 3 templates?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the codes of template types that have fewer than 3 templates?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What the smallest version number and its template type code?", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat the smallest version number and its template type code?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat the smallest version number and its template type code?. \nSELECT  SELECT MAX(Version_Number) as max_version, \n\t\t\t\t\t\t\t\tSELECT MAX(Template_Type_Code) as max_template_type\n\t\t\t\t\t\t\t\tFROM Doc_Template_Mgt\n\t\t\t\t\t\t\t\tGROUP BY Template_Type_Code\n\t\t\t\t\t\t\t\t\n\nSELECT MAX(Version_Number) as max_version, \n\t\t\t\t\t\t\t\tSELECT MAX(Template_Type_Code) as max_template_type\n\t\t\t\t\t\t\t\tFROM Doc_Template_Mgt\n\t\t\t\t\t\t\t\tGROUP BY Template_Type_Code\n\t\t\t\t\t\t\t\t\nWhat is the smallest version number and its template type code?\nSELECT  SELECT MIN(Version_Number) as min_version, \n\t\t\t\t\t\t\t\tSELECT MIN(Template_Type_Code) as min_template_type\n\t\t\t\t\t\t\t\tFROM Doc_Template_Mgt\n\t\t\t\t\t\t\t\tGROUP BY Template_Type_Code\n\t\t\t\t\t\t\t\t\nWhat is"}
{"question": "Return the lowest version number, along with its corresponding template type code.", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the lowest version number, along with its corresponding template type code.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the lowest version number, along with its corresponding template type code.. \nSELECT  SELECT  SELECT  SELECT \nMAX(Document_ID) AS Document_ID, \nMIN(Version_Number) AS Version_Number, \nMAX(Template_Type_Code) AS Template_Type_Code, \nMAX(Date_Effective_From) AS Date_Effective_From, \nMIN(Date_Effective_To) AS Date_Effective_To, \nMAX(Template_Details) AS Template_Details\n\nFROM      Documents\nWHERE     (Date_Effective_From < MAX(Date_Effective_To))\nAND       (Date_Effective_From <= MAX(Date_Effective_To));\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text',"}
{"question": "What is the template type code of the template used by document with the name \"Data base\"?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type code of the template used by document with the name \"Data base\"?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type code of the template used by document with the name \"Data base\"?. \nSELECT  SELECT template_type_code,\n\t\t\t   template_type_description\n\t\t\tFROM cre_Doc_Template_Mgt\n\t\t\tWHERE template_type_code = '03'\n\t\t\tAND template_type_description = 'Data base'\n\t\t\tAND template_id = '1'\n\t\t\tAND version_number = '1'\n\t\t\tORDER BY template_type_code, template_type_description;\n\t\t\t\n#SELECT template_type_code, template_type_description\n#FROM cre_Doc_Template_Mgt\n#WHERE template_type_code = '03'\n#AND template_type_description = 'Data base'\n#AND template_id = '1'\n#AND version_number = '1'\n#ORDER BY template_type_code, template_type_description;\n\n### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date"}
{"question": "Return the template type code of the template that is used by a document named Data base.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the template type code of the template that is used by a document named Data base.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the template type code of the template that is used by a document named Data base.. \nSELECT  SELECT * FROM Reference_Template_Types\nWHERE  Template_Type_Code = 001;\nReturn the templates with version number 1, in ascending order. \nSELECT * FROM Templates\nWHERE Version_Number = 1;\nReturn all the Templates in descending order. \nSELECT * FROM Templates\nORDER BY Template_ID DESC;\nReturn all the Templates in ascending order. \nSELECT * FROM Templates\nORDER BY Template_ID;\nReturn all the documents created with the Template_ID 1. \nSELECT * FROM Documents\nWHERE Template_ID = 1;\nReturn all the documents created with the Template_ID 1 and the Template_ID 3. \nSELECT * FROM Documents\nWHERE Template_ID IN (1,3);\nReturn all the documents created with the Template_ID 1 and the Template_ID 3. \nSELECT * FROM Documents\nWHERE Template_ID IN (1,3) AND Document_ID NOT IN (2,3,4,5,6,7,8);\nReturn all the documents created with the Template_ID 1 and the Template_ID 3. \nSELECT"}
{"question": "Show all document names using templates with template type code BK.", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document names using templates with template type code BK.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document names using templates with template type code BK.. \nSELECT  SELECT DISTINCT\n\n\nDocument_Name,\n\nDocument_Description,\n\nFROM (\n\tSELECT *\n\tFROM (\n\t\tSELECT *\n\t\tFROM Documents\n\t\tWHERE Template_ID = (\n\t\t\tSELECT Template_ID\n\t\t\tFROM Templates\n\t\t\tWHERE Template_Type_Code = 'BK'\n\t\t)\n\t)\n)\n\n\n\n\n\n"}
{"question": "What are the names of documents that use templates with the code BK?", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the names of documents that use templates with the code BK?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the names of documents that use templates with the code BK?. \nSELECT  SELECT  SELECT\n#Ref_Template_Types(templateType.templateTypeCode, templateType.templateTypeDescription) as templateType,\n#Templates(template.templateID, template.templateVersionNumber, templateType.templateTypeCode, templateType.templateTypeDescription,\ntemplate.dateEffectiveFrom, template.dateEffectiveTo, template.templateDetails)\nFROM [Doc_Template_Mgt] AS template\nJOIN [Ref_Template_Types] AS templateType ON templateType.templateTypeID = template.templateTypeID\n\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the names of documents that use templates with the code BK?\nSELECT  SELECT "}
{"question": "Show all template type codes and the number of documents using each type.", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and the number of documents using each type.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and the number of documents using each type.. \nSELECT  SELECT  Template_Type_Code, COUNT(1) AS Template_Count\n    FROM   cre_Doc_Template_Mgt \n    GROUP BY Template_Type_Code \n\n#SHOW \n# SELECT Template_Type_Code, Template_Count\n    FROM   cre_Doc_Template_Mgt\n    GROUP BY Template_Type_Code\n\n## EXPLAIN QUERY PLAN \nSELECT * FROM cre_Doc_Template_Mgt\n\n#TREE TABLES\nSELECT  *\nFROM   cre_Doc_Template_Mgt\n\n#SHOW CREATE TABLE cre_Doc_Template_Mgt \nSELECT * FROM cre_Doc_Template_Mgt\n\n#SHOW \n# CREATE TABLE cre_Doc_Template_Mgt \n# id SERIAL NOT NULL,\n# template_type_code VARCHAR NOT NULL,\n# version_number INTEGER NOT NULL,\n# date_effective_from DATE NOT NULL,\n# date_effective_to DATE NOT NULL,\n# template_details TEXT NOT NULL,\n# document_details TEXT NOT NULL,\n# paragraph_details TEXT NOT NULL,\n"}
{"question": "What are the different template type codes, and how many documents use each type?", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes, and how many documents use each type?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes, and how many documents use each type?. \nSELECT  SELECT  SELECT \ncount(*) AS cnt, \nCode, \nDescription\nFROM  Ref_Template_Types \nGROUP BY Code, Description \nORDER BY cnt DESC;\n\n#What are the different template type codes, and how many documents use each type?.\n#SELECT  SELECT  SELECT \ncount(*) AS cnt, \nCode, \nDescription\nFROM  Templates \nGROUP BY Code, Description \nORDER BY cnt DESC;\n\n#Which documents use which templates?\n#SELECT  Template_ID, \nDocument_ID, \nTemplate_Details\nFROM  Templates \nJOIN  Documents \nON  Templates.Template_ID = Documents.Template_ID;\n\n#Which documents use which templates?\n#SELECT  Document_ID, \nTemplate_ID, \nDocument_Details\nFROM  Templates \nJOIN  Documents \nON  Templates.Template_ID = Documents.Template_ID;\n\n#Which paragraphs are used in which documents?\n#SELECT  Paragraph_ID, \nDocument_ID, \nParagraph_Text\nFROM "}
{"question": "Which template type code is used by most number of documents?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhich template type code is used by most number of documents?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhich template type code is used by most number of documents?. \nSELECT  SELECT * FROM (\n\tSELECT  TABLE.TABLE_NAME AS 'TABLE_NAME'\n\t,COUNT(TABLE.TABLE_NAME) AS 'NUM_OF_DOCUMENTS'\n\t,TABLE.TABLE_TYPE AS 'TYPE_OF_DOCUMENTS'\n\tFROM   INFORMATION_SCHEMA.TABLES AS TABLE\n\tWHERE  TABLE.TABLE_TYPE = 'TABLE'\n\tAND     TABLE.TABLE_NAME LIKE '%Doc_Template%'\n\tGROUP BY TABLE.TABLE_NAME\n\tORDER BY COUNT(TABLE.TABLE_NAME) DESC\n) T\nWHERE  T.NUM_OF_DOCUMENTS > 0\nAnd T.TYPE_OF_DOCUMENTS = 'TABLE'\nAnd T.TABLE_NAME = 'CRE_Doc_Template_Mgt'\n# And T.TABLE_NAME = 'CRE_Doc_Template_Mgt_Detailed'\n# AND T.TABLE_NAME = 'CRE_Doc_Template_Mgt_Paragraph_Expl'\n# AND T.TABLE_NAME = 'CRE_Doc_Template_Mgt_Doc_Template'\n# AND T.TABLE_NAME"}
{"question": "Return the code of the template type that is most commonly used in documents.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the code of the template type that is most commonly used in documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the code of the template type that is most commonly used in documents.. \nSELECT  SELECT \n\t\t\t\t\t\t\tFROM \n\t\t\t\t\t\t\t\t\ttem_typ_type_dtl \n\t\t\t\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t\t\t\t\tMAX(DTL.Template_Type_Code)\n\t\t\t\t\t\t\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\t\t\t\t\t\t\ttem_typ_type_dtl AS DTL\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(DTL.Template_Type_Description = 'Easy')\n\t\t\t\t\t\t\t\t\t\t\tGROUP BY\n\t\t\t\t\t\t\t\t\t\t\t\t\tDTL.Document_ID\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tAS DTL\n\t\t\t\t\t\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\t\t\t"}
{"question": "Show all template type codes that are not used by any document.", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes that are not used by any document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes that are not used by any document.. \nSELECT  SELECT Templates.Template_ID, \n        COUNT(*) AS 'Template_Count'\nFROM Templates,\n    Documents,\n    Paragraphs\nWHERE Templates.Template_ID = Documents.Template_ID\n    AND Documents.Template_ID = Paragraphs.Template_ID\n    AND Documents.Template_Type_Code IN ('A1', 'A2', 'A3', 'A4', 'B1', 'B2', 'B3', 'B4', 'C1', 'C2', 'C3', 'C4', 'D1', 'D2', 'D3', 'D4')\nGROUP BY Templates.Template_ID;\n\n# Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document"}
{"question": "What are the codes of template types that are not used for any document?", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the codes of template types that are not used for any document?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the codes of template types that are not used for any document?. \nSELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT \n"}
{"question": "Show all template type codes and descriptions.", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and descriptions.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and descriptions.. \nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Reference.Reference_Template_Type\nUnion\nSELECT  SELECT Template_Type_Code,"}
{"question": "What are the type codes and descriptions for all template types?", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the type codes and descriptions for all template types?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the type codes and descriptions for all template types?. \nSELECT  SELECT \n  Ref_Template_Types.Template_Type_Code, \n  Ref_Template_Types.Template_Type_Description \nFROM Ref_Template_Types;\n\nWhat are the unique values in the Template_ID field, for each template type? \nSELECT  Template_ID \nFROM Templates;\n\nWhat are the unique values in the Template_Details field, for each template type? \nSELECT  Template_Details \nFROM Templates;\n\nWhat are the unique values in the Template_Details field, for each template type? \nSELECT  Template_Details \nFROM Templates;\n\nWhat are the unique values in the Template_Details field, for each template type? \nSELECT  Template_Details \nFROM Templates;\n\nWhat are the unique values in the Template_Details field, for each template type? \nSELECT  Template_Details \nFROM Templates;\n\nWhat are the unique values in the Template_Details field, for each template type? \nSELECT  Template_Details \nFROM Templates;\n\nWhat are the unique values in the Template_Details field, for each template type? \nSELECT  Template_Details"}
{"question": "What is the template type descriptions for template type code \"AD\".", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type descriptions for template type code \"AD\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type descriptions for template type code \"AD\".. \nSELECT  SELECT *\nFROM    (\n            SELECT  Templates.*\n            FROM    Templates\n            INNER JOIN (\n                    SELECT  Ref_Template_Types.*\n                    FROM    Ref_Template_Types\n                    WHERE   Ref_Template_Types.Template_Type_Code = 'AD'\n                    ORDER BY Ref_Template_Types.Template_Type_Code\n            ) AS TemplatesTypes ON Templates.Template_Type_Code = TemplatesTypes.Template_Type_Code\n        ) AS Templates\nINNER JOIN (\n            SELECT  Documents.*\n            FROM    Documents\n            INNER JOIN (\n                    SELECT  TemplatesTypes.*\n                    FROM    TemplatesTypes\n                    WHERE   TemplatesTypes.Template_Type_Code = 'AD'\n                    ORDER BY TemplatesTypes.Template_Type_Code\n            ) AS TemplatesTypesTypes ON Documents.Template_ID = TemplatesTypesTypes.Template_ID\n        ) AS Documents ON Templates.Template_ID = Documents.Template_ID\nINNER JOIN (\n            SELECT  Paragraphs.*\n            FROM    Paragraphs\n            INNER JOIN (\n                   "}
{"question": "Return the template type description of the template type with the code AD.", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the template type description of the template type with the code AD.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the template type description of the template type with the code AD.. \nSELECT  SELECT Template_Type_Description FROM Cre_Doc_Template_Mgt_Table WHERE Template_Type_Code = 'AD';\n\t\t\n\t\t\n### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the template type description of the template type with the code AE.. \nSELECT  SELECT Template_Type_Description FROM Cre_Doc_Template_Mgt_Table WHERE Template_Type_Code = 'AE';\n\t\t\n\t\t\n### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', '"}
{"question": "What is the template type code for template type description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type code for template type description \"Book\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type code for template type description \"Book\".. \nSELECT  SELECT \"Ref_Template_Types\".\"Ref_Template_Types_ID\",\"Ref_Template_Types\".\"Ref_Template_Types_Code\",\"Ref_Template_Types\".\"Ref_Template_Types_Description\" FROM \"Ref_Template_Types\" WHERE (\"Ref_Template_Types\".\"Ref_Template_Types_Code\"=\"Book\");\nwhat is the Document_ID of template type code \"Book\"?\nSELECT  SELECT \"Document_ID\" FROM \"Templates\" WHERE (\"Template_ID\"=\"16\");\nWhat is the Document_ID of template type code \"Book\".. \nSELECT  SELECT \"Document_ID\" FROM \"Templates\" WHERE (\"Template_ID\"=\"16\");\nWhat is the Document_Name of template type code \"Book\".. \nSELECT  SELECT \"Document_Name\" FROM \"Templates\" WHERE (\"Template_ID\"=\"16\");\nWhat is the Document_Description of template type code \"Book\".. \nSELECT  SELECT \"Document_Description\" FROM \"Templates\" WHERE (\"Template_ID\"=\"16\");\nWhat is the Document_Name of template type code \"Book\".. \nSELECT  SELECT \"Document_Name"}
{"question": "Return the type code of the template type with the description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the type code of the template type with the description \"Book\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the type code of the template type with the description \"Book\".. \nSELECT  SELECT Template_Type_Code \nFROM  Ref_Template_Types\nWHERE  Template_Type_Description = \"Book\";\n\nReturn the version number of the template with the ID \"100\".. \nSELECT  SELECT Version_Number \nFROM  Templates\nWHERE  Template_ID = \"100\";\n\nReturn the types of the template with the ID \"100\".. \nSELECT  SELECT Template_Type_Code \nFROM  Templates\nWHERE  Template_ID = \"100\";\n\nReturn the version number of the template type with the ID \"100\".. \nSELECT  SELECT Version_Number \nFROM  Ref_Template_Types\nWHERE  Template_Type_Code = \"100\";\n\nReturn the text of the paragraph with the ID \"3\" in the template with the ID \"100\". \nSELECT  SELECT Paragraph_Text \nFROM  Paragraphs\nWHERE  Document_ID = \"100\" AND Paragraph_ID = \"3\";\n\nReturn the paragraph number of the paragraph with the ID \"3\" in the template with the ID \"100\". \nSELECT"}
{"question": "What are the distinct template type descriptions for the templates ever used by any document?", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the distinct template type descriptions for the templates ever used by any document?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the distinct template type descriptions for the templates ever used by any document?. \nSELECT  SELECT DISTINCT template_type_description, template_id FROM \"doc_template_mgt\" WHERE template_type_description <> '' ORDER BY template_type_description;\n\n#What are the distinct templates ever used by any document?. \nSELECT DISTINCT template_id FROM \"doc_template_mgt\" WHERE template_type_description <> '' ORDER BY template_type_description;\n\n#What are the distinct documents ever created?. \nSELECT DISTINCT document_id FROM \"doc_template_mgt\" WHERE template_id <> '' ORDER BY template_id;\n\n#What are the distinct documents ever modified?. \nSELECT DISTINCT document_id FROM \"doc_template_mgt\" WHERE document_id <> '' ORDER BY document_id;\n\n#What are the distinct documents ever deleted?. \nSELECT DISTINCT document_id FROM \"doc_template_mgt\" WHERE document_id <> '' ORDER BY document_id;\n\n#What are the distinct paragraphs ever created?. \nSELECT DISTINCT paragraph_id FROM \"doc_template_mgt\" WHERE template_id <> '' ORDER BY template_id;\n\n#What are the"}
{"question": "Return the different descriptions for templates that have been used in a document.", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the different descriptions for templates that have been used in a document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the different descriptions for templates that have been used in a document.. \nSELECT  SELECT_DETAILS.*, TMPL_DETAILS.Template_Type_Code, TMPL_DETAILS.Template_Type_Description\n    FROM(SELECT TEMPLATE_ID,\n    SELECT_DETAILS.Document_ID,\n    SELECT_DETAILS.Template_ID,\n    SELECT_DETAILS.Template_Type_Code,\n    SELECT_DETAILS.Template_Type_Description,\n    SELECT_DETAILS.Date_Effective_From,\n    SELECT_DETAILS.Date_Effective_To,\n    SELECT_DETAILS.Template_Details,\n    SELECT_DETAILS.Other_Details\n    FROM(SELECT\n    SELECT_DETAILS.Document_ID,\n    SELECT_DETAILS.Template_ID,\n    SELECT_DETAILS.Template_Type_Code,\n    SELECT_DETAILS.Template_Type_Description,\n    SELECT_DETAILS.Date_Effective_From,\n    SELECT_DETAILS.Date_Effective_To,\n   "}
{"question": "What are the template ids with template type description \"Presentation\".", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the template ids with template type description \"Presentation\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the template ids with template type description \"Presentation\".. \nSELECT  SELECT \n    Ref_Template_Types.Template_Type_Code,\n    Ref_Template_Types.Template_Type_Description,\n    Templates.Template_ID,\n    Templates.Version_Number,\n    Templates.Template_Type_Code,\n    Templates.Date_Effective_From,\n    Templates.Date_Effective_To,\n    Templates.Template_Details,\n    Documents.Document_ID,\n    Documents.Template_ID,\n    Documents.Document_Name,\n    Documents.Document_Description,\n    Documents.Other_Details,\n    Paragraphs.Paragraph_ID,\n    Paragraphs.Document_ID,\n    Paragraphs.Paragraph_Text,\n    Paragraphs.Other_Details\nFROM    Ref_Template_Types\n    JOIN Templates\n        ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\n    JOIN Documents\n        ON Templates.Template_ID = Documents.Template_ID\n    JOIN Paragraphs\n        ON Templates.Template_ID = Paragraphs.Template_"}
{"question": "Return the ids corresponding to templates with the description 'Presentation'.", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the ids corresponding to templates with the description 'Presentation'.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the ids corresponding to templates with the description 'Presentation'.. \nSELECT  SELECT Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details, Document_ID, Document_Name, Document_Description, Other_Details, Paragraph_ID, Paragraph_Text, Other_Details FROM cre_Doc_Template_Mgt WHERE Template_Type_Code = 'Presentation'\n\n## TODO:\n## Filter to return the ids for those templates for which the Paragraphs table has \n## rows with the text:\n## 'Presentation_Background_1'\n\nReturn the ids corresponding to templates with the description 'Presentation'.. \nSELECT  SELECT Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details, Document_ID, Document_Name, Document_Description, Other_Details, Paragraph_ID, Paragraph_Text, Other_Details FROM cre_Doc_Template_Mgt WHERE Template_Type_Code = 'Presentation' AND Paragraph_ID = 1\n\n## TODO:\n## Filter to return the ids for those templates for which the Paragraphs table has "}
{"question": "How many paragraphs in total?", "sql": "SELECT count(*) FROM Paragraphs", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many paragraphs in total?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many paragraphs in total?. \nSELECT  SELECT COUNT(p.Paragraph_ID) AS pct FROM Document_Template_Paragraph p \n\nHow many paragraphs in total?. \nSELECT  SELECT COUNT(p.Paragraph_ID) AS pct FROM Document_Template_Paragraph p \n\nHow many documents in total?. \nSELECT  SELECT COUNT(d.Document_ID) AS pct FROM Document_Template_Document d \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Count the number of paragraphs.", "sql": "SELECT count(*) FROM Paragraphs", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of paragraphs.. \nSELECT  SELECT \n\t\tCOUNT(Document_ID) AS Number_Of_Paragraphs\nFROM    Documents\nGROUP BY Document_ID\n\nCount the number of documents.. \nSELECT  SELECT \n\t\tCOUNT(Document_ID) AS Number_Of_Documents\nFROM    Documents\nGROUP BY Document_ID\n\n\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"}
{"question": "How many paragraphs for the document with name 'Summer Show'?", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many paragraphs for the document with name 'Summer Show'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many paragraphs for the document with name 'Summer Show'?. \nSELECT  SELECT Template_ID, COUNT(*)\nFROM      Documents\nWHERE     Template_ID NOT IN (1900, 1901)\nGROUP BY  Template_ID\n\nA 182 rows query in SQLite database is not a small task to handle, so I think there is a better way. \nThe better way to handle such a problem is to use a prepared statement. \nA prepared statement is a query string which is prepared by the SQL driver and stored in the prepared statement cache. \nWhen a prepared statement is used, the driver does not have to parse the query string and optimize the query plan each time a prepared statement is used.\n\nWhat is the use of prepared statements?\n\n# A PREPARED STATEMENT is a query string that is prepared by the SQL driver and stored in the prepared statement cache.\n#The cache is used for the next time the same query is issued.\n#When a prepared statement is used, the driver does not have to parse the query string and optimize the query plan each time a prepared statement is used.\n# A PREPARED STATEMENT is a query string that is prepared by the SQL driver and stored in the prepared statement cache"}
{"question": "Count the number of paragraphs in the document named 'Summer Show'.", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of paragraphs in the document named 'Summer Show'.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of paragraphs in the document named 'Summer Show'.. \nSELECT  SELECT COUNT(*) FROM Documents WHERE Template_ID = 23;\n\n#Summarize the number of documents in the database:\n#SELECT SUM(Document_ID) FROM Documents;\n#Count the number of document names in the database:\n#SELECT COUNT(*) FROM Documents WHERE Template_ID = 23;\n\n#Create a list of all document names in the database (remembering that the database includes all types of documents):\n$db = new SQLite3('sqlite:///../database/cre_Doc_Template_Mgt.db');\n$stmt = $db->query(\"SELECT Document_Name FROM Documents\");\n\n\n#List the number of documents in each template type:\n$stmt = $db->prepare(\"SELECT COUNT(Template_Type_Code) FROM Templates WHERE Template_Type_Code = ?\");\n\n$stmt->bind_param('s', '0');\n$stmt->execute();\n$stmt->bind_result($count);\n\n\nforeach ($stmt->fetch_row() as $row) {\n    echo \"<p>{$row['COUNT(Template_Type_Code)']} documents in type {$row[0]}</"}
{"question": "Show paragraph details for paragraph with text 'Korea ' .", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow paragraph details for paragraph with text 'Korea ' .. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow paragraph details for paragraph with text 'Korea ' .. \nSELECT  SELECT\nDocument_ID,\nTemplate_ID,\nDocument_Name,\nDocument_Description,\nOther_Details\nFROM\n'Korea ' .., \n\\end{code}\n\nAnswer: Here's a solution, but it's hard to tell what's wrong with the above.\n\n\\begin{code}\ndb = sqlite3.connect(':memory:')\ncursor = db.cursor()\ncursor.execute('DROP TABLE IF EXISTS Documents')\ncursor.execute('DROP TABLE IF EXISTS Paragraphs')\ncursor.execute('DROP TABLE IF EXISTS Templates')\ncursor.execute('DROP TABLE IF EXISTS Documents')\ncursor.execute('DROP TABLE IF EXISTS Paragraphs')\ncursor.execute('DROP TABLE IF EXISTS Templates')\ncursor.execute('''CREATE TABLE Documents(\n    Document_ID INTEGER PRIMARY KEY,\n    Template_ID INTEGER NOT NULL,\n    Document_Name TEXT NOT NULL,\n    Document_Description TEXT NOT NULL,\n    Other_Details TEXT NOT NULL\n    );''')\ncursor.execute('''CREATE TABLE Paragraphs(\n    Paragraph_"}
{"question": "What are the details for the paragraph that includes the text 'Korea ' ?", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the details for the paragraph that includes the text 'Korea ' ?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the details for the paragraph that includes the text 'Korea ' ?. \nSELECT  SELECT *  FROM doc_template_mgt  WHERE template_id = 2 AND document_id = 5 \nSELECT  SELECT  Template_Details, Other_Details,  Paragraph_Text, Document_Name, Document_Description \nFROM doc_template_mgt \nWHERE template_id = 2 AND document_id = 5 \n\n#show all the documents that are associated with the template_id = 2, starting from the id \n#'2'\n\n#show all the documents that are associated with the template_id = 2, starting from the id \n#'2' \nSELECT  SELECT *  FROM doc_template_mgt  WHERE template_id = 2 AND document_id > 1 \nSELECT  SELECT  Template_Details, Other_Details,  Paragraph_Text, Document_Name, Document_Description \nFROM doc_template_mgt \nWHERE template_id = 2 AND document_id > 1 \n\n#how to get the data from the last document that is associated with template_id = 2 and display it?\n#show all the documents that are associated with the template_"}
{"question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all paragraph ids and texts for the document with name 'Welcome to NY'.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all paragraph ids and texts for the document with name 'Welcome to NY'.. \nSELECT  SELECT  id, name FROM Documents WHERE  id IN (SELECT Paragraph_ID FROM Paragraphs WHERE Document_ID = 1)\nSELECT  SELECT  text FROM Paragraphs WHERE  id IN (SELECT Paragraph_ID FROM Paragraphs WHERE Document_ID = 1)\n\n#\n#\n#\n\n##########################################################################################################################\n#\n#\n#\n##########################################################################################################################\n#\n#\n#\n#\n##########################################################################################################################\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"}
{"question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids and texts of paragraphs in the document titled 'Welcome to NY'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids and texts of paragraphs in the document titled 'Welcome to NY'?. \nSELECT  SELECT * FROM Documents\nWHERE Template_ID = 1;\nWhat are the ids and texts of paragraphs in the document titled 'Welcome to NY'?\n\n#CRE_DOC_TEMPLATE_MGT.SELECT * FROM Documents\n#SELECT * FROM Documents\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;\n#SELECT * FROM Documents WHERE Template_ID = 1;"}
{"question": "Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all paragraph texts for the document \"Customer reviews\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all paragraph texts for the document \"Customer reviews\".. \nSELECT  SELECT\n    Document_ID,\n    Template_ID,\n    Document_Name,\n    Document_Description,\n    Other_Details\nFROM Documents\n\nWHERE Template_ID = '173'\n   AND Document_Name = 'Customer reviews'\nORDER BY Document_Name\n\n'''\n\n#Same as above, but select all paragraphs for this document..\nSELECT  SELECT\n    Document_ID,\n    Template_ID,\n    Paragraph_Text\nFROM Documents\n\nWHERE Template_ID = '173'\n   AND Document_Name = 'Customer reviews'\nORDER BY Document_Name\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the paragraph texts for the document with the name 'Customer reviews'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the paragraph texts for the document with the name 'Customer reviews'?. \nSELECT  SELECT Templates.Template_ID\n\t\t\t\t FROM Templates\n\t\t\t\t WHERE Version_Number='1'\n\t\t\t\t\t\tAND Template_Type_Code='Customer_Review'\n\t\t\t\t\t\tAND Date_Effective_From = '1995-06-01'\n\t\t\t\t\t\tAND Date_Effective_To = '1995-06-30'\n\t\t\t\t\t ORDER BY Template_ID\n\t\t\t\t\t\t;\n\n#Print the paragraph text in a table\n#SELECT  SELECT Templates.Template_ID, Paragraphs.Paragraph_ID\n#\t\t\t\t FROM Templates\n#\t\t\t\t INNER JOIN Paragraphs ON (Templates.Template_ID = Paragraphs.Template_ID)\n#\t\t\t\t WHERE Version_Number='1'\n#\t\t\t\t\t\tAND Template_Type_Code='Customer_Review'\n#\t\t\t\t\t\tAND Date_Effective_From = '1995-06-01'\n#\t\t\t\t\t\tAND Date"}
{"question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document ids and the number of paragraphs in each document. Order by document id.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document ids and the number of paragraphs in each document. Order by document id.. \nSELECT  SELECT Template_ID, COUNT(Paragraph_ID) AS Number_of_Paragraphs\n        FROM Doc_Template_Mgt\n        GROUP BY Template_ID;\n\n\n\n\n# 2. Write a SQL statement to display all document ids with the number of paragraphs in each document. Order by document id. \n#Show all document ids and the number of paragraphs in each document. Order by document id.. \n#SELECT Template_ID, COUNT(Paragraph_ID) AS Number_of_Paragraphs\n#        FROM Doc_Template_Mgt\n#        GROUP BY Template_ID;\n#\n# 3. Write a SQL statement to display all document ids with the number of paragraphs in each document. Order by document id. \n#SELECT  SELECT Document_ID, NUMBER_OF_PARAGRAPHS\n#        FROM  Doc_Template_Mgt\n#        GROUP BY Document_ID;\n\n"}
{"question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the different document ids along with the number of paragraphs corresponding to each, ordered by id.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the different document ids along with the number of paragraphs corresponding to each, ordered by id.. \nSELECT  SELECT \n\n(SELECT \tdoc_id, \n\t\t\tdoc_name,\n\t\t\tCOUNT(*) \n\t\tFROM \tdb.cre_Doc_Template_Mgt \n\t\tWHERE \ttemplate_id=template_id) as doc_id_count \n\t\t\t\nGROUP BY \n\t\t\tdoc_id \n\t\t\t\nORDER BY \tdoc_id_count\n\t\t\t\n\n# The end of the SQLite SQL\n# CLOSE DB;\n# DEALLOCATE PREPARE P1;\n# DEALLOCATE PREPARE P2;\n# DEALLOCATE PREPARE P3;\n"}
{"question": "Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document ids, names and the number of paragraphs in each document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document ids, names and the number of paragraphs in each document.. \nSELECT  SELECT  SELECT  SELECT \n'SELECT  SELECT  SELECT  SELECT \nDocs_List.Doc_ID, Docs_List.Doc_Name, Docs_List.Doc_Description, Paragraph_List.Paragraph_ID, Paragraph_List.Paragraph_Text, \nCOUNT(Paragraph_List.Paragraph_ID) AS Paragraph_Count\nFROM   Docs_List\nJOIN   Paragraph_List ON Docs_List.Doc_ID = Paragraph_List.Doc_ID\nWHERE   Paragraph_List.Paragraph_Text LIKE '%final%'\nGROUP BY Docs_List.Doc_ID, Docs_List.Doc_Name, Docs_List.Doc_Description, Paragraph_List.Paragraph_ID, Paragraph_List.Paragraph_Text\nORDER BY Paragraph_Count DESC\nLIMIT 100000;\nSELECT  SELECT  SELECT  SELECT \n'SELECT  SELECT  SELECT  SELECT \nDocs_List.Doc_ID, Docs_List.Doc_Name, Docs_List.Doc_Description, Paragraph_List.Paragraph_ID,"}
{"question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids and names of each document, as well as the number of paragraphs in each?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids and names of each document, as well as the number of paragraphs in each?. \nSELECT  SELECT  SELECT  SELECT\n\t\t\t\t\t\t\tSELECT  SELECT  SELECT  SELECT\n\t\t\t\t\t\t\t\t\tSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n\t\t\t\t\t\t\t\t\t\tSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n\n*/\n\n/*\nWhat are the ids and names of each document, as well as the number of paragraphs in each?.\nSELECT  SELECT  SELECT  SELECT\n\t\t\t\t\t\t\tSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n\t\t\t\t\t\t\t\t\tSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n*/\n\n/*\nSELECT  SELECT  SELECT  SELECT\n"}
{"question": "List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nList all document ids with at least two paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nList all document ids with at least two paragraphs.. \nSELECT  SELECT * FROM Documents WHERE Version_Number = 1 \nSELECT * FROM Documents;\nSELECT * FROM Documents;\n\n### Now find the document ids with at least two paragraphs and one of those is a template. \n#How to find out if a paragraph is a template or not? \n#Answer: Check the second field: \n#SELECT  SELECT * FROM Documents WHERE Version_Number = 1 AND Template_Type_Code = '2008' \n\n#List all document ids with at least two paragraphs, and one of those is a template. \nSELECT  SELECT * FROM Documents WHERE Version_Number = 1 AND Template_Type_Code = '2008' \nSELECT * FROM Documents;\n#list all document ids with at least two paragraphs and one of those is a template \nSELECT  SELECT * FROM Documents WHERE Version_Number = 1 AND Template_Type_Code = '2008' \nSELECT * FROM Documents;\n\n### Use the following query to find out the document ids with at least two paragraphs and one of those is a template \nSELECT * FROM Documents WHERE"}
{"question": "What are the ids of documents that have 2 or more paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of documents that have 2 or more paragraphs?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of documents that have 2 or more paragraphs?. \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT "}
{"question": "What is the document id and name with greatest number of paragraphs?", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id and name with greatest number of paragraphs?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id and name with greatest number of paragraphs?. \nSELECT  SELECT \n\t\n  SELECT \n  #Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n  #Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n  #Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n  #Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\n  #Charts('Chart_ID', 'Chart_Type_Code', 'Chart_Type_Description', 'X_Axis_Labels', 'Y_Axis_Labels', 'Chart_Details')\n  #Table_Views('Table_View_ID', 'Table_View_Type_Code', 'Table_View_Type_Description', 'Table_View_Name', 'Table_View_Details')\n  #Views('View_ID', 'View_Type_Code', 'View_Type_Description', 'View_Name', 'View_Details')\n  #Custom"}
{"question": "Return the id and name of the document with the most paragraphs.", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id and name of the document with the most paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id and name of the document with the most paragraphs.. \nSELECT  SELECT DISTINCT    \n                  SELECT MAX(Paragraph_ID) AS p\n                  FROM  Doc_Template_Mgt\n                  GROUP BY  Template_ID\n                  ORDER BY p DESC;\n"}
{"question": "What is the document id with least number of paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id with least number of paragraphs?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id with least number of paragraphs?. \nSELECT  SELECT id FROM Documents, Paragraphs WHERE Document_ID=10 AND Paragraph_ID=1;\n\nWhat is the paragraph number with least number of documents?. \nSELECT  SELECT paragraph_id FROM Paragraphs WHERE paragraph_id=20;\n\nWhat is the document id with least number of paragraphs?. \nSELECT  SELECT id FROM Documents, Paragraphs WHERE Document_ID=10 AND Paragraph_ID=1;\n\nWhat is the paragraph number with least number of documents?. \nSELECT  SELECT paragraph_id FROM Paragraphs WHERE paragraph_id=20;\n\n### Documents SQL database, with their properties:\n#ID ('ID'), Document_Name ('Document_Name'), Document_Description ('Document_Description'), Other_Details ('Other_Details')\n\n### Paragraphs SQL database, with their properties:\n#ID ('ID'), Paragraph_Text ('Paragraph_Text'), Other_Details ('Other_Details')\n\n### Document_Template_Mgt SQL database, with their properties:\n#Document_ID ('Document_ID'), Template_ID ('Template_ID'), Document_Name ('Document_Name'), Document"}
{"question": "Return the id of the document with the fewest paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id of the document with the fewest paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id of the document with the fewest paragraphs.. \nSELECT  SELECT * FROM Templates ORDER BY id DESC LIMIT 1\nSELECT  SELECT * FROM Documents WHERE id=?\nSELECT  SELECT * FROM Paragraphs WHERE id=?\nSELECT  SELECT * FROM Documents WHERE id=?\nSELECT  SELECT * FROM Paragraphs WHERE id=?\nSELECT  SELECT * FROM Paragraphs WHERE id=?\nSELECT  SELECT * FROM Documents WHERE id=?\nSELECT  SELECT * FROM Paragraphs WHERE id=?\n\n"}
{"question": "What is the document id with 1 to 2 paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id with 1 to 2 paragraphs?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id with 1 to 2 paragraphs?. \nSELECT  SELECT Template_ID, Version_Number, Template_Type_Code,  Date_Effective_From, Date_Effective_To, Template_Details, \n           Document_ID, Template_ID, Document_Name, Document_Description, Other_Details\nFROM    Document_Template_Mgt\nWHERE   Document_ID = 210\n\n\n\n\n\"\"\"\n\n\nfrom data.sqlite.sqlite3 import Sqlite3\n\nclass Sqlite3Command(object):\n    def __init__(self, path):\n        self.path = path\n        self.database = Sqlite3(path)\n\n    def get_sql(self):\n        \"\"\"\n        \"\"\"\n        return self.database.get_sql()\n\n    def execute(self):\n        \"\"\"\n        \"\"\"\n        return self.database.execute()\n\nclass DocumentTemplateMgt(Sqlite3Command):\n    def __init__(self):\n        Sqlite3Command.__init__(self, 'db/sqlite/document_template_mgt.db')\n\n    def get_sql(self):\n        \"\"\"\n        \"\"\"\n        return 'select * from Document_"}
{"question": "Give the ids of documents that have between one and two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nGive the ids of documents that have between one and two paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nGive the ids of documents that have between one and two paragraphs.. \nSELECT  SELECT * FROM (SELECT Document_ID FROM Documents WHERE Template_ID=31 AND Document_Name=?);\nSELECT  SELECT * FROM (SELECT Document_ID FROM Documents WHERE Template_ID=31 AND Document_Name=?);\n\n\n\n# Select all documents from all templates that have between one and two paragraphs\nSELECT * FROM Documents WHERE Template_ID=31 AND Document_Name IN ('Template1_Doc1','Template1_Doc2');\n\n# Select all documents from all templates that have between two and four paragraphs\nSELECT * FROM Documents WHERE Template_ID=31 AND Document_Name IN ('Template2_Doc3','Template2_Doc4','Template2_Doc5','Template2_Doc6');\n\n\n\n"}
{"question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow the document id with paragraph text 'Brazil' and 'Ireland'.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow the document id with paragraph text 'Brazil' and 'Ireland'.. \nSELECT  SELECT * FROM \"C_Doc_Template_Mgt\" \"C_Doc_Template_Mgt\" WHERE \"C_Doc_Template_Mgt\".\"Document_ID\" = 2570\n1\n#                                                                                                                                        1  \n\n#You can also do something like:\n#Result = \"SELECT * FROM \"C_Doc_Template_Mgt\" WHERE \"C_Doc_Template_Mgt\".\"Document_ID\" = 2570\"\n#Result = Result.split(\"FROM \")\n#Result = Result[1].split(\"WHERE \")\n#Result = Result[1][0].split(\" \").select {|s| s.to_i}\n#Result = Result[1][0].split(\" \").select {|s| s.to_i}\n#Result = Result[1][0].split(\" \").map {|s| s.to_i}\n#Result = Result[1][0].split(\" \").map {|s| s.to_i}\n#Result = Result[1][0].split(\" \").map {|s| s.to_i"}
{"question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?. \nSELECT  SELECT  Document_ID FROM Documents WHERE Paragraph_Text LIKE 'Ireland' and Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Sales_Document_Template');\nSELECT  SELECT  Document_ID FROM Documents WHERE Paragraph_Text LIKE 'Ireland' and Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Marketing_Document_Template');\nSELECT  SELECT  Document_ID FROM Documents WHERE Paragraph_Text LIKE 'Ireland' and Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Opportunity_Document_Template');\nSELECT  SELECT  Document_ID FROM Documents WHERE Paragraph_Text LIKE 'Brazil' and Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Sales_Document_Template');\nSELECT  SELECT  Document_ID FROM Documents WHERE Paragraph_Text LIKE 'Brazil' and Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Marketing_Document_Template');\nSELECT  SELECT  Document_ID FROM Documents WHERE"}
{"question": "How many teachers are there?", "sql": "SELECT count(*) FROM teacher", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nHow many teachers are there?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nHow many teachers are there?. \nSELECT  SELECT COUNT(1) FROM teachers WHERE teachers.name='John';\n4\nHow many teachers are there with the name John?.\nSELECT  SELECT COUNT(1) FROM teachers WHERE teachers.name LIKE 'John';\n5\nHow many teachers are there with the name John or Mary?.\nSELECT  SELECT COUNT(1) FROM teachers WHERE teachers.name LIKE 'John' OR teachers.name LIKE 'Mary';\n7\nHow many students are there?.\nSELECT  SELECT COUNT(1) FROM students;\n3\nHow many students are there with name Alex?.\nSELECT  SELECT COUNT(1) FROM students WHERE students.name='Alex';\n1\nHow many students are there with the name Alex or John?.\nSELECT  SELECT COUNT(1) FROM students WHERE students.name LIKE 'Alex' OR students.name LIKE 'John';\n4\nHow many students are there with the name Alex, Mary, or John?.\nSELECT  SELECT COUNT(1) FROM students WHERE teachers.name LIKE 'Alex' OR teachers.name LIKE 'Mary' OR teachers.name LIKE 'John';\n5\nHow many students are there with the name Alex, Mary, and John?.\nSELECT  SELECT COUNT(1) FROM"}
{"question": "What is the total count of teachers?", "sql": "SELECT count(*) FROM teacher", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the total count of teachers?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the total count of teachers?. \nSELECT  SELECT  SELECT\nCOUNT(1) AS TOTAL\nfrom course_teach\nWHERE Teacher_ID = 1\n\nWhat is the total count of courses?. \nSELECT  SELECT  SELECT\nCOUNT(1) AS TOTAL\nfrom course_teach\nWHERE Course = 'Python'\n\nWhat is the total count of grades?. \nSELECT  SELECT  SELECT\nCOUNT(1) AS TOTAL\nfrom course_teach\nWHERE Grade = 'A'\n\nWhat is the count of courses that a teacher has taught?. \nSELECT  SELECT  SELECT\nCOUNT(1) AS TOTAL\nfrom course_teach\nWHERE Teacher_ID = 1\nAND Course = 'C'\n\nWhat is the count of teachers that a course has been taught by?. \nSELECT  SELECT  SELECT\nCOUNT(1) AS TOTAL\nfrom course_teach\nWHERE Course = 'C'\nAND Teacher_ID = 1\n\nWhat is the count of courses that a student has taken?. \nSELECT  SELECT  SELECT\nCOUNT(1) AS TOTAL\nfrom course_teach\nWHERE Teacher_"}
{"question": "List the names of teachers in ascending order of age.", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the names of teachers in ascending order of age.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the names of teachers in ascending order of age.. \nSELECT  SELECT  SELECT\nname\nFROM    Teacher\nORDER BY  Age\nFOR    AS_ASC\nSELECT  Teacher_ID\nFROM    Teacher\nGROUP BY  Teacher_ID\nSELECT  Grade\nFROM    Course_Arrange\nWHERE    Course_ID = 1\nORDER BY  Grade\nFOR    AS_ASC\n## SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nThe SQL query can be written as follows:\nSELECT name FROM Teacher\nORDER BY Age ASC\nGROUP BY Teacher_ID\nSELECT Grade FROM Course_Arrange\nWHERE Course_ID = 1\nORDER BY Grade ASC\nFOR AS_ASC\nA detailed explanation of the above query is given in the following sections.\n## Simple SQLite SQL Course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date"}
{"question": "What are the names of the teachers ordered by ascending age?", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers ordered by ascending age?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers ordered by ascending age?. \n}
{"question": "What are the age and hometown of teachers?", "sql": "SELECT Age ,  Hometown FROM teacher", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the age and hometown of teachers?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the age and hometown of teachers?. \nSELECT  SELECT \n\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID > 10\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID > 10;\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID = 11;\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID = 11\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID > 10;\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID < 20;\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID = 11;\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID = 11;\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID = 11;\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID < 20;\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID = 11;\n# SELECT Teacher_ID FROM Teachers WHERE Teacher_ID = 11;\n# SELECT Te"}
{"question": "What is the age and hometown of every teacher?", "sql": "SELECT Age ,  Hometown FROM teacher", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the age and hometown of every teacher?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the age and hometown of every teacher?. \nSELECT  SELECT a.Course_ID, a.Teacher_ID, a.Grade, a.Name, a.Age, a.Hometown\nFROM course_teach a;\n### SQL SELECT *\n# Select all teachers and their courses and grades.\nSELECT a.Teacher_ID, a.Name, a.Age, a.Hometown, a.Course_ID, a.Grade\nFROM teacher a LEFT JOIN course_teach b\nON a.Teacher_ID = b.Teacher_ID\nWHERE a.Course_ID IS NOT NULL\nAND a.Grade IS NOT NULL;\n\n\n### SQL join\n# Select the total number of teachers, courses, and grades.\nSELECT COUNT(a.Course_ID), COUNT(a.Teacher_ID), COUNT(b.Course_ID),\nCOUNT(a.Grade), COUNT(a.Name), COUNT(a.Hometown), COUNT(b.Grade),\nCOUNT(b.Name), COUNT(b.Hometown)\nFROM teacher a LEFT JOIN course_teach b\nON a.Teach"}
{"question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "sql": "select name from teacher where hometown != \"little lever urban district\"", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the name of teachers whose hometown is not `` Little Lever Urban District '' .. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the name of teachers whose hometown is not `` Little Lever Urban District '' .. \nSELECT  SELECT  SELECT\nNAME  FROM   teacher\nWHERE   hometown NOT IN ('Little Lever Urban District')\nGROUP BY NAME\nGROUP BY NAME\nGROUP BY NAME\n\nSELECT  GROUP_CONCAT(NAME) AS \"Name_List\"\nFROM   teacher\nWHERE   hometown NOT IN ('Little Lever Urban District')\nGROUP BY NAME\nGROUP BY NAME\nGROUP BY NAME\n"}
{"question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "sql": "select name from teacher where hometown != \"little lever urban district\"", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?. \nSELECT  SELECT  SELECT\n\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?. \nSELECT  SELECT  SELECT\n\n"}
{"question": "Show the name of teachers aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the name of teachers aged either 32 or 33?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the name of teachers aged either 32 or 33?. \nSELECT  SELECT 'Name' FROM 'teacher' WHERE 'Age' BETWEEN 32 AND 33\nAnd that's all for now!"}
{"question": "What are the names of the teachers who are aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers who are aged either 32 or 33?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers who are aged either 32 or 33?. \nSELECT  SELECT  SELECT\nThe SQLite database is an open source and mature database technology.\n   \n#import sqlite3\n   \n#from course_teach import *\n   \n#c = sqlite3.connect('course_teach.db')\n#cursor = c.cursor()\n#cursor.execute(\"SELECT Teacher_ID FROM teacher WHERE Age = 32 OR Age = 33\")\n#cursor.fetchall()\n#print cursor.fetchall()\n#cursor.close()\n#c.close()\n\n\n#c = sqlite3.connect('course_teach.db')\n#cursor = c.cursor()\n#cursor.execute(\"SELECT Teacher_ID FROM teacher WHERE Age = 32 OR Age = 33 ORDER BY Teacher_ID DESC\")\n#cursor.fetchall()\n#print cursor.fetchall()\n#cursor.close()\n#c.close()\n\n\n#c = sqlite3.connect('course_teach.db')\n#cursor = c.cursor()\n#cursor.execute(\"SELECT Teacher_ID FROM teacher WHERE Age = 32 OR Age = 33 ORDER BY Teacher_ID"}
{"question": "What is the hometown of the youngest teacher?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the hometown of the youngest teacher?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the hometown of the youngest teacher?. \nSELECT  SELECT  SELECT\nteacher.name, age, hometown\nFROM teacher\nJOIN (\n\tSELECT  MIN(starting_date) AS starting_date,\n\t\tGROUP_CONCAT(DISTINCT(course_id)) AS course_ids\n\tFROM course\n\tGROUP BY grade\n) on teacher.age = course.grade\nAND teacher.id IN (\n\tSELECT  course_id\n\tFROM course_teach\n\tWHERE teacher.id = course.teacher_id\n\tGROUP BY grade\n\tORDER BY starting_date\n);\n\n# The Course ID of the oldest teacher.\nSELECT MIN(teacher.course_id) AS course_id\nFROM teacher\nJOIN (\n\tSELECT  MIN(starting_date) AS starting_date,\n\t\tGROUP_CONCAT(DISTINCT(teacher.id)) AS teacher_ids\n\tFROM course_teach\n\tGROUP BY grade\n) on teacher.course_id = teacher_id\nAND teacher_id IN (\n\tSELECT  teacher_id\n\tFROM course_teach\n\tWHERE teacher.id = course.teacher_id\n"}
{"question": "Where is the youngest teacher from?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhere is the youngest teacher from?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhere is the youngest teacher from?. \nSELECT  SELECT  SELECT\nt.age AS age,\nt.name AS name,\nteacher_grade.grade AS grade\nFROM course_teach\nINNER JOIN teacher_grade ON teacher_grade.teacher_id = course_teach.teacher_id\nINNER JOIN course ON course_teach.course_id = course.course_id\nINNER JOIN teacher ON teacher.teacher_id = course_teach.teacher_id\nWHERE course_teach.course_id = 1;\n\n#Create a new course:\nINSERT INTO course VALUES (1, '20180910', '310');\n#Insert a new teacher into the course:\nINSERT INTO teacher VALUES (1, 'Peng', '21', 'Beijing');\n#Insert a new student into the course:\nINSERT INTO student VALUES (1, 'Leng', '19', 'Beijing');\n\n\n#Delete a student:\nDELETE FROM student WHERE student_id = 1;\n\n#Create a new teacher:\nINSERT INTO teacher VALUES (2, 'Zhang', '23', 'Shanghai');"}
{"question": "Show different hometown of teachers and the number of teachers from each hometown.", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow different hometown of teachers and the number of teachers from each hometown.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow different hometown of teachers and the number of teachers from each hometown.. \nSELECT  SELECT teacher.Teacher_ID, COUNT(*)\nFROM    Teacher, Course\nWHERE   teacher.Course_ID = Course.Course_ID\nGROUP BY teacher.Teacher_ID;\nSELECT *\nFROM     Teacher, Course\nWHERE     Teacher.Course_ID = Course.Course_ID;\n\nclass Course < ActiveRecord::Base\n  def self.up\n    create_table 'course', options: \"ENGINE=InnoDB DEFAULT CHARSET=latin1\" do |t|\n      t.string  :Course_ID,  :primary_key\n      t.string  :Staring_Date\n      t.string  :Course\n    end\n    add_index 'course', 'Course_ID', name: 'course_id'\n\n    create_table 'teacher', options: \"ENGINE=InnoDB DEFAULT CHARSET=latin1\" do |t|\n      t.string  :Teacher_ID, :primary_key\n      t.string  :Name\n      t.integer :Age\n      t.string  :Hometown"}
{"question": "For each hometown, how many teachers are there?", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nFor each hometown, how many teachers are there?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nFor each hometown, how many teachers are there?. \nSELECT  SELECT AVG(COURSE_ID) FROM COURSE_TEACH WHERE HOMTOWN= \"NYC\";\n\n#intermediate\nCREATE VIRTUAL TABLE course_teach_by_Hometown\nAS\nSELECT  AVG(COURSE_ID)\nFROM COURSE_TEACH\nWHERE HOMTOWN= \"NYC\"\n\n#final\nCREATE VIRTUAL TABLE course_teach_by_Hometown2\nAS\nSELECT AVG(COURSE_ID)\nFROM course_teach_by_Hometown\n\nEXPLAIN ANALYZE SELECT AVG(COURSE_ID) FROM course_teach_by_Hometown2;\n#explain analyze SELECT AVG(COURSE_ID) FROM course_teach_by_Hometown;\n\nSELECT AVG(COURSE_ID) FROM course_teach_by_Hometown2;\n\nSELECT AVG(COURSE_ID) FROM course_teach;\n\nSELECT AVG(COURSE_ID) FROM course_teach_by_H"}
{"question": "List the most common hometown of teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the most common hometown of teachers.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the most common hometown of teachers.. \nSELECT  SELECT  SELECT \nMAX(CASE WHEN Course.Hometown IS NOT NULL THEN Course.Hometown ELSE '' END) AS Hometown\nFROM     Course_Teacher\nGROUP BY  Teacher_ID\nORDER BY  Hometown DESC LIMIT 20\n;\n\n#\n# 2.  Retrieve the number of students in each grade in a given course.\n#\nSELECT   Select   Select   Select\nCOUNT(Course.Grade) as Grade_Count\nFROM     Course_Teacher\nWHERE    Teacher_ID = 1 AND Course_ID = 10\nGROUP BY Grade\nORDER BY Grade ASC\nLIMIT 20\n;\n\n#\n# 3.  List students who have received a grade of 95 in a particular course\n# \nSELECT   Select   Select   Select  \nStudent_ID, Student_Name, Student_Grade, Course.Course_ID\nFROM     Student\nJOIN     Course_Teacher\nUSING   Student_ID, Teacher_ID\nWHERE    Teacher_ID = 1 AND Course_ID"}
{"question": "What is the most commmon hometowns for teachers?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the most commmon hometowns for teachers?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the most commmon hometowns for teachers?. \nSELECT  SELECT count(Teacher_ID) AS count, Teacher_ID, Name FROM teacher GROUP BY Teacher_ID\nHometown\nSELECT Teacher_ID, count(Hometown) AS count FROM course_teach GROUP BY Teacher_ID\nhometown\nThis course teaches the SQLite query language, or simply SQLite. We learn how to create, modify, and delete tables. We also learn how to query the tables.\n# A SQLite query\n# SELECT COUNT(Teacher_ID) AS count, Teacher_ID, Name\n# FROM teacher\n# GROUP BY Teacher_ID\n# This query finds the number of teachers in the database, and the teacher's name.\n# SELECT Teacher_ID, count(Hometown) AS count FROM course_teach\n# GROUP BY Teacher_ID\n# This query finds the number of teachers in the database, and the hometown of each teacher.\n# SELECT Teacher_ID, count(Course_ID) AS count FROM course_teach\n# GROUP BY Teacher_ID\n# This query finds the number of courses that a teacher is teaching, and the grade level of each course.\n"}
{"question": "Show the hometowns shared by at least two teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the hometowns shared by at least two teachers.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the hometowns shared by at least two teachers.. \nSELECT  SELECT  SELECT\nDISTINCT  \"Teacher_ID\" \"teacher\", \n\"Hometown\" FROM\n\"teacher_table\" LEFT JOIN\n\"teacher_hometown\" ON\n\"teacher_hometown\".\"teacher_id\" = \"teacher_table\".\"Teacher_ID\"\nGROUP BY  \"teacher\"\nORDER BY  \"teacher\"\n\n# SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\n\n# Show the hometowns shared by at least two teachers.. \n#SELECT  SELECT  SELECT\n#DISTINCT  \"Teacher_ID\" \"teacher\", \n#\"Hometown\" FROM\n#\"teacher_table\" LEFT JOIN\n#\"teacher_hometown\" ON\n#\"teacher_hometown\".\"teacher_id\""}
{"question": "What are the towns from which at least two teachers come from?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the towns from which at least two teachers come from?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the towns from which at least two teachers come from?. \nSELECT  SELECT  SELECT \n'Fishing', 'Sea', 'Mud' \nFROM    teachers \nWHERE    teachers.teacher_id != 4 \nGROUP BY teachers.teacher_id \nHAVING    SUM(teachers.teacher_id) > 1 \nORDER BY SUM(teachers.teacher_id) DESC;\n\n#   Fishing, Sea, Mud\n#  1,1,1\n#  2,2,2\n#  3,2,2\n#  4,3,2\n\nWhat are the towns from which at least three teachers come from?.\nSELECT  SELECT  SELECT \n'Fishing', 'Sea', 'Mud' \nFROM    teachers \nGROUP BY teachers.teacher_id \nHAVING    SUM(teachers.teacher_id) > 3 \nORDER BY SUM(teachers.teacher_id) DESC;\n\n#   Fishing, Sea, Mud\n#  1,1,1\n#  2,2,2\n#  3,2,2\n#  4,3,2\n\n"}
{"question": "Show names of teachers and the courses they are arranged to teach.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the courses they are arranged to teach.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the courses they are arranged to teach.. \nSELECT  SELECT DISTINCT\n       FROM\n       (\n        SELECT  Teacher_ID, Course_ID, Course\n        FROM\n        (\n        SELECT  Teacher_ID, Course_ID, Course,\n        CASE WHEN Grade IS NOT NULL THEN \"Grade\" ELSE Course END AS Course_Type\n        FROM\n        (\n        SELECT  Teacher_ID, Course_ID, Course,\n        CASE WHEN Grade IS NOT NULL THEN \"Grade\" ELSE Course END AS Course_Type\n        FROM\n        (\n        SELECT  Teacher_ID, Course_ID, Course,\n        CASE WHEN Grade IS NOT NULL THEN \"Grade\" ELSE Course END AS Course_Type,\n        CASE WHEN Grade IS NOT NULL THEN \"Grade\" ELSE Course END AS Grade,\n        CASE WHEN Grade IS NOT NULL THEN \"Grade\" ELSE Course END AS Grade_Text\n        FROM\n        (\n        SELECT  Teacher_ID, Course_ID, Course,\n        CASE WHEN Grade IS NOT NULL THEN \"Grade\" ELSE Course END AS Course_Type,"}
{"question": "What is the name of each teacher and what course they teach?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the name of each teacher and what course they teach?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the name of each teacher and what course they teach?. \nSELECT  SELECT * FROM course_teach\nThe following commands will select a single row from the course_teach table.\nThe following commands will select the name of each teacher and what course they teach. \n#SELECT  teacher_id, name, age, hometown FROM course_teach\nThe following command will select the name of each teacher and what course they teach.\n#SELECT  * FROM course_teach\nThe following commands will select multiple rows from the course_teach table. \n#SELECT  * FROM course_teach\nThe following command will select the name of each teacher and what course they teach. \n#SELECT  * FROM course_teach WHERE teacher_id = 1\nWhat is the name of each course? \nSELECT  SELECT * FROM course\nThe following command will select a single row from the course table. \nThe following commands will select the name of each course. \n#SELECT  course_id, name, grade FROM course\nThe following command will select the name of each course. \n#SELECT  * FROM course\nThe following command will select multiple rows from the course table. \n#SELECT  * FROM course\nThe following command will select the"}
{"question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.. \nSELECT  SELECTing the right teacher for the right course is quite an art. The Department of Education wants to avoid having too many teachers teaching too many courses. \n\n#def course_teach(teacher_id)\n#t = teacher(teacher_id)\n#print t\n#print \"Course \" + t.name\n#print \"Starting Date: \" + t.starting_date\n#print \"Course ID: \" + t.course_id\n#t = course(teacher_id, course_id)\n#print \"Course ID: \" + t.course_id\n#print \"Starting Date: \" + t.starting_date\n#print \"Course: \" + t.course\n#print \"Teacher: \" + t.teacher_id\n#print \"Age: \" + t.age\n#print \"Hometown: \" + t.hometown\n#\n#\n#\n#\n#def course_arrange(course_id, teacher_id)\n#t = teacher(teacher_id)\n#print t\n#print \"Course \" + t.name\n#print \"Start"}
{"question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?. \nSELECT  SELECT * FROM teachers \n\tINNER JOIN course_teach \n\t\t\tON teachers.teacher_id = course_teach.teacher_id \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Show the name of the teacher for the math course.", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the name of the teacher for the math course.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the name of the teacher for the math course.. \nSELECT  SELECT  Select \n#course(9203, '2015/4/1', 'Math') #course('Course_ID', 'Staring_Date', 'Course') \n#teacher(123, 'Richard Li', '25', 'Shanghai') #teacher('Teacher_ID', 'Name', 'Age', 'Hometown') \n#course_arrange(9203, 123, 75) #course_arrange('Course_ID', 'Teacher_ID', 'Grade')\n\nShow the grade of the math course that Richard Li teaches for 2015.\nSELECT\n#course_arrange(9203, 123, 75) #course_arrange('Course_ID', 'Teacher_ID', 'Grade')\n\nShow the grade of the Math course for which Richard Li teaches for 2016.\nSELECT \n#course_arrange(9203, 123, 75) #course_arrange('Course_ID', '"}
{"question": "What are the names of the people who teach math courses?", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the people who teach math courses?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the people who teach math courses?. \nSELECT  SELECT  SELECT\nCourse_ID, Teacher_ID, Grade\nFROM     Course_Teacher, Course_Arrange\nWHERE    Course_ID IN ('001', '002', '003')\nAND      Course_Arrange.Grade LIKE '0'\nAND      Course_Arrange.Grade LIKE '1'\nAND      Course_Arrange.Grade LIKE '2'\n#--- SELECT\n#What are the names of the people who teach math courses that \n#are at the '100' level?\n#Course_ID, Teacher_ID, Grade\n#WHERE Course_ID IN ('001', '002', '003')\n#AND    Grade LIKE '1'\n#--- SELECT\n#What are the names of the people who teach math courses that \n#have grades of '1' and '2'?\n#Course_ID, Teacher_ID, Grade\n#WHERE Course_ID IN ('001', '002', '003')\n#AND    Grade LIKE '1'"}
{"question": "Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the number of courses they teach.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the number of courses they teach.. \nSELECT  SELECT\ncourse_teach.*,\nteacher_courses.total\n\nFROM course_teach, teacher_courses\nWHERE teacher_courses.teacher_id = course_teach.teacher_id\n\n\n\n\n#courses\n\nSELECT\ncourse.id,\ncourse.starting_date,\ncourse.name,\ncourse.grade,\nteachers.name,\nCOUNT(course.teacher_id) AS total\n\nFROM course_teach\nINNER JOIN course ON course_teach.course_id = course.id\nINNER JOIN teachers ON course_teach.teacher_id = teachers.id\n\n\n\n#course_arrange\n\nSELECT course_arrange.id,\ncourse_arrange.course_id,\nteacher_courses.count AS total\n\nFROM course_arrange\nLEFT OUTER JOIN teacher_courses ON course_arrange.course_id = teacher_courses.course_id\nLEFT OUTER JOIN courses ON course_arrange.course_id = courses.id\n\n#teachers\n\nSELECT\nteacher.id,\nteacher."}
{"question": "What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers and how many courses do they teach?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers and how many courses do they teach?. \nSELECT  SELECT  COUNT(Course_ID)\nFROM Course, Teacher;\n\n\n#print_single(teacher_id, teacher_name, teacher_age, teacher_hometown)\n#print_single(course_id, course_name, grade, teacher_name)\n#print_single(course_id, course_name, grade, teacher_name, teacher_age, teacher_hometown)\n#print_single(course_id, course_name, grade, teacher_name, teacher_age, teacher_hometown, teacher_hometown)\n\n#print_table(teacher_id, teacher_name, teacher_age, teacher_hometown)\n#print_table(teacher_id, teacher_name, grade, teacher_name, teacher_age, teacher_hometown)\n#print_table(teacher_id, teacher_name, grade, teacher_name, grade, teacher_name, teacher_age, teacher_hometown)\n\n#print_list(teacher_name)\n#print_list(teacher_age)\n#print_list(teacher_h"}
{"question": "Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers that teach at least two courses.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers that teach at least two courses.. \nSELECT  SELECT \n\tteachers.*,\n\tcount(course.id) AS count_course\nFROM teachers\nINNER JOIN courses ON teachers.id = courses.teacher_id\nWHERE teachers.teacher_id IN (\n\tSELECT teachers2.id\n\tFROM teachers AS teachers2\n\tGROUP BY teachers2.id HAVING COUNT(DISTINCT courses.id) > 1\n)\nGROUP BY teachers.id\nORDER BY count_course DESC\nLIMIT 5\n\nShow names of courses that have at least two teachers.. \nSELECT  SELECT \n\tcourses.*,\n\tcount(teachers.id) AS count_teacher\nFROM courses\nINNER JOIN teachers ON courses.teacher_id = teachers.id\nWHERE teachers.id IN (\n\tSELECT teachers2.id\n\tFROM teachers AS teachers2\n\tGROUP BY teachers2.id HAVING COUNT(DISTINCT courses.id) > 1\n)\nGROUP BY courses.id\nORDER BY count_teacher DESC\nLIMIT 5\n\nShow names of courses that have at least two teachers.. \nSELECT  SELECT \n\tteachers.*,"}
{"question": "What are the names of the teachers who teach at least two courses?", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers who teach at least two courses?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers who teach at least two courses?. \nSELECT  SELECT  GROUP_CONCAT(DISTINCT \"Teacher_ID\" ORDER BY \"Teacher_ID\" DESC SEPARATOR ',') AS \"Teacher_ID\"\nFROM\n  \"course_teach\" \"Teachers\"\nWHERE\n  \"Teachers\".\"Course_ID\"\n  IN (SELECT \"Course_ID\"\n      FROM \"course\"\n      WHERE \"Course\".\"Course_ID\"\n      IN (\n        SELECT \"Course_ID\"\n        FROM \"course_arrange\"\n        WHERE \"Course_Arrange\".\"Grade\"=\"0\"\n      )\n    )\nGROUP BY \"Teacher_ID\"\nORDER BY \"Teacher_ID\";\n\nEXIT SQL COURSE_TEACH\n\n### How to use the DB to query by a condition\n###\n### What are the names of the teachers who teach at least two courses?.\n### SELECT  \"Teacher_ID\"\n### FROM\n###  \"course_teach\" \"Teachers\"\n### WHERE\n###  \"Teachers\".\""}
{"question": "List the names of teachers who have not been arranged to teach courses.", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the names of teachers who have not been arranged to teach courses.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the names of teachers who have not been arranged to teach courses.. \nSELECT  SELECT  SELECT\n`teacher`.`Name`,\nCOUNT(DISTINCT `course_arrange`.`Course_ID`) AS `Not_Arrange`\nFROM `teacher` \nLEFT JOIN `course_teach` ON `teacher`.`ID` = `course_teach`.`Teacher_ID`\nLEFT JOIN `course_arrange` ON `course_teach`.`Course_ID` = `course_arrange`.`Course_ID`\nGROUP BY `teacher`.`Name`\nORDER BY `teacher`.`Name`\n\n### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the names of courses taught by teachers who have not been arranged to teach courses.. \nSELECT  SELECT  SELECT\n`course`.`Name`,\nCOUNT(DISTINCT `teacher`.`Name`) AS `Not_Arrange`\nFROM `course` "}
{"question": "What are the names of the teachers whose courses have not been arranged?", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers whose courses have not been arranged?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers whose courses have not been arranged?. \nSELECT  SELECT  SELECT\nteacher_id, name, age, hometown\nFROM teacher\nWHERE grade NOT IN (SELECT grade FROM course_arrange);\n\n\n# Solution:\nSELECT teacher_id, name, age, hometown\nFROM teacher\nWHERE grade NOT IN (SELECT grade FROM course_arrange);\n\n# Output:\n# teacher_id     name               age     hometown\n# ------------ ---------------- ---------- ---------------\n# 276           John            25        Singapore\n# 280           Mary           24        Singapore\n# 281           Jonathan       23        Singapore\n# 282           June           23        Singapore\n# 283           Edna           22        Singapore\n# 284           Lily           21        Singapore\n# 285           Lucy           20        Singapore\n# 286           Adam           19        Singapore\n# 287           Sebastian     18        Singapore\n# 288           Anita          18        Singapore\n# 289           Joseph        17        Singapore\n# 290           Anton          1"}
{"question": "How many visitors below age 30 are there?", "sql": "SELECT count(*) FROM visitor WHERE age  <  30", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nHow many visitors below age 30 are there?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nHow many visitors below age 30 are there?. \n}
{"question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.. \nSELECT  SELECT * FROM sqlite_master\nUNION ALL \nSELECT * FROM sqlite_temp_master;\n\"\"\"\n\n\nprint \"*** Example 2: Print the names of the visitors whose membership level is higher than 4 ***\"\n\nwith sqlite3.connect(dbname) as con:\n    cur = con.cursor()\n    cur.execute(\"SELECT  SELECT * FROM sqlite_master UNION ALL SELECT * FROM sqlite_temp_master\")\n    results = cur.fetchall()\n    for row in results:\n        print(row[0], row[1])\n\n\nprint \"*** Example 3: Print the names of the visitors whose membership level is higher than 4 ***\"\n\nwith sqlite3.connect(dbname) as con:\n    cur = con.cursor()\n    cur.execute(\"\"\"SELECT \nSELECT * FROM sqlite_master\nUNION ALL\nSELECT * FROM sqlite_temp_master\"\"\")\n    results = cur.fetchall()\n    for row in results:\n        print(row[0], row[1])\n\n\n#\n# Example 4: Print the names of the visitors whose membership level is higher than 4\n"}
{"question": "What is the average age of the visitors whose membership level is not higher than 4?", "sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the average age of the visitors whose membership level is not higher than 4?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the average age of the visitors whose membership level is not higher than 4?. \nSELECT  SELECT  SELECT \nSELECT  AVG(visitor.age) \nFROM     visitor \nWHERE    visitor.level <= 4 \nGROUP BY \n\n\n#http://www.cs.ualberta.ca/~ssmith/cs394/Course_Notes/Lecture_24_s.pdf\n#the sql subquery and the group by and having clause are equivalent\n\n#should return a single value\nSELECT  visit.Museum_ID,\n        AVG(visit.Num_of_Ticket)\nFROM     visit\nJOIN     visitor ON \n    visitor.ID = visit.visitor_ID\nWHERE    visit.Museum_ID\nGROUP BY \n        visit.Museum_ID, \n        visitor.level\nHAVING    visit.Museum_ID = 1\n        AND (visitor.level <= 4)\n\n\n#http://www.cs.ualberta.ca/~ssmith/cs394/Course_Notes/Lecture_25_s.pdf\n#it would also be correct to have the group by before the having clause\n"}
{"question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.. \nSELECT  SELECT DISTINCT m.Name, m.Level_of_membership, v.Age\nFROM visitor v\nJOIN museum m ON m.ID = v.Museum_ID\nWHERE m.Level_of_membership > 4\nORDER BY v.Age DESC\n\n# What is the highest level membership? \nSELECT MAX(m.Level_of_membership)\nFROM museum m\nGROUP BY m.ID\n\n# How many visitors have Level_of_membership level 6 or 7?\nSELECT COUNT(m.ID)\nFROM visitor v\nJOIN museum m ON m.ID = v.Museum_ID\nWHERE m.Level_of_membership = 6 OR m.Level_of_membership = 7\n\n#How many visitors have the same level of membership?\nSELECT COUNT(DISTINCT m.ID)\nFROM visitor v\nJOIN museum m ON m.ID = v.Museum_ID\nWHERE m.Level_of_membership = 6\n\n# What is the average age of visitors?\nSELECT AVG(v.Age)\nFROM visitor v\nJ"}
{"question": "Find the id and name of the museum that has the most staff members?", "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the id and name of the museum that has the most staff members?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the id and name of the museum that has the most staff members?. \nSELECT  SELECT  SELECT \nSELECT \nMuseum_ID,\nCOUNT(Level_of_membership) AS num_of_staff\nFROM \n\tvisit \n\tLEFT JOIN \n\tvisitor \n\tON \n\tvisitor.id=visit.visitor_ID \nGROUP BY \n\tMuseum_ID;\n#\n#ORDER BY num_of_staff desc\n#\n#Let's first see if we can answer the question without looking at the whole dataset:\n#\n#SELECT Museum_ID, num_of_staff FROM \n#\tSELECT Museum_ID, COUNT(Level_of_membership) AS num_of_staff\n#\tFROM \n#\t\tvisit \n#\t\tLEFT JOIN \n#\t\tvisitor \n#\t\tON \n#\t\tvisitor.id=visit.visitor_ID \n#\tGROUP BY \n#\t\tMuseum_ID;\n#\n#It is nice that we can do this kind of projection. \n#The query above returns a set of rows that have only the column names 'Museum_"}
{"question": "Find the average number of staff working for the museums that were open before 2009.", "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the average number of staff working for the museums that were open before 2009.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the average number of staff working for the museums that were open before 2009.. \nSELECT  SELECT COUNT(*)\nFROM     museums \nWHERE     museums.Open_Year < 2009;\nFind the average number of staff working for the museums that were open in 2009.. \nSELECT  SELECT COUNT(*)\nFROM     museums \nWHERE     museums.Open_Year = 2009;\n\nSelect the average of the age of the visitor. \nSELECT  SELECT AVG(Visitor.Age)\nFROM     visitor;\nFind the average number of ticket purchased by each visitor.. \nSELECT  SELECT AVG(visit.Num_of_Ticket)\nFROM     visit;\nFind the total amount spent by each visitor.. \nSELECT  SELECT AVG(visit.Total_spent)\nFROM     visit;"}
{"question": "What are the opening year and staff number of the museum named Plaza Museum?", "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the opening year and staff number of the museum named Plaza Museum?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the opening year and staff number of the museum named Plaza Museum?. \nSELECT  SELECT  SELECT  SELECT \n    museum_visit.museum_id, \n    visitor_id, \n    num_of_ticket,\n    total_spent\nFROM visitor, museum_visit \nWHERE visitor_id = 1 \n  AND museum_visit.museum_id = 1 \n  AND visits.visitor_id = visitor_id;\nSELECT  SELECT  SELECT  SELECT \n    museum_id, \n    num_of_staff, \n    opening_year\nFROM museum \nWHERE museum_id = 1;\nSELECT  SELECT  SELECT  SELECT \n    museum_id, \n    num_of_staff, \n    opening_year\nFROM museum \nWHERE museum_id = 1;\n"}
{"question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nfind the names of museums which have more staff than the minimum staff number of all museums opened after 2010.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nfind the names of museums which have more staff than the minimum staff number of all museums opened after 2010.. \nSELECT  SELECT name FROM museum WHERE NUM_OF_STAFF >= 3 and OPEN_YEAR >= '2010'\n\n# find the names of museums which have more visitors than the average number of visitors in all museums\nSELECT  SELECT name FROM museum WHERE AVERAGE_VISITORS >= 15 and OPEN_YEAR >= '2010'\n\n# find the names of museums which have more visitors than the average number of visitors in all museums and more than the minimum number of staff\nSELECT  SELECT name FROM museum WHERE AVERAGE_VISITORS >= 15 and NUM_OF_STAFF >= 3 and OPEN_YEAR >= '2010'\n\n# find the names of museums which have more visitors than the average number of visitors in all museums and more than the minimum number of staff and are opened after 2010\nSELECT  SELECT name FROM museum WHERE AVERAGE_VISITORS >= 15 and NUM_OF_STAFF >= 3 and OPEN_YEAR >= '2010'\n\n# find the names of museums which have more visitors than the average number"}
{"question": "find the id, name and age for visitors who visited some museums more than once.", "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nfind the id, name and age for visitors who visited some museums more than once.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nfind the id, name and age for visitors who visited some museums more than once.. \nSELECT  SELECT FROM visitor WHERE id=2 AND name='Nick' AND num_of_membership='6' AND age='20'\n\n### Write SQL to delete some rows from a table:\n### delete from visitor where id=2\n\n### Write SQL to update some rows in a table:\n#update visitor set age='21' where id=2\n\n### Write SQL to add some rows in a table:\nINSERT INTO visitor(id,name,num_of_membership,age) VALUES ('3','Alice',6,21)\n\n### Write SQL to add some rows in a table:\n### with this code we can add a new table that has visitors information.\n### INSERT INTO visitor(id,name,num_of_membership,age) VALUES ('4','Sarah',1,30)\n### INSERT INTO visitor(id,name,num_of_membership,age) VALUES ('5','John',1,30)\n### INSERT INTO visitor(id,name,num_of_membership,age) VALUES ('6','Alice',2,21)"}
{"question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?. \nSELECT  SELECT DISTINCT visitors.id, name, museums.total_spent\nFROM      visitors\nINNER JOIN museums ON visitors.museum_id = museums.id\nGROUP BY  GROUP BY visitors.id\nHAVING    HAVING visitors.total_spent > 10\n\n-- Output:\n-- ID  Name  Level_of_membership   Total_spent\n#1    Name   Level_1                 15.5\n#2    Name   Level_2                 27.5\n#3    Name   Level_3                 45.5\n\n\n#How many visitors paid the highest price for a ticket?\nSELECT  SELECT DISTINCT museums.num_of_ticket, visitors.name\nFROM      visitors\nINNER JOIN museums ON visitors.museum_id = museums.id\nGROUP BY  GROUP BY museums.num_of_ticket\nHAVING    HAVING visitors.name = 'Name'\n\n-- Output:\n#Museum_ID   Num_of_Ticket  Name\n#1            15             Name\n#2            18             Name\n#"}
{"question": "What are the id and name of the museum visited most times?", "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the id and name of the museum visited most times?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the id and name of the museum visited most times?. \nSELECT  SELECT  SELECT\nMIN(ID) AS ID,\nMAX(Name) AS Name,\nMAX(Num_of_Staff) AS Num_of_Staff,\nMIN(Open_Year) AS Open_Year\nFROM museum_visit\nGROUP BY museum_visit.Museum_ID\nORDER BY Open_Year ASC\nThe answer is:\n03, Great Adventure, 3, 1973\nThe most visited museum is Great Adventure. \nFinding the Longest Name in the database.\nSELECT  SELECT  SELECT\nMIN(Name) AS Name,\nMAX(Name) AS Name,\nMAX(Name) AS Name\nFROM museum_visit\nGROUP BY museum_visit.Museum_ID\nORDER BY Name ASC\nThe answer is:\nGreat Adventure, Great Adventure, Great Adventure\nHow many visitors have visited the same museum?\nSELECT  SELECT  SELECT\nMIN(visitor_ID) AS visitor_ID,\nMAX(visitor_ID) AS visitor_ID,\nMAX(visitor_ID) AS visitor_ID\nFROM museum_visit\nGROUP BY museum_visit.Museum_"}
{"question": "What is the name of the museum that had no visitor yet?", "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the name of the museum that had no visitor yet?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the name of the museum that had no visitor yet?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nMuseum_ID,\nMuseum_name,\nNum_of_Staff,\nNum_of_Visitors,\nOpen_year,\nVisitor_ID,\nNum_of_Ticket,\nTotal_spent\nFROM   tbl_Museum_visit\nWHERE  (Num_of_Visitors = 0)\nORDER BY Museum_ID\nWhat is the name of the museum which has the most visitors?\nSELECT  Museum_Name,\nNum_of_Visitors,\nFROM   tbl_Museum_visit\nGROUP BY Museum_Name\nORDER BY Num_of_Visitors DESC\nWhat is the name of the museum which has the most number of ticket sales?\nSELECT  Museum_Name,\nNum_of_Ticket,\nFROM   tbl_Museum_visit\nGROUP BY Museum_Name\nORDER BY Num_of_Ticket DESC\nHow many tickets have been sold?\nSELECT  Count(Num_of_Ticket),\nFROM   tbl_Museum_visit\nGROUP BY Museum_Name\nORDER BY Count(Num_of_Ticket) DESC\nWhat"}
{"question": "Find the name and age of the visitor who bought the most tickets at once.", "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the name and age of the visitor who bought the most tickets at once.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the name and age of the visitor who bought the most tickets at once.. \nSELECT  SELECT  SELECT\nMuseum_ID,  Name,    Level_of_membership,    Age,\nFROM      museum, visitor, visit\nWHERE     museum.Museum_ID=visitor.Museum_ID\nAND      visit.Num_of_Ticket=\n    (SELECT MAX(Num_of_Ticket)\n    FROM    museum, visitor, visit\n    WHERE   museum.Museum_ID=visitor.Museum_ID\n    AND     visit.Num_of_Ticket=visitor.Num_of_Ticket\n    GROUP BY museum.Museum_ID, visitor.Name, visitor.Level_of_membership, visitor.Age)\nAND      visitor.Name='Tom'\nGROUP BY museum.Museum_ID, visitor.Name, visitor.Level_of_membership, visitor.Age\n#NOTE: ORDER BY visitor.Name is important.\n\n#select the museum_id and the sum of the total_spent at that museum_id\n#from the visit table group by the museum_id\nSELECT  SELECT  SELECT  SELECT  SELECT\nMuseum_ID, SUM(Visit.Total"}
{"question": "What are the average and maximum number of tickets bought in all visits?", "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the average and maximum number of tickets bought in all visits?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the average and maximum number of tickets bought in all visits?. \nSELECT  SELECT avg(ticket_number) FROM visit group by visit;\n\n#What is the average visit duration?\nSELECT  SELECT avg(visit_duration) FROM visit group by visit;\n\n#What is the maximum visit duration?\nSELECT  SELECT max(visit_duration) FROM visit group by visit;\n\n\nWhat is the average visit duration in different categories? \nSELECT  SELECT avg(visit_duration) FROM visit WHERE category='Educational' group by visit;\n\nWhat is the percentage of visits that lasts 10 minutes or less?\nSELECT  SELECT avg(visit_duration) FROM visit WHERE category='Educational' group by visit HAVING visit_duration <= 10;\n\nWhat is the percentage of visits that lasts 1 hour or more?\nSELECT  SELECT avg(visit_duration) FROM visit WHERE category='Educational' group by visit HAVING visit_duration >= 1;\n\nHow many visits per year?\nSELECT  SELECT count(*) FROM visit WHERE year = '2015';\n\nWhat is the total number of visits in 2"}
{"question": "What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the total ticket expense of the visitors whose membership level is 1?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the total ticket expense of the visitors whose membership level is 1?. \nSELECT  SELECT  SELECT  SELECT\nMuseum_ID,\nvisitor_ID,\nNum_of_Ticket,\nTotal_spent\nFROM    museum_visit\nWHERE   Level_of_membership = 1\nORDER BY 1, 2;\nAnswer: 2, 1, 5, 11, 15, 20, 22, 25, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 1"}
{"question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?. \nSELECT  SELECT \nMuseum_ID,\nMIN(visitor_ID) as Min_visitor_ID, \nMAX(visitor_ID) as Max_visitor_ID\nFROM  museum_visit\nWHERE  museum_ID = 135 AND visitor_year > 2011\nGROUP BY  museum_ID\n\n# What is the name of the visitor who visited a museum that is opened before 2009, but was not visited a museum opened after 2011?. \nSELECT  SELECT \nMuseum_ID,\nMIN(visitor_ID) as Min_visitor_ID, \nMAX(visitor_ID) as Max_visitor_ID\nFROM  museum_visit\nWHERE  museum_ID = 135 AND visitor_year < 2011\nGROUP BY  museum_ID\n\n\n\n\n\n\n"}
{"question": "Find the number of visitors who did not visit any museum opened after 2010.", "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the number of visitors who did not visit any museum opened after 2010.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the number of visitors who did not visit any museum opened after 2010.. \nSELECT  SELECT  SELECT \nSUM(COUNT(ID)) AS 'Number_of_visitors', \nMIN(Visit.Open_Year) AS 'Open_Year' \nFROM  Visitor \nWHERE  Visitor.Name NOT IN (SELECT Museum.Name FROM Museum\nWHERE Museum.Open_Year <= 2010) \nGROUP BY Visitor.Name;\n### \n\n\n\n#REFLECT\n#\n# Your code has two major parts:\n# - the visitor database\n# - the museum_visit database\n#\n# In terms of design, there are a number of things you could do to improve your code. For example, you could:\n# - make better use of indexing\n# - consider using a graphical database-design tool to make it easier to see the relationships between the tables and the constraints in the database\n# - consider using a language such as Python for the calculations\n# - consider using the new \"with\" statement to make sure the database is closed when you are finished\n\n#\n#\n#\n\n\n# REFLECT\n#\n# Your code has two major parts:\n# - the visitor database\n# - the museum"}
{"question": "How many museums were opened after 2013 or before 2008?", "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nHow many museums were opened after 2013 or before 2008?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nHow many museums were opened after 2013 or before 2008?. \nSELECT  SELECT  SELECT  SELECT \nCOUNT(museum_id) AS m1\nFROM museums\nGROUP BY year(open_date)\nORDER BY m1 desc\nCOUNT(visitor_id) AS v1\nFROM visits\nGROUP BY year(visit_date)\nORDER BY v1 desc\nCOUNT(museum_id) AS m2\nFROM visits\nGROUP BY year(visit_date)\nORDER BY m2 desc\nCOUNT(museum_id) AS m3\nFROM visits\nGROUP BY year(visit_date)\nORDER BY m3 desc\nCOUNT(museum_id) AS m4\nFROM visits\nGROUP BY year(visit_date)\nORDER BY m4 desc\n\n\nHow many museums were opened after 2008 or before 2013?. \nSELECT  SELECT  SELECT  SELECT \nCOUNT(museum_id) AS m1\nFROM museums\nGROUP BY year(open_date)\nORDER BY m1 asc\nCOUNT(visitor_id) AS v1\nFROM visits\nGROUP BY year(visit_date)\nORDER BY v1 asc\nCOUNT(museum_id) AS"}
{"question": "Find the total number of players.", "sql": "SELECT count(*) FROM players", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of players.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of players.. \nSELECT  SELECT 1 AS player_id, 'Jordan' AS first_name, 'Simmons' AS last_name, '100' AS hand, '02-04-1987' AS birth_date, 'AUS' AS country_code FROM wta_1 \nSELECT  SELECT 2 AS player_id, 'Clijsters' AS first_name, 'Siegemans' AS last_name, '07-15-1978' AS birth_date, 'BEL' AS country_code FROM wta_1 \nSELECT  SELECT 3 AS player_id, 'Davenport' AS first_name, 'Graf' AS last_name, '11-05-1976' AS birth_date, 'USA' AS country_code FROM wta_1 \nSELECT  SELECT 4 AS player_id, 'Hingis' AS first_name, 'Kournikova' AS last_name, '09-25-1980' AS birth_date, 'SUI' AS country_code FROM wta_1 \nSELECT  SELECT"}
{"question": "How many players are there?", "sql": "SELECT count(*) FROM players", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are there?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are there?. \nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table';\n\\n\nSELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name IN ('players','matches','rankings');\n\nPlayers.. \nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='players';\n188\n\nWTA Tourneys..\nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='tourney';\n38266\n\nPlayers.. \nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='player';\n7162\n\nRound.. \nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='round';\n1328\n\nWTA tourney.. \nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='tourney';\n38266\n\nPlayers.. \nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='player';\n7162\n\nRound.. \nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table'"}
{"question": "Find the total number of matches.", "sql": "SELECT count(*) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of matches.. \nSELECT  SELECT count(*) as 'total_matches'\nFROM    sqlite_master\nWHERE   type='table'\nAND     name IN ('matches','players','rankings');\n\n#this will return a list of player IDs, one per line:\nSELECT  player_id\nFROM    sqlite_master\nWHERE   type='table'\nAND     name IN ('matches','players','rankings');\n\n#this will return a list of players, one per line:\nSELECT  first_name, last_name\nFROM    sqlite_master\nWHERE   type='table'\nAND     name IN ('matches','players','rankings');\n\n#this will return a list of players, one per line:\nSELECT  first_name, last_name\nFROM    sqlite_master\nWHERE   type='table'\nAND     name IN ('matches','players');\n\n#this will return a list of players, one per line:\nSELECT  first_name, last_name\nFROM    sqlite_master\nWHERE   type='table'\nAND     name IN ('matches');\n\n#this will return a list of matches, one per line:\nSELECT  draw_size, match_num"}
{"question": "Count the number of matches.", "sql": "SELECT count(*) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nCount the number of matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nCount the number of matches.. \nSELECT  SELECT count(*) FROM  matches;\n\n#names('player_id', 'first_name', 'last_name', 'hand')\nCOUNT THE NUMBER OF MATCHES IN PLAYERS TABLE \n\n#get a list of all players\n}
{"question": "List the first name and birth date of all players from the country with code USA.", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first name and birth date of all players from the country with code USA.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first name and birth date of all players from the country with code USA.. \nSELECT  SELECT  SELECT\nPLAYERS('player_id', 'first_name', 'birth_date', 'country_code')\nFROM  PLAYERS\nWHERE  country_code = 'USA';\nList the winners of the 1995 Men's Singles Tournament. \nSELECT  SELECT  SELECT  SELECT  SELECT\nWINNERS('tourney_id', 'year', 'winner_rank', 'winner_id', 'winner_name', 'winner_rank_points', 'tournament_name')\nFROM  WINNERS\nWHERE  tournament_id = '95';\nList all the players who have won a tournament at least once in the last 10 years, sorted by the year of their first win. \nSELECT  SELECT  SELECT  SELECT  SELECT\nPLAYERS('player_id', 'first_name', 'last_name', 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank"}
{"question": "What are the first names and birth dates of players from the USA?", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names and birth dates of players from the USA?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names and birth dates of players from the USA?. \nSELECT  SELECT  SELECT\nlast_name,\nbirth_date\nFROM   players\nWHERE  country_code = 'USA'\nORDER BY\nbirth_date DESC\nLIMIT 10\n\nSELECT  SELECT  SELECT\nfirst_name,\nbirth_date\nFROM   players\nWHERE  country_code = 'USA'\nORDER BY\nbirth_date DESC\nLIMIT 10\n\nSELECT  SELECT  SELECT\nplayer_id,\nfirst_name,\nlast_name,\nhand,\nbirth_date,\ncountry_code\nFROM   players\nWHERE  country_code = 'USA'\nORDER BY\nbirth_date DESC\nLIMIT 10\n\nSELECT  SELECT  SELECT\nbest_of,\ndraw_size,\nloser_age,\nloser_entry,\nloser_hand,\nloser_ht,\nloser_id,\nloser_ioc,\nloser_name,\nloser_rank,\nloser_rank_points,\nloser_seed,\nmatch_num,\nminutes,\nround,\nscore,\nsurface,\ntourney_date"}
{"question": "Find the average age of losers and winners of all matches.", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average age of losers and winners of all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average age of losers and winners of all matches.. \nSELECT  SELECT_ALL(winner_id, winners)\nSELECT  SELECT_ALL(loser_id, losers)\nSELECT  SELECT_ALL(tournament_level, tourneys)\nSELECT  SELECT_ALL(year, years)\n\n#SELECT  SELECT_ALL(winner_id, winners, tournament_level, years)\n#SELECT  SELECT_ALL(loser_id, losers, tournament_level, years)\nSELECT  SELECT_ALL(winner_id, winners, years, average_winner_age = AVERAGE(winner_age))\nSELECT  SELECT_ALL(loser_id, losers, years, average_loser_age = AVERAGE(loser_age))\n\n"}
{"question": "What are the average ages of losers and winners across matches?", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the average ages of losers and winners across matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the average ages of losers and winners across matches?. \n}
{"question": "Find the average rank of winners in all matches.", "sql": "SELECT avg(winner_rank) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average rank of winners in all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average rank of winners in all matches.. \nSELECT  SELECT avg(winner_rank)\nFROM     matches\nGROUP BY  tourney_date;\nSELECT avg(winner_rank) FROM matches;\n\n#select player_id, min(birth_date), max(birth_date)\n#from players\n\nSELECT  SELECT avg(rank)\nFROM     rankings\nGROUP BY  tourney_date;\nSELECT avg(rank) FROM rankings;\n\n#select year, min(birth_date), max(birth_date)\n#from players\n\n# select match_num, min(birth_date), max(birth_date)\n# from matches\n\n# select year, min(birth_date), max(birth_date)\n# from players\n\n# select tourney_date, min(birth_date), max(birth_date)\n# from matches\n\n# select year, min(birth_date), max(birth_date)\n# from players\n\n# select tourney_date, min(birth_date), max(birth_date)\n# from matches\n\n# select year, min(b"}
{"question": "What is the average rank for winners in all matches?", "sql": "SELECT avg(winner_rank) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the average rank for winners in all matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the average rank for winners in all matches?. \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT "}
{"question": "Find the highest rank of losers in all matches.", "sql": "SELECT min(loser_rank) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the highest rank of losers in all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the highest rank of losers in all matches.. \nSELECT  SELECT \n    t.tourney_date, \n    t.tourney_name, \n    t.tourney_id, \n    t.tourney_level, \n    t.player_id, \n    t.player_name, \n    t.player_rank, \n    t.player_rank_points, \n    t.tourney_level,\n    t.surface,\n    t.tourney_date,\n    t.tourney_id,\n    t.tourney_level,\n    t.surface,\n    t.tourney_id,\n    t.tourney_level,\n    t.surface,\n    t.tourney_id,\n    t.tourney_level,\n    t.surface,\n    t.tourney_id,\n    t.tourney_level,\n    t.surface,\n    t.tourney_id,\n    t.tourney_level,\n    t.surface,\n    t.tourney_id,\n"}
{"question": "What is the best rank of losers across all matches?", "sql": "SELECT min(loser_rank) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the best rank of losers across all matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the best rank of losers across all matches?. \n}
{"question": "find the number of distinct country codes of all players.", "sql": "SELECT count(DISTINCT country_code) FROM players", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the number of distinct country codes of all players.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the number of distinct country codes of all players.. \nSELECT  SELECT COUNT(DISTINCT(player_id)) FROM sqlite_sequence WHERE name = \"wta_1\"\nSELECT  SELECT COUNT(DISTINCT(player_id)) FROM sqlite_sequence WHERE name = \"rankings\"\n#get the number of players with a particular country code\nSELECT  SELECT COUNT(DISTINCT(player_id)) FROM sqlite_sequence WHERE name = \"players\" AND \"country_code\" = \"US\"\nSELECT  SELECT COUNT(DISTINCT(player_id)) FROM sqlite_sequence WHERE name = \"matches\" AND \"player_id\" = 1087\n#get the number of players for a particular country code \nSELECT  SELECT COUNT(DISTINCT(player_id)) FROM sqlite_sequence WHERE name = \"players\" AND \"country_code\" = \"ITA\"\n#get the number of wins for a particular country code \nSELECT  SELECT COUNT(DISTINCT(winner_id)) FROM sqlite_sequence WHERE name = \"matches\" AND \"player_id\" = 1087\n#get the number of wins for a particular country code \nSELECT  SELECT COUNT(DISTINCT(loser_"}
{"question": "How many distinct countries do players come from?", "sql": "SELECT count(DISTINCT country_code) FROM players", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many distinct countries do players come from?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many distinct countries do players come from?. \n}
{"question": "Find the number of distinct name of losers.", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of distinct name of losers.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of distinct name of losers.. \nSELECT  SELECT DISTINCT \"loser_name\" FROM \"wta_1\" WHERE \"loser_id\" != \"0\"\nfind the number of distinct number of losers per draw size..\nSELECT  SELECT DISTINCT \"loser_id\" FROM \"wta_1\" WHERE \"loser_id\" != \"0\"\nfind the number of distinct number of losers per round..\nSELECT  SELECT DISTINCT \"loser_id\" FROM \"wta_1\" WHERE \"loser_id\" != \"0\"\nfind the number of distinct number of losers per seed..\nSELECT  SELECT DISTINCT \"loser_id\" FROM \"wta_1\" WHERE \"loser_id\" != \"0\"\nfind the number of distinct number of losers per player..\nSELECT  SELECT DISTINCT \"loser_id\" FROM \"wta_1\" WHERE \"loser_id\" != \"0\"\nfind the number of distinct number of losers per tournament..\nSELECT  SELECT DISTINCT \"loser_id\" FROM \"wta_1\" WHERE \"loser_id\" != \"0\"\nfind the number of distinct number of"}
{"question": "How many different loser names are there?", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many different loser names are there?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many different loser names are there?. \n}
{"question": "Find the name of tourney that has more than 10 matches.", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name of tourney that has more than 10 matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name of tourney that has more than 10 matches.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What are the names of tournaments that have more than 10 matches?", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of tournaments that have more than 10 matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of tournaments that have more than 10 matches?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "List the names of all winners who played in both 2013 and 2016.", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the names of all winners who played in both 2013 and 2016.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the names of all winners who played in both 2013 and 2016.. \n}
{"question": "What are the names of players who won in both 2013 and 2016?", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of players who won in both 2013 and 2016?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of players who won in both 2013 and 2016?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "List the number of all matches who played in years of 2013 or 2016.", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the number of all matches who played in years of 2013 or 2016.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the number of all matches who played in years of 2013 or 2016.. \nSELECT  SELECT \n    '2013' as 'year',\n    COUNT(*) as 'matches_in_year_2013'\nFROM\n    WTA_1.matches\nWHERE\n    '2013' as 'year'\nGROUP BY \n    '2013' as 'year'\nHAVING \n    COUNT(*) >= 1\nORDER BY \n    '2013' as 'year'\n\nList the number of all matches who played in years of 2014 or 2015.. \nSELECT  SELECT \n    '2014' as 'year',\n    COUNT(*) as 'matches_in_year_2014'\nFROM\n    WTA_1.matches\nWHERE\n    '2014' as 'year'\nGROUP BY \n    '2014' as 'year'\nHAVING \n    COUNT(*) >= 1\nORDER BY \n    '2014' as 'year'\n\nList the number of all matches who played in years of 2016.. \nSELECT  SELECT \n    '20"}
{"question": "How many matches were played in 2013 or 2016?", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many matches were played in 2013 or 2016?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many matches were played in 2013 or 2016?. \n}
{"question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?. \nSELECT  SELECT player_id, first_name, last_name, hand, birth_date, country_code\nfrom 1005799_wta_1\nwhere wta_1.tourney_id = '483150'\nand wta_1.tourney_level = 'A'\nand player_id in (select distinct player_id from 1005799_wta_1 where tourney_id = '483150' and tourney_level = 'A')\norder by hand desc;\n\nPlayer_Id, First_Name, Last_Name, Hand, Birth_Date, Country_Code\n111822, Victoria, Aranz\u00e1bal, 12.0, 1986-09-19, RUS\n111822, Victoria, Aranz\u00e1bal, 12.0, 1986-09-19, RUS\n111822, Victoria, Aranz\u00e1bal, 12.0, 1986-09-19, R"}
{"question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names and country codes for players who won both the WTA Championships and the Australian Open?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names and country codes for players who won both the WTA Championships and the Australian Open?. \nSELECT  SELECT wta_1.first_name, wta_1.country_code\nFROM wta_1, player\nWHERE wta_1.player_id = player.player_id\nAND wta_1.match_num = '01'\nAND wta_1.match_num = '03'\nAND wta_1.match_num = '05'\nAND wta_1.match_num = '07'\nAND wta_1.match_num = '09'\nAND wta_1.match_num = '11'\nAND wta_1.match_num = '13'\nAND wta_1.match_num = '15'\nAND wta_1.match_num = '17'\nAND wta_1.match_num = '19'\nAND wta_1.match_num = '21'\nAND wta_1.match_num = '23'\nAND wta_1.match_num = '25'\nAND wta_1.match_num = '27'\nAND wta_"}
{"question": "Find the first name and country code of the oldest player.", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name and country code of the oldest player.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name and country code of the oldest player.. \n}
{"question": "What is the first name and country code of the oldest player?", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name and country code of the oldest player?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name and country code of the oldest player?. \nSELECT  SELECT  SELECT \nfirst_name, country_code, 'Players' AS table\nFROM wta_1\nWHERE player_id = (\n    SELECT  player_id\n    FROM wta_1\n    WHERE player_id = (\n        SELECT  player_id\n        FROM wta_1\n        WHERE player_id = (\n            SELECT  player_id\n            FROM wta_1\n            WHERE player_id = (\n                SELECT  player_id\n                FROM wta_1\n                WHERE player_id = (\n                    SELECT  player_id\n                    FROM wta_1\n                    WHERE player_id = (\n                        SELECT  player_id\n                        FROM wta_1\n                        WHERE player_id = (\n                            SELECT  player_id\n                            FROM wta_1\n                            WHERE player_id = (\n                                SELECT  player_id\n                                FROM wta_1\n                                WHERE player_id = (\n                                    SELECT  player_id\n                                    FROM wta_1\n                                    WHERE player_id = (\n                                        SELECT  player_id"}
{"question": "List the first and last name of all players in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first and last name of all players in the order of birth date.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first and last name of all players in the order of birth date.. \nSELECT  SELECT 'players'::text as table_schema, 'player_id', 'first_name', 'last_name'::text as columns, 'hand', 'birth_date', 'country_code'::text as values\nFROM (SELECT 'wta_1'::text as table_schema, 'first_name', 'last_name', 'hand', 'birth_date', 'country_code' FROM players) as table1\nORDER BY 'birth_date' DESC;\nList the matches of a player and their properties.. \nSELECT  SELECT 'matches'::text as table_schema, 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner"}
{"question": "What are the full names of all players, sorted by birth date?", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the full names of all players, sorted by birth date?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the full names of all players, sorted by birth date?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "List the first and last name of all players who are left / L hand in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first and last name of all players who are left / L hand in the order of birth date.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first and last name of all players who are left / L hand in the order of birth date.. \nSELECT  SELECT player_id,first_name,last_name,\n        hand,birth_date,country_code\n        FROM wta_1\n        WHERE player_id<10000\n        ORDER BY birth_date DESC;\n\n#SELECT  SELECT best_of,draw_size,loser_age,loser_entry,\n#    loser_hand,loser_ht,loser_id,loser_ioc,\n#    loser_name,loser_rank,loser_rank_points,loser_seed,\n#    match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,\n#    winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n#    FROM wta_1\n#    WHERE best_of = 2\n#    ORDER BY winner_rank_points DESC;\n\n#SELECT"}
{"question": "What are the full names of all left handed players, in order of birth date?", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the full names of all left handed players, in order of birth date?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the full names of all left handed players, in order of birth date?. \nSELECT  SELECT  SELECT \n\nSELECT \n\n\nSELECT \nSELECT \n\n\nSELECT \n\n\nSELECT \nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\nSELECT \n\n\n"}
{"question": "Find the first name and country code of the player who did the most number of tours.", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name and country code of the player who did the most number of tours.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name and country code of the player who did the most number of tours.. \nSELECT  SELECT  SELECT \n        a.tourney_id, \n        a.surface, \n        a.tourney_name, \n        a.tourney_level, \n        a.year, \n        a.tourney_date, \n        a.tourney_id, \n        a.tourney_level, \n        a.tourney_name, \n        a.tourney_date, \n        a.tourney_id, \n        a.tourney_level, \n        a.tourney_name, \n        a.tourney_id, \n        a.tourney_level, \n        a.tourney_name, \n        a.tourney_id, \n        a.tourney_level, \n        a.tourney_name, \n        a.tourney_id, \n        a.tourney_level, \n        a.tourney_name, \n        a.tourney_id, \n        a.tourney"}
{"question": "What is the first name and country code of the player with the most tours?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name and country code of the player with the most tours?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name and country code of the player with the most tours?. \nSELECT  SELECT * FROM wta_1 WHERE hand_size = 3 AND best_of = 1 ORDER BY round_num DESC; \n 10.57 seconds\nSELECT  SELECT * FROM wta_1 WHERE hand_size = 3 AND best_of = 1 ORDER BY round_num DESC, player_id; \n 1.42 seconds\nSELECT  SELECT * FROM wta_1 WHERE hand_size = 3 AND best_of = 1 ORDER BY player_id; \n 0.38 seconds\nSELECT  SELECT * FROM wta_1 WHERE hand_size = 3 AND best_of = 1 ORDER BY round_num DESC; \n 1.79 seconds\nSELECT  SELECT * FROM wta_1 WHERE hand_size = 3 AND best_of = 1 ORDER BY round_num DESC, match_id; \n 0.51 seconds\nSELECT  SELECT * FROM wta_1 WHERE hand_size = 3 AND best_of = 1 ORDER BY round_num DESC, match_id, player_id; \n 0.41 seconds\nSELECT  SELECT * FROM wta_1"}
{"question": "Find the year that has the most number of matches.", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the year that has the most number of matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the year that has the most number of matches.. \nSELECT  SELECT  SELECT \nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT \nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT"}
{"question": "Which year had the most matches?", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhich year had the most matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhich year had the most matches?. \n}
{"question": "Find the name and rank points of the winner who won the most times.", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name and rank points of the winner who won the most times.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name and rank points of the winner who won the most times.. \nSELECT  SELECT_WINNERS.name, winners_rank_points.ranking_points\nFROM   SELECT_WINNERS, winners_rank_points\nWHERE  SELECT_WINNERS.name = winners_rank_points.name\nGROUP BY SELECT_WINNERS.name\nHAVING SELECT_WINNERS.name = winners_rank_points.name\nAND   SELECT_WINNERS.name = 'John Smith'\nAND   SELECT_WINNERS.name = 'John Smith'\nORDER BY SELECT_WINNERS.name ASC\n\n#player_id, rank, rating_points, month, year, birth_date, country_code, career_wins, career_losses, career_rank_points, career_total_points\nSELECT  SELECT_PLAYERS.player_id, SELECT_PLAYERS.rank, SELECT_PLAYERS.rating_points, SELECT_PLAYERS.month, SELECT_PLAYERS.year, SELECT_PLAYERS.birth_date, SELECT_PLAYERS.country_code, SELECT_PLAYERS.career_wins"}
{"question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the name of the winner who has won the most matches, and how many rank points does this player have?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the name of the winner who has won the most matches, and how many rank points does this player have?. \nSELECT  SELECT rank.ranking_date, rank.ranking, wt.player_id, rank.ranking_points, wt.tours\nFROM    players wt, matches m, rankings rank\nWHERE   wt.player_id = m.winner_id AND\n         rank.ranking_date = m.tourney_date AND\n         rank.ranking = 1 AND\n         rank.player_id = m.loser_id AND\n         rank.tours = m.tourney_id;\n\n\n\nNow I want to run the same query, but in reverse - for the player who has lost the most matches:\nWhat is the name of the loser who has lost the most matches, and how many rank points does this player have?. \nSELECT  SELECT rank.ranking_date, rank.ranking, wt.player_id, rank.ranking_points, wt.tours\nFROM    players wt, matches m, rankings rank\nWHERE   wt.player_id = m.loser_id AND\n         rank.ranking_date = m.tourney_date AND\n        "}
{"question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name of the winner who has the highest rank points and participated in the Australian Open tourney.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name of the winner who has the highest rank points and participated in the Australian Open tourney.. \nSELECT  SELECT  SELECT  SELECT \nwinner_id, winner_name, winner_rank, winners_hand, ranking_date, ranking\nFROM \nmatch\nINNER JOIN \ntourney ON tourney_id = match_tourney_id\nWHERE \nwinner_id != 261\nAND \nranking_date = '1/1/2006'\nGROUP BY \nwinner_id, winner_name, winner_rank\nORDER BY \nwinner_rank DESC\nLIMIT \n1;\n# <http://www.sqlite.org/lang_select.html>\n\n# Select the name of the player who has the highest ranking points and participated in the Australian Open tourney. \nSELECT  SELECT \nwinner_id, winner_name, ranking_date, ranking\nFROM  match \nINNER JOIN  tourney ON tourney_id = match_tourney_id\nWHERE  winner_id != 261\nAND  ranking_date = '1/1/2006'\nGROUP BY  winner_id, winner_name, ranking_date\nORDER BY "}
{"question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the name of the winner with the most rank points who participated in the Australian Open tournament?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the name of the winner with the most rank points who participated in the Australian Open tournament?. \nSELECT  SELECT \n\n#SELECT\n#  SELECT\n#    SELECT \n#      SELECT\n#        SELECT \n#          SELECT \n#            SELECT \n#              SELECT \n#                SELECT \n#                  SELECT \n#                    SELECT \n#                      SELECT \n#                        SELECT \n#                          SELECT \n#                            SELECT \n#                              SELECT \n#                                SELECT \n#                                  SELECT \n#                                    SELECT \n#                                      SELECT \n#                                        SELECT \n#                                          SELECT \n#                                            SELECT \n#                                              SELECT \n#                                                SELECT \n#                                                  SELECT \n#                                                    SELECT \n#                                                      SELECT \n#                                                        SELECT \n#                                                          SELECT \n#                                                            SELECT \n#                                                              SELECT \n#                                                                SELECT \n#                                                                  SELECT \n#                                                                    SELECT \n#                                                                      SELECT \n#                                                                        SELECT \n#                                                                          SELECT "}
{"question": "find the names of loser and winner who played in the match with greatest number of minutes.", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the names of loser and winner who played in the match with greatest number of minutes.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the names of loser and winner who played in the match with greatest number of minutes.. \nSELECT  SELECT  SELECT\nwinner_id, min(loser_id), min(loser_rank)\n\n\n\n\n\n\n#player_id, first_name, last_name, hand, birth_date, country_code, tournament_id\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ran"}
{"question": "What are the names of the winner and loser who played in the longest match?", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of the winner and loser who played in the longest match?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of the winner and loser who played in the longest match?. \n}
{"question": "Find the average ranking for each player and their first name.", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average ranking for each player and their first name.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average ranking for each player and their first name.. \n}
{"question": "What are the first names of all players, and their average rankings?", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names of all players, and their average rankings?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names of all players, and their average rankings?. \nSELECT  SELECT *\nFROM    players\nORDER BY  last_name, first_name;\n\n### Here's a query to fetch all the information about the players' rankings.\n#SELECT *\n#FROM    rankings;\n\n### As we want to print out all the rankings, we'll use a cursor.\n#CURSOR_SELECT(CURSOR_ID, RANKINGS)\n#BEGIN\n#  SELECT *\n#  FROM    rankings;\n#END CURSOR_SELECT\n\n### As the cursor is always associated with a cursor_id, we'll need one.\n#CURSOR_ID = 0;\n\n### We'll also need a variable to hold the results.\n#RESULTS = [];\n\n### Using the cursor_select cursor, we'll loop through each rankings record.\n### If the rankings record is associated with a player, we'll add it to the results array.\n#FOR RANKINGS_RECORD IN CURSOR_SELECT\n#  IF RANKINGS_RECORD.player_id > "}
{"question": "Find the total ranking points for each player and their first name.", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total ranking points for each player and their first name.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total ranking points for each player and their first name.. \nSELECT  SELECT  SELECT  SELECT \n  SUM(rank) AS rank,\n  FIRST_NAME\nFROM rankings\nWHERE tourney_id = 1\nGROUP BY player_id, first_name\nORDER BY rank DESC\n\n#leaderboards('name', 'leader_id', 'points')\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner"}
{"question": "What are the first names of all players, and their total ranking points?", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names of all players, and their total ranking points?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names of all players, and their total ranking points?. \nSELECT  SELECT * FROM wta_1 ORDER BY first_name,ranking_points DESC;\n[2013/08/08 19:13:42.531] 3000 [DEBUG] SQL: SELECT  SELECT * FROM wta_1 ORDER BY first_name,ranking_points DESC;\n#\n#TODO:\n#\n#SELECT * FROM wta_1 ORDER BY first_name,ranking_points DESC;\n#\n#Rewrite the above query as a single SQL statement. \n#\n#\n#This is a great opportunity to learn about sorting, grouping and aggregation with SQL. \n#\n#\n#Output:\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n"}
{"question": "find the number of players for each country.", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the number of players for each country.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the number of players for each country.. \nSELECT  SELECT(rankings) AS rankings, \"rankings_date\", \"ranking_points\", \"player_id\" \nFROM \"rankings\"\nGROUP BY \"rankings_date\", \"player_id\", \"ranking_points\"\n\nfind the number of matches for each country.. \nSELECT  SELECT(matches) AS matches, \"matches_date\", \"best_of\", \"draw_size\", \"loser_age\", \"loser_entry\", \"loser_hand\", \"loser_ht\", \"loser_id\", \"loser_ioc\", \"loser_name\", \"loser_rank\", \"loser_rank_points\", \"loser_seed\", \"match_num\", \"minutes\", \"round\", \"score\", \"surface\", \"tourney_date\", \"tourney_id\", \"tourney_level\", \"tourney_name\", \"winner_age\", \"winner_entry\", \"winner_hand\", \"winner_ht\", \"winner_id\", \"winner_ioc\", \"winner_name\", \"winner_rank\", \"winner_rank_points\","}
{"question": "How many players are from each country?", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are from each country?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are from each country?. \nSELECT  SELECT country_code, count(id) FROM players GROUP BY country_code\n\nPlease give the number of players from each country to @kib (number of players, not the total number of players):\n\n#SELECT  SELECT country_code, count(id) FROM players GROUP BY country_code\n\nNice!\n\nYou can now get a list of the top players from each country by selecting the top 100 players by the number of games they have played.\n\nSELECT  SELECT country_code, name, country, points, tourney_id, player_id, hand, ioc, birth_date, birth_day, birth_month, birth_year, draw_size, loser_name, loser_id, loser_ioc, loser_name, loser_age, loser_hand, loser_ht, loser_rank, loser_rank_points, loser_seed, match_num, minutes, rank, ranking_date, ranking, ranking_points, ranking_level, ranking_name, year, loser_hand_id, loser_ht_id, loser_rank_id, winner_hand_"}
{"question": "find the code of the country where has the greatest number of players.", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the code of the country where has the greatest number of players.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the code of the country where has the greatest number of players.. \nSELECT  SELECT wta_1.country_code FROM wta_1 WHERE wta_1.tourney_level = 3 ORDER BY COUNT(DISTINCT wta_1.country_code) DESC\n\n\n#can have an arbitrary number of players\n#FROM wta_1 ORDER BY COUNT(DISTINCT player_id) DESC\n#SELECT wta_1.player_id, wta_1.first_name, wta_1.last_name, wta_1.hand, wta_1.birth_date, wta_1.country_code, wta_1.matches('draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age"}
{"question": "What is the code of the country with the most players?", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the code of the country with the most players?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the code of the country with the most players?. \n}
{"question": "Find the codes of countries that have more than 50 players.", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the codes of countries that have more than 50 players.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the codes of countries that have more than 50 players.. \nSELECT  SELECT \n\tplayer_id, country_code\nFROM     players\nGROUP BY country_code\nHAVING  COUNT(country_code) > 50;\nThe top 20 most populous countries are:\nUnited States, China, India, Russia, Indonesia, Brazil, Germany, Turkey, Japan, France, Spain, Argentina, Italy, United Kingdom, South Korea, Canada, Australia, Egypt, Saudi Arabia\n\n### SQLite SQL wta_2 database, with their properties:\n#matches('match_id', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht"}
{"question": "What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the codes of countries with more than 50 players?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the codes of countries with more than 50 players?. \nSELECT  SELECT  SELECT  SELECT\ntable = 'players'\nfield = ['player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code']\nrecord_count = 0\nfilename = 'wta_1.csv'\noutput = 'wta_1.txt'\n### Create a new file, and open it for writing.\nf = open(output, 'w')\n### Output the header.\nf.write(' ')\n### Output the columns.\nf.write(' ')\nf.write(str(record_count))\nf.write(' ')\n### Create a new line for each player.\nwhile record_count < 2834:\n    first_name = table[1][record_count]\n    last_name = table[2][record_count]\n    hand = table[3][record_count]\n    birth_date = table[4][record_count]\n    country_code = table[5][record_count]\n    ### Create a new line, and add the player.\n    f.write(str(record_count)"}
{"question": "Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of tours for each ranking date.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of tours for each ranking date.. \nSELECT  SELECT * FROM sqlite_master\nWHERE type='table';\n\nSELECT * FROM sqlite_master WHERE type='table'\nORDER BY name\nLIMIT 100;\n\nINSERT INTO tours (tour_name)\nSELECT \"Tourname\"\nFROM sqlite_master\nWHERE type='table' AND name LIKE \"Tours-%\";\n\n# CREATE TABLE wta_tour (name text, \"date\" integer, \"time\" integer, \"season\" integer, \"category\" integer, \"country\" text, \"climber\" integer, \"continent\" text, \"wta\" integer, \"year\" integer, \"table\" integer, \"group\" integer, \"rank_name\" text, \"rank_name_short\" text, \"rank_number\" integer, \"rank_year\" integer, \"rank_points\" integer, \"rank_points_max\" integer, \"rank_wins\" integer, \"rank_losses\" integer, \"rank_win_rate\" integer, \"rank_tourn_wins\" integer, \"rank_tourn_losses\" integer, \"rank_tourn_win_rate\" integer, \"rank_t"}
{"question": "How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many total tours were there for each ranking date?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many total tours were there for each ranking date?. \nSELECT  SELECT '0' AS 'tour_num', '0' AS 'points'\nFROM    rankings\nWHERE   ranking_date BETWEEN ? AND ? AND player_id = ?\nGROUP BY ranking_date\nORDER BY ranking_date, player_id\n\n\n#rankings('player_id', 'tour_num', 'tour_ranking')\n\n#matches('player_id', 'match_num')\nSELECT  '0' AS 'match_num'\nFROM    matches\nWHERE   player_id = ?\nORDER BY player_id\n\n#matches('player_id', 'round_num')\nSELECT  '0' AS 'round_num'\nFROM    matches\nWHERE   player_id = ?\nORDER BY player_id\n\n#matches('player_id', 'score')\nSELECT  '0' AS 'score'\nFROM    matches\nWHERE   player_id = ?\nORDER BY player_id\n\n#matches('player_id', 'set_num')\nSELECT  '0' AS 'set_num'\nFROM    matches\nWHERE   player_id = ?\nORDER BY player_id\n\n#"}
{"question": "Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of matches happened in each year.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of matches happened in each year.. \nSELECT  SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM   SELECT \n  FROM"}
{"question": "How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many matches were played in each year?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many matches were played in each year?. \nSELECT  SELECT COUNT(match_num)\nFROM     matches\nWHERE    (surface = 'clay')\nGROUP BY  year(tourney_date)\n#SELECT  SELECT COUNT(match_num)\n#FROM     matches\n#WHERE    (surface = 'clay')\n#GROUP BY  year(tournament_date)\nSELECT  SELECT COUNT(match_num)\nFROM     matches\nGROUP BY  year(tournament_date), surface(tournament_date)\n#SELECT  SELECT COUNT(match_num)\n#FROM     matches\n#GROUP BY  year(tournament_date), surface(tournament_date)\n\n\nHow many matches were played between two players?. \nSELECT  SELECT COUNT(match_num)\nFROM     matches\nWHERE    (first_name = 'Dominic', last_name = 'Thiem')\n#SELECT  SELECT COUNT(match_num)\n#FROM     matches\n#WHERE    (first_name = 'Dominic', last_name = 'Thiem')\n\n\nHow many matches were played between two players?. \nSELECT  SELECT COUNT(match_num)\nFROM"}
{"question": "Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name and rank of the 3 youngest winners across all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name and rank of the 3 youngest winners across all matches.. \n}
{"question": "What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names and ranks of the three youngest winners across all matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names and ranks of the three youngest winners across all matches?. \n}
{"question": "How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many different winners both participated in the WTA Championships and were left handed?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many different winners both participated in the WTA Championships and were left handed?. \n}
{"question": "Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of left handed winners who participated in the WTA Championships.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of left handed winners who participated in the WTA Championships.. \n}
{"question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name, country code and birth date of the winner who has the highest rank points in all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name, country code and birth date of the winner who has the highest rank points in all matches.. \nSELECT  SELECT  SELECT\n\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\n\n"}
{"question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name, country code, and birth date of the player with the most winner rank points across all matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name, country code, and birth date of the player with the most winner rank points across all matches?. \nSELECT  SELECT_1\n(SELECT  SELECT_2\n(SELECT  SELECT_3\n(SELECT  SELECT_4\n(SELECT  SELECT_5\n(SELECT  SELECT_6\n(SELECT  SELECT_7\n(SELECT  SELECT_8\n(SELECT  SELECT_9\n(SELECT  SELECT_10\n(SELECT  SELECT_11\n(SELECT  SELECT_12\n(SELECT  SELECT_13\n(SELECT  SELECT_14\n(SELECT  SELECT_15\n(SELECT  SELECT_16\n(SELECT  SELECT_17\n(SELECT  SELECT_18\n(SELECT  SELECT_19\n(SELECT  SELECT_20\n(SELECT  SELECT_21\n(SELECT  SELECT_22\n(SELECT  SELECT_23\n(SELECT  SELECT_24\n(SELECT  SELECT_25\n(SELECT  SELECT_26\n(SELECT  SELECT_27\n(SELECT  SELECT_28\n(SELECT  SELECT_29\n(SELECT  SELECT_30\n(SELECT  SELECT_31\n(SELECT  SELECT_32\n(SELECT  SELECT_33\n(SELECT  SELECT_"}
{"question": "Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of players for each hand type.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of players for each hand type.. \nSELECT  SELECT DISTINCT player_id, hand\nFROM wta_1\nGROUP BY hand;\n#SELECT DISTINCT player_id, hand\n#FROM wta_1;\n\n# Find the number of players for each tours.. \n#SELECT DISTINCT player_id, tours\n#FROM wta_1\n#GROUP BY tours;\n\n# Find the number of players for each country.. \n#SELECT DISTINCT player_id, country_code\n#FROM wta_1\n#GROUP BY country_code;\n\n# Find the number of players for each birth_date.. \n#SELECT DISTINCT player_id, birth_date\n#FROM wta_1\n#GROUP BY birth_date;\n\n# Find the number of players for each country.. \n#SELECT DISTINCT player_id, birth_date\n#FROM wta_1\n#GROUP BY birth_date;\n\n# Find the number of players for each country.. \n#SELECT DISTINCT player_id, birth_date\n#FROM wta_1\n#GROUP BY birth_date;\n\n# Find the number of players for each country.."}
{"question": "How many players are there for each hand type?", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are there for each hand type?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are there for each hand type?. \nSELECT  SELECT count(*) FROM `wta_1`.`players` WHERE `first_name` LIKE \"%b%\" AND `last_name` LIKE \"%b%\" AND `hand` = 1;\nSELECT  SELECT count(*) FROM `wta_1`.`players` WHERE `first_name` LIKE \"%r%\" AND `last_name` LIKE \"%r%\" AND `hand` = 1;\n\n#How many players in total?\nSELECT  SELECT COUNT(*) FROM `wta_1`.`players`;\n\n#How many matches are there? \nSELECT  SELECT count(*) FROM `wta_1`.`matches` WHERE `best_of` = 1 AND `draw_size` = 1;\n\n#How many tourneys are there?\nSELECT  SELECT count(*) FROM `wta_1`.`tourney_id` \n\n#How many tourneys are there by player?\nSELECT  SELECT COUNT(*) FROM `wta_1`.`tourney_id` WHERE `player_id` IN (SELECT player_id FROM `wta_1`.`players`)\n\n\n\n\n\n\n\n#http://www.basketball-reference."}
{"question": "How many ships ended up being 'Captured'?", "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many ships ended up being 'Captured'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many ships ended up being 'Captured'?. \nSELECT  SELECT \ncount(*) AS \"captured_ships\" \nFROM \nbattle_death \nWHERE \ncaused_by_ship_id = \"captured_ships\" \nGROUP BY \nship_id \nORDER BY \nship_id \n;\n\nHow many ships ended up being 'Sunk'?. \nSELECT  SELECT \ncount(*) AS \"sunk_ships\" \nFROM \nbattle_death \nWHERE \ncaused_by_ship_id = \"sunk_ships\" \nGROUP BY \nship_id \nORDER BY \nship_id \n;\n\n\n### Fill the \"Greek_Name\" column \n#with the value of the \"Latin_Name\" column \n#of the Ships table. \nSELECT  SELECT \nship_id, \n\"Greek_Name\" \nFROM \nship \nWHERE \nship_type = \"Wooden\" \nGROUP BY \nship_id \n; \n\n\n### Fill the \"Name\" column \n#with the value of the \"Name\""}
{"question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name and tonnage ordered by in descending alphaetical order for the names.. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name and tonnage ordered by in descending alphaetical order for the names.. \nSELECT  SELECT \nSHIP_NAME, \nTONNAGE\nFROM\n#battle_ship\nORDER BY SHIP_NAME;\n\n###############################################################################\n# Description:\n# This is the main script for modifying the database. \n# It calls the commands as it is given:\n#\n#\n#   Add a new battle\n#   Add a new ship\n#   Add a new death\n#\n###############################################################################\n\n# Set the user login and password.\n#\n$db_user = \"root\";\n$db_pass = \"\";\n\n# Database name.\n$db_name = \"diaspora\";\n\n# Connect to database.\n$connection = mysql_connect($db_host, $db_user, $db_pass);\n\n# Database name.\n$db_name = $db_name;\n\n# Connect to database.\n$connection = mysql_connect($db_host, $db_user, $db_pass);\n\n# If the connection is successful.\nif ($connection) {\n\n    # Select the database.\n    $db_select = mysql_"}
{"question": "List the name, date and result of each battle.", "sql": "SELECT name ,  date FROM battle", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name, date and result of each battle.. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name, date and result of each battle.. \nSELECT  SELECT  SELECT \nbattle_id  battle_name  battle_date  bulgarian_commander  latin_commander \nresult \nFROM  battle \nORDER  BY  battle_date  DESC \n#INSERT INTO battle_death (lost_in_battle, ship_id, name, tonnage, ship_type, location, disposition_of_ship)\n#VALUES \n#('1', '1', '2007-12-15', '4000', '3', 'Black Sea', 'sunk')\n#('2', '1', '2007-12-15', '4000', '3', 'Black Sea', 'sunk')\n#('3', '1', '2007-12-15', '4000', '3', 'Black Sea', 'sunk')\n#('4', '2', '2007-12-15', '4000', '3', 'Black Sea', 'sunk')\n#('5', '2', '2007-12-"}
{"question": "What is maximum and minimum death toll caused each time?", "sql": "SELECT max(killed) ,  min(killed) FROM death", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is maximum and minimum death toll caused each time?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is maximum and minimum death toll caused each time?. \nSELECT  SELECT MAX(killed), MAX(injured) FROM death WHERE killed = 200 AND killed = 0;\nSELECT MAX(killed), MAX(injured) FROM death WHERE killed = 200 AND killed = 0;\nSELECT MAX(killed), MAX(injured) FROM death WHERE killed = 200 AND killed = 0;\nWhat is the average number of ships lost per battle?.\nSELECT  SELECT AVG(ship_lost) FROM ship WHERE ship_lost > 0;\nSELECT AVG(ship_lost) FROM ship WHERE ship_lost > 0;\nSELECT AVG(ship_lost) FROM ship WHERE ship_lost > 0;\nSELECT AVG(ship_lost) FROM ship WHERE ship_lost > 0;\nSELECT AVG(ship_lost) FROM ship WHERE ship_lost > 0;\nWhat is the average number of people killed per battle?.\nSELECT AVG(dead) FROM battle;\nSELECT AVG(dead) FROM battle;\nSELECT AVG(dead) FROM battle;\nSELECT AVG(dead) FROM battle;\nSELECT AVG(dead) FROM"}
{"question": "What is the average number of injuries caused each time?", "sql": "SELECT avg(injured) FROM death", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is the average number of injuries caused each time?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is the average number of injuries caused each time?. \nSELECT  SELECT  SELECT\nsum(injured)\nFROM    battle_death\nWHERE   caused_by_ship_id = 24\nGROUP BY killed, id;\n\"\"\"\n\ndef main():\n    import sqlite3\n    conn = sqlite3.connect('battle_death.sqlite')\n    cur = conn.cursor()\n    cur.execute(sql)\n    results = cur.fetchall()\n    conn.close()\n    return results\n\nif __name__ == '__main__':\n    r = main()\n    print 'Average injuries per death:', r[0][0]/r[0][1]\n\n"}
{"question": "What are the death and injury situations caused by the ship with tonnage 't'?", "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the death and injury situations caused by the ship with tonnage 't'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the death and injury situations caused by the ship with tonnage 't'?. \nSELECT  SELECT \n\t\t\t\t\t\tship.killed, ship.injured,\n\t\t\t\t\t\tship.type, ship.location, \n\t\t\t\t\t\t\"caused_by_ship_id\" AS ship_killed, \n\t\t\t\t\t\t\"caused_by_ship_id\" AS ship_injured\nFROM \t\t\t\t\tship \n\tINNER JOIN ( \n\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\"ship_killed\" AS ship_killed,\n\t\t\t\t\t\t\t\t\"ship_injured\" AS ship_injured\n\t\t\t\t\t\tFROM \t\t( \n\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\"id\" AS id,\n\t\t\t\t\t\t\t\t\t\tship.killed,\n\t\t\t\t\t\t\t\t\t\tship.injured\n\t\t\t\t\t\t\t\tFROM \t\tship\n\t\t\t\t\t\t\t\tWHERE \t\tship.tonnage"}
{"question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the name and results of the battles when the bulgarian commander is not 'Boril'. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the name and results of the battles when the bulgarian commander is not 'Boril'. \nSELECT  SELECT  SELECT  SELECT  SELECT \nbattle.id, battle.name, battle.date,\ndeath.cause, death.killed, death.injured,\nship.lost_in_battle, ship.id, ship.name,\nship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship\nFROM battle\nLEFT JOIN battle_death ON battle.id = battle_death.battle_id\nLEFT JOIN ship ON ship.id = battle_death.ship_id\nWHERE boril.id = 10;\n\nWhat are the name and results of the battles when the bulgarian commander is not 'Kardam'. \nSELECT  SELECT  SELECT  SELECT  SELECT \nbattle.id, battle.name, battle.date,\ndeath.cause, death.killed, death.injured,\nship.lost_in_battle, ship.id, ship.name,\nship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship\nFROM battle\nLEFT JOIN battle_death"}
{"question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the different ids and names of the battles that lost any 'Brig' type shipes?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the different ids and names of the battles that lost any 'Brig' type shipes?. \n}
{"question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the ids and names of the battles that led to more than 10 people killed in total.. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the ids and names of the battles that led to more than 10 people killed in total.. \nSELECT  SELECT *\nFROM battles b\nWHERE  killed > 10 \nGROUP BY b.id, b.name\n\nWhat are the ids and names of the battles that had > 1000 killed?\nSELECT  SELECT *\nFROM battles b\nWHERE  killed > 1000 \nGROUP BY b.id, b.name\n\n\n### SQLite SQL battle_reply database, with their properties:\n#battle_reply('id', 'battle', 'bulgarian_commander', 'latin_commander', 'note')\nSELECT  SELECT *\nFROM battle_reply b\nWHERE  id > 5000 \nGROUP BY b.id, b.battle, b.bulgarian_commander, b.latin_commander, b.note\n\n### SQLite SQL ship_death database, with their properties:\n#ship_death('id', 'ship', 'date', 'death_cause', 'note')\nSELECT  SELECT *\nFROM ship_death b\nWHERE  ship > 5000 \nGROUP BY b.id, b.ship"}
{"question": "What is the ship id and name that caused most total injuries?", "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is the ship id and name that caused most total injuries?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is the ship id and name that caused most total injuries?. \nSELECT  SELECT count(ship_id) as total_injuries, \n        ship_name, ship_tonnage, ship_type\n    FROM     ship\n    WHERE    ship_type='Battle Cruiser'\n    AND      killed = 0\n    AND      injured = 0\n    AND      ron_ship_id IS NOT NULL\nGROUP BY ship_name, ship_tonnage, ship_type;\n\n\n#1) ship_name: Belogorodets, ship_tonnage: 2755, ship_type: Battle Cruiser.\n#2) ship_name: Izumo, ship_tonnage: 2650, ship_type: Battle Cruiser.\n\n\n\n### Balkan Wars database, with their properties:\n### country('id', 'name', 'region', 'balkan_wars')\n### fleet('id', 'name', 'owner_country_id', 'fleet_type')\n### ship('id', 'owner_fleet_id', 'name', 'class_id', 'tonnage', 'ship_type',"}
{"question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?. \nSELECT  SELECT DISTINCT name FROM battle_death WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' ORDER BY name\nSELECT  SELECT DISTINCT name FROM battle_death WHERE bulgarian_commander = 'Baldwin I' AND latin_commander = 'Kaloyan' ORDER BY name\nThe first query should return only two rows:\n\n1. Battle of Adrianople (1205)\n2. Battle of Demetskl (1205)\nThe second query should return only one row:\n\n1. Battle of Adrianople (1205)\n\n## In this case, a file or a directory is provided, which contains the data to be queried.\n\n# The following file is the content of the file to be used for the first query:\n\nid, name, date, bulgarian_commander, latin_commander, result\n1, Battle of Adrianople (1205), 1205-07-14, Kaloyan, Baldwin I, bulgarian_commander_won, latin_commander_"}
{"question": "How many different results are there for the battles?", "sql": "SELECT count(DISTINCT RESULT) FROM battle", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many different results are there for the battles?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many different results are there for the battles?. \nSELECT  SELECT count(*) FROM \n\t( SELECT count(*) FROM \n\t\t\tSELECT count(*) FROM \n\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT count(*) FROM \n\t\t\t"}
{"question": "How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many battles did not lose any ship with tonnage '225'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many battles did not lose any ship with tonnage '225'?. \nSELECT  SELECT  SELECT \nb.id, b.name, b.date, b.bulgarian_commander, b.latin_commander, b.result,\ns.lost_in_battle, s.id, s.name, s.tonnage, s.ship_type, s.location, s.disposition_of_ship,\nd.caused_by_ship_id, d.id, d.note, d.killed, d.injured \n\nFROM battle b \n    INNER JOIN ship s ON b.lost_in_battle = s.id\n    INNER JOIN death d ON d.caused_by_ship_id = s.id;\n\n\n"}
{"question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'. \nSELECT  SELECT \nbattle.name AS name, \nbattle.date AS date \nFROM \nbattle \nWHERE \nship.lost_in_battle=battle.id AND \nship.name='Lettice' AND \nship.name='HMS Atalanta' AND \nship.ship_type='ship' AND \nship.location='Europe'\n### This is an output of the query above:\n#battle_name 'Battle of the Nile'\n#battle_date 1798-08-1\n#ship_name 'Lettice'\n#ship_name 'HMS Atalanta'\n#ship_type 'ship'\n#ship_location 'Europe'\n#ship_name 'Lettice'\n#ship_name 'HMS Atalanta'\n#ship_type 'ship'\n#ship_location 'Europe'\n\n### This is the result of the query above without the \"battle_name\" property:\n#ship_name 'Lettice'\n#ship_name 'HMS Atalanta'\n#ship_type 'ship'"}
{"question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nShow names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nShow names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.. \nSELECT  SELECT_NAME, SELECT_RESULT, SELECT_BOTH_COMMANDERS, SELECT_NOTE, SELECT_KILLED, SELECT_INJURED \nFROM      SELECT_DB \nWHERE     SELECT_NOTE = 'NO_SHIPS_LOST_IN_ENGLISH_CHANNEL';\n## \n#battle_death_result\n#result('date', 'bulgarian_commander', 'latin_commander', 'result', 'note')\n## \n#ship_death\n#ship('location', 'disposition_of_ship')\n## \n\n#first, list the results of the battles with no ships lost..\nSELECT  SELECT_NAME, SELECT_RESULT, SELECT_BOTH_COMMANDERS, SELECT_NOTE, SELECT_KILLED, SELECT_INJURED \nFROM      SELECT_DB \nWHERE     SELECT_NOTE = 'NO_SHIPS_LOST_IN_ENGLISH_CHANNEL';\n\n## \n#create a SELECT statement that lists battles with no ships lost in the 'English"}
{"question": "What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the notes of the death events which has substring 'East'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the notes of the death events which has substring 'East'?. \nSELECT  SELECT  WHERE\nINJURED,NOTE,\nSUBSTRING(NOTE,6) LIKE 'East%'\nThe deaths that have substring \"East\" in their note are:\n   East wind blew on the sails of the windmill and the ship was in danger of being capsized. The ship was not saved. It sank.\n   The wind turned north-east. The windmill caught fire.\n   The wind changed and blew from the south-east. The ship was in danger of being capsized. The ship was saved.\n   The wind changed to the east. The ship was not saved. It sank.\n   The ship was in danger of being capsized. The ship was not saved. It sank.\n   The wind turned to the east. The ship was not saved. It sank.\n   The wind changed to the east. The ship was not saved. It sank.\n   The wind changed to the east. The ship was not saved. It sank.\n   The wind changed to the east. The ship was not saved. It sank.\n   The wind turned to the east. The ship was not saved. It sank."}
{"question": "what are all the addresses including line 1 and line 2?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nwhat are all the addresses including line 1 and line 2?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nwhat are all the addresses including line 1 and line 2?. \nSELECT  SELECT \nAddresses.address_id,\nLine1,\nLine2,\nCity,\nZipPostCode,\nStateProvinceCounty,\nCountry,\nOtherAddressDetails\nFROM Addresses\nWHERE Addresses.address_id = 35\nORDER BY Line1\n\\end{code}\n\nComment: you need to use `line1`  instead of `Addresses.line1`\n\nComment: It's just an example.  I have tried all the different variations I could think of.  I tried 'line1' and 'line2' and both got the same result.\n\nComment: ok. then can you provide me the query that you have tried\n\nComment: Thanks for your help.  I posted the query I am using above.\n\nAnswer: When you use `SELECT *` you are going to get all of the columns in the table. You should only use this if you want to get all the columns in the table for that particular row. Otherwise, you should pick specific columns to display.\n\nIn this case, you want to pick just the Addresses table, and then specifically ask for the columns you want.\n\n\\begin{code}"}
{"question": "What is the first and second line for all addresses?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first and second line for all addresses?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first and second line for all addresses?. \nSELECT  SELECT \nAddresses.address_id,\nAddresses.line_1,\nAddresses.line_2,\nAddresses.line_3,\nAddresses.city,\nAddresses.zip_postcode,\nAddresses.state_province_county,\nAddresses.country,\nAddresses.other_address_details\n\n\n\tFROM sqlite_master;\n\t\n\t\t\n\t\t\n\t\n\n\tSELECT \nCourses.course_id,\nCourses.course_name,\nCourses.course_description,\nCourses.other_details\n\n\tFROM sqlite_master;\n\t\n\t\t\n\t\t\n\t\n\n\tSELECT \nDepartments.department_id,\nDepartments.department_name,\nDepartments.department_description,\nDepartments.other_details\n\n\tFROM sqlite_master;\n\t\n\t\t\n\t\t\n\t\n\n\tSELECT \nDegree_Programs.degree_program_id,\nDegree_Programs.department_id,\nDegree_Programs.degree_summary_name"}
{"question": "How many courses in total are listed?", "sql": "SELECT count(*) FROM Courses", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many courses in total are listed?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many courses in total are listed?. \nSELECT  SELECT \nCASE WHEN A.date BETWEEN '2011-11-1' AND '2011-11-10' THEN 'Term 1'\n\t\tWHEN A.date BETWEEN '2011-12-1' AND '2011-12-10' THEN 'Term 2'\n\t\tWHEN A.date BETWEEN '2012-01-1' AND '2012-01-10' THEN 'Term 3'\n\t\tWHEN A.date BETWEEN '2012-02-1' AND '2012-02-10' THEN 'Term 4'\n\t\tWHEN A.date BETWEEN '2012-03-1' AND '2012-03-10' THEN 'Term 5'\n\t\tWHEN A.date BETWEEN '2012-04-1' AND '2012-04-10' THEN 'Term 6'\n\t\tWHEN"}
{"question": "How many courses are there?", "sql": "SELECT count(*) FROM Courses", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many courses are there?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many courses are there?. \nSELECT  SELECT count(*) FROM courses\nHow many students are there? \nSELECT COUNT(*) FROM students;\nHow many students have enrolled in a course? \nSELECT COUNT(*) FROM student_course;\nHow many sections are there? \nSELECT COUNT(*) FROM sections;\nHow many semesters are there? \nSELECT COUNT(*) FROM semesters;\nHow many degrees are there? \nSELECT COUNT(*) FROM degree_programs;\nHow many students are in the same degree program? \nSELECT COUNT(*) FROM student_degree_program;\nHow many students have the same permanent address? \nSELECT COUNT(*) FROM student_address_id;\nHow many students have the same first name? \nSELECT COUNT(*) FROM student_first_name;\nHow many students have the same last name? \nSELECT COUNT(*) FROM student_last_name;\nHow many students have the same middle name? \nSELECT COUNT(*) FROM student_middle_name;\nHow many students have the same cell phone number? \nSELECT COUNT(*) FROM student_cell_number;\nHow many students have the same email address? \nSELECT COUNT(*) FROM student_email_address;\nHow many students have the same SSN"}
{"question": "How is the math course described?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow is the math course described?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow is the math course described?. \nSELECT  SELECT \n    SELECT \n        SELECT \n            SELECT \n                SELECT \n                    SELECT \n                        SELECT \n                            SELECT \n                                SELECT \n                                    SELECT \n                                        SELECT \n                                            SELECT \n                                                SELECT \n                                                    SELECT \n                                                        SELECT \n                                                            SELECT \n                                                                SELECT \n                                                                    SELECT \n                                                                        SELECT \n                                                                            SELECT \n                                                                                SELECT \n                                                                                    SELECT \n                                                                                        SELECT \n                                                                                            SELECT \n                                                                                                SELECT \n                                                                                                    SELECT \n                                                                                                        SELECT \n                                                                                                            SELECT \n                                                                                                                SELECT \n                                                                                                                    SELECT \n                                                                                                                        SELECT \n                                                                                                                            SELECT \n                                                                                                                                SELECT \n                                                                                                                                    SELECT \n                                "}
{"question": "What are the descriptions for all the math courses?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the descriptions for all the math courses?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the descriptions for all the math courses?. \nSELECT  SELECT \nCOURSE_DESCRIPTION,\nPROF_NAME\nFROM\nDEPARTMENTS\nWHERE\nDEPARTMENT_ID=12;\n\n\nSELECT  SELECT \nCOURSE_DESCRIPTION,\nPROF_NAME\nFROM\nDEPARTMENTS\nWHERE\nDEPARTMENT_ID=14;\n\n\nSELECT  SELECT \nCOURSE_DESCRIPTION,\nPROF_NAME\nFROM\nDEPARTMENTS\nWHERE\nDEPARTMENT_ID=16;\n\n\nSELECT  SELECT \nCOURSE_DESCRIPTION,\nPROF_NAME\nFROM\nDEPARTMENTS\nWHERE\nDEPARTMENT_ID=18;\n\n\nSELECT  SELECT \nCOURSE_DESCRIPTION,\nPROF_NAME\nFROM\nDEPARTMENTS\nWHERE\nDEPARTMENT_ID=19;\n\n\nSELECT  SELECT \nCOURSE_DESCRIPTION,\nPROF_NAME\nFROM\nDEPARTMENTS\nWHERE\nDEPARTMENT_ID=20;\n\n\nSELECT  SELECT \nCOURSE_DESCRIPTION"}
{"question": "What is the zip code of the address in the city Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the zip code of the address in the city Port Chelsea?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the zip code of the address in the city Port Chelsea?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT "}
{"question": "What is the zip code for Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the zip code for Port Chelsea?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the zip code for Port Chelsea?. \nSELECT  SELECT count(*) FROM student_transcripts_tracking WHERE zip_postcode='85844'\nRUN;\n\n#-----------------------------------------------------------------\n# Selecting an array of tables from the database\n#-----------------------------------------------------------------\n\n\n#-----------------------------------------------------------------\n# Define the names and types of the columns in each table.\n#-----------------------------------------------------------------\n\n\n$tables = \"student_enrolment\", \"student_course\", \"course\", \"department\", \"degree_program\", \"section\", \"transcripts\", \"transcript_contents\", \"semester\", \"address\";\n\n#-----------------------------------------------------------------\n# Define a function that accepts the table names as input.\n#-----------------------------------------------------------------\n\nfunction get_columns($table_name){\n\t\n\t#Catch the SQLException and return false\n\ttry{\n\t\t$conn = new PDO(\"sqlite:path/to/sqlite/db.sqlite\");\n\t\t$stmt = $conn->prepare(\"SELECT * FROM \".$table_name);\n\t\t$stmt->execute();\n\t\t$stmt->setFetchMode(PDO::FETCH"}
{"question": "Which department offers the most number of degrees? List department name and id.", "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich department offers the most number of degrees? List department name and id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich department offers the most number of degrees? List department name and id.. \nSELECT  SELECT \nSELECT \n\n(\n  SELECT \n    COUNT(*) AS count\n  FROM\n    student_degrees\n  WHERE\n    degree_program_id = 'degree_program_1'\n) AS 'degree_program_1_count',\n\n(\n  SELECT \n    COUNT(*) AS count\n  FROM\n    student_degrees\n  WHERE\n    degree_program_id = 'degree_program_2'\n) AS 'degree_program_2_count',\n\n(\n  SELECT \n    COUNT(*) AS count\n  FROM\n    student_degrees\n  WHERE\n    degree_program_id = 'degree_program_3'\n) AS 'degree_program_3_count',\n\n(\n  SELECT \n    COUNT(*) AS count\n  FROM\n    student_degrees\n  WHERE\n    degree_program_id = 'degree_program_4'\n) AS 'degree_program_4_count',\n\n(\n  SELECT \n    COUNT(*) AS count\n  FROM\n    student_degrees\n  WHERE\n    degree_program_"}
{"question": "What is the name and id of the department with the most number of degrees ?", "sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name and id of the department with the most number of degrees ?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name and id of the department with the most number of degrees ?. \nSELECT  SELECT COUNT(*) FROM student_degree_programs WHERE department_id = 1.\n#COUNT(*), 'department_id'\nDepartment_id = 1\nStudent_id = 1\nWhat is the name and id of the course with the most number of sections ?. \nSELECT  SELECT COUNT(*) FROM student_sections WHERE course_id = 1.\n#COUNT(*), 'course_id'\nCourse_id = 1\nStudent_id = 1\nWhat is the name and id of the course with the most number of sections ?. \nSELECT  SELECT COUNT(*) FROM student_sections WHERE course_id = 2.\n#COUNT(*), 'course_id'\nCourse_id = 2\nStudent_id = 1\nWhat is the name and id of the course with the most number of sections ?. \nSELECT  SELECT COUNT(*) FROM student_sections WHERE course_id = 3.\n#COUNT(*), 'course_id'\nCourse_id = 3\nStudent_id = 1\nWhat is the name and id of the course with the most number of sections ?. \nSELECT  SELECT COUNT(*)"}
{"question": "How many departments offer any degree?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many departments offer any degree?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many departments offer any degree?. \nSELECT  SELECT count(*) AS c\nFROM    Department\nWHERE   is_offering_any_degree = 1\nGROUP BY dept_id\n\nAnswer: You're using `is_offering_any_degree = 1` instead of `is_offering_any_degree = true`.\n\nChange it to\n\n\\begin{code}\nSELECT  SELECT count(*) AS c\nFROM    Department\nWHERE   is_offering_any_degree = true\nGROUP BY dept_id\n\\end{code}\n\nComment: Sorry for the delay, I was on vacation!  Thanks so much for your help.  I'm just learning SQL, so the smallest thing can throw me for a loop."}
{"question": "How many different departments offer degrees?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different departments offer degrees?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different departments offer degrees?. \n}
{"question": "How many different degree names are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different degree names are offered?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different degree names are offered?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT"}
{"question": "How many different degrees are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different degrees are offered?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different degrees are offered?. \nSELECT  SELECT \nCOUNT (DISTINCT \n    ( \n    ( SELECT count(DISTINCT course_id) \n    FROM student_enrolment AS TE \n    WHERE student_enrolment.semester_id = Semester.id AND student_enrolment.degree_program_id = degree_program.id ) \n    AND \n    ( SELECT count(DISTINCT course_id) \n    FROM student_enrolment AS TE \n    WHERE student_enrolment.semester_id = Semester.id AND student_enrolment.degree_program_id = degree_program.id AND student_enrolment.course_id = course_id ) \n    ) )\nFROM degree_program AS degree_program, semester AS Semester, student_course AS student_course, course AS course\n\nWhat courses are offered under this semester?. \nSELECT \n    ( SELECT count(DISTINCT course_id) \n    FROM student_enrolment AS TE \n    WHERE student_enrolment.semester_id = Semester.id AND student_enrolment.degree"}
{"question": "How many degrees does the engineering department offer?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many degrees does the engineering department offer?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many degrees does the engineering department offer?. \nSELECT  SELECT \n    SUM(\n      CASE WHEN\n        enrolment_status = 'not enrolled' THEN 1\n        WHEN enrolment_status = 'withdrawn' THEN 1\n        WHEN enrolment_status = 'suspended' THEN 1\n        WHEN enrolment_status = 'not started' THEN 1\n      END\n    ) AS completed\nFROM \n    transcript_contents\nWHERE\n    course_id = 1\nGROUP BY\n    course_id\nORDER BY\n    course_id\n\n \nSELECT \n    SUM(\n      CASE WHEN\n        enrolment_status = 'not enrolled' THEN 1\n        WHEN enrolment_status = 'withdrawn' THEN 1\n        WHEN enrolment_status = 'suspended' THEN 1\n        WHEN enrolment_status = 'not started' THEN 1\n      END\n    ) AS completed\nFROM \n    transcript_contents\nWHERE\n    course_id = 1\nGROUP BY\n    course_id\nORDER BY\n    course_id\n\n#Student_Enrolment_Courses('student"}
{"question": "How many degrees does the engineering department have?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many degrees does the engineering department have?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many degrees does the engineering department have?. \nSELECT  SELECT COUNT(DISTINCT degree_program_id) AS course_count FROM student_transcripts_tracking; \nWhat is the total course count?. \nSELECT  SELECT SUM(course_count) AS total_course_count FROM student_transcripts_tracking; \nWhich is the largest degree program?. \nSELECT  SELECT MAX(degree_program_id) AS degree_program_id FROM student_transcripts_tracking; \nWhat is the largest transcript count?. \nSELECT  SELECT MAX(transcript_count) AS transcript_count FROM student_transcripts_tracking; \nHow many students are in the engineering department?. \nSELECT  SELECT COUNT(DISTINCT student_id) AS student_count FROM student_transcripts_tracking; \nWhat is the largest transcript count?. \nSELECT  SELECT MAX(transcript_count) AS transcript_count FROM student_transcripts_tracking; \nWhat is the largest transcript count for the engineering department?. \nSELECT  SELECT MAX(transcript_count) AS transcript_count FROM student_transcripts_tracking WHERE degree"}
{"question": "What are the names and descriptions of all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and descriptions of all the sections?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and descriptions of all the sections?. \n}
{"question": "What are the names and descriptions for all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and descriptions for all the sections?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and descriptions for all the sections?. \nSELECT  SELECT \nSELECT \nFROM sqlite_master\nWHERE type = 'table' and name IN (\n'Students'\n'Student_Enrolment'\n'Transcripts'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "What are the names and id of courses having at most 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and id of courses having at most 2 sections?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and id of courses having at most 2 sections?. \nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT"}
{"question": "What are the names and ids of every course with less than 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and ids of every course with less than 2 sections?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and ids of every course with less than 2 sections?. \nSELECT  SELECT \n    COURSE_ID AS 'ID',\n    COURSE_NAME AS 'Name',\n    COURSE_DESCRIPTION AS 'Description',\n    other_details AS 'Other details'\nFROM COURSES\nWHERE SECTION_COUNT < 2;\nWhat are the names and ids of every course with more than 2 sections?. \nSELECT  SELECT \n    COURSE_ID AS 'ID',\n    COURSE_NAME AS 'Name',\n    COURSE_DESCRIPTION AS 'Description',\n    other_details AS 'Other details'\nFROM COURSES\nWHERE SECTION_COUNT > 2;\n#\n#Data table to use for Student_Enrolment:\n#This table will be filled when a new student is enrolled in a course.\n#All of the student_enrolment_id values will be unique; all the course_id values will be unique; all the student_id values will be unique; all the semester_id values will be unique.\n#NOTE: We are interested in determining the students who are taking the course, or the course they are taking.\n"}
{"question": "List the section_name in reversed lexicographical order.", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nList the section_name in reversed lexicographical order.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nList the section_name in reversed lexicographical order.. \nSELECT  SELECT section_name FROM sections\nORDER BY section_name DESC;\nList all courses, ordered by course_name..\nSELECT * FROM courses\nORDER BY course_name;\nList all courses, ordered by course_name.. \nSELECT * FROM courses\nORDER BY course_name DESC;\n# SELECT * FROM courses\n# ORDER BY course_name DESC;\n# List all courses, ordered by course_name..\nSELECT * FROM courses\nORDER BY course_name DESC;\n# List all courses, ordered by course_name.. \nSELECT * FROM courses\nORDER BY course_name DESC;\n# List all courses, ordered by course_name..\nSELECT * FROM courses\nORDER BY course_name DESC;\n# List all courses, ordered by course_name.. \nSELECT * FROM courses\nORDER BY course_name DESC;\n# List all courses, ordered by course_name.. \nSELECT * FROM courses\nORDER BY course_name DESC;\n# List all courses, ordered by course_name.. \nSELECT * FROM courses\nORDER BY course_name DESC;\n# List all courses, ordered by course_name.. \nSELECT * FROM courses\nORDER BY course_name DESC;"}
{"question": "What are the names of the sections in reverse alphabetical order?", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names of the sections in reverse alphabetical order?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names of the sections in reverse alphabetical order?. \n}
{"question": "What is the semester which most student registered in? Show both the name and the id.", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the semester which most student registered in? Show both the name and the id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the semester which most student registered in? Show both the name and the id.. \nSELECT  SELECT DISTINCT Semester.semester_name, Semester.semester_id \nFROM      Semester \nORDER BY Semester.semester_name;\n\n\n### SQL for the student_transcripts_tracking database with the following tables: \n### Addresses, \n### Courses, \n### Departments, \n### Degree_Programs, \n### Sections, \n### Semesters, \n### Students, \n### Student_Enrolment, \n### Student_Enrolment_Courses, \n### Transcripts, \n### Transcript_Contents \n#\n### Note that the transcript_id is a foreign key in the student_enrolment_course table. \n### So in the student_enrolment_course table we have the foreign key, but we need to select the primary key value (semester_id) and use that to get the semester name. \n### Also we need to get the student_course_id to get the semester name in the transcript_contents table. \n#"}
{"question": "For each semester, what is the name and id of the one with the most students registered?", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFor each semester, what is the name and id of the one with the most students registered?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFor each semester, what is the name and id of the one with the most students registered?. \nSELECT  SELECT\n  SEMSTER_ID,\n  COUNT(*) AS number_of_students,\n  MAX(SEM_ID) AS semester_id_of_the_most_students\nFROM student_enrolment_courses\nGROUP BY SEMSTER_ID\nORDER BY number_of_students DESC;\n\n#Why does this query return 1?\n\n#One of my students has enrolled in more than one course. How do I count the number of courses the student is enrolled in?.\n\n#The results should be a list of semester IDs, with the number of courses in parentheses.\n\n#EXAMPLE:\n#SELECT  SELECT\n#SEMSTER_ID,\n#COUNT(*) AS number_of_courses,\n#MAX(SEM_ID) AS semester_id_of_the_most_courses\n#FROM student_enrolment_courses\n#GROUP BY SEMSTER_ID\n#ORDER BY number_of_courses DESC;\n\n#For each semester, how many students in each course?.\n\n#The results should be a list of semester IDs,"}
{"question": "What is the description of the department whose name has the substring the computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the description of the department whose name has the substring the computer?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the description of the department whose name has the substring the computer?. \n}
{"question": "What is the department description for the one whose name has the word computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the department description for the one whose name has the word computer?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the department description for the one whose name has the word computer?. \nSELECT  SELECT \n'CIS' AS Department, 'Computer Information Systems' AS Department_Description\nFROM Addresses \nWHERE \nLINE_1 = '44221' AND LINE_2 = 'MSU Campus' AND LINE_3 = 'WOLF LAKE ROAD' AND \nState_Province_County = 'MI' AND Zip_Postcode = '48101' AND \nCity = 'East Lansing' AND Country = 'United States' AND \nLine_3 = 'MSU Campus' AND City = 'East Lansing'\n\nSELECT Department, Department_Description\nFROM Departments\nWHERE \nLINE_1 = '44221' AND LINE_2 = 'MSU Campus' AND LINE_3 = 'WOLF LAKE ROAD' AND \nState_Province_County = 'MI' AND Zip_Postcode = '48101' AND \nCity = 'East Lansing' AND Country = 'United States' AND \nLINE_3 = 'MSU Campus' AND City"}
{"question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.. \nSELECT  SELECT_STUDENTS_WITH_MULTIPLE_DEGREES\nSelect the id, from, to, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, and other_student_details of students who are enrolled in 2 degree programs in one semester. \n\n--Duplicate rows are not allowed..\n\nSelect the id, from, to, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, and other_student_details of students who are enrolled in 2 degree programs in one semester.\n\n#get course enrollment for a student by id\n\n#select_section_contents_for_student_by_id\n#get course enrollment for a student by id\n#get course enrollment for a student by id\n\n#get course enrollment for a student by id\n#get course enrollment for a student by id\n#get course enrollment for a student by id\n"}
{"question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?. \nSELECT  SELECT \n  st.student_id,\n  st.student_enrolment_id,\n  st.semester_id,\n  st.course_id\nFROM (\n  SELECT \n    enr.student_enrolment_id,\n    enr.course_id,\n    enr.semester_id,\n    enr.student_id\n  FROM (\n    SELECT \n      u.student_enrolment_id,\n      u.semester_id,\n      u.course_id,\n      s.student_id,\n      u.date_left\n    FROM \n      (\n        SELECT \n          student.id,\n          student.first_name,\n          student.middle_name,\n          student.last_name,\n          student.cell_mobile_number,\n          student.email_address,\n          student.ssn,\n          student.date_first_registered,\n          student.date_left\n        FROM \n          student\n        WHERE \n          student.ssn BETWEEN 5850551 AND 58505"}
{"question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is enrolled in a Bachelor degree program? List the first name, middle name, last name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is enrolled in a Bachelor degree program? List the first name, middle name, last name.. \nSELECT  SELECT \n    SELECT \n        SELECT \n            SELECT \n                SELECT \n                    SELECT \n                        SELECT \n                            SELECT \n                                SELECT \n                                    SELECT \n                                        SELECT \n                                            SELECT \n                                                SELECT \n                                                    SELECT \n                                                        SELECT \n                                                            SELECT \n                                                                SELECT \n                                                                    SELECT \n                                                                        SELECT \n                                                                            SELECT \n                                                                                SELECT \n                                                                                    SELECT \n                                                                                        SELECT \n                                                                                            SELECT \n                                                                                                SELECT \n                                                                                                    SELECT \n                                                                                                        SELECT \n                                                                                                            SELECT \n                                                                                                                SELECT \n                                                                                                                    SELECT \n                                                                                                                        SELECT \n                                                                                                                            SELECT \n                                                                                                                                SELECT \n                                                                                                                                    SELECT \n                                "}
{"question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first, middle, and last names for everybody enrolled in a Bachelors program?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first, middle, and last names for everybody enrolled in a Bachelors program?. \nSELECT  SELECT\n    s.student_id,\n    s.first_name,\n    s.middle_name,\n    s.last_name\nFROM student_transcripts_tracking AS s\nWHERE s.department_id = 2  AND s.degree_program_id = 1  \nAND s.semester_id = 1 \nGROUP BY  s.student_id \nHAVING COUNT(DISTINCT s.student_id) = 32\nORDER BY 1,2,3\nThe last row (or two, if there are duplicates) in each group are the ones to be used in the next steps, \nsince we don't know which one is the smallest, middle, and largest, we have to use all of them\nCreate a new table of types:\n\tCREATE TABLE types (id INTEGER, name VARCHAR(100), description VARCHAR(100))\n\tThe number of rows must be the same as the number of rows in students_table (100 rows)\n\tThe last row will be a row of NULLs, to indicate that no description was given\n\tThe 1st row"}
{"question": "Find the kind of program which most number of students are enrolled in?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the kind of program which most number of students are enrolled in?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the kind of program which most number of students are enrolled in?. \nSELECT  SELECT COUNT(*) AS CNT, COUNT(DISTINCT COURSE_ID) AS N_COURSES\nFROM    SEMESTERS\nLEFT JOIN STUDENT_ENROLMENT\nWHERE COURSE_ID IN (SELECT COURSE_ID FROM COURSES);\n\n#Find the number of students enrolled in a specific program.\nSELECT  SELECT COUNT(*) AS CNT, COUNT(DISTINCT STUDENT_ENROLMENT_ID) AS N_STUDENTS\nFROM    SEMESTERS\nLEFT JOIN STUDENT_ENROLMENT\nWHERE DISTINCT DEGREE_PROGRAM_ID = 11;\n\n#Find the number of students enrolled in a specific program, whose transcript is less than 2 years old.\nSELECT  SELECT COUNT(*) AS CNT, COUNT(DISTINCT STUDENT_ENROLMENT_ID) AS N_STUDENTS\nFROM    SEMESTERS\nLEFT JOIN STUDENT_ENROLMENT\nWHERE (DATE(TRANSCRIPT_DATE) < DATE('2017-07-16') OR (DATE(TRANSC"}
{"question": "What is the degree summary name that has the most number of students enrolled?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the degree summary name that has the most number of students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the degree summary name that has the most number of students enrolled?. \nSELECT  SELECT SUM(current_enrolment) FROM student_enrolment WHERE student_degree_program_id = 1 AND semester_id = 1 AND enrolment_status = 'S' AND (department_id = 1 OR department_id = 2) AND (section_id = 1 OR section_id = 2 OR section_id = 3 OR section_id = 4) GROUP BY student_degree_program_id, semester_id, enrolment_status, department_id, section_id;\n#####\n#\n#Select the list of degrees that have the most number of students enrolled\n#in a particular semester.\n#\n#SELECT  SUM(current_enrolment) FROM student_enrolment WHERE student_degree_program_id = 1 AND semester_id = 1 AND enrolment_status = 'S' AND (department_id = 1 OR department_id = 2) GROUP BY student_degree_program_id, semester_id, enrolment_status, department_id;\n#####\n#\n#Select the list of degrees that"}
{"question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the program which most number of students are enrolled in. List both the id and the summary.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the program which most number of students are enrolled in. List both the id and the summary.. \nSELECT  SELECT \ncourse_programs.course_program_id, course_programs.course_program_name, \ncourses.course_name, courses.course_description, courses.other_details,\nSECTION_COURSE.section_course_id, SECTION_COURSE.section_name, SECTION_COURSE.section_description,\nSECTION_COURSE.other_details, SECTIONS.section_id, SECTIONS.semester_id, SECTIONS.semester_name, SECTIONS.semester_description,\nSECTIONS.other_details, \nSECTIONS.section_id, SECTIONS.semester_id, SECTIONS.semester_name, SECTIONS.semester_description,\nSECTIONS.other_details, SECTIONS.section_id, SECTIONS.semester_id, SECTIONS.semester_name, SECTIONS.semester_description,\nSECTIONS.other_details, SECTIONS.section_id, SECTIONS.semester_id, SECTIONS.semester_name, SECTIONS"}
{"question": "What is the program id and the summary of the degree that has the most students enrolled?", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the program id and the summary of the degree that has the most students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the program id and the summary of the degree that has the most students enrolled?. \nSELECT  SELECT\n    dp.department_id,\n    dp.department_name,\n    dp.department_description,\n    other_details,\n    COUNT(student_enrolment.student_id) AS students_enrolled\nFROM\n    student_enrolment\n    INNER JOIN department_program dp\n        ON student_enrolment.department_program_id = dp.department_program_id\nGROUP BY  dp.department_id,\n    dp.department_name,\n    dp.department_description,\n    other_details\nORDER BY  students_enrolled DESC\nLIMIT 1\n\n\nWhat is the program id and the summary of the degree that has the most students enrolled? \nSELECT\n    dp.department_id,\n    dp.department_name,\n    dp.department_description,\n    other_details,\n    COUNT(student_enrolment.student_id) AS students_enrolled\nFROM\n    student_enrolment\n    INNER JOIN department_program dp\n        ON student_enrolment."}
{"question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.. \nSELECT  SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT (COUNT(*) AS 'number_of_enrollments') FROM (SELECT"}
{"question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?. \nSELECT  SELECT 1\n  WHERE 1=1 \n    AND \n    (SELECT COUNT(*) \n    FROM   student_enrolment \n    WHERE  student_enrolment.student_id=student_transcripts_tracking.student_id \n    AND   student_enrolment.degree_program_id=student_transcripts_tracking.degree_program_id)\n    +\n    (SELECT COUNT(*)\n    FROM   student_transcripts_tracking \n    WHERE  student_transcripts_tracking.student_id=student_transcripts_tracking.student_id \n    AND   student_transcripts_tracking.degree_program_id=student_transcripts_tracking.degree_program_id)\n    +\n    (SELECT COUNT(*) \n    FROM   student_transcripts_tracking \n    WHERE  student_transcripts_tracking.student_id=student_transcripts_tracking.student_id \n    AND   student_transcripts_tracking.degree_program_id=student_transcript"}
{"question": "Which semesters do not have any student enrolled? List the semester name.", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich semesters do not have any student enrolled? List the semester name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich semesters do not have any student enrolled? List the semester name.. \nSELECT  SELECT *, count(*) cnt\nFROM\n  (\n    SELECT  Transcripts.transcript_id, Transcripts.transcript_date, \n    (\n      SELECT  COUNT(Courses.course_id)\n      FROM    Course_enrollment   \n      WHERE   Course_enrollment.student_enrolment_id = Transcripts.student_enrolment_id\n      AND     Course_enrollment.course_id = Transcripts.course_id\n      ) cnt\n    FROM    Transcripts\n    )\nGROUP BY Transcripts.transcript_id\nORDER BY Transcripts.transcript_date DESC\n\\end{code}\n\nI have the following query to get the count of semesters that don't have any student enrolled. The problem is that it is too slow and I need to speed up this query.\n\n\\begin{code}\nSELECT  SELECT *, count(*) cnt\nFROM\n(\nSELECT  Transcripts.transcript_id, Transcripts.transcript_date,\n(\nSELECT  COUNT(Courses.course_id)\nFROM"}
{"question": "What is the name of the semester with no students enrolled?", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name of the semester with no students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name of the semester with no students enrolled?. \nSELECT  SELECT SEM_DROP.SEM_ID FROM SEM_DROP WHERE SEM_DROP.SEM_ID IS NULL;\n\n#The script below will insert the database schema and the sample data. \n#You can modify the schema (add/remove attributes) and the sample data.\n#If you have an existing database, you can use the script to import the sample data into your database. \n#This will create the database schema as well as the sample data. \n#The code is also commented to help you understand what it does. \n#The script needs to be executed as the superuser (via `sudo`).\n#\n#Replace the following variables in the script with the appropriate values. \n#(1) The path to the sqlite database file (the path should be relative to the directory where the script resides.) \n#(2) The path to the csv file (the path should be relative to the directory where the script resides.) \n#(3) The name of the database (should be the same as the filename of the sqlite database file.) \n#(4) The name of the table with sample data. \n\n#sqlite3 \""}
{"question": "What are all the course names of the courses which ever have students enrolled in?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are all the course names of the courses which ever have students enrolled in?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are all the course names of the courses which ever have students enrolled in?. \nSELECT  SELECT  Select\ncourses.course_id, courses.course_name\nFROM    student_enrolment\nJOIN    courses\nON      student_enrolment.course_id = courses.course_id\nWHERE   student_enrolment.student_id = 4\nGROUP BY courses.course_id, courses.course_name\nORDER BY courses.course_name;\n\n# What are all the course names of the courses which ever have students enrolled in? \n# WITH \n# SELECT  SELECT  Select\n# courses.course_id, courses.course_name\n# FROM    student_enrolment\n# JOIN    courses\n# ON      student_enrolment.course_id = courses.course_id\n# WHERE   student_enrolment.student_id = 4\n# GROUP BY courses.course_id, courses.course_name\n# ORDER BY courses.course_name;\n\n#What are all the enrolled students names?. \nSELECT  SELECT  Select\nstudents.student_id, students.current_address_id, students.permanent_address_id, students.first_name, students."}
{"question": "What are the names of all courses that have some students enrolled?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names of all courses that have some students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names of all courses that have some students enrolled?. \nSELECT  SELECT  SELECT \nENROLLED_IN_COURSES\nFROM (\n    SELECT  DEGREE_PROGRAM_ID, SEMESTER_ID, STUDENT_ID\n    FROM STUDENT_ENROLMENT\n    WHERE STUDENT_ENROLMENT.SEMESTER_ID = 1 AND STUDENT_ENROLMENT.DEGREE_PROGRAM_ID NOT IN (SELECT DEGREE_PROGRAM_ID FROM DEGREE_PROGRAM)\n    )\n    WHERE STUDENT_ID IS NOT NULL\n    GROUP BY DEGREE_PROGRAM_ID, SEMESTER_ID\n    ORDER BY SEMESTER_ID ASC, DEGREE_PROGRAM_ID ASC;\n\nWhat are the names of all the courses that are NOT enrolled?. \nSELECT  NOT_ENROLLED_IN_COURSES\nFROM (\n    SELECT  DEGREE_PROGRAM_ID, SEMESTER_ID, STUDENT_ID\n    FROM STUDENT_ENROLMENT\n    WHERE STUDENT_ENRO"}
{"question": "What's the name of the course with most number of enrollments?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat's the name of the course with most number of enrollments?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat's the name of the course with most number of enrollments?. \nSELECT  SELECT count(transcript_id) FROM transcripts GROUP BY course_id ORDER BY count(transcript_id) DESC LIMIT 1\nThe result is \n\nWhat's the name of the course with least number of enrollments?. \nSELECT  SELECT count(transcript_id) FROM transcripts GROUP BY course_id ORDER BY count(transcript_id) ASC LIMIT 1\nThe result is \n\nWhat's the name of the course with most number of students?. \nSELECT  SELECT count(student_id) FROM student_enrolments GROUP BY course_id ORDER BY count(student_id) DESC LIMIT 1\nThe result is \n\nWhat's the name of the course with least number of students?. \nSELECT  SELECT count(student_id) FROM student_enrolments GROUP BY course_id ORDER BY count(student_id) ASC LIMIT 1\nThe result is \n\n#Student_Enrolment_Sections('student_enrolment_id', 'section_id', 'other_details')\n\nWhat's the name of the section with most number of students?. \nSELECT  SELECT count(student_"}
{"question": "What is the name of the course with the most students enrolled?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name of the course with the most students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name of the course with the most students enrolled?. \nSELECT  SELECT \n  count(*) as c, \n  name\nFROM student_enrolment\nGROUP BY name\nORDER BY c DESC\nLIMIT 1;\n\nSELECT  SELECT \n  name,\n  count(*) as c\nFROM student_enrolment\nGROUP BY name\nORDER BY c DESC\nLIMIT 1;\n\nSELECT  SELECT \n  count(*) as c, \n  name\nFROM student_enrolment\nGROUP BY name\nORDER BY c DESC\nLIMIT 1;\n\nSELECT  SELECT \n  name,\n  count(*) as c\nFROM student_enrolment\nGROUP BY name\nORDER BY c DESC\nLIMIT 1;\n\nSELECT  SELECT \n  name,\n  count(*) as c\nFROM student_enrolment\nGROUP BY name\nORDER BY c DESC\nLIMIT 1;\n\nSELECT  SELECT \n  name,\n  count(*) as c\nFROM student_enrolment\nGROUP BY name\nORDER BY c DESC\nLIMIT 1;\n\nSELECT  SELECT \n  name,\n  count(*) as c\nFROM student_enrolment\nGROUP BY name\nORDER BY c"}
{"question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.. \nSELECT  SELECT \nDISTINCT\nstudent_last_name\nFROM\n(\n\tSELECT\n\t\tstudent_enrolment_courses.student_enrolment_id\n\t\t\t\tAS student_id\n\t\t\t\t\t\t\n\t\tFROM \n\t\t\tstudent_enrolment_courses \n\t\t\t\t\tINNER JOIN student_enrolment ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id\n\t\t\t\t\tINNER JOIN student_transcripts ON student_transcripts.transcript_id = student_enrolment_courses.transcript_id\n\t\t\t\t\tINNER JOIN students ON students.student_id = student_transcripts.student_id\n\t\t\t\t\tWHERE\n\t\t\t\t\t\tstate_province_county = 'NC'\n\t\t\t\t\t\t\t\tAND\n\t\t\t\t\t\t\t\tstudent_last_name IS NOT NULL\n\t\t\t\t\t\t\t\tAND\n\t\t\t\t\t\t\t\tstudent_first_"}
{"question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the last name of the students who live in North Carolina but have not registered in any degree programs?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the last name of the students who live in North Carolina but have not registered in any degree programs?. \nSELECT  SELECT\nLast_Name\nFROM   Student_Enrolment\nWHERE   enrolment.degree_program_id = 0\n\nWhat are the last name of the students who live in Pennsylvania but have not registered in any degree programs?. \nSELECT  SELECT\nLast_Name\nFROM   Student_Enrolment\nWHERE   enrolment.degree_program_id = 0\n\n\n\n\nWhat are the last name of the students who have not registered in any degree programs and who have no current address?. \nSELECT  SELECT\nLast_Name\nFROM   Student_Enrolment\nWHERE   enrolment.degree_program_id = 0\nAND     enrolment.current_address_id = 0\n\nWhat are the last name of the students who have not registered in any degree programs and who have no permanent address?. \nSELECT  SELECT\nLast_Name\nFROM   Student_Enrolment\nWHERE   enrolment.degree_program_id = 0\nAND     enrolment.permanent_address_id = 0\n\nWhat are the last name of the students who have not registered in any degree programs and who live"}
{"question": "Show the date and id of the transcript with at least 2 course results.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nShow the date and id of the transcript with at least 2 course results.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nShow the date and id of the transcript with at least 2 course results.. \nSELECT  SELECT transcript_id, transcript_date, COUNT(*) FROM Transcripts WHERE \nSELECT student_course_id, transcript_id FROM Transcript_Contents WHERE\nSELECT id FROM Transcripts WHERE\nSELECT student_course_id, transcript_id FROM Transcript_Contents WHERE\nSELECT id FROM Transcripts WHERE\nSELECT student_course_id, transcript_id FROM Transcript_Contents WHERE\nSELECT id FROM Transcripts WHERE\nSELECT student_course_id, transcript_id FROM Transcript_Contents WHERE\nSELECT id FROM Transcripts WHERE\nSELECT student_course_id, transcript_id FROM Transcript_Contents WHERE\nSELECT id FROM Transcripts WHERE\nSELECT student_course_id, transcript_id FROM Transcript_Contents WHERE\nSELECT id FROM Transcripts WHERE\nSELECT student_course_id, transcript_id FROM Transcript_Contents WHERE\nSELECT id FROM Transcripts WHERE\nSELECT student_course_id, transcript_id FROM Transcript_Contents WHERE\nSELECT id FROM Transcripts WHERE\nSELECT student_course_id, transcript_id FROM Transcript_Contents WHERE\nSELECT id FROM Transcripts WHERE\nSELECT student_"}
{"question": "What is the date and id of the transcript with at least 2 courses listed?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the date and id of the transcript with at least 2 courses listed?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the date and id of the transcript with at least 2 courses listed?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT "}
{"question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the phone number of the man with the first name Timmothy and the last name Ward?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the phone number of the man with the first name Timmothy and the last name Ward?. \nSELECT  SELECT_PLACEHOLDER_STUDENT_DETAILS_AND_ADDRESS_DETAILS_AND_SECTIONS_AND_SEMESTERS_AND_STUDENTS_AND_COURSES_AND_DEGREE_PROGRAMS_AND_TRANSCRIPTS_AND_TRANSCRIPT_CONTENTS\nFROM    sqlite_master\nWHERE   type IN ('table','view','index','trigger','function')\nAND     name IN ('student_details', 'address_details', 'sections', 'semesters', 'students','courses','degree_programs','transcripts','transcript_contents')\nAND     tbl_name LIKE '%Students%'\nAND     tbl_name NOT LIKE '%Transcripts%'\nAND     tbl_name NOT LIKE '%Student_Enrolment_Courses%'\nAND     tbl_name NOT LIKE '%Student_Enrolment%'\nAND     tbl_name NOT LIKE '%Student_Enrolment_Courses%'\nAND     tbl_name NOT LIKE '%Student_Enrolment_Courses%'\nAND     tbl_name NOT LIKE '%Student_Enrolment_C"}
{"question": "What is the mobile phone number of the student named Timmothy Ward ?", "sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the mobile phone number of the student named Timmothy Ward ?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the mobile phone number of the student named Timmothy Ward ?. \nSELECT  SELECT \n    case\n        when status = 'B' then 1\n        else 0\n    end as is_enrolled, \n    case\n        when status = 'D' then 1\n        else 0\n    end as is_dropped, \n    case\n        when status = 'R' then 1\n        else 0\n    end as is_repeated, \n    case\n        when status = 'O' then 1\n        else 0\n    end as is_on_leave\nfrom\n    student_transcripts_tracking\nwhere\n    student_id = 1014358\n\\end{code}\n\nAnswer: I think you want a [`join`](http://www.sqlite.org/lang_from.html) or a [`join`](http://www.sqlite.org/lang_expr.html#join) as you are trying to join on a `student_id` which exists in another table.\n\n\\begin{code}\nSELECT  student_course_id, transcript_id\nFROM\n    student_transcripts_tracking\n    JOIN student_trans"}
{"question": "Who is the first student to register? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is the first student to register? List the first name, middle name and last name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is the first student to register? List the first name, middle name and last name.. \nSELECT  SELECT student_enrolment_id FROM student_enrolment_courses WHERE student_course_id = '1'\nSELECT  SELECT student_course_id FROM student_course WHERE course_id = '1'\nSELECT  SELECT student_course_id FROM student_course WHERE course_id = '1'\n"}
{"question": "What is the first, middle, and last name of the first student to register?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name of the first student to register?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name of the first student to register?. \n}
{"question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is the earliest graduate of the school? List the first name, middle name and last name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is the earliest graduate of the school? List the first name, middle name and last name.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM \nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM \n\nWho is the most recent graduate of the school? List the first name, middle name and last name.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM \n\nWho has been at the school the longest? List the first name, middle name and last name.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM \n\nWho is the tallest student at the school? List the first name, middle name and last name.. \nSELECT  SELECT "}
{"question": "What is the first, middle, and last name of the earliest school graduate?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name of the earliest school graduate?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name of the earliest school graduate?. \nSELECT  SELECT  SELECT\n  first_name,\n  middle_name,\n  last_name\nFROM   addresses\nWHERE  first_name LIKE 'bob%' AND last_name LIKE 'bob%' AND middle_name IS NULL\nORDER BY first_name, middle_name, last_name\nWhat is the first, middle, and last name of the earliest school graduate?. \nSELECT  SELECT  SELECT\n  first_name,\n  middle_name,\n  last_name\nFROM   addresses\nWHERE  first_name LIKE 'bob%' AND last_name LIKE 'bob%' AND middle_name IS NULL\nORDER BY first_name, middle_name, last_name\n\nWhat is the first, middle, and last name of the earliest school graduate?. \nSELECT  SELECT  SELECT\n  first_name,\n  middle_name,\n  last_name\nFROM   addresses\nWHERE  first_name LIKE 'bob%' AND last_name LIKE 'bob%' AND middle_name IS NULL\nORDER BY first_name, middle_name, last_name\n\nWhat is the first, middle, and last name of the earliest school graduate?. "}
{"question": "Whose permanent address is different from his or her current address? List his or her first name.", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhose permanent address is different from his or her current address? List his or her first name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhose permanent address is different from his or her current address? List his or her first name.. \nSELECT  SELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT "}
{"question": "What is the first name of the student whose permanent address is different from his or her current one?", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first name of the student whose permanent address is different from his or her current one?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first name of the student whose permanent address is different from his or her current one?. \n}
{"question": "Which address holds the most number of students currently? List the address id and all lines.", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich address holds the most number of students currently? List the address id and all lines.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich address holds the most number of students currently? List the address id and all lines.. \nSELECT  SELECT COUNT(Student_Enrolment_Courses.student_course_id) AS [# of students]\nFROM    Student_Enrolment Courses\nINNER JOIN Addresses\nON     Addresses.address_id = Courses.current_address_id\nINNER JOIN Sections\nON     Sections.section_id = Courses.course_id\nINNER JOIN Courses\nON     Courses.course_id = Sections.course_id\nINNER JOIN Students\nON     Students.student_id = Sections.section_id\nINNER JOIN Student_Enrolment\nON     Student_Enrolment.student_enrolment_id = Students.student_id\nWHERE   Courses.degree_program_id = 1 AND Courses.semester_id = 1\nGROUP BY Courses.course_id, Courses.current_address_id, Courses.section_id\nORDER BY Courses.course_id\n#Results: \n#Address ID | # of students\n----------------------------\n2           12\n#What is the name of the course with the most students? List the course_id and"}
{"question": "What is the id, line 1, and line 2 of the address with the most students?", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the id, line 1, and line 2 of the address with the most students?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the id, line 1, and line 2 of the address with the most students?. \nSELECT  SELECT  SELECT \n    \"addresses\".*\nFROM \"addresses\"\n    INNER JOIN \"sections\"\n        ON \"sections\".\"address_id\" = \"addresses\".\"id\"\n    INNER JOIN \"departments\"\n        ON \"departments\".\"address_id\" = \"addresses\".\"id\"\n    INNER JOIN \"semesters\"\n        ON \"semesters\".\"department_id\" = \"departments\".\"id\"\n    INNER JOIN \"sections\"\n        ON \"sections\".\"department_id\" = \"departments\".\"id\"\n    INNER JOIN \"sections\"\n        ON \"sections\".\"department_id\" = \"departments\".\"id\"\n    INNER JOIN \"sections\"\n        ON \"sections\".\"department_id\" = \"departments\".\"id\"\n    INNER JOIN \"sections\"\n        ON \"sections\".\"department_id\" = \"departments\".\"id\"\n    INNER JOIN \"sections\"\n        ON \"sections\".\"department_id\" = \"departments\".\"id\"\n    INNER JOIN \"sections\"\n        ON \"sections\".\""}
{"question": "On average, when were the transcripts printed?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nOn average, when were the transcripts printed?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nOn average, when were the transcripts printed?. \nSELECT  SELECT \n    Courses.course_id,\n    course_name,\n    course_description,\n    Department.department_id,\n    Department.department_name,\n    Department.department_description,\n    Other.other_details\nFROM     Student_Enrolment\n    JOIN  Student_Courses\n        ON Student_Courses.student_course_id = Student_Enrolment.course_id\n    JOIN  Courses\n        ON Courses.course_id = Student_Courses.course_id\n    JOIN  Departments\n        ON Departments.department_id = Courses.department_id\n    JOIN  Other\n        ON Other.department_id = Departments.department_id\nWHERE    Semester_id = 1\nGROUP BY Courses.course_id,\n        Other.department_id,\n        Other.other_details;\n\n\"\"\"\n\n\nclass SqliteDB(object):\n    def __init__(self, database_file):\n        if os.path.exists(database_file):\n            self.db = sqlite3.connect(database_file)"}
{"question": "What is the average transcript date?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the average transcript date?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the average transcript date?. \nSELECT  SELECT AVG(transcript_date) FROM student_enrolment_courses\nWhat is the average transcript date for a particular student?. \nSELECT AVG(transcript_date) FROM student_course\nWe can now ask what is the average transcript date for all students.\nWhat is the average transcript date for all students?. \nSELECT AVG(transcript_date) FROM student_transcripts_tracking\nWhat is the average transcript date for a particular student? \nWhat is the average transcript date for a particular student in a particular department?. \nSELECT AVG(transcript_date) FROM student_transcripts_tracking WHERE department_id = 1\nWhat is the average transcript date for a particular department?. \nSELECT AVG(transcript_date) FROM student_transcripts_tracking WHERE department_id = 1\n\n### Calling stored procedures\n\nNow that we have the data in a database, we can run queries and commands against it.\n\n#Define a student object and call the transcript_command function\n#Transcripts(transcript_id) is a stored procedure\nstudent = Student("}
{"question": "When is the first transcript released? List the date and details.", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhen is the first transcript released? List the date and details.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhen is the first transcript released? List the date and details.. \n}
{"question": "What is the earliest date of a transcript release, and what details can you tell me?", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the earliest date of a transcript release, and what details can you tell me?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the earliest date of a transcript release, and what details can you tell me?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT \n\n\nSELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT \nSELECT \n\n#all_courses('course_id', 'course_name', 'course_description', 'other_details')\n#all_department_details('department_id', 'department_name', 'department_description', 'other_details')\n#all_degree_program_details('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#all_sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#all_semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#all_transcript_details('transcript_id', 'transcript_date', 'other_details')\n#all"}
{"question": "How many transcripts are released?", "sql": "SELECT count(*) FROM Transcripts", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many transcripts are released?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many transcripts are released?. \nSELECT  SELECT STUDENT_ENROLMENT.SEM_ID, STUDENT_ENROLMENT.STUDENT_ID,\n    SUM(TRANSCRIPTS.TRANSCRIPT_DATE), COUNT(TRANSCRIPTS.TRANSCRIPT_DATE)\n    FROM STUDENT_ENROLMENT\n    JOIN SECTIONS ON SECTIONS.SEM_ID = STUDENT_ENROLMENT.SEM_ID\n    JOIN TRANSCRIPTS ON TRANSCRIPTS.TRANSCRIPT_ID = STUDENT_ENROLMENT.TRANSCRIPT_ID\n    WHERE STUDENT_ENROLMENT.STUDENT_ID = 1\n    GROUP BY STUDENT_ENROLMENT.SEM_ID, STUDENT_ENROLMENT.STUDENT_ID, TRANSCRIPTS.TRANSCRIPT_ID,\n    TRANSCRIPTS.TRANSCRIPT_DATE\n\nSELECT TRANSCRIPT_CONTENTS.SEM_ID, TRANSCRIPT_CONTENTS.STUDENT_COURSE_ID, TRANSCRIPTS.TRANSCRIPT_"}
{"question": "How many transcripts are listed?", "sql": "SELECT count(*) FROM Transcripts", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many transcripts are listed?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many transcripts are listed?. \nSELECT  SELECT_COUNT('student_course_id', 'transcript_id')\nA student with ID 106822 has 3 transcripts with ID 31948, 31949, and 31950. \nSELECT  SELECT_ID('student_course_id', 'transcript_id', 31948), \nSELECT_ID('student_course_id', 'transcript_id', 31949), \nSELECT_ID('student_course_id', 'transcript_id', 31950)\n\nHow many courses are listed?. \nSELECT  SELECT_COUNT('student_course_id', 'course_id')\nA student with ID 106822 has 18 courses with IDs 70000, 70001, 70002, 70003, 70004, \n70005, 70006, 70007, 70008, 70009, 7001"}
{"question": "What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the last transcript release date?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the last transcript release date?. \nSELECT  SELECT transcript_date\nFROM    transcripts\nWHERE    transcript_id = ?\n\nWhat is the next transcript release date?. \nSELECT  SELECT transcript_date\nFROM    transcripts\nWHERE    transcript_id = ?\n\nWhat is the last grade update date?. \nSELECT  SELECT last_grade_update_date\nFROM    student_transcripts_tracking\nWHERE    student_id = ?\n\nWhat is the next grade update date?. \nSELECT  SELECT last_grade_update_date\nFROM    student_transcripts_tracking\nWHERE    student_id = ?\n\nIs there any student enrolments in the system?. \nSELECT  EXISTS (SELECT student_enrolment_id\nFROM    student_transcripts_tracking\nWHERE    transcript_id = ?)\n\nIs there any grade update records in the system?. \nSELECT  EXISTS (SELECT transcript_id\nFROM    transcripts\nWHERE    last_grade_update_date <= ?)\n\nIs there any student records in the system?. \nSELECT  EXISTS (SELECT student_id\nFROM    student_transcripts_"}
{"question": "When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhen was the last transcript released?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhen was the last transcript released?. \nSELECT  SELECT  SELECT \ndate_received\n,date_of_issue\n,date_issued\nFROM  student_transcripts_tracking \nwhere \ntranscript_date is null\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.. \nSELECT  SELECT COUNT(c.course_id) FROM\n\n#student_transcripts_tracking_student_transcripts, student_transcripts_tracking_student_transcript_contents\n#SELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT  SELECT COUNT(c.course_id) FROM\n\nSELECT "}
{"question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?. \nSELECT  SELECT \n    MAX(SELECT MAX(enrolment_id) FROM student_enrolment WHERE student_course_id = course_id)\nFROM courses\n;\n\nSELECT \n    MAX(SELECT MAX(enrolment_id) FROM student_enrolment WHERE student_course_id = course_id)\nFROM courses\n;\n\nWhat is the maximum number of times that a transcript shows up in different courses and what is that transcript's enrollment id?. \nSELECT  SELECT \n    MAX(SELECT MAX(enrolment_id) FROM student_enrolment WHERE transcript_id = transcript_id)\nFROM transcripts\n;\n\nSELECT \n    MAX(SELECT MAX(enrolment_id) FROM student_enrolment WHERE transcript_id = transcript_id)\nFROM transcripts\n;\n\nSELECT \n    MAX(SELECT MAX(enrolment_id) FROM student_enrolment WHERE transcript_id = transcript_id)\nFROM transcripts\n;\n\nSELECT \n    MAX(SELECT MAX(enrolment_id) FROM student_enrolment WHERE student"}
{"question": "Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nShow the date of the transcript which shows the least number of results, also list the id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nShow the date of the transcript which shows the least number of results, also list the id.. \nSELECT  SELECTiveList.transcript_id\nFROM SELECTiveList\nORDER BY SELECTiveList.transcript_date DESC\n\nThis is the SQL to get the date of the transcript that shows the most number of results, also list the id.. \nSELECT  SELECTiveList.transcript_id\nFROM SELECTiveList\nORDER BY SELECTiveList.transcript_date ASC\n\nThis is the SQL to get the date of the transcript that shows the median number of results, also list the id.. \nSELECT  SELECTiveList.transcript_id\nFROM SELECTiveList\nGROUP BY SELECTiveList.transcript_id\nORDER BY ROUND(COUNT(SELECTiveList.transcript_id)/COUNT(DISTINCT SELECTiveList.transcript_id)) DESC\n\nThis is the SQL to get the date of the transcript that shows the most number of results, also list the id and the number of results, along with the actual results.. \nSELECT  SELECTiveList.transcript_id, COUNT(SELECTiveList.transcript_id) AS result_count, SELECTiveList.transcript_id\nFROM SELECTiveList\nORDER BY COUNT(SELECTiveList."}
{"question": "What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the date and id of the transcript with the least number of results?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the date and id of the transcript with the least number of results?. \nSELECT  SELECTed_Transcripts.Transcript_Id, \n           MIN(Transcripts.Transcript_Date) as 'First_Date', \n           MAX(Transcripts.Transcript_Date) as 'Last_Date', \n           MIN(Transcript_Contents.Transcript_Id) AS 'First_Transcript_Id', \n           MAX(Transcript_Contents.Transcript_Id) AS 'Last_Transcript_Id'\n\n\n\n\n\n  from Transcripts as Selected_Transcripts \n  join Transcript_Contents on \n    SELECTed_Transcripts.Transcript_Id =  Transcript_Contents.Transcript_Id\n    and Transcript_Contents.Transcript_Date <=  Transcript_Contents.Transcript_Date\n    and Transcript_Contents.Transcript_Date <  Transcript_Contents.Transcript_Date\n    and Transcript_Contents.Transcript_Id >  Transcript_Contents.Transcript_Id\n    and Transcript_Contents.Transcript_Id <  Transcript_Contents.Transcript_Id\n    and Transcript_Contents.Transcript_Id"}
{"question": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the semester when both Master students and Bachelor students got enrolled in.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the semester when both Master students and Bachelor students got enrolled in.. \nSELECT  SELECT * FROM Student_Enrolment \nWHERE (\n    ((106) = course_id) AND\n    ((4) = semester_id) AND\n    (\n    (1) = student_id)\n    )\n\nFind the student whose name contains the word \"Fletcher\"\nSELECT * FROM Student_Enrolment\nWHERE (\n    ((106) = course_id) AND\n    ((4) = semester_id) AND\n    (\n    (1) = student_id)\n    )\n\nFind the student whose name contains the word \"Fletcher\"\n\nSELECT \n    *\n    FROM Student_Enrolment\n    WHERE (\n    (\n    (1) = student_id\n    ) AND (\n    (\n    (106) = course_id) AND\n    ((4) = semester_id) AND\n    (\n    (1) = student_id)\n    )\n    )\n\nFor the following statements to work, the following database has to be created:\nCREATE TABLE IF NOT EXISTS Addresses (\n    address_id int,\n    line_1"}
{"question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the id of the semester that had both Masters and Bachelors students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the id of the semester that had both Masters and Bachelors students enrolled?. \nSELECT  SELECT \nFROM\nAddresses\nWHERE\n(line_1 LIKE '%Springfield%'\nOR line_2 LIKE '%Springfield%'\nOR line_3 LIKE '%Springfield%') \nAND (city LIKE '%Springfield%'\nOR zip_postcode LIKE '%Springfield%'\nOR state_province_county LIKE '%Springfield%') \nAND (country LIKE '%Springfield%'\nOR other_address_details LIKE '%Springfield%')\nGROUP BY\nline_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\nHAVING\nCOUNT(DISTINCT line_1) = 2 \nAND COUNT(DISTINCT line_2) = 2\nAND COUNT(DISTINCT line_3) = 2\nAND COUNT(DISTINCT city) = 2\nAND COUNT(DISTINCT zip_postcode) = 2\nAND COUNT(DISTINCT state_province_county) = 2\nAND COUNT(DISTINCT country) = 2\nAND COUNT(DISTINCT other_address_details) = 2\n"}
{"question": "How many different addresses do the students currently live?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different addresses do the students currently live?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different addresses do the students currently live?. \nSELECT  SELECT STUDENT_TRANSCRIPTS_TRACKING.DEPARTMENT_ID AS department_id,\n        SUM(STUDENT_TRANSCRIPTS_TRACKING.SECTION_ID) AS section_id,\n        SUM(STUDENT_TRANSCRIPTS_TRACKING.SEMESTER_ID) AS semester_id,\n        SUM(STUDENT_TRANSCRIPTS_TRACKING.CREDIT_UNITS) AS credit_units\n    FROM STUDENT_TRANSCRIPTS_TRACKING\n    GROUP BY STUDENT_TRANSCRIPTS_TRACKING.DEPARTMENT_ID\n    HAVING COUNT(STUDENT_TRANSCRIPTS_TRACKING.SECTION_ID) =\n    COUNT(STUDENT_TRANSCRIPTS_TRACKING.DEPARTMENT_ID)\n    AND COUNT(STUDENT_TRANSCRIPTS_TRACKING.SEMESTER_ID) =\n    COUNT(STUDENT_TRANSCRIPTS_TRACKING.SEMESTER_ID)\n    AND COUNT(STUDENT_TRAN"}
{"question": "What are the different addresses that have students living there?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the different addresses that have students living there?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the different addresses that have students living there?. \nSELECT  SELECT a.student_id, a.current_address_id, a.permanent_address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM student_addresses a\n\nWhat are all the courses that have a student enrolled in them? \nSELECT  SELECT d.student_id, d.course_id, d.section_id, d.semester_id, d.course_name, d.course_description, d.other_details FROM student_enrolment_courses d\n\nWhat are the departments and courses that have a student enrolled in them? \nSELECT  SELECT d.student_id, d.department_id, d.course_id, d.section_id, d.semester_id, d.course_name, d.course_description, d.other_details FROM student_enrolment_courses d\n\nWhat are the degrees and courses that a student is enrolled in? \nSELECT  SELECT"}
{"question": "List all the student details in reversed lexicographical order.", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nList all the student details in reversed lexicographical order.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nList all the student details in reversed lexicographical order.. \nSELECT  SELECT student_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, student_enrolment_id, student_course_id, transcript_id, transcript_date FROM student_enrolment WHERE semester_id = 4\n#Search for the student by her name\n#A. Student_name\n#B. Permanent address\n#C. Current address\n#D. Cell phone\n#E. Email address\n#F. SSN\n#G. Date of first registration\n#H. Date of leaving\n#I. Student enrolment ID\n#J. Student course ID\n#K. Transcript ID\n#L. Transcript date\n#M. Other details\n#N. Student details\n### Create an index for Student_name\n### Create an index for student_enrolment_id\n### Create an index for student_course_id\n\n#######\n####### Search for the student by her name\n#######\n\n#BEGIN SQL\n#SELECT  SELECT student_name, current_address"}
{"question": "What other details can you tell me about students in reverse alphabetical order?", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat other details can you tell me about students in reverse alphabetical order?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat other details can you tell me about students in reverse alphabetical order?. \n}
{"question": "Describe the section h.", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nDescribe the section h.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nDescribe the section h.. \nSELECT  SELECT  SELECT\n    STUDENT_ID,\n    SECTION_NAME,\n    SECTION_DESCRIPTION,\n    SECTION_NUMBER,\n    PERCENTAGE,\n    SECTION_CREDITS,\n    SECTION_PREREQUISITES,\n    SECTION_DEPARTMENT_ID,\n    DEGREE_SUMMARY_NAME,\n    DEGREE_SUMMARY_DESCRIPTION,\n    SECTION_ENROLLMENT_ID,\n    SECTION_DATE,\n    SECTION_START_DATE,\n    SECTION_END_DATE,\n    SECTION_GRADE,\n    SECTION_QUALIFIER,\n    SECTION_BIOGRAPHY,\n    SECTION_ANNOUNCEMENT,\n    SECTION_DEPARTMENT_DESCRIPTION,\n    SECTION_GRADING_SCALE,\n    SECTION_GRADE_SYSTEM_CREDIT,\n    SECTION_GRADE_SYSTEM_UNIT,\n    SECTION_GRADE_SYSTEM_"}
{"question": "What is the description for the section named h?", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the description for the section named h?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the description for the section named h?. \n}
{"question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .. \n}
{"question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?. \nSELECT  SELECT student_enrolment.student_id, first_name\nFROM student_enrolment, student_transcripts\nWHERE student_enrolment.degree_program_id = student_transcripts.degree_program_id AND student_transcripts.transcript_date = '12/17/2011 2:00:00 AM' AND student_enrolment.student_id = student_transcripts.student_id AND student_transcripts.student_course_id = 10195;\nThe results of the query is as shown below:\n\n"}
{"question": "List the title of all cartoons in alphabetical order.", "sql": "SELECT Title FROM Cartoon ORDER BY title", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all cartoons in alphabetical order.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all cartoons in alphabetical order.. \nSELECT  SELECT cartoon.title AS Cartoon, cartoon.id AS ID\nFROM cartoon\nGROUP BY title\nORDER BY title ASC\n\n#Select the highest rated TV show.. \nSELECT title, sum(rating) AS Rating\nFROM tvshow\nGROUP BY title\nORDER BY Rating DESC\n\n#Check which shows are on the same channel.. \nSELECT  title, channel\nFROM tvshow, cartoon\nWHERE tvshow.channel = cartoon.channel\n\n#The id of all cartoon show.. \nSELECT cartoon.id AS Id, cartoon.title AS Cartoon, cartoon.channel\nFROM cartoon\nGROUP BY cartoon.id, cartoon.title, cartoon.channel\nORDER BY cartoon.title ASC\n\n#Select cartoon show title and episode count.. \nSELECT title, sum(episode) AS Episode\nFROM cartoon\nGROUP BY title\nORDER BY title ASC\n\n#Select cartoon show title, average rating and episode count.. \nSELECT title, average(rating) AS Average, sum(episode) AS Episode\nFROM cartoon\nGROUP BY title\nORDER BY title ASC\n\n#Select"}
{"question": "What are the titles of the cartoons sorted alphabetically?", "sql": "SELECT Title FROM Cartoon ORDER BY title", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the titles of the cartoons sorted alphabetically?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the titles of the cartoons sorted alphabetically?. \nSELECT  SELECT  SELECT \nCartoon.id, \n(SELECT  Title \n  FROM   Cartoon \n  WHERE  Cartoon.id =  Cartoon.id), \nDirected_by, \nWritten_by, \nOriginal_air_date, \nProduction_code\nFROM   Cartoon\nORDER BY 1;\n\"\"\"\n\n# Really Simple, just a query that checks if the channel_id exists\nCHANNEL_ID_COUNT = 0\nCHANNEL_IDS = 0\nCHANNEL_IDS_MAX = 0\n\n# Checks if the cartoon_id exists\nCARTOON_ID_COUNT = 0\nCARTOON_IDS = 0\nCARTOON_IDS_MAX = 0\n\n\ndef main():\n    channel_id_count = 0\n    channel_id_count_max = 0\n    cartoon_id_count = 0\n    cartoon_id_count_max = 0\n    for line in cartoon_title_info():\n        channel_id_count = 0"}
{"question": "List all cartoon directed by \"Ben Jones\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList all cartoon directed by \"Ben Jones\".. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList all cartoon directed by \"Ben Jones\".. \nSELECT  SELECT DISTINCT *\nFROM    (\n        SELECT   t1.title, t1.directed_by, t1.written_by, t1.original_air_date, t1.production_code, t1.channel\n        FROM     cartoon t1\n        WHERE    t1.title like 'Ben%'\n        ) AS t1\nWHERE    t1.directed_by = 'Ben Jones'\n\\end{code}\n\nAnswer: Try this:\n\n\\begin{code}\nSELECT\n    t1.title,\n    t1.directed_by,\n    t1.written_by,\n    t1.original_air_date,\n    t1.production_code,\n    t1.channel\nFROM cartoon t1\nWHERE t1.title like 'Ben%'\nGROUP BY t1.title\nHAVING t1.directed_by = 'Ben Jones'\n\\end{code}\n\nComment: Nope, its still returning 0 results. My understanding of the GROUP BY is that it returns one row for each distinct value.\n\nComment: @Marek: He is selecting a"}
{"question": "What are the names of all cartoons directed by Ben Jones?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the names of all cartoons directed by Ben Jones?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the names of all cartoons directed by Ben Jones?. \nSELECT  SELECT DISTINCT TV_Series.Series_Name AS series_name, Cartoon.Title AS cartoon_title, Cartoon.Director AS cartoon_director, Cartoon.Writer AS cartoon_writer, Cartoon.Original_Air_Date AS air_date, Cartoon.Production_Code AS production_code FROM Cartoon, TV_Series WHERE Cartoon.Channel = TV_Series.Channel AND Cartoon.Series_Name LIKE 'Ben%'; \n\nWhat are the names of all cartoons written by Mike Reiss?. \nSELECT  SELECT DISTINCT TV_Series.Series_Name AS series_name, Cartoon.Title AS cartoon_title, Cartoon.Director AS cartoon_director, Cartoon.Writer AS cartoon_writer, Cartoon.Original_Air_Date AS air_date, Cartoon.Production_Code AS production_code FROM Cartoon, TV_Series WHERE Cartoon.Channel = TV_Series.Channel AND Cartoon.Series_Name LIKE 'Mike%'; \n\nWhat are the names of all cartoons directed by Tom Ruegger?. \nSELECT  SELECT DISTINCT TV"}
{"question": "How many cartoons were written by \"Joseph Kuhr\"?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many cartoons were written by \"Joseph Kuhr\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many cartoons were written by \"Joseph Kuhr\"?. \n}
{"question": "What is the number of cartoones written by Joseph Kuhr?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the number of cartoones written by Joseph Kuhr?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the number of cartoones written by Joseph Kuhr?. \nSELECT  SELECT DISTINCT series.id\nFROM series, cartoones\nWHERE series.id = cartoones.series_id;\n\nSELECT  SELECT DISTINCT series.id, series.name\nFROM series, cartoones\nWHERE series.id = cartoones.series_id;\n\nSELECT  SELECT DISTINCT series.id, series.name, series.genre, series.image\nFROM series, cartoones\nWHERE series.id = cartoones.series_id;\n\nSELECT  SELECT DISTINCT series.id, series.name, series.genre, series.image, series.information_text\nFROM series, cartoones\nWHERE series.id = cartoones.series_id;\n\nSELECT  SELECT DISTINCT series.id, series.name, series.genre, series.image, series.information_text, series.description\nFROM series, cartoones\nWHERE series.id = cartoones.series_id;\n\nSELECT  SELECT DISTINCT series.id, series.name, series.genre, series.image, series.information_text, series.description, series.season, series.ep"}
{"question": "list all cartoon titles and their directors ordered by their air date", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nlist all cartoon titles and their directors ordered by their air date. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nlist all cartoon titles and their directors ordered by their air date. \nSELECT  SELECT cartoon.id, cartoon.title, directors.name FROM cartoon\nINNER JOIN directors\nON directors.id = cartoon.directors_id\nORDER BY cartoon.air_date\n# The cartoon table:\nCREATE TABLE `cartoon` (\n`id` INTEGER NOT NULL PRIMARY KEY,\n`title` VARCHAR(255) NOT NULL,\n`directors_id` INTEGER NOT NULL,\n`air_date` DATE NOT NULL\n)\n# The directors table\nCREATE TABLE `directors` (\n`id` INTEGER NOT NULL PRIMARY KEY,\n`name` VARCHAR(255) NOT NULL\n)\n# Cartoon directors are only allowed to have one directing credit, so a directors_id column is needed\n# Cartoon table also has an air date field. We can use this table to show the most popular cartoons\n# and their directors by weekly rank.\n# We will generate a new table to hold all the data we need:\n# The cartoon table (Cartoon_data)\nCREATE TABLE `cartoon_data` (\n`cartoon_id`"}
{"question": "What is the name and directors of all the cartoons that are ordered by air date?", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the name and directors of all the cartoons that are ordered by air date?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the name and directors of all the cartoons that are ordered by air date?. \nSELECT  SELECT name\nFROM    cartoon\nWHERE    air_date <= '2018-09-02';\n\n#Different methods for filtering the data\n#1. Dates (Air_Date)\n#2. Columns (Name)\n#3. Filters (Name = 'Mickey')\n#4. Exists (Name = 'Mickey')\n#5. Empty (Name = '')\n#6. 'Select * from Table' (Name = '')\n#7. Fields (Name = '')\n\n#What is the directors of all cartoons that are ordered by name?. \nSELECT  SELECT name, directors\nFROM    cartoon\nWHERE    name = 'Mickey';\n\n#What is the directors of all cartoons that are ordered by name?. \nSELECT  SELECT name, directors\nFROM    cartoon\nWHERE    name = '';\n\n#What is the directors of all cartoons that are ordered by name?. \nSELECT  SELECT name, directors\nFROM    cartoon\nWHERE    name = 'Mickey';\n\n#What is the directors of all cartoons"}
{"question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".. \n}
{"question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the titles of all cartoons directed by Ben Jones or Brandon Vietti?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the titles of all cartoons directed by Ben Jones or Brandon Vietti?. \nSELECT  SELECT title, \n          (SELECT  DISTINCT series FROM cartoon WHERE title = 'Batman: The Animated Series' AND directors LIKE '%Ben Jones') AS Ben_Jones,\n          (SELECT  DISTINCT series FROM cartoon WHERE title = 'Batman: The Animated Series' AND directors LIKE '%Brandon Vietti') AS Brandon_Vietti,\n          (SELECT  DISTINCT series FROM cartoon WHERE title = 'Batman Beyond') AS Batman_Beyond,\n          (SELECT  DISTINCT series FROM cartoon WHERE title = 'Superman: The Animated Series') AS Superman,\n          (SELECT  DISTINCT series FROM cartoon WHERE title = 'Batman: The Brave and the Bold') AS Batman_Brave\nFROM cartoon\nORDER BY 1\n\nNow, what are the titles of all cartoons directed by Ben Jones or Brandon Vietti?. \nSELECT  SELECT title, \n          (SELECT  DISTINCT series FROM cartoon WHERE title = 'Batman: The Animated Series' AND directors LIKE '%Ben Jones') AS Ben_Jones,"}
{"question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhich country has the most of TV Channels? List the country and number of TV Channels it has.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhich country has the most of TV Channels? List the country and number of TV Channels it has.. \nSELECT  SELECT COUNT(*) FROM \"TV_Channel\" WHERE \n    \"Channel\".country = \"Europe\" AND \"Channel\".name = \"BBC One\"\n    GROUP BY \"Channel\".country\n\nWhich country has the most of TV Series? List the country and number of TV Series it has.. \nSELECT  SELECT COUNT(*) FROM \"TV_Series\" WHERE \n    \"Series\".country = \"Europe\" AND \"Series\".title = \"The Bill\"\n    GROUP BY \"Series\".country\n\nWhich country has the most of Cartoons? List the country and number of Cartoons it has.. \nSELECT  SELECT COUNT(*) FROM \"Cartoon\" WHERE \n    \"Cartoon\".country = \"Europe\" AND \"Cartoon\".title = \"SpongeBob SquarePants\"\n    GROUP BY \"Cartoon\".country\n\n\n# Create a table called movies\n# INSERT INTO movies (title, year) VALUES ('Star Wars', '1977'), ('The Shawshank Redemption', '1994');\n\n# Now insert the first row of data from the \"Movies\" table into the \"Movies\" table\nINSERT INTO"}
{"question": "What is the country with the most number of TV Channels and how many does it have?", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the country with the most number of TV Channels and how many does it have?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the country with the most number of TV Channels and how many does it have?. \nSELECT  SELECT \n\tDISTINCT\n\tCOUNT(DISTINCT tv_channel.country) AS count_countries, \n\tDISTINCT\n\tCOUNT(DISTINCT tv_channel.country) \nFROM \n\ttv_channel\nGROUP BY\n\tDISTINCT\n\ttv_channel.country;\n\nWhat is the highest rated TV show?\nSELECT \n\tSELECT \n\t\tRANK() OVER (PARTITION BY tv_channel.series_name ORDER BY Rating DESC) AS rank, \n\t\ttv_channel.Series_Name, \n\t\ttv_channel.Country\nFROM \n\ttv_channel\nGROUP BY \n\ttv_channel.Series_Name, tv_channel.Country;\n\nWhat is the highest rated TV show in India?\nSELECT \n\tSELECT \n\t\tRANK() OVER (PARTITION BY tv_channel.series_name ORDER BY Rating DESC) AS rank, \n\t\ttv_channel.Series_Name, \n\t\ttv_channel.Country\nFROM \n\ttv_channel\nWHERE \n\ttv_channel.Country LIKE 'Ind"}
{"question": "List the number of different series names and contents in the TV Channel table.", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the number of different series names and contents in the TV Channel table.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the number of different series names and contents in the TV Channel table.. \n}
{"question": "How many different series and contents are listed in the TV Channel table?", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many different series and contents are listed in the TV Channel table?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many different series and contents are listed in the TV Channel table?. \nSELECT  SELECT \ntv_series.*\nFROM \ntv_series \nINNER JOIN \n(\n    SELECT \n        series_name\n    FROM \n        tv_channel\n)\n    series_name_table ON \n    tv_series.series_name = series_name_table.series_name\n    AND tv_series.Channel = series_name_table.Channel\n\n \n\nHow many different series are there in the TV series table?.\nSELECT  SELECT \ntv_series.*\nFROM \ntv_series \nINNER JOIN \n(\n    SELECT \n        series_name\n    FROM \n        tv_series\n)\n    series_name_table ON \n    tv_series.series_name = series_name_table.series_name\n    AND tv_series.Channel = series_name_table.Channel\n\n \n\nHow many different series are there in the TV series table?.\nSELECT  SELECT \ntv_series.*\nFROM \ntv_series \nINNER JOIN \n(\n    SELECT \n        series_name\n    FROM \n        tv_series\n)\n    series"}
{"question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the content of TV Channel with serial name \"Sky Radio\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the content of TV Channel with serial name \"Sky Radio\"?. \nSELECT  SELECT * FROM \"TV_Channel\" WHERE \"series_name\" = 'Sky Radio' ORDER BY \"Series_Name\";\n* 2017-10-19 16:16:55.089 SQLEngine[20516:2056543] -[TV_Channel.TV_Channel(id:58) valueForUndefinedKey:]: this class is not key value coding-compliant for the key series_name.\n2017-10-19 16:16:55.100 SQLEngine[20516:2056543] -[TV_Channel.TV_Channel(id:58) setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key series_name.\n2017-10-19 16:16:55.105 SQLEngine[20516:2056543] *** Terminating app due to uncaught exception 'NSInvalidArgument"}
{"question": "What is the content of the series Sky Radio?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the content of the series Sky Radio?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the content of the series Sky Radio?. \nSELECT  SELECT * FROM Sky_Radio WHERE 1 = 0\n#\n#\nSELECT  * FROM Sky_Radio;\nSELECT  * FROM Sky_Radio WHERE 1 = 0\n#\n#\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n\n# EXAMPLE 2:\n# ----------------------------------------------------------------------------------------------------------------------\n# CREATE the TV shows series table\nCREATE_TABLE('TV_Series','id','title','air_date','rating','share','18_49_rating_share','viewers_m','weekly_rank','channel')\n\n# INSERT the data to TV shows series table\nINSERT_DATA('TV_Series','id','title','air_date','rating','share','18_49_rating_share','viewers_m','weekly_rank','channel')\n\n# EXAMPLE 3:\n# ----------------------------------------------------------------------------------------------------------------------\n# CREATE the tv shows episode table\nCREATE_TABLE('TV_Episode','id','title','air_date','rating','share','18_49_rating_share','viewers_m','weekly_rank','series_id')\n\n"}
{"question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the Package Option of TV Channel with serial name \"Sky Radio\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the Package Option of TV Channel with serial name \"Sky Radio\"?. \nSELECT  SELECT TITLE, SERIES_NAME, PAR_PAR, PAR_PAR, HIGH_DEFINITION, PAY_PER_VIEW, PACKAGE_OPTION, Channel FROM TV_CHANNEL WHERE SERIES_NAME = 'Sky Radio';\n\n#CREATE_TABLE \"TV_series\"\n#CREATE_TABLE \"TV_Channel\"\n#CREATE_TABLE \"Cartoon\"\n#CREATE_TABLE \"Cartoon_Name\"\n\n#What is the Package Option of TV Channel with serial name \"Sky Radio\"?. \nSELECT  PACKAGE_OPTION FROM TV_CHANNEL WHERE SERIES_NAME = 'Sky Radio'"}
{"question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the Package Options of the TV Channels whose series names are Sky Radio?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the Package Options of the TV Channels whose series names are Sky Radio?. \nSELECT  SELECT   TV_Channel.*, (SELECT tvshow.title FROM tvshow WHERE tvshow.title = 'Sky Radio' AND tvshow.type = 'Series') AS Series,\n(SELECT tvshow.title FROM tvshow WHERE tvshow.title = 'Sky Radio' AND tvshow.type = 'Series') AS Series, \n(SELECT tvshow.title FROM tvshow WHERE tvshow.title = 'Sky Radio' AND tvshow.type = 'Series') AS Series, \n(SELECT tvshow.title FROM tvshow WHERE tvshow.title = 'Sky Radio' AND tvshow.type = 'Series') AS Series, \n(SELECT tvshow.title FROM tvshow WHERE tvshow.title = 'Sky Radio' AND tvshow.type = 'Series') AS Series,\n(SELECT tvshow.title FROM tvshow WHERE tvshow.title = 'Sky Radio' AND tvshow.type = 'Series') AS Series, \n(SELECT tvshow.title FROM tvshow WHERE tvshow.title = 'Sky Radio' AND tvshow.type = 'Series') AS Series, \n(SELECT tvshow.title FROM tvshow WHERE tvshow.title"}
{"question": "How many TV Channel using language English?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many TV Channel using language English?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many TV Channel using language English?. \nSELECT  SELECT COUNT(*) as total FROM tv_channel WHERE Language='English'\n\nHow many TV Channel using language German?. \nSELECT  SELECT COUNT(*) as total FROM tv_channel WHERE Language='German'\n\nHow many TV Channel using language Italian?. \nSELECT  SELECT COUNT(*) as total FROM tv_channel WHERE Language='Italian'\n\nHow many TV Channel using language Spanish?. \nSELECT  SELECT COUNT(*) as total FROM tv_channel WHERE Language='Spanish'\n\nHow many TV Channel using language French?. \nSELECT  SELECT COUNT(*) as total FROM tv_channel WHERE Language='French'\n\nHow many TV Channel using language Turkish?. \nSELECT  SELECT COUNT(*) as total FROM tv_channel WHERE Language='Turkish'\n\nHow many TV Channel using language Russian?. \nSELECT  SELECT COUNT(*) as total FROM tv_channel WHERE Language='Russian'\n\nHow many TV Channel using language Portuguese?. \nSELECT  SELECT COUNT(*) as total FROM tv_channel WHERE Language='Portuguese'\n\nHow many TV Channel using language Dutch?. \nSELECT  SELECT COUNT(*) as total FROM tv_channel WHERE Language='Dutch'\n\nHow many TV Channel using language Japanese"}
{"question": "How many TV Channels use the English language?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many TV Channels use the English language?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many TV Channels use the English language?. \nSELECT  SELECT \n\t\t\t\t\t\t\tCOUNT(CASE WHEN `Channel`.`Language`='en' THEN 1 END) AS en_count,\n\t\t\t\t\t\t\tCOUNT(CASE WHEN `Channel`.`Language`='en-US' THEN 1 END) AS en_US_count,\n\t\t\t\t\t\t\tCOUNT(CASE WHEN `Channel`.`Language`='en-GB' THEN 1 END) AS en_GB_count\n\t\t\t\t\t\tFROM `Channel`\n\t\t\t\t\t\tWHERE `Channel`.`Language`!=''\n\t\t\t\t\t\tGROUP BY `Channel`.`ID`\n\t\t\t\t\t\tORDER BY `en_count` DESC\n\t\t\t\t\t\tLIMIT 30;\n\n###\n#Cartoon:\nSELECT  COUNT(CASE WHEN `Channel`.`Language`='en-US' THEN 1 END) AS en_US_count,\n\t\t\t\t\t\t\tCOUNT(CASE WHEN `Channel`.`Language`='en' THEN 1 END) AS en_count,\n\t\t\t\t\t\t\tCOUNT(CASE WHEN `Channel`.`Language`='en-GB"}
{"question": "List the language used least number of TV Channel. List language and number of TV Channel.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the language used least number of TV Channel. List language and number of TV Channel.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the language used least number of TV Channel. List language and number of TV Channel.. \nSELECT  SELECT language, COUNT(id) AS count FROM TV_Channel GROUP BY language;\nSELECT  SELECT language, COUNT(id) AS count FROM TV_Series GROUP BY language;\nSELECT  SELECT language, COUNT(id) AS count FROM Cartoon GROUP BY language;\nSELECT  SELECT language, COUNT(id) AS count FROM TV_Channel;\nSELECT  SELECT language, COUNT(id) AS count FROM TV_Series;\nSELECT  SELECT language, COUNT(id) AS count FROM Cartoon;\nSELECT  SELECT language, COUNT(id) AS count FROM TV_Channel;\nSELECT  SELECT language, COUNT(id) AS count FROM TV_Series;\nSELECT  SELECT language, COUNT(id) AS count FROM Cartoon;\n\n\n\n#SQLite TV show database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_"}
{"question": "What are the languages used by the least number of TV Channels and how many channels use it?", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the languages used by the least number of TV Channels and how many channels use it?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the languages used by the least number of TV Channels and how many channels use it?. \nSELECT  SELECT tv_channel.series_name AS Series_Name, COUNT(tv_channel.series_name) AS Count FROM tv_channel GROUP BY tv_channel.series_name ORDER BY Count DESC LIMIT 10\nSELECT  SELECT tv_series.series_name AS Series_Name, COUNT(tv_series.series_name) AS Count FROM tv_series GROUP BY tv_series.series_name ORDER BY Count DESC LIMIT 10\nSELECT  SELECT cartoon.title AS Cartoon_Name, COUNT(cartoon.title) AS Count FROM cartoon GROUP BY cartoon.title ORDER BY Count DESC LIMIT 10\n\nSELECT  SELECT tv_channel.series_name AS Series_Name, COUNT(tv_channel.series_name) AS Count, COUNT(tv_channel.country) AS Count_Country FROM tv_channel GROUP BY tv_channel.series_name ORDER BY Count_Country DESC LIMIT 10\nSELECT  SELECT tv_series.series_name AS Series_Name, COUNT(tv_series.series_name) AS Count, COUNT(tv_series.country) AS Count_Country FROM tv_series GROUP BY tv_series.series_name ORDER BY Count"}
{"question": "List each language and the number of TV Channels using it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList each language and the number of TV Channels using it.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList each language and the number of TV Channels using it.. \nSELECT  SELECT \"LANGUAGE\" , COUNT(*) FROM TV_Series\nWHERE \"Series_name\" = 'Breaking Bad'\nAND \"Series_name\" = 'Homeland'\nAND \"Series_name\" = 'Dexter'\nAND \"Series_name\" = 'Justified'\nAND \"Series_name\" = 'Game of Thrones'\nAND \"Series_name\" = 'Boardwalk Empire'\nAND \"Series_name\" = 'Spartacus: Blood and Sand'\nAND \"Series_name\" = 'HawthoRNe'\nAND \"Series_name\" = 'Sons of Anarchy'\nAND \"Series_name\" = 'The Walking Dead'\nAND \"Series_name\" = 'The Killing'\nAND \"Series_name\" = 'Dexter'\nAND \"Series_name\" = 'The Walking Dead'\nAND \"Series_name\" = 'The Tudors'\nAND \"Series_name\" = 'The Borgias'\nAND \"Series_name\" = 'Damages'\nAND \"Series_name\" = 'The White Queen'\nAND \"Series_name\" = '"}
{"question": "For each language, list the number of TV Channels that use it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFor each language, list the number of TV Channels that use it.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFor each language, list the number of TV Channels that use it.. \nSELECT  SELECT DISTINCT s.id AS id, \n            s.Series_name AS Series_name, \n            s.Country AS Country, \n            s.Language AS Language, \n            s.Content AS Content, \n            s.Pixel_aspect_ratio_PAR AS Pixel_aspect_ratio_PAR, \n            s.Hight_definition_TV AS Hight_definition_TV, \n            s.Pay_per_view_PPV AS Pay_per_view_PPV, \n            s.Package_Option AS Package_Option \nFROM  tv_series s \nWHERE s.Channel= 'TV_Channel' \nGROUP BY s.id, s.Series_name, s.Country, s.Language, s.Content, s.Pixel_aspect_ratio_PAR, s.Hight_definition_TV, s.Pay_per_view_PPV, s.Package_Option \nORDER BY s.id\n\nSELECT  SELECT DISTINCT s.id AS id, \n            s.Episode AS Episode, \n            s.Air_Date AS Air_"}
{"question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.. \nSELECT  SELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT "}
{"question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?. \nSELECT  SELECT * FROM \nTV_Series.id,\nTV_Series.Episode,\nTV_Series.Air_Date,\nTV_Series.Rating,\nTV_Series.Share,\nTV_Series.18_49_Rating_Share,\nTV_Series.Viewers_m,\nTV_Series.Weekly_Rank,\nTV_Series.Channel \nWHERE TV_Series.Channel = TV_Channel.id\nAND TV_Series.Episode = 'The Rise of the Blue Beetle'\nAND TV_Series.Air_Date = 'July 28, 2017 10:00 PM';\n\nWhat is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? \nSELECT  SELECT * FROM \nTV_Series.id,\nTV_Series.Episode,\nTV_Series.Air_Date,\nTV_Series.Rating,\nTV_Series.Share,\nTV_Series.18_49_Rating_Share,\nTV_Series.Viewers_m,"}
{"question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".. \nSELECT  SELECT_SCOPE_STMT.SELECT_FROM_TVSHOWS_AND_CARTOONS_AND_TVCHANNELS_AND_TVSERIES\n  FROM\n  SELECT_SCOPE_STMT.SELECT_FROM_TVSHOWS_AND_CARTOONS_AND_TVCHANNELS_AND_TVSERIES\n   WHERE\n    SELECT_SCOPE_STMT.SELECT_FROM_TVSHOWS_AND_CARTOONS_AND_TVCHANNELS_AND_TVSERIES.SEARCH_BY_TERMS = \"Sky Radio\";\n\n# Add the groupby and having on the SELECT statement to sort by series name and groupby the title\n# List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".. \nSELECT  SELECT_SCOPE_STMT.SELECT_FROM_TVSHOWS_AND_CARTOONS_AND_TVCHANNELS_AND_TVSERIES\n  FROM\n  SELECT_SCOPE_STMT.SELECT_FROM_TVSHO"}
{"question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?. \nSELECT  SELECT Cartoon.title, Cartoon.directed_by, Cartoon.written_by, Cartoon.original_air_date, Cartoon.production_code, Cartoon.channel FROM Cartoon LEFT OUTER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id LEFT OUTER JOIN TV_series ON Cartoon.series = TV_series.id WHERE TV_series.title = 'Sky Radio'\nWhat is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\" that have an air date of 2014-12-26? \nSELECT  SELECT Cartoon.title, Cartoon.directed_by, Cartoon.written_by, Cartoon.original_air_date, Cartoon.production_code, Cartoon.channel FROM Cartoon LEFT OUTER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id LEFT OUTER JOIN TV_series ON Cartoon.series = TV_series.id WHERE TV_series.air_date = '2014-12-26'\nWhat is the title of all the cartools that are on the TV Channel with"}
{"question": "List the Episode of all TV series sorted by rating.", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the Episode of all TV series sorted by rating.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the Episode of all TV series sorted by rating.. \nSELECT  SELECT  SELECT\nid,  episode, air_date,   rating, share,\n18_49_rating_share, viewers_m, weekly_rank, channel\nFROM tv_series\nWHERE air_date > '2016-02-14'\nORDER BY rating DESC;\n\n\n# THANKS FOR READING!\n"}
{"question": "What are all of the episodes ordered by ratings?", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are all of the episodes ordered by ratings?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are all of the episodes ordered by ratings?. \nSELECT  SELECT tvshow.id, \n          title, \n          air_date,\n          rating,\n          share, \n          18_49_rating_share,\n          viewers_m, \n          weekly_rank,\n          channel,\n          series.episode,\n          directed_by,\n          written_by,\n          original_air_date,\n          production_code\n  FROM series, tvshow \n  WHERE series.id = tvshow.series_id \n  ORDER BY rating DESC, share DESC, viewers_m DESC\n\nWhat are the top 25 movies with the most viewers? \nSELECT  SELECT tvshow.id,\n          title,\n          air_date,\n          rating,\n          share, \n          18_49_rating_share,\n          viewers_m, \n          weekly_rank,\n          channel,\n          series.episode,\n          directed_by,\n          written_by,\n          original_air_date,\n          production_code\n  FROM series, tvshow \n  WHERE series.id = tvshow"}
{"question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList top 3 highest Rating  TV series. List the TV series's Episode and Rating.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList top 3 highest Rating  TV series. List the TV series's Episode and Rating.. \nSELECT  SELECT * FROM TV_series WHERE Rating > ( SELECT MAX(Rating) FROM TV_series) ORDER BY Rating; \nSELECT SELECT * FROM TV_series WHERE Rating <= ( SELECT MIN(Rating) FROM TV_series) ORDER BY Rating;\n\n\n\n#def TV_series(id, title, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel):\n#    tvseries = {}\n#    tvseries[\"id\"] = id\n#    tvseries[\"title\"] = title\n#    tvseries[\"air_date\"] = air_date\n#    tvseries[\"rating\"] = rating\n#    tvseries[\"share\"] = share\n#    tvseries[\"18_49_rating_share\"] = 18_49_rating_share\n#    tvseries[\"viewers_m\"] = viewers_m\n#    tvseries[\"weekly_rank\"] = weekly_rank\n#    tvseries[\"channel\"] = channel\n#    return tvseries\n#\n#def TV_Channel(id, series_name, country, language"}
{"question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are 3 most highly rated episodes in the TV series table and what were those ratings?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are 3 most highly rated episodes in the TV series table and what were those ratings?. \nSELECT  SELECT tvshow.id, tvshow.series_name, COUNT(tvshow.tvshow_episode) AS episodes, avg(tvshow.tvshow_episode_rating) as average_rating, avg(tvshow.tvshow_episode_share) as average_share, min(tvshow.tvshow_episode_rating), max(tvshow.tvshow_episode_rating) from tvshow group by tvshow.id\n\nSELECT  SELECT tvshow.id, avg(tvshow.tvshow_series_air_date) as average_air_date, max(tvshow.tvshow_series_air_date) as max_air_date from tvshow group by tvshow.id\n\nSELECT  SELECT avg(tvshow.tvshow_series_episode) as average_episode, max(tvshow.tvshow_series_episode) as max_episode from tvshow group by tvshow.id\n\n\nSELECT  SELECT avg(tvshow.tvshow_series_air_date) as average_air_date, max(tvshow.tvshow"}
{"question": "What is minimum and maximum share of TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is minimum and maximum share of TV series?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is minimum and maximum share of TV series?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n}
{"question": "What is the maximum and minimum share for the TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the maximum and minimum share for the TV series?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the maximum and minimum share for the TV series?. \nSELECT  SELECT MAX(Share), MIN(Share) FROM \"TV_series\" \nWhat is the maximum and minimum rating for the TV series?. \nSELECT  SELECT MAX(Rating), MIN(Rating) FROM \"TV_series\" \nWhat is the maximum and minimum 18-49 rating for the TV series?. \nSELECT  SELECT MAX(18_49_Rating_Share), MIN(18_49_Rating_Share) FROM \"TV_series\" \nWhat is the maximum and minimum viewers for the TV series?. \nSELECT  SELECT MAX(Viewers_m), MIN(Viewers_m) FROM \"TV_series\" \nWhat is the maximum and minimum weekly ranking for the TV series?. \nSELECT  SELECT MAX(Weekly_Rank), MIN(Weekly_Rank) FROM \"TV_series\" \nWhat is the maximum and minimum 'id' of the TV series?. \nSELECT  SELECT MAX(id), MIN(id) FROM \"TV_series\" \n\n#the Min and Max 'id' of the TV series are 205 and "}
{"question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the air date of TV series with Episode \"A Love of a Lifetime\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the air date of TV series with Episode \"A Love of a Lifetime\"?. \nSELECT  SELECT  SELECT  SELECT\n  show.series_name,\n  show.Channel,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  Episode,\n  air_date,\n  Rating,\n  Share,\n  E"}
{"question": "When did the episode \"A Love of a Lifetime\" air?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhen did the episode \"A Love of a Lifetime\" air?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhen did the episode \"A Love of a Lifetime\" air?. \n}
{"question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?. \nSELECT  SELECT *, TV_series.Weekly_Rank\nFROM TV_series\nWHERE TV_series.Episode = \"A Love of a Lifetime\";\n#SELECT 1 AS \"Weekly Rank\", 'The Wonder Years' AS \"Series_Name\", 'ABC' AS \"Channel\", '1988-1993' AS \"Time\", '1988-1993' AS \"Original_Air_Date\", 0 AS \"Rating\", 0 AS \"Share\", '70' AS \"18_49_Rating_Share\", 0 AS \"Viewers_m\", 31 AS \"Weekly_Rank\";\n#Hit \nSELECT 1 AS \"Weekly Rank\", 'Frasier' AS \"Series_Name\", 'NBC' AS \"Channel\", '2001-2004' AS \"Time\", '2001-2004' AS \"Original_Air_Date\", 0 AS \"Rating\", 0 AS \"Share\", '70' AS \"18_49_Rating_Share\", 0 AS \"View"}
{"question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the weekly rank for the episode \"A Love of a Lifetime\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the weekly rank for the episode \"A Love of a Lifetime\"?. \n}
{"question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.. \nSELECT  SELECT \n'TV_Channel' AS \"Source\",\n'A Love of a Lifetime' AS \"Title\",\n'CBS',\n'English',\n'Animation',\n'1.778',\n'HDTV',\n'PPV',\n'CSI: Crime Scene Investigation' AS \"Channel\"\nFROM \n    (SELECT \n        'Channel' AS \"Source\",\n        Episode AS \"Title\",\n        'CBS' AS \"Country\",\n        'English' AS \"Language\",\n        'Animation' AS \"Content\",\n        '1.778' AS \"Pixel_aspect_ratio_PAR\",\n        'HDTV' AS \"High_definition_TV\",\n        'PPV' AS \"Pay_per_view_PPV\",\n        'Package_Option' AS \"Channel\"\n    FROM \n        (SELECT \n            Episode AS \"Title\",\n            'CBS' AS \"Channel\",\n            'CSI: Crime Scene Investigation' AS \"Country\",\n            'English' AS \"Language\",\n            'Animation' AS \"Content\",\n            '1.778"}
{"question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the name of the series that has the episode \"A Love of a Lifetime\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the name of the series that has the episode \"A Love of a Lifetime\"?. \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".. \n}
{"question": "What is the episode for the TV series named \"Sky Radio\"?", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the episode for the TV series named \"Sky Radio\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the episode for the TV series named \"Sky Radio\"?. \nSELECT  SELECT \n  TV_Channel.id,\n  TV_Channel.series_name,\n  TV_Channel.Country,\n  TV_Channel.Language,\n  TV_Channel.Content,\n  TV_Channel.Pixel_aspect_ratio_PAR,\n  TV_Channel.Hight_definition_TV,\n  TV_Channel.Pay_per_view_PPV,\n  TV_Channel.Package_Option,\n  TV_series.id,\n  TV_series.Episode,\n  TV_series.Air_Date,\n  TV_series.Rating,\n  TV_series.Share,\n  TV_series.18_49_Rating_Share,\n  TV_series.Viewers_m,\n  TV_series.Weekly_Rank,\n  TV_series.Channel,\n  Cartoon.id,\n  Cartoon.Title,\n  Cartoon.Directed_by,\n  Cartoon.Written_by,\n  Cartoon.Original_air_date,\n  Cartoon.Production_code,\n  Cartoon.Channel\nFROM\n"}
{"question": "Find the number of cartoons directed by each of the listed directors.", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the number of cartoons directed by each of the listed directors.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the number of cartoons directed by each of the listed directors.. \nSELECT  SELECT DISTINCT C.id,\n           COUNT(DISTINCT C.id)\n           FROM cartoon C\n           INNER JOIN director D\n                  ON D.id = C.director_id\n           GROUP BY C.id, D.id;\n\n#\n# SELECT  SELECT DISTINCT C.id,\n#           COUNT(DISTINCT C.id)\n#           FROM cartoon C\n#           INNER JOIN director D\n#                  ON D.id = C.director_id\n#           GROUP BY C.id, D.id;\n\n#\n# SELECT  SELECT DISTINCT C.id,\n#           COUNT(DISTINCT C.id)\n#           FROM cartoon C\n#           INNER JOIN director D\n#                  ON D.id = C.director_id\n#           GROUP BY C.id, D.id;\n\n#\n# SELECT  SELECT DISTINCT C.id,\n#           COUNT(DISTINCT C.id)\n#           FROM cartoon C\n#           INNER JOIN director D\n#                  ON D.id = C.director_id\n#           GROUP BY C"}
{"question": "How many cartoons did each director create?", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many cartoons did each director create?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many cartoons did each director create?. \nSELECT  SELECT series.ID\n        ,SUM(Episode.ID) AS Episodes\n        ,SUM(Cartoon.ID) AS Cartoons\nFROM\n    (SELECT series.ID, series.Series_Name, series.Channel, series.Content\n        ,series.Pixel_aspect_ratio_PAR\n        ,series.Hight_definition_TV\n        ,series.Pay_per_view_PPV\n        ,series.Package_Option\n        ,series.Rating\n        ,series.Share\n        ,series.18_49_Rating_Share\n        ,series.Viewers_m\n        ,series.Weekly_Rank\n        ,series.Channel\n    FROM\n        tv_series\n    WHERE\n        series.Channel = 'Channel1'\n        AND series.Content = 'Content1'\n    GROUP BY\n        series.ID\n        ,series.Series_Name\n        ,series.Channel\n        ,series.Content\n        ,series.Pixel_aspect_ratio_PAR\n        ,series.Hight_definition_TV\n        ,series.Pay_per_view_PPV\n        ,"}
{"question": "Find the production code and channel of the most recently aired cartoon .", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the production code and channel of the most recently aired cartoon .. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the production code and channel of the most recently aired cartoon .. \nSELECT  SELECT DISTINCT ON(Series) Series, Series.Air_Date, Series.Channel, 18_49_Rating_Share, Viewers_m, Weekly_Rank, \n\tCOUNT(DISTINCT(Series.Series_ID)) OVER (PARTITION BY Series.Air_Date) as  Air_Date_Count, \n\tCASE WHEN (MAX(Series.Air_Date) IS NULL) THEN NULL \n\t\tWHEN (MAX(Series.Air_Date) IS NOT NULL) THEN CAST(1 AS BIT) \n\t\tEND \n\t\tAS 18_49_Rating_Share_Flag, \n\tCASE WHEN (MAX(Series.Air_Date) IS NULL) THEN NULL \n\t\tWHEN (MAX(Series.Air_Date) IS NOT NULL) THEN CAST(Viewers_m AS BIT) \n\t\tEND \n\t\tAS Viewers_m_Flag, \n\tCASE WHEN (MAX(Series.Air_Date) IS NULL) THEN NULL \n\t\tWHEN (MAX(Series.Air"}
{"question": "What is the produdction code and channel of the most recent cartoon ?", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the produdction code and channel of the most recent cartoon ?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the produdction code and channel of the most recent cartoon ?. \nSELECT  SELECT \n*  FROM \ntvseries\nWHERE air_date > '2017-06-29 20:00:00'\nORDER BY air_date DESC\nLIMIT 1;\n\n\n"}
{"question": "Find the package choice and series name of the TV channel that has high definition TV.", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the package choice and series name of the TV channel that has high definition TV.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the package choice and series name of the TV channel that has high definition TV.. \nSELECT  SELECT \n    Channel_name\n    FROM    package\n    WHERE   High_definition_TV\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%BBC%'\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%ITV%'\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%CBS%'\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%FOX%'\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%NBC%'\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%ABC%'\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%CW%'\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%FNC%'\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%FX%'\n    AND  COALESCE(Cartoon.Channel_name,'') NOT LIKE '%FXX%'\n    AND  COALESCE"}
{"question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the package options and the name of the series for the TV Channel that supports high definition TV?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the package options and the name of the series for the TV Channel that supports high definition TV?. \nSELECT  SELECT TOP 1000000 PTV_Series.Series_Name, PTV_Series.Channel\nFROM PTV_Series\nORDER BY PTV_Series.Series_Name;\n\nSELECT  SELECT TOP 1000000 PTV_Series.Series_Name, PTV_Series.Channel\nFROM PTV_Series\nORDER BY PTV_Series.Series_Name, PTV_Series.Channel;\n\nSELECT  SELECT TOP 1000000 PTV_Series.Series_Name, PTV_Series.Channel\nFROM PTV_Series\nORDER BY PTV_Series.Series_Name, PTV_Series.Channel, ROW_NUMBER();\n\nSELECT  SELECT TOP 1000000 PTV_Series.Series_Name, PTV_Series.Channel\nFROM PTV_Series\nORDER BY PTV_Series.Series_Name, PTV_Series.Channel, ROW_NUMBER() OVER (ORDER BY PTV_Series.Series_Name);\n\nSELECT  SELECT TOP 1000000 PTV_Series.Series_Name,"}
{"question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nwhich countries' tv channels are playing some cartoon written by Todd Casey?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nwhich countries' tv channels are playing some cartoon written by Todd Casey?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nCountry AS name, TV_Channel.Series_Name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option \nFROM \n(SELECT  SELECT  SELECT  SELECT  SELECT\nCountry AS name, TV_Channel.Series_Name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option \nFROM \n(SELECT  SELECT  SELECT  SELECT  SELECT\nCountry AS name, TV_Series.Series_Name, TV_Series.Country, TV_Series.Language, TV_Series.Content, TV_Series.Pixel_aspect_ratio_PAR, TV_Series.Hight_definition_TV, TV_Series.Pay_per_view_PPV"}
{"question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the countries that have cartoons on TV that were written by Todd Casey?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the countries that have cartoons on TV that were written by Todd Casey?. \nSELECT  SELECT * FROM tvshow\nWHERE Content = 'Cartoon' AND\n      Channel = 'Cartoon Network' AND\n      Country = 'Canada'\n\n    SELECT * FROM tvshow WHERE Content = 'Cartoon' AND\n      Channel = 'Cartoon Network' AND\n      Country = 'US'\n\n\n\n\n\n#Raw data is stored in a file.\n#We need to convert raw data into a SQL format.\n\n#To separate all the lines and sentences, we can use the '|' symbol.\n#We can store one sentence per line.\n#Each sentence starts with a space and ends with a space.\n#The next thing we need to do is to convert the lines into a list.\n#With the 'split' function, we split the string into a list. \n#Then we take the first element of the list, which is the first sentence. \n#We save this sentence in the variable sentence.\n#\n\n#We want to use the 'split' function because we can use the 'split' function only on strings.\n#So we need to convert the entire sentence into a string.\n#The 'str' function converts the sentence into a string"}
{"question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nwhich countries' tv channels are not playing any cartoon written by Todd Casey?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nwhich countries' tv channels are not playing any cartoon written by Todd Casey?. \nSELECT  SELECT  COUNT(DISTINCT 1) \nFROM  Cartoon c \nLEFT OUTER JOIN  TV_Channel channel ON channel.id = c.channel \nLEFT OUTER JOIN  TV_series series ON channel.id = series.channel \nWHERE  channel.id IN (\nSELECT  channel_id \nFROM  Cartoon \nWHERE  written_by = 'Todd Casey' \n) \nAND  series.id IS NULL\nGROUP BY channel.id \n\n'''\n\nimport sqlite3\nfrom collections import Counter\n\ntv_channel_db = sqlite3.connect('tvchannel.db')\n\ncursor = tv_channel_db.cursor()\n\ncursor.execute('''\nSELECT  SELECT  COUNT(DISTINCT 1) \nFROM  Cartoon c \nLEFT OUTER JOIN  TV_Channel channel ON channel.id = c.channel \nLEFT OUTER JOIN  TV_series series ON channel.id = series.channel \nWHERE  channel.id IN (\nSELECT  channel_id \nFROM  Cartoon \nWHERE  written_by = 'Todd Casey' \n) "}
{"question": "What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the countries that are not playing cartoons written by Todd Casey?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the countries that are not playing cartoons written by Todd Casey?. \nSELECT  SELECTED.Country,COUNT(*) AS \"Countries\" FROM (SELECT 'Afghanistan' AS Country FROM Cartoon WHERE \"Written_by\" = 'Todd Casey' GROUP BY Country) AS SELECTED GROUP BY Country\n\n### Result:\n### 1. Afghanistan 1\n### 2. Pakistan 1\n### 3. Turkmenistan 1\n### 4. Turkey 1\n### 5. Russia 1\n### 6. Tajikistan 1\n### 7. Uzbekistan 1\n### 8. U.S. 1\n### 9. Kazakhstan 1\n### 10. Greece 1\n\n### I am interested in the countries that play cartoons written by Todd Casey, but are not in the United States.\nSELECT DISTINCT \"Country\",COUNT(*) AS \"Countries\" FROM (SELECT 'Afghanistan' AS Country FROM Cartoon WHERE \"Written_by\" = 'Todd Casey' AND Country NOT IN ('United States') GROUP BY Country) AS SELECTED GROUP BY Country\n\n###"}
{"question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?. \nSELECT  SELECT tv_series.series_name, tv_channel.country FROM tv_series\n  LEFT JOIN tv_channel\n  ON tv_series.channel_id = tv_channel.id;\n#\n# Create a table that contains a list of all cartoons ever produced in 2016.\n#\n# CREATE TABLE cartoons\n#  (cartoon_id  INTEGER PRIMARY KEY AUTOINCREMENT,\n#   cartoon_name VARCHAR,\n#   cartoon_year INTEGER,\n#   cartoon_genre VARCHAR,\n#   cartoon_director VARCHAR,\n#   cartoon_writer VARCHAR,\n#   cartoon_channel_id INTEGER);\n#\n# Find the channel_id of the channel that is playing some cartoons that are directed by Michael Chang and Ben Jones?.\n#\n# SELECT channel_id FROM cartoon WHERE cartoon_director = 'Ben Jones' AND cartoon_director = 'Michael Chang';\n#\n# Create a table that contains a list of all movies ever released in 2016.\n#\n# CREATE TABLE movies\n#  ("}
{"question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?. \nSELECT  SELECT COUNT(*) FROM Tv_Series WHERE Tv_Series.Channel IN (SELECT Channel FROM Tv_Channel WHERE Tv_Channel.Channel LIKE '%Cartoon') AND Tv_Series.Country LIKE '%United_States%' AND Tv_Series.Directed_by='Ben_Jones' AND Tv_Series.Written_by='Michael_Chang'\n\nWhat is the series name and country of all channels that are playing a certain Cartoon?\nSELECT  SELECT COUNT(*) FROM Tv_Channel WHERE Tv_Channel.Channel LIKE '%Cartoon'\n\nWhat is the series name and country of all channels that are playing a certain Cartoon and a certain director?\nSELECT  SELECT COUNT(*) FROM Tv_Channel WHERE Tv_Channel.Channel LIKE '%Cartoon' AND Tv_Channel.Directed_by='Ben_Jones'\n\nWhat is the series name and country of all channels that are playing a certain Cartoon and a certain director and are not rated for 18 years or older?\nSELECT  SELECT COUNT(*) FROM Tv_Channel WHERE Tv_Channel.Channel LIKE '%Cartoon' AND Tv_Channel.Directed_"}
{"question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the pixel aspect ratio and nation of the tv channels that do not use English.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the pixel aspect ratio and nation of the tv channels that do not use English.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the pixel aspect ratio and country of origin for all TV channels that do not use English?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the pixel aspect ratio and country of origin for all TV channels that do not use English?. \nSELECT  SELECT @tv.TV_Channel, @tv.Channel, @tv.Country, @tv.Language, @tv.Content, @tv.Pixel_aspect_ratio_PAR, @tv.Hight_definition_TV, @tv.Pay_per_view_PPV, @tv.Package_Option\nFROM  TV_channel_properties tv;\n\n#What is the original air date of all episodes of all TV series that air in English on Tuesdays?.\nSELECT  SELECT @tv.TV_series, @tv.Episode, @tv.Air_Date, @tv.Rating, @tv.Share, @tv.18_49_Rating_Share, @tv.Viewers_m, @tv.Weekly_Rank, @tv.Channel\nFROM  TV_series_properties tv;\n\n#What is the original air date of all episodes of all TV series that air on HBO?.\nSELECT  SELECT @tv.TV_series, @tv.Episode, @tv.Air_Date, @tv.Rating, @tv.Share, @tv.18_49_Rating"}
{"question": "find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind id of the tv channels that from the countries where have more than two tv channels.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind id of the tv channels that from the countries where have more than two tv channels.. \n}
{"question": "What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the ids of all tv channels that have more than 2 TV channels?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the ids of all tv channels that have more than 2 TV channels?. \nSELECT  SELECT id FROM TV_Channel WHERE id != 1617 AND id != 1618 AND id != 1619 AND id != 1620 AND id != 1621 AND id != 1622 AND id != 1623 AND id != 1624 AND id != 1625 AND id != 1626 AND id != 1627 AND id != 1628 AND id != 1629 AND id != 1630 AND id != 1631 AND id != 1632 AND id != 1633 AND id != 1634 AND id != 1635 AND id != 1636 AND id != 1637 AND id != 1638 AND id != 1639 AND id != 1640 AND id != 1641 AND id != 1642 AND id != 1643 AND id != 1644 AND id != 1645 AND id != 1646 AND id != 1647 AND id !="}
{"question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the id of tv channels that do not play any cartoon directed by Ben Jones.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the id of tv channels that do not play any cartoon directed by Ben Jones.. \nSELECT  SELECT  COUNT(Channel.id) as cnt, Channel.id, Channel.series_name, Channel.Country, Channel.Language, Channel.Content, Channel.Pixel_aspect_ratio_PAR, Channel.Hight_definition_TV, Channel.Pay_per_view_PPV, Channel.Package_Option FROM Channel WHERE Channel.Directed_by != 'Ben Jones' AND Channel.Series = 'Cartoon'\n##########################################################################################################################\n\n##########################################################################################################################\n#Tv_Channel\n#TV_series\n#Cartoon\n#Irregular_word_sequence_game\n#Oscar_Nomination_Games\n#Oscar_Games_2013\n#Oscar_Games_2014\n#Oscar_Games_2015\n#Oscar_Games_2016\n#Oscar_Games_2017\n#Oscar_Games_2018\n#Oscar_Games_2019\n#Oscar_Games_2020\n\n#define the fields you want to"}
{"question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the ids of the TV channels that do not have any cartoons directed by Ben Jones?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the ids of the TV channels that do not have any cartoons directed by Ben Jones?. \nSELECT  SELECT DISTINCT ON (TV_Series.Channel) \nTV_Channel.ID \nFROM \nTV_Series \nWHERE \nTV_Series.Channel = 2 AND\nNOT EXISTS (\n  SELECT \n    TV_Channel.ID \n  FROM \n    TV_Series \n  WHERE \n    TV_Series.Channel = 2 AND \n    TV_Series.ID = TV_Series.ID\n) AND\nTV_Series.Channel != 3;\n\nWhat are the ids of the TV series in the database that are directed by Ben Jones? \nSELECT  SELECT DISTINCT ON (TV_Series.Channel) \nTV_Series.ID \nFROM \nTV_Series \nWHERE \nTV_Series.Channel = 2 AND \nTV_Series.Directed_by = 'Ben Jones' AND\nNOT EXISTS (\n  SELECT \n    TV_Series.ID \n  FROM \n    TV_Series \n  WHERE \n    TV_Series.Channel = 2 AND \n    TV_Series.ID = TV_Series.ID\n) AND\nTV_Series.Channel != 3"}
{"question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the package option of the tv channel that do not have any cartoon directed by Ben Jones.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the package option of the tv channel that do not have any cartoon directed by Ben Jones.. \nSELECT  SELECT * FROM TV_Channel WHERE Channel in ('1','2','3','4','5') and TV_Channel.Package_Option not in ('HBO','CBS','FX','DIRECTV') \nSELECT  SELECT * FROM TV_Series WHERE Series not in ('Criminal Minds','Justice','Lie to Me')\nSELECT  SELECT * FROM Cartoon WHERE Cartoon not in ('My Little Pony','Garfield','Family Guy','The Simpsons','South Park','Sponge Bob','Scooby Doo','Beverly Hills 90210','Sherlock Holmes','Sponge Bob','Scooby Doo','Beverly Hills 90210','Sherlock Holmes','Sponge Bob','Scooby Doo','Beverly Hills 90210','Sherlock Holmes','Sponge Bob','Scooby Doo','Beverly Hills 90210','Sherlock Holmes','Sponge Bob','Scooby Doo','Beverly Hills 90210','Sherlock Holmes','Sponge Bob','Scooby Doo','"}
{"question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?. \nSELECT  SELECT DISTINCT ON(DISTINCT ON(Tv_Channel.Channel)) Tv_Channel.Channel, COUNT(DISTINCT ON(Tv_Channel.Channel)) AS Package_Option FROM Tv_Channel JOIN\n(SELECT DISTINCT ON(DISTINCT ON(Tv_Channel.Channel)) Tv_Channel.Channel,\nCOUNT(DISTINCT ON(Tv_Channel.Channel)) AS Package_Option\nFROM Tv_Channel\nGROUP BY Tv_Channel.Channel\nHAVING COUNT(DISTINCT ON(Tv_Channel.Channel)) = 1) AS Tv_Series\nON Tv_Channel.Channel = Tv_Series.Channel\nGROUP BY Tv_Channel.Channel, Tv_Series.Package_Option\nORDER BY 1\n\n#The package options of all cartoons directed by Ben Jones?\nSELECT  SELECT DISTINCT ON(DISTINCT ON(Cartoon.Cartoon)) Cartoon.Cartoon, COUNT(DISTINCT ON(Cartoon.Cartoon)) AS Package_Option FROM Cartoon JOIN\n(SELECT DISTINCT ON(DISTINCT ON(Cartoon.Cartoon))"}
{"question": "How many poker players are there?", "sql": "SELECT count(*) FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many poker players are there?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many poker players are there?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  COUNT (poker_player.poker_player_id) FROM poker_player\nSELECT  COUNT (people.people_id) FROM people\nSELECT  COUNT (poker_player.people_id) FROM people\nSELECT  COUNT (final_table_made) FROM poker_player\nSELECT  COUNT (final_table_made) FROM people\nSELECT  COUNT (best_finish) FROM poker_player\nSELECT  COUNT (best_finish) FROM people\nSELECT  COUNT (money_rank) FROM poker_player\nSELECT  COUNT (money_rank) FROM people\nSELECT  COUNT (earnings) FROM poker_player\nSELECT  COUNT (earnings) FROM people\n\nHow many poker tables did they appear in?.\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  COUNT (final_table_made) FROM poker_player\nSELECT  COUNT (final_table_made) FROM people\nSELECT  COUNT (final_table_made) FROM people\nSELECT  COUNT (final_table_made) FROM poker_player\nSELECT  COUNT (final_table_made)"}
{"question": "Count the number of poker players.", "sql": "SELECT count(*) FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nCount the number of poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nCount the number of poker players.. \nSELECT  SELECT COUNT(*) FROM poker_player\n#poker_player_count = pkp_count[0][0]\n\n#Add player with a given poker_player_id\nSELECT  pkp_count[0][0], pkp_count[0][1], pkp_count[0][2], pkp_count[0][3], pkp_count[0][4], pkp_count[0][5]\n#pkp_count[0] = (SELECT COUNT(*) FROM poker_player)\n#pkp_count[0][0] = pkp_count[0][0]\n#pkp_count[0][1] = pkp_count[0][1]\n#pkp_count[0][2] = pkp_count[0][2]\n#pkp_count[0][3] = pkp_count[0][3]\n#pkp_count[0][4] = pkp_count[0][4]\n#pkp_count[0][5] = pkp_count[0][5]\n"}
{"question": "List the earnings of poker players in descending order.", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the earnings of poker players in descending order.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the earnings of poker players in descending order.. \nSELECT  SELECT MAX(Earnings) AS 'Earnings', \n    poker_player.Poker_Player_ID,\n    poker_player.People_ID,\n    poker_player.Final_Table_Made,\n    poker_player.Best_Finish,\n    poker_player.Money_Rank,\n    poker_player.Earnings\n    FROM poker_player\n    WHERE poker_player.Final_Table_Made = 1\n    AND poker_player.Earnings > 0\n    GROUP BY poker_player.Poker_Player_ID\n    ORDER BY Earnings DESC\n\nList the people who made the final table and had a win..\nSELECT poker_player.People_ID,\n    people.Name,\n    people.Nationality,\n    poker_player.Final_Table_Made\n    FROM poker_player\n    WHERE poker_player.Final_Table_Made = 1\n    AND poker_player.Earnings > 0\n    AND poker_player.Money_Rank = 1"}
{"question": "What are the earnings of poker players, ordered descending by value?", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the earnings of poker players, ordered descending by value?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the earnings of poker players, ordered descending by value?. \nSELECT  SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT    SELECT    SELECT\nSELECT    SELECT    SELECT    SELECT"}
{"question": "List the final tables made and the best finishes of poker players.", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the final tables made and the best finishes of poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the final tables made and the best finishes of poker players.. \nSELECT  SELECT  SELECT\npoker_player.people_id AS people_id,\npoker_player.final_table_made AS final_table_made,\npoker_player.best_finish AS best_finish,\npoker_player.money_rank AS money_rank,\npoker_player.earnings AS earnings\nFROM poker_player\nWHERE final_table_made = 1\nORDER BY best_finish DESC\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\n\n# Dumping the final tables made and the best finishes of poker players.. \n# We're going to write the answers here in the same format as the original table\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings"}
{"question": "What are the final tables made and best finishes for all poker players?", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the final tables made and best finishes for all poker players?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the final tables made and best finishes for all poker players?. \nSELECT  SELECT \n    Poker_Player_ID,\n    People_ID,\n    Final_Table_Made,\n    Best_Finish\nFROM Poker_Player_Finals\nORDER BY Poker_Player_ID\n\n\n# SELECT \n    Poker_Player_ID,\n    People_ID,\n    Final_Table_Made,\n    Best_Finish,\n    Money_Rank,\n    Earnings\nFROM Poker_Player_Finals\nORDER BY Poker_Player_ID\n\n# SELECT \n    People_ID,\n    Nationality,\n    Name,\n    Birth_Date,\n    Height\nFROM People\nORDER BY People_ID\n\n\n# SELECT \n    People_ID,\n    Nationality,\n    Name,\n    Birth_Date,\n    Height\nFROM People\nORDER BY People_ID\n\n#SELECT \n    Poker_Player_ID,\n    People_ID,\n    Final_Table_Made,\n    Best_Finish,\n    Money_Rank,\n    Earnings\nFROM Poker_Player_Finals\nORDER"}
{"question": "What is the average earnings of poker players?", "sql": "SELECT avg(Earnings) FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the average earnings of poker players?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the average earnings of poker players?. \nSELECT  SELECT  SELECT  SELECT \nMAX(CASE WHEN Status = 1 THEN Value END) AS [Max(CASE WHEN Status = 1 THEN Value END)]\n,AVG(CASE WHEN Status = 1 THEN Value END) AS [AVG(CASE WHEN Status = 1 THEN Value END)]\n,MIN(CASE WHEN Status = 1 THEN Value END) AS [MIN(CASE WHEN Status = 1 THEN Value END)]\n,SUM(CASE WHEN Status = 1 THEN Value END) AS [SUM(CASE WHEN Status = 1 THEN Value END)]\n,COUNT(CASE WHEN Status = 1 THEN Value END) AS [COUNT(CASE WHEN Status = 1 THEN Value END)]\nFROM Poker_Player_History WHERE 1 = 1\nAND Poker_Player_ID = 2\nGROUP BY \nGROUP BY \nGROUP BY \nGROUP BY \nGROUP BY \n\n#For brevity, the query was left as is. However, if we wanted to do an averages for the last 3 years, we would do it like so:\nSELECT  SELECT  SELECT  SELECT \nMAX(CASE WHEN Status = 1 THEN Value END) AS [Max(CASE"}
{"question": "Return the average earnings across all poker players.", "sql": "SELECT avg(Earnings) FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the average earnings across all poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the average earnings across all poker players.. \nSELECT  SELECT avg(Earnings) FROM poker_player\n\n# How to count how many players participated in the final table of each poker event:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nSELECT  COUNT(poker_player.Final_Table_Made) FROM poker_player\n\n# How to count how many people played in each poker event:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nSELECT  COUNT(people.People_ID) FROM people\n\n# How to count how many people from each nationality played in each poker event:\n#poker_player('Poker_"}
{"question": "What is the money rank of the poker player with the highest earnings?", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the money rank of the poker player with the highest earnings?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the money rank of the poker player with the highest earnings?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  FROM  FROM  FROM  FROM  FROM  FROM \npoker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\n\n\n"}
{"question": "Return the money rank of the player with the greatest earnings.", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the money rank of the player with the greatest earnings.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the money rank of the player with the greatest earnings.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the maximum number of final tables made among poker players with earnings less than 200000?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the maximum number of final tables made among poker players with earnings less than 200000?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT"}
{"question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the maximum final tables made across all poker players who have earnings below 200000.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the maximum final tables made across all poker players who have earnings below 200000.. \nSELECT  SELECT MAX(Final_Table_Made)\nFROM     poker_player\nWHERE    Earnings < 200000\n\n\n\n\n# SELECT \n# \tSELECT MAX(Final_Table_Made)\n# \tFROM\n# \t\tpoker_player\n# \tWHERE\n# \t\tEarnings < 200000\n# \tGROUP BY \n# \t\tFinal_Table_Made\n# \tORDER BY\n# \t\tFinal_Table_Made\n"}
{"question": "What are the names of poker players?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players?. \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT"}
{"question": "Return the names of all the poker players.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the names of all the poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the names of all the poker players.. \n}
{"question": "What are the names of poker players whose earnings is higher than 300000?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players whose earnings is higher than 300000?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players whose earnings is higher than 300000?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT "}
{"question": "Give the names of poker players who have earnings above 300000.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive the names of poker players who have earnings above 300000.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive the names of poker players who have earnings above 300000.. \nSELECT  SELECT p.Poker_Player_ID, p.People_ID, p.Final_Table_Made, p.Best_Finish, p.Money_Rank, p.Earnings\nFROM Poker_Player p \nWHERE p.Earnings > 300000;\n\n# Find all people who have made a final table of the WSOP Main event\nSELECT  SELECT p.People_ID, p.Name, p.Nationality, p.Birth_Date, p.Height\nFROM Poker_Player p\nWHERE p.Final_Table_Made = TRUE;\n\n# Find all people who have made the final table of the 2007 Main Event,\n# and are over 180 cm\nSELECT  SELECT p.People_ID, p.Name, p.Nationality, p.Birth_Date, p.Height\nFROM Poker_Player p\nWHERE p.Final_Table_Made = TRUE\n  AND p.Height > 180;\n\n# Find all people who have made the final table of the 2007 Main Event,\n# and"}
{"question": "List the names of poker players ordered by the final tables made in ascending order.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names of poker players ordered by the final tables made in ascending order.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names of poker players ordered by the final tables made in ascending order.. \nSELECT  SELECT * FROM poker_player ORDER BY final_table_made asc\n\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\n# List the names of poker players ordered by the money rank in descending order.. \nSELECT  SELECT * FROM poker_player ORDER BY money_rank DESC\n\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\n# List the names of poker players ordered by the earnings in ascending order.. \nSELECT  SELECT * FROM poker_player ORDER BY earnings ASC\n\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_M"}
{"question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players, ordered ascending by the number of final tables they have made?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players, ordered ascending by the number of final tables they have made?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT "}
{"question": "What is the birth date of the poker player with the lowest earnings?", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the birth date of the poker player with the lowest earnings?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the birth date of the poker player with the lowest earnings?. \nSELECT  SELECT TOP 1 Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings\nFROM poker_player\nWHERE People_ID = 10\nORDER BY Earnings DESC\nWhat is the last name of the poker player with the most earnings?. \nSELECT  SELECT TOP 1 Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings\nFROM poker_player\nWHERE People_ID = 1\nORDER BY Earnings ASC\n#William Shatner has the lowest earnings\n#Poker Player ID 10 has the highest earnings\n##Poker_Player_ID\n##People_ID\n##Final_Table_Made\n##Best_Finish\n##Money_Rank\n##Earnings\n##\n\n##The query result returned by the SELECT TOP 1\nSELECT  SELECT TOP 1 Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank,"}
{"question": "Return the birth date of the poker player with the lowest earnings.", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the birth date of the poker player with the lowest earnings.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the birth date of the poker player with the lowest earnings.. \nSELECT  SELECT  \n    people.People_ID\n    people.Name\n    people.Birth_Date\n    people.Height\n    people.Nationality\n    IF (people.Earnings = MIN(people.Earnings))\n        THEN people.Birth_Date\n    END IF\n    FROM  \n    people\n    WHERE\n    people.People_ID = poker_player.People_ID\n    GROUP BY\n    people.People_ID\n    ORDER BY\n    people.Birth_Date DESC\n;\n"}
{"question": "What is the money rank of the tallest poker player?", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the money rank of the tallest poker player?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the money rank of the tallest poker player?. \nSELECT  SELECT \n   MAX(poker_player_id) AS poker_player_id,\n   MAX(people_id) AS people_id,\n   MAX(final_table_made) AS final_table_made,\n   MAX(best_finish) AS best_finish,\n   MAX(money_rank) AS money_rank,\n   MAX(earnings) AS earnings\n   FROM \n       (SELECT \n            poker_player_id AS poker_player_id,\n            people_id AS people_id,\n            final_table_made AS final_table_made,\n            best_finish AS best_finish,\n            money_rank AS money_rank,\n            earnings AS earnings\n         FROM \n            (SELECT \n                poker_player_id AS poker_player_id,\n                people_id AS people_id,\n                final_table_made AS final_table_made,\n                best_finish AS best_finish,\n                money_rank AS money_rank,\n                earnings AS earnings\n             FROM \n                (SELECT \n                "}
{"question": "Return the money rank of the poker player with the greatest height.", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the money rank of the poker player with the greatest height.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the money rank of the poker player with the greatest height.. \nSELECT  SELECT (poker_player.final_table_made)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (people.people_id)\nFROM     (SELECT (people.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (people.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_id)\nFROM     (SELECT (poker_player.people_"}
{"question": "What is the average earnings of poker players with height higher than 200?", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the average earnings of poker players with height higher than 200?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the average earnings of poker players with height higher than 200?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SUM(Earnings) \nFROM     poker_player \nWHERE    Final_Table_Made = 'Yes' AND \n       Height > 200 AND \n       Peoples_ID > 1000000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Give average earnings of poker players who are taller than 200.", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive average earnings of poker players who are taller than 200.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive average earnings of poker players who are taller than 200.. \nSELECT  SELECT * FROM poker_player WHERE Final_Table_Made AND height > 200;\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nSELECT AVERAGE(earnings) FROM poker_player WHERE Final_Table_Made AND height > 200;\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nSELECT MAX(earnings) FROM poker_player WHERE Final_Table_Made AND height > 200;\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money"}
{"question": "What are the names of poker players in descending order of earnings?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players in descending order of earnings?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players in descending order of earnings?. \n}
{"question": "Return the names of poker players sorted by their earnings descending.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the names of poker players sorted by their earnings descending.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the names of poker players sorted by their earnings descending.. \nSELECT  SELECT  SELECT\nSELECT  FROM  FROM  FROM\nSELECT  WHERE  WHERE  WHERE\nSELECT  GROUP  GROUP  GROUP\nSELECT  ORDER  BY  ORDER  BY  ORDER\nSELECT  LIMIT  LIMIT  LIMIT\nSELECT  FIRST  FIRST  FIRST\nSELECT  CLOSE  CLOSE  CLOSE\nSELECT  RETURN  RETURN  RETURN\nSELECT  ROLLBACK  ROLLBACK  ROLLBACK\nSELECT  CASCADE  CASCADE  CASCADE\nSELECT  DELETE  DELETE  DELETE\nSELECT  FROM  FROM  FROM\nSELECT  WHERE  WHERE  WHERE\nSELECT  GROUP  GROUP  GROUP\nSELECT  HAVING  HAVING  HAVING\nSELECT  ORDER  BY  ORDER  BY  ORDER\nSELECT  LIMIT  LIMIT  LIMIT\nSELECT  ALL  ALL  ALL\nSELECT  MULTI  MULTI  MULTI\nSELECT  UNION  UNION  UNION\nSELECT  UNION  ALL  ALL\nSELECT  UNION  ALL  MULTI\nSELECT  UNION  ALL  MULTI  UNION\nSELECT  UNION  ALL  M"}
{"question": "What are different nationalities of people and the corresponding number of people from each nation?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are different nationalities of people and the corresponding number of people from each nation?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are different nationalities of people and the corresponding number of people from each nation?. \nSELECT  SELECT *, COUNT(*) \nFROM  poker_player \nGROUP BY \n  Nationality;\n#\n#How many people are from the USA?\n#\nSELECT  COUNT(*) \nFROM  poker_player \nGROUP BY \n  Nationality;\n#\n#What is the distribution of nationalities of people in the poker_player table?\n#\nSELECT  *, COUNT(*) \nFROM  poker_player \nGROUP BY \n  Nationality;\n#\n#Find the person with the lowest birth_date and greatest money_rank. \n#\nSELECT  MIN(Birth_Date), MAX(Money_Rank) \nFROM  poker_player;\n#\n#Who are the top five earners in the poker_player database?\nSELECT  TOP 5 \n  People_ID, \n  Nationality, \n  Name, \n  Birth_Date, \n  Height \nFROM  poker_player;\n#\n#Given a list of player names, find the top 5 players based on money_rank. \nSELECT  TOP 5 \n"}
{"question": "How many people are there of each nationality?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many people are there of each nationality?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many people are there of each nationality?. \nSELECT  SELECT * FROM \"poker_player\"\nGROUP BY \"nationality\"\nORDER BY COUNT(*) DESC;\n\nHow many people are there of each nationality in the final table?. \nSELECT  SELECT * FROM \"poker_player\"\nGROUP BY \"final_table_made\"\nORDER BY COUNT(*) DESC;\n\nHow many people are there of each nationality in the final table making a final table?. \nSELECT  SELECT * FROM \"poker_player\"\nGROUP BY \"final_table_made\", \"final_table_made\"\nORDER BY COUNT(*) DESC;\n\nHow many people are there of each nationality in the final table that made the final table?. \nSELECT  SELECT * FROM \"poker_player\"\nGROUP BY \"final_table_made\", \"final_table_made\", \"final_table_made\"\nORDER BY COUNT(*) DESC;\n\nHow many people are there of each nationality in the final table that made the final table and made money?. \nSELECT  SELECT * FROM \"poker_player\"\nGROUP BY \"final_table_made\", \"final_table_made\", \"final_table_made\", \"final_table"}
{"question": "What is the most common nationality of people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the most common nationality of people?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the most common nationality of people?. \nSELECT  SELECT MAX(People_ID) AS MAX_People_ID FROM people\nSELECT  SELECT MAX(People_ID) AS MAX_People_ID FROM people\nSELECT  SELECT MAX(People_ID) AS MAX_People_ID FROM people\n###\n#each row in the returned result set is a tuple (row_number, People_ID), where\n#row_number is the number of rows in the result set (it starts at 1), and People_ID is the ID of the person\n#you selected.\n#you can get the max row_number and the max People_ID by calling SELECT * FROM people ORDER BY People_ID DESC LIMIT 1.\n###\n#Each poker player will have their own row, and each row will have its own MAX_People_ID.\n#In this case, the People_ID for the 1st row is 215, and the MAX_People_ID is 404.\n#Now we have to use this information to get the people who played in this row.\n#SELECT People_ID FROM poker_player WHERE People_ID = 215\n#SELECT"}
{"question": "Give the nationality that is most common across all people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive the nationality that is most common across all people.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive the nationality that is most common across all people.. \nSELECT  SELECT DISTINCT Nationality\nFROM Poker_Player\nWHERE EXISTS\n(\n  SELECT 1\n  FROM Poker_Player_Nationality\n  WHERE Poker_Player_ID = Poker_Player.Poker_Player_ID\n)\nORDER BY COUNT(Nationality) DESC\nLIMIT 1\n"}
{"question": "What are the nationalities that are shared by at least two people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the nationalities that are shared by at least two people?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the nationalities that are shared by at least two people?. \nSELECT  SELECT DISTINCT p.People_ID, c.Nationality \nFROM People p, Country c \nWHERE p.People_ID = c.People_ID;\n### SQLite SQL people_by_country database, with their properties:\n#people_by_country('People_ID', 'Nationality')\n\n### SQLite SQL age_by_people database, with their properties:\n#age_by_people('People_ID', 'Age')\n\n# SELECT  SELECT DISTINCT a.Age_ID, a.Age, p.People_ID\n# FROM Age a, People p \n# WHERE p.People_ID = a.People_ID\n# ;\n#\n# SELECT DISTINCT a.Age_ID, a.Age, p.People_ID\n# FROM Age a, People p\n# WHERE p.People_ID = a.People_ID\n# ORDER BY a.Age_ID, a.Age\n\n### SQLite SQL age_by_country database, with their properties:\n#age_by_country('Age_ID', 'Age', 'Nationality')\n"}
{"question": "Return the nationalities for which there are two or more people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the nationalities for which there are two or more people.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the nationalities for which there are two or more people.. \nSELECT  SELECT DISTINCT Nationality FROM People\nNATURAL JOIN People\nGROUP BY Nationality\n# SELECT  SELECT DISTINCT Nationality FROM People\n# NATURAL JOIN People\n# GROUP BY Nationality\n# =======================================================================\n# =======================================================================\n# =======================================================================\n# =======================================================================\n# =======================================================================\n\n"}
{"question": "List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names and birth dates of people in ascending alphabetical order of name.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names and birth dates of people in ascending alphabetical order of name.. \nSELECT  SELECT \n    Name, \n    Birth_Date, \n    CAST(Height AS CHAR(10)) \nFROM   People \nORDER BY Name, Birth_Date;\n\n#sql = \"SELECT * FROM poker_player\"\n#poker_player = sql.execute()\n#poker_player.fetchall()\n#poker_player.fetchall()\n#poker_player.fetchall()\n\n#print poker_player.fetchall()\n\n#poker_player = sql.execute(\"SELECT * FROM poker_player ORDER BY Name, Birth_Date\")\n#poker_player.fetchall()\n#poker_player.fetchall()\n#poker_player.fetchall()\n#poker_player.fetchall()\n#print poker_player.fetchall()\n\n#poker_player = sql.execute(\"SELECT * FROM poker_player ORDER BY Name\")\n#poker_player.fetchall()\n#poker_player.fetchall()\n#poker_player.fetchall()\n#poker_player.fetchall()\n#poker_"}
{"question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names and birth dates of people, ordered by their names in alphabetical order?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names and birth dates of people, ordered by their names in alphabetical order?. \nSELECT  SELECT \n    Name,\n    Birth_Date\nFROM\n    people\nORDER BY\n    Name;\n\n#What is the name of the actor who played the character \u2018Captain Jean-Luc Picard\u2019 on Star Trek: The Next Generation? \nSELECT  p.Name\nFROM  poker_player p\n    WHERE  p.People_ID = 10; \n\n#What are the names of the people who played the characters \u2018Captain Jean-Luc Picard\u2019 and \u2018Commander William Riker\u2019 on Star Trek: The Next Generation?. \nSELECT  p.Name\nFROM  people p, poker_player p2\nWHERE p2.People_ID = p.People_ID\n    AND p2.People_ID = 10; \n\n#What is the best poker player in the world? \nSELECT  p.People_ID, p.Money_Rank\nFROM  poker_player p\nWHERE  p.People_ID = 2; \n\n#How much did 2nd best poker player make? \nSELECT  p.People"}
{"question": "Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nShow names of people whose nationality is not \"Russia\".. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nShow names of people whose nationality is not \"Russia\".. \nSELECT  SELECT people.People_ID, people.Name, people.Birth_Date, people.Height\nFROM people \nWHERE people.Nationality NOT IN ('Russia') \nORDER BY people.People_ID\n\n\n# OR\n# FROM people\n# GROUP BY people.People_ID\n\n\n# SELECT names of people whose nationality is \"Russia\"... \nSELECT  SELECT people.People_ID, people.Name, people.Birth_Date, people.Height\nFROM people \nWHERE people.Nationality = 'Russia' \nORDER BY people.People_ID\n\n\n# OR\n# FROM people\n# GROUP BY people.People_ID\n\n\n#SELECT  SELECT people.People_ID, people.Name, people.Birth_Date, people.Height\n#FROM people \n#ORDER BY people.People_ID\n#GROUP BY people.People_ID\n\n\n\n\n\n#\t\t\tSELECT  SELECT people.People_ID, people.Name, people.Birth_Date, people.Height\n#\t\t\tFROM people \n#\t\t\tORDER BY people"}
{"question": "What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of people who are not from Russia?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of people who are not from Russia?. \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT"}
{"question": "List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names of people that are not poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names of people that are not poker players.. \n}
{"question": "What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of people who do not play poker?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of people who do not play poker?. \nSELECT  SELECT People_ID FROM People WHERE Nationality NOT IN ('USA', 'Canada', 'Mexico');\nSELECT  SELECT People_ID FROM People WHERE People_ID NOT IN (SELECT People_ID FROM People_Table_Made);\nSELECT  SELECT People_ID FROM People WHERE People_ID NOT IN (SELECT People_ID FROM People_Birth_Date_Table);\nSELECT  SELECT People_ID FROM People WHERE People_ID NOT IN (SELECT People_ID FROM People_Name_Table);\nSELECT  SELECT People_ID FROM People WHERE People_ID NOT IN (SELECT People_ID FROM People_Height_Table);\n\nWhat are the names of people who have never been in a final table? SELECT  SELECT People_ID FROM People WHERE Final_Table_Made = 0;\n\nWhat are the names of people who have made a final table and never won? SELECT  SELECT People_ID FROM People WHERE Final_Table_Made = 1 AND Won_Money = 0;\n\nWhat are the names of people who have made a final table and have won? SELECT  SELECT People_ID FROM People WHERE Final_Table_Made = 1 AND Won_"}
{"question": "How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many distinct nationalities are there?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many distinct nationalities are there?. \nSELECT  SELECT COUNT(DISTINCT Nationality)\nFROM   poker_player\nGROUP BY poker_player.Nationality;\n\nSELECT  SELECT DISTINCT Nationality\nFROM   poker_player\nGROUP BY poker_player.Nationality;\n\n\n# SELECT  SELECT SUM(Money_Rank)\n# FROM   poker_player\n# GROUP BY poker_player.Nationality;\n\n#SELECT  SELECT SUM(Earnings)\n# FROM   poker_player\n# GROUP BY poker_player.Nationality;\n\n#SELECT  SELECT SUM(Money_Rank)\n# FROM   poker_player\n# GROUP BY poker_player.People_ID;\n\n\n#SELECT  SELECT SUM(Earnings)\n# FROM   poker_player\n# GROUP BY poker_player.People_ID;\n\n#SELECT  SELECT SUM(Final_Table_Made)\n# FROM   poker_player\n# GROUP BY poker_player.People_ID;\n\n#SELECT  SELECT SUM(Best_Finish)\n# FROM   poker_player\n# GROUP BY poker"}
{"question": "Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nCount the number of different nationalities.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nCount the number of different nationalities.. \nSELECT  SELECT count(DISTINCT People_ID) FROM poker_player GROUP BY People_ID;\n#32\n\n#Select the three poker players with the highest earnings\nSELECT * FROM poker_player ORDER BY Earnings DESC LIMIT 3;\n#1\t5\tFrank\tSuitable\t35\tUS\n#2\t2\tRaphael\tPunnett\t36\tUK\n#3\t4\tJohn\tJohns\t36\tUK\n#4\t1\tSue\tYouth\t34\tUK\n#5\t3\tDaniel\tO'Toole\t33\tUK\n#6\t6\tWendy\tWeatherby\t31\tUK\n#7\t7\tRuth\tRayne\t30\tUK\n#8\t8\tJay\tJones\t29\tUK\n#9\t9\tRuth\tBurton\t28\tUK\n#10\t10\tSarah\tSlaughter\t27\tUK\n#11\t11\tTanya\tYates\t26\tUK\n#12\t12\t"}
{"question": "How many states are there?", "sql": "SELECT count(*) FROM area_code_state", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nHow many states are there?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nHow many states are there?. \nSELECT  SELECT COUNT(*) FROM (\"AREA_CODE_STATE\" INNER JOIN (\"VOTES\") ON \"AREA_CODE_STATE\".\"area_code\" = \"VOTES\".\"phone_number\" and \"AREA_CODE_STATE\".\"state\" = \"VOTES\".\"state\") WHERE \"VOTES\".\"contestant_number\" = 1 \n#CONTESTANTS('contestant_number', 'contestant_name')\nWhat are the names of all the contestants?. \nSELECT  SELECT CONCAT(CONCAT(\"AREA_CODE_STATE\", \".\"), \"contestant_name\") FROM (\"CONTESTANTS\" INNER JOIN (\"VOTES\") ON \"CONTESTANTS\".\"contestant_number\" = \"VOTES\".\"contestant_number\") WHERE \"VOTES\".\"contestant_number\" = 1 \n#AREA_CODE_STATE('area_code', 'state')\nWhat are the states of all the area codes?. \nSELECT  SELECT CONCAT(CONCAT(\"AREA_CODE_STATE\", \".\"), \"state\") FROM"}
{"question": "List the contestant numbers and names, ordered by contestant name descending.", "sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the contestant numbers and names, ordered by contestant name descending.. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the contestant numbers and names, ordered by contestant name descending.. \nSELECT  SELECT  SELECT  SELECT  SELECT\nCONTESTANTS('contestant_number', 'contestant_name')\nAREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\n#CONTESTANTS('contestant_number', 'contestant_name')\nCONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\n\ndef main():\n    if len(sys.argv) < 3:\n        print \"Syntax: python lisa_sql_voters.py <db> <input_file>\"\n        sys.exit(1)\n    db = sys.argv[1]\n    input_file = sys.argv[2]\n    print \"Using db: \" + db\n    print \"Reading input file: \" + input_file\n    with"}
{"question": "List the vote ids, phone numbers and states of all votes.", "sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the vote ids, phone numbers and states of all votes.. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the vote ids, phone numbers and states of all votes.. \nSELECT  SELECT_VOTES('area_code', 'state')\nList the vote ids, phone numbers and states of all votes..\nSELECT  SELECT_VOTES('area_code', 'state', 'contestant_number')\nList the vote ids, phone numbers and states of all votes..\nSELECT  SELECT_VOTES('contestant_number', 'state')\nList the vote ids, phone numbers and states of all votes..\nSELECT  SELECT_VOTES('contestant_number', 'state', 'area_code')\nList the vote ids, phone numbers and states of all votes..\nSELECT  SELECT_VOTES('contestant_number', 'state', 'area_code', 'created')\nList the vote ids, phone numbers and states of all votes..\nSELECT  SELECT_VOTES('contestant_number', 'state', 'area_code', 'contestant_number')\nList the vote ids, phone numbers and states of all votes..\nSELECT  SELECT_VOTES('contestant_number', 'state', 'area_code', 'contestant_number', 'created')\nList the vote ids, phone"}
{"question": "What are the maximum and minimum values of area codes?", "sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the maximum and minimum values of area codes?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the maximum and minimum values of area codes?. \nSELECT  SELECT  SELECT  SELECT \narea_code, state\nFROM      voter_1\nGROUP BY  area_code, state\nORDER BY  area_code\n\nWhat are the maximum and minimum values of state?. \nSELECT  SELECT  SELECT  SELECT \nstate, area_code\nFROM      voter_1\nGROUP BY  state, area_code\nORDER BY  state\n\nWhat are the minimum and maximum values of contestants?. \nSELECT  SELECT  SELECT  SELECT \ncontestant_number, contestant_name\nFROM      voter_1\nGROUP BY  contestant_number, contestant_name\nORDER BY  contestant_number\n\nWhat are the minimum and maximum values of votes?. \nSELECT  SELECT  SELECT  SELECT \nvote_id, phone_number, state, contestant_number, created\nFROM      voter_1\nGROUP BY  vote_id, phone_number, state, contestant_number, created\nORDER BY  vote_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "What is last date created of votes from the state 'CA'?", "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat is last date created of votes from the state 'CA'?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat is last date created of votes from the state 'CA'?. \nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT  SELECT \n\nSELECT  SELECT  SELECT  SELECT"}
{"question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the names of the contestants whose names are not 'Jessie Alloway'. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the names of the contestants whose names are not 'Jessie Alloway'. \n}
{"question": "What are the distinct states and create time of all votes?", "sql": "SELECT DISTINCT state ,  created FROM votes", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the distinct states and create time of all votes?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the distinct states and create time of all votes?. \nSELECT  SELECT DISTINCT  STATE, CREATION_TIME\nFROM    VOTES\nORDER BY CREATION_TIME DESC\n\"\"\"\n\nclass Voters(models.Model):\n    \"\"\"\n    Contains data about voters\n    \"\"\"\n    ID = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n    username = models.CharField(max_length=100, null=True, blank=True)\n    state = models.CharField(max_length=20, null=True, blank=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __unicode__(self):\n        return self.name\n\n    def get_absolute_url(self):\n        return \"/voters/%s/\" % self.ID\n\n    def vote(self, phone, state, contestant_number, created):\n        #TODO: Write actual voting method\n        raise NotImplementedError\n\n    def get_voter_phones(self, contestant_number):\n        #TODO: Write actual"}
{"question": "What are the contestant numbers and names of the contestants who had at least two votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the contestant numbers and names of the contestants who had at least two votes?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the contestant numbers and names of the contestants who had at least two votes?. \nSELECT  SELECT  SELECT  SELECT\nCONTESTANTS(contestant_number, contestant_name)\nFROM    vc_votes \nWHERE   vote_id IN (\n    SELECT   vote_id\n    FROM     vc_votes\n    WHERE    state='State1' AND (\n        CONTESTANTS(contestant_number, contestant_name) IN ('Contestant1', 'Contestant2')\n        OR CONTESTANTS(contestant_number, contestant_name) IN ('Contestant3', 'Contestant4')\n    )\n)\nAND   created_at > '2022-02-21 00:00:00'\nGROUP  BY  contestant_number, contestant_name\nHAVING  COUNT(contestant_number) > 1\nAND   COUNT(contestant_number) = 2\n\nWhat are the contestant numbers and names of the contestants who voted twice?. \nSELECT  SELECT  SELECT  SELECT\nCONTESTANTS(contestant_number, contestant_name)\nFROM    vc_v"}
{"question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nOf all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nOf all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?. \nSELECT  SELECT  SELECT  SELECT\ncontestant_number,\ncontestant_name\nFROM    votes\nWHERE   area_code = '402'\nAND     phone_number = '515-555-1212'\nAND     state = 'NE'\nORDER BY\ncontestant_number DESC\nLIMIT 1;\n#\n#\n#\n#\n\n\n\n# AREA_CODE_STATE(area_code, state)\n# Return a list of area codes, and the states to which they belong.\n\n# We're going to try to use an index on (area_code, state) to speed up this query. \nSELECT * FROM\n  (SELECT * FROM area_code_state)\nWHERE\n  area_code = '402'\n  AND state = 'NE';\n#\n#\n#\n#\n\n#\n# CONTESTANTS(contestant_number, contestant_name)\n# Return a list of the contestants.\n\n# The primary key is (contestant_number, contestant_name), so we can use an index on (contestant"}
{"question": "What are the number of votes from state 'NY' or 'CA'?", "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the number of votes from state 'NY' or 'CA'?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the number of votes from state 'NY' or 'CA'?. \nSELECT  SELECT COUNT(*) FROM votes WHERE state='NY' OR state='CA'\n#VOTES_BY_STATE('state_name', 'vote_count')\nWhat are the number of votes for each state?\nSELECT  SELECT COUNT(*) FROM votes WHERE state='NY'\nSELECT  SELECT COUNT(*) FROM votes WHERE state='CA'\n#VOTES_BY_CONTESTANT('contestant_number', 'vote_count')\nWhat are the number of votes for each contestant?.\nSELECT  SELECT COUNT(*) FROM votes WHERE contestant_number='02'\nSELECT  SELECT COUNT(*) FROM votes WHERE contestant_number='06'\n##DATA\n#INSERT INTO votes (vote_id, phone_number, state, contestant_number, created)\n##VALUES(NULL, '(213) 234-2440', 'NY', NULL, '10/20/2014 11:20:15');\nINSERT INTO votes (vote_id, phone_number, state, contestant_number, created)\nVALUES(NULL, '(213) 234"}
{"question": "How many contestants did not get voted?", "sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nHow many contestants did not get voted?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nHow many contestants did not get voted?. \nSELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT count(DISTINCT contestant_number)\nFROM  SELECT  SELECT"}
{"question": "What is the area code in which the most voters voted?", "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat is the area code in which the most voters voted?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat is the area code in which the most voters voted?. \nSELECT  SELECT_VOTES(SELECT_AREA_CODE_STATE(area_code, state) AS area_code_state, CONTESTANTS(contestant_number, contestant_name) AS contestant) AS most_voters\n\n\n#The following are the same as above, but accept optional arguments:\n#AREA_CODE_STATE('area_code', 'state', 'name')\n#CONTESTANTS('contestant_number', 'contestant_name', 'name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created', 'name')\n#\n\n#What is the state in which the most voters voted?.\n#SELECT  SELECT_VOTES(SELECT_AREA_CODE_STATE(area_code, state) AS area_code_state, CONTESTANTS(contestant_number, contestant_name) AS contestant) AS most_voters\n#\n#What is the state in which the most voters voted for John Smith?.\n#SELECT  SELECT_VOTES(SELECT_AREA_"}
{"question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?. \nSELECT  SELECT AREA_CODE_STATE('626', 'CA')\nSELECT  SELECT CONTESTANTS('2312312', 'Rachel Mills')\nSELECT  SELECT VOTES('0453623', '8472944232', 'CA', '2312312', '2017-06-07 09:53:31.000')\nSELECT  SELECT AREA_CODE_STATE('619', 'CA')\nSELECT  SELECT CONTESTANTS('2240518', 'Lexi Tessarolo')\nSELECT  SELECT VOTES('0453562', '8592673334', 'CA', '2240518', '2017-05-18 21:34:29.000')\nSELECT  SELECT AREA_CODE_STATE('951', 'CA')\nSELECT  SELECT CONTESTANTS('2190325', 'Wendy Dawson"}
{"question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.. \nSELECT  SELECT 'Tabatha Gehling' as contestant_name, 'Kelly Clauss' as contestant_name FROM 'voter_1' where\n    CONTESTANTS('tabatha_gehling', 'kelly_clauss') \nList the contestants who voted in only one area code in the state of Illinois. \nSELECT  SELECT 'contestant_name' as contestant_name FROM 'voter_1' where\n    AREA_CODE_STATE('0212345678', 'illinois') \nList the contestants who voted in only the area code 0212345678. \nSELECT  SELECT 'contestant_name' as contestant_name FROM 'voter_1' where\n    AREA_CODE_STATE('0212345678', 'illinois') and\n    CONTESTANTS('contestant_name', 'tabatha_gehling')\n\n# Your code goes here!\n\n#List the contestants who voted in only the area code 0212345678. \n"}
{"question": "Return the names of the contestants whose names contain the substring 'Al' .", "sql": "select contestant_name from contestants where contestant_name like \"%al%\"", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nReturn the names of the contestants whose names contain the substring 'Al' .. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nReturn the names of the contestants whose names contain the substring 'Al' .. \nSELECT  SELECT  SELECT  SELECT \n  CONTESTANTS  CONTESTANTS  CONTESTANTS  CONTESTANTS \n  WHERE  WHERE  WHERE  WHERE  WHERE \n  CONTESTANTS.NAME LIKE '%Al%' \n  AND  AND  AND  AND  AND \n  CONTESTANTS.NAME LIKE '%An%' \n  AND  AND  AND  AND  AND \n  CONTESTANTS.NAME LIKE '%Am%' \n  AND  AND  AND  AND  AND \n  CONTESTANTS.NAME LIKE '%Ap%' \n  AND  AND  AND  AND  AND \n  CONTESTANTS.NAME LIKE '%Aq%' \n  AND  AND  AND  AND  AND \n  CONTESTANTS.NAME LIKE '%Ar%' \n  AND  AND  AND  AND  AND \n  CONTESTANTS.NAME LIKE '%As%' \n  AND  AND  AND  AND  AND \n  CONTESTANTS.NAME LIKE '%At%' \n  AND  AND  AND  AND  AND \n  CONTESTANTS.NAME LIKE '%Au%' \n "}
{"question": "What are the names of all the countries that became independent after 1950?", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of all the countries that became independent after 1950?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of all the countries that became independent after 1950?. \nSELECT  SELECT country.Name, year.Year from country, countrylanguage, countryworld where country.CountryCode = countrylanguage.CountryCode and country.CountryCode = countryworld.CountryCode and countryworld.Year > 1950;\n#So, with the sqlite module, you can import tables and queries from a file. And also, if you open a file and add a line with a ; on the end of the line, it will do all the operations on it.\n#sqlite_table_info(database_name, table_name)\n#sqlite_import(database_name, table_name, file_name)\n#sqlite_open(database_name, handle)\n#sqlite_version()\n#sqlite_version_info()\n\n\n#Returns a list of all tables in a SQLite database \n#SELECT * FROM sqlite_master;\n\n#Returns a list of all columns for a particular table.\n#SELECT * FROM table_name;\n\n#Returns a string with the type of a particular column.\n#SELECT type FROM table_name WHERE column_name = 'col_name';\n\n#Returns a list of all indexes for a particular table."}
{"question": "Give the names of the nations that were founded after 1950.", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of the nations that were founded after 1950.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of the nations that were founded after 1950.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nTO_CHAR(datepart(yy, createtime) ,'9999') AS Created_Year, \n\nTO_CHAR(datepart(hh, createtime), '9999') AS Created_Hour,\n\nTO_CHAR(datepart(mi, createtime), '9999') AS Created_Minute,\n\nTO_CHAR(datepart(ss, createtime), '9999') AS Created_Second,\n\nTO_CHAR(datepart(i, createtime), '9999') AS Created_Day,\n\nTO_CHAR(datepart(hh, createtime), '9999') AS Created_Hour,\n\nTO_CHAR(datepart(mi, createtime), '9999') AS Created_Minute,\n\nTO_CHAR(datepart(ss, createtime), '9999') AS Created_Second,\n\nTO_CHAR(datepart(dd, createtime), '9999') AS Created"}
{"question": "How many countries have a republic as their form of government?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries have a republic as their form of government?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries have a republic as their form of government?. \nSELECT  SELECT \nCOUNT(*) FROM sqlite_master WHERE type = 'table' AND tbl_name = 'country' \nWHERE tbl_name = 'country'\nGROUP BY tbl_name;\nThe result is 182 (taken from https://www.cia.gov/library/publications/the-world-factbook/geos/xx.html). \n\n# Put a table on your mysql/postgres instance, with the following structure: \n#CREATE TABLE IF NOT EXISTS \"table_name\" (\"id\" INTEGER PRIMARY KEY, \"name\" VARCHAR(20), \"city_id\" INTEGER, \"country_id\" INTEGER); \n#Do a migration, to add your tables. \n#mysql> SHOW DATABASES; \n# mysql> SHOW TABLES; \n# mysql> show tables like \"table_name\"; \n# mysql> SHOW TABLES LIKE \"table_name\"; \n# mysql> CREATE TABLE IF NOT EXISTS \"table_name\" (\"id\" INTEGER PRIMARY KEY, \"name\" VARCHAR(20), \"city_id\" INTEGER, \"country_id\""}
{"question": "How many countries have governments that are republics?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries have governments that are republics?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries have governments that are republics?. \nSELECT  SELECT \nFROM    country\nWHERE   government='republic'\nGROUP BY country\n\nWhat is the average life expectancy for women in countries whose \ngovernments are republics?. \nSELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT \n(SELECT "}
{"question": "What is the total surface area of the countries in the Caribbean region?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total surface area of the countries in the Caribbean region?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total surface area of the countries in the Caribbean region?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "How much surface area do the countires in the Carribean cover together?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow much surface area do the countires in the Carribean cover together?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow much surface area do the countires in the Carribean cover together?. \nSELECT  SELECT country.Code, SUM(country.SurfaceArea) FROM world_1, country WHERE country.CountryCode='CA' AND country.Continent='Caribbean' GROUP BY country.CountryCode\nWhat are the country codes for the countries in the Caribbean?\nSELECT  SELECT country.Code, country.Continent FROM world_1, country WHERE country.CountryCode='CA' AND country.Continent='Caribbean'\nWhat are the countries of the Caribbean?.\nSELECT  SELECT country.CountryCode, country.Continent, country.Name FROM world_1, country WHERE country.CountryCode='CA' AND country.Continent='Caribbean' ORDER BY CountryCode ASC\nWhat are the most populous countries in the Caribbean?\nSELECT  SELECT country.CountryCode, country.Continent, country.Name, country.Population FROM world_1, country WHERE country.CountryCode='CA' AND country.Continent='Caribbean' ORDER BY Population DESC\nWhat are the most populous countries in the world?. \nSELECT  SELECT country.CountryCode, country.Continent, country.Name, country.Population FROM world_1, country WHERE"}
{"question": "Which continent is Anguilla in?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent is Anguilla in?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent is Anguilla in?. \n}
{"question": "What is the continent name which Anguilla belongs to?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the continent name which Anguilla belongs to?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the continent name which Anguilla belongs to?. \n}
{"question": "Which region is the city Kabul located in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich region is the city Kabul located in?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich region is the city Kabul located in?. \nSELECT  SELECT \nCountryCode, \nName, \nContinent, \nRegion, \nSurfaceArea, \nIndepYear, \nPopulation, \nLifeExpectancy, \nGNP, \nGNPOld, \nLocalName, \nGovernmentForm, \nHeadOfState, \nCapital, \nCode2 \nfrom country \nwhere CountryCode = 'AF' and Name = 'Kabul' \norder by SurfaceArea \n\\end{code}\n\nThis is the output:\n\n\\begin{code}\n1  Afghanistan Asia Asia Asia Kabul 258391 Kabul 35 61.9 50.02314822348452 2016-05-11 00:00:00.000 2015-08-06 00:00:00.000 2016-05-11 00:00:00.000 2016-05-1"}
{"question": "What region is Kabul in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat region is Kabul in?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat region is Kabul in?. \nSELECT  SELECT city.ID, city.Name, city.CountryCode, city.District, city.Population,\n\tcountry.Code, country.Name, country.Continent, country.Region, country.SurfaceArea,\n\tcountry.IndepYear, country.Population, country.LifeExpectancy, country.GNP,\n\tcountry.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital,\n\tcountry.Code2\n\tFROM world_1;\nThe result is:\ncity.ID city.Name country.Code city.District city.Population country.Code country.Name country.Continent country.Region country.SurfaceArea country.IndepYear country.Population country.LifeExpectancy country.GNP country.GNPOld country.LocalName country.GovernmentForm country.HeadOfState country.Capital country.Code2\n1  Kabul Afghanistan AFG  Kabul Kabul 5755135 35040000 1919 295390 17.2 17"}
{"question": "Which language is the most popular in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is the most popular in Aruba?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is the most popular in Aruba?. \nSELECT  SELECT lang.Code AS CountryLanguageCode,\nSELECT  lang.Language AS CountryLanguageName\nFROM    country\nINNER JOIN lang\n    ON country.Code = lang.Code\nWHERE   lang.Code != 'N/A'\nGROUP BY lang.Code\nORDER BY lang.Language;\n\n\nCREATE VIRTUAL TABLE `world_1` USING fts3 (\n  `ID` INTEGER NOT NULL,\n  `Name` TEXT NOT NULL,\n  `CountryCode` INTEGER NOT NULL,\n  `District` TEXT NOT NULL,\n  `Population` INTEGER NOT NULL,\n  PRIMARY KEY (`ID`)\n);\nCREATE VIRTUAL TABLE `country` USING fts3 (\n  `Code` INTEGER NOT NULL,\n  `Name` TEXT NOT NULL,\n  `Continent` INTEGER NOT NULL,\n  `Region` TEXT NOT NULL,\n  `SurfaceArea` INTEGER NOT NULL,\n  `IndepYear` INTEGER NOT NULL,\n  `Population` INTEGER NOT NULL,\n  `LifeExpectancy` INTEGER NOT"}
{"question": "What language is predominantly spoken in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat language is predominantly spoken in Aruba?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat language is predominantly spoken in Aruba?. \n}
{"question": "What are the population and life expectancies in Brazil?", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the population and life expectancies in Brazil?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the population and life expectancies in Brazil?. \n}
{"question": "Give me Brazil\u2019s population and life expectancies.", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive me Brazil\u2019s population and life expectancies.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive me Brazil\u2019s population and life expectancies.. \n}
{"question": "What are the region and population of Angola?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the region and population of Angola?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the region and population of Angola?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "What region does Angola belong to and what is its population?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat region does Angola belong to and what is its population?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat region does Angola belong to and what is its population?. \nSELECT  SELECT  country('CO', 'Angola', 'Africa', 'Southern Africa', '2409000', 1975, '23.5', '81.6', '73.4', 'Portuguese', 'Pre-War Democracy', 'Post-War Democracy', 'United Kingdom', 'Luanda', 'CO', '25072')\n    FROM world_1\n    WHERE countryCode = 'CO'\nWhat is the population of the United Kingdom?. \nSELECT population('UK', '2016', 18039351)\n    FROM world_1\n    WHERE countryCode = 'UK'\nWhat is the population of the United States?. \nSELECT population('US', '2016', 32291884)\n    FROM world_1\n    WHERE countryCode = 'US'\nWhat is the population of Belgium?. \nSELECT population('BE', '2016', 11428415)\n    FROM world_1\n    WHERE countryCode = 'BE'\nWhat is the population of"}
{"question": "What is the average expected life expectancy for countries in the region of Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average expected life expectancy for countries in the region of Central Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average expected life expectancy for countries in the region of Central Africa?. \n}
{"question": "How long is the people\u2019s average life expectancy in Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow long is the people\u2019s average life expectancy in Central Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow long is the people\u2019s average life expectancy in Central Africa?. \nSELECT  SELECT  COUNT(1) AS CountryCount,\n        AVG(Population) AS AvgPopulation,\n        AVG(LifeExpectancy) AS AvgLifeExpectancy,\n        AVG(GNP) AS AvgGNP,\n        AVG(GNPOld) AS AvgGNPOld,\n        AVG(IsOfficial) AS AvgIsOfficial,\n        AVG(Percentage) AS AvgPercentage\nFROM sqlite_master\nWHERE type='table' AND name='country'\nGROUP BY CountryCount, AvgPopulation, AvgLifeExpectancy, AvgGNP, AvgGNPOld, AvgIsOfficial, AvgPercentage\nHAVING AvgPopulation > 50000;\n\nHow long is the people\u2019s average life expectancy in Central America?. \nSELECT  SELECT  COUNT(1) AS CountryCount,\n        AVG(Population) AS AvgPopulation,\n        AVG(LifeExpectancy) AS AvgLifeExpectancy,\n        AVG(GNP) AS AvgGNP,\n        AVG(GNPOld"}
{"question": "What is the name of country that has the shortest life expectancy in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the name of country that has the shortest life expectancy in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the name of country that has the shortest life expectancy in Asia?. \n}
{"question": "Give the name of the country in Asia with the lowest life expectancy.", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the country in Asia with the lowest life expectancy.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the country in Asia with the lowest life expectancy.. \n}
{"question": "What is the total population and maximum GNP in Asia?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population and maximum GNP in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population and maximum GNP in Asia?. \nSELECT  SELECT  FROM  FROM  FROM  FROM  FROM  FROM \nFROM sqlite_sequence('name');\nSELECT  SELECT  FROM  FROM  FROM  FROM  FROM \nFROM country;\nSELECT  SELECT  FROM  FROM  FROM  FROM  FROM \nFROM city;\nSELECT  SELECT  FROM  FROM  FROM  FROM  FROM \nFROM countrylanguage;\n#country('ID', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\nSELECT  FROM  FROM  FROM  FROM  FROM  FROM \nFROM country;\nSELECT  FROM  FROM  FROM  FROM  FROM \nFROM countrylanguage;\n\n###\n#The following code demonstrates how to write a SQLite extension.\n#The \"cursor\" data type is a cursor within a cursor.  It is used to\n#support multi-row SELECT statements.\n#The \"set\" data type is used for setting user-defined parameters for\n#\"cursor\" queries.\n"}
{"question": "How many people live in Asia, and what is the largest GNP among them?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in Asia, and what is the largest GNP among them?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in Asia, and what is the largest GNP among them?. \n}
{"question": "What is the average life expectancy in African countries that are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average life expectancy in African countries that are republics?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average life expectancy in African countries that are republics?. \n}
{"question": "Give the average life expectancy for countries in Africa which are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the average life expectancy for countries in Africa which are republics?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the average life expectancy for countries in Africa which are republics?. \nSELECT  SELECT AVERAGE(life_expectancy) FROM world_1 WHERE code IN (SELECT code FROM country WHERE government_form = \"republic\");\nSELECT AVERAGE(life_expectancy) FROM world_1 WHERE code IN (SELECT code FROM country WHERE government_form = \"republic\");\n# SELECT code FROM world_1 WHERE life_expectancy = '30.6';\nSELECT life_expectancy FROM world_1 WHERE life_expectancy = '30.6';\n# select CONCAT(name, ' ', code) from country where code = 'BR';\nSELECT name FROM country WHERE code = 'BR';\n#SELECT name FROM country WHERE code = 'BR' order by name;\nSELECT name FROM country WHERE code = 'BR' order by name;\n# CREATE TABLE country (id integer NOT NULL AUTO_INCREMENT, name varchar(32) NOT NULL, code varchar(32) NOT NULL, CONSTRAINT pk_country PRIMARY KEY (id));\nCREATE TABLE country (id integer NOT NULL AUTO_INCREMENT, name varchar(32) NOT NULL, code varchar(32) NOT NULL, CONSTRAINT pk_country"}
{"question": "What is the total surface area of the continents Asia and Europe?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total surface area of the continents Asia and Europe?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total surface area of the continents Asia and Europe?. \nSELECT  SELECT  SELECT\n#country('CODE2', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'CODE2')\n#country('CODE', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'CODE2')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\nSELECT\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'Local"}
{"question": "Give the total surface area covered by countries in Asia or Europe.", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the total surface area covered by countries in Asia or Europe.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the total surface area covered by countries in Asia or Europe.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "How many people live in Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in Gelderland district?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in Gelderland district?. \nSELECT  SELECT * FROM city, country WHERE country.code = city.CountryCode and city.country.country.continent = 'Europe' ORDER BY city.name\n# Run the previous query on the database that was created with the SQL world_1 SQL script.\n# This is the result:\n#-------------------------------------------------------------------\n# Name | CountryCode | District | Population | LifeExpectancy | GNP | GNPOld | LocalName   | GovernmentForm | HeadOfState | Capital | Code2\n#-------------------------------------------------------------------\n# Arnhem            43       Gelderland    733246      79.94     48.06     33.46       Netherlands   Democracy    Willem Alexander  Arnhem  NL-56111\n# Doetinchem      145       Gelderland    254326      80.90     37.10     23.74       Netherlands   Democracy    Willem Alexander  Doetinchem  NL-58007\n# Elburg            41       Gelderland    47811      78.70     3"}
{"question": "What is the total population of Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population of Gelderland district?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population of Gelderland district?. \nSELECT  SELECT world_1.Population FROM world_1 WHERE world_1.District=\"Gelderland\"\n###\nSELECT * FROM world_1 WHERE world_1.CountryCode = 'NED'\n###\nSELECT * FROM world_1 WHERE country.CountryCode = 'USA'\n###\nCREATE TABLE city (ID INTEGER PRIMARY KEY, Name STRING, CountryCode STRING, District STRING, Population INTEGER);\n\nCREATE TABLE country (Code INTEGER PRIMARY KEY, Name STRING, Continent STRING, Region STRING, SurfaceArea INTEGER, IndepYear INTEGER, Population INTEGER, LifeExpectancy INTEGER, GNP INTEGER, GNPOld INTEGER, LocalName STRING, GovernmentForm STRING, HeadOfState STRING, Capital STRING, Code2 STRING);\n\nCREATE TABLE countrylanguage (CountryCode INTEGER PRIMARY KEY, Language STRING, IsOfficial INTEGER, Percentage INTEGER);\n\nCREATE TABLE countryregion (CountryCode INTEGER PRIMARY KEY, Region STRING);\n\nCREATE TABLE countrycontinent (CountryCode INTEGER PRIMARY KEY,"}
{"question": "What is the average GNP and total population in all nations whose government is US territory?", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average GNP and total population in all nations whose government is US territory?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average GNP and total population in all nations whose government is US territory?. \nSELECT  SELECT world_1.Code AS CountryCode,\n         world_1.Name AS Name,\n         world_1.District AS District,\n         world_1.Population AS Population,\n         world_1.LifeExpectancy AS LifeExpectancy,\n         world_1.GNP AS GNP,\n         world_1.GNPOld AS GNPOld,\n         world_1.LocalName AS LocalName,\n         world_1.GovernmentForm AS GovernmentForm,\n         world_1.HeadOfState AS HeadOfState,\n         world_1.Capital AS Capital,\n         world_1.Code2 AS Code2\n         FROM world_1\n         WHERE world_1.CountryCode = 'US'\n         AND world_1.GovernmentForm = 'USTerritory';\n\nAnswer: It may not be as simple as the first three answers you received. Your best bet may be to create a 'staging table' to hold the data you need, then have a separate 'destiny table' that will receive the data you want from the 'staging table' as a 'merge'.\n\nYou will need to perform"}
{"question": "Give the mean GNP and total population of nations which are considered US territory.", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the mean GNP and total population of nations which are considered US territory.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the mean GNP and total population of nations which are considered US territory.. \nSELECT  SELECT AVG(GNP),AVG(Population)\nFROM (\nSELECT CountryCode, \nCountryLanguage, \nISOCTRAN(CountryLanguage),\nLANGUAGE_PERCENTAGE \nFROM country\n) d\nGROUP BY CountryLanguage; \n\n$current_country_id = 1141;\n\n$current_country = get_country_info($current_country_id);\n\n$current_country_language = $current_country['Language'];\n\n$current_country_lang_iso = ISOCTRAN($current_country_language);\n\n$current_country_lang_percentage = $current_country['Language_Percentage'];\n\n$current_country_region_name = $current_country['Region'];\n\n$current_country_population = $current_country['Population'];\n\n$current_country_capital = $current_country['Capital'];\n\n$current_country_continent_code = $current_country['Continent'];\n\n$current_country_code = $current_country['Code'];\n\n$current_country_government_type"}
{"question": "How many unique languages are spoken in the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many unique languages are spoken in the world?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many unique languages are spoken in the world?. \nSELECT  SELECT COUNT(*)\nFROM sqlite_master WHERE type = 'index' AND name LIKE 'language%'\n#sqlite_master_table_size('language')\n#sqlite_index_info('name', 'language', 'language')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n#sqlite_index_info('name', 'country', 'country')\n"}
{"question": "What is the number of distinct languages used around the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of distinct languages used around the world?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of distinct languages used around the world?. \nSELECT  SELECT DISTINCT language.Language, country.CountryCode, country.IsOfficial, country.Percentage\nFROM country\nINNER JOIN language ON language.CountryCode = country.CountryCode\nGROUP BY language.Language\nORDER BY 1\nWhat is the number of distinct languages used around the world?. \nSELECT DISTINCT country.CountryCode, country.IsOfficial, country.Percentage\nFROM country\nINNER JOIN language ON language.CountryCode = country.CountryCode\nGROUP BY country.CountryCode, country.IsOfficial, country.Percentage\nORDER BY 1\nWhat is the number of distinct countries that have at least one of these languages?. \nSELECT  SELECT DISTINCT country.CountryCode, language.Language\nFROM country\nINNER JOIN language ON language.CountryCode = country.CountryCode\nGROUP BY country.CountryCode, language.Language\nORDER BY 1\nWhat is the number of distinct countries that have at least one of these languages?. \nSELECT DISTINCT country.CountryCode\nFROM country\nINNER JOIN language ON language.CountryCode = country.CountryCode\nGROUP BY country.CountryCode\nORDER BY 1\nWhat is the number of"}
{"question": "How many type of governments are in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many type of governments are in Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many type of governments are in Africa?. \nSELECT  SELECT \n* \nFROM   country\nORDER BY   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14\n\\end{code}\n\noutput:\n\n\\begin{code}\n----------------------------------------------\n|   Name    |   CountryCode |  Continent   |\n|---------------------|---------|-----------|\n| BENIN      |   VDN         |  Africa     |\n| BENIN      |   VDN         |  Western Africa|\n| BENIN      |   VDN         |                 |\n| BENIN      |   VDN         |                 |\n| BENIN      |   VDN         |                 |\n| BENIN      |   VDN         |                 |\n| BENIN      |   VDN         |                 |\n| BENIN      |   VDN         |                 |\n| BENIN      |   VDN         |                 |\n| BENIN      |   VDN         |                 |\n| BENIN      |"}
{"question": "How many different forms of governments are there in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many different forms of governments are there in Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many different forms of governments are there in Africa?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What is the total number of languages used in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of languages used in Aruba?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of languages used in Aruba?. \nSELECT  SELECT COUNT(DISTINCT 'L'||SUBSTR(CONVERT(nvarchar(100), 'LANGUAGE'), 1, 2))\nFROM   languages\nWHERE  'Aruba' IN (\n    SELECT  'CountryCode'\n    FROM   country\n    WHERE  'Language' IN ('English', 'Dutch')\n)\n\nSELECT  SELECT COUNT(DISTINCT 'L'||SUBSTR(CONVERT(nvarchar(100), 'LANGUAGE'), 1, 2))\nFROM   languages\nWHERE  'Aruba' IN (\n    SELECT  'CountryCode'\n    FROM   country\n    WHERE  'Language' IN ('English', 'Dutch')\n) AND 'Netherlands' IN (\n    SELECT  'CountryCode'\n    FROM   country\n    WHERE  'Language' IN ('English', 'Dutch')\n)\n\n### SQL Server MSSQL database, with their properties:\n#table('Name', 'Type', 'ColumnSize', 'ColumnType')\n#tablecolumn('Name', 'Name', 'Type', 'ColumnSize', 'ColumnType')\n#view('"}
{"question": "How many languages are spoken in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many languages are spoken in Aruba?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many languages are spoken in Aruba?. \nSELECT  SELECT count(language.Language) AS count_languages\nFROM    language\nGROUP BY language.Language\nORDER BY count_languages DESC;\n#SELECT  SELECT count(country.CountryCode) AS count_countries\nFROM    country\nGROUP BY country.CountryCode\nORDER BY count_countries DESC;\n#SELECT  SELECT count(country.CountryCode) AS count_countries\nFROM    country\nGROUP BY country.CountryCode\nORDER BY count_countries DESC;\n#SELECT  SELECT count(country.CountryCode) AS count_countries\nFROM    country\nGROUP BY country.CountryCode\nORDER BY count_countries DESC;\n\n### CREATE a new database.\n#\n#This script, using sqlite3, creates a sqlite database from a sql script. \n#\n#The database is created in a directory of the current path, named 'world_1'.\n#\n#It will execute the sql script on sqlite3, and will create the database.\n#\n#It will then write a SQL script in the current directory to be executed on sqlite3\n#with the new database structure.\n#\n#It will also overwrite the sqlite3 file in the"}
{"question": "How many official languages does Afghanistan have?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many official languages does Afghanistan have?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many official languages does Afghanistan have?. \nSELECT  SELECT_COUNT(*) AS \"count\", country(\"CountryCode\") AS \"country\" FROM country WHERE \"Code\" = 'AF' AND \"Language\" IN ('Pashto', 'Dari', 'Tajik', 'Urdu', 'Hazara', 'Pamiri', 'Pashto', 'Turkish', 'Hindi', 'Kabuli', 'Sanskrit', 'Hazara', 'Pashto', 'Tajik', 'Turkish', 'Pamiri')\nSELECT  SELECT_COUNT(*) AS \"count\", country(\"CountryCode\") AS \"country\" FROM country WHERE \"Code\" = 'AF' AND \"Language\" IN ('Turkish', 'Tajik', 'Urdu', 'Pashto', 'Hazara', 'Pamiri', 'Pashto', 'Hindi', 'Kabuli', 'Sanskrit', 'Hazara', 'Pashto', 'Turkish', 'Pamiri')\n\n### The SQLite SQLite SQL world_1 database, with their properties:\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea"}
{"question": "How many official languages are spoken in Afghanistan?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many official languages are spoken in Afghanistan?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many official languages are spoken in Afghanistan?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT "}
{"question": "What is name of the country that speaks the largest number of languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is name of the country that speaks the largest number of languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is name of the country that speaks the largest number of languages?. \nSELECT  SELECT DISTINCT CountryCode, Language, IsOfficial, Percentage FROM country;\n- The database is a standard sqlite3 database\n- the query should return a single row with a single countryCode. The language should be the first column, followed by a 0 or 1 (IsOfficial) followed by the percent of the country that speaks that language.\n- You can assume that the rows in the database are valid and that you can use all of the fields.\n\n\n## Brute Force\n\nThe brute force solution to this problem would be to use a database query tool to parse the entire data set in the database and sort it by percentage.\n\n## Dynamic Programming\n\nAnother solution to this problem would be to use dynamic programming. To do this, the program would first create a map from the 2-tuple (countryCode, language) to the percentage that speaks that language. This can be done by making two passes over the data. The first pass would populate the map with each language that exists in the data and the second pass would look at each country and see if it has a language that isn't in the map. If it does, it would add that language to the map"}
{"question": "Give the name of the nation that uses the greatest amount of languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the nation that uses the greatest amount of languages.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the nation that uses the greatest amount of languages.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT "}
{"question": "Which continent has the most diverse languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent has the most diverse languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent has the most diverse languages?. \nSELECT  SELECT DISTINCT continent.Code, COUNT(language.Code) AS number_of_languages FROM continent\n\tLEFT OUTER JOIN countrylanguage ON countrylanguage.Continent = continent.Code\nGROUP BY continent.Code;\n## 2\n## 3\n## 4\n## 5\n## 6\n## 10\n## 16\n## 23\n## 13\n## 6\n## 10\n## 15\n## 5\n## 13\n## 9\n## 17\n## 20\n## 22\n## 25\n## 20\n## 21\n## 33\n## 37\n## 35\n## 41\n## 45\n## 47\n## 43\n## 49\n## 51\n## 55\n## 58\n## 61\n## 64\n## 66\n## 70\n## 72\n## 77\n## 81\n## 83\n## 87\n## 91\n## 93\n##"}
{"question": "Which continent speaks the most languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent speaks the most languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent speaks the most languages?. \nSELECT  SELECT_SUBQUERY(0, 0, 'SELECT country.Code, count(language.Language) FROM country, language GROUP BY country.Code ORDER BY country.Code, count(language.Language) DESC', 'SELECT country.Code, count(language.Language) FROM country, language GROUP BY country.Code ORDER BY country.Code DESC;')\n# Select the countries with the most languages:\nSELECT SELECT_SUBQUERY(0, 0, 'SELECT country.Code, count(language.Language) FROM country, language GROUP BY country.Code ORDER BY country.Code DESC;')\nSELECT SELECT_SUBQUERY(0, 0, 'SELECT country.Code, count(language.Language) FROM country, language GROUP BY country.Code ORDER BY country.Code DESC;')\nSELECT SELECT_SUBQUERY(0, 0, 'SELECT country.Code, count(language.Language) FROM country, language GROUP BY country.Code ORDER BY country.Code DESC;')\n# For each country, the language spoken by the most people\nSELECT SELECT_SUBQUERY(0, 0, 'SELECT country.Code, count(language.Language) FROM country, language GROUP BY country."}
{"question": "How many countries speak both English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries speak both English and Dutch?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries speak both English and Dutch?. \nSELECT  SELECT DISTINCT(country.CountryCode) AS \"Countries\"\nWHERE (city.Name like '%E')\nAND (city.CountryCode = country.CountryCode)\nAND (city.CountryCode LIKE '%D')\nAND (city.District LIKE '%A')\nGROUP BY country.CountryCode\nORDER BY country.CountryCode ASC;\n\n### MySQL SQL world_1 database, with their properties:\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#person('ID', 'Name', 'Age', 'Birthday', 'BirthCountry', 'BirthCity')\nHow many countries speak both English and Dutch?. \nSELECT  SELECT DISTINCT("}
{"question": "What is the number of nations that use English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of nations that use English and Dutch?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of nations that use English and Dutch?. \nSELECT  SELECT \n  countrycode('Codes', 'Countries', 'CountriesWithEnglishLanguage', 'CountriesWithDutchLanguage') \n  FROM \n  table('World', '1')\n  WHERE \n  countrycode('Codes', 'Countries', 'CountriesWithEnglishLanguage', 'CountriesWithDutchLanguage') = '1' \n  AND \n  countrycode('Codes', 'Countries', 'CountriesWithEnglishLanguage', 'CountriesWithDutchLanguage') = '2'\n  AND \n  countrycode('Codes', 'Countries', 'CountriesWithEnglishLanguage', 'CountriesWithDutchLanguage') = '3'\n  AND \n  countrycode('Codes', 'Countries', 'CountriesWithEnglishLanguage', 'CountriesWithDutchLanguage') = '4'\n  AND \n  countrycode('Codes', 'Countries', 'CountriesWithEnglishLanguage', 'CountriesWithDutchLanguage') = '5'\n  AND \n  countrycode('Codes', 'Countries', 'CountriesWithEnglishLanguage', 'CountriesWithDutchLanguage') = '6'\n  AND"}
{"question": "What are the names of nations speak both English and French?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of nations speak both English and French?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of nations speak both English and French?. \nSELECT  SELECT \n    country.Code AS \"Code\",\n    country.Name AS \"Name\",\n    country.Continent AS \"Continent\",\n    country.Region AS \"Region\",\n    country.SurfaceArea AS \"SurfaceArea\",\n    country.IndepYear AS \"IndepYear\",\n    country.Population AS \"Population\",\n    country.LifeExpectancy AS \"LifeExpectancy\",\n    country.GNP AS \"GNP\",\n    country.GNPOld AS \"GNPOld\",\n    country.LocalName AS \"LocalName\",\n    country.GovernmentForm AS \"GovernmentForm\",\n    country.HeadOfState AS \"HeadOfState\",\n    country.Capital AS \"Capital\",\n    country.Code2 AS \"Code2\"\nFROM  (\n    SELECT  \"Name\" AS \"Name\",\n    \"CountryCode\" AS \"CountryCode\",\n    \"Continent\" AS \"Continent\",\n    \"Region\" AS \"Region\",\n    \"SurfaceArea\" AS \"SurfaceArea\",\n    \"IndepYear\" AS \"IndepYear\",\n    \"Population\" AS \""}
{"question": "Give the names of nations that speak both English and French.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of nations that speak both English and French.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of nations that speak both English and French.. \nSELECT  SELECT DISTINCT CountryName FROM country WHERE (CountryLanguage = 'English' OR CountryLanguage = 'French')\nGROUP BY CountryName\nORDER BY CountryName\n#country('ID', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('ID', 'Language', 'IsOfficial', 'Percentage')\n\ndef database_operations():\n    # Setup a connection to the database\n    connection = sqlite3.connect(os.path.join(os.path.dirname(__file__), 'sqlite', 'world_1.db'))\n    # All tables should exist by default\n    # Create them, if they do not exist\n    #sqlite3.execute(create_tables)\n    # Select all countries\n    # (note: we are using \"DISTINCT\" to make sure we have no duplicated country names)\n    # Be careful: we are using \"DISTINCT\" here.  It is important not"}
{"question": "What are the names of nations where both English and French are official languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of nations where both English and French are official languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of nations where both English and French are official languages?. \nSELECT  SELECT  SELECT  SELECT \ncity(1, 'New York', 'US', '', '7906815') \ncity(2, 'London', 'UK', '', '7790781') \ncity(3, 'Paris', 'FR', '', '7216220')\n#cities(ID, Name, CountryCode, District, Population)\n#country(ID, Code, Name, Continent, Region, SurfaceArea, IndependYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n#countrylanguage(ID, Code, Name, IsOfficial, Percentage)\n\n\n\n\n\n# -- begin database operations --------------------------------------------\n# This is an example of a simple SQL SELECT statement in SQLite.\n# SELECT is used to pull out information from the table.\n# name() is used to select the name of the first record, and city() is used to \n# select the name of the first city.\n# The comma-separated string that follows each of the field names is used as a "}
{"question": "Give the names of countries with English and French as official languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of countries with English and French as official languages.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of countries with English and French as official languages.. \nSELECT  SELECT  country('CountryCode', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\nFROM    world_1\nWHERE   countryLanguage('CountryCode', 'Language', 'IsOfficial') = 'Y'\n\\end{code}\n\nComment: I don't think you can do this with the sqlite3 api.\n\nComment: Could you give an example of the SQL query you want to do in SQLite?\n\nAnswer: Since sqlite has a full support for common SQL you can do this with a `GROUP BY` clause:\n\n\\begin{code}\nSELECT Name\n  FROM countries\n WHERE Name NOT LIKE 'Continent'\n GROUP BY Name\nHAVING SUM(Population) > 0\n\\end{code}"}
{"question": "What is the number of distinct continents where Chinese is spoken?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of distinct continents where Chinese is spoken?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of distinct continents where Chinese is spoken?. \nSELECT  SELECT DISTINCT(countrycode) FROM country WHERE language = 'Chinese';\n# => 1\nWhat is the number of distinct countries where Spanish is spoken?.\n# => 16\nWhat is the number of distinct countries where Chinese is not spoken?. \nSELECT  SELECT DISTINCT(countrycode) FROM country WHERE language != 'Chinese';\n# => 166\nWhat is the number of distinct languages spoken in all countries?.\n# => 1027\nWhat is the number of distinct languages spoken in all countries where Chinese is spoken?.\n# => 16\nWhat is the number of distinct languages spoken in all countries where Spanish is spoken?.\n# => 102\nWhat is the number of distinct languages spoken in all countries where English is spoken?.\n# => 106\nWhat is the number of distinct languages spoken in all countries where Italian is spoken?.\n# => 12\nWhat is the number of distinct languages spoken in all countries where German is spoken?.\n# => 12\nWhat is the number of distinct languages spoken in all countries where Dutch is spoken?.\n# => 11\nWhat is the number of distinct languages spoken in all countries where"}
{"question": "How many continents speak Chinese?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many continents speak Chinese?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many continents speak Chinese?. \n}
{"question": "What are the regions that use English or Dutch?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the regions that use English or Dutch?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the regions that use English or Dutch?. \nSELECT  SELECT \nSELECT \n   (SELECT \n        countries.CountryCode\n       FROM countries\n       WHERE countries.CountryCode LIKE 'GBR'\n      ) AS country_name,\n   (SELECT \n        regions.Region\n       FROM regions\n       WHERE regions.Region LIKE 'UK'\n      ) AS region_name\n   FROM country_region\n   WHERE country_region.Region = country_region.CountryRegion\nWHERE country_region.CountryRegion LIKE 'GBR'\nAND country_region.Region LIKE 'UK'\n\n\n\n\n### How to search the database for English-speaking countries?\nSELECT \n   (SELECT \n        countries.CountryCode\n       FROM countries\n       WHERE countries.CountryCode LIKE 'UK'\n      ) AS country_name,\n   (SELECT \n        regions.Region\n       FROM regions\n       WHERE regions.Region LIKE 'UK'\n      ) AS region_name\n   FROM country_region\n   WHERE country_region.CountryRegion LIKE 'UK'\n   AND country_region.Region LIKE 'UK'\n\n\n\n\n\n### How to search the database for the name of a region?\nSELECT "}
{"question": "Which regions speak Dutch or English?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich regions speak Dutch or English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich regions speak Dutch or English?. \n}
{"question": "What are the countries where either English or Dutch is the official language ?", "sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the countries where either English or Dutch is the official language ?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the countries where either English or Dutch is the official language ?. \nSELECT  SELECT * FROM country WHERE code = 'US' or code = 'NL' and language = 'English' or language = 'Dutch';\nSELECT  SELECT * FROM country WHERE code = 'US' or code = 'NL' and language = 'English' or language = 'Dutch' AND INDEX(Name) = 1;\n"}
{"question": "Which countries have either English or Dutch as an official language?", "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich countries have either English or Dutch as an official language?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich countries have either English or Dutch as an official language?. \nSELECT  SELECT * FROM \"countries\" WHERE \"Countries\".\"Language\" IN ('en', 'nl') \nSELECT  SELECT * FROM \"countries\" WHERE \"Countries\".\"Language\" IN ('en', 'nl') AND \"Countries\".\"IsOfficial\" = 1 \nORDER BY \"Countries\".\"Name\" ASC;\n\n#sqlite_table_info('name', 'countries')\n#countries_id\n#NAME\n#COUNTRIES\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n#NULL\n"}
{"question": "Which language is the most popular on the Asian continent?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is the most popular on the Asian continent?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is the most popular on the Asian continent?. \nSELECT  SELECT  COUNTRYCODE, LANGUAGE, ISOFFICIAL, PERCENTAGE\nFROM      COUNTRY;\n# Select rows where CountryCode = 'China' and Language = 'Mandarin'.\nSELECT COUNTRYCODE, LANGUAGE, ISOFFICIAL, PERCENTAGE FROM COUNTRY WHERE COUNTRYCODE = 'China' AND LANGUAGE = 'Mandarin';\n# Update the language iso_official column to 100.0. \nUPDATE COUNTRY SET IS_Official = 100.0 WHERE COUNTRYCODE = 'China' AND LANGUAGE = 'Mandarin';\n# Delete the row with countrycode = 'Japan' and language = 'Japanese'.\nDELETE FROM COUNTRY WHERE COUNTRYCODE = 'Japan' AND LANGUAGE = 'Japanese';\n# Delete the row with countrycode = 'Mongolia' and language = 'Mongolian'.\nDELETE FROM COUNTRY WHERE COUNTRYCODE = 'Mongolia'"}
{"question": "What is the language that is used by the largest number of Asian nations?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the language that is used by the largest number of Asian nations?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the language that is used by the largest number of Asian nations?. \nSELECT  SELECT country.Name, country.Continent, country.Region, country.SurfaceArea, \n\tcountry.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, \n\tcountry.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2 \n\tFROM (SELECT * FROM country WHERE Population > 1000) AS country \n\tGROUP BY country.Name, country.Continent, country.Region, country.SurfaceArea, \n\tcountry.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, \n\tcountry.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2;\n\n# What is the capital of the country with the largest population in the Asian region? .\nSELECT name, country.CountryCode, country.Continent, country.Region, country.SurfaceArea, \n\tcountry.IndepYear, country.Population, country.LifeExpectancy, country.GN"}
{"question": "Which languages are spoken by only one country in republic governments?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich languages are spoken by only one country in republic governments?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich languages are spoken by only one country in republic governments?. \nSELECT  SELECT distinct CountryCode, SUM(IsOfficial) AS Total, SUM(Percentage) AS Percentage, CountryCode in GROUP BY CountryCode, SUM(IsOfficial) AS Total, SUM(Percentage) AS Percentage, CountryCode group by CountryCode, SUM(IsOfficial) AS Total, SUM(Percentage) AS Percentage, CountryCode\nSELECT  SELECT distinct CountryCode, SUM(IsOfficial) AS Total, SUM(Percentage) AS Percentage, CountryCode in GROUP BY CountryCode, SUM(IsOfficial) AS Total, SUM(Percentage) AS Percentage, CountryCode group by CountryCode, SUM(IsOfficial) AS Total, SUM(Percentage) AS Percentage, CountryCode\nSELECT  SELECT distinct CountryCode, SUM(IsOfficial) AS Total, SUM(Percentage) AS Percentage, CountryCode in GROUP BY CountryCode, SUM(IsOfficial) AS Total, SUM(Percentage) AS Percentage, CountryCode group by CountryCode, SUM(IsOfficial) AS Total, SUM(Percentage) AS Percentage, CountryCode\nSELECT  SELECT distinct CountryCode, SUM(IsOfficial)"}
{"question": "What languages are only used by a single country with a republic government?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat languages are only used by a single country with a republic government?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat languages are only used by a single country with a republic government?. \nSELECT  SELECT \nCOUNTRYCODE, \n    LANGUAGE, \n    ISOFFICIAL,\n    PERCENTAGE\n    FROM\n    country\n    WHERE\n    COUNTRYCODE = 'AZE'\n    GROUP BY COUNTRYCODE,\n    LANGUAGE,\n    ISOFFICIAL,\n    PERCENTAGE\n    UNION\n    SELECT  COUNTRYCODE, \n    LANGUAGE, \n    ISOFFICIAL, \n    PERCENTAGE \n    FROM  country\n    WHERE  COUNTRYCODE = 'AZE'\n    GROUP BY COUNTRYCODE,\n    LANGUAGE,\n    ISOFFICIAL,\n    PERCENTAGE\n    UNION\n    SELECT  COUNTRYCODE, \n    LANGUAGE, \n    ISOFFICIAL, \n    PERCENTAGE \n    FROM  country\n    WHERE  COUNTRYCODE = 'AZE'\n    GROUP BY COUNTRYCODE,\n    LANGUAGE,\n    ISOFFICIAL,\n    PER"}
{"question": "Find the city with the largest population that uses English.", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the city with the largest population that uses English.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the city with the largest population that uses English.. \nSELECT  SELECT name, countrycode, district, population,\n        city_flag\n        city_name, city_country, city_district, city_code, city_population,\n        city_flag\nFROM world_1.cities\nWHERE countrycode='England'\nORDER BY city_population DESC LIMIT 1\nCity Name : Manchester\nCountryCode : England\nDistrict : Manchester\nPopulation : 4437721\n\\end{code}\n\nI made a method for the find the cities with the largest population that use English and then an other method for the country where the city is located.\n\nHere is my code:\n\n\\begin{code}\n  def largest_population_by_language(query_string)\n    largest_population_query_string = query_string.split(' ')\n    results_array = []\n    results_array = query_string.split(' ')\n    query_string.split(' ')\n    largest_population_query_string.each do |query_string|\n      largest_population_query_string_array = query_string.split(' ')\n      query_string_"}
{"question": "What is the most populace city that speaks English?", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the most populace city that speaks English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the most populace city that speaks English?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "Find the name, population and expected life length of asian country with the largest area?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the name, population and expected life length of asian country with the largest area?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the name, population and expected life length of asian country with the largest area?. \nSELECT  SELECT  SELECT\nSELECT * FROM world_1\nWHERE Continent = 'Asia' AND Region = 'Asia' AND SurfaceArea > 100000000000\nORDER BY SurfaceArea DESC LIMIT 1\n\n\n\n# ==========================================================\n# 10. Aggregates\n# ==========================================================\n\n# SELECT \n# \tSELECT \n# \t\tSELECT \n# \t\t\tSELECT \n# \t\t\t\tSELECT \n# \t\t\t\t\tSELECT \n# \t\t\t\t\t\tSELECT \n# \t\t\t\t\t\t\tSELECT \n# \t\t\t\t\t\t\t\tSELECT \n# \t\t\t\t\t\t\t\t\tSELECT \n# \t\t\t\t\t\t\t\t\t\tSELECT \n# \t\t\t\t\t\t\t\t\t\t\tSELECT \n# \t\t\t\t\t\t\t\t\t\t\t\tSELECT \n# \t\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n# \t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What are the name, population, and life expectancy of the largest Asian country by land?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the name, population, and life expectancy of the largest Asian country by land?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the name, population, and life expectancy of the largest Asian country by land?. \nSELECT  SELECT city.ID, city.Name, city.CountryCode, city.District, city.Population, city.LifeExpectancy, country.CountryCode, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2 FROM city, country WHERE city.CountryCode = country.CountryCode\n\n#Python 2 sqlite3 library\n#import sqlite3\n#conn = sqlite3.connect('world_1.sqlite')\n#c = conn.cursor()\n#c.execute('SELECT * FROM country')\n#print c.fetchall()\n#c.execute('SELECT * FROM city')\n#print c.fetchall()\n#conn.close()\n\n#Python 3 sqlite3 library\n#from sqlite3 import dbapi2\n#db = dbapi2.connect('world_1.sqlite')\n#c = db.cursor()\n#c.execute('SELECT * FROM"}
{"question": "What is average life expectancy in the countries where English is not the official language?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is average life expectancy in the countries where English is not the official language?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is average life expectancy in the countries where English is not the official language?. \n}
{"question": "Give the mean life expectancy of countries in which English is not the official language.", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the mean life expectancy of countries in which English is not the official language.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the mean life expectancy of countries in which English is not the official language.. \nSELECT  SELECT mean(DISTINCT age) \nFROM  world_1\nWHERE  countrycode NOT IN ('US', 'CA', 'NZ', 'AU')\nGROUP BY  countrycode;\n## Expect the following output:\n#countrycode|mean(age)\n#United States|77.8\n#Canada|79.0\n#New Zealand|77.2\n#Australia|76.6\n###\n## Find the median of the following columns:\n### db.world_1.country['Population']\n### db.world_1.country['SurfaceArea']\n### db.world_1.country['Population']['Median']\n### db.world_1.country['SurfaceArea']['Median']\nSELECT\n  median(Population) AS median_Population,\n  median(SurfaceArea) AS median_SurfaceArea,\n  median(Population) AS median_Population_Group\nFROM (\n    SELECT countrycode, Median(Population) AS median_Population FROM world_1\n    GROUP BY countrycode\n) as group;\n## Expect the"}
{"question": "What is the total number of people living in the nations that do not use English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of people living in the nations that do not use English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of people living in the nations that do not use English?. \n}
{"question": "How many people live in countries that do not speak English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in countries that do not speak English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in countries that do not speak English?. \nSELECT  SELECT  SELECT\ncity.ID, city.Name, city.CountryCode, city.District, city.Population\nFROM city\nGROUP BY city.ID\nhaving COUNT(*) = 1;\n\nSELECT  SELECT  SELECT\ncountry.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2\nFROM country\nGROUP BY country.Code;\n\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "What is the official language spoken in the country whose head of state is Beatrix?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the official language spoken in the country whose head of state is Beatrix?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the official language spoken in the country whose head of state is Beatrix?. \nSELECT  SELECT countrycode('ID') AS CountryCode,\n                 language('ID') AS Language,\n                 IsOfficial('ID') AS IsOfficial,\n                 Percentage('ID') AS Percentage\n    FROM country\n    WHERE Name = 'The Netherlands'\n    LIMIT 1;\n# answer is: NL\n# CountryCode Language IsOfficial Percentage\n# =========================================================\n# NL NL       Yes   100.000000\n# =========================================================\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# "}
{"question": "What is the official language used in the country the name of whose head of state is Beatrix.", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the official language used in the country the name of whose head of state is Beatrix.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the official language used in the country the name of whose head of state is Beatrix.. \n}
{"question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of unique official languages spoken in the countries that are founded before 1930?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of unique official languages spoken in the countries that are founded before 1930?. \nSELECT  SELECT \n`population`\nFROM `world_1`\nWHERE `countryCode` = 'A'\nAND `year` >= 1800\nAND `year` <= 1930;\nWhat is the total number of countries that have a population greater than 3 million in 1930?. \nSELECT  SELECT \n`population`\nFROM `world_1`\nWHERE `year` = 1930\nAND `countryCode` = 'A'\nAND `year` >= 1930\nAND `year` <= 1930;\nWhat is the total number of countries that have a population greater than 3 million in 1930?. \nSELECT  SELECT \n`population`\nFROM `world_1`\nWHERE `year` = 1930\nAND `countryCode` = 'A'\nAND `year` >= 1930\nAND `year` <= 1930;\n### FROM SQLite, create two table:\n#CREATE TABLE \"world_1\" (\n#  \"name\" text,\n#  \"id\" integer,\n#"}
{"question": "For the countries founded before 1930, what is the total number of distinct official languages?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFor the countries founded before 1930, what is the total number of distinct official languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFor the countries founded before 1930, what is the total number of distinct official languages?. \nSELECT  SELECT st.CountryCode AS CountryCode, st.Languages AS Language, \n\t\t\t\t\t  st.IsOfficial AS IsOfficial, \n\t\t\t\t\t  st.Percentage AS Percentage, \n\t\t\t\t\t  MAX(CASE WHEN st.Language IS NULL THEN NULL ELSE st.Language END) AS NewLanguage \n\t\t\t\t\tFROM countries st\n\t\t\t\t\tWHERE EXISTS (SELECT * FROM (SELECT * FROM countries c LEFT JOIN (SELECT CountryCode FROM countries WHERE CountryCode LIKE '%Eritrea%' AND IsOfficial = 0) AS Alias ON c.CountryCode = Alias.CountryCode) WHERE c.CountryCode = st.CountryCode) AND st.IsOfficial = 1 AND st.CountryCode = 'ERI'\nGROUP BY st.CountryCode, st.Languages, st.IsOfficial, st.Percentage\nHAVING COUNT(DISTINCT NewLanguage) > 2\n \n"}
{"question": "What are the countries that have greater surface area than any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the countries that have greater surface area than any country in Europe?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the countries that have greater surface area than any country in Europe?. \nSELECT  SELECT DISTINCT ON(Name) Name, Continent, Region, SurfaceArea, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\nFROM Country\nGROUP BY Name, Continent, Region, SurfaceArea, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\nORDER BY SurfaceArea DESC\n\\end{code}\n\n\\begin{pre}\n\n(1, 'Asia', 'Central Asia', 'Asia', 17, 69, 65, 'Turkmenistan', 'presidential democracy', 'Ashgabat', 'TKM', '93.55')\n(2, 'Asia', 'Central Asia', 'Asia', 17, 69, 65, 'Kazakhstan', 'presidential democracy', 'Astana', 'KZ', '92.48')\n(3, 'Asia', 'Central Asia', 'Asia', 17, 6"}
{"question": "Which countries have greater area than that of any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich countries have greater area than that of any country in Europe?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich countries have greater area than that of any country in Europe?. \nSELECT  SELECT 100 AS a, 'Yes' AS b \nFROM   sqlite_sequence, country\nWHERE  country.CountryCode = 'USA'\nORDER  BY 2;\n'Yes'\nSELECT  SELECT 100 AS a, 'Yes' AS b \nFROM   sqlite_sequence, country\nWHERE  country.CountryCode = 'SouthAfrica'\nORDER  BY 2;\n'No'\nSELECT  SELECT 100 AS a, 'Yes' AS b \nFROM   sqlite_sequence, country\nWHERE  country.CountryCode = 'Germany'\nORDER  BY 2;\n'No'\nSELECT  SELECT 100 AS a, 'Yes' AS b \nFROM   sqlite_sequence, country\nWHERE  country.CountryCode = 'Brazil'\nORDER  BY 2;\n'No'\nSELECT  SELECT 100 AS a, 'Yes' AS b \nFROM   sqlite_sequence, country\nWHERE  country.CountryCode = 'Russia'\nORDER  BY 2;\n'No'\nSELECT  SELECT 100 AS a, 'Yes' AS b "}
{"question": "What are the African countries that have a  population less than any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the African countries that have a  population less than any country in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the African countries that have a  population less than any country in Asia?. \nSELECT  SELECT country.name, population.name \nFROM country, population\nWHERE population.population < country.population\nGROUP BY country.name, population.name\nORDER BY country.name;\n#Because they are grouped by the same fields, the result will be like this:\n#country('Cameroon', 'Cameroon', 'Africa', 'Central Africa', '13547959', '1975-01-1-0', '56.38', '13907.2', '8020.9', 'French', 'Central Africa', 'Yaound\u00e9', '147.818', 'CMR'), \n#country('Central African Republic', 'Central African Republic', 'Africa', 'Central Africa', '5416303', '1960-01-1-0', '38.68', '2385.1', '1454.9', 'French', 'Central Africa', 'Bangui', '147.818', 'CAR'), \n"}
{"question": "Which African countries have a smaller population than that of any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich African countries have a smaller population than that of any country in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich African countries have a smaller population than that of any country in Asia?. \nSELECT  SELECT_VALUE, COUNT(SELECT_VALUE) AS \"Number of countries\"\nFROM\n    (SELECT \"name\" FROM world_1\n     UNION ALL\n     SELECT \"name\" FROM country\n     WHERE \"Population\" < (SELECT \"Population\" FROM world_1)\n    ) AS countries\nGROUP BY COUNT(SELECT_VALUE)\nORDER BY \"Number of countries\" DESC\nLIMIT 100;\n\\end{code}\n\nAnswer: To get the smallest population in the entire world you can use:\n\n\\begin{code}\nSELECT name, population,\n       IF(population < (SELECT population FROM world_1), 0, 1) AS smallest\nFROM world_1\nGROUP BY name\nORDER BY smallest DESC;\n\\end{code}\n\nTo get all African countries which are smaller than any country in Asia, you can use:\n\n\\begin{code}\nSELECT name, population,\n       IF(population < (SELECT population FROM world_1), 0, 1) AS smallest,\n       IF(population < (SELECT population FROM country), 0, 1) AS smallest_country\nFROM world_1\n"}
{"question": "Which Asian countries have a population that is larger than any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich Asian countries have a population that is larger than any country in Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich Asian countries have a population that is larger than any country in Africa?. \nSELECT  SELECT name,\nCountryCode,\nDistrict,\nPopulation\nFROM world_1\nWHERE Population > ANY(SELECT Population\n                FROM world_1 \n                WHERE CountryCode IN ('AF')\n                AND District IN ('Borders', 'BordersWithTurkmenistan', 'BordersWithIran', 'BordersWithUzbekistan', 'BordersWithTajikistan', 'BordersWithChina', 'BordersWithAfghanistan')\n                AND Population > 0);\n\n### world_2 database, with their properties:\n#country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n#countrylanguage(CountryCode, Language, IsOfficial, Percentage)\nWhich Asian countries have a population that is larger than any country in Africa?. \nSELECT  SELECT name,\nCountryCode,\nDistrict,\nPopulation\nFROM world_2 \nWHERE Population > ANY(SELECT Population\n                FROM world_2 \n                WHERE CountryCode IN ('"}
{"question": "What are the Asian countries which have a population larger than that of any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the Asian countries which have a population larger than that of any country in Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the Asian countries which have a population larger than that of any country in Africa?. \nSELECT  SELECT city.ID, city.Name, city.CountryCode, city.District, city.Population, \n  SELECT country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear,\n    country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2\nFROM world_1.city\n  INNER JOIN world_1.country ON city.CountryCode = country.Code\nWHERE city.Population > ANY (SELECT pop FROM world_1.country WHERE pop > 3000000000)\n  AND country.Population > ANY (SELECT pop FROM world_1.country WHERE pop > 3000000000)\n```\n\nAn example of a selection is 'SELECT' only cities that are in Asia and have a population bigger than 3000000000. \nThe results are shown below.\n\n```\n> SELECT \n  FROM world"}
{"question": "What are the country codes for countries that do not speak English?", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes for countries that do not speak English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes for countries that do not speak English?. \nSELECT  SELECT countrycode(), countrylanguage('code') FROM world_1;\nSELECT  SELECT countrycode(), countrylanguage('code') FROM world_1 WHERE countrycode() NOT IN ('en', 'fr', 'es', 'de', 'it', 'pl');\n### The city is a record of the city and its district(s)\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#city('ID', 'Name', 'DistrictCode', 'Population')\n#city('ID', 'Name', 'DistrictCode', 'Population')\n#city('ID', 'Name', 'DistrictCode', 'Population')\n#city('ID', 'Name', 'DistrictCode', 'Population')\n#city('ID', 'Name', 'DistrictCode', 'Population')\n#sqlite_sequence('name', 'seq')\n#sqlite_sequence('name_1', 'seq_1')\n#sqlite_sequence('name_2', 'seq_2')\n#sqlite_sequence('name_3', 'seq_3')\n#sqlite_sequence('name_4', 'seq_4')\n#sqlite_"}
{"question": "Return the country codes for countries that do not speak English.", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the country codes for countries that do not speak English.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the country codes for countries that do not speak English.. \nSELECT  SELECT country.Code\nFROM    country\nWHERE   CONCAT(country.Name, '_', country.Language) LIKE '%english'\nAND    country.IsOfficial = 1\nAND    country.Percentage > 0\nAND    NOT EXISTS (\n    SELECT  *\n    FROM    country_language\n    WHERE   country_language.CountryCode = country.Code\n    AND     country_language.Language != 'english'\n    AND     country_language.IsOfficial = 1\n    AND     country_language.Percentage > 0\n    )\nORDER BY 1;\n\nReturn the country codes for countries that do not speak English.. \nSELECT  SELECT country.Code\nFROM    country\nWHERE   CONCAT(country.Name, '_', country.Language) LIKE '%english'\nAND    country.IsOfficial = 1\nAND    country.Percentage > 0\nAND    NOT EXISTS (\n    SELECT  *\n    FROM    country_language\n    WHERE   country_language.CountryCode = country.Code\n    AND     country_language.Language != 'english'\n    AND     country_language.IsOfficial"}
{"question": "What are the country codes of countries where people use languages other than English?", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes of countries where people use languages other than English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes of countries where people use languages other than English?. \nSELECT  SELECT a.name, a.continent, a.region, a.surfacearea, a.indepyear, a.population, a.lifeexpectancy, a.gnp, a.gnpold, a.localname, a.governmentform, a.headofstate, a.capital, a.code2 \nFROM country a \nWHERE a.name NOT IN ('USA','Canada','Brazil','Argentina','Uruguay','Chile','Peru','Ecuador','Venezuela','Colombia','Mexico','Belize')\nORDER BY a.code2\n\"\"\", None)\n\n    def test_execute_fake_func_without_values(self):\n        # Assert that the function is executed if there are no values\n        fake = \"\"\"SELECT xyz()\n        \"\"\"\n        cursor = connection.cursor()\n        cursor.execute(fake)\n        cursor.execute(fake, [])\n\n        # FIXME: this is a kluge, but it works.  We should look into\n        # supporting named parameters in the sqlite cursor.\n        fake_func = connection.ops"}
{"question": "Give the country codes for countries in which people speak langauges that are not English.", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the country codes for countries in which people speak langauges that are not English.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the country codes for countries in which people speak langauges that are not English.. \nSELECT  SELECT  SELECT\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\n#languages('LanguageCode', 'LanguageName')\n\n\n\n"}
{"question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the codes of the countries that do not speak English and whose government forms are not Republic?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the codes of the countries that do not speak English and whose government forms are not Republic?. \n}
{"question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the codes of countries that do not speak English and do not have Republics for governments.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the codes of countries that do not speak English and do not have Republics for governments.. \n}
{"question": "Which cities are in European countries where English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich cities are in European countries where English is not the official language?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich cities are in European countries where English is not the official language?. \nSELECT  SELECT city.Name AS Name, country.Name AS CountryName, country.Code AS CountryCode, district.Name AS DistrictName, district.Population AS Population, city.Population AS CityPopulation, city.CountryCode AS CityCode, city.ID AS CityID\n    FROM city LEFT JOIN country ON city.CountryCode = country.Code\n    WHERE country.Language != 'English'\n    ORDER BY Population DESC\n    LIMIT 10;\nA database contains tables, relations, and primary keys. \nA table is a collection of rows. \nEach row contains a set of fields, each field is a single value. \nA relation is a way to use one or more fields to define the set of rows in another table. \nA primary key is a field in a table that uniquely identifies a single row in the table. \nA database has a schema. \nThe schema contains the names, types, and constraints of the tables, relations, and primary keys. \nA schema defines a database. \nA schema is like a plan for a house. \nThe house plan is a set of constraints and requirements. \nIt defines the house. \nA database query"}
{"question": "What are the names of cities in Europe for which English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of cities in Europe for which English is not the official language?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of cities in Europe for which English is not the official language?. \n}
{"question": "Which unique cities are in Asian countries where Chinese is the official language ?", "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich unique cities are in Asian countries where Chinese is the official language ?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich unique cities are in Asian countries where Chinese is the official language ?. \nSELECT  SELECT DISTINCT countrycode, cityname FROM world_1 WHERE cityname LIKE '\u5317\u4eac' AND countrycode LIKE 'CN' AND cityname LIKE '\u5317\u4eac'\n# city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich unique cities are in African countries where French is the official language ?. \nSELECT  SELECT DISTINCT countrycode, cityname FROM world_1 WHERE cityname LIKE 'Abidjan' AND countrycode LIKE 'CI' AND cityname LIKE 'Abidjan'\n# city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#city('ID', 'Name', 'Country"}
{"question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the different names of cities that are in Asia and for which Chinese is the official language.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the different names of cities that are in Asia and for which Chinese is the official language.. \n}
{"question": "What are the name, independence year, and surface area of the country with the smallest population?", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the name, independence year, and surface area of the country with the smallest population?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the name, independence year, and surface area of the country with the smallest population?. \nSELECT  SELECT  SELECT \ncountrycode(CountryCode) AS \"CountryCode\",\nName AS \"Name\",\nseq AS \"IndepYear\",\nsurfacearea(SurfaceArea) AS \"SurfaceArea\",\ncountrylanguage(CountryCode, Language, IsOfficial, Percentage) AS \"Language\",\nheadofstate(HeadOfState) AS \"HeadOfState\",\ncapital(Capital) AS \"Capital\",\ncode(CountryCode) AS \"Code\"\nFROM world_1.country\nWHERE population(Population) < 100000\nGROUP BY Name\n# CountryCode Name SurfaceArea Population Independence Year Language HeadOfState Capital Code\n# AUSTRALIA AUSTRALIA 76921562 1901 Australian \n# AUSTRIA AUSTRIA 839551 1192 Austrian \n# BELGIUM BELGIUM 305281 1830 Dutch \n# BERMUDA BERMUDA 52.8 1612 English \n# BOLIVIA BO"}
{"question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name, year of independence, and surface area of the country that has the lowest population.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name, year of independence, and surface area of the country that has the lowest population.. \nSELECT  SELECT * FROM sqlite_sequence\n\nCALL sqlite3_bind_text(stmt, 1, 'world_1');\n#pragma foreign_keys=off\nSELECT * FROM sqlite3_master WHERE type='table' AND name='world_1'\n\nCALL sqlite3_bind_text(stmt, 2, 'ID');\n#pragma foreign_keys=on\nSELECT * FROM sqlite3_master WHERE type='table' AND name='world_1'\n\nCALL sqlite3_bind_int(stmt, 3, 1);\n#pragma foreign_keys=on\nSELECT * FROM sqlite3_master WHERE type='table' AND name='world_1'\n\nCALL sqlite3_bind_text(stmt, 4, 'name');\n#pragma foreign_keys=on\nSELECT * FROM sqlite3_master WHERE type='table' AND name='world_1'\n\nCALL sqlite3_bind_text(stmt, 5, 'CountryCode');\n#pragma foreign_keys=on\nSELECT * FROM sqlite3_master WHERE type='table' AND name='world_1'\n\nCALL sqlite3_bind_text(stmt,"}
{"question": "What are the population, name and leader of the country with the largest area?", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the population, name and leader of the country with the largest area?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the population, name and leader of the country with the largest area?. \nSELECT  SELECT population(a.Name, 5), leader(a.Name, 3) FROM world_1 as a WHERE (a.SurfaceArea > 74000000);\n\n#- 1. Create a new model\n#- 2. Add a new field\n#- 3. Add a new query\n#- 4. Add a new schema for the new query\n#- 5. Add a new method\n\n# Add a new schema for the new query\nworld_2 = ActiveRecord::Schema.define(version: 1) do\n  create_table \"cities\", force: true do |t|\n    t.string \"name\"\n    t.integer \"population\"\n    t.string \"country_code\"\n    t.string \"district\"\n    t.string \"leader\"\n    t.string \"flag\"\n  end\nend\n\n# Add a new method for the new query\nworld_2.instance_eval do\n  def leader_population(name)\n    city = City.find_or_create_by(name: name)\n    city.leader = Name."}
{"question": "Give the name, population, and head of state for the country that has the largest area.", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name, population, and head of state for the country that has the largest area.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name, population, and head of state for the country that has the largest area.. \nSELECT  SELECT  FROM\n#city\n#country\n#countrylanguage\n#sqlite_sequence\n#continent\n#surfacearea\n#region\n#lifeexpectancy\n#gnp\n#gnpoold\n#localname\n#governmentform\n#headofstate\n#capital\n#code2\n#continent\n#countrycode\n#continent\n#countrycode\n#countrycode\n#language\n#isofficial\n#percentage\n#surfacearea\n#region\n#countrycode\n#countrycode\n#language\n#isofficial\n#percentage\n#surfacearea\n#region\n#countrycode\n#countrycode\n#language\n#isofficial\n#percentage\n#surfacearea\n#region\n#countrycode\n#countrycode\n#language\n#isofficial\n#percentage\n#surfacearea\n#region\n#countrycode\n#countrycode\n#language\n#isofficial\n#percentage\n#surfacearea\n#region\n#countrycode\n#countrycode\n#language\n#isofficial\n#percentage\n#surfacearea\n#region\n#countrycode\n#countrycode\n#language\n#isofficial"}
{"question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the country name and the numbers of languages spoken for each country that speaks at least 3 languages.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the country name and the numbers of languages spoken for each country that speaks at least 3 languages.. \nSELECT  SELECT  FROM world_1.country WHERE CountryCode=\"<COUNTRY CODE>\" AND Language IS NOT NULL GROUP BY CountryCode, Language;\n\n#country_language('CountryCode', 'Language', 'IsOfficial', 'Percentage')\n#country_isocode('CountryCode', 'ISOCode')\n#language('ID', 'Name', 'CountryCode', 'Code')\n#local_language('ID', 'Name', 'Code', 'Region', 'Continent', 'SurfaceArea')\n#person('ID', 'Name', 'Sex', 'BirthDate', 'Age', 'City', 'CountryCode', 'CountryLanguage', 'LocalLanguage', 'Religion', 'MaritalStatus', 'Occupation', 'Salary', 'JobStatus', 'Education', 'HouseNo', 'HouseName')\n\n#SELECT  SELECT  FROM world_1.person WHERE PersonID=\"<PERSON ID>\" AND City IS NOT NULL GROUP BY PersonID, City;\n\n#person_country('PersonID', 'CountryCode')\n#person_job('PersonID', 'JobCode')\n#person_religion('PersonID', 'Rel"}
{"question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of countries that speak more than 2 languages, as well as how many languages they speak?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of countries that speak more than 2 languages, as well as how many languages they speak?. \nSELECT  SELECT name,\n,countrycode\n,COUNT(DISTINCT language)\nFROM world_1\nWHERE countrycode <> ''\nGROUP BY name, countrycode\nHAVING COUNT(DISTINCT language) > 1\nORDER BY name;\n\n#Sqlite_sequence('name', 'seq')\n\ncountry('ID', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#SELECT name, \n,countrycode\n,CONSTRAINT name_seq UNIQUE (name),\nCOUNT(DISTINCT language)\nFROM world_1\nWHERE countrycode <> ''\nGROUP BY name, countrycode\nHAVING COUNT(DISTINCT language) > 1\nORDER BY name;\n\n#countries with a population of over 1 million\nSELECT countrycode, name, COUNT(DISTINCT language)\nFROM world_1\nWHERE countrycode <> ''\nGROUP BY countrycode, name\nHAVING COUNT(DIST"}
{"question": "Find the number of cities in each district whose population is greater than the average population of cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the number of cities in each district whose population is greater than the average population of cities?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the number of cities in each district whose population is greater than the average population of cities?. \nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n}
{"question": "How many cities in each district have a population that is above the average population across all cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many cities in each district have a population that is above the average population across all cities?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many cities in each district have a population that is above the average population across all cities?. \nSELECT  SELECT\nc.ID\nc.Name\nc.CountryCode\nd.ID\nd.Name\nl.ID\nl.Language\nl.Percentage\nFROM world_1\nJOIN district ON d.ID = world_1.District\nJOIN city ON c.ID = world_1.City\nJOIN language ON l.ID = world_1.Language\nWHERE d.District = 1\nAND c.ID > 20\nAND l.Percentage > 0\n#SQLite SELECT * FROM sqlite_sequence\n#SQLite SELECT country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2 FROM country\n#SQLite SELECT country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP,"}
{"question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the government form name and total population for each government form whose average life expectancy is longer than 72.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the government form name and total population for each government form whose average life expectancy is longer than 72.. \nSELECT  SELECT \n\tDISTINCT \n\tGovernmentForm \n\tFROM \n\t( \n\t\tSELECT \n\t\t\tGovernmentForm \n\t\tFROM \n\t\t\tWorld_1.World \n\t\tWHERE \n\t\t\t( \n\t\t\t\tSELECT \n\t\t\t\t\tAVG(LifeExpectancy) \n\t\t\t\tFROM \n\t\t\t\t\tWorld_1.World \n\t\t\t\tWHERE \n\t\t\t\t\tCountryCode = 'CH' \n\t\t\t) > 72 \n\t\t) \n\tGROUP BY \n\t\tGovernmentForm \n;\n\n\n\n\n#List of average life expectancies, sorted by highest to lowest:\n#LivingStyles\n#living_styles('Name', 'Sex', 'Age', 'LivingExpectancy')\n#\n#World_1.world\n# \n#    select living_styles.*, \n#        avg(living_styles.livingExpectancy) as livingExpectancyAverage\n#    from living_styles\n"}
{"question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?. \nSELECT  SELECT city.ID, city.Name, country.Code, country.Name, country.Continent, \ncountry.Region, country.SurfaceArea, country.IndepYear, country.Population, \ncountry.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, \ncountry.GovernmentForm, country.HeadOfState, country.Capital, \ncountry.Code2 \nFROM city, country WHERE country.CountryCode='DE' \nGROUP BY  country.Code \nHAVING AVG(country.LifeExpectancy)>=72 ;\n# ID            Name    CountryCode        District                Population\n# 0001        Berlin    DE           Berlin            12080189      77.7\n# 0002        Frankfurt    DE           Frankfurt           6497282      71.8\n# 0003        Munich      DE           Munich            11715223      82.7\n# 0004        Hamburg    DE           Hamburg           14696448      73."}
{"question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?. \nSELECT  SELECT AVG(LifeExpectancy) FROM country WHERE Country.LifeExpectancy < 72? AND Continent.Name = 'Africa';\nSELECT  SELECT AVG(LifeExpectancy) FROM country WHERE Country.LifeExpectancy < 72? AND Continent.Name = 'Asia';\nSELECT  SELECT AVG(LifeExpectancy) FROM country WHERE Country.LifeExpectancy < 72? AND Continent.Name = 'Europe';\nSELECT  SELECT AVG(LifeExpectancy) FROM country WHERE Country.LifeExpectancy < 72? AND Continent.Name = 'NorthAmerica';\nSELECT  SELECT AVG(LifeExpectancy) FROM country WHERE Country.LifeExpectancy < 72? AND Continent.Name = 'SouthAmerica';\n\n#select district('ID', 'Name', 'CountryCode')\n#select population('ID', 'Name')\n#select country('ID', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'Government"}
{"question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?. \nSELECT  SELECT name, continent, population, average_life_expectancy FROM city WHERE average_life_expectancy < 72\n#What are the population densities for each country and the total population for each continent?\nSELECT name, population, population_density FROM country\n#Given a map of the world, plot all the countries on it.\nSELECT  name, population, countrycode, latitude, longitude FROM country \n#Given a map of the world, plot all the countries on it with their population densities.\nSELECT name, population, population_density, latitude, longitude FROM country\n#What are the population densities of the continents?\nSELECT continent, population_density FROM country\n\n\n\n"}
{"question": "What are the names and areas of countries with the top 5 largest area?", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names and areas of countries with the top 5 largest area?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names and areas of countries with the top 5 largest area?. \nSELECT  SELECT Name, CountryCode, District, Population, SurfaceArea, Inde...\nSELECT  CountryCode, CountryName, Continent, Region, SurfaceArea, Indep...\nSELECT  CountryCode, CountryName, Continent, Region, SurfaceArea, Indep...\nSELECT  CountryCode, CountryName, Continent, Region, SurfaceArea, Indep...\nSELECT  CountryCode, CountryName, Continent, Region, SurfaceArea, Indep...\nSELECT  CountryCode, CountryName, Continent, Region, SurfaceArea, Indep...\nSELECT  CountryCode, CountryName, Continent, Region, SurfaceArea, Indep...\n\n#we need to limit our world_1 database to the following countries:\n# \n# CountryCode          CountryName           Continent        Region         SurfaceArea\n#-----------------  -------------------  --------------  --------------  ---------------\n# AF                   Afghanistan           Asia               Central      251,828\n# AI                   Anguilla              Americas          Caribbean      109\n# AL                   Albania               Europe           Balkans         28,748\n# DZ                "}
{"question": "Return the names and surface areas of the 5 largest countries.", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names and surface areas of the 5 largest countries.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names and surface areas of the 5 largest countries.. \nSELECT  SELECT \n    country.CountryCode,\n    country.Name,\n    country.SurfaceArea\n    FROM \n    country\n    WHERE\n    CountryCode in (\n    'Russia',\n    'China',\n    'USA',\n    'Canada',\n    'Germany')\n    ORDER BY SurfaceArea DESC\nReturn the names and surface areas of the 5 largest countries.. \nSELECT  SELECT \n    country.CountryCode,\n    country.Name,\n    country.SurfaceArea\n    FROM \n    country\n    WHERE\n    CountryCode in (\n    'Russia',\n    'China',\n    'USA',\n    'Canada',\n    'Germany')\n    ORDER BY SurfaceArea DESC\nReturn the names and surface areas of the 5 largest countries.. \nSELECT  SELECT \n    country.CountryCode,\n    country.Name,\n    country.SurfaceArea\n    FROM \n    country\n    WHERE\n    CountryCode in (\n    'Russia',\n    'China',\n    'USA',\n    'Canada',\n    'Germany')\n"}
{"question": "What are names of countries with the top 3 largest population?", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are names of countries with the top 3 largest population?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are names of countries with the top 3 largest population?. \nSELECT  SELECT world_1.Name, world_1.CountryCode, world_1.District, world_1.Population\nFROM world_1, world_2\nWHERE world_1.CountryCode = world_2.CountryCode\nORDER BY District DESC, Population DESC;\nSELECT world_1.Code, world_1.Name, world_2.Code2, world_2.Language, world_1.Population, world_1.CountryCode, world_2.District, world_2.SurfaceArea, world_2.LifeExpectancy, world_2.GNP, world_2.GNPOld, world_2.GovernmentForm, world_2.HeadOfState, world_2.Capital\nFROM world_1, world_2\nWHERE world_1.CountryCode = world_2.CountryCode;\nSELECT world_1.Name, world_1.CountryCode, world_1.District, world_1.Population, world_2.Name, world_2.CountryCode, world_2.District, world_2.SurfaceArea, world_2.LifeExpectancy, world_2"}
{"question": "Return the names of the 3 most populated countries.", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of the 3 most populated countries.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of the 3 most populated countries.. \nSELECT  SELECT city.Name FROM city ORDER BY city.Population DESC LIMIT 3;\nSELECT  SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3;\nSELECT  SELECT countrylanguage.CountryCode, countrylanguage.Language FROM countrylanguage;\n\n### World geodata world_1.csv \n# City\n# Country\n# Continent\n# Region\n# Population\n# LifeExpectancy\n# GNP\n# GNPOld\n# LocalName\n# GovernmentForm\n# HeadOfState\n# Capital\n# CountryCode\n# Language\n\n# 3 most populated countries\n\n# 100,000 rows\n\n# country.Code, country.Country, country.Continent, country.Region, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.CountryCode, country.Language\n\n#country('Code', 'Name', 'Continent', 'Region', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName"}
{"question": "What are the names of the nations with the 3 lowest populations?", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of the nations with the 3 lowest populations?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of the nations with the 3 lowest populations?. \n}
{"question": "Return the names of the 3 countries with the fewest people.", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of the 3 countries with the fewest people.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of the 3 countries with the fewest people.. \n}
{"question": "how many countries are in Asia?", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nhow many countries are in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nhow many countries are in Asia?. \nSELECT  SELECT \ncount(country.Code) FROM country\nWHERE country.CountryCode = 'Asia' \nGROUP BY country.CountryCode; \n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\nSELECT  SELECT \ncount(country.Code) FROM country\nWHERE country.Continent = 'Asia' \nGROUP BY country.Continent; \nSELECT  SELECT \ncount(country.Code) FROM country\nWHERE country.Region = 'Asia' \nGROUP BY country.Region; \nSELECT  SELECT \ncount(country.Code) FROM country\nWHERE country.Population > 1000000000000000; \nSELECT  SELECT \ncount(country.Code) FROM country\nWHERE country.Population < 1000000000000000; \nSELECT  SELECT \ncount(country"}
{"question": "Count the number of countries in Asia.", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nCount the number of countries in Asia.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nCount the number of countries in Asia.. \nSELECT  SELECT C.Code AS CountryCode, C.Name AS CountryName, C.Continent AS ContinentName, C.Region AS RegionName, C.SurfaceArea AS SurfaceArea, C.IndepYear AS IndependenceYear, C.Population AS Population, C.LifeExpectancy AS LifeExpectancy, C.GNP AS GNP, C.GNPOld AS GNPOld, C.LocalName AS LocalName, C.GovernmentForm AS GovernmentForm, C.HeadOfState AS HeadOfState, C.Capital AS Capital, C.Code2 AS Code2 \n    FROM country C\n    WHERE C.RegionName = 'Asia'\n    GROUP BY C.Code;\n\n\n# Average temperature of 2015 in Beijing\nSELECT\n    SELECT city.ID AS CityID, city.Name AS CityName, city.CountryCode AS CountryCode, city.District AS District, city.Population AS Population, avg(city.Temperature) AS AverageTemperature\n    FROM city\n    WHERE city.CountryCode = 'CN';\n\n#Count the number of capitals in Asia and the"}
{"question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of the countries that are in the continent of Europe and have a population of 80000?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of the countries that are in the continent of Europe and have a population of 80000?. \nSELECT  SELECT\n  FROM World_1 WHERE CountryCode IN (SELECT CountryCode FROM Country WHERE Population >= 80000);\n\n  SELECT city.ID, city.Name, city.CountryCode, city.District, city.Population FROM World_1, city WHERE World_1.CountryCode = city.CountryCode;\nSELECT  SELECT \n  FROM World_1, country, city WHERE World_1.CountryCode = country.Code AND World_1.CityID = city.ID AND country.Population >= 80000;\n\nSELECT  SELECT \n  FROM World_1, country, city, language WHERE World_1.CountryCode = country.Code AND country.Population >= 80000 AND World_1.CityID = city.ID AND World_1.LanguageID = language.ID;\n\n\nSELECT  SELECT \n  FROM World_1, country, city, language, countrylanguage WHERE World_1.CountryCode = country.Code AND country.Population >= 80000 AND World_1.CityID = city.ID AND World_1.LanguageID = language.ID AND World_1"}
{"question": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of countries that are in Europe and have a population equal to 80000.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of countries that are in Europe and have a population equal to 80000.. \nSELECT  SELECT * FROM sqlite_sequence, sqlite_master WHERE name = 'name'; \nSELECT  name, city.Name, country.Name, country.Name AS CountryName, country.Code AS CountryCode, country.Code2 AS CountryCode2, country.CountryName, country.Continent AS Continent, country.Name AS CountryName2, country.Name AS CountryName3, country.Population, country.Population2, country.Population3, country.LifeExpectancy, country.GNP, country.GNPOld, country.GovernmentForm, country.HeadOfState, country.Capital, country.GovernmentForm2, country.GovernmentForm3, country.GovernmentForm4, country.Name AS CountryName4, country.Name AS CountryName5, country.Name AS CountryName6, country.Name AS CountryName7, country.Name AS CountryName8, country.Name AS CountryName9, country.Name AS CountryName10, city.Name, city.Name2, city.Name3, city.Name4, city.Name5, city.Name6, city.Name7, city.Name8, city."}
{"question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .. \nSELECT  SELECT * FROM `world_1` WHERE `Name` = \"United States of America\"\n\n$GLOBALS['country'] = \"United States of America\";\n$GLOBALS['countrycode'] = \"US\";\n$GLOBALS['continent'] = \"North America\";\n$GLOBALS['region'] = \"Northwestern\";\n$GLOBALS['district'] = \"United States of America\";\n$GLOBALS['population'] = 30678608;\n$GLOBALS['population1'] = 30678608;\n$GLOBALS['population2'] = 30678608;\n$GLOBALS['surfacearea'] = 96294180;\n$GLOBALS['surfacearea1'] = 96294180;\n$GLOBALS['surfacearea2'] = 96294180;\n$GLOBALS['indiayear'] = 1947;\n$GLOBAL"}
{"question": "What are the cities whose population is between 160000 and 900000?", "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the cities whose population is between 160000 and 900000?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the cities whose population is between 160000 and 900000?. \nSELECT  SELECT \ncity.ID AS city_ID,\ncity.Name AS city_Name,\ncountry.Code AS country_Code,\ncountry.Name AS country_Name,\n\ncity.District AS city_District,\ncountry.District AS country_District,\n\npopulation.ID AS population_ID,\npopulation.Name AS population_Name,\npopulation.District AS population_District,\npopulation.CountryCode AS population_CountryCode,\npopulation.SurfaceArea AS population_SurfaceArea,\npopulation.LifeExpectancy AS population_LifeExpectancy,\npopulation.GNP AS population_GNP,\npopulation.GNPOld AS population_GNPOld,\n\nlanguage.ID AS language_ID,\nlanguage.Name AS language_Name,\ncountry.Language AS language_Country,\ncountry.IsOfficial AS language_IsOfficial,\npopulation.Language AS language_Population,\n\ncity.Capital AS city_Capital,\ncountry.Capital AS country_Capital,\n\ncountry.Code2 AS country_Code2,\ncountry.Continent AS country_"}
{"question": "Return the names of cities that have a population between 160000 and 900000 .", "sql": "select name from city where population between 160000 and 900000", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of cities that have a population between 160000 and 900000 .. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of cities that have a population between 160000 and 900000 .. \nSELECT  SELECT city.ID, city.Name, country.Code, district.Name AS District, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Which language is spoken by the largest number of countries?", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is spoken by the largest number of countries?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is spoken by the largest number of countries?. \nSELECT  SELECT * FROM world_1\nUNION\nSELECT * FROM world_1_country\n\n# Generate a UNION\n# SELECT 1 UNION\n# SELECT 2\n# SELECT 3 UNION\n# SELECT 4\n# SELECT 5 UNION\n# SELECT 6\n# SELECT 7 UNION\n# SELECT 8\n# SELECT 9 UNION\n# SELECT 10\n\n# Select where one condition, in this case countryCode, is true.\nSELECT * FROM world_1 WHERE countryCode = 'India'\n\n# Select where more than one condition is true.\n# Each row has a list of columns with values matching a condition.\n# Where all the conditions are true, the row is selected.\nSELECT * FROM world_1 WHERE countryCode = 'India' AND name LIKE 'Mumbai'\n\n# Select where more than one condition is true.\n# Each row has a list of columns with values matching a condition.\n# Where all the conditions are true, the row is selected.\n# The WHERE clause is applied last to the previous statement.\nSELECT * FROM world_1 WHERE countryCode = 'India' AND name LIKE 'Mumbai' AND population >"}
{"question": "Give the language that is spoken in the most countries.", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the language that is spoken in the most countries.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the language that is spoken in the most countries.. \n}
{"question": "What is the language spoken by the largest percentage of people in each country?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the language spoken by the largest percentage of people in each country?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the language spoken by the largest percentage of people in each country?. \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT "}
{"question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?. \nSELECT  SELECT 'code' AS col, 'countryCode' AS name, \n               'continent' AS continent, 'region' AS region, 'surfaceArea' AS surfaceArea,\n               'indepYear' AS indepYear, 'population' AS population,\n               'lifeExpectancy' AS lifeExpectancy, 'gnp' AS gnp, 'gnpo' AS gnpo,\n               'localName' AS localName, 'governmentForm' AS governmentForm,\n               'headOfState' AS headOfState, 'capital' AS capital, 'code2' AS code2\nFROM   country\nWHERE  code LIKE '% 1 '\nORDER BY population DESC;\n###  ID   Name      Code   Continent  Region  SurfaceArea  IndepYear   Population LifeExpectancy GNP GNPO   LocalName   GovernmentForm    HeadOfState  Capital    Code2\n### 10   United States  US       North America   New England 1.502.419.079 1776 78.7403 13.6546 1.54"}
{"question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of countries where Spanish is spoken by the largest percentage of people?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of countries where Spanish is spoken by the largest percentage of people?. \nSELECT  SELECT \n    CountryCode,\n    SUM(CASE WHEN Language = 'Spanish' THEN 1 ELSE 0 END) AS 'Speakers'\nFROM CountryLanguage\nGROUP BY CountryCode\nORDER BY Speakers DESC;\n\n#region_1('ID', 'Name')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\n#countryregion('RegionCode', 'Region', 'Population')\n#countryregion('RegionCode', 'Region', 'Population')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n\n#pragma foreign_key_list(id, foreign_key_table_name, foreign_key_column_name, on_delete, on_update, cascade, index, foreign_key_id_column_name)\n#pragma foreign_key_list('country', 'region', 'region_id')\n#pragma foreign_key_list('"}
{"question": "Count the number of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nCount the number of countries for which Spanish is the predominantly spoken language.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nCount the number of countries for which Spanish is the predominantly spoken language.. \nSELECT  SELECT \"CountryCode\", COUNT(*) as \"LanguageCount\" FROM \"World_1\" GROUP BY \"CountryCode\"\n### SQL SELECT: \n#SELECT  SELECT \"CountryCode\", COUNT(*) as \"LanguageCount\" FROM \"World_1\" GROUP BY \"CountryCode\"\n#SQL SELECT: \nSELECT  SELECT \"CountryCode\", COUNT(*) as \"LanguageCount\" FROM \"World_1\" GROUP BY \"CountryCode\"\n### SQL - COUNT: \n#SELECT COUNT(*) as \"LanguageCount\" FROM \"World_1\" GROUP BY \"CountryCode\"\nSELECT COUNT(*) as \"LanguageCount\" FROM \"World_1\" GROUP BY \"CountryCode\"\n### SQL SELECT: \n#SELECT COUNT(*) as \"LanguageCount\" FROM \"World_1\" GROUP BY \"CountryCode\"\n\n# SELECT  SELECT \"CountryCode\", COUNT(*) as \"LanguageCount\" FROM \"World_1\" GROUP BY \"CountryCode\" HAVING \"LanguageCount\" > 5\nSELECT  SELECT \"CountryCode\", COUNT(*) as \"LanguageCount\" FROM \"World_1\" GROUP BY \"CountryCode\" HAVING \"LanguageCount\" > 5\n\n### SQL SELECT: \n"}
{"question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the codes of countries where Spanish is spoken by the largest percentage of people?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the codes of countries where Spanish is spoken by the largest percentage of people?. \nSELECT  SELECT 2010, population, '' FROM world_1 WHERE '' = population GROUP BY population, '' HAVING population > 5000000;\nSELECT * FROM world_1 GROUP BY '' ORDER BY '' DESC;\nSELECT  SELECT 2010, population, '' FROM world_1 WHERE '' = population GROUP BY population, '' HAVING population > 5000000;\nThe 2010 United Nations Human Development Report and this page use the United Nations definition of \"developed countries.\" \nWhat countries are considered developed in the 2010 United Nations Human Development Report?.\nSELECT * FROM world_1 WHERE '' = population GROUP BY '' ORDER BY '' DESC;\nWhere can we find a list of all countries in the world and their capitals?. \nSELECT * FROM world_1 WHERE '' = population GROUP BY '' ORDER BY '' DESC;\nA country may have more than one capital. What is the capital of the United States?.\nSELECT name FROM country WHERE CountryCode = 'USA' GROUP BY name ORDER BY name DESC;\nWhat is the capital of India?. \nSELECT name FROM country WHERE CountryCode = 'INDIA'"}
{"question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the codes of countries for which Spanish is the predominantly spoken language.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the codes of countries for which Spanish is the predominantly spoken language.. \nSELECT  SELECT world_1.CountryCode, world_1.CountryName, world_1.Continent, world_1.Region, world_1.SurfaceArea, world_1.IndepYear, world_1.Population, world_1.LifeExpectancy, world_1.GNP, world_1.GNPOld, world_1.LocalName, world_1.GovernmentForm, world_1.HeadOfState, world_1.Capital, world_1.Code2\nFROM (\n    SELECT  CountryCode, CountryName, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2\n    FROM world_1\n) AS world_1\nWHERE world_1.CountryName = 'Spain'\nGROUP BY world_1.CountryCode\nORDER BY world_1.CountryName\nReturn the codes of countries that have a capital starting with the letter \"C\".\nSELECT  SELECT world_1.CountryCode, world_1.CountryName, world_1.Continent, world_1.Region,"}
{"question": "How many conductors are there?", "sql": "SELECT count(*) FROM conductor", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many conductors are there?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many conductors are there?. \nSELECT  SELECT \n  count(conductor_id) AS count,\n  MAX(group_concat(conductor_id, ' ', name, ' ', age, ' ', nationality, ' ', year_of_work, ' ') separator ',') AS collect\nFROM    sqlite_master\nGROUP BY group_concat(conductor_id, ' ', name, ' ', age, ' ', nationality, ' ', year_of_work, ' ') separator ',';\n\nWhat is the average age of all the conductors?. \nSELECT  avg(age) AS age\nFROM    sqlite_master\nGROUP BY group_concat(conductor_id, ' ', name, ' ', age, ' ', nationality, ' ', year_of_work, ' ') separator ',';\n\nHow many nationalities are there?. \nSELECT  count(nationality) AS nationality\nFROM    sqlite_master\nGROUP BY group_concat(conductor_id, ' ', name, ' ', age, ' ', nationality, ' ', year_of_work, ' ') separator ',';\n\nHow many orchestras are there?. \nSELECT  count(orchestra_"}
{"question": "Count the number of conductors.", "sql": "SELECT count(*) FROM conductor", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of conductors.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of conductors.. \nSELECT  SELECT \"Conductor_ID\", \"Name\", \"Age\", \"Nationality\", \"Year_of_Work\" AS \"Year_of_Work\" FROM \"conductor\"\nSELECT \"Orchestra_ID\", \"Orchestra\", \"Conductor_ID\", \"Record_Company\", \"Year_of_Founded\", \"Major_Record_Format\" AS \"Year_of_Founded\" FROM \"orchestra\"\nSELECT \"Performance_ID\", \"Orchestra_ID\", \"Type\", \"Date\", \"Official_ratings_(millions)\", \"Weekly_rank\", \"Share\" FROM \"performance\"\nSELECT \"Show_ID\", \"Performance_ID\", \"If_first_show\", \"Result\", \"Attendance\" FROM \"show\"\n\n\n### sqlite3.db('Hall_of_Fame.db').execute('select * from Performance')\n\n\n\n### sqlite3.db('Hall_of_Fame.db').execute('select * from Conductor')\n\n\n### sqlite3.db('Hall_of_Fame.db').execute('select * from Orchestra')\n\n"}
{"question": "List the names of conductors in ascending order of age.", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the names of conductors in ascending order of age.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the names of conductors in ascending order of age.. \nSELECT  SELECT * FROM orchestra WHERE name IN ('Conductor_ID', 'Name') AND Age desc ORDER BY Name\nList the names of conductors in ascending order of age.. \nSELECT  SELECT * FROM orchestra WHERE name IN ('Conductor_ID', 'Name') AND Age desc ORDER BY Name\nSELECT  SELECT * FROM orchestra WHERE name IN ('Conductor_ID', 'Name') AND Age desc ORDER BY Name\n#####\n\n\n### list the orchestras in descending order of their recording company, \n#and list the major record format of each. \nSELECT  SELECT * FROM orchestra WHERE name IN ('Orchestra_ID', 'Orchestra') AND Record_Company desc ORDER BY Record_Company\n\nSELECT  SELECT * FROM orchestra WHERE name IN ('Orchestra_ID', 'Orchestra') AND Record_Company desc ORDER BY Record_Company\nSELECT  SELECT * FROM orchestra WHERE name IN ('Orchestra_ID', 'Orchestra') AND Record_Company desc ORDER BY Record_Company\n#####\n\n#List the names of conductors in ascending order of age.. \nSELECT  SELECT * FROM orchestra WHERE name IN ('Conductor"}
{"question": "What are the names of conductors, ordered by age?", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors, ordered by age?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors, ordered by age?. \nSELECT  SELECT * FROM Conductor ORDER BY Age, Name ASC\nWhat are the names of conductors, ordered by age?. \nSELECT  SELECT * FROM Conductor ORDER BY Age, Name ASC\nWhat are the names of conductors, ordered by nationality?. \nSELECT  SELECT * FROM Conductor ORDER BY Nationality ASC\nWhat are the names of conductors, ordered by year of work?. \nSELECT  SELECT * FROM Conductor ORDER BY Year_of_Work DESC\nWhat are the names of conductors, ordered by year of work?. \nSELECT  SELECT * FROM Conductor ORDER BY Year_of_Work DESC\nWhat are the names of conductors, ordered by record company?. \nSELECT  SELECT * FROM Conductor ORDER BY Record_Company ASC\nWhat are the names of conductors, ordered by year of founded?. \nSELECT  SELECT * FROM Conductor ORDER BY Year_of_Founded DESC\nWhat are the names of conductors, ordered by year of founded?. \nSELECT  SELECT * FROM Conductor ORDER BY Year_of_Founded DESC\nWhat are the names of conductors, ordered by major record format?. \nSELECT  SELECT * FROM Con"}
{"question": "What are the names of conductors whose nationalities are not \"USA\"?", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors whose nationalities are not \"USA\"?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors whose nationalities are not \"USA\"?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "Return the names of conductors that do not have the nationality \"USA\".", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the names of conductors that do not have the nationality \"USA\".. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the names of conductors that do not have the nationality \"USA\".. \nSELECT  SELECT DISTINCT \n\t\t\t\t\t\t\t\tCASE WHEN record.conductor_id = '322' \n\t\t\t\t\t\t\t\t\t\tTHEN 'Bernstein, Leonard' \n\t\t\t\t\t\t\t\t\t\tELSE 'Bernstein, (anything else)' END AS Conductor_Name\n\t\t\t\t\t\t\t\t\t\tFROM record;\n\n\nReturn the names of shows that do not have the nationality \"USA\".. \nSELECT  SELECT DISTINCT \n\t\t\t\t\t\t\t\tCASE WHEN record.performance_id = '1682' \n\t\t\t\t\t\t\t\t\t\tTHEN 'Bernstein, Leonard' \n\t\t\t\t\t\t\t\t\t\tELSE 'Bernstein, (anything else)' END AS Performance_Name\n\t\t\t\t\t\t\t\t\t\tFROM record;\n\n\nReturn the names of orchestra that do not have the nationality \"USA\".. \nSELECT  SELECT DISTINCT \n\t\t\t\t\t\t\t\tCASE WHEN record.orchestra_id"}
{"question": "What are the record companies of orchestras in descending order of years in which they were founded?", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the record companies of orchestras in descending order of years in which they were founded?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the record companies of orchestras in descending order of years in which they were founded?. \nSELECT  SELECT DISTINCT(Record_Company) FROM performance ORDER BY Year_of_Founded ASC\n$rco = $db->query(sprintf('SELECT  SELECT DISTINCT(Record_Company) FROM performance ORDER BY Year_of_Founded ASC'));\n\nprint $rco->get();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the record companies of orchestras, sorted descending by the years in which they were founded.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the record companies of orchestras, sorted descending by the years in which they were founded.. \nSELECT  SELECT_ORCHESTRAS.ORCHESTRAS_ID,\n  SELECT_ORCHESTRAS.ORCHESTRAS,\n  SELECT_CONDUCTORS.CONDUCTOR_ID,\n  SELECT_CONDUCTORS.CONDUCTOR,\n  SELECT_CONDUCTORS.AGE,\n  SELECT_CONDUCTORS.NATIONALITY,\n  SELECT_CONDUCTORS.YEAR_OF_WORK\nFROM SELECT_ORCHESTRAS, SELECT_CONDUCTORS\nWHERE SELECT_CONDUCTORS.CONDUCTOR_ID=SELECT_ORCHESTRAS.CONDUCTOR_ID;\n\n#calling\n#result = call_SQL_composite(composite_query)\n#result = call_SQL_simple(composite_query)\n#result = call_SQL_composite(composite_query, param_1, param_2)\n#result = call_SQL_simple(composite_query, param_1, param_2)\n"}
{"question": "What is the average attendance of shows?", "sql": "SELECT avg(Attendance) FROM SHOW", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the average attendance of shows?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the average attendance of shows?. \n}
{"question": "Return the average attendance across all shows.", "sql": "SELECT avg(Attendance) FROM SHOW", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the average attendance across all shows.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the average attendance across all shows.. \nSELECT  SELECT AVG(Attendance) AS AvgAttendance\nFROM    show\nWHERE   IF_FIRST_SHOW = 'No'\nGROUP BY Performance_ID;\n\n#show('Show_ID', 'Performance_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\nReturn the average share per show.. \nSELECT  SELECT AVG(Share) AS AvgShare\nFROM    show\nWHERE   Type = 'Popularity'\nGROUP BY Performance_ID;\n\n#show('Show_ID', 'Performance_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\nReturn the average rank per show.. \nSELECT  SELECT AVG(Weekly_rank) AS AvgWeekly_rank\nFROM    show\nWHERE   Type = 'Rank'\nGROUP BY Performance_ID;\n\n#show('Show_ID', 'Performance_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')"}
{"question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the maximum and minimum share of performances whose type is not \"Live final\".. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the maximum and minimum share of performances whose type is not \"Live final\".. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n\n```\n\n```\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n```\n\n```\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n```\n\n```\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n```\n\n```\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n```\n\n```\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n```\n\n```\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n```\n\n```\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n```\n\n```\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n```\n\n```\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n```\n\n```\nSELECT  SELECT  SELECT  SELECT "}
{"question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the maximum and minimum shares for performances that do not have the type \"Live final\".. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the maximum and minimum shares for performances that do not have the type \"Live final\".. \nSELECT  SELECT(IF(P.Performance_ID=100000,1,0) as Performance_ID,MAX(S.Share) AS MaxShare,MIN(S.Share) AS MinShare) AS Records, P.Show_ID, P.Performance_ID, IF(P.Performance_ID=100000,1,0) AS If_first_show, P.Result, S.Share\nFROM Performance P\nLEFT OUTER JOIN Performance_Share S ON (P.Performance_ID=S.Performance_ID)\nLEFT OUTER JOIN Performance_Type T ON (T.Performance_ID=P.Performance_ID)\nWHERE NOT T.Type='Live final'\nGROUP BY S.Performance_ID, P.Show_ID, P.Performance_ID, T.Type, T.Year_of_Broadcast, S.Share\n\nSELECT  SELECT(IF(P.Performance_ID=100000,1,0) as Performance_ID,MAX(S.Share) AS MaxShare,MIN(S.Share"}
{"question": "How many different nationalities do conductors have?", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many different nationalities do conductors have?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many different nationalities do conductors have?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n\nA.  Conductor_ID  Conductor_ID  Conductor_ID  Conductor_ID  Conductor_ID  Conductor_ID  Conductor_ID  Conductor_ID  Conductor_ID \nB.  Name        Name        Name        Name        Name        Name        Name        Name        Name        Name        Name\nC.  Age         Age         Age         Age         Age         Age         Age         Age         Age         Age         Age\nD.  Nationality  Nationality  Nationality  Nationality  Nationality  Nationality  Nationality  Nationality  Nationality  Nationality \nE.  Year_of_Work Year_of_Work Year_of_Work Year_of_Work Year_of_Work Year_of_Work Year_of_Work Year_of_Work Year_of_Work Year_of_Work\n\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Con"}
{"question": "Count the number of different nationalities of conductors.", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of different nationalities of conductors.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of different nationalities of conductors.. \nSELECT  SELECT COUNT(DISTINCT CONDUCTOR_ID) FROM CONDUCTORS;\n\n\n\nselect CONDUCTOR_ID, name, age, nationality, year_of_work from CONDUCTORS;\n\n\n\n\n\n\n\n\nselect CONDUCTOR_ID, CONDUCTOR, ORCHESTRA_ID, ORCHESTRA, YEAR_OF_WORK from CONDUCTORS JOIN ORCHESTERS;\n\n\n\n\n\n\n\n\nselect PERFORMANCE_ID, ORCHESTRA_ID, PERFORMANCE_NAME, PERFORMANCE, YEAR_OF_FOUNDING, MAJOR_RECORD_FORMAT, MUSIC_FORMAT from PERFORMANCES;\n\n\n\n\n\n\n\n\nselect SHOW_ID, PERFORMANCE_ID, IF_FIRST_SHOW, RESULT, ATTENDANCE from SHOWS;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nselect ORCHESTRA_ID, ORCHESTRA, YEAR"}
{"question": "List names of conductors in descending order of years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList names of conductors in descending order of years of work.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList names of conductors in descending order of years of work.. \nSELECT  SELECT  SELECT  SELECT  SELECT\n\n### 1970-1979 1980-1989 1990-1999 2000-2009 2010-2019\n### ASR\n### Naxos\n### Sony\n### TDK\n### Universal\n\n\n"}
{"question": "What are the names of conductors, sorted descending by the number of years they have worked?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors, sorted descending by the number of years they have worked?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors, sorted descending by the number of years they have worked?. \nSELECT  SELECT * FROM Conductors ORDER BY Conductor_ID DESC\nWhat is the name of the first female conductor?.\nSELECT Conductor_ID FROM Conductors ORDER BY Conductor_ID ASC LIMIT 1;\nWhat are the names of all conductors who have worked more than 40 years?.\nSELECT * FROM Conductors WHERE (Conductor_ID >= 40) AND (Conductor_ID <= 60) \n\n"}
{"question": "List the name of the conductor with the most years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the name of the conductor with the most years of work.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the name of the conductor with the most years of work.. \nSELECT  SELECT MAX(Year_of_Work) FROM Conductor GROUP BY Conductor_ID ORDER BY Year_of_Work DESC;\n\nList the nationality of the conductor with the most years of work.. \nSELECT  SELECT MAX(Nationality) FROM Conductor GROUP BY Conductor_ID ORDER BY Year_of_Work DESC;\n\nList the conductor with the most years of work.. \nSELECT  SELECT MAX(Year_of_Work) FROM Conductor GROUP BY Conductor_ID ORDER BY Year_of_Work DESC;\n\nList the orchestra with the most years of work.. \nSELECT  SELECT MAX(Year_of_Work) FROM Orchestra GROUP BY Orchestra_ID ORDER BY Year_of_Work DESC;\n\nList the name of the conductor with the most years of work.. \nSELECT  SELECT MAX(Year_of_Work) FROM Conductor GROUP BY Conductor_ID ORDER BY Year_of_Work DESC;\n\nList the nationality of the conductor with the most years of work.. \nSELECT  SELECT MAX(Nationality) FROM Conductor GROUP BY Conductor_ID ORDER BY Year_of_"}
{"question": "What is the name of the conductor who has worked the greatest number of years?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the name of the conductor who has worked the greatest number of years?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the name of the conductor who has worked the greatest number of years?. \n}
{"question": "Show the names of conductors and the orchestras they have conducted.", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the names of conductors and the orchestras they have conducted.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the names of conductors and the orchestras they have conducted.. \nSELECT  SELECT  SELECT  SELECT\nCONDUCTOR_ID AS Conductor_ID,\nName AS Name,\nAge AS Age,\nNationality AS Nationality,\nYear_of_Work AS Year_of_Work\nFROM   Conductors\nSELECT  SELECT  SELECT  SELECT  SELECT\nOrchestra_ID AS Orchestral_ID,\nOrchestra AS Orchestra,\nCONDUCTOR_ID AS Conductor_ID,\nRecord_Company AS Record_Company,\nYear_of_Founded AS Year_of_Founded,\nMajor_Record_Format AS Major_Record_Format\nFROM   Orchestras\nSELECT  SELECT  SELECT  SELECT  SELECT\nPerformance_ID AS Performance_ID,\nOrchestra_ID AS Orchestra_ID,\nType AS Type,\nDate AS Date,\nOfficial_ratings_(millions) AS Official_ratings_(millions),\nWeekly_rank AS Weekly_rank,\nShare AS Share\nFROM   Performances\nSELECT  SELECT  SELECT  SELECT\nShow_ID AS Show_ID,\nPerformance_ID AS Performance_ID,\nIf_first_show AS If"}
{"question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors as well as the corresonding orchestras that they have conducted?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors as well as the corresonding orchestras that they have conducted?. \nSELECT  SELECT * FROM orchestra\nSELECT  SELECT * FROM conductor\nSELECT  SELECT * FROM performance\nSELECT  SELECT * FROM show\n\nSELECT  SUM(attendance) AS attendance, SUM(millions) AS million_earnings, SUM(rank) AS rank_earnings, SUM(share) AS share_earnings\nFROM performance\nWHERE weekly_rank IS NOT NULL AND rating_type IS NOT NULL\nGROUP BY rating_type\nORDER BY million_earnings DESC, rank_earnings DESC, share_earnings DESC\nLIMIT 1000\n\nSELECT * FROM conductor WHERE orchestra_id = 1\n\nSELECT * FROM show WHERE concert_type = 1 and performance_id = 1\n\nSELECT * FROM conductor\nWHERE concert_type = 1\nGROUP BY performance_id\n\nSELECT * FROM conductor\nWHERE performance_id = 1\nGROUP BY nationality\n\nSELECT * FROM conductor\nWHERE nationality = 'French'\n\nSELECT * FROM conductor\nWHERE nationality NOT IN ('Italian', 'French')\n\nSELECT * FROM conductor\nWHERE nationality NOT IN ('Italian', 'French',"}
{"question": "Show the names of conductors that have conducted more than one orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the names of conductors that have conducted more than one orchestras.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the names of conductors that have conducted more than one orchestras.. \nSELECT  SELECT a.conductor_id, a.name, SUM(b.record_company)\nFROM performance p\nJOIN orchestra o ON p.orchestra_id = o.orchestra_id\nJOIN conductor c ON p.conductor_id = c.conductor_id\nGROUP BY a.conductor_id, a.name\nHAVING SUM(b.record_company) > 1;\n#Create the database:\n#sqlite3 orchestra.sqlite\n#sqlite> create table conductor (conductor_id integer, name text, age real, nationality text, year_of_work integer);\n#sqlite> create table orchestra (orchestra_id integer, orchestra text, conductor_id integer, record_company text, year_of_founded integer, major_record_format integer);\n#sqlite> create table performance (performance_id integer, orchestra_id integer, type text, date text, official_ratings_millions real, weekly_rank integer, share integer);\n#sqlite> create table show (show_id integer, performance_id integer, if_first_show boolean"}
{"question": "What are the names of conductors who have conducted at more than one orchestra?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors who have conducted at more than one orchestra?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors who have conducted at more than one orchestra?. \nSELECT  SELECT Conductor_ID, \n           Name, \n           Age, \n           Nationality, \n           Year_of_Work \n       FROM Conductor \n       GROUP BY Conductor_ID;\n\nSELECT  SELECT Orchestra_ID, \n           Orchestra, \n           Conductor_ID, \n           Record_Company, \n           Year_of_Founded, \n           Major_Record_Format \n       FROM Orchestra \n       GROUP BY Orchestra_ID;\n\nSELECT  SELECT Performance_ID, \n           Orchestra_ID, \n           Type, \n           Date, \n           Official_ratings_(millions), \n           Weekly_rank, \n           Share \n       FROM Performance \n       GROUP BY Performance_ID;\n\nSELECT  SELECT Show_ID, \n           Performance_ID, \n           If_first_show, \n           Result, \n           Attendance \n       FROM Show \n       GROUP BY Show_ID;\n\n\n#####\n\n\nWhat are the names of all the shows?. \nSELECT  SELECT Show_ID, \n           Name, \n          "}
{"question": "Show the name of the conductor that has conducted the most number of orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the name of the conductor that has conducted the most number of orchestras.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the name of the conductor that has conducted the most number of orchestras.. \nSELECT  SELECT COUNT(Performance_ID) AS TOTAL_NUMBER OF PERFORMANCES CONDUCTED BY CONDUCTOR\nGROUP BY CONDUCTOR_ID\nORDER BY TOTAL_NUMBER OF PERFORMANCES DESC\n### SQLite ORCHESTRA SQL orchestra, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\n### SQLite PERFORMANCE SQL performance, with their properties:\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_"}
{"question": "What is the name of the conductor who has conducted the most orchestras?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the name of the conductor who has conducted the most orchestras?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the name of the conductor who has conducted the most orchestras?. \nSELECT  SELECT DISTINCT Conductor_ID FROM orchestra\nGROUP BY Conductor_ID\nHAVING count(*)>1;\nWhat is the name of the conductor with the most performances?. \nSELECT  SELECT DISTINCT Conductor_ID FROM orchestra\nGROUP BY Conductor_ID\nHAVING count(*)>1;\nWhat is the name of the conductor who has conducted the most performances?. \nSELECT  SELECT DISTINCT Conductor_ID FROM orchestra,performance\nGROUP BY Conductor_ID\nHAVING count(*)>1;\nWhat is the name of the conductor who has conducted the most performances of the symphony?. \nSELECT  SELECT DISTINCT Conductor_ID FROM orchestra,performance,symphony\nGROUP BY Conductor_ID\nHAVING count(*)>1;\nWhat is the name of the conductor who has conducted the most performances of the symphony?. \nSELECT  SELECT DISTINCT Conductor_ID FROM orchestra,performance,symphony\nGROUP BY Conductor_ID\nHAVING count(*)>1;\nWhat is the name of the conductor who has"}
{"question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the name of the conductor that has conducted orchestras founded after 2008.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the name of the conductor that has conducted orchestras founded after 2008.. \nSELECT  SELECT *, COUNT(*) AS Total_Shows FROM \"show\" WHERE \"show\".\"Conductor_ID\" = \"Conductor\".\"Conductor_ID\" AND \"show\".\"Performance_ID\" = \"Performance\".\"Performance_ID\" AND \"show\".\"If_first_show\" = 1 GROUP BY \"show\".\"Performance_ID\";\nSELECT  SELECT *, COUNT(*) AS Total_Shows FROM \"show\" WHERE \"show\".\"Conductor_ID\" = \"Conductor\".\"Conductor_ID\" AND \"show\".\"Performance_ID\" = \"Performance\".\"Performance_ID\" AND \"show\".\"If_first_show\" = 0 GROUP BY \"show\".\"Performance_ID\";\nSELECT  SELECT *, COUNT(*) AS Total_Shows FROM \"show\" WHERE \"show\".\"Conductor_ID\" = \"Conductor\".\"Conductor_ID\" AND \"show\".\"Performance_ID\" = \"Performance\".\"Performance_ID\" AND \"show\".\"If_first_show\" = 1 AND \"show\".\"Result\" = 1"}
{"question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors who have conducted orchestras founded after the year 2008?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors who have conducted orchestras founded after the year 2008?. \n}
{"question": "Please show the different record companies and the corresponding number of orchestras.", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the different record companies and the corresponding number of orchestras.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the different record companies and the corresponding number of orchestras.. \nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*\n*\n*\nSELECT  SELECT \n*"}
{"question": "How many orchestras does each record company manage?", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many orchestras does each record company manage?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many orchestras does each record company manage?. \nSELECT  SELECT *, COUNT(DISTINCT ORCHESTRA_ID) AS NUM_ORCHESTRA_MANAGED\n    FROM PERFORMANCE\n    GROUP BY PERFORMANCE.ORCHESTRA_ID\n    ORDER BY 1 DESC;\nSELECT  SELECT *, COUNT(DISTINCT PERFORMANCE.ORCHESTRA_ID) AS NUM_ORCHESTRA_MANAGED\n    FROM SHOW\n    GROUP BY SHOW.PERFORMANCE_ID\n    ORDER BY 1 DESC;\nSELECT  SELECT *, COUNT(DISTINCT PERFORMANCE.ORCHESTRA_ID) AS NUM_ORCHESTRA_MANAGED\n    FROM PERFORMANCE\n    GROUP BY PERFORMANCE.PERFORMANCE_ID\n    ORDER BY 1 DESC;\nSELECT  SELECT *, COUNT(DISTINCT PERFORMANCE.ORCHESTRA_ID) AS NUM_ORCHESTRA_MANAGED\n    FROM SHOW\n    GROUP BY SHOW.PERFORMANCE_ID\n"}
{"question": "Please show the record formats of orchestras in ascending order of count.", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the record formats of orchestras in ascending order of count.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the record formats of orchestras in ascending order of count.. \nSELECT  SELECT count(Record_Format) from performance GROUP BY Record_Format \n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "What are the major record formats of orchestras, sorted by their frequency?", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the major record formats of orchestras, sorted by their frequency?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the major record formats of orchestras, sorted by their frequency?. \nSELECT  SELECT  ORCHESTRA AS \"Format_Name\", COUNT(*) AS \"Count\", \"Year_of_Founded\", \"Major_Record_Format\"\nFROM    performance, \n        orchestra, \n        conductor\nWHERE   performance.conductor = conductor.ID\nAND     orchestra.conductor = conductor.ID\nGROUP BY orchestra.ID\nORDER BY orchestra.Major_Record_Format\n## SELECT  SELECT  ORCHESTRA AS \"Format_Name\", COUNT(*) AS \"Count\", \"Year_of_Founded\", \"Major_Record_Format\"\n## FROM    performance, \n##        orchestra, \n##        conductor\n## WHERE   performance.conductor = conductor.ID\n## AND     orchestra.conductor = conductor.ID\n## GROUP BY orchestra.ID\n## ORDER BY orchestra.Major_Record_Format\n\n# SELECT  SELECT  ORCHESTRA AS \"Format_Name\", COUNT(*) AS \"Count\", \"Year_of_Founded\", \"Major_Record_Format\"\n# FROM    performance, "}
{"question": "List the record company shared by the most number of orchestras.", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the record company shared by the most number of orchestras.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the record company shared by the most number of orchestras.. \nSELECT  SELECT\n  MAX(Orch_ID) AS Orch_ID,\n  Orch,\n  SUM(conductor_id) AS conductor_id\nFROM performances\nGROUP BY Orch;\n\nSELECT  SELECT\n  MAX(Orch_ID) AS Orch_ID,\n  Orch,\n  SUM(conductor_id) AS conductor_id\nFROM performances\nGROUP BY Orch, Conductor_ID;\n\nSELECT  SELECT\n  MAX(Orch_ID) AS Orch_ID,\n  Orch,\n  SUM(conductor_id) AS conductor_id\nFROM performances\nGROUP BY Orch, Conductor_ID, Year_of_Work;\n\nSELECT  SELECT\n  MAX(Orch_ID) AS Orch_ID,\n  Orch,\n  SUM(conductor_id) AS conductor_id\nFROM performances\nGROUP BY Orch, Conductor_ID, Year_of_Work, Nationality;\n\nSELECT  SELECT\n  MAX(Orch_ID) AS Orch_ID,\n  Orch,\n  SUM(conductor"}
{"question": "What is the record company used by the greatest number of orchestras?", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the record company used by the greatest number of orchestras?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the record company used by the greatest number of orchestras?. \nSELECT  SELECT *,COUNT(*) FROM ( \n\tSELECT\n\t\torchestra_id,\n\t\tcount(*) as total\n\t\tFROM show\n\t\tGROUP BY orchestra_id\n\t\tORDER BY total DESC\n\t\tLIMIT 1\n\t) AS a\n\tGROUP BY a.total\n\n#select * from orchestra\n#select * from orchestra_conductor\n#select * from orchestra_conductor_performance\n#select * from orchestra_performance\n#select * from orchestra_record_company\n#select * from show\n"}
{"question": "List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the names of orchestras that have no performance.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the names of orchestras that have no performance.. \nSELECT  SELECT *\nFROM    orchestra\nWHERE NOT EXISTS\n    (\n        SELECT 1\n        FROM    performance\n        WHERE   performance.orchestra_id = orchestra.orchestra_id\n    )\n\"\"\"\n\nclass Database(object):\n    def __init__(self):\n        self.conductors = {}\n        self.orchestras = {}\n        self.performances = {}\n        self.shows = {}\n\n    def import_sql(self, filename):\n        with open(filename, 'r') as f:\n            for line in f:\n                if 'SELECT' in line:\n                    self.parse_sql(line)\n                else:\n                    self.parse_dict(line)\n\n    def parse_sql(self, line):\n        (sql_parts, params) = line.strip().split(', ')\n        if '(' in sql_parts:\n            sql = sql_parts\n        else:\n            sql = 'SELECT * FROM {} WHERE {}'.format(sql_parts, params[0])\n            params = params[1:]\n        sql = ''.join(sql_parts)\n"}
{"question": "What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the orchestras that do not have any performances?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the orchestras that do not have any performances?. \nSELECT  SELECT distinct orchestra_id FROM performance WHERE performance.type = 'movie' \n#SELECT orchestra_id FROM performance WHERE performance.type = 'movie'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'music_video'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'video_game'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'radio'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'tv_series'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'tv_special'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'tv_movie'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'radio_talk_show'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'radio_news_report'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'radio_documentary'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'video_documentary'\n#SELECT orchestra_id FROM performance WHERE performance.type = 'web_series'\n#SELECT orchestra_id FROM performance"}
{"question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the record companies shared by orchestras founded before 2003 and after 2003.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the record companies shared by orchestras founded before 2003 and after 2003.. \nSELECT  SELECT * FROM orchestra, conductor, performance\nWHERE ( orchestra.orchestra='Symphony' and orchestra.year_of_founded <= 2002 )\n  OR ( orchestra.orchestra='Orchestra' and orchestra.year_of_founded >= 2003 )\n  AND ( conductor.conductor = orchestra.conductor\n    AND performance.performance = orchestra.performance\n    AND performance.year_of_recorded >= 2003 )\nGROUP BY orchestra.conductor, orchestra.performance\n\nSELECT  SELECT * FROM orchestra, conductor, performance\nWHERE ( orchestra.orchestra='Symphony' and orchestra.year_of_founded <= 2002 )\n  OR ( orchestra.orchestra='Orchestra' and orchestra.year_of_founded >= 2003 )\n  AND ( conductor.conductor = orchestra.conductor\n    AND performance.performance = orchestra.performance\n    AND performance.year_of_recorded >= 2003 )\nGROUP BY or"}
{"question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?. \n}
{"question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nFind the number of orchestras whose record format is \"CD\" or \"DVD\".. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nFind the number of orchestras whose record format is \"CD\" or \"DVD\".. \nSELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='orchestra' AND column_name='Record_Company' AND data_type='string' AND data_length>8 AND data_length<50\n\n\n\n#find the number of conductors whose nationality is Germany.. \n#SELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='conductor' AND column_name='Nationality' AND data_type='string' AND data_length>8 AND data_length<50\n\n\n\n#find the number of conductors whose nationality is Germany.. \n#SELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='conductor' AND column_name='Nationality' AND data_type='string' AND data_length>8 AND data_length<50\n\n#find the number of conductors whose nationality is Germany.. \n#SELECT  SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='conductor' AND column_name='Nationality' AND data_type='string' AND data_length>8 AND data_length<50\n\n\n\n\n"}
{"question": "Count the number of orchestras that have CD or DVD as their record format.", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of orchestras that have CD or DVD as their record format.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of orchestras that have CD or DVD as their record format.. \nSELECT  SELECT Conductor_ID, Orchestra,\n        Orchestras.Conductor_ID,\n        Orchestras.Record_Company,\n        Orchestras.Year_of_Founded,\n        Orchestras.Major_Record_Format,\n        Count(Orchestras.Major_Record_Format) as CD,\n        Count(Orchestras.Major_Record_Format) as DVD\n        From Orchestras\n        INNER JOIN Performances\n            ON Orchestras.Orchestra_ID = Performances.Orchestra_ID\n        WHERE Performances.Year_of_Performance > 2007\n        AND Orchestras.Major_Record_Format IN (SELECT Record_Company FROM Performances.Record_Company)\n        GROUP BY Orchestras.Orchestra_ID, Orchestras.Conductor_ID, Orchestras.Record_Company, Orchestras.Year_of_Founded, Orchestras.Major_Record_Format\n\n#Create a new database with SQLite\n$db_name = 'sqlite';"}
{"question": "Show the years in which orchestras that have given more than one performance are founded.", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the years in which orchestras that have given more than one performance are founded.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the years in which orchestras that have given more than one performance are founded.. \nSELECT  SELECT DISTINCT(Orchestra_ID) AS Year_of_Founded\nFROM     Orchestras\nWHERE    (Orchestra_ID NOT IN (SELECT Orchestra_ID FROM Conductors))\nAND      (Type IN ('Concert' , 'Opera')\nAND      (Record_Company IS NOT NULL))\nGROUP BY Orchestra_ID\nORDER BY Orchestra_ID ASC;\n\n### The database has an index on `Orchestra_ID` that we can use for faster\n### sorting.\n\nShow the years in which orchestras that have given more than one performance\n### are founded. \nSELECT  SELECT DISTINCT(Orchestra_ID) AS Year_of_Founded\nFROM     Orchestras\nWHERE    (Orchestra_ID NOT IN (SELECT Orchestra_ID FROM Conductors))\nAND      (Type IN ('Concert' , 'Opera')\nAND      (Record_Company IS NOT NULL))\nGROUP BY Orchestra_ID\nORDER BY Orchestra_ID ASC;\n\n### Get the names of the Conductors that have given more than one performance\n### for each orchestra in the database.\nSELECT  SELECT OR"}
{"question": "What are years of founding for orchestras that have had more than a single performance?", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are years of founding for orchestras that have had more than a single performance?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are years of founding for orchestras that have had more than a single performance?. \n}
{"question": "How many high schoolers are there?", "sql": "SELECT count(*) FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are there?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are there?. \nSELECT  SELECT count(*) FROM Highschooler;\n'Highschooler' is the name of the table, the column is 'ID'. \n\nHow many friends are there?. \nSELECT  SELECT count(*) FROM Friend;\n'Friend' is the name of the table, the column is 'student_id'. \n\nHow many high schoolers like each friend?. \nSELECT  SELECT HIGHSCHOOLER.ID, FRIEND.student_id, COUNT(Likes.friend_id) as likes FROM Highschooler, Friend, Likes WHERE HIGHSCHOOLER.ID = FRIEND.student_id AND FRIEND.student_id = Likes.friend_id GROUP BY HIGHSCHOOLER.ID, FRIEND.student_id;\nWhat are the 10 most popular students?. \nSELECT  SELECT HIGHSCHOOLER.ID, FRIEND.student_id, COUNT(Likes.friend_id) as likes FROM Highschooler, Friend, Likes WHERE HIGHSCHOOLER.ID = FRIEND.student_id AND FRIEND.student_id ="}
{"question": "Count the number of high schoolers.", "sql": "SELECT count(*) FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of high schoolers.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of high schoolers.. \nSELECT  SELECT count(name) AS count FROM Highschooler\nSelect the grade of the highest grades.. \nSELECT SELECT name, grade FROM Highschooler GROUP BY grade ORDER BY grade DESC LIMIT 1\nDegree of the Highschooler.. \nSELECT  SELECT name FROM Highschooler WHERE grade = 3 AND ID != 1 GROUP BY name ORDER BY name ASC\nHow many friends do they have? \nSELECT  SELECT student_id, friend_id FROM Friend WHERE friend_id != 1\nHow many friends like what? \nSELECT  SELECT student_id, liked_id FROM Likes WHERE liked_id != 1\n#\n# SQLite Sqlite database with a properties:\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\n#\n#Describe a student by his friends.\n# \n# \n# SELECT  SELECT name FROM Friend WHERE student_id = 1 \n# SELECT  SELECT name FROM Friend WHERE student_id = 2 \n# SELECT  SELECT name FROM Friend WHERE student_id = 3 \n#\n# \n# Give all the students with at"}
{"question": "Show the names and grades of each high schooler.", "sql": "SELECT name ,  grade FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names and grades of each high schooler.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names and grades of each high schooler.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# Show the names and grades of each high schooler..\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n# SELECT"}
{"question": "What are the names and grades for each high schooler?", "sql": "SELECT name ,  grade FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names and grades for each high schooler?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names and grades for each high schooler?. \nSELECT  SELECT \nHIGHSCHOOLER.NAME, HIGHSCHOOLER.GRADE \nFROM HIGHSCHOOLER \nLEFT JOIN HIGHSCHOOLER_FRIEND ON HIGHSCHOOLER.ID = HIGHSCHOOLER_FRIEND.STUDENT_ID \nLEFT JOIN FRIEND ON HIGHSCHOOLER_FRIEND.FRIEND_ID = FRIEND.ID\nLEFT JOIN LIKES ON FRIEND.ID = LIKES.FRIEND_ID\nGROUP BY HIGHSCHOOLER.ID\n### SQLite SQL network_1 database, with their properties:\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names and grades for each high schooler that are friends with a particular student? \nSELECT  HIGHSCHOOLER.NAME, HIGHSCHOOLER.GRADE \nFROM HIGHSCHOOLER \nLEFT JOIN HIGHSCHOOLER_FRIEND ON"}
{"question": "Show all the grades of the high schoolers.", "sql": "SELECT grade FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow all the grades of the high schoolers.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow all the grades of the high schoolers.. \nSELECT  SELECT a.name, b.grade\nFROM    highschooler a,\n        highschooler b\nWHERE   a.ID = b.friend_id\nAND     a.ID = '1105055222'\nAND     b.ID = '1105055224';\n\nCreate a table to store the list of friendships and the respective likes:\nCREATE TABLE network_1(\n    ID INTEGER,\n    student_id INTEGER,\n    friend_id INTEGER,\n    LIKE INTEGER\n);\n\n# Create table for the highschooler database.\nCREATE TABLE highschooler(\n    ID INTEGER,\n    name TEXT NOT NULL,\n    grade TEXT NOT NULL\n);\n\n# Create table for the friend database.\nCREATE TABLE friend(\n    student_id INTEGER NOT NULL,\n    friend_id INTEGER NOT NULL\n);\n\n# Create table for the like database.\nCREATE TABLE like(\n    student_id INTEGER NOT NULL,\n    liked_id INTEGER NOT NULL\n);\n\n# Create table for the query"}
{"question": "What is the grade of each high schooler?", "sql": "SELECT grade FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the grade of each high schooler?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the grade of each high schooler?. \nSELECT  SELECT  SELECT \n#(SELECT student_id FROM Highschooler WHERE name='Joshua')\n#(SELECT student_id FROM Highschooler WHERE name='Sarah')\n#(SELECT student_id FROM Highschooler WHERE name='Joshua')\n#(SELECT student_id FROM Highschooler WHERE name='Sarah')\n#(SELECT student_id FROM Highschooler WHERE name='Joshua')\n#(SELECT student_id FROM Highschooler WHERE name='Sarah')\n#(SELECT student_id FROM Highschooler WHERE name='Joshua')\n#(SELECT student_id FROM Highschooler WHERE name='Sarah')\n#(SELECT student_id FROM Highschooler WHERE name='Joshua')\n#(SELECT student_id FROM Highschooler WHERE name='Sarah')\n#(SELECT student_id FROM Highschooler WHERE name='Joshua')\n#(SELECT student_id FROM Highschooler WHERE name='Sarah')\n#(SELECT student_id FROM Highschooler WHERE name='Joshua')\n#(SELECT student_id FROM Highschooler WHERE name='Sarah')\n"}
{"question": "What grade is Kyle in?", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat grade is Kyle in?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat grade is Kyle in?. \nSELECT  SELECT \nname\nFROM   students\nWHERE  name LIKE 'Kyle%'\nORDER  BY  name\nLIMIT  1\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\n#Likes(\n    #'student_id'\n    #'friend_id'\n    #'liked_id'\n#)\nSELECT \n    id\n    ,name\n    ,grade\n    ,student_id\n    ,friend_id\n    ,liked_id\nFROM   students\nJOIN   students\n    ON student_id = liked_id\nJOIN   students\n    ON student_id = friend_id\nORDER  BY \n    name\n    ,student_id\n    ,friend_id\n#LIKES('student_id', 'friend_id', 'liked_id')\nSELECT \n    id\n    ,name\n    ,grade\n    ,student_id\n    ,friend_id\n    ,liked_id\nFROM   students\nJOIN   students\n    ON"}
{"question": "Return the grade for the high schooler named Kyle.", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the grade for the high schooler named Kyle.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the grade for the high schooler named Kyle.. \nSELECT  SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT (SELECT (SELECT\n(SELECT (SELECT (SELECT ("}
{"question": "Show the names of all high schoolers in grade 10.", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of all high schoolers in grade 10.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of all high schoolers in grade 10.. \nSELECT  SELECT \nhighschooler.name, \nfriend.name AS friend_name \nFROM student\nINNER JOIN highschooler ON student.ID = highschooler.student_id\nINNER JOIN friend ON student.ID = friend.student_id\nGROUP BY student.ID\nWHERE grade = '10'\nShow the names of all students, their friends, and their likes.\nSELECT  SELECT \nstudent.name, \nfriend.name AS friend_name, \nlikes.name AS like_name \nFROM student\nINNER JOIN highschooler ON student.ID = highschooler.student_id\nINNER JOIN friend ON student.ID = friend.student_id\nINNER JOIN likes ON student.ID = likes.student_id\nGROUP BY student.name\nWHERE grade = '10'\n\n\nHighschooler.update(name = \"Alice\")\nHighschooler.update(name = \"Bob\")\nFriend.update(student_id = 1, friend_id = 2)\nHighschooler.update(liked_id = 3)\nHighschooler.update(liked_"}
{"question": "What are the names of all high schoolers in grade 10?", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of all high schoolers in grade 10?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of all high schoolers in grade 10?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT "}
{"question": "Show the ID of the high schooler named Kyle.", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the ID of the high schooler named Kyle.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the ID of the high schooler named Kyle.. \nSELECT  SELECT \n\t\t\t\t\tStudent.ID \n\tFROM \n\t\t\t\tStudent,\n\t\t\t\tFriend \n\tWHERE \n\t\t\t\tStudent.ID = Friend.student_id \n\t\t\t\tAND \n\t\t\t\tFriend.friend_id = 1374 \n\t\t\t\tAND \n\t\t\t\tStudent.name = 'Kyle'\n\t\t\t\tAND \n\t\t\t\tStudent.grade > 90 \n\t\t\t\tAND \n\t\t\t\tStudent.grade < 100 \n\n## The key to this problem is to filter the data to the correct rows and columns\n## in order to return the correct answer.\n\n\n# SELECT \n#   SELECT \n\t\t\t\t\tStudent.ID \n\tFROM \n\t\t\t\tStudent,\n\t\t\t\tFriend \n\tWHERE \n\t\t\t\tStudent.ID = Friend.student_id \n\t\t\t\tAND \n\t\t\t\tFriend.friend_id = 1374 \n\t\t\t\tAND \n"}
{"question": "What is Kyle's id?", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is Kyle's id?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is Kyle's id?. \nSELECT  SELECT  SELECT\n#Friend(2,3);\n#Likes(1,3);\n#Student(5,name='Kyle',grade='C');\n#Student(1,name='Pete',grade='B');\n#Student(2,name='Dave',grade='C');\n#Student(3,name='Linda',grade='B');\n#Student(4,name='Amy',grade='C');\n#Student(5,name='Kyle',grade='C');\n#Student(6,name='Jane',grade='B');\n#Student(7,name='Jon',grade='B');\n#Student(8,name='Mike',grade='B');\n#Student(9,name='Oscar',grade='B');\n#Student(10,name='Pete',grade='B');\n#Student(11,name='Ray',grade='C');\n#Student(12,name='Susan',grade='C');\n#Student(13,name='Ulysses',grade='A');\n#Student(14,name='Violet',grade='A');\n#"}
{"question": "How many high schoolers are there in grade 9 or 10?", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are there in grade 9 or 10?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are there in grade 9 or 10?. \nSELECT  SELECT COUNT(*) FROM highschooler WHERE grade=9 OR grade=10;\nHow many high schoolers are there in grade 11 or 12? \nSELECT SELECT COUNT(*) FROM highschooler WHERE grade=11 OR grade=12;\n\nHow many students are there that like me?\nSELECT  SELECT COUNT(*) FROM student s, student_likes s_l\nWHERE s_l.student_id = s.ID AND s_l.liked_id = s.ID;\n\nHow many students like me?\nSELECT SELECT COUNT(*) FROM student_likes s_l\nWHERE s_l.liked_id = 1;\n\nHow many students like me in grade 9 or 10?\nSELECT SELECT COUNT(*) FROM student_likes s_l\nWHERE s_l.liked_id = 1 AND s_l.grade=9 OR s_l.grade=10;\n\nHow many students like me in grade 11 or 12?\nSELECT SELECT COUNT(*) FROM student_likes s_l\nWHERE s_l.liked_id = 1 AND s_l.grade=1"}
{"question": "Count the number of high schoolers in grades 9 or 10.", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of high schoolers in grades 9 or 10.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of high schoolers in grades 9 or 10.. \nSELECT  SELECT  COUNT(*) AS [number]\nFROM    \"SQLite\".\"network_1\".\"student\"\nWHERE   \"student\".\"highschool\" = 1 AND\n          \"student\".\"grade\" = 9 OR 10\n#.\n#With query analysis..\n#  SELECT  SELECT  COUNT(*) AS [number]\n#    FROM    \"SQLite\".\"network_1\".\"student\"\n#      WHERE   \"student\".\"highschool\" = 1\n#             AND \"student\".\"grade\" = 9\n#             OR 10\n#\n#With variables..\n#SELECT  @number := COUNT(*)\n#FROM    \"SQLite\".\"network_1\".\"student\"\n#WHERE   \"student\".\"highschool\" = 1\n#          AND \"student\".\"grade\" = 9 OR 10\n\ndef query_analysis(sql)\n  #Return all queries with SQL that evaluate to true.\n  queries = []\n  #For each query in a list, do the following:\n  sql.scan(/SELECT.*?\\n/).each do |q|\n    #Find all variables.\n    vars"}
{"question": "Show the number of high schoolers for each grade.", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the number of high schoolers for each grade.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the number of high schoolers for each grade.. \nSELECT  SELECT \n#TABLE_NAME,\n#ATTRIBUTE_NAME\nFROM   ATTRIBUTES\nWHERE  ATTRIBUTE_NAME LIKE '%Grade%'\n\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the number of high schoolers for each grade..\n\n\n\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the number of high schoolers for each grade.. \nSELECT  SELECT \n#TABLE_NAME,\n#ATTRIBUTE_NAME\nFROM   ATTRIBUTES\nWHERE  ATTRIBUTE_NAME LIKE '%Grade%'\n\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the number of high schoolers for each grade..\n"}
{"question": "How many high schoolers are in each grade?", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are in each grade?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are in each grade?. \nSELECT  SELECT \n  grade, COUNT(*) AS student_count\n  FROM   student\n GROUP BY grade\n;\n\\end{code}\n\nAnd the following script will generate the query as string:\n\n\\begin{code}\nconst sql = db.raw.select.apply(null,\n  [\n    ['ID', 'name', 'grade'],\n    ['student_id', 'friend_id'],\n    ['liked_id'],\n    ['student_id', 'liked_id']\n  ].map(c => db.raw.select(c[0], c[1], c[2], c[3])),\n  db);\n\\end{code}\n\nI have used `group_concat()` in the `raw.select` method to add the string, and then used `concat()` method to merge all the query. I have used the `group_concat()` method to add the string in the query, and the concatenation method to merge the query.\n\n\\begin{code}\n//group_concat('student_count, ');\nconst sql = db.raw.select(\n  group_concat(\n    [\n      'grade,"}
{"question": "Which grade has the most high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhich grade has the most high schoolers?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhich grade has the most high schoolers?. \nSELECT  SELECT name FROM highschooler \nWHERE grade = 'Junior'\n\nWhich has the most friends?.\nSELECT  SELECT friend FROM friend \nWHERE student_id = '92971122614'\n\nWhich has the most likes?.\nSELECT  SELECT liked FROM like \nWHERE student_id = '92971122614'\n\n### The sqlite3 class\n\n# Note: This class is implemented as a wrapper for the \n# sqlite3 module. This means you'll need to install it \n# first:\n#   $ pip install sqlite3\n\n# Note: You can also install sqlite3 using pip if you're\n# on a Linux machine:\n#   $ sudo apt-get install libsqlite3-dev\n\n# In this case, you'll also need to use:\n#   $ pip install sqlite3\n\n# IMPORTANT NOTE:\n#  If you are using the sqlite3 module instead of sqlite\n#  you MUST specify the path to the sqlite3 binary in the\n#  sqlite3 constructor.\n\nclass SQLite3:\n    def"}
{"question": "Return the grade that has the greatest number of high schoolers.", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the grade that has the greatest number of high schoolers.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the grade that has the greatest number of high schoolers.. \n}
{"question": "Show me all grades that have at least 4 students.", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow me all grades that have at least 4 students.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow me all grades that have at least 4 students.. \nSELECT  SELECT \n   *\nFROM    student\n    INNER JOIN friend\n        ON student.id = friend.student_id\n    INNER JOIN highschooler\n        ON friend.friend_id = highschooler.id\n    INNER JOIN like\n        ON student.id = like.student_id\nWHERE    LIKE.id > 3 \n    AND HIGHSCHOOLER.grade > 2\n    AND HIGHSCHOOLER.id IN (\n        SELECT  *\n        FROM    HIGHSCHOOLER\n        GROUP BY HIGHSCHOOLER.grade\n        HAVING   COUNT(*) >= 4\n    )\nLIMIT     4;\n\n\n# To finish this tutorial, first go to the file:\n# nbproject/projects/python/learnings/sqlite_queries.py\n# and modify the code that sets up the database.\n\n# To create the database, run:\n# python nbproject/projects/python/learnings/sqlite_queries.py -f sqlite_queries.db\n\n# To run the script, run:\n# python nbproject/projects/python/"}
{"question": "Which grades have 4 or more high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhich grades have 4 or more high schoolers?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhich grades have 4 or more high schoolers?. \nSELECT  SELECT  SELECT\ngrade, count(id)\nFROM  sqlite_master\nGROUP BY 1\nWHERE grade = 'Senior'\nAND class != 'Senior'\nAND class != 'Junior'\nAND class != 'Sophomore'\nAND class != 'Freshman'\nAND count(*) > 4\nSELECT  SELECT  SELECT  SELECT\n(SELECT name\nFROM  Highschooler\nWHERE id = student.id)\nFROM  sqlite_master\nWHERE class = 'Senior'\nAND id = student.id\nSELECT  SELECT  SELECT  SELECT\n(SELECT name\nFROM  Highschooler\nWHERE id = friend.id)\nFROM  sqlite_master\nWHERE class = 'Senior'\nAND id = friend.id\nSELECT  SELECT  SELECT\n(SELECT id\nFROM  Likes\nWHERE student_id = friend.id)\nFROM  sqlite_master\nWHERE class = 'Senior'\nAND id = friend.id\n"}
{"question": "Show the student IDs and numbers of friends corresponding to each.", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the student IDs and numbers of friends corresponding to each.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the student IDs and numbers of friends corresponding to each.. \nSELECT  SELECT * FROM sqlite_master, sqlite_temp_master WHERE type='table' AND name='Student'\nSELECT  SELECT * FROM sqlite_master, sqlite_temp_master WHERE type='table' AND name='Friend'\nSELECT  SELECT * FROM sqlite_master, sqlite_temp_master WHERE type='table' AND name='Likes'\nSELECT  SELECT * FROM sqlite_master, sqlite_temp_master WHERE type='table' AND name='Student_ID'\nSELECT  SELECT * FROM sqlite_master, sqlite_temp_master WHERE type='table' AND name='Grade'\nSELECT  SELECT * FROM sqlite_master, sqlite_temp_master WHERE type='table' AND name='Friend_ID'\nSELECT  SELECT * FROM sqlite_master, sqlite_temp_master WHERE type='table' AND name='Liked_ID'\nSELECT  SELECT * FROM sqlite_master, sqlite_temp_master WHERE type='table' AND name='Student_IDs_of_Friends'\n\nSELECT  SELECT * FROM sqlite_master, sqlite_temp_master WHERE type='table' AND name='Student_IDs_of_Likes'\nSELECT  SELECT * FROM"}
{"question": "How many friends does each student have?", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many friends does each student have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many friends does each student have?. \nSELECT  SELECT * FROM network_1 WHERE id = ?\nSELECT  select * from network_1 where student_id = ?\nSELECT  SELECT student_id FROM network_1 WHERE id = ?\nSELECT  SELECT grade FROM network_1 WHERE id = ?\nSELECT  select * from network_1 where student_id = ?\n\n\nThis module implements a database, and defines a few database classes.\nThese classes are very thin, and pretty much only forward to the actual\nSQLite3 API.\n\nThis module is not a good place to put actual code that manipulates the\ndatabase.\n\n\"\"\"\n\nfrom django.conf import settings\nfrom django.db.backends.base import CursorWrapper as BaseCursorWrapper\nfrom django.db.backends.base import Database\nfrom django.db.backends.sqlite3.base import DatabaseWrapper\nfrom django.db.backends.sqlite3.operations import DatabaseOperations\nfrom django.db.backends.sqlite3.creation import DatabaseCreation\nfrom django.db.backends.sqlite3.introspection import DatabaseIntrospection\nfrom django.utils.functional import cached_property\nfrom django."}
{"question": "Show the names of high school students and their corresponding number of friends.", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high school students and their corresponding number of friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high school students and their corresponding number of friends.. \nSELECT  SELECT  SELECT  SELECT\nid, name, grade,\nstudent_id, student_name, student_grade,\nfriend_id, friend_name, friend_grade\nFROM students\nLEFT JOIN friends ON students.student_id = friends.friend_id\nLEFT JOIN students ON friends.friend_id = students.student_id\nWHERE student_id IS NOT NULL OR student_name IS NOT NULL OR student_grade IS NOT NULL OR\nfriend_id IS NOT NULL OR friend_name IS NOT NULL OR friend_grade IS NOT NULL \nORDER BY grade ASC, student_name ASC;\n\n### \n### SQLite SQL network_2 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\n#Group('student_id', 'group')\n#Grade('student_id', 'grade')\n#Drug(student_id, drug, drug_grade)\n#Health(student_id, health, health_grade)\n#Height(student_id, height, height_grade)"}
{"question": "What are the names of the high schoolers and how many friends does each have?", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of the high schoolers and how many friends does each have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of the high schoolers and how many friends does each have?. \nSELECT  SELECT  SELECT \nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\n"}
{"question": "What is the name of the high schooler who has the greatest number of friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the name of the high schooler who has the greatest number of friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the name of the high schooler who has the greatest number of friends?. \nSELECT  SELECT \n#ID, \n#name, \n#GRADE \n#FROM \n#Highschooler \n#WHERE \n#GRADE=? \n#GROUP BY \n#name \n#ORDER BY \n#COUNT(*) DESC \n#LIMIT \n#1 \n#ORDER BY \n#COUNT(*) DESC \n#LIMIT \n#1\n\n#Answer:\n\n#1. Create a table that contains the school_id, name, grade of a high schooler. The school_id is the foreign key in the highschooler table.\n\n#2. Create a table that contains student_id, friend_id of a high schooler. The student_id is the foreign key in the highschooler table.\n\n#3. Create a table that contains student_id, liked_id of a high schooler. The liked_id is the foreign key in the highschooler table.\n\n#4. Connect to SQLite database and execute the following SQL statements.\n\n#create table highschooler (\n#  ID INTEGER PRIMARY KEY AUTOINCREMENT,\n#  name TEXT,\n# "}
{"question": "Return the name of the high school student with the most friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the name of the high school student with the most friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the name of the high school student with the most friends.. \nSELECT  SELECT a.name, count(b.friend_id) as count_of_friends\nFROM    student_table AS a\nJOIN    student_table AS b ON a.friend_id = b.student_id\nGROUP BY a.name\nHAVING   count_of_friends = (\nSELECT  SELECT count(*)\nFROM    student_table AS a\nJOIN    student_table AS b ON a.friend_id = b.student_id\n)\nFROM    student_table AS a\nGROUP BY a.name\nHAVING   count_of_friends = (\nSELECT  SELECT count(*)\nFROM    student_table AS a\nJOIN    student_table AS b ON a.friend_id = b.student_id\n)\n#Keyword: group by\n#Keyword: select\n#Keyword: having\n#Keyword: count\n#Keyword: distinct\n#Keyword: join\n#Keyword: having\n#Keyword: select\n#Keyword: count\n#Keyword: distinct\n#Keyword: where\n#Keyword: group by\n#Keyword: count\n#Keyword: where\n#"}
{"question": "Show the names of high schoolers who have at least 3 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high schoolers who have at least 3 friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high schoolers who have at least 3 friends.. \nSELECT  SELECT name, grade FROM student \nWHERE ((friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student"}
{"question": "What are the names of high schoolers who have 3 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have 3 or more friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have 3 or more friends?. \nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.name LIKE 'name_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE 'grade_%';\nSELECT  SELECT COUNT(*) FROM highschooler WHERE highschooler.grade LIKE '"}
{"question": "Show the names of all of the high schooler Kyle's friends.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of all of the high schooler Kyle's friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of all of the high schooler Kyle's friends.. \nSELECT  SELECT  SELECT \n  Highschooler.student_id, Highschooler.name, Friend.friend_id\n  FROM Highschooler\n  INNER JOIN Friend\n    ON Highschooler.student_id = Friend.friend_id\n    WHERE Highschooler.student_id = 25; \n\n#Give us all the students that Kyle likes..\nSELECT  SELECT  SELECT \n  Highschooler.student_id, Highschooler.name, Likes.liked_id\n  FROM Highschooler\n  INNER JOIN Likes\n    ON Highschooler.student_id = Likes.liked_id\n    WHERE Highschooler.student_id = 25; \n"}
{"question": "Return the names of friends of the high school student Kyle.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the names of friends of the high school student Kyle.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the names of friends of the high school student Kyle.. \nSELECT  SELECT FROM (SELECT FRIEND.student_id, FRIEND.friend_id FROM FRIEND WHERE FRIEND.student_id = 202) FRIENDS WHERE FRIEND.friend_id IN (SELECT id FROM HIGHSCHOOLER WHERE id = 100)\nSELECT DISTINCT\nFROM\n(\n  SELECT\n    student_id\n    FROM\n    (\n      SELECT\n        student_id\n        FROM\n        (\n          SELECT\n            student_id\n            FROM\n            (\n              SELECT\n                student_id\n                FROM\n                (\n                  SELECT\n                    student_id\n                    FROM\n                    (\n                      SELECT\n                        student_id\n                        FROM\n                        (\n                          SELECT\n                            student_id\n                            FROM\n                            (\n                              SELECT\n                                student_id\n                                FROM\n                                (\n                                  SELECT\n                                    student_id\n                                    FROM\n                                    (\n                                      SELECT\n                                        student_id\n                                        FROM\n                                        (\n                                          SELECT\n                "}
{"question": "How many friends does the high school student Kyle have?", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many friends does the high school student Kyle have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many friends does the high school student Kyle have?. \nSELECT  SELECT friends.student_id, count(friends.friend_id) as num_friends\nFROM    friends\nGROUP BY friends.student_id;\n\n#Kyle is friends with 2 other students:\n\nSELECT  SELECT friends.student_id, count(friends.friend_id) as num_friends\nFROM    friends\nWHERE   friends.student_id = 1\nGROUP BY friends.student_id;\n\n#Kyle likes 4 other students:\n\nSELECT  SELECT likes.student_id, count(likes.liked_id) as num_likes\nFROM    likes\nGROUP BY likes.student_id;\n\n#Erik is liked by 3 other students:\n\nSELECT  SELECT likes.student_id, count(likes.liked_id) as num_likes\nFROM    likes\nWHERE   likes.liked_id = 1\nGROUP BY likes.student_id;\n\n"}
{"question": "Count the number of friends Kyle has.", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of friends Kyle has.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of friends Kyle has.. \nSELECT  SELECT_COUNT( 'student_id', 'friend_id' ) FROM network_1;\n#=> \"SELECT SELECT_COUNT( 'student_id', 'friend_id' ) FROM network_1;\"\n#=> {\"student_id\"=>[\"1\", \"2\", \"3\", \"4\"], \"friend_id\"=>[\"1\", \"2\", \"3\", \"4\"]}\n#Count the number of students who likes Fancy Pants.. \nSELECT  SELECT_COUNT( 'liked_id', 'student_id' ) FROM network_1;\n#=> \"SELECT SELECT_COUNT( 'liked_id', 'student_id' ) FROM network_1;\"\n#=> {\"liked_id\"=>[\"1\", \"2\", \"3\", \"4\"], \"student_id\"=>[\"1\", \"2\", \"3\", \"4\"]}\nKyle has 3 friends.. \nSELECT  SELECT_COUNT( 'student_id', 'friend_id' ) FROM network_1;\n#=> \"SELECT SELECT_COUNT( 'student_id', 'friend_id' ) FROM network_1;\"\n#=> {\"student_id\"=>[\"1\", \""}
{"question": "Show ids of all students who do not have any friends.", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow ids of all students who do not have any friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow ids of all students who do not have any friends.. \nSELECT  SELECT  SELECT \n  FROM   `network_1` AS `network_1` \n  WHERE  `network_1`.`student_id` NOT IN ( \n    SELECT  `friend_id` \n    FROM   `network_1` \n    WHERE  `student_id` = `network_1`.`student_id` \n  ) \n  ORDER BY \n    `network_1`.`student_id`\n    `network_1`.`grade` DESC \n;\n\n\n#delete the friendships of student2 from the database.\n#since there are no such friendships, it will delete the entire table.\n#database_1.drop_table() \n\n#create a copy of database_1\n#database_1.create_table(\n#  Table('new_database')\n#    .columns(\n#      Student_id.as_scalar(),\n#      Name.as_scalar(),\n#      Grade.as_scalar()\n#    )\n#) \n\n#drop the existing tables\n#database_1.drop_table('network_1', 'network_2', 'friend"}
{"question": "What are the ids of high school students who do not have friends?", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the ids of high school students who do not have friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the ids of high school students who do not have friends?. \nSELECT  SELECT * FROM network_1 WHERE not EXISTS ( SELECT * FROM network_1 WHERE student_id = id )\n\n# The following SQL code will create a table from the database.\nCREATE TABLE IF NOT EXISTS network_1 (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    grade INTEGER NOT NULL\n);\nCREATE TABLE IF NOT EXISTS friend (\n    student_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    friend_id INTEGER NOT NULL\n);\nCREATE TABLE IF NOT EXISTS likes (\n    student_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    liked_id INTEGER NOT NULL\n);\n"}
{"question": "Show names of all high school students who do not have any friends.", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow names of all high school students who do not have any friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow names of all high school students who do not have any friends.. \nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT "}
{"question": "What are the names of students who have no friends?", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of students who have no friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of students who have no friends?. \nSELECT  SELECT\nWHERE\nclass Schedule.max_students = 5\nclass Schedule.classes.\nSelect\nfriends.student_id\nFrom\nclass Schedule.classes,friends\ngroup by friends.student_id\nhaving count(friends.student_id)=0\n\n### SQL Server 2012 SQL network_1 database, with their properties:\n#Friend.student_id, Friend.friend_id\n#Likes.student_id, Likes.liked_id\nWhat are the names of students who have no friends?. \nSELECT  SELECT\nFROM\nclass Schedule.classes,\nFriend\ngroup by Friend.student_id\nhaving count(Friend.student_id)=0\n\n### SQL Server 2012 SQL database, with their properties:\n#Friend.student_id, Friend.friend_id\n#Likes.student_id, Likes.liked_id\nWhat are the names of students who have no friends?. \nSELECT  SELECT\nFROM\nclass Schedule.classes,\nFriend\ngroup by Friend.student_id\nhaving count(Friend."}
{"question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the ids of high schoolers who have friends and are also liked by someone else.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the ids of high schoolers who have friends and are also liked by someone else.. \nSELECT  SELECT \n\tstudent_id AS high_schooler_id,\n\tfriend_id AS student_id,\n\tliked_id AS high_schooler_id\nFROM \n\tnetwork_1\nWHERE \n\thigh_schooler_id IS NOT NULL\nAND \n\tfriend_id IS NOT NULL\nAND \n\tliked_id IS NOT NULL\nAND \n\tfriend_id <> liked_id\nAND \n\tliked_id <> high_schooler_id;\n\n"}
{"question": "What are the ids of students who both have friends and are liked?", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the ids of students who both have friends and are liked?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the ids of students who both have friends and are liked?. \nSELECT  SELECT_NETWORK_1.student_id,\nSELECT_NETWORK_1.friend_id,\nSELECT_NETWORK_1.liked_id\nFROM    SELECT_NETWORK_1\nWHERE   (SELECT_NETWORK_1.student_id,\nSELECT_NETWORK_1.friend_id,\nSELECT_NETWORK_1.liked_id\nINNER JOIN SELECT_NETWORK_1 AS SUB_NETWORK_1\nON      SUB_NETWORK_1.student_id = SELECT_NETWORK_1.friend_id\nWHERE     SELECT_NETWORK_1.friend_id = SELECT_NETWORK_1.liked_id\nAND      SUB_NETWORK_1.student_id = SELECT_NETWORK_1.student_id)\n\nSELECT  SELECT_NETWORK_1.student_id,\nSELECT_NETWORK_1.friend_id,\nSELECT_NETWORK_1.liked_id\nFROM    SELECT_NETWORK_1\nWHERE   (SELECT_NETWORK_1.student_id,"}
{"question": "Show name of all students who have some friends and also are liked by someone else.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow name of all students who have some friends and also are liked by someone else.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow name of all students who have some friends and also are liked by someone else.. \nSELECT  SELECT *\nFROM    SchoolStudent, SchoolFriend, SchoolLikes\nWHERE   SchoolStudent.ID = SchoolFriend.friend_id\nAND     SchoolStudent.ID = SchoolLikes.student_id\nAND     SchoolFriend.student_id = SchoolLikes.friend_id\n\n### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\n\nShow name of all students who have some friends and also are liked by someone else..\nSELECT  SELECT *\nFROM    SchoolStudent, SchoolFriend, SchoolLikes\nWHERE   SchoolStudent.ID = SchoolFriend.friend_id\nAND     SchoolStudent.ID = SchoolLikes.student_id\nAND     SchoolFriend.student_id = SchoolLikes.friend_id\n"}
{"question": "What are the names of high schoolers who both have friends and are liked?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who both have friends and are liked?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who both have friends and are liked?. \nSELECT  SELECT \n  *\nFROM    students \nWHERE   EXISTS (SELECT 1\n                FROM    friends\n                WHERE   students.ID = friends.student_id\n                AND      friends.friend_id = Likes.student_id)\nAND     EXISTS (SELECT 1\n                FROM    Likes\n                WHERE   students.ID = Likes.student_id)\nAND     EXISTS (SELECT 1\n                FROM    friends\n                WHERE   Likes.student_id = friends.friend_id)\n\\end{code}\n\nNotice that all the queries above are on the same database, `network_1`.  A more interesting version of the problem is given by the following queries:\n\n\\begin{code}\nSELECT  *\nFROM    students \nWHERE   EXISTS (SELECT 1\n                FROM    friends\n                WHERE   students.ID = friends.student_id\n                AND      friends.friend_id = Likes.student_id)\nAND     EXISTS (SELECT 1\n                FROM    Likes\n                WHERE   students.ID = Likes.student_id)\nAND     EXISTS (SELECT 1\n                FROM    friends\n                WHERE"}
{"question": "Count the number of likes for each student id.", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of likes for each student id.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of likes for each student id.. \nSELECT  SELECT  SELECT\n  COUNT(likes.student_id) FROM likes\n  INNER JOIN student ON likes.student_id = student.id\n  INNER JOIN student_likes ON likes.student_id = student_likes.liked_id\nGROUP BY student_likes.liked_id\n\nCOUNT the number of likes for each student id.. \nSELECT  SELECT  SELECT\n  COUNT(likes.student_id) FROM likes\n  INNER JOIN student ON likes.student_id = student.id\n  INNER JOIN student_likes ON likes.student_id = student_likes.liked_id\nGROUP BY student_likes.liked_id\n\nSELECT  SELECT  SELECT\n  COUNT(likes.student_id) FROM likes\n  INNER JOIN student ON likes.student_id = student.id\n  INNER JOIN student_likes ON likes.student_id = student_likes.liked_id\nGROUP BY student_likes.liked_id\n\nSELECT  SELECT  SELECT\n  COUNT(likes.student_id) FROM likes\n  INNER JOIN student"}
{"question": "How many likes correspond to each student id?", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many likes correspond to each student id?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many likes correspond to each student id?. \nSELECT  SELECT  SELECT\n#Friend.student_id\n#Likes.liked_id\n#Student.ID\n#GROUP BY\n#LIKES.liked_id\n#COUNT\n#LIKE.liked_id\n\n#Example:\n#1234567890\n#1234567891\n#1234567892\n#1234567893\n#1234567894\n#1234567895\n#1234567896\n#1234567897\n#1234567898\n#1234567899\n#1234567900\n#1234567901\n#1234567902\n#1234567903\n#1234567904\n#1234567905\n#1234567"}
{"question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high schoolers who have likes, and numbers of likes for each.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high schoolers who have likes, and numbers of likes for each.. \nSELECT  SELECT * FROM (SELECT student_id, count(*) as c FROM LIKES GROUP BY student_id) l, (SELECT * FROM HIGHSCHOOLER) h WHERE h.id = l.student_id \n    AND h.liked_id IS NULL\n    AND l.c > 0\n    ORDER BY l.student_id ASC, l.c DESC;\n\"\"\"\n\ndef sort_statements(sql_statements):\n    #let's sort the statements by the order in which we use them.\n    #this should help avoiding errors when code paths are not followed\n    statements = sorted(sql_statements, key=lambda x: sql_statements.index(x))\n    return statements\n\n#NOTE: the numbers in the comments are for debugging only, please don't use them in your production code\n\nclass DatabaseConnection:\n\n    def __init__(self, config_path=None):\n        \"\"\"\n        Creates a connection to the SQLite database at the given path, and sets the schema.\n        If the given path is None, then the default database will be used, and the schema will\n        be"}
{"question": "What are the names of high schoolers who have likes, and how many likes does each have?", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have likes, and how many likes does each have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have likes, and how many likes does each have?. \nSELECT  SELECT name, count(liked_id) FROM Likes GROUP BY name ORDER BY count(liked_id) DESC LIMIT 10;\nSELECT  SELECT name, count(liked_id) FROM Likes GROUP BY name ORDER BY count(liked_id) DESC LIMIT 10;\n\n#What are the names of friends who like each other?\nSELECT  SELECT student_id, friend_id FROM Friend GROUP BY student_id, friend_id;\nSELECT  SELECT student_id, friend_id FROM Friend GROUP BY student_id, friend_id;\n\n#If a student's name is in the list of high schoolers, how many friends does he or she have?\nSELECT  SELECT friend_id FROM Friend WHERE student_id IN (SELECT name FROM Highschooler);\nSELECT  SELECT friend_id FROM Friend WHERE student_id IN (SELECT name FROM Highschooler);\n\n#How many students are in the database?\nSELECT count(student_id) FROM Highschooler;\nSELECT count(student_id) FROM Highschooler;\n\n#What are the names of high schoolers who like at least one thing?\nSELECT  SELECT name FROM"}
{"question": "What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the name of the high schooler who has the greatest number of likes?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the name of the high schooler who has the greatest number of likes?. \nSELECT  SELECT  SELECT  SELECT \n\n\n# What is the name of the person with the first name 'Bob' and the last name 'Doe'?\nSELECT  SELECT  SELECT  SELECT \n\n#Given two friend ids, find the number of mutual friends\n# (i.e. number of friends each of them has in common).\nSELECT  SELECT  SELECT  SELECT \n\n#Given three friend ids, find all friend groups.\nSELECT  SELECT  SELECT  SELECT \n\n\n# SELECT * FROM database.table WHERE name = 'Doe';\n#\n# SELECT * FROM database.table WHERE grade = 'F';\n#\n# SELECT * FROM database.table WHERE likes.student_id = '2';\n\n# SELECT  * FROM database.table WHERE name LIKE 'Bob%';\n#\n# SELECT * FROM database.table WHERE name LIKE '%Joe%';\n#\n# SELECT * FROM database.table WHERE grade LIKE '%F%';\n#\n# SELECT * FROM database.table WHERE grade LIKE '%A%';\n#\n# SELECT * FROM database.table WHERE grade LIKE '%B%';\n#\n# SELECT * FROM database.table"}
{"question": "Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nGive the name of the student with the most likes.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nGive the name of the student with the most likes.. \nSELECT  SELECT  SELECT\nFROM    Friends\nWHERE   Student_ID = 12\nGROUP BY  likes\nORDER BY  likes desc\n;\n# Returns:\n# ID - 12\n# NAME - Highschooler\n# GRADE - 10\n# STUDENT_ID - 12\n# FRIEND_ID -\n\n# Give the student that has the most likes in the school\nSELECT  SELECT  SELECT\nFROM    Friends\nWHERE   Student_ID IN (1, 2, 3, 4, 5)\nGROUP BY  likes\nORDER BY  likes desc\n;\n# Returns:\n# ID - 1\n# NAME - Highschooler\n# GRADE - 10\n# STUDENT_ID - 1\n# FRIEND_ID - \n\n# Give the student with the lowest grade\nSELECT  SELECT  SELECT\nFROM    Friends\nWHERE   Student_ID IN (1, 2, 3, 4, 5)\nGROUP BY  grade\nORDER BY  grade desc\n;\n# Returns:\n# ID - 5\n# NAME -"}
{"question": "Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of students who have at least 2 likes.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of students who have at least 2 likes.. \nSELECT  SELECT name\nFROM    student\nWHERE   COUNT(student_id)\n        = COUNT(liked_id)\nAND     COUNT(student_id)\n        > 1\nGROUP BY name\nHAVING   COUNT(student_id)\n        > 1\nORDER BY name\nLIMIT 100\n\n#The SQL query that would be used to print the \"likes\" of a user:\n#SELECT  SELECT name\n#FROM    student\n#WHERE   name = 'Ken'\n#GROUP BY name\n#HAVING   COUNT(liked_id)\n#        > 1\n#ORDER BY name\n#LIMIT 100\n\n#The SQL query that would be used to print all the students of a school:\n#SELECT  SELECT name\n#FROM    student\n#WHERE   school_id = 1\n#ORDER BY name\n#LIMIT 100\n"}
{"question": "What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of students who have 2 or more likes?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of students who have 2 or more likes?. \nSELECT  SELECT\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\n#\n#Students who have 2 or more likes\n#WHERE EXISTS(\n#   SELECT\n#       `Highschooler`.`ID`, `Highschooler`.`name`, `Highschooler`.`grade`\n#       FROM `Highschooler`\n#       INNER JOIN `Friend` ON `Friend`.`student_id`=`Highschooler`.`ID`\n#       WHERE\n#       (`Highschooler`.`ID` IN (\n#          SELECT `ID`\n#          FROM `Likes`\n#          WHERE EXISTS(\n#             SELECT `Highschooler`.`ID`\n#             FROM `Likes`\n#             WHERE `Likes`.`liked_id`=`Friend`.`ID`)\n#       )\n#       OR\n#       (`Highschooler`.`ID` IN (\n#          SELECT `ID`\n#          FROM `Likes`\n#          WHERE EXISTS(\n#             SELECT `Highschooler`.`ID`\n#             FROM"}
{"question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of students who have a grade higher than 5 and have at least 2 friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of students who have a grade higher than 5 and have at least 2 friends.. \nSELECT  SELECT  SELECT\nstudent_name, student_grade, student_id\nFROM student, student_friends, student_likes\nWHERE student.student_grade > 5\nAND student.student_id IN (\nSELECT student_id\nFROM student_friends\nGROUP BY student_id\nHAVING COUNT(student_friend_id) >= 2\n)\nAND student.student_id IN (\nSELECT student_id\nFROM student_likes\nGROUP BY student_id\nHAVING COUNT(liked_id) >= 2\n)\n;\n"}
{"question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have a grade of over 5 and have 2 or more friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have a grade of over 5 and have 2 or more friends?. \nSELECT  SELECT  SELECT  SELECT\n\n### Our code:\nimport csv\nimport sqlite3\nfrom sqlite3 import Error\nfrom sqlite3 import IntegrityError\n\nimport operator\nfrom os import path\nfrom collections import OrderedDict\nfrom database import *\n\ndef get_name(id):\n    try:\n        return [name for name in [row[0] for row in cur.execute(SELECT_HIGHSCHOOLER)]][0]\n    except:\n        return ''\n\ndef get_name(id):\n    try:\n        return [name for name in [row[0] for row in cur.execute(SELECT_FRIEND)]][0]\n    except:\n        return ''\n\ndef get_name(id):\n    try:\n        return [name for name in [row[0] for row in cur.execute(SELECT_LIKE)]][0]\n    except:\n        return ''\n\ndef get_id(name):\n    try:\n        return [id for id in [row[0] for row in cur.execute(SELECT_FRIEND)]][0]\n    except:\n        return ''"}
{"question": "How many likes does Kyle have?", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many likes does Kyle have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many likes does Kyle have?. \nSELECT  SELECT COUNT(liked_id) FROM Likes WHERE liked_id=1;\nHow many students are in this database?. \nSELECT COUNT(*) FROM Students;\n\nHow many friends does Kyle have?. \nSELECT  COUNT(friend_id) FROM Friends WHERE friend_id=1;\nHow many Highschooler students are friends with Kyle?. \nSELECT COUNT(*) FROM Friends WHERE student_id=1 AND friend_id=1;\n\nHow many people have been liked by Kyle?. \nSELECT COUNT(*) FROM Likes WHERE student_id=1;\n\nHow many Highschooler students have been liked by Kyle?. \nSELECT COUNT(*) FROM Likes WHERE liked_id=1 AND student_id=1;\n\nHow many students have been liked by Kyle?. \nSELECT COUNT(*) FROM Likes WHERE liked_id=1;\n\nHow many students have been friends with Kyle?. \nSELECT COUNT(*) FROM Friends WHERE student_id=1;\n\nHow many students have been friends with Kyle AND are also friends with you?. \nSELECT COUNT(*) FROM Friends WHERE student_id=1 AND friend_id=2;\n"}
{"question": "Return the number of likes that the high schooler named Kyle has.", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the number of likes that the high schooler named Kyle has.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the number of likes that the high schooler named Kyle has.. \nSELECT  SELECT Count(student_id) FROM highschooler GROUP BY student_id WHERE name='Kyle'\n"}
{"question": "Find the average grade of all students who have some friends.", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nFind the average grade of all students who have some friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nFind the average grade of all students who have some friends.. \nSELECT  SELECT_STUDENTS_WITH_FRIENDS(SELECT_STUDENTS_WITHOUT_FRIENDS(SELECT_STUDENTS_WITHOUT_FRIENDS()))\n\ndef SelectStudentsWithoutFriends():\n    #return a list of student objects,\n    #excluding students with friends.\n    return Student.objects.exclude(friend_set__exists=True)\n\ndef SelectStudentsWithFriends():\n    #return a list of student objects,\n    #including students with friends.\n    return Student.objects.filter(friend_set__exists=True)\n\ndef SelectStudentsWithoutFriendsAndLikes():\n    #return a list of student objects,\n    #excluding students with friends,\n    #and also including students with likes.\n    return Student.objects.exclude(friend_set__exists=True).exclude(likes__exists=True)\n\n\ndef SelectStudentsWithFriendsAndLikes():\n    #return a list of student objects,\n    #including students with friends,\n    #and also including students"}
{"question": "What is the average grade of students who have friends?", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the average grade of students who have friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the average grade of students who have friends?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nMAX(grade) AS grade,\nCOUNT(*) AS numStudents\nFROM student\nINNER JOIN friend ON student.ID = friend.student_id\nGROUP BY friend.friend_id\nHAVING COUNT(*) > 1\nORDER BY average_grade DESC\nLIMIT 10;\n# =>\n# => {\n# =>   \"grade\"=> 2.76,\n# =>   \"numStudents\"=> 600\n# => }\n# => {\n# =>   \"grade\"=> 2.96,\n# =>   \"numStudents\"=> 21\n# => }\n# => {\n# =>   \"grade\"=> 3.02,\n# =>   \"numStudents\"=> 15\n# => }\n# => {\n# =>   \"grade\"=> 2.84,\n# =>   \"numStudents\"=> 14\n# => }\n# => {\n# =>   \"grade\"=> 3.12,\n# =>   \"numStudents\"=> 10\n# => }\n# => {\n# =>   \"grade\"=>"}
{"question": "Find the minimum grade of students who have no friends.", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nFind the minimum grade of students who have no friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nFind the minimum grade of students who have no friends.. \nSELECT  SELECT  SELECT  SELECT \nMIN(grade) FROM student\nWHERE student_id NOT IN (\n    SELECT student_id\n    FROM friend\n    WHERE friend_id IS NULL\n    )\n#Likes('student_id', 'liked_id')\nFind the friends of a highschooler with the highest grade. \nSELECT  SELECT  SELECT  SELECT \nstudent_id FROM student\nWHERE grade = 9\nAND student_id NOT IN (\n    SELECT student_id\n    FROM friend\n    WHERE friend_id IS NULL\n    )\n#Find the students who have the highest grade and the same age as the one with the third highest grade. \nSELECT  SELECT  SELECT  SELECT \nstudent_id, grade FROM student\nWHERE student_id = 23\nAND grade = 13\nAND student_id NOT IN (\n    SELECT student_id\n    FROM student\n    WHERE student_id > 23\n    AND grade = 9\n    )\n#Find the friends of a highschooler with the highest grade. \nSELECT  SELECT  SELECT  SELECT \nstudent_id FROM student\nWHERE grade = 9\nAND student"}
{"question": "What is the lowest grade of students who do not have any friends?", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the lowest grade of students who do not have any friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the lowest grade of students who do not have any friends?. \nSELECT  SELECT\n  MIN(Grade)\n  FROM   student\n  WHERE  EXISTS(\n    SELECT 0\n    FROM   Friend\n    WHERE  student.ID = Friend.student_id AND Friend.friend_id IS NULL\n  );\n\"\"\"\n    \"\"\"\n# The following is the top two graded students, who have the most friends.\n# MIN(Grade)\n# JOIN Friend\n# GROUP BY student.ID\n# HAVING COUNT(DISTINCT Friend.friend_id) = MAX(COUNT(DISTINCT Friend.friend_id))\n# ORDER BY MAX(COUNT(DISTINCT Friend.friend_id));\nSELECT\n  MIN(Grade)\n  FROM   student\n  JOIN Friend\n    ON  student.ID = Friend.student_id\n  GROUP BY student.ID\n  HAVING COUNT(DISTINCT Friend.friend_id) = MAX(COUNT(DISTINCT Friend.friend_id));\n\"\"\"\n    \"\"\"\n# The following is the top two graded students, who have the most friends.\n# MIN(Grade)\n# JOIN Friend\n# GROUP BY student.ID\n"}
{"question": "Which states have both owners and professionals living there?", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich states have both owners and professionals living there?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich states have both owners and professionals living there?. \nSELECT  SELECT DISTINCT a.state\nFROM dogs d, owners o, professionals p\nWHERE  o.state = p.state\nAND o.state = d.owner_state\n\n#What are all the breeds of dogs currently in the kennel?\nSELECT breed_name\nFROM breeds\nWHERE breed_code IN (\nSELECT breed_code\nFROM dogs\nGROUP BY breed_code\nHAVING COUNT(1) = (\nSELECT COUNT(1)\nFROM dogs\nGROUP BY breed_code\n)\n);\n\n#Find all dogs that have been abandoned?\nSELECT DISTINCT dog_id\nFROM dogs d\nWHERE d.abandoned_yn = 1;\n\n#Find all breeds of dogs with size_code = 'XL'\nSELECT DISTINCT breed_code\nFROM dogs\nWHERE size_code = 'XL';\n\n#What are all the charges for dogs with size_code = 'XL'?\nSELECT charge_type, CHARGE_AMOUNT\nFROM charges\nWHERE charge_type = 'fee'\nAND charge_amount < 100\nAND charge_"}
{"question": "Find the states where both owners and professionals live.", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the states where both owners and professionals live.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the states where both owners and professionals live.. \n}
{"question": "What is the average age of the dogs who have gone through any treatments?", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the average age of the dogs who have gone through any treatments?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the average age of the dogs who have gone through any treatments?. \nSELECT  SELECT 1 AS A, 'Dog' AS A0, NULL AS A1, NULL AS A2, NULL AS A3, NULL AS A4, NULL AS A5, NULL AS A6, NULL AS A7, NULL AS A8, NULL AS A9, NULL AS A10, NULL AS A11, NULL AS A12, NULL AS A13, NULL AS A14, NULL AS A15, NULL AS A16, NULL AS A17, NULL AS A18, NULL AS A19, NULL AS A20, NULL AS A21, NULL AS A22, NULL AS A23, NULL AS A24, NULL AS A25, NULL AS A26, NULL AS A27, NULL AS A28, NULL AS A29, NULL AS A30, NULL AS A31, NULL AS A32, NULL AS A33, NULL AS A34, NULL AS A35, NULL AS A36, NULL AS A37, NULL AS A38, NULL AS A39, NULL AS A40, NULL AS A41, NULL AS A42,"}
{"question": "Find the average age of the dogs who went through treatments.", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the average age of the dogs who went through treatments.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the average age of the dogs who went through treatments.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT "}
{"question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.. \nSELECT  SELECT * FROM professional WHERE first_name LIKE 'In%' AND last_name LIKE 'Indiana' AND cell_number LIKE '0%' GROUP BY first_name, last_name, cell_number ORDER BY first_name, last_name, cell_number;\n\n\n#Dog behavioral characteristics\nWhich dogs have a history of biting someone? \nSELECT * FROM dog_kennel WHERE bite_yn = 1 GROUP BY breed_code, size_code, dog_id ORDER BY breed_code, size_code, dog_id;\n\n\n#Dogs by breed\nHow many Corgis are in dog_kennel? \nSELECT * FROM dog_kennel GROUP BY breed_code ORDER BY dog_count DESC;\n\nHow many Corgis are in dog_kennel that are female? \nSELECT * FROM dog_kennel WHERE gender = 1 GROUP BY breed_code ORDER BY dog_count DESC;\n\nWhich dogs are 4 years or older? \nSELECT * FROM dog_kennel WHERE age = 4 ORDER BY dog_count DESC;\n\nHow many Corgis are there that have the bre"}
{"question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.. \nSELECT  SELECT breed_name, breed_code, owner_id, cell_number, last_name\nFROM dogs, owners, professionals\nWHERE owners.owner_id = dogs.owner_id\nAND dogs.breed_code = 'Bernese Mountain Dog'\nAND dogs.state_id = 'Indiana'\nAND dogs.date_of_adoption > '2012-10-01'\nAND dogs.date_adopted = '2013-04-01'\nAND dogs.state_id = 'Indiana'\nAND professionals.professional_id = dogs.professional_id\nAND professionals.role_code = 'Professional'\nAND professionals.state_id = 'Indiana'\nAND professionals.date_of_treatment = '2012-09-01'\nGROUP BY dogs.owner_id, dogs.breed_code, dogs.size_code\nORDER BY 1,2,3;\n\n\n# Access the field of breeds by dog_kennels.breed_code and then retrieve the first 5"}
{"question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs have not cost their owner more than 1000 for treatment ? List the dog names .. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs have not cost their owner more than 1000 for treatment ? List the dog names .. \nSELECT  SELECT  \n    breeds.breed_name\nFROM      dog_kennels\nINNER JOIN dog_breeds\nON       dog_kennels.breed_code = dog_breeds.breed_code\nWHERE     dog_kennels.owner_id = 15\nGROUP BY  breeds.breed_name\nHAVING    COUNT(breeds.breed_name) < 1000\n\nWhich dogs have not cost their owner more than 1000 for treatment ? List the dog names .. \nSELECT  SELECT  \n    breeds.breed_name\nFROM      dog_kennels\nINNER JOIN dog_breeds\nON       dog_kennels.breed_code = dog_breeds.breed_code\nWHERE     dog_kennels.owner_id = 15\nGROUP BY  breeds.breed_name\nHAVING    COUNT(breeds.breed_name) > 1000\n\n\nWhat is the average weight of dogs in this database? \nSELECT  SELECT  \n    weight\nFROM      dog_kennels\n"}
{"question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the names of the dogs for which the owner has not spend more than 1000 for treatment ?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the names of the dogs for which the owner has not spend more than 1000 for treatment ?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address"}
{"question": "Which first names are used for professionals or owners but are not used as dog names?", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich first names are used for professionals or owners but are not used as dog names?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich first names are used for professionals or owners but are not used as dog names?. \nSELECT  SELECTED_PET.first_name, \nFROM    (SELECT 1 AS SELECTED_PET, \n               pet.owner_id, \n               pet.name, \n               pet.size_code, \n               pet.breed_code, \n               pet.age, \n               pet.date_of_birth, \n               pet.gender, \n               pet.weight, \n               pet.date_arrived, \n               pet.date_adopted, \n               pet.date_departed, \n               pet.treatment_type_code, \n               pet.treatment_type_description, \n               pet.charge_id, \n               pet.charge_type, \n               pet.charge_amount, \n               pet.size_description, \n               pet.breed_description, \n               pet.charges.charge_description AS Charge_description, \n               pet.treatments.treatment_description AS Treatment_description, \n               pet.professionals.role_code AS Professional_role, \n               pet"}
{"question": "Find the first names that are used for professionals or owners but are not used as dog names.", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the first names that are used for professionals or owners but are not used as dog names.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the first names that are used for professionals or owners but are not used as dog names.. \nSELECT  SELECT owner_id, first_name, last_name, role_code, email_address, home_phone, cell_number, street, city, state, zip_code, street, city, state, zip_code\nFROM      owners\nWHERE     FIRST_NAME IS NOT NULL\nAND       LAST_NAME IS NOT NULL\nAND       PROFESSIONAL_ID IS NULL\nAND       PROFESSIONAL_ID IS NULL\n\nFind the first names that are used for professionals but are not used as dog names.. \nSELECT  SELECT owner_id, first_name, last_name, role_code, email_address, home_phone, cell_number, street, city, state, zip_code, street, city, state, zip_code\nFROM      owners\nWHERE     PROFESSIONAL_ID IS NULL\nAND       FIRST_NAME IS NOT NULL\nAND       LAST_NAME IS NOT NULL\n\n\n#Find the dog names that are used for owners but are not used as dog names.. \nSELECT  SELECT owner_id, name, age, date_of_birth, gender, weight, date_arrived,"}
{"question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professional did not operate any treatment on dogs? List the professional's id, role and email.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professional did not operate any treatment on dogs? List the professional's id, role and email.. \nSELECT  SELECT role_code,first_name,email_address,professional_id\nFROM     professions\nWHERE    role_code IN ('Owner', 'Manager', 'Vet', 'Trainer')\nAND NOT EXISTS (\n    SELECT 1\n    FROM     treatments\n    WHERE   treatment_id = treatments.treatment_id\n    AND     professional_id = treatments.professional_id\n    AND     professional_id = treatments.professional_id\n)\n    ...\n\\end{code}\n\nIf the role code is not found in the `professional` table, then it should be returned, like this:\n\n\\begin{code}\n<database>\nSELECT *\nFROM     professions\nWHERE    role_code IN ('Owner', 'Manager', 'Vet', 'Trainer')\n\\end{code}\n\nThis will return all professionals.\n\nComment: What's the purpose of that line? I don't understand why I would need to add an id to the `professionals` table.\n\nComment: This is the `exists` part.\n\nComment: If you get an error, it means"}
{"question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nGive me the id, role and email of the professionals who did not perform any treatment on dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nGive me the id, role and email of the professionals who did not perform any treatment on dogs.. \nSELECT  SELECT a.role_code,a.email_address FROM doggie_kennels_professional a \nWHERE a.role_code != 'owner'\nAND NOT EXISTS(SELECT * FROM doggie_kennels_treatments b WHERE a.role_id = b.professional_id AND b.treatment_type_code = 'first_treatment')\n\n"}
{"question": "Which owner owns the most dogs? List the owner id, first name and last name.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner owns the most dogs? List the owner id, first name and last name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner owns the most dogs? List the owner id, first name and last name.. \nSELECT  SELECT DISTINCT on (owner_id) owner_id, first_name, last_name\nFROM dog_kennels\nWHERE owner_id > 1\nORDER BY owner_id DESC\nLIMIT 20\n#Which owner has the most dogs? List the owner id, first name and last name.. \nSELECT  SELECT DISTINCT on (owner_id) owner_id, first_name, last_name\nFROM dog_kennels\nGROUP BY owner_id\nORDER BY COUNT(owner_id) DESC\n#Which owner has the most dogs? List the owner id, first name and last name.. \nSELECT  SELECT DISTINCT on (owner_id) owner_id, first_name, last_name\nFROM dog_kennels\nGROUP BY owner_id\nORDER BY COUNT(*) DESC\n#Which owner has the most dogs? List the owner id, first name and last name.. \nSELECT  SELECT DISTINCT on (owner_id) owner_id, first_name, last_name\nFROM dog_kennels\nGROUP BY owner_id\nORDER BY COUNT(owner_id) DESC\n#Which owner"}
{"question": "Return the owner id, first name and last name of the owner who has the most dogs.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nReturn the owner id, first name and last name of the owner who has the most dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nReturn the owner id, first name and last name of the owner who has the most dogs.. \nSELECT  SELECT_FUNCTION(owner_id,first_name,last_name)\nFROM dogs\nWHERE dog_id IN\n(\nSELECT MAX(dog_id) FROM dogs GROUP BY owner_id\n)\nGROUP BY owner_id\n\\end{code}\n\nThe SELECT_FUNCTION selects from the database and returns it in the correct format.  I want to write a query to select the results.  This is my work so far:\n\n\\begin{code}\nSELECT max(Select_Function(dog_id, first_name, last_name) FROM dogs group by owner_id)\nFROM dogs\n\\end{code}\n\nHowever, I get an error:\n\n\\begin{code}\nSQLite Error: near \"(\": syntax error\n\\end{code}\n\nComment: `GROUP BY` is not a function.\n\nComment: @Barranka GROUP BY is a statement.\n\nComment: For future reference, if you're trying to figure out the meaning of an error message, the first step is to replace the offending line with a dummy one. That'll make it much easier to find the line number of the error.\n\nComment"}
{"question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have done at least two treatments? List the professional's id, role, and first name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have done at least two treatments? List the professional's id, role, and first name.. \nSELECT  SELECT professional_id, role_code, first_name,\n          count(treatment_id) AS count_treatments\n        FROM treatments\n        GROUP BY professional_id, role_code, first_name\n        HAVING count(treatment_id) > 2\n        ORDER BY count_treatments DESC;\nSELECT professional_id, role_code, first_name,\n          count(treatment_id) AS count_treatments\n        FROM treatments\n        GROUP BY professional_id, role_code, first_name\n        HAVING count(treatment_id) < 2\n        ORDER BY count_treatments DESC;\n\nSELECT professional_id, role_code, first_name,\n          count(treatment_id) AS count_treatments\n        FROM treatments\n        GROUP BY professional_id, role_code, first_name\n        HAVING count(treatment_id) = 2\n        ORDER BY count_treatments DESC;\n\nSELECT professional_id, role_code, first_name,\n          count(treatment_id) AS"}
{"question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the id, role, and first name of the professionals who have performed two or more treatments?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the id, role, and first name of the professionals who have performed two or more treatments?. \nSELECT  SELECT  SELECT \nFROM \n    professionals \nWHERE \n    role_code = 'doctor'\n    AND \n    (\n    treatments.professional_id = professionals.id\n    AND\n    treatments.dog_id = dogs.id\n    )\n    AND \n    treatments.date_of_treatment > \n    treatments.date_of_treatment - INTERVAL 30 DAY;\n\n### Normalize Dog_kennels.Treatments to only record the treatment type, date of treatment, cost of treatment, and the id of the dog and the professional who performed the treatment.\n\n#breeds is a list of strings with the breed codes, breed names, and breed description.\nbreeds = ['Labrador Retriever', 'German Shepherd', 'Greyhound', 'Pekingese', 'Beagle', 'Cocker Spaniel', 'Miniature Schnauzer', 'Papillon', 'English Springer Spaniel', 'Australian Shepherd', 'Cavalier King Charles Spaniel', 'Mixed Breed', '"}
{"question": "What is the name of the breed with the most dogs?", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the name of the breed with the most dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the name of the breed with the most dogs?. \nSELECT  SELECT  SELECT \n   MAX(breeds.breed_code)\n   , MAX(breeds.breed_name)\n   , MAX(charges.charge_amount)\n   , MAX(charges.charge_type)\nFROM    dog_kennels\n   JOIN    breeds\n      ON  dog_kennels.breed_code = breeds.breed_code\n   JOIN    charges\n      ON  dog_kennels.charge_id = charges.charge_id\nGROUP BY breeds.breed_code\nORDER BY breeds.breed_code\n\n1. Select the property name for the name of the breed with the most dogs. \nSELECT \n   MAX(breeds.breed_code)\n   , MAX(breeds.breed_name)\n   , MAX(charges.charge_amount)\n   , MAX(charges.charge_type)\nFROM    dog_kennels\n   JOIN    breeds\n      ON  dog_kennels.breed_code = breeds.breed_code\n   JOIN    charges\n      ON  dog_kennels."}
{"question": "Which breed do the most dogs have? Give me the breed name.", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich breed do the most dogs have? Give me the breed name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich breed do the most dogs have? Give me the breed name.. \nSELECT  SELECT b.breed_code AS breed_code, b.breed_name AS breed_name, COUNT(*) AS count_of_breed\nFROM    dogs d\nJOIN    breeds b ON b.breed_code = d.breed_code\nGROUP BY b.breed_code, b.breed_name;\n\n\n# SELECT  SELECT b.breed_code AS breed_code, b.breed_name AS breed_name, COUNT(*) AS count_of_breed\n# FROM    dogs d\n# JOIN    breeds b ON b.breed_code = d.breed_code\n# GROUP BY b.breed_code, b.breed_name;\n\nSELECT  SELECT b.breed_code AS breed_code, b.breed_name AS breed_name, COUNT(*) AS count_of_breed\nFROM    dogs d\nJOIN    breeds b ON b.breed_code = d.breed_code\nGROUP BY b.breed_code, b.breed_name, b.breed_name\n\n\n# SELECT  SELECT b"}
{"question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner has paid for the most treatments on his or her dogs? List the owner id and last name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner has paid for the most treatments on his or her dogs? List the owner id and last name.. \nSELECT  SELECT COUNT(owner_id), last_name FROM dog_treatments GROUP BY owner_id;\n\n### If you'd like to know the owner with the most dogs in your kennel, use this query:\n#Which owner has the most dogs in the kennel? List the owner id and number of dogs..\nSELECT  SELECT COUNT(dog_id), owner_id FROM dog_kennels GROUP BY owner_id;\n\n### Which dogs have been abandoned most frequently? List the number of times each dog has been abandoned..\nSELECT  SELECT COUNT(abandoned_yn), dog_id FROM dog_kennels GROUP BY dog_id;\n\n### Which professionals have been paid for the most dog treatments? List the professional id and the number of dog treatments each professional has been paid for..\nSELECT  SELECT COUNT(professional_id), dog_id FROM dog_kennels GROUP BY professional_id;\n\n### Which dogs have been adopted the most times? List the number of times each dog has been adopted..\nSELECT  SELECT COUNT(adopted_yn), dog_id FROM dog_kennels GROUP BY dog"}
{"question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.. \nSELECT  SELECT a.owner_id, a.last_name\nFROM kennels as a\nWHERE a.dog_kennels.treatments.professional_id = (\n  SELECT b.professional_id\n  FROM kennels as b\n  WHERE b.dog_kennels.treatments.treatment_type_code = 'overall treatment'\n  )\n  GROUP BY a.owner_id, a.last_name\n  ORDER BY a.last_name ASC\n\n"}
{"question": "What is the description of the treatment type that costs the least money in total?", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the description of the treatment type that costs the least money in total?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the description of the treatment type that costs the least money in total?. \nSELECT  SELECT \nTreatment_Types('treatment_type_code', 'treatment_type_description')\nFROM  Dog_Kennels\n\n\t\t\tWHERE \n\t\t\tdog_id = \n\t\t\tTreatments('dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\n\nSELECT \nTreatment_Types('treatment_type_code', 'treatment_type_description')\nFROM  Dog_Kennels\nGROUP BY \nTreatment_Types('treatment_type_code', 'treatment_type_description')\nHAVING \nCOUNT(Treatments('dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')) < 2\n\n\n"}
{"question": "Give me the description of the treatment type whose total cost is the lowest.", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nGive me the description of the treatment type whose total cost is the lowest.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nGive me the description of the treatment type whose total cost is the lowest.. \nSELECT  SELECT \nFROM \n  dog_kennels \n  WHERE \n    (SELECT \n      COUNT(1) \n      FROM \n      dog_kennels \n      WHERE \n        dog_kennels.dog_id = dog_kennels_result.dog_id \n        AND dog_kennels.treatment_id = dog_kennels_result.treatment_id \n        AND dog_kennels.professional_id = dog_kennels_result.professional_id) \n    = 1 \n    AND \n    dog_kennels.breed_code = 'Shepherd' \n    AND dog_kennels.size_code = 'Large' \n    AND dog_kennels.treatment_type_code = 'Dental' \n    AND dog_kennels.treatment_type_description = 'Full' \n    AND dog_kennels.owner_id = 12 \n    AND dog_kennels.professional_id = 1 \nORDER BY \n    dog"}
{"question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.. \nSELECT  SELECT owner_id, MAX(sum(charge_amount)) AS chargetotal\nFROM dog_kennels\nGROUP BY owner_id, zip_code\nORDER BY chargetotal DESC LIMIT 20;\n\nWhich professional has treated the most dogs? Show the professional id and zip code.\nSELECT  SELECT professional_id, MAX(count(dog_id)) AS dog_count\nFROM dog_kennels\nGROUP BY professional_id, zip_code\nORDER BY dog_count DESC LIMIT 20;\n\nWhich dog has the largest amount of money paid for their treatment? Show the dog id and the charge_type id.\nSELECT  SELECT dog_id, MAX(sum(treatment_amount)) AS charge_total\nFROM dog_kennels\nGROUP BY dog_id, charge_type_id\nORDER BY charge_total DESC LIMIT 20;\n\nWhich dog has the largest amount of money paid for their treatment? Show the dog id and the charge_type id.\nSELECT  SELECT dog_id, MAX(sum(treatment_amount)) AS charge_total\nFROM dog_kennels\nGROUP BY dog_id,"}
{"question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the owner id and zip code of the owner who spent the most money in total for his or her dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the owner id and zip code of the owner who spent the most money in total for his or her dogs.. \nSELECT  SELECT \n\nSELECT \n\towner_id, SUM(charge_amount) AS total_charge_amount, \n\tDATE_FORMAT(date_of_birth, '%Y-%m-%d') AS birthday\n\t\nFROM \n\tdogs,\n\tcharges \n\tWHERE \n\t\tdog_id = owner_id \n\t\tAND charge_type = 'Adoption' \n\t\tAND charge_amount > 0 \n\t\tAND date_of_birth > '2014-01-01'\n\tGROUP BY \n\t\towner_id\n\tORDER BY \n\t\ttotal_charge_amount DESC\n\n\n\nSELECT \n\towner_id, SUM(charge_amount) AS total_charge_amount, \n\tDATE_FORMAT(date_of_birth, '%Y-%m-%d') AS birthday\n\t\nFROM \n\tdogs,\n\tcharges \n\tWHERE \n\t\tdog_id = owner_id \n\t\tAND charge_type = 'Pet Care' \n\t\tAND charge_amount > 0"}
{"question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have done at least two types of treatments? List the professional id and cell phone.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have done at least two types of treatments? List the professional id and cell phone.. \nSELECT  SELECT  SELECT  SELECT \nprofessional_id, \ncount(treatment_type_code),\ncount(professional_id) AS \"professional_treatments\",\nMAX(date_of_treatment) AS \"last_treatment_date\"\nFROM treatment_types\nGROUP BY professional_id\nORDER BY \"professional_treatments\" DESC\n\nSELECT  SELECT  SELECT  SELECT \nprofessional_id, \ncount(treatment_id),\ncount(professional_id) AS \"professional_treatments\",\nMAX(date_of_treatment) AS \"last_treatment_date\"\nFROM treatments\nGROUP BY professional_id\nORDER BY \"professional_treatments\" DESC\n\nSELECT  SELECT  SELECT  SELECT \nprofessional_id, \ncount(treatment_id) AS \"professional_treatments\",\nMAX(date_of_treatment) AS \"last_treatment_date\"\nFROM treatments\nGROUP BY professional_id\nORDER BY \"professional_treatments\" DESC\n\nSELECT  SELECT  SELECT "}
{"question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the id and cell phone of the professionals who operate two or more types of treatments.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the id and cell phone of the professionals who operate two or more types of treatments.. \nSELECT  SELECT \n\tprofessional_id\n\t, role_code\n\t, first_name\n\t, street\n\t, city\n\t, state\n\t, zip_code\n\t, last_name\n\t, email_address\n\t, home_phone\n\t, cell_number\nFROM dog_kennels\nJOIN treatment_types\nON dog_kennels.treatment_type_code = treatment_types.treatment_type_code\nJOIN treatment_types\nON dog_kennels.treatment_type_code = treatment_types.treatment_type_code\nWHERE dog_kennels.treatment_type_code = 'treatment_type_code_1' AND dog_kennels.treatment_type_code = 'treatment_type_code_2'\nGROUP BY professional_id\nHAVING COUNT(treatment_type_code) = 2\n\n\t\n\t\n\t\n\t\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t"}
{"question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the first name and last name of the professionals who have done treatment with cost below average?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the first name and last name of the professionals who have done treatment with cost below average?. \n}
{"question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have operated a treatment that costs less than the average? Give me theor first names and last names.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have operated a treatment that costs less than the average? Give me theor first names and last names.. \nSELECT  SELECT DISTINCT professional_id, first_name, last_name\nfrom treatment\nWHERE cost_of_treatment < avg(cost_of_treatment);\n\nCreate a group by the professional's first name and last name to find the professionals that operate a treatment that costs more than the average: \nSELECT DISTINCT first_name, last_name\nfrom professionals\nWHERE avg(cost_of_treatment) > cost_of_treatment;\n\nUse a GROUP BY of the professional's first name and last name, with the average cost of treatment and the number of times the professionals performs that treatment to see how many times the professionals perform that treatment, on average, more than the average.\nSELECT DISTINCT first_name, last_name\n, avg(cost_of_treatment),\nCOUNT(1)\nFROM professionals\nGROUP BY first_name, last_name\nORDER BY COUNT(1) DESC;\n\n\n# Dump the database to a file\n#SQLite3.default_string_flag = \"unified\"\n\ndb = SQLite3.new(\"dog_kennels"}
{"question": "List the date of each treatment, together with the first name of the professional who operated it.", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the date of each treatment, together with the first name of the professional who operated it.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the date of each treatment, together with the first name of the professional who operated it.. \nSELECT  SELECTED.breed_code,\n        SELECTED.size_code,\n        SELECTED.name,\n        SELECTED.age,\n        DATE_TRUNC('day', SELECTED.date_of_birth) AS date_of_birth,\n        SELECTED.gender,\n        SELECTED.weight,\n        DATE_TRUNC('day', SELECTED.date_arrived) AS date_arrived,\n        SELECTED.breed_code,\n        SELECTED.size_code,\n        SELECTED.name,\n        SELECTED.age,\n        DATE_TRUNC('day', SELECTED.date_of_birth) AS date_of_birth,\n        SELECTED.gender,\n        SELECTED.weight,\n        DATE_TRUNC('day', SELECTED.date_arrived) AS date_arrived,\n        SELECTED.breed_code,\n        SELECTED.size_code,\n        SELECTED.name,\n        SELECTED.age,\n        DATE_TRUNC('day', SELECTED.date_of_birth) AS date_of"}
{"question": "What are the date and the operating professional's first name of each treatment?", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the date and the operating professional's first name of each treatment?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the date and the operating professional's first name of each treatment?. \nSELECT  SELECT  SELECT  SELECT  SELECT \n\n### end dog_kennels\n\n### DB with pets by age\n### create pets_by_age table, with it's properties:\n#Age_Groups('age_group_code', 'age_group_description', 'age_group_name')\n#Breeds('breed_code', 'breed_name')\n### end pets by age\n\n### DB with pets by size\n### create pets_by_size table, with it's properties:\n#Size_Categories('size_code', 'size_description')\n#Breeds('breed_code', 'breed_name')\n### end pets by size\n\n### DB with pets by treatment type\n### create pets_by_treatment_type table, with it's properties:\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Breeds('breed_code', 'breed_name')\n### end pets by treatment type\n\n### DB with pets by"}
{"question": "List the cost of each treatment and the corresponding treatment type description.", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the cost of each treatment and the corresponding treatment type description.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the cost of each treatment and the corresponding treatment type description.. \nSELECT  SELECT treatment_id, description, cost_of_treatment FROM treatment;\nList all owners who have abandoned dogs...\nSELECT  SELECT owner_id FROM abandoned;\nList the breed codes and names of all of the dog breeds available...\nSELECT  SELECT breed_code, breed_name FROM breed;\nList all size codes and descriptions...\nSELECT  SELECT size_code, size_description FROM size;\nList all dog sizes available...\nSELECT  SELECT size_code, size_description FROM size WHERE size_description NOT LIKE '%x small%' AND size_description NOT LIKE '%small x%' AND size_description NOT LIKE '%small%' AND size_description NOT LIKE '%small x';\nList all treatment types and descriptions...\nSELECT  SELECT treatment_type_code, treatment_type_description FROM treatment_type;\nList all treatment type descriptions and costs...\nSELECT  SELECT treatment_type_code, description, cost_of_treatment FROM treatment_type;\nList all professional codes and descriptions...\nSELECT  SELECT professional_id, role_code FROM professional;\nList all professional roles and descriptions...\nSELECT  SELECT professional_id, role"}
{"question": "What are the cost and treatment type description of each treatment?", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the cost and treatment type description of each treatment?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the cost and treatment type description of each treatment?. \nSELECT  SELECT \nt.treatment_type_code,\nt.cost_of_treatment\nFROM   treatment_type t\nWHERE  t.treatment_type_code NOT IN (\n    SELECT  DISTINCT \n    a.treatment_type_code\n    FROM   treatment_type a\n    WHERE  a.treatment_type_code NOT IN ('\"INJECTABLES\",\"\"SURGERY\",\"\"ELECTROCUTION\",\"\"OTHER\")\n    GROUP BY a.treatment_type_code\n    HAVING COUNT(DISTINCT a.treatment_type_code) = 1\n    )\nGROUP BY \nt.treatment_type_code,\nt.cost_of_treatment\n;\n\nSELECT  t.treatment_type_code,\n    t.cost_of_treatment,\n    c.treatment_type_description\nFROM   treatment_type t\n    INNER JOIN  treatment_type_description c ON t.treatment_type_code = c.treatment_type_code\nWHERE  t"}
{"question": "List each owner's first name, last name, and the size of his for her dog.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList each owner's first name, last name, and the size of his for her dog.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList each owner's first name, last name, and the size of his for her dog.. \nSELECT  SELECT \n\nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT \nSELECT  SELECT"}
{"question": "What are each owner's first name, last name, and the size of their dog?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each owner's first name, last name, and the size of their dog?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each owner's first name, last name, and the size of their dog?. \nSELECT  SELECT  SELECT\nfirst_name, last_name, size\nFROM  dog_kennels\nWHERE owner_id = '2146681329'\nORDER BY  size\n\nWhat is the size of each kennel's dog? \nSELECT  size\nFROM  dog_kennels\nORDER BY  size\n\nWhat are the costs for the first 30 treatments for the first 20 dogs? \nSELECT  treatment_id, cost_of_treatment, dog_id\nFROM  dog_kennels\nORDER BY  treatment_id, dog_id\n\nWhat are the owners of the kennel that is 2146681329? \nSELECT  professional_id, role_code\nFROM  dog_kennels\nWHERE owner_id = '2146681329'\nORDER BY  role_code\n\nWhat is the owner's first name of the kennel that is 2146681329? \nSELECT  first_name\nFROM  dog_kennels\nWHERE owner_id ="}
{"question": "List pairs of the owner's first name and the dogs's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList pairs of the owner's first name and the dogs's name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList pairs of the owner's first name and the dogs's name.. \nSELECT  SELECT  SELECT\n    owner.first_name,\n    dog.name\nFROM    dog\nINNER JOIN owner ON owner.owner_id = dog.owner_id\nINNER JOIN breed ON breed.breed_id = dog.breed_id\nWHERE dog.owner_id = :owner_id\nORDER BY dog.owner_id, dog.name\n#SELECT  SELECT  SELECT  SELECT  SELECT\n    owner.first_name,\n    dog.name,\n    dog.owner_id,\n    breed.breed_name,\n    breed.breed_code\nFROM    dog\nINNER JOIN owner ON owner.owner_id = dog.owner_id\nINNER JOIN breed ON breed.breed_id = dog.breed_id\nWHERE dog.owner_id = :owner_id\nGROUP BY owner.first_name, dog.name, dog.owner_id, breed.breed_name, breed.breed_code\n#SELECT  SELECT  SELECT  SELECT\n    owner.first_name,\n    dog.name,\n    dog.owner_id,\n    breed"}
{"question": "What are each owner's first name and their dogs's name?", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each owner's first name and their dogs's name?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each owner's first name and their dogs's name?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nOWNER.first_name,\nDOG.name\nFROM OWNER\nINNER JOIN DOG\nON OWNER.owner_id = DOG.owner_id\nINNER JOIN DOG_KENNEL\nON DOG.dog_id = DOG_KENNEL.dog_id\nORDER BY OWNER.first_name\nWhat is the first name of the owner with id=1?. \nSELECT  first_name\nFROM OWNER\nWHERE owner_id = 1\nWhat is the name of the dog belonging to the owner with id=1?. \nSELECT  name\nFROM DOG\nWHERE owner_id = 1\nWhat is the age of the dog belonging to the owner with id=1?. \nSELECT  age\nFROM DOG\nWHERE owner_id = 1\nWhat is the date of birth of the dog belonging to the owner with id=1?. \nSELECT  date_of_birth\nFROM DOG\nWHERE owner_id = 1\nWhat is the gender of the dog belonging to the owner with id=1?. \nSELECT  gender\nFROM DOG"}
{"question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the names of the dogs of the rarest breed and the treatment dates of them.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the names of the dogs of the rarest breed and the treatment dates of them.. \nSELECT  SELECT \nbreeds.breed_name,\ntreatments.treatment_type_description,\ntreatments.treatment_type_code,\ntreatments.date_of_treatment,\ntreatments.cost_of_treatment\n\nFROM   treatments, breeds, dog_kennels\nWHERE   treatments.dog_id = dog_kennels.dog_id\nGROUP BY dog_kennels.breed_code, breeds.breed_name\nORDER BY breeds.breed_code\n\n\n\n"}
{"question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs are of the rarest breed? Show their names and treatment dates.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs are of the rarest breed? Show their names and treatment dates.. \nSELECT  SELECT \n`breeds`.`breed_name` AS `Prod1`,\n`breeds`.`breed_code` AS `Prod2`,\n`charges`.`charge_type` AS `Prod3`,\n`charges`.`charge_amount` AS `Prod4`,\n`charges`.`date_of_birth` AS `Prod5`,\n`charges`.`breed_code` AS `Prod6`,\n`charges`.`charge_type` AS `Prod7`,\n`charges`.`charge_amount` AS `Prod8`,\n`charges`.`date_of_treatment` AS `Prod9`,\n`charges`.`cost_of_treatment` AS `Prod10`,\n`charges`.`breed_code` AS `Prod11`,\n`charges`.`charge_type` AS `Prod12`,\n`charges`.`charge_amount` AS `Prod13`,\n`charges`.`date_of_treatment` AS `Prod14`,\n`charges`.`cost_of_treatment` AS `Prod15`,\n"}
{"question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.. \nSELECT  SELECT OWNERS.first_name, DOGS.name\nFROM OWNERS\nINNER JOIN DOGS\nON OWNERS.owner_id = DOGS.owner_id\nWHERE DOGS.owner_id = ?\nAND DOGS.state = ?\n(\n  SELECT OWNERS.first_name, DOGS.name\n  FROM OWNERS\n  INNER JOIN DOGS\n  ON OWNERS.owner_id = DOGS.owner_id\n  WHERE DOGS.owner_id = ?\n  AND DOGS.state = ?\n)\n\\end{code}\n\nAnswer: Your main problem is in the second SELECT.\n\n`INNER JOIN DOGS`\n\nis actually missing a table reference (DOGS), so you actually need this:\n\n`INNER JOIN DOGS ON OWNERS.owner_id = DOGS.owner_id`\n\nTry this:\n\n\\begin{code}\nSELECT OWNERS.first_name, DOGS.name\nFROM OWNERS\nINNER JOIN DOGS\nON OWNERS.owner_id = DOGS.owner"}
{"question": "Find the first names of owners living in Virginia and the names of dogs they own.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the first names of owners living in Virginia and the names of dogs they own.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the first names of owners living in Virginia and the names of dogs they own.. \nSELECT  SELECT first_name FROM owners WHERE state_code = 'VA' \nUNION\nSELECT  SELECT first_name FROM dogs WHERE owner_id = '123456789'\n# SELECT  SELECT first_name FROM owners WHERE owner_id = '123456789'\n# UNION\n# SELECT  SELECT first_name FROM dogs WHERE owner_id = '123456789'\n# # SELECT  SELECT first_name FROM dogs WHERE owner_id = '123456789'\n# # UNION\n# SELECT  SELECT first_name FROM dogs WHERE owner_id = '123456789'\n"}
{"question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the arriving date and the departing date of the dogs who have gone through a treatment?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the arriving date and the departing date of the dogs who have gone through a treatment?. \nSELECT  SELECT DISTINCT treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment FROM treatment;\n\n#######################################\n#Breed='breed_code', 'breed_name'\n#Owner='owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\n#Dog='dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\n#Professional='professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\n#Treatment='treatment_id', 'dog_id', '"}
{"question": "Find the arriving date and the departing date of the dogs that received a treatment.", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the arriving date and the departing date of the dogs that received a treatment.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the arriving date and the departing date of the dogs that received a treatment.. \nSELECT  SELECT \nDogs.owner_id, \nTreatments.dog_id, \nTreatments.professional_id, \nTreatments.treatment_type_code, \nTreatments.date_of_treatment, \nTreatments.cost_of_treatment, \nCASE\n    WHEN Treatments.treatment_type_code = 0 THEN 0\n    WHEN Treatments.treatment_type_code = 1 THEN 1\n    WHEN Treatments.treatment_type_code = 2 THEN 2\nEND as treatment_code, \nCASE\n    WHEN Treatments.treatment_type_code = 0 THEN 0\n    WHEN Treatments.treatment_type_code = 1 THEN 1\n    WHEN Treatments.treatment_type_code = 2 THEN 2\nEND as treatment_type, \nDATE_ADD(Treatments.date_of_treatment, INTERVAL 7 DAY) as departure_date, \nDATE_ADD(T"}
{"question": "List the last name of the owner owning the youngest dog.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the last name of the owner owning the youngest dog.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the last name of the owner owning the youngest dog.. \nSELECT  SELECT \n   Owners.last_name\nFROM   Dogs\n   JOIN Owners ON Owners.owner_id = Dogs.owner_id\n   WHERE Dogs.age = (SELECT \n                       MIN(Dogs.age)\n                     FROM   Dogs\n                     WHERE  Dogs.owner_id = Owners.owner_id)\nOrder by Dogs.age, Owners.last_name\n### end SQL\n# List the last name of the owner owning the youngest dog.. \n# SELECT  Owners.last_name\n# FROM   Dogs\n#   JOIN Owners ON Owners.owner_id = Dogs.owner_id\n#   WHERE Dogs.age = (SELECT \n#                       MIN(Dogs.age)\n#                     FROM   Dogs\n#                     WHERE  Dogs.owner_id = Owners.owner_id)\n# Order by Dogs.age, Owners.last_name\n\n#Print the query statement\nprint \"SELECT  SELECT  \"\nprint \"   Owners.last_name"}
{"question": "Who owns the youngest dog? Give me his or her last name.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWho owns the youngest dog? Give me his or her last name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWho owns the youngest dog? Give me his or her last name.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \n  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.. \nSELECT  SELECT professional_id, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number FROM professionals WHERE  (city LIKE '%Hawaii%' OR city LIKE '%Wisconsin%');\nList the email addresses of the professionals who live in the state of Illinois or the state of Michigan.. \nSELECT  SELECT professional_id, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number FROM professionals WHERE  (city LIKE '%Illinois%' OR city LIKE '%Michigan%');\n"}
{"question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?. \nSELECT  SELECT professionals.professional_id, professional_states.state_name, COUNT(professional_states.professional_id) as Professionals_In_State\nFROM professional_states\nINNER JOIN professional_states_professionals ON professional_states.state_id = professional_states_professionals.state_id\nINNER JOIN professionals ON professionals.professional_id = professional_states_professionals.professional_id\nGROUP BY professionals.professional_id, professional_states.state_name\nHAVING count(professional_states.professional_id) > 0\n\n##to answer the question what are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?\n\n\n\n##SELECT COUNT(professional_states_professionals.professional_id) as Professionals_In_State\n##FROM professional_states_professionals\n##INNER JOIN professional_states ON professional_states_professionals.state_id = professional_states.state_id\n##INNER JOIN professionals ON professionals.professional_id = professional_states_professionals"}
{"question": "What are the arriving date and the departing date of all the dogs?", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the arriving date and the departing date of all the dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the arriving date and the departing date of all the dogs?. \nSELECT  SELECT \n\tDATE_FORMAT(date_of_arrival, '%Y-%m-%d') as arriving_date,\n\tDATE_FORMAT(date_of_departure, '%Y-%m-%d') as departing_date\n\tFROM \n\tDog_kennels \n\tWHERE \n\tabandoned_yn=0 \n\tAND size_code IS NOT NULL \n\tAND charge_id IS NOT NULL \n\tAND owner_id IS NOT NULL \n\tGROUP BY \n\tdate_of_arrival, \n\tdate_of_departure \n\tORDER BY \n\tdate_of_arrival, \n\tdate_of_departure \n\tLIMIT 1000\n\"\"\"\n\nimport os\nimport sys\nimport sqlite3\nimport datetime\nimport calendar\nimport time\n\n\ndef Import(db):\n\tt = time.strftime(\"%Y-%m-%d\")\n\tf = open(os.path.join(db, \"DogKennels.csv\"), 'r')\n\tm = csv.DictReader(f)\n"}
{"question": "List the arrival date and the departure date for all the dogs.", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the arrival date and the departure date for all the dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the arrival date and the departure date for all the dogs.. \nSELECT  SELECT   dog_id, abandonded_yn, name, breed_code, size_code, date_of_birth, date_arrived, date_adopted, \n        date_departed, street, city, state, zip_code, last_name, first_name, owner_id, \n        email_address, home_phone, cell_number, professional_id, role_code, treatment_type_code, cost_of_treatment,\n        charge_id, charge_type, charge_amount,\n        treatment_id, date_of_treatment, dog_id,\n        charge_id, charge_type, charge_amount,\n        treatment_id, date_of_treatment, dog_id,\n        charge_id, charge_type, charge_amount,\n        treatment_id, date_of_treatment, dog_id,\n        treatment_id, date_of_treatment, dog_id,\n        treatment_id, date_of_treatment, dog_id\n        dog_kennels.dog_id, dog_ken"}
{"question": "How many dogs went through any treatments?", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs went through any treatments?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs went through any treatments?. \nSELECT  SELECT  SELECT  SELECT  SELECT \n  COUNT(Dog.id) AS \"NumOfDogsWithTreatments\" \n  FROM    Dog\n  INNER JOIN DogTreatment ON Dog.id = DogTreatment.dog_id\n  INNER JOIN Professional ON Professional.id = DogTreatment.professional_id\n  INNER JOIN Treatment ON Treatment.id = DogTreatment.treatment_id\n  WHERE   Treatment.treatment_type_code = 0\n    AND  Treatment.date_of_treatment < '08/10/2012'\n  GROUP BY  Dog.id\n#Select the dogs that went through at least 1 treatment\nSELECT  Dog.id,\n  COUNT(Treatment.id) AS \"NumOfDogsWithTreatments\"\n  FROM    Dog\n  INNER JOIN DogTreatment ON Dog.id = DogTreatment.dog_id\n  INNER JOIN Professional ON Professional.id = DogTreatment.professional_id\n  INNER JOIN Treatment ON Tre"}
{"question": "Count the number of dogs that went through a treatment.", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCount the number of dogs that went through a treatment.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCount the number of dogs that went through a treatment.. \nSELECT  SELECT COUNT(*) AS number_of_dogs_treated FROM dog_kennels WHERE treatment_type_code = 'spay';\nSELECT  SELECT COUNT(*) AS number_of_dogs_treated FROM dog_kennels WHERE treatment_type_code = 'neuter';\nSELECT  SELECT COUNT(*) AS number_of_dogs_treated FROM dog_kennels WHERE treatment_type_code = 'injection';\nSELECT  SELECT COUNT(*) AS number_of_dogs_treated FROM dog_kennels WHERE treatment_type_code = 'medication';\nSELECT  SELECT COUNT(*) AS number_of_dogs_treated FROM dog_kennels WHERE treatment_type_code = 'massage';\nSELECT  SELECT COUNT(*) AS number_of_dogs_treated FROM dog_kennels WHERE treatment_type_code = 'nail_trim';\nSELECT  SELECT COUNT(*) AS number_of_dogs_treated FROM dog_kennels WHERE treatment_type_code = 'bath';\nSELECT  SELECT COUNT(*) AS number_of_dogs_treated FROM dog_kennels WHERE treatment_type"}
{"question": "How many professionals have performed any treatment to dogs?", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many professionals have performed any treatment to dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many professionals have performed any treatment to dogs?. \nSELECT  SELECT count(*) \nFROM dog_kennels \nJOIN treatment ON dog_kennels.dog_id = treatment.dog_id \nJOIN professional ON professional.professional_id = treatment.professional_id \nGROUP BY dog_kennels.dog_id \nORDER BY dog_kennels.dog_id\nYou may find the output of this query somewhat scrambled, but you should recognize it as an array of tuples, each of which is a pair of dog ID and number of treatments that professional has performed. Note that this query is designed to answer a fairly simple question, but we know that there are many ways to express the same question in SQL. For instance, we could have asked for the total number of treatments performed to all dogs in the database. We could have asked for the total number of treatments performed to all dogs in a particular breed. We could have asked for the total number of treatments performed to all dogs by a particular professional.\nThe rest of the queries in this database let you explore the dogs, and all of their related data.\n#Dogs('dog_id', 'owner_id', 'abandoned_yn',"}
{"question": "Find the number of professionals who have ever treated dogs.", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of professionals who have ever treated dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of professionals who have ever treated dogs.. \nSELECT  SELECT COUNT(professional_id) FROM dog_treatment\nWHERE dog_id = 1 \n\n#This query gets a list of all the professionals who have treated dogs. \nSELECT  SELECT professional_id FROM dog_treatment \nWHERE dog_id = 1\n\n#This query gets a list of all the dogs that have been treated by each professional. \nSELECT  SELECT professional_id FROM dog_treatment \nWHERE dog_id = 1 \n\n#This query gets a list of all the professionals who have treated dogs. \nSELECT  SELECT professional_id FROM dog_treatment \nWHERE dog_id = 1 \n\n#This query gets a list of all the dogs that have been treated by each professional. \nSELECT  SELECT professional_id FROM dog_treatment \nWHERE dog_id = 1 \n\n#This query gets a list of all the dogs that have been treated by each professional. \nSELECT  SELECT professional_id FROM dog_treatment \nWHERE dog_id = 1 \n\n#This query gets a list of all the dogs that have been treated by each professional"}
{"question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals live in a city containing the substring 'West'? List his or her role, street, city and state.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals live in a city containing the substring 'West'? List his or her role, street, city and state.. \n}
{"question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the role, street, city and state of the professionals living in a city that contains the substring 'West'.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the role, street, city and state of the professionals living in a city that contains the substring 'West'.. \nSELECT  SELECT  SELECT  SELECT \n  u.role_code, u.first_name, u.street, u.city, u.state, u.zip_code, u.last_name, u.email_address, u.home_phone, u.cell_number, p.professional_id\n  FROM owners o\n  JOIN professionals p ON o.owner_id = p.owner_id\n  JOIN dog_kennels k ON o.owner_id = k.owner_id\n  JOIN breeds b ON k.breed_id = b.breed_id\n  WHERE k.dog_id = 1796\n  AND k.breed_id = 46\n  AND k.size_code = 2\n  AND k.abandoned_yn = 0\n  AND k.treatment_type_code = 0\n  AND k.treatment_type_code != 3\n  AND k.name LIKE 'West'\n  AND k.size_code LIKE 'West'\n  AND k.breed_id LIKE 'West'\n  ORDER BY p.professional"}
{"question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owners live in the state whose name contains the substring 'North'? List his first name, last name and email.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owners live in the state whose name contains the substring 'North'? List his first name, last name and email.. \nSELECT  SELECT DISTINCT Owners.owner_id, Owners.first_name, Owners.last_name, Owners.email_address \nFROM   Owners, Dogs\nWHERE  Owners.owner_id = Dogs.owner_id \nAND    Dogs.state IN ('Illinois', 'Michigan', 'Wisconsin')\nAND    Owners.first_name LIKE 'North%'\nAND    Owners.last_name LIKE 'North%'\nAND    Owners.email_address LIKE 'North%'\nGROUP BY Owners.owner_id, Owners.first_name, Owners.last_name, Owners.email_address\n\nWhich dogs live in the state whose name contains the substring 'North'? List his first name, last name and email.. \nSELECT  SELECT DISTINCT Dogs.dog_id, Owners.first_name, Owners.last_name, Owners.email_address \nFROM   Dogs, Owners\nWHERE  Dogs.owner_id = Owners.owner_id"}
{"question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nReturn the first name, last name and email of the owners living in a state whose name contains the substring 'North'.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nReturn the first name, last name and email of the owners living in a state whose name contains the substring 'North'.. \nSELECT  SELECT * FROM owners WHERE state IN (SELECT name FROM states WHERE substring(name, 0, 3) = 'North');\n\n# Returns the first name, last name and email of the owners living in a state whose name contains the substring 'South'.. \nSELECT  SELECT * FROM owners WHERE state IN (SELECT name FROM states WHERE substring(name, 0, 3) = 'South');\n\n# Returns the first name, last name and email of the owners living in a state whose name contains the substring 'East'.. \nSELECT  SELECT * FROM owners WHERE state IN (SELECT name FROM states WHERE substring(name, 0, 3) = 'East');\n\n# Returns the first name, last name and email of the owners living in a state whose name contains the substring 'West'.. \nSELECT  SELECT * FROM owners WHERE state IN (SELECT name FROM states WHERE substring(name, 0, 3) = 'West');\n\n# Returns the first name, last name and email of the owners living in a state whose name contains the substring 'Midwest'.. \nSELECT  SELECT * FROM owners WHERE"}
{"question": "How many dogs have an age below the average?", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs have an age below the average?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs have an age below the average?. \nSELECT  SELECT COUNT(AGE) FROM DOG_KENNELS WHERE AGE < AVG(AGE)\n\nHow many dogs have an age below the average for their breed?. \nSELECT  SELECT COUNT(AGE) FROM DOG_KENNELS WHERE AGE < AVG(AGE) AND BREED = \"Labrador Retriever\"\n\nFind and count all dogs that have been abandoned with a yn = n. \nSELECT  SELECT COUNT(ABANDONED_YN) FROM DOG_KENNELS WHERE ABANDONED_YN = 'N'\n\nFind and count all dogs that have not been abandoned. \nSELECT  SELECT COUNT(ABANDONED_YN) FROM DOG_KENNELS WHERE ABANDONED_YN = 'Y'\n\nFind and count all dogs that have been abandoned with a yn = n that are not under a professional's care. \nSELECT  SELECT COUNT(ABANDONED_YN) FROM DOG_KENNELS WHERE ABANDONED_YN = 'N' AND PROFESSIONAL_ID IS NULL\n\nFind and"}
{"question": "Count the number of dogs of an age below the average.", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCount the number of dogs of an age below the average.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCount the number of dogs of an age below the average.. \nSELECT  SELECT COUNT(*) AS 'Dogs in Age Group'\n        ,AVG(Age) AS 'Average Age'\n        ,SUM(Age) AS 'Total Age'\n        ,COUNT(*) AS 'Total Dogs'\nFROM Dogs\nWHERE Age < AVG(Age)\nGROUP BY Age\n\\end{code}\n\nI get the following error:\n\n\\begin{code}\nSQLiteException: no such column: Age: , while compiling: SELECT COUNT(*) AS 'Dogs in Age Group' ,AVG(Age) AS 'Average Age' ,SUM(Age) AS 'Total Age' ,COUNT(*) AS 'Total Dogs' FROM Dogs WHERE Age < AVG(Age) GROUP BY Age\n\\end{code}\n\nThe Age column has data in it.  I've added the column using ALTER TABLE Dogs ADD COLUMN Age INTEGER NOT NULL; and then updated the table.  I've tried adding the column to the SELECT statement as well, to no avail.  The table has no foreign key relationships.\n\nComment: Have you tried to manually delete and recreate the table?\n\nComment: It works for me. What'"}
{"question": "How much does the most recent treatment cost?", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does the most recent treatment cost?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does the most recent treatment cost?. \nSELECT  SELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT \nSELECT SQLITE_TEXT"}
{"question": "Show me the cost of the most recently performed treatment.", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nShow me the cost of the most recently performed treatment.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nShow me the cost of the most recently performed treatment.. \nSELECT  SELECT Treatment_Types.treatment_type_code\nFROM     Treatment_Types\nWHERE    Treatment_Types.treatment_type_code = 'Cosmetic Surgery'\nORDER BY  Treatment_Types.treatment_type_id\n\nSELECT  SELECT  Treatment_Types.treatment_type_code\nFROM     Treatment_Types\nORDER BY  Treatment_Types.treatment_type_id\n\nSELECT  SELECT  Treatment_Types.treatment_type_code\nFROM     Treatment_Types\nWHERE    Treatment_Types.treatment_type_code = 'Medical Treatment'\nORDER BY  Treatment_Types.treatment_type_id\n\nSELECT  SELECT  Treatment_Types.treatment_type_code\nFROM     Treatment_Types\nWHERE    Treatment_Types.treatment_type_code = 'Surgical Treatment'\nORDER BY  Treatment_Types.treatment_type_id\n\nSELECT  SELECT  Treatment_Types"}
{"question": "How many dogs have not gone through any treatment?", "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs have not gone through any treatment?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs have not gone through any treatment?. \nSELECT  SELECT COUNT(*) FROM dog_treatments WHERE dog_id is null GROUP BY treatment_id\nWhat is the average size of dogs treated?.\nSELECT  SELECT AVG(size) FROM dog_treatments GROUP BY treatment_id\nWhat is the average age of dogs treated?.\nSELECT  SELECT AVG(age) FROM dog_treatments GROUP BY treatment_id\nHow many dogs are of a particular breed?.\nSELECT  SELECT COUNT(*) FROM dog_breeds GROUP BY breed_code\nHow many dogs are treated for a particular breed?.\nSELECT  SELECT COUNT(*) FROM dog_treatments WHERE breed_code is ? GROUP BY treatment_id\nHow many dogs are treated for a particular size?.\nSELECT  SELECT COUNT(*) FROM dog_treatments WHERE size_code is ? GROUP BY treatment_id\nHow many dogs have been abandoned?.\nSELECT  SELECT COUNT(*) FROM dog_treatments WHERE abandoned_yn is ? GROUP BY treatment_id\nHow many dogs have been charged?.\nSELECT  SELECT COUNT(*) FROM dog_treatments WHERE charge_id is ? GROUP BY treatment_id\nHow many dogs are currently waiting to be treated?.\nSELECT  SELECT COUNT(*)"}
{"question": "Tell me the number of dogs that have not received any treatment .", "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the number of dogs that have not received any treatment .. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the number of dogs that have not received any treatment .. \nSELECT  SELECT count(*) AS 'num_no_treatments'\nFROM   dog_kennels\nWHERE  NOT EXISTS (SELECT *\n                   FROM   treatments\n                   WHERE  dog_id = kennels.dog_id)\n\nThis query returns the number of dogs in the dog_kennels table that do not have a treatment record:\n\n#Tell me the number of dogs that have not received any treatment .. \nSELECT  SELECT count(*) AS 'num_no_treatments'\nFROM   dog_kennels\nWHERE  NOT EXISTS (SELECT *\n                   FROM   treatments\n                   WHERE  dog_id = kennels.dog_id)\n"}
{"question": "How many owners temporarily do not have any dogs?", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many owners temporarily do not have any dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many owners temporarily do not have any dogs?. \nSELECT  SELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT \nSELECT "}
{"question": "Find the number of owners who do not own any dogs at this moment.", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of owners who do not own any dogs at this moment.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of owners who do not own any dogs at this moment.. \n}
{"question": "How many professionals did not operate any treatment on dogs?", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many professionals did not operate any treatment on dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many professionals did not operate any treatment on dogs?. \nSELECT  SELECT COUNT(professional_id) AS count FROM professionals GROUP BY professional_id\n\n"}
{"question": "Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of professionals who have not treated any dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of professionals who have not treated any dogs.. \nSELECT  SELECT COUNT(*) FROM PROFESSIONALS WHERE ROLE_CODE='P' AND DATE_OF_TREATMENT IS NULL AND NOT EXISTS (SELECT 1 FROM DOGS WHERE PROFESSIONAL_ID=dog_id)\nFind the number of dogs abandoned by an owner and the owner's full name. \nSELECT  SELECT COUNT(*) FROM DOGS WHERE ABANDONED_YN='Y' AND OWNER_ID=owner_id\nSELECT  SELECT CONCAT_WS(' ', first_name, last_name) FROM OWNERS WHERE OWNER_ID=owner_id\nFind the number of treatments that cost less than $100. \nSELECT  SELECT COUNT(*) FROM TREATMENTS WHERE DATE_OF_TREATMENT BETWEEN '2015-01-01' AND '2015-01-31' AND COST_OF_TREATMENT < 100\nFind the number of dogs who have not been treated. \nSELECT  SELECT COUNT(*) FROM DOGS WHERE NOT EXISTS (SELECT 1 FROM DOGS WHERE DOG_ID=dog_id AND DATE"}
{"question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.. \nSELECT  SELECT * FROM dogs WHERE abandoned_yn = 1 AND age > 6 AND weight < 100 ORDER BY name, date_of_birth;\n\n### the following SQL queries will be used for the front end of the app\n#SELECT * FROM dogs;\n#SELECT * FROM professionals;\n#SELECT * FROM treatment_types;\n\n### Create the database\nDROP DATABASE IF EXISTS dogs;\nCREATE DATABASE dogs;\nUSE dogs;\n\n### Create the table for dogs\nCREATE TABLE dogs (\n\tdog_id INTEGER NOT NULL AUTO_INCREMENT,\n\towner_id INTEGER,\n\tabandoned_yn INTEGER,\n\tbreed_code INTEGER,\n\tsize_code INTEGER,\n\tname VARCHAR(255),\n\tage INTEGER,\n\tdate_of_birth DATE,\n\tgender INTEGER,\n\tweight INTEGER,\n\tdate_arrived DATE,\n\tdate_adopted DATE,\n\tdate_departed DATE,\n\tPRIMARY KEY (dog_id)\n);\n\n### Create the"}
{"question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.. \nSELECT  SELECT  SELECT \n    a.breed_code, b.breed_name\n    a.size_code, b.size_description\n    a.treatment_type_code, b.treatment_type_description\n    a.owner_id, b.first_name, b.last_name\n    a.dog_id, b.owner_id, a.abandoned_yn, a.breed_code, a.size_code, a.name, a.age, a.date_of_birth, a.gender, a.weight, a.date_arrived, a.date_adopted, a.date_departed\nFROM dogs\nJOIN owners ON owners.owner_id = dogs.owner_id\nWHERE dogs.abandoned_yn = 0\nGROUP BY breed_code, size_code, treatment_type_code, owner_id, dog_id\n\n#Select the age, breed code, size code and name of the dogs that were abandoned\nSELECT  SELECT  SELECT \n    a.breed_code, b.breed_name\n"}
{"question": "What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the average age of all the dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the average age of all the dogs?. \nSELECT  SELECT COUNT(1) FROM dog_kennels GROUP BY (SELECT AVG(age) FROM dog_kennels)\nWhat is the average cost of treatment?\nSELECT AVG(cost_of_treatment) FROM treatments GROUP BY (SELECT AVG(cost_of_treatment) FROM treatments)\nThe average cost of a visit to the kennel is $10.00. \nSELECT  AVG(charge_amount) FROM charges GROUP BY (SELECT AVG(charge_amount) FROM charges)\nHow many dogs are owned by Michael?\nSELECT  COUNT(1) FROM owners WHERE owner_id = 1\nSELECT  COUNT(1) FROM owners WHERE owner_id = 1 GROUP BY (SELECT COUNT(1) FROM owners WHERE owner_id = 1)\nHow many dogs of Michael are abandoned?\nSELECT  COUNT(1) FROM dogs WHERE owner_id = 1 AND abandoned_yn = 'Y'\nSELECT  COUNT(1) FROM dogs WHERE owner_id = 1 AND abandoned_yn = 'Y' GROUP BY (SELECT COUNT(1) FROM dogs WHERE owner_id = 1 AND abandoned_"}
{"question": "Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCompute the average age of all the dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCompute the average age of all the dogs.. \nSELECT  SELECT AVG(age) as avg_age, date_of_birth,\n       dog_id\nFROM   Dogs\nGROUP BY dog_id, date_of_birth;\nSELECT  SELECT AVG(age) as avg_age, date_of_birth,\n       dog_id\nFROM   Dogs\nGROUP BY dog_id, date_of_birth;\nSELECT  SELECT AVG(age) as avg_age, date_of_birth,\n       dog_id\nFROM   Dogs\nGROUP BY dog_id, date_of_birth;\nSELECT  SELECT AVG(age) as avg_age, date_of_birth,\n       dog_id\nFROM   Dogs\nGROUP BY dog_id, date_of_birth;\nSELECT  SELECT AVG(age) as avg_age, date_of_birth,\n       dog_id\nFROM   Dogs\nGROUP BY dog_id, date_of_birth;\nSELECT  SELECT AVG(age) as avg_age, date_of_birth,\n       dog_id\nFROM  "}
{"question": "What is the age of the oldest dog?", "sql": "SELECT max(age) FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the age of the oldest dog?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the age of the oldest dog?. \nSELECT  SELECT \n\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the age of the oldest dog.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the age of the oldest dog.. \nSELECT  SELECT DISTINCT MAX(age) FROM dog_kennels;\n\n#\n\nTell me the average number of dogs per kennel.. \nSELECT  SELECT AVG(dogs) FROM dog_kennels;\n\n#\n\nTell me the average cost of a treatment.. \nSELECT  SELECT AVG(cost_of_treatment) FROM dog_kennels;\n\n#\n\nTell me the average cost of a dog.. \nSELECT  SELECT AVG(cost) FROM dog_kennels;\n\n#\n\nTell me the average cost of a charge.. \nSELECT  SELECT AVG(charge_amount) FROM dog_kennels;\n\n#\n\nTell me the average cost of a treatments.. \nSELECT  SELECT AVG(cost_of_treatment) FROM dog_kennels;\n\n#\n\nTell me the number of dogs in the kennel with the largest number of dogs.. \nSELECT  SELECT MAX(dogs) FROM dog_kennels;\n\n#\n\nTell me the number of dogs in the kennel with the largest charge.."}
{"question": "How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does each charge type costs? List both charge type and amount.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does each charge type costs? List both charge type and amount.. \nSELECT  SELECT\n    CHARGES.CHG_ID,\n    CHARGES.CHG_TYPE,\n    CHARGES.CHG_AMOUNT\nFROM\n    CHarges\n    WHERE CHARGES.CHG_TYPE = '1'\n    AND CHARGES.CHG_AMOUNT = '10.00'\n    ;\n#\nSELECT  SELECT\n    CHARGES.CHG_ID,\n    CHARGES.CHG_TYPE,\n    CHARGES.CHG_AMOUNT\nFROM\n    CHARGES\n    WHERE CHARGES.CHG_TYPE = '2'\n    AND CHARGES.CHG_AMOUNT = '10.00'\n    ;\n#\nSELECT  SELECT\n    CHARGES.CHG_ID,\n    CHARGES.CHG_TYPE,\n    CHARGES.CHG_AMOUNT\nFROM\n    CHARGES\n    WHERE CHARGES.CHG_TYPE = '3'\n    AND CHARGES.CHG_AMOUNT = '10.00'\n    ;\n#\nSELECT"}
{"question": "List each charge type and its amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList each charge type and its amount.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList each charge type and its amount.. \nSELECT  SELECT charge_type, charge_amount \nFROM    dog_kennels\nGROUP BY charge_type;\nSELECT  SELECT size_code, size_description \nFROM    dog_kennels\nGROUP BY size_code;\nSELECT  SELECT treatment_type_code, treatment_type_description \nFROM    dog_kennels\nGROUP BY treatment_type_code;\nSELECT  SELECT breed_code, breed_name \nFROM    breeds\nGROUP BY breed_code;\nSELECT  SELECT charge_id, charge_type, charge_amount \nFROM    dog_kennels\nGROUP BY charge_id;\nSELECT  SELECT owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number \nFROM    dog_kennels\nGROUP BY owner_id;\nSELECT  SELECT dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed \nFROM    dog"}
{"question": "How much does the most expensive charge type costs?", "sql": "SELECT max(charge_amount) FROM Charges", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does the most expensive charge type costs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does the most expensive charge type costs?. \nSELECT  SELECT  \n  ( SELECT  \n     MAX(charges.charge_amount) AS \"Maximum Cost\" \n   FROM  \n     charges \n   WHERE \n     charges.charge_type_code = '1' \n     AND charges.date_of_treatment = CURRENT_DATE \n     AND charges.treatment_type_code = '0' \n   ) AS \"Expensive\" \n  , \n  ( SELECT  \n     MAX(charges.charge_amount) AS \"Maximum Cost\" \n   FROM  \n     charges \n   WHERE \n     charges.charge_type_code = '1' \n     AND charges.date_of_treatment = CURRENT_DATE \n     AND charges.treatment_type_code = '0' \n   ) AS \"Costly\" \n   , \n  ( SELECT  \n     MAX(charges.charge_amount) AS \"Maximum Cost\" \n   FROM  \n     charges \n   WHERE \n     charges.charge_type_code = '1' \n     AND charges.date_of_tre"}
{"question": "What is the charge amount of the most expensive charge type?", "sql": "SELECT max(charge_amount) FROM Charges", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the charge amount of the most expensive charge type?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the charge amount of the most expensive charge type?. \nSELECT  SELECT MAX(charge_amount) FROM Charges WHERE charge_type = \"Establishment\"\n\nWhat is the name of the breed that has the greatest number of sizes available?. \nSELECT  SELECT BreedName FROM Breeds WHERE size_code = \"Large\"\n\nWhat is the name of the breed that has the fewest sizes available?. \nSELECT  SELECT BreedName FROM Breeds WHERE size_code = \"Extra-Extra-Extra-Small\"\n\nWhat is the age of the oldest dog?. \nSELECT  SELECT DOB FROM Dogs WHERE DOB >= 151016000000000000\n\nWhat is the name of the largest breed in the database?. \nSELECT  SELECT BreedName FROM Breeds WHERE size_code = \"Large\"\n\nWhat is the name of the smallest breed in the database?. \nSELECT  SELECT BreedName FROM Breeds WHERE size_code = \"Extra-Extra-Extra-Small\"\n\nWhat is the name of the dog with the biggest age?. \nSELECT  SELECT DogName FROM Dogs WHERE DOB >= 151"}
{"question": "List the email, cell phone and home phone of all the professionals.", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the email, cell phone and home phone of all the professionals.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the email, cell phone and home phone of all the professionals.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What are the email, cell phone and home phone of each professional?", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the email, cell phone and home phone of each professional?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the email, cell phone and home phone of each professional?. \nSELECT  SELECT DISTINCT\nPROFESSIONAL_ID,\nFIRST_NAME,\nSTREET,\nCITY,\nSTATE,\nzip_code,\nLAST_NAME,\nEMAIL_ADDRESS,\nHOME_PHONE,\nCELL_NUMBER\nFROM Professionals\nWHERE OWNER_ID=?\nAND TREATMENT_TYPE_CODE = ?\nAND PROFESSIONAL_ID != ?\n;\n\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number', 'treatment_type_code')\n#What are the email, cell phone and home phone of each professional?. \nSELECT  SELECT DISTINCT\nPROFESSIONAL_ID,\nFIRST_NAME,\nSTREET,\nCITY,\nSTATE,\nzip_code,\nLAST_NAME,\nEMAIL_ADDRESS,\nHOME_PHONE,\nCELL_NUMBER,\nTREATMENT_TYPE_CODE\nFROM Prof"}
{"question": "What are all the possible breed type and size type combinations?", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are all the possible breed type and size type combinations?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are all the possible breed type and size type combinations?. \n}
{"question": "Find the distinct breed type and size type combinations for dogs.", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the distinct breed type and size type combinations for dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the distinct breed type and size type combinations for dogs.. \nSELECT  SELECT  distinct breed_type, size_type FROM dog_kennels\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "List the first name of all the professionals along with the description of the treatment they have done.", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the first name of all the professionals along with the description of the treatment they have done.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the first name of all the professionals along with the description of the treatment they have done.. \nSELECT  SELECT professionals.first_name, treatment_types.description\nFROM professionals\nJOIN treatments\nON professionals.professional_id = treatments.professional_id\nJOIN treatment_types\nON treatments.treatment_type_code = treatment_types.treatment_type_code\nWHERE treatments.date_of_treatment < '2014-01-01';\nList the professionals that have done more than one treatment.. \nSELECT  SELECT professionals.first_name, treatment_types.description, COUNT(treatments.date_of_treatment) as count\nFROM professionals\nJOIN treatments\nON professionals.professional_id = treatments.professional_id\nJOIN treatment_types\nON treatments.treatment_type_code = treatment_types.treatment_type_code\nWHERE treatments.date_of_treatment < '2014-01-01'\nGROUP BY professionals.professional_id, treatment_types.description\nORDER BY count DESC;\n\n#\n\n##SQLite Table Dog Kennels:"}
{"question": "What are each professional's first name and description of the treatment they have performed?", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each professional's first name and description of the treatment they have performed?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each professional's first name and description of the treatment they have performed?. \nSELECT  SELECT * FROM dog_kennels WHERE professional_id='3' and dog_id='100';\n#What is the name of each dog and its age? \nSELECT  SELECT * FROM dog_kennels WHERE owner_id='2' and dog_id='100';\n#What is each dog's size? \nSELECT  SELECT * FROM dog_kennels WHERE size_code='2';\n#What are the charges each dog is subject to? \nSELECT  SELECT * FROM dog_kennels WHERE charge_id='2' and dog_id='100';\n#What is each dog's weight? \nSELECT  SELECT * FROM dog_kennels WHERE size_code='4';\n#What is each dog's name? \nSELECT  SELECT * FROM dog_kennels WHERE size_code='6';\n#What are the breeds each dog is subject to? \nSELECT  SELECT * FROM dog_kennels WHERE breed_code='2' and dog_id='100';\n#What are the treatment types each dog is subject to? \nSELECT  SELECT * FROM dog_ken"}
{"question": "How many singers are there?", "sql": "SELECT count(*) FROM singer", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nHow many singers are there?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nHow many singers are there?. \nSELECT  SELECT COUNT(*) FROM singer;\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\n\n\n#What is the song's name with the highest sales?.\n#SELECT  SELECT TOP 1 Title FROM song ORDER BY Sales DESC;\n#\n#What are the names of the singers for the top 5 songs?.\n#SELECT  SELECT DISTINCT Singer_ID FROM song ORDER BY Sales DESC;\n\n\n#What are the names of the singers for the top 5 songs?.\n#SELECT  SELECT DISTINCT Singer_ID FROM song ORDER BY Sales DESC;\n\n\n#What is the name of the singer with the highest net worth?. \n#SELECT  SELECT Name FROM singer WHERE Net_Worth_Millions > 1000000;\n\n\n#What are the names of the singers for the top 5 songs?. \n#SELECT  SELECT DISTINCT Singer_ID FROM song ORDER"}
{"question": "What is the count of singers?", "sql": "SELECT count(*) FROM singer", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the count of singers?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the count of singers?. \nSELECT  SELECT COUNT(*) FROM singers;\n100\nWhat is the count of songs?\nSELECT COUNT(*) FROM songs;\n999\nWhat is the birth year of the singer whose id is 1?\nSELECT birth_year FROM singers WHERE Singer_ID=1;\n2001\nWhat is the birth year of the singer whose id is 3?\nSELECT birth_year FROM singers WHERE Singer_ID=3;\n2004\nWhat is the birth year of the singer whose id is 5?\nSELECT birth_year FROM singers WHERE Singer_ID=5;\n1969\nWhat is the birth year of the singer whose id is 6?\nSELECT birth_year FROM singers WHERE Singer_ID=6;\n1957\nWhat is the birth year of the singer whose id is 9?\nSELECT birth_year FROM singers WHERE Singer_ID=9;\n1973\nWhat is the birth year of the singer whose id is 10?\nSELECT birth_year FROM singers WHERE Singer_ID=10;\n1980\nWhat is the birth year of the singer"}
{"question": "List the name of singers in ascending order of net worth.", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers in ascending order of net worth.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers in ascending order of net worth.. \nSELECT  SELECTS  #singer(\"s_id\",\"name\", \"birth_year\",\"net_worth_millions\",\"citizenship\") FROM (\nSELECT #song(\"s_id\",\"title\", \"#s_id\",\"sales\",\"highest_position\") FROM (\nSELECT SONG_ID, TITLE, SINGER_ID, SALES, HIGHEST_POSITION FROM SONG\n\nSELECT SINGER_ID, NAME, BIRTH_YEAR, NET_WORTH_MILLIONS, CITIZENSHIP FROM SINGER\n\n)\n#order by net_worth_millions desc\n\n)\n\n"}
{"question": "What are the names of singers ordered by ascending net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of singers ordered by ascending net worth?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of singers ordered by ascending net worth?. \nSELECT  SELECT_FUNCTION('Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship') \nSELECT  SELECT_FUNCTION('Title', 'Singer_ID', 'Sales', 'Highest_Position')\n\n## Create a function to select 'Singer_ID' from the 'singer' table.\ndef SELECT_FUNCTION(prop_name, prop_table, prop_column, prop_function):\n    return  SELECT_FUNCTION_GENERATOR(prop_name, prop_table, prop_column, prop_function)\n\n## Define a function to select 'Singer_ID' from the 'singer' table with a 'sales' filter.\ndef SELECT_FUNCTION_SALES(prop_name, prop_table, prop_column, prop_function):\n    def SELECT_FUNCTION_GENERATOR(prop_name, prop_table, prop_column, prop_function):\n        return SELECT_FUNCTION_GENERATOR_SALES(prop_name, prop_table, prop_column, prop_function)\n\n        ## Define a function to select '"}
{"question": "What are the birth year and citizenship of singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the birth year and citizenship of singers?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the birth year and citizenship of singers?. \nSELECT  SELECT  SELECT  SELECT \nBirth_Year, Citizenship FROM singers WHERE Name LIKE 'Lionel%'\nSELECT  SELECT  SELECT  SELECT \nBirth_Year, Citizenship FROM singers WHERE Name LIKE 'Barry%'\nWhat is the highest position of songs sung by singers with a birth year in 1940? \nSELECT  SELECT  SELECT  SELECT \nSong_ID, Highest_Position FROM songs WHERE Singer_ID IN (SELECT  Singer_ID FROM singers WHERE Birth_Year = '1940') ORDER BY Highest_Position DESC\nSELECT  SELECT  SELECT  SELECT \nSinger_ID, Net_Worth_Millions FROM singers WHERE Name LIKE 'Frank%'\n\n#results:\n#Singers\n#----------------------------------------------------------------------------------------------------------------------------------\n#Name      Birth_Year   Citizenship    Net_Worth_Millions\n#----------------------------------------------------------------------------------------------------------------------------------\n#Barry   1942        American         400\n#Lionel  1942        American         1100\n#Frank"}
{"question": "What are the birth years and citizenships of the singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the birth years and citizenships of the singers?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the birth years and citizenships of the singers?. \nSELECT  SELECT Singer_ID, Birth_Year, Citizenship\nFROM    singer\nWHERE   Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 1000000);\n\n#What are the birth years and citizenships of the people with a net worth of 500000?\nSELECT  SELECT Singer_ID, Birth_Year, Citizenship\nFROM    singer\nWHERE   Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 500000);\n\n#What are the birth years and citizenships of the singers that have a birth year of 1970?\nSELECT  SELECT Singer_ID, Birth_Year, Citizenship\nFROM    singer\nWHERE   Singer_ID IN (SELECT Singer_ID FROM song WHERE Birth_Year = '1970');\n\n#What are the birth years and citizenships of the people with a birth year of 1970 and a net worth of 500000?\nSELECT  SELECT Singer_ID, Birth_Year, Citizenship\nFROM"}
{"question": "List the name of singers whose citizenship is not \"France\".", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers whose citizenship is not \"France\".. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers whose citizenship is not \"France\".. \nSELECT  SELECT singer.Name\nFROM      singer\nWHERE     singer.Citizenship <> \"France\"\n### Give me an example for how to use a join statement..\n#Example for join statement\n#SELECT  FROM artist\n#    JOIN song ON artist.Singer_ID = song.Singer_ID\n#    JOIN record ON song.Song_ID = record.Song_ID\n#WHERE     artist.Birth_Year = \"1980\"\n### For an example of how to use a sub-query, please see the code below\n#sub_query = (SELECT  FROM artist\n#    JOIN song ON artist.Singer_ID = song.Singer_ID\n#    JOIN record ON song.Song_ID = record.Song_ID\n#WHERE     artist.Birth_Year = \"1980\"\n#    AND artist.Citizenship = \"US\"\n### How to use the sub-query to filter the results...\n#This will only return the artists whose birth year is 1980, and are citizens of the United States\n#SELECT *\n#    FROM artist\n#   "}
{"question": "What are the names of the singers who are not French citizens?", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers who are not French citizens?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers who are not French citizens?. \nSELECT  SELECT  SELECT  SELECT\ns.Name, s.Birth_Year, s.Net_Worth_Millions, s.Citizenship, \nt.Title, t.Singer_ID, t.Sales, t.Highest_Position\nFROM singer s, song t\nWHERE s.Citizenship = 'False'\n#+  WHERE t.Highest_Position = 1\n#+  AND t.Singer_ID = s.Singer_ID\n#+  AND t.Title = 'Yesterday'\n#+  AND t.Sales > 1\n#+  AND t.Highest_Position = 1\n#+  AND t.Singer_ID = s.Singer_ID\n#+  AND t.Title = 'Yesterday'\n#+  AND t.Sales > 1\n#+  AND t.Highest_Position = 1\n#+  AND t.Singer_ID = s.Singer_ID\n#+  AND t.Title = 'Yesterday'\n#+  AND t.Sales > 1\n#+  AND t."}
{"question": "Show the name of singers whose birth year is either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the name of singers whose birth year is either 1948 or 1949?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the name of singers whose birth year is either 1948 or 1949?. \nSELECT  SELECT * FROM singer WHERE birth_year IN (1948, 1949)\nShow the name of the singers whose birth year is 1948 and their birth month. \nSELECT  SELECT * FROM singer WHERE birth_year = 1948 AND month = '01'\nShow the name of the singers whose birth year is 1948 and their birth month is 1. \nSELECT  SELECT * FROM singer WHERE birth_year = 1948 AND month = 1\nShow the name of the singers whose birth year is 1948 and their birth month is January. \nSELECT  SELECT * FROM singer WHERE birth_year = 1948 AND month = '01'\nShow the name of the singers whose birth year is 1948 and their birth month is Jan. \nSELECT  SELECT * FROM singer WHERE birth_year = 1948 AND month = 1\n\n\nShow the name of the singers whose birth year is 1949 and their birth month is Jan. \nSELECT  SELECT * FROM singer WHERE birth_year = 1949 AND"}
{"question": "What are the names of the singers whose birth years are either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers whose birth years are either 1948 or 1949?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers whose birth years are either 1948 or 1949?. \nSELECT  SELECT \n  COUNT(s.Singer_ID) AS Frequency\n  FROM    Singer s\n  INNER JOIN Singer t\n    ON t.Singer_ID = s.Singer_ID\n  GROUP BY t.Singer_ID;\n# SELECT  COUNT(s.Singer_ID) AS Frequency, t.Singer_ID\n#   FROM Singer s\n#   INNER JOIN Singer t\n#     ON t.Singer_ID = s.Singer_ID\n#   GROUP BY t.Singer_ID\n#   HAVING Frequency >= 2;\n\nSELECT  SELECT \n  SUM(t.Singer_ID) AS Frequency\n  FROM Singer s\n  INNER JOIN Singer t\n    ON t.Singer_ID = s.Singer_ID\n  GROUP BY t.Singer_ID;\n\n# SELECT  SUM(s.Singer_ID) AS Frequency\n#   FROM Singer s\n#   INNER JOIN Singer t\n#     ON t.Singer_ID = s.Singer_ID\n#   GROUP BY t.Singer_ID\n#"}
{"question": "What is the name of the singer with the largest net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the name of the singer with the largest net worth?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the name of the singer with the largest net worth?. \nSELECT  SELECT\n  S.Singer_ID, S.Name, S.Birth_Year, SUM(S.Net_Worth_Millions) AS Net_Worth, \n  COUNT(S.Singer_ID) AS Total_Songs \n  FROM Singer S\n  GROUP BY S.Singer_ID, S.Name, S.Birth_Year;\n\nWhat is the name of the singer with the highest sales?. \nSELECT  SELECT\n  S.Singer_ID, S.Name, S.Birth_Year, SUM(S.Sales) AS Sales, \n  COUNT(S.Singer_ID) AS Total_Songs \n  FROM Singer S\n  GROUP BY S.Singer_ID, S.Name, S.Birth_Year;\n\nWhat is the name of the singer with the highest number of songs?. \nSELECT  SELECT\n  S.Singer_ID, S.Name, S.Birth_Year, SUM(S.Sales) AS Sales, \n  COUNT(S.Singer_ID) AS Total_Songs \n  FROM Singer S\n "}
{"question": "What is the name of the singer who is worth the most?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the name of the singer who is worth the most?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the name of the singer who is worth the most?. \nSELECT  SELECT singer.Name, \n        singer.Birth_Year, \n        singer.Net_Worth_Millions, \n        singer.Citizenship, \n        song.Sales, \n        song.Highest_Position \nFROM    singer \nJOIN    song \n        ON singer.Singer_ID = song.Singer_ID\nWHERE   song.Sales = (SELECT MAX(song.Sales) FROM song);\n\nWhat is the highest position any of the artists on this list has reached?. \nSELECT  SELECT song.Highest_Position, \n        song.Sales, \n        song.Title \nFROM    song \nJOIN    singer \n        ON song.Singer_ID = singer.Singer_ID\nWHERE   singer.Highest_Position = song.Highest_Position;\n\nWhat are the highest sales of all the songs by these artists?. \nSELECT  SELECT song.Highest_Position, \n        song.Sales, \n        song.Title \nFROM    song \nJOIN    singer \n        ON song.Singer_ID = singer."}
{"question": "Show different citizenship of singers and the number of singers of each citizenship.", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow different citizenship of singers and the number of singers of each citizenship.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow different citizenship of singers and the number of singers of each citizenship.. \nSELECT  SELECT COUNT(*) AS 'Count', 'Singer_ID', 'Name' FROM 'Singer'\nGROUP BY 'Singer_ID', 'Name'\nORDER BY 'Singer_ID', 'Name'\n\n#-----------------------------------------------------------------------------\n## SQLite SQL alphabetical singer list, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow alphabetical singer list with their properties.. \nSELECT  SELECT COUNT(*) AS 'Count', 'Singer_ID', 'Name' FROM 'Singer'\nGROUP BY 'Singer_ID', 'Name'\nORDER BY 'Singer_ID', 'Name'\n\n#--------------------------------"}
{"question": "For each citizenship, how many singers are from that country?", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each citizenship, how many singers are from that country?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each citizenship, how many singers are from that country?. \nSELECT  SELECT Song_ID, Title, Singer_ID, Sales, Highest_Position,\n    CASE WHEN Citizenship = 'Citizenship_1' THEN 1 ELSE 0 END AS country_1,\n    CASE WHEN Citizenship = 'Citizenship_2' THEN 1 ELSE 0 END AS country_2,\n    CASE WHEN Citizenship = 'Citizenship_3' THEN 1 ELSE 0 END AS country_3\nFROM Songs\nWHERE Singer_ID IN (SELECT Singer_ID FROM Singers WHERE Citizenship = 'Citizenship_1');\n\n# SELECT Song_ID, Title, Singer_ID, Sales, Highest_Position,\n#     CASE WHEN Citizenship = 'Citizenship_1' THEN 1 ELSE 0 END AS country_1,\n#     CASE WHEN Citizenship = 'Citizenship_2' THEN 1 ELSE 0 END AS country_2,\n#     CASE WHEN Citizenship = 'Citizenship_3' THEN 1 ELSE 0 END AS country_3\n"}
{"question": "Please show the most common citizenship of singers.", "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nPlease show the most common citizenship of singers.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nPlease show the most common citizenship of singers.. \nSELECT  SELECT  SELECT\n  DISTINCT Singer_ID, Singer_Name, Birth_Year, Net_Worth_Millions, Citizenship,\n  COUNT(Singer_ID) AS common\n  FROM   Singer_Table\n  GROUP  BY Singer_Name, Birth_Year, Net_Worth_Millions, Citizenship\n\\end{code}\n\nTry it out on [SQLize.it](http://sqlize.online/?phpses=null&sqlses=596015d405f94a2b3642f334e749437b)\n\nComment: @Ravindra Kadam, yes it works.  But it is not a good way to do this. The best way is to write the SELECT query with GROUP BY and do the aggregation in the last step.\n\nComment: @Maurice Peralta, I have already tried your way but it is not working in my case\n\nComment: @Ravindra Kadam, I have added more information in my answer. Check it out.\n\nAnswer:"}
{"question": "What is the most common singer citizenship ?", "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the most common singer citizenship ?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the most common singer citizenship ?. \nSELECT  SELECT \nsong_id, title, singer_id, sales, highest_position\nFROM   song\nGROUP BY song_id, title, singer_id\nHAVING COUNT(singer_id) = MAX(COUNT(singer_id));\nWhat is the most common nationality for the top 1000 most successful singers? \nSELECT  SELECT \nsong_id, title, singer_id, sales, highest_position\nFROM   song\nGROUP BY song_id, title, singer_id\nHAVING COUNT(singer_id) = MAX(COUNT(singer_id));\nWhat is the most common nationality for the top 1000 most successful singers? \nSELECT  SELECT \nsong_id, title, singer_id, sales, highest_position\nFROM   song\nGROUP BY song_id, title, singer_id\nHAVING COUNT(singer_id) = MAX(COUNT(singer_id));\n\n\n### SQL Ruby database, with their properties:\n#singer(name: String, birth_year: Integer, net_worth_millions: Integer, citizenship: String)"}
{"question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow different citizenships and the maximum net worth of singers of each citizenship.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow different citizenships and the maximum net worth of singers of each citizenship.. \n}
{"question": "For each citizenship, what is the maximum net worth?", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each citizenship, what is the maximum net worth?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each citizenship, what is the maximum net worth?. \nSELECT  SELECT  SELECT\nsinger(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship) \nsong(Song_ID, Title, Singer_ID, Sales, Highest_Position) \ncitizenship(Citizenship, Max_Net_Worth) \nfrom \n    (select singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, \n    song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position \n    from singer join song \n    on singer.Singer_ID=song.Singer_ID\n    )\n    group by singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship\n    order by singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Singer_ID\n    group by singer.Singer_"}
{"question": "Show titles of songs and names of singers.", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow titles of songs and names of singers.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow titles of songs and names of singers.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nTITLE,   NAME,   BIRTH_YEAR,   CITIZENSHIP,   NET_WORTH_MILLIONS,   SALES,   HIGHEST_POSITION \nFROM    SONG   INNER JOIN  SINGER  ON SONG.SINGER_ID = SINGER.SINGER_ID \nWHERE   SONG.SONG_ID = 1   AND SINGER.SINGER_ID = 1;\n"}
{"question": "What are the song titles and singer names?", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the song titles and singer names?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the song titles and singer names?. \nSELECT  SELECT  SELECT \nname, Singer_ID, Birth_Year, Net_Worth_Millions, Citizenship \nFROM song \nWHERE Singer_ID=?  \n\nSELECT  SELECT  SELECT \nSong_ID, Name, Singer_ID, Sales, Highest_Position \nFROM song \nWHERE Singer_ID=?  \n\nSELECT  SELECT  SELECT \nName, Singer_ID, Birth_Year, Net_Worth_Millions, Citizenship \nFROM singer \nWHERE Singer_ID=?  \n\nSELECT  SELECT  SELECT \nSinger_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship \nFROM singer \nWHERE Singer_ID=?  \n\nSELECT  SELECT  SELECT \nSinger_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship \nFROM singer \nWHERE Singer_ID=?  \n\nSELECT  SELECT  SELECT \nSinger_ID, Name, Birth_Year, Net_Worth_Millions, Citizens"}
{"question": "Show distinct names of singers that have songs with sales more than 300000.", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow distinct names of singers that have songs with sales more than 300000.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow distinct names of singers that have songs with sales more than 300000.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT"}
{"question": "what are the different names of the singers that have sales more than 300000?", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nwhat are the different names of the singers that have sales more than 300000?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nwhat are the different names of the singers that have sales more than 300000?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nMAX(Sales) as Sales_Max,\nMAX(Highest_Position) as Highest_Position_Max,\nMIN(Sales) as Sales_Min,\nMIN(Highest_Position) as Highest_Position_Min,\nMIN(Sales) as Sales_Min_A,\nMIN(Highest_Position) as Highest_Position_Min_A\nFROM  songs\nWHERE  Sales > 300000;\nGROUP BY  Sales, Highest_Position, Sales_Min, Highest_Position_Min;\nORDER BY  Sales, Highest_Position, Sales_Min, Highest_Position_Min;\n"}
{"question": "Show the names of singers that have more than one song.", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the names of singers that have more than one song.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the names of singers that have more than one song.. \nSELECT  SELECT\nSINGER_ID,\nNET_WORTH,\nCITIZENSHIP,\nNAME,\nBIRTH_YEAR\nFROM (\nSELECT SINGER_ID, NAME,\nSUM(SALES) AS NET_WORTH,\nCITIZENSHIP\nFROM SONG\nWHERE HIGHEST_POSITION = 1\nGROUP BY SINGER_ID, NAME, CITIZENSHIP\n) S\nGROUP BY SINGER_ID, NAME, BIRTH_YEAR, NET_WORTH, CITIZENSHIP\nORDER BY BIRTH_YEAR\n\n### SQL query to show song singers that have more than one song. \nSELECT SINGER_ID, NAME, \nCOUNT(SINGER_ID) AS COUNTS\nFROM SONG\nWHERE HIGHEST_POSITION = 1\nGROUP BY SINGER_ID, NAME\nORDER BY HIGHEST_POSITION\n\n### SQL query to show song singers that have one song.. \nSELECT SINGER_ID, NAME, \nCOUNT(SINGER_ID) AS"}
{"question": "What are the names of the singers that have more than one songs?", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers that have more than one songs?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers that have more than one songs?. \nSELECT  SELECT\nsinger.name AS 'singer_name',\nsong.title AS 'song_title',\nsinger.id AS 'singer_id',\nsong.id AS 'song_id',\nsong.sales AS 'song_sales',\nMAX(song.sales) AS 'highest_position'\nFROM singer\nJOIN song ON singer.id=song.singer_id\nGROUP BY singer.name, song.title\nORDER BY singer.name ASC\nWhat are the names of the singers that have more than one songs?. \nSELECT  SELECT\nsinger.name AS 'singer_name',\nsong.title AS 'song_title',\nsinger.id AS 'singer_id',\nsong.id AS 'song_id',\nsong.sales AS 'song_sales',\nMAX(song.sales) AS 'highest_position'\nFROM singer\nJOIN song ON singer.id=song.singer_id\nGROUP BY singer.name, song.title, song.sales\nORDER BY singer.name ASC, song.title ASC, song.sales DESC\nWhat are the names of the"}
{"question": "Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the names of singers and the total sales of their songs.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the names of singers and the total sales of their songs.. \nSELECT  SELECT  \nNAME, BIRTH_YEAR, NET_WORTH_MILLIONS, CITIZENSHIP \nFROM SINGER \nWHERE SINGER_ID = 4 \nORDER BY NAME ASC\n\nSELECT  SELECT  \nNAME, BIRTH_YEAR, NET_WORTH_MILLIONS, CITIZENSHIP \nFROM SONG \nWHERE SINGER_ID = 4 \nORDER BY NAME ASC\n"}
{"question": "For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each singer name, what is the total sales for their songs?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each singer name, what is the total sales for their songs?. \nSELECT  SELECT Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship\nFROM Singer\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Singer s2\n    WHERE s2.Singer_ID = Singer.Singer_ID\n    AND s2.Name = Singer.Name\n)\nORDER BY Singer.Name ASC\nGROUP BY Singer.Singer_ID, Singer.Name\n#GROUP BY Name\n#GROUP BY Singer.Name\n#GROUP BY Net_Worth_Millions\n\nSELECT  SELECT Song_ID, Title, Singer_ID, Sales, Highest_Position\nFROM Song\nGROUP BY Song.Song_ID\nORDER BY Song.Highest_Position DESC\n\n\n\n#SIMPLE SQL:\n#SELECT Song_ID, Title, Singer_ID, Sales, Highest_Position\n#FROM Song\n#GROUP BY Song.Song_ID\n#ORDER BY Song.Highest_Position DESC\n\n\n\n\n#HAVING clause\n#GIVING clause\n#USED WITH GROUP BY\n#SELECT  SUM(Sales) AS"}
{"question": "List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers that do not have any song.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers that do not have any song.. \nSELECT  SELECT * FROM Singer s\nWHERE NOT EXISTS (SELECT 0 FROM Song s WHERE s.Singer_ID = s.Singer_ID)\nAnd the name of the singers that have only one song...\nSELECT s.Name FROM Singer s\nWHERE NOT EXISTS (SELECT 0 FROM Song s WHERE s.Singer_ID = s.Singer_ID AND s.Sales = s.Sales AND s.Highest_Position = s.Highest_Position)\nSELECT s.Name FROM Singer s\nWHERE NOT EXISTS (SELECT 0 FROM Song s WHERE s.Singer_ID = s.Singer_ID AND s.Sales > s.Sales AND s.Highest_Position = s.Highest_Position)\nSELECT s.Name FROM Singer s\nWHERE NOT EXISTS (SELECT 0 FROM Song s WHERE s.Singer_ID = s.Singer_ID AND s.Sales = s.Sales AND s.Highest_Position > s.Highest_Position)\nSELECT s.Name FROM Singer s\nWHERE NOT EXISTS (SELECT 0 FROM Song s WHERE s.Singer_ID = s.Singer_ID"}
{"question": "What is the sname of every sing that does not have any song?", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the sname of every sing that does not have any song?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the sname of every sing that does not have any song?. \nSELECT  SELECT  SELECT\nFROM    sname where sname.Singer_ID is not null and sname.Singer_ID in (SELECT Singer_ID from ssong where Singer_ID in (SELECT Singer_ID from singer where Singer_ID not in (SELECT Singer_ID from ssong where Singer_ID in (SELECT Singer_ID from song where Singer_ID not in (SELECT Singer_ID from song where Singer_ID not in (SELECT Singer_ID from song where Singer_ID not in (SELECT Singer_ID from sname where Singer_ID not in (SELECT Singer_ID from sname where Singer_ID not in (SELECT Singer_ID from sname where Singer_ID not in (SELECT Singer_ID from sname where Singer_ID not in (SELECT Singer_ID from sname where Singer_ID not in (SELECT Singer_ID from sname where Singer_ID not in (SELECT Singer_ID from sname where Singer_ID not in (SELECT Singer_ID from sname where Singer_ID not in (SELECT Singer_ID from sname where S"}
{"question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the citizenship shared by singers with birth year before 1945 and after 1955.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the citizenship shared by singers with birth year before 1945 and after 1955.. \nSELECT  SELECT name,\n    GROUP_CONCAT(citizenship ORDER BY citizenship),\n    SUM(sales) sales\nFROM (\n    SELECT\n    singer_id,\n    name,\n    birth_year,\n    citizenship,\n    song_id,\n    sales,\n    COUNT(sales) sales\n    FROM songs\n    INNER JOIN (\n        SELECT  singer_id,\n            name,\n            birth_year,\n            citizenship,\n            song_id,\n            sales,\n            COUNT(sales) sales\n        FROM songs\n        GROUP BY singer_id,\n            name,\n            birth_year,\n            citizenship,\n            song_id,\n            sales\n    ) AS a ON a.sales = songs.sales\n    GROUP BY singer_id,\n    name,\n    birth_year,\n    citizenship,\n    song_id,\n    sales\n) AS b ON b.sales = 0\nGROUP BY  birth_year,\n    name,\n    citizenship,\n    song_id\nHAVING sales > 0\nORDER BY  birth_year,\n   "}
{"question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the citizenships that are shared by singers with a birth year before 1945 and after 1955?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the citizenships that are shared by singers with a birth year before 1945 and after 1955?. \nSELECT  SELECT COUNT(*) FROM song WHERE year_birth_before <= 1945 AND year_birth_after >= 1955 AND citizenship = 'United States of America';\n\nSELECT  SELECT COUNT(*) FROM song WHERE year_birth_before <= 1945 AND year_birth_after >= 1955 AND citizenship = 'United States of America';\n\nWhat are the citizenships that are shared by singers with a birth year before 1945 and after 1955?. \nSELECT  SELECT COUNT(*) FROM song WHERE year_birth_before <= 1945 AND year_birth_after >= 1955 AND citizenship = 'United States of America';\n\nSELECT  SELECT COUNT(*) FROM song WHERE year_birth_before <= 1945 AND year_birth_after >= 1955 AND citizenship = 'United States of America';\n\nSELECT  SELECT COUNT(*) FROM song WHERE year_birth_before <= 1945 AND year_birth_after >= 1955 AND citizenship = 'United States of America';"}
{"question": "How many available features are there in total?", "sql": "SELECT count(*) FROM Other_Available_Features", "prompt": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nHow many available features are there in total?. \nSELECT ", "response": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nHow many available features are there in total?. \nSELECT  SELECT  COUNT(feature_id) \"number_of_available_features\"\nFROM    feature_feature_features\nGROUP BY feature_id\n\n#How many features are there for this property?. \nSELECT  SELECT  COUNT(feature_id) \"number_of_available_features\"\nFROM    feature_feature_feature\nWHERE   property_id = '351852'\nGROUP BY feature_id\n\n#How many features are there for this property?. \nSELECT  SELECT  COUNT(feature_id) \"number_of_available_features\"\nFROM    feature_feature_feature\nWHERE   property_id = '200965'\nGROUP BY feature_id\n\n#How many features are there for this property?. \nSELECT  SELECT  COUNT(feature_id) \"number_of_available_features\"\nFROM    feature_feature_feature\nWHERE   property_id = '104062'\nGROUP BY feature_id\n\n#How many features are there for this property?. \nSELECT  SELECT  COUNT(feature_id) \"number_of_available_features\"\nFROM    feature_feature_"}
{"question": "What is the feature type name of feature AirCon?", "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "prompt": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nWhat is the feature type name of feature AirCon?. \nSELECT ", "response": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nWhat is the feature type name of feature AirCon?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nSELECT"}
{"question": "Show the property type descriptions of properties belonging to that code.", "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "prompt": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nShow the property type descriptions of properties belonging to that code.. \nSELECT ", "response": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nShow the property type descriptions of properties belonging to that code.. \nSELECT  SELECT_PROPERTY_TYPE(property_id) AS property_type_description\nFROM    property_details\nWHERE   property_id = $1;\n# Ref_Property_Types ('property_type_code', 'property_type_description')\nSelect the description of each property type.\nSELECT  SELECT_PROPERTY_TYPE(property_id) AS property_type_description\nFROM    property_details\nWHERE   property_type_code = $1;\n# Show the property descriptions of properties belonging to that code.. \nSELECT  SELECT_PROPERTY_DETAILS(property_id) AS property_description\nFROM    property_details\nWHERE   property_type_code = $1;\n#Show the details of properties available in a specific code.\nSELECT  SELECT_PROPERTY_DETAILS(property_id) AS property_description\nFROM    property_details\nWHERE   property_type_code = $1;\n#Show the property description of properties available in a specific code.\nSELECT  SELECT_PROPERTY_DETAILS(property_id) AS property_description\nFROM    property_details\nWHERE   feature"}
{"question": "What are the names of properties that are either houses or apartments with more than 1 room?", "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "prompt": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nWhat are the names of properties that are either houses or apartments with more than 1 room?. \nSELECT ", "response": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nWhat are the names of properties that are either houses or apartments with more than 1 room?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT  SELECT  SELECT \nSELECT  SELECT  SELECT "}
