{"question": "How many singers do we have?", "sql": "SELECT count(*) FROM singer", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat are the first names of students in room 108? => SELECT firstname FROM list WHERE classroom  =  108\nHow films are produced by each studio? => SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\nCount the number of storms in which at least 1 person died. => SELECT count(*) FROM storm WHERE Number_Deaths  >  0\nList the name of all projects that are operated longer than the average working hours of all projects. => SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)\nList the distinct director of all films. => SELECT DISTINCT Director FROM film\nHow many singers do we have? => ", "response": "SELECT COUNT(*) FROM singer"}
{"question": "What is the total number of singers?", "sql": "SELECT count(*) FROM singer", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nHow many different levels do members have? => SELECT count(DISTINCT LEVEL) FROM member\nWho advises student 1004? => SELECT Advisor FROM Student WHERE StuID  =  1004\nWhat is the rating of the restaurant Subway? => SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";\nWhat is the invoice number and invoice date for the invoice with most number of transactions? => SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\nFind the maximum age of all the students. => SELECT max(Age) FROM STUDENT\nWhat is the total number of singers? => ", "response": "SELECT count(*) FROM singer"}
{"question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nShow the names of members and the location of performances they attended in ascending alphabetical order of their names. => SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC\nWhat are the nationalities and ages of journalists? => SELECT Nationality ,  Age FROM journalist\nFind the states where have some college students in tryout. => SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName\nWhat are the highest and lowest prices of products, grouped by and alphabetically ordered by product type? => SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code\nWhat are the different album labels listed? => SELECT DISTINCT label FROM Albums\nShow name, country, age for all singers ordered by age from the oldest to the youngest. => ", "response": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC"}
{"question": "What are the names, countries, and ages for every singer in descending order of age?", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat is the first name, last name, and phone of the customer with card 4560596484842. => SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"\nWhich catalog content has the smallest capacity? Return the catalog entry name. => SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\nFind the first names of all instructors who have taught some course and the course code. => SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num\nFind out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described => SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\nSelect the project names which are not assigned yet. => SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\nWhat are the names, countries, and ages for every singer in descending order of age? => ", "response": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC"}
{"question": "What is the average, minimum, and maximum age of all singers from France?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat is the total amount of grant money given to each organization and what is its id? => SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id\nReturn the hispanic percentage for cities in which the black percentage is greater than 10. => SELECT Hispanic FROM city WHERE Black  >  10\nWhat are the ids for all sporty students who are on scholarship? => SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'\nFind the average room count of the apartments that have the \"Studio\" type code. => SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\nFind the IDs of customers whose name contains \"Diana\". => SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\nWhat is the average, minimum, and maximum age of all singers from France? => ", "response": "SELECT AVG(Age), MIN(Age), MAX(Age) FROM Singer WHERE Country = 'France'"}
{"question": "What is the average, minimum, and maximum age for all French singers?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nShow the maximum and minimum share count of different transaction types. => SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code\nShow the delegates and the names of the party they belong to. => SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID\nWhich countries have more than one mountain? => SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1\nIn which year were most of ships built? => SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1\nWhat are the top 10 customers' first and last names with the highest gross sales, and also what are the sales? => SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;\nWhat is the average, minimum, and maximum age for all French singers? => ", "response": "SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'France'"}
{"question": "Show the name and the release year of the song by the youngest singer.", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nShow the party with drivers from Hartford and drivers older than 40. => SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40\nWhat is the list of program origins ordered alphabetically? => SELECT origin FROM program ORDER BY origin\nFind the number of students whose age is older than the average age for each gender. => SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\nDisplay the first name, and department number for all employees whose last name is \"McEwen\". => SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'\nPlease show the most common reigns of wrestlers. => SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1\nShow the name and the release year of the song by the youngest singer. => ", "response": "SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1"}
{"question": "What are the names and release years for all the songs of the youngest singer?", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhich department has the lowest budget? => SELECT dept_name FROM department ORDER BY budget LIMIT 1\nWhat are the name of pilots aged 25 or older? => SELECT Name FROM pilot WHERE Age  >=  25\nWhat is the savings balance of the account belonging to the customer with the highest checking balance? => SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1\nHow many faculty members participate in an activity? => SELECT count(DISTINCT FacID) FROM Faculty_participates_in\nWhat is the document type name and the document type description and creation date for all the documents? => SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code\nWhat are the names and release years for all the songs of the youngest singer? => ", "response": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)"}
{"question": "What are all distinct countries where singers above age 20 are from?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat are the teams that have the 5 oldest players? => SELECT Team FROM player ORDER BY Age DESC LIMIT 5\nWhich party has the largest number of delegates? => SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\nFind the number of manufactures that are based in Tokyo or Beijing. => SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'\nWhat are the names of teams that do no have match season record? => SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)\nWhich department has the highest average student GPA, and what is the average gpa? => SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1\nWhat are all distinct countries where singers above age 20 are from? => ", "response": "SELECT DISTINCT Country FROM singer WHERE Age > 20"}
{"question": "What are  the different countries with singers above age 20?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nFind the cities corresponding to employees who help customers with the postal code 70174. => SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\nWhat is the document type name for the document with name \"How to read a book\"? => SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"\nFind the names of nurses who are nursing an undergoing treatment. => SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID\nWhat are the positions of players whose average number of points scored by that position is larger than 20? => SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\nWhich industry has the most companies? => SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1\nWhat are  the different countries with singers above age 20? => ", "response": "SELECT DISTINCT Country FROM singer WHERE Age > 20"}
{"question": "Show all countries and the number of singers in each country.", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nShow all ages and corresponding number of students. => SELECT age ,  count(*) FROM Student GROUP BY age\ndisplay all the details from Employees table for those employees who was hired before 2002-06-21. => SELECT * FROM employees WHERE hire_date  <  '2002-06-21'\nWhich friend of Zach has the longest-lasting friendship? => SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\nwhich gender got the highest average uncertain ratio. => SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\nWhat are the cities that have more than 2 airports sorted by number of airports? => SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)\nShow all countries and the number of singers in each country. => ", "response": "SELECT Country, COUNT(*) FROM singer GROUP BY Country"}
{"question": "How many singers are from each country?", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhich customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids. => SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"\nShow all donor names. => SELECT DISTINCT donator_name FROM endowment\nFind the name of the students and their department names sorted by their total credits in ascending order. => SELECT name ,  dept_name FROM student ORDER BY tot_cred\nFind the first name and office of history professor who did not get a Ph.D. degree. => SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\nShow theme and year for all exhibitions in an descending order of ticket price. => SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC\nHow many singers are from each country? => ", "response": "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country"}
{"question": "List all song names by singers above the average age.", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nCount the number of patients who stayed in room 112. => SELECT count(patient) FROM stay WHERE room  =  112\nWhat are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor? => SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\nHow many departments are in each school? => SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code\nList the id of students who registered course statistics in the order of registration date. => SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date\nWhat are the names of schools with the top 3 largest size? => SELECT cName FROM college ORDER BY enr DESC LIMIT 3\nList all song names by singers above the average age. => ", "response": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)"}
{"question": "What are all the song names by singers who are older than average?", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nHow many distinct claim outcome codes are there? => SELECT count(DISTINCT claim_outcome_code) FROM claims_processing\nWhat are the names of mountains in ascending alphabetical order? => SELECT Name FROM mountain ORDER BY Name ASC\nFind the first names and last names of the authors whose institution affiliation is \"University of Oxford\". => SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"\nWhat is the total share of transactions? => SELECT sum(share_count) FROM TRANSACTIONS\nWhich catalog contents has price above 700 dollars? Show their catalog entry names and capacities. => SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\nWhat are all the song names by singers who are older than average? => ", "response": "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)"}
{"question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nCount the number of tracks that are part of the rock genre. => SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\nFind the products which have problems reported by both Lacey Bosco and Kenton Champlin? => SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"\nWhat are the details of the markets that can be accessed by walk or bus? => SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\nFind the average number of factories for the manufacturers that have more than 20 shops. => SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20\nWhat is the id of the event with the most participants? => SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1\nShow location and name for all stadiums with a capacity between 5000 and 10000. => ", "response": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000"}
{"question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nFind the total credits of all classes offered by each department. => SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\nList the information of all instructors ordered by their salary in ascending order. => SELECT * FROM instructor ORDER BY salary\nWhat is the location of the festival with the largest number of audience? => SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1\nFind the average age of members of the club \"Hopkins Student Enterprises\". => SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"\nFind the average and minimum weight for each gender. => SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex\nWhat are the locations and names of all stations with capacity between 5000 and 10000? => ", "response": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000"}
{"question": "What is the maximum capacity and the average of all stadiums ?", "sql": "select max(capacity), average from stadium", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nList the clubs having \"Davis Steven\" as a member. => SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\nGive the maximum and minimum product prices for each product type, grouped and ordered by product type. => SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code\nFind the code of the document type \"Paper\". => SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\nWhat is the name of customers who do not use Cash as payment method. => SELECT customer_name FROM customers WHERE payment_method != 'Cash'\nWhat are the type codes of the policies used by the customer \"Dayana Robel\"? => SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"\nWhat is the maximum capacity and the average of all stadiums ? => ", "response": "SELECT MAX(Capacity), AVG(Average) FROM stadium"}
{"question": "What is the average and maximum capacities for all stadiums ?", "sql": "select avg(capacity) ,  max(capacity) from stadium", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nGive the country id and corresponding count of cities in each country. => SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id\nWhat are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top? => SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2\nFind the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. => SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\nWhat are the name, origin and owner of each program? => SELECT name ,  origin ,  OWNER FROM program\nFind the name of physicians who are affiliated with both Surgery and Psychiatry departments. => SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'\nWhat is the average and maximum capacities for all stadiums ? => ", "response": "SELECT AVG(Capacity), MAX(Capacity) FROM stadium"}
{"question": "What is the name and capacity for the stadium with highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat is the most popular first name of the actors? => SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1\nFind the total budgets of the Marketing or Finance department. => SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\nShow the average share count of transactions each each investor, ordered by average share count. => SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)\nWhich products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin? => SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"\nWhat are the names and average prices of products for manufacturers whose products cost on average 150 or more? => SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150\nWhat is the name and capacity for the stadium with highest average attendance? => ", "response": "SELECT Name, Capacity \nFROM stadium \nWHERE Average = (SELECT MAX(Average) FROM stadium)"}
{"question": "What is the name and capacity for the stadium with the highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat is id of the city that hosted events in the most recent year? => SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1\nWhat are the unit of measure and category code for the 'chervil' product? => SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"\nFind the first name and last name of the instructor of course that has course name => SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"\nWhat are all role codes? => SELECT role_code FROM ROLES;\nFind the distinct number of president votes. => SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD\nWhat is the name and capacity for the stadium with the highest average attendance? => ", "response": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)"}
{"question": "How many concerts are there in year 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \ndisplay the employee ID for each employee and the date on which he ended his previous job. => SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\nShow the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50. => SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50\nFind the name of the department that has the biggest number of students minored in? => SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1\nWho is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name. => SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"\nWhat is the total number of routes for each country and airline in that country? => SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name\nHow many concerts are there in year 2014 or 2015? => ", "response": "SELECT count(*) FROM concert WHERE year = 2014 OR year = 2015"}
{"question": "How many concerts occurred in 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat are the maximum and minimum number of cities in all markets. => SELECT max(Number_cities) ,  min(Number_cities) FROM market\nShow all student ids who are older than 20. => SELECT StuID FROM Student WHERE age  >  20\nFind the name of the airport in the city of Goroka. => SELECT name FROM airports WHERE city  =  'Goroka'\nFind the players' first name and last name who won award both in 1960 and in 1961. => SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961\nFind the number of medications prescribed for each brand. => SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand\nHow many concerts occurred in 2014 or 2015? => ", "response": "SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015"}
{"question": "Show the stadium name and the number of concerts in each stadium.", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat are the first name and last name of the players who have weight above 220 or height below 75? => SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75\nList all the model names sorted by their launch year. => SELECT model_name FROM chip_model ORDER BY launch_year\nWhat are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant? => SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'\nShow all city with a branch opened in 2001 and a branch with more than 100 membership. => SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100\nWhere is the history department? => SELECT dept_address FROM department WHERE dept_name  =  'History'\nShow the stadium name and the number of concerts in each stadium. => ", "response": "SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name"}
{"question": "For each stadium, how many concerts play there?", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nShow the name of technicians aged either 36 or 37 => SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\nReturn the name and job title of the staff with the latest date assigned. => SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1\nWhat are the ids of courses without prerequisites? => SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\nWhat is the type of the organization with the most research staff? => SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\nList the clubs having \"Davis Steven\" as a member. => SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\nFor each stadium, how many concerts play there? => ", "response": "SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts\nFROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Name"}
{"question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nGive me the star rating descriptions of the hotels that cost more than 10000. => SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000\nWhat is the number of wins the team Boston Red Stockings got in the postseasons each year in history? => SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year\nWhat are the names of the customers who have made two or less orders? => SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2\nFind the phone number of performer \"Ashley\". => SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"\nWhat is the name of the manager with the most gas stations that opened after 2000? => SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1\nShow the stadium name and capacity with most number of concerts in year 2014 or after. => ", "response": "SELECT T1.Name, T1.Capacity FROM stadium AS T1\nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID\nWHERE T2.Year >= 2014\nGROUP BY T1.Name, T1.Capacity\nORDER BY count(*) DESC\nLIMIT 1"}
{"question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat are the payment method codes that have been used by more than 3 parties? => SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3\nFind the states where have some college students in tryout and their decisions are yes. => SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\nSort the names of products in ascending order of their price. => SELECT Product_Name FROM Products ORDER BY Product_Price ASC\nWhat are all the locations with a cinema? => SELECT DISTINCT LOCATION FROM cinema\nWhich document type is described with the prefix 'Initial'? => SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'\nWhat is the name and capacity of the stadium with the most concerts after 2013 ? => ", "response": "SELECT s.Name, s.Capacity \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year > 2013 \nGROUP BY s.Name \nORDER BY COUNT(c.concert_ID) DESC \nLIMIT 1"}
{"question": "Which year has most number of concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat are the ids of all reviewers who have not given 4 stars at least once? => SELECT rID FROM Rating WHERE stars != 4\nCount the number of departments which offer courses. => SELECT count(DISTINCT dept_name) FROM course\nIn what year was the most degrees conferred? => SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\nWhat is the name of the department with the most students enrolled? => SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1\nShow each state and the number of addresses in each state. => SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county\nWhich year has most number of concerts? => ", "response": "SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1"}
{"question": "What is the year that had the most concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nFind the top 3 wineries with the greatest number of wines made of white color grapes. => SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3\nOn which day and in which zip code was the min dew point lower than any day in zip code 94107? => SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)\ndisplay the country ID and number of cities for each country. => SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id\nReturn the phone and email of the customer with the first name Aniyah and last name Feest. => SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"\nList the names of all the distinct customers who bought a keyboard. => SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\nWhat is the year that had the most concerts? => ", "response": "SELECT Year, COUNT(*) as num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1"}
{"question": "Show the stadium names without any concert.", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nHow many songs have vocals of type lead? => SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"\nWhat is the list of school locations sorted in ascending order of school enrollment? => SELECT LOCATION FROM school ORDER BY Enrollment ASC\nShow names of shops and the carriers of devices they have in stock. => SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID\nWhat is the match id of the competition called \"1994 FIFA World Cup qualification\"? => SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"\nWhat is the average number of gold medals for clubs? => SELECT avg(Gold) FROM club_rank\nShow the stadium names without any concert. => ", "response": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)"}
{"question": "What are the names of the stadiums without any concerts?", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat is the id and family name of the driver who has the longest laptime? => SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1\nWhat are the names of cities in ascending alphabetical order? => SELECT Name FROM city ORDER BY Name ASC\nFind the title of courses that have two prerequisites? => SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2\nWhat are the draft pick numbers and draft classes for players who play the Defender position? => SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\nList the writers of the books in ascending alphabetical order. => SELECT Writer FROM book ORDER BY Writer ASC\nWhat are the names of the stadiums without any concerts? => ", "response": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)"}
{"question": "Show countries where a singer above age 40 and a singer below 30 are from.", "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nFind the name of the program that is broadcast most frequently. => SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\nReturn the highest acc percent across all basketball matches. => SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\nShow names for all aircrafts of which John Williams has certificates. => SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"\nHow many students whose are playing the role of goalie? => SELECT count(*) FROM tryout WHERE pPos  =  'goalie'\nList every album ordered by album title in ascending order. => SELECT title FROM albums ORDER BY title;\nShow countries where a singer above age 40 and a singer below 30 are from. => ", "response": "SELECT DISTINCT T1.country FROM singer AS T1 WHERE T1.age > 40 AND EXISTS (SELECT * FROM singer AS T2 WHERE T2.age < 30 AND T1.country = T2.country)"}
{"question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat is the first names of the professors from the history department who do not teach a class. => SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num\nWhat are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"? => SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"\nWhat are the names of all Rock tracks that are stored on MPEG audio files? => SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";\nWhen was the first asset acquired? => SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1\nWhat are the first and last names of all customers who lived in Lockmanfurt? => SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";\nShow names for all stadiums except for stadiums having a concert in year 2014. => ", "response": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014);"}
{"question": "What are the names of all stadiums that did not have a concert in 2014?", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat is the total time for all lessons taught by Janessa Sawayn? => SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nWhat are the ids of documents with the type code CV that do not have expenses. => SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses\nWhat is the number of states that has some colleges whose enrollment is smaller than the average enrollment? => SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)\nWhat are the ids and details of events that have more than one participants? => SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1\nWhich tests have \"Pass\" results? Return the dates when the tests were taken. => SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"\nWhat are the names of all stadiums that did not have a concert in 2014? => ", "response": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)"}
{"question": "Show the name and theme for all concerts and the number of singers in each concert.", "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nReturn the number of companies created by Andy. => SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'\nList the names of departments where some physicians are primarily affiliated with. => SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1\nCount the number of films. => SELECT count(*) FROM film\nFind the number of distinct room types available. => SELECT count(DISTINCT roomtype) FROM room\nWhat are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte? => SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )\nShow the name and theme for all concerts and the number of singers in each concert. => ", "response": "SELECT C.concert_Name, C.Theme, count(SIC.Singer_ID) as Number_of_Singers \nFROM concert AS C \nLEFT JOIN singer_in_concert AS SIC ON C.concert_ID = SIC.concert_ID \nGROUP BY C.concert_ID, C.concert_Name, C.Theme"}
{"question": "What are the names , themes , and number of singers for every concert ?", "sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhich city does the student whose last name is \"Kim\" live in? => SELECT city_code FROM Student WHERE LName  =  \"Kim\"\nFind the top 3 wineries with the greatest number of wines made of white color grapes. => SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3\nWhich cities have at least one customer but no performer? => SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\nWho is the advisor of student with ID 1004? => SELECT Advisor FROM Student WHERE StuID  =  1004\nFind the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent. => SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"\nWhat are the names , themes , and number of singers for every concert ? => ", "response": "SELECT concert_Name, Theme, COUNT(Singer_ID) AS num_singers\nFROM concert\nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert.concert_ID"}
{"question": "List singer names and number of concerts for each singer.", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nFind the first names of the faculty members who participate in Canoeing and Kayaking. => SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'\nWhat is the maximum level of managers in countries that are not \"Australia\"? => SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"\nFind the name of customers who have both saving and checking account types. => SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'\nWhat are the card numbers, names, and hometowns of every member ordered by descending level? => SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\nShow all the activity names and the number of faculty involved in each activity. => SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID\nList singer names and number of concerts for each singer. => ", "response": "SELECT singer.Name, COUNT(*) as 'Number of Concerts'\nFROM singer\nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\nGROUP BY singer.Name"}
{"question": "What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhich type of policy is most frequently used? Give me the policy type code. => SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\nList the actual delivery date for all the orders with quantity 1 => SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1\nWhat are the names of all the aircrafts associated with London Gatwick airport? => SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"\nWhat are the states with colleges that have enrollments less than the some other college? => SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)\nWhat is the average enrollment of schools? => SELECT avg(Enrollment) FROM school\nWhat are the names of the singers and number of concerts for each person? => ", "response": "SELECT Singer.Name, COUNT(concert.Concert_ID) as total_concerts FROM Singer JOIN singer_in_concert ON Singer.Singer_ID=singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID=concert.concert_ID GROUP BY Singer.Name"}
{"question": "List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nhow many airports are there in each country? => SELECT count(*) ,  country FROM airport GROUP BY country\nWhat are all the movies rated as R? List the titles. => SELECT title FROM film WHERE rating  =  'R'\nWhat is the reviewer id of Daniel Lewis? => SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"\nShow all publishers and the number of books for each publisher. => SELECT publisher ,  count(*) FROM book_club GROUP BY publisher\nWhat are the names and ids of products costing between 600 and 700? => SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\nList all singer names in concerts in year 2014. => ", "response": "SELECT singer.Name FROM singer_in_concert \nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\nJOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID\nWHERE concert.Year = 2014"}
{"question": "What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat are the naems of all the projects, and how many scientists were assigned to each of them? => SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name\nShow the name of track and the number of races in each track. => SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\nWhat is the average bike availability in stations that are not located in Palo Alto? => SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\nShow student ids for all male students. => SELECT StuID FROM Student WHERE Sex  =  'M'\nWhat is the maximum enrollment across all schools? => SELECT max(Enrollment) FROM university\nWhat are the names of the singers who performed in a concert in 2014? => ", "response": "SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T3 ON T1.concert_ID = T3.concert_ID JOIN singer AS T2 ON T3.Singer_ID = T2.Singer_ID WHERE T1.Year = 2014"}
{"question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nFind the title of courses that have two prerequisites? => SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2\nWhat are the names of enzymes in descending order? => SELECT name FROM enzyme ORDER BY name DESC\nList the names of people that are not employed by any company => SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)\nWhat is the location and name of the winning aircraft? => SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft\nWho are the nominees who have been nominated more than two times? => SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\nwhat is the name and nation of the singer who have a song having 'Hey' in its name? => ", "response": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'"}
{"question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat is the team name and acc regular season score of the school that was founded for the longest time? => SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1\nHow many problems does the product with the most problems have? List the number of the problems and product name. => SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1\nShow the names of customers having an order with shipping method FedEx and order status Paid. => SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'\nPlease show the titles of films and the types of market estimations. => SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID\nHow many departments are led by heads who are not mentioned? => SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);\nWhat is the name and country of origin of every singer who has a song with the word 'Hey' in its title? => ", "response": "SELECT Name, Country FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%')"}
{"question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nWhat are the names of students who have more than one advisor? => SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\nReturn the description of the document type name 'Film'. => SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"\nfind the name of all departments that do actually have one or more employees assigned to them. => SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\nHow many furniture components are there in total? => SELECT sum(num_of_component) FROM furniture\nFind the first names and offices of all instructors who have taught some course and also find the course description. => SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num\nFind the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. => ", "response": "SELECT s.Name, s.Location FROM stadium AS s JOIN concert AS c ON s.Stadium_ID  =  c.Stadium_ID WHERE c.Year  =  2014 AND EXISTS (SELECT * FROM concert WHERE s.Stadium_ID  =  concert.Stadium_ID AND concert.Year  =  2015)"}
{"question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nFor each type, how many ships are there? => SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE\nWhat are the names of people in ascending alphabetical order? => SELECT Name FROM People ORDER BY Name ASC\nShow the statement detail and the corresponding document name for the statement with detail 'Private Project'. => SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'\nList the hardware model name and company name for the phone whose screen mode type is \"Graphics.\" => SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";\nWhat is all the information about employees with D or S in their first name, ordered by salary descending? => SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC\nWhat are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? => ", "response": "SELECT s.Name, s.Location FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = 2014 AND s.Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)"}
{"question": "Find the number of concerts happened in the stadium with the highest capacity .", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nList the name of artworks in ascending alphabetical order. => SELECT Name FROM artwork ORDER BY Name ASC\ndisplay the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN. => SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )\nWhat is the city with the most number of flagship stores? => SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1\nWhat is the id and trade name of the medicines can interact with at least 3 enzymes? => SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3\nHow many credit cards does customer Blanche Huels have? => SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"\nFind the number of concerts happened in the stadium with the highest capacity . => ", "response": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)"}
{"question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "prompt": "Given a database 'concert_singer' have 4 tables named 'stadium', 'singer', 'concert', 'singer_in_concert'. stadium tbl have columns: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'. singer tbl have columns: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'. concert tbl have columns: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'. singer_in_concert tbl have columns: 'concert_ID', 'Singer_ID'. \nTranslate text to SQL: \nGive me the payment Id, the date and the amount for all the payments processed with Visa. => SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'\nShow the product type codes that have both products with price higher than 4500 and products with price lower than 3000. => SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000\nWhich assets did not incur any fault log? List the asset model. => SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)\nWhat are the booking start and end dates of the apartments with more than 2 bedrooms? => SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2\nList all public schools and their locations. => SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'\nWhat are the number of concerts that occurred in the stadium with the largest capacity ? => ", "response": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))"}
{"question": "Find the number of pets whose weight is heavier than 10.", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nHow many students are there? => SELECT count(*) FROM student\nWhich faculty members advise two ore more students? Give me their faculty ids. => SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2\nShow all the distinct president votes made on 08/30/2015. => SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"\nCount the number of different scientists assigned to any project. => SELECT count(DISTINCT scientist) FROM assignedto\nFind the states of the colleges that have students in the tryout who played in striker position. => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'\nFind the number of pets whose weight is heavier than 10. => ", "response": "SELECT count(*) FROM Pets WHERE weight > 10"}
{"question": "How many pets have a greater weight than 10?", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhat are the names and genders of staff who were assigned in 2016? => SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"\nShow names for all aircrafts of which John Williams has certificates. => SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"\nHow many companies operates airlines in each airport? => SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id\nHow many different cities are they from? => SELECT count(DISTINCT city) FROM Person\nShow the manager name with most number of gas stations opened after 2000. => SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1\nHow many pets have a greater weight than 10? => ", "response": "SELECT count(*) FROM Pets WHERE weight > 10"}
{"question": "Find the weight of the youngest dog.", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhat are the names of the states that have some college students playing in the positions of goalie and mid-field? => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'\nList the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents. => SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;\nWhat are the names of the airports which are not in the country 'Iceland'? => SELECT name FROM airport WHERE country != 'Iceland'\nWhat is the name of the customer that made the order with the largest quantity? => SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)\nHow many products have the characteristic named \"hot\"? => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"\nFind the weight of the youngest dog. => ", "response": "SELECT weight FROM pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;"}
{"question": "How much does the youngest dog weigh?", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nFor each reviewer id, what is the title and rating for the movie with the smallest rating? => SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID\nShow the member names which are in both the party with id 3 and the party with id 1. => SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1\nShow all allergies and their types. => SELECT allergy ,  allergytype FROM Allergy_type\nWhat are the types and countries of competitions? => SELECT Competition_type ,  Country FROM competition\nList all the log ids and their descriptions from the problem logs. => SELECT problem_log_id ,  log_entry_description FROM problem_log\nHow much does the youngest dog weigh? => ", "response": "SELECT MIN(weight) FROM Pets WHERE PetType = 'Dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'Dog')"}
{"question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nFind the name and hours of the students whose tryout decision is yes. => SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\nWhat are the names of captains that have either the rank Midshipman or Lieutenant? => SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'\nWhat are the names of the aircraft that the least people are certified to fly? => SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\nList all product names in ascending order of price. => SELECT Product_Name FROM Products ORDER BY Product_Price ASC\nFind the titles of the papers that contain the word \"ML\". => SELECT title FROM papers WHERE title LIKE \"%ML%\"\nFind the maximum weight for each type of pet. List the maximum weight and pet type. => ", "response": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType"}
{"question": "List the maximum weight and type for each type of pet.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nFind all the distinct visit dates. => SELECT DISTINCT Visit_Date FROM VISITS\nWhat are the title and director of the films without any schedule? => SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\nCount the number of different characteristic names the product 'cumin' has. => SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"\nShow all payment method codes and the number of orders for each code. => SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code\nwhat is the last name and gender of all students who played both Call of Destiny and Works of Widenius? => SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")\nList the maximum weight and type for each type of pet. => ", "response": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType"}
{"question": "Find number of pets owned by students who are older than 20.", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nwhich countries have more than 2 airports? => SELECT country FROM airport GROUP BY country HAVING count(*)  >  2\nWhat are the first, middle, and last names of all individuals, ordered by last name? => SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name\nWhat is the average amount of items ordered in each order? => SELECT avg(order_quantity) FROM order_items\nFind the market shares and names of furnitures which no any company is producing in our records. => SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)\nFind the names of all the tracks that contain the word \"you\". => SELECT Name FROM TRACK WHERE Name LIKE '%you%'\nFind number of pets owned by students who are older than 20. => ", "response": "SELECT COUNT(*) FROM Has_Pet \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nINNER JOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20"}
{"question": "How many pets are owned by students that have an age greater than 20?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhat are the titles of all the albums? => SELECT title FROM albums;\ndisplay the first and last name, department, city, and state province for each employee. => SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id\nFind the name of the customers who have at most two orders. => SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2\nList the names of all the distinct product names in alphabetical order? => SELECT DISTINCT product_name FROM product ORDER BY product_name\nWhich month has the most happy hours? => SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1\nHow many pets are owned by students that have an age greater than 20? => ", "response": "SELECT COUNT(*) FROM pets_1.Has_Pet AS hp JOIN pets_1.Pets AS p ON hp.PetID = p.PetID JOIN pets_1.Student AS s ON hp.StuID = s.StuID WHERE s.Age > 20;"}
{"question": "Find the number of dog pets that are raised by female students (with sex F).", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nHow many calendar items do we have? => SELECT count(*) FROM Ref_calendar\nWhat is the name of the event that happened in the most recent year? => SELECT name FROM event ORDER BY YEAR DESC LIMIT 1\nWhat is all the information about employees who have never had a job in the past? => SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)\nWhat is the primary conference of the school that has the lowest acc percent score in the competition? => SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\nFor each classroom, show the classroom number and find how many students are using it. => SELECT classroom ,  count(*) FROM list GROUP BY classroom\nFind the number of dog pets that are raised by female students (with sex F). => ", "response": "SELECT COUNT(*) \nFROM Has_Pet hp \nJOIN Students s ON hp.StuID = s.StuID \nJOIN Pets p ON hp.PetID = p.PetID \nWHERE s.Sex = 'F' AND p.PetType = 'dog'"}
{"question": "How many dog pets are raised by female students?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nHow many customers in state of CA? => SELECT count(*) FROM customers WHERE state = \"CA\";\nWhat are the titles of the books whose writer is not \"Elaine Lee\"? => SELECT Title FROM book WHERE Writer != \"Elaine Lee\"\nList the names of all distinct nurses ordered by alphabetical order? => SELECT DISTINCT name FROM nurse ORDER BY name\nShow each location and the number of cinemas there. => SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION\nWhat are the names of all races held after 2000 in Spain? => SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000\nHow many dog pets are raised by female students? => ", "response": "SELECT COUNT(*) FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = \"Dog\" AND S.Sex = \"Female\""}
{"question": "Find the number of distinct type of pets.", "sql": "SELECT count(DISTINCT pettype) FROM pets", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nFind the state which has the most number of customers. => SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1\nHow many schools are in the basketball match? => SELECT count(DISTINCT school_id) FROM basketball_match\nShow the country names and the corresponding number of players. => SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\nHow many drivers did not participate in the races held in 2009? => SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )\nShow names for all employees who do not have certificate of Boeing 737-800. => SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"\nFind the number of distinct type of pets. => ", "response": "SELECT COUNT(DISTINCT PetType) FROM pets_1.Pets"}
{"question": "How many different types of pet are there?", "sql": "SELECT count(DISTINCT pettype) FROM pets", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhat are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate. => SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5\nWhat are the distinct types of mills that are built by American or Canadian architects? => SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'\nWhich document has the most draft copies? List its document id and number of draft copies. => SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;\nCount the number of artists. => SELECT count(*) FROM artist\nWhat is the average salary for each job title? => SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title\nHow many different types of pet are there? => ", "response": "SELECT COUNT(DISTINCT PetType) FROM Pets;"}
{"question": "Find the first name of students who have cat or dog pet.", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhich cmi cross reference id is not related to any parking taxes? => SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines\nWhat are the details and id of the project with the most outcomes? => SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\nFind the states of the colleges that have students in the tryout who played in striker position. => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'\nList the official names of cities that have not held any competition. => SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)\nFind the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"? => SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"\nFind the first name of students who have cat or dog pet. => ", "response": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog')"}
{"question": "What are the first names of every student who has a cat or dog as a pet?", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhich vocal type is the most frequently appearring type? => SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nWhat is the name of the deparment with the highest enrollment? => SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1\nFind the full name of employee who supported the most number of customers. => SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nWhat are the ids for all sporty students who are on scholarship? => SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'\nFind the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. => SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\nWhat are the first names of every student who has a cat or dog as a pet? => ", "response": "SELECT DISTINCT T1.FName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat','dog')"}
{"question": "Find the first name of students who have both cat and dog pets .", "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nList the names and birthdays of the top five players in terms of potential. => SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5\nWhat is average lesson price taught by staff with first name as Janessa and last name as Sawayn? => SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nWhat are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000? => SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000\nHow many tracks does each genre have and what are the names of the top 5? => SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;\nWhat is the average pages per minute color? => SELECT avg(pages_per_minute_color) FROM product\nFind the first name of students who have both cat and dog pets . => ", "response": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T1.StuID IN (SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog');"}
{"question": "What are the students' first names who have both cats and dogs as pets?", "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nShow each author and the number of workshops they submitted to. => SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author\nList the project details of the projects launched by the organisation => SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )\nShow details of all visitors. => SELECT Tourist_Details FROM VISITORS\nWhich course is enrolled in by the most students? Give me the course name. => SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\nWhich grade is studying in classroom 103? => SELECT DISTINCT grade FROM list WHERE classroom  =  103\nWhat are the students' first names who have both cats and dogs as pets? => ", "response": "SELECT S.Fname FROM Student AS S JOIN Has_Pet AS HP1 ON S.StuID=HP1.StuID JOIN Pets AS P1 ON P1.PetID=HP1.PetID AND P1.PetType='cat' JOIN Has_Pet AS HP2 ON S.StuID=HP2.StuID JOIN Pets AS P2 ON P2.PetID=HP2.PetID AND P2.PetType='dog'"}
{"question": "Find the major and age of students who do not have a cat pet.", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhich parties have more than 20 hosts? Give me the host names for these parties. => SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\nWhat are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20? => SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20\nSelect the names of all the products in the store. => SELECT Name FROM Products\nHow many churches opened before 1850 are there? => SELECT count(*) FROM Church WHERE Open_Date  <  1850\nHow many events are there? => SELECT count(*) FROM event\nFind the major and age of students who do not have a cat pet. => ", "response": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))"}
{"question": "What major is every student who does not own a cat as a pet, and also how old are they?", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nList all tracks bought by customer Daan Peeters. => SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";\nWhat are the login names of the students with family name \"Ward\"? => SELECT login_name FROM Students WHERE family_name  =  \"Ward\"\nWhat is the description of document type 'Paper'? => SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";\nList all the customers in increasing order of IDs. => SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\nWhat are the course codes for every class that the student with the last name Smithson took? => SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'\nWhat major is every student who does not own a cat as a pet, and also how old are they? => ", "response": "SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType='Cat')"}
{"question": "Find the id of students who do not have a cat pet.", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nList the first and last name for players who participated in all star game in 1998. => SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998\nWhat is the unit of measurement of product named \"cumin\"? => SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"\nShow the official names of the cities that have hosted more than one competition. => SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\nhow many airports are there in each country? => SELECT count(*) ,  country FROM airport GROUP BY country\nWhat is the last name and office of the professor from the history department? => SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'\nFind the id of students who do not have a cat pet. => ", "response": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')"}
{"question": "What are the ids of the students who do not own cats as pets?", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhat is the most common hometown of gymnasts? => SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\nFind the name of customers who do not have a loan with a type of Mortgages. => SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'\nWhich category does the product named \"flax\" belong to? => SELECT product_category_code FROM products WHERE product_name  =  \"flax\"\nTell me the booking status code for the apartment with number \"Suite 634\". => SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"\nReturn the cities with more than 3 airports in the United States. => SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3\nWhat are the ids of the students who do not own cats as pets? => ", "response": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')"}
{"question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nList the names of shops that have no devices in stock. => SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)\nFind the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix? => SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\nReturn the total number of distinct customers. => SELECT count(*) FROM customers\nWhat are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there? => SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"\nFind the number of papers published by authors from the institution \"Tokohu University\". => SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"\nFind the first name and age of students who have a dog but do not have a cat as a pet. => ", "response": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"dog\")) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"cat\"))"}
{"question": "What is the first name of every student who has a dog but does not have a cat?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhat is the title of the course that was offered at building Chandler during the fall semester in the year of 2010? => SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010\nFind the names of customers who never ordered product Latte. => SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'\nList the locations of schools that do not have any player. => SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)\nWhat is the id, name and IATA code of the airport that had most number of flights? => SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\nHow many video games have type Massively multiplayer online game? => SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"\nWhat is the first name of every student who has a dog but does not have a cat? => ", "response": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType  =  \"Dog\")) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType  =  \"Cat\"))"}
{"question": "Find the type and weight of the youngest pet.", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nList the names of the city with the top 5 white percentages. => SELECT Name FROM city ORDER BY White DESC LIMIT 5\nFind the names of the swimmers who have both \"win\" and \"loss\" results in the record. => SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'\nFind the names of schools that have more than one donator with donation amount above 8.5. => SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1\nFind the name of all the cities and states. => SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses\nCount the number of markets that have a number of cities lower than 300. => SELECT count(*) FROM market WHERE Number_cities  <  300\nFind the type and weight of the youngest pet. => ", "response": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets) LIMIT 1"}
{"question": "What type of pet is the youngest animal, and how much does it weigh?", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nShow the nations that have both hosts older than 45 and hosts younger than 35. => SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\nShow the names of artworks in ascending order of the year they are nominated in. => SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year\nFind the state which has the most number of customers. => SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1\nWhich assets did not incur any fault log? List the asset model. => SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)\nWhat are the names and years released for the movies with the top 3 highest ratings? => SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\nWhat type of pet is the youngest animal, and how much does it weigh? => ", "response": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets) LIMIT 1"}
{"question": "Find the id and weight of all pets whose age is older than 1.", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhat are the employee ids for each employee and final dates of employment at their last job? => SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\nWhat are the names of the technicians  and how many machines are they assigned to repair? => SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name\nCount the number of clubs located at \"HHH\". => SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"\nWhat are the names of all the aircrafts associated with London Gatwick airport? => SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"\nWhat are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains? => SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\"\nFind the id and weight of all pets whose age is older than 1. => ", "response": "SELECT PetID, weight FROM Pets WHERE pet_age > 1"}
{"question": "What is the id and weight of every pet who is older than 1?", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nwhat are the last names of the teachers who teach grade 5? => SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5\nWhat are the ids of all male students who do not play football? => SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\nWhat are all the friends of Alice who are female? => SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'\nReturn the name and job title of the staff with the latest date assigned. => SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1\nShow all allergy types and the number of allergies in each type. => SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\nWhat is the id and weight of every pet who is older than 1? => ", "response": "SELECT PetID, weight FROM Pets WHERE pet_age > 1"}
{"question": "Find the average and maximum age for each type of pet.", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nFind the number of distinct room types available. => SELECT count(DISTINCT roomtype) FROM room\nWhat is the document status description of the document with id 1? => SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;\nReturn the average gross sales in dollars across all films. => SELECT avg(Gross_in_dollar) FROM film\nFind the total number of king beds available. => SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\nWhat are the first names of all professors who teach more than one class? => SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1\nFind the average and maximum age for each type of pet. => ", "response": "SELECT Pets.PetType, avg(Pets.pet_age) as avg_age, max(Pets.pet_age) as max_age FROM Pets JOIN Has_Pet ON Has_Pet.PetID = Pets.PetID GROUP BY Pets.PetType;"}
{"question": "What is the average and maximum age for each pet type?", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhat are the hosts of competitions whose theme is not \"Aliens\"? => SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\nGive the songs included in volumes that have more than 1 week on top. => SELECT Song FROM volume WHERE Weeks_on_Top  >  1\nWhat are the countries for each market ordered by decreasing number of cities? => SELECT Country FROM market ORDER BY Number_cities DESC\nWhat is the total revenue of each manufacturer? => SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name\nShow the most common apartment type code among apartments with more than 1 bathroom. => SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\nWhat is the average and maximum age for each pet type? => ", "response": "SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType"}
{"question": "Find the average weight for each pet type.", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nCount the number of members in club \"Bootup Baltimore\" whose age is below 18. => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18\nList the first name and last name of all customers. => SELECT first_name ,  last_name FROM Customers;\nFor each zip code, return the average mean temperature of August there. => SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code\nWhat are the maximum scores the team Boston Red Stockings got when the team won in postseason? => SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';\nWhat are the first name and major of the students who are able to consume soy? => SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\nFind the average weight for each pet type. => ", "response": "SELECT PetType ,  avg(weight) FROM Pets GROUP BY PetType"}
{"question": "What is the average weight for each type of pet?", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nList the date of perpetrators in descending order of the number of people killed. => SELECT Date FROM perpetrator ORDER BY Killed DESC\nShow all product names and the total quantity ordered for each product name. => SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name\nGive me the average prices of wines that are produced by appelations in Sonoma County. => SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"\nWhat is the name of the tourist attraction that is associated with the photo \"game1\"? => SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"\nWhat are the names and buildings of the deparments, sorted by budget descending? => SELECT dept_name ,  building FROM department ORDER BY budget DESC\nWhat is the average weight for each type of pet? => ", "response": "SELECT PetType ,  AVG(weight) FROM Pets GROUP BY PetType"}
{"question": "Find the first name and age of students who have a pet.", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nList all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name. => SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name\nHow many employees are there all together? => SELECT count(*) FROM employee\nWhat is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in. => SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID\nHow many students does each advisor have? => SELECT advisor ,  count(*) FROM Student GROUP BY advisor\nWhat are the different film Directors? => SELECT DISTINCT Director FROM film\nFind the first name and age of students who have a pet. => ", "response": "SELECT Student.FName, Student.Age \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID"}
{"question": "What are the different first names and ages of the students who do have pets?", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nList all the login names and family names of course author and tutors. => SELECT login_name ,  family_name FROM Course_Authors_and_Tutors\nWhat are the names of the all-female dorms? => SELECT dorm_name FROM dorm WHERE gender  =  'F'\nShow the names of trains and locations of railways they are in. => SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID\nList the camera lens names containing substring \"Digital\". => SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"\nWhat are the product names with average product price smaller than 1000000? => SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000\nWhat are the different first names and ages of the students who do have pets? => ", "response": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID ORDER BY Student.Fname"}
{"question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nFind the name of the swimmer who has the most records. => SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1\nFor each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season. => SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC\nFind the names of nurses who are nursing an undergoing treatment. => SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID\nShow all opening years and the number of churches that opened in that year. => SELECT open_date ,  count(*) FROM church GROUP BY open_date\nFind the names of users who have more than one tweet. => SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\nFind the id of the pet owned by student whose last name is \u2018Smith\u2019. => ", "response": "SELECT T3.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.LName = 'Smith'"}
{"question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nShow gas station id, location, and manager_name for all gas stations ordered by open year. => SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year\nWhat are the names of the courses taught by the tutor whose personal name is \"Julio\"? => SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"\nPlease give me a list of cities whose regional population is over 8000000 or under 5000000. => SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000\nWhat are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate. => SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5\nWhat are the names of all the media types? => SELECT name FROM media_types;\nWhat is the id of the pet owned by the student whose last name is 'Smith'? => ", "response": "SELECT P.PetID FROM Has_Pet AS HP INNER JOIN Pets AS P ON HP.PetID = P.PetID INNER JOIN Student AS S ON HP.StuID = S.StuID WHERE S.LName = 'Smith'"}
{"question": "Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhich cities' temperature in March is lower than that in July or higher than that in Oct? => SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct\nWhat are the classes of races that have two or more corresponding races? => SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\nWhat are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id? => SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id\nWhat is the name of the media type that is least common across all tracks? => SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1\nShow distinct first and last names for all customers with an account. => SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\nFind the number of pets for each student who has any pet and student id. => ", "response": "SELECT Has_Pet.StuID, COUNT(Pets.PetID) AS num_of_pets \nFROM Has_Pet \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nGROUP BY Has_Pet.StuID"}
{"question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nHow many trips did not end in San Francisco? => SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"\nShow origins of all flights with destination Honolulu. => SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"\nWhat are the positions of both players that have more than 20 20 points and less than 10 points? => SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10\nWhat is the author of the submission with the highest score? => SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1\nFind the number of distinct courses that have enrolled students. => SELECT count(course_id) FROM Student_Course_Enrolment\nFor students who have pets , how many pets does each student have ? list their ids instead of names . => ", "response": "SELECT Student.StuID, COUNT(Pets.PetID) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nGROUP BY Student.StuID"}
{"question": "Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nCompute the average number of hosts for parties. => SELECT avg(Number_of_hosts) FROM party\nReturn the address and email of the customer with the first name Linda. => SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'\nPlease show the results of music festivals and the number of music festivals that have had each, ordered by this count. => SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC\nFind the name and account balance of the customer whose name includes the letter \u2018a\u2019. => SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'\nHow many bookings do we have? => SELECT count(*) FROM BOOKINGS\nFind the first name and gender of student who have more than one pet. => ", "response": "SELECT Student.Fname, Student.Sex FROM Student WHERE Student.StuID IN \n(SELECT Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID HAVING COUNT(*) > 1)"}
{"question": "What is the first name and gender of the all the students who have more than one pet?", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nHow many voting records do we have? => SELECT count(*) FROM VOTING_RECORD\nReturn the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'. => SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\nFind the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance. => SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)\nReturn the name of the artist who has the latest join year. => SELECT name FROM artist ORDER BY year_join DESC LIMIT 1\nWhat are the name and the nationality of the host of the highest age? => SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1\nWhat is the first name and gender of the all the students who have more than one pet? => ", "response": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)"}
{"question": "Find the last name of the student who has a cat that is age 3.", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nFind the policy type the most customers choose. => SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1\nShow all information on the airport that has the largest number of international passengers. => SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1\nCount the number of students who did not enroll in any course. => SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)\nList the campus that have between 600 and 1000 faculty lines in year 2004. => SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004\nwhat are the top 3 highest support rates? => SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\nFind the last name of the student who has a cat that is age 3. => ", "response": "SELECT s.LName FROM Student AS s JOIN Has_Pet AS hp ON s.StuID = hp.StuID JOIN Pets AS p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3 LIMIT 1"}
{"question": "What is the last name of the student who has a cat that is 3 years old?", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nWhich countries has the most number of airlines? => SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1\nFind the number of people who is under 40 for each gender. => SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender\nShow the product name and total order quantity for each product. => SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id\nShow all cities along with the number of drama workshop groups in each city. => SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town\nWhat are the wifi and screen mode type of the hardware model named \"LG-P760\"? => SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";\nWhat is the last name of the student who has a cat that is 3 years old? => ", "response": "SELECT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'Cat' AND P.pet_age = 3;"}
{"question": "Find the average age of students who do not have any pet .", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nHow many companies are in either \"Banking\" industry or \"Conglomerate\" industry? => SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"\nWhat is the name and job title of the staff who was assigned the latest? => SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1\nWhich party had the most hosts? Give me the party location. => SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1\nWhat are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order. => SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details\nFind the name and email of the user whose name contains the word \u2018Swift\u2019. => SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'\nFind the average age of students who do not have any pet . => ", "response": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN(SELECT StuID FROM Has_Pet)"}
{"question": "What is the average age for all students who do not own any pets ?", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "prompt": "Given a database 'pets_1' have 3 tables named 'Student', 'Has_Pet', 'Pets'. Student tbl have columns: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'. Has_Pet tbl have columns: 'StuID', 'PetID'. Pets tbl have columns: 'PetID', 'PetType', 'pet_age', 'weight'. \nTranslate text to SQL: \nCount the number of captains younger than 50 of each rank. => SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank\nWhat are the total scores of the body builders whose birthday contains the string \"January\" ? => SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";\nHow many credits does course CIS-220 have, and what its description? => SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'\nShow institution types, along with the number of institutions and total enrollment for each type. => SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE\nShow the most common apartment type code among apartments with more than 1 bathroom. => SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\nWhat is the average age for all students who do not own any pets ? => ", "response": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)"}
{"question": "How many continents are there?", "sql": "SELECT count(*) FROM CONTINENTS;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nHow many flights do we have? => SELECT count(*) FROM Flight\nShow all card type codes and the number of cards in each type. => SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\nFind the number of rooms for each bed type. => SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;\nGive me the name of the customer who ordered the most items in total. => SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\nShow the account id and name with at least 4 transactions. => SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\nHow many continents are there? => ", "response": "SELECT count(*) FROM continents"}
{"question": "What is the number of continents?", "sql": "SELECT count(*) FROM CONTINENTS;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the full name of employee who supported the most number of customers. => SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nHow many professors have a Ph.D. in each department? => SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code\nWhat are the names of races that were held after 2017 and the circuits were in the country of Spain? => SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017\nWhat are the date and venue of each debate? => SELECT Date ,  Venue FROM debate\nHow many products are there under the category \"Seeds\"? => SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"\nWhat is the number of continents? => ", "response": "SELECT count(*) FROM continents"}
{"question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are full names and salaries of employees working in the city of London? => SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'\nWhat is the average duration of songs that have mp3 format and resolution below 800? => SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800\nWhat is the salaray and name of the employee that is certified to fly the most planes? => SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\nWhat is the date of birth of every customer whose status code is 'Good Customer'? => SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'\nWho is the director of movie Avatar? => SELECT director FROM Movie WHERE title  = 'Avatar'\nHow many countries does each continent have? List the continent id, continent name and the number of countries. => ", "response": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) \nFROM continents AS c \nLEFT JOIN countries AS co \nON c.Continent = co.Continent \nGROUP BY c.ContId, c.Continent"}
{"question": "For each continent, list its id, name, and how many countries it has?", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the official names of cities that have not hosted a farm competition? => SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)\nWhich customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details. => SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"\nWhich rank is the most common among captains? => SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1\nWhat are the names of the pilots in alphabetical order? => SELECT Name FROM pilot ORDER BY Name ASC\nFind the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco. => SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"\nFor each continent, list its id, name, and how many countries it has? => ", "response": "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS 'Number_Of_Countries'\nFROM continents LEFT JOIN countries ON continents.ContId = countries.Continent\nGROUP BY continents.ContId, continents.Continent"}
{"question": "How many countries are listed?", "sql": "SELECT count(*) FROM COUNTRIES;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the names of the dorm that does not have a TV Lounge? => SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\nReturn the average number of weeks on top for volumes by artists that are at most 25 years old. => SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25\nWhat are the name and id of the three highest priced rooms? => SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;\nShow the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64. => SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64\nWhat are the names of instructors who didn't teach courses in the Spring? => SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\nHow many countries are listed? => ", "response": "SELECT COUNT(*) FROM countries"}
{"question": "How many countries exist?", "sql": "SELECT count(*) FROM COUNTRIES;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the details of the car with id 1? => SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;\nShow each author and the number of workshops they submitted to. => SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author\nHow many times in total did the team Boston Red Stockings participate in postseason games? => SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );\nList the ids of the problems from the product \"voluptatem\" that are reported after 1995? => SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"\nWhat are the full names of students minoring in department 140? => SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140\nHow many countries exist? => ", "response": "SELECT COUNT(*) FROM countries;"}
{"question": "How many models does each car maker produce? List maker full name, id and the number.", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nwhat are the employee ids and job titles for employees in department 80? => SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80\nPlease show different types of artworks with the corresponding number of artworks of each type. => SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE\nWhich customers have both \"On Road\" and \"Shipped\" as order status? List the customer names. => SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"\nCount the number of characteristics of the 'flax' product. => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"\nWhat is the id and name of the enzyme that can interact with the most medicines as an activator? => SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nHow many models does each car maker produce? List maker full name, id and the number. => ", "response": "SELECT T1.FullName, T1.Id, COUNT(T2.ModelId) AS num_of_models FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Maker = T2.Maker GROUP BY T1.Id, T1.FullName"}
{"question": "What is the full name of each car maker, along with its id and how many models it produces?", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the names of teams from universities that have a below average enrollment? => SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)\nFind the max and min grade point for all letter grade. => SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION\nList the full name (first and last name), and salary for those employees who earn below 6000. => SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000\nWhat are the names of all students who took a class and the corresponding course descriptions? => SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code\nShow the name of track with most number of races. => SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\nWhat is the full name of each car maker, along with its id and how many models it produces? => ", "response": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS num_models FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName"}
{"question": "Which model of the car has the minimum horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the distinct names of nurses on call? => SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse\nHow many counties are there in total? => SELECT count(*) FROM county\nWhat type of game is Call of Destiny? => SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"\nShow customer ids who don't have an account. => SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts\nHow many statements do we have? => SELECT count(*) FROM Statements\nWhich model of the car has the minimum horsepower? => ", "response": "SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)"}
{"question": "What is the model of the car with the smallest amount of horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the names of the candidates whose support percentage is lower than their oppose rate. => SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\nWhich customers do not have any policies? Find the details of these customers. => SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id\nWhat are the names of all clubs that do not have any players? => SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\nShow the names of customers who use Credit Card payment method and have more than 2 orders. => SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2\nWhat are the first names of all the students? => SELECT DISTINCT fname FROM student\nWhat is the model of the car with the smallest amount of horsepower? => ", "response": "SELECT Model FROM cars_data WHERE Horsepower  =  (SELECT MIN(Horsepower) FROM cars_data)"}
{"question": "Find the model of the car whose weight is below the average weight.", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the ids, scores, and dates of the games which caused at least two injury accidents? => SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\nHow many female students (sex is F) whose age is below 25? => SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\nShow the transaction type code that occurs the fewest times. => SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1\nFind the number of different cities which banks are located at. => SELECT count(DISTINCT city) FROM bank\nWhat is the last name of the youngest student? => SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\nFind the model of the car whose weight is below the average weight. => ", "response": "SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)"}
{"question": "What is the model for the car with a weight smaller than the average?", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nHow many different products correspond to each order id? => SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id\nWhich movies have 'Deleted Scenes' as a substring in the special feature? => SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'\nShow the names and total passengers for all train stations not in London. => SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'\nWhat are the total number of the audiences who visited any of the festivals? => SELECT sum(Num_of_Audience) FROM festival_detail\nHow many products are there in the records? => SELECT count(*) FROM catalog_contents\nWhat is the model for the car with a weight smaller than the average? => ", "response": "SELECT Model FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)"}
{"question": "Find the name of the makers that produced some cars in the year of 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the average distance and price for all flights from LA? => SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\nHow many unique classes are offered? => SELECT count(DISTINCT class_code) FROM CLASS\nWhat is the first name of the band mate who perfomed in the most songs? => SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1\nWhich film has the most copies in the inventory? List both title and id. => SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\nHow many coaches does each club has? List the club id, name and the number of coaches. => SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\nFind the name of the makers that produced some cars in the year of 1970? => ", "response": "SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT DISTINCT Id FROM cars_data WHERE Year = 1970)"}
{"question": "What is the name of the different car makers who produced a car in 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nHow many songs, on average, are sung by a female artist? => SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"\nCompute the average profits companies make. => SELECT avg(Profits_billion) FROM Companies\nFind the full name and id of the college that has the most baseball players. => SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\nWhat is the position that is most common among players in match seasons? => SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1\nWhat is the name of the youngest editor? => SELECT Name FROM editor ORDER BY Age ASC LIMIT 1\nWhat is the name of the different car makers who produced a car in 1970? => ", "response": "SELECT DISTINCT T3.Maker FROM cars_data as T1 JOIN model_list as T2 ON T1.Id = T2.ModelId JOIN car_makers as T3 ON T2.Maker = T3.Maker WHERE T1.Year = 1970"}
{"question": "Find the make and production time of the cars that were produced in the earliest year?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nList the name of tracks belongs to genre Rock or media type is MPEG audio file. => SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";\nFind the number of rooms with a king bed. => SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\nWhich assets did not incur any fault log? List the asset model. => SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)\nFind the name and partition id for users who tweeted less than twice. => SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2\nWhat is the average number of pages per minute color? => SELECT avg(pages_per_minute_color) FROM product\nFind the make and production time of the cars that were produced in the earliest year? => ", "response": "SELECT car_makers.Maker, cars_data.Year \nFROM car_makers \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nORDER BY cars_data.Year ASC \nLIMIT 1;"}
{"question": "What is the maker of the carr produced in the earliest year and what year was it?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the vocal types used in song \"Le Pop\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\nWhat are the names of body builders? => SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\nShow member names that are not in the Progress Party. => SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"\nHow many female students (sex is F) whose age is below 25? => SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\nHow many airlines operate out of each country in descending order? => SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC\nWhat is the maker of the carr produced in the earliest year and what year was it? => ", "response": "SELECT Maker, Year FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id ORDER BY Year ASC LIMIT 1"}
{"question": "Which distinct car models are the produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nHow many different card types are there? => SELECT count(DISTINCT card_type_code) FROM Customers_Cards\nFind the number of records of each policy type and its type code. => SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code\nWhat are the names and locations of all enzymes listed? => SELECT name ,  LOCATION FROM enzyme\nWhat is the average price of the products for each category? => SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code\nWhat are the student ids for all male students? => SELECT StuID FROM Student WHERE Sex  =  'M'\nWhich distinct car models are the produced after 1980? => ", "response": "SELECT DISTINCT Model FROM cars_data \nWHERE Year > 1980"}
{"question": "What are the different models for the cards produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the name of the course that has the most student enrollment? => SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\nHow many film are there? => SELECT count(*) FROM film\nWhat are the payment method codes that have been used by more than 3 parties? => SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3\nWhich grade is studying in room 105? => SELECT DISTINCT grade FROM list WHERE classroom  =  105\nWhat are the heights of body builders with total score smaller than 315? => SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315\nWhat are the different models for the cards produced after 1980? => ", "response": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE car_makers.Year > 1980"}
{"question": "How many car makers are there in each continents? List the continent name and the count.", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhich policy type has the most records in the database? => SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\nList the name of all products along with the number of complaints that they have received. => SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name\nShow all locations with only 1 station. => SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1\nWhen was the order placed whose shipment tracking number is 3452? Give me the date. => SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452\nHow many players enter hall of fame each year? => SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;\nHow many car makers are there in each continents? List the continent name and the count. => ", "response": "SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) FROM continents\nLEFT JOIN countries ON continents.ContId = countries.Continent\nLEFT JOIN car_makers ON countries.CountryName = car_makers.Country\nGROUP BY continents.Continent"}
{"question": "What is the name of each continent and how many car makers are there in each one?", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the apartment number and the room count of each apartment? => SELECT apt_number ,  room_count FROM Apartments\nShow the document name and the document date for all documents on project with details 'Graph Database project'. => SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'\nWhat is the name of the shipping agent of the document with id 2? => SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;\nFor each team, how many technicians are there? => SELECT Team ,  COUNT(*) FROM technician GROUP BY Team\nList the hosts of performances in ascending order of attendance. => SELECT HOST FROM performance ORDER BY Attendance ASC\nWhat is the name of each continent and how many car makers are there in each one? => ", "response": "SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS 'Number of car makers' \nFROM continents \nLEFT JOIN countries ON continents.ContId = countries.Continent \nLEFT JOIN car_makers ON countries.CountryName = car_makers.Country \nGROUP BY continents.Continent"}
{"question": "Which of the countries has the most car makers? List the country name.", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nHow many aircrafts are there? => SELECT count(*) FROM aircraft\nFind the city that hosted the most events. => SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1\nWhat document types have more than 2 corresponding documents? => SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2\nWhat is the nickname of staff with first name as Janessa and last name as Sawayn? => SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\nWhat is the detail of the location UK Gallery? => SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\nWhich of the countries has the most car makers? List the country name. => ", "response": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country GROUP BY T2.Country ORDER BY count(*) DESC LIMIT 1"}
{"question": "What is the name of the country with the most car makers?", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the first name of the professor who is teaching two courses with code CIS-220 and QM-261. => SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'\nWhat are the member names and hometowns of those who registered at a branch in 2016? => SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016\nList the document type code for the document with the id 2. => SELECT document_type_code FROM Documents WHERE document_id = 2;\nFind the names of all artists that have \"a\" in their names. => SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\nList the research staff details, and order in ascending order. => SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC\nWhat is the name of the country with the most car makers? => ", "response": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId ORDER BY COUNT(DISTINCT car_makers.Maker) DESC LIMIT 1"}
{"question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhich city has the lowest GDP? Please list the city name and its GDP. => SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1\nWho are the players that have names containing the letter a? => SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'\nFind the name of the nurse who has the largest number of appointments. => SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1\nHow many films have the word 'Dummy' in their titles? => SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\nWhat are the names for all aircrafts with at least 2 flights? => SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\nHow many car models are produced by each maker ? Only list the count and the maker full name . => ", "response": "SELECT COUNT(model_list.ModelId) AS ModelCount, car_makers.FullName\nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nGROUP BY car_makers.FullName"}
{"question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the most common status across all cities? => SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\nCount the number of distinct delegates who are from counties with population above 50000. => SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000\nFind all the ids and dates of the logs for the problem whose id is 10. => SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10\nList the names of phones in ascending order of price. => SELECT Name FROM phone ORDER BY Price ASC\nList the names of journalists who have not reported any event. => SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)\nWhat is the number of car models that are produced by each maker and what is the id and full name of each maker? => ", "response": "SELECT car_makers.Id, car_makers.FullName, COUNT(DISTINCT model_list.Model) AS num_of_models\nFROM car_makers\nLEFT JOIN model_list ON car_makers.Maker = model_list.Maker\nGROUP BY car_makers.Id, car_makers.FullName"}
{"question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the id of the department with the least number of staff? => SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1\nCount the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10. => SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10\nWhat is the name of each course and the corresponding number of student enrollment? => SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\nHow many document types are there? => SELECT count(*) FROM Ref_document_types\nShow the names of journalists that have reported more than one event. => SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1\nWhat is the accelerate of the car make amc hornet sportabout (sw)? => ", "response": "SELECT Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'hornet sportabout (sw)' AND T2.Make = 'amc'"}
{"question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nHow many problems are there for product voluptatem? => SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"\nFind the number of scientists involved for each project name. => SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name\nFind the names of goods that receive a rating of 10. => SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10\nWhat is the party of the youngest people? => SELECT Party FROM people ORDER BY Age ASC LIMIT 1\nFind the name of the user who tweeted more than once, and number of tweets tweeted by them. => SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\nHow much does the car accelerate that makes amc hornet sportabout (sw)? => ", "response": "SELECT Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model AND T2.Maker = T3.Maker WHERE T2.Make = \"amc hornet sportabout (sw)\""}
{"question": "How many car makers are there in france?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the ids of products from the supplier with id 2, which are more expensive than the average price across all products? => SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)\nShow names for all aircraft with at least two flights. => SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\nWhat destination has the fewest number of flights? => SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\nShow each location and the number of cinemas there. => SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION\nWhat is the date of birth of every customer whose status code is 'Good Customer'? => SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'\nHow many car makers are there in france? => ", "response": "SELECT COUNT(*) FROM car_makers WHERE Country = 'France'"}
{"question": "What is the number of makers of care in France?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nShow the names of members in ascending order of their rank in rounds. => SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC\nList the names of all the physicians who prescribe Thesisin as medication. => SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"\nGive the country id and corresponding count of cities in each country. => SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id\nList total amount of  invoice from Chicago, IL. => SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\nWhat are the first names and office locations for all professors sorted alphabetically by first name? => SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname\nWhat is the number of makers of care in France? => ", "response": "SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = \"France\""}
{"question": "How many car models are produced in the usa?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the building that has the largest number of faculty members. => SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1\nShow the cinema name and location for cinemas with capacity above average. => SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)\nList the name of ships whose nationality is not \"United States\". => SELECT Name FROM ship WHERE Nationality != \"United States\"\nWhat is all the information about courses, ordered by credits ascending? => SELECT * FROM COURSE ORDER BY Credits\nFind the average age of students living in each dorm and the name of dorm. => SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name\nHow many car models are produced in the usa? => ", "response": "SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'usa')"}
{"question": "What is the count of the car models produced in the United States?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nCount the number of members in club \"Bootup Baltimore\" whose age is above 18. => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18\nList the names of aircrafts and that won matches at least twice. => SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2\nIn which state is the college that Charles attends? => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'\nHow many appelations are in Napa Country? => SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\nWhat are the names and account balances of customers with the letter a in their names? => SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'\nWhat is the count of the car models produced in the United States? => ", "response": "SELECT COUNT(*) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN car_makers AS T3 ON T2.Model = T3.Maker WHERE T3.Country = \"United States\""}
{"question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat campus has the most faculties in 2003? => SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\nList the type of bed and name of all traditional rooms. => SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";\nList the names of pilots that do not have any record. => SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)\nHow many parks are there in the state of NY? => SELECT count(*) FROM park WHERE state  =  'NY';\nWhat are the names and account balances for customers who have taken a total amount of more than 5000 in loans? => SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000\nWhat is the average miles per gallon(mpg) of the cars with 4 cylinders? => ", "response": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;"}
{"question": "What is the average miles per gallon of all the cards with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nShow institution types, along with the number of institutions and total enrollment for each type. => SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE\nWhat are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending? => SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC\nHow many races are there? => SELECT count(*) FROM race\nWhat are the countries that contain 3 or more cities? => SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3\nWhat are the names of all pilots listed by descending age? => SELECT Name FROM pilot ORDER BY Age DESC\nWhat is the average miles per gallon of all the cards with 4 cylinders? => ", "response": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4"}
{"question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the details of all the distinct customers who have orders with status \"On Road\". => SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"\nShow the average amount of transactions with type code \"SALE\". => SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"\nFor each grade 0 classroom, return the classroom number and the count of students. => SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom\nWhat is the theme and artist name for the exhibition with a ticket price higher than the average? => SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\nWhat are the hometowns that are shared by at least two gymnasts? => SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\nWhat is the smallest weight of the car produced with 8 cylinders on 1974 ? => ", "response": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974"}
{"question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the names of members who are not in charge of any events? => SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\nList all public schools and their locations. => SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'\nHow many distinct colleges are associated with players from the team with name \"Columbus Crew\". => SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\nShow the average price of hotels for each star rating code. => SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code\nFind the name and description of the role with code \"MG\". => SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"\nWhat is the minimum weight of the car with 8 cylinders produced in 1974 ? => ", "response": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974"}
{"question": "What are all the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the years of opening for tracks with seating between 4000 and 5000? => SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\nHow many distinct payment methods are used by parties? => SELECT count(DISTINCT payment_method_code) FROM parties\nWhat are the areas and counties for all appelations? => SELECT Area ,  County FROM APPELLATIONS\nHow many parks are there in the state of NY? => SELECT count(*) FROM park WHERE state  =  'NY';\nWhat is the salaray and name of the employee that is certified to fly the most planes? => SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\nWhat are all the makers and models? => ", "response": "SELECT Maker, Model FROM car_makers INNER JOIN model_list ON car_makers.Maker = model_list.Maker"}
{"question": "What are the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the average snatch score of body builders? => SELECT avg(Snatch) FROM body_builder\nWhat are the distinct unit prices of all tracks? => SELECT distinct(UnitPrice) FROM TRACK\nHow many faculty members participate in an activity? => SELECT count(DISTINCT FacID) FROM Faculty_participates_in\nFrom what date and to what date do the staff work on a project that has the most staff and has staff in a leader role? => SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'\nWhat are the full names and ages for all female students whose sex is F? => SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\nWhat are the makers and models? => ", "response": "SELECT Maker, Model FROM car_makers INNER JOIN model_list ON car_makers.FullName = model_list.Maker INNER JOIN car_names ON car_makers.Id = car_names.MakeId"}
{"question": "What are the countries having at least one car maker? List name and id.", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nList the names and origins of people who are not body builders. => SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id\nReturn the title and inventory id of the film that is rented most often. => SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1\nWhat are names of the movies that are either made after 2000 or reviewed by Brittany Harris? => SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000\nShow names for all employees with salary more than the average. => SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\nWhat are the names of students who have taken Statistics courses? => SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'\nWhat are the countries having at least one car maker? List name and id. => ", "response": "SELECT DISTINCT C.CountryName, C.CountryId \nFROM countries AS C \nJOIN car_makers AS CM ON C.CountryId = CM.CountryId"}
{"question": "What are the names and ids of all countries with at least one car maker?", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the average balance in checking accounts? => SELECT avg(balance) FROM checking\nFind the list of documents that are both in the most three popular type and have the most three popular structure. => SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\nWhat instruments did the musician with the last name \"Heilo\" play in \"Badlands\"? => SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"\nWhich tourist attraction is associated with the photo \"game1\"? Return its name. => SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"\nCount the number of artists. => SELECT count(*) FROM artist\nWhat are the names and ids of all countries with at least one car maker? => ", "response": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)"}
{"question": "What is the number of the cars with horsepower more than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nReturn the names and ids of all products whose price is between 600 and 700. => SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\nShow all titles and their instructors' names for courses in 2008, in alphabetical order by title. => SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title\nFind number of tracks in each genre? => SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;\ndisplay the department name and number of employees in each of the department. => SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name\nList the names of people that are not employed by any company => SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)\nWhat is the number of the cars with horsepower more than 150? => ", "response": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150"}
{"question": "What is the number of cars with a horsepower greater than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nPlease show the results of music festivals and the number of music festivals that have had each, ordered by this count. => SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC\nFor each election cycle, report the number of voting records. => SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\nWhat are the ids of all the employees who authorize document destruction? => SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\nWhat are all the document type codes and document type names? => SELECT document_type_code ,  document_type_name FROM Ref_document_types\nHow many distinct locations have the things with service detail 'Unsatisfied' been located in? => SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'\nWhat is the number of cars with a horsepower greater than 150? => ", "response": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150"}
{"question": "What is the average weight of cars each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending? => SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC\nList the id, genre and artist name of English songs ordered by rating. => SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating\nFind the number of phones for each accreditation type. => SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type\nWhat are the names of ships, ordered by year they were built and their class? => SELECT name FROM ship ORDER BY built_year ,  CLASS\nWhat are the last names and ages of the students who are allergic to milk and cat? => SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\nWhat is the average weight of cars each year? => ", "response": "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year"}
{"question": "What is the average weight and year for each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nShow the names and details of all the staff members. => SELECT Name ,  Other_Details FROM Staff\nWhat is the campus fee in the year 2000 for San Jose State University? => SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000\nWhat are the opening years in which at least two shops opened? => SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2\nWhat is the total balance of savings accounts not belonging to someone with the name Brown? => SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'\nShow the average amount of transactions for different lots, ordered by average amount of transactions. => SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)\nWhat is the average weight and year for each year? => ", "response": "SELECT AVG(Weight) as Average_Weight, Year FROM cars_data GROUP BY Year"}
{"question": "Which countries in europe have at least 3 car manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the id and last name of the student that has the most behavior incidents? => SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\nHow many games has each stadium held? => SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id\nShow different builders of railways, along with the corresponding number of railways using each builder. => SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder\nFind the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005. => SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005\nShow all cities and corresponding number of students. => SELECT city_code ,  count(*) FROM Student GROUP BY city_code\nWhich countries in europe have at least 3 car manufacturers? => ", "response": "SELECT T1.CountryName FROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryName = T2.Country\nWHERE T1.Continent = 'Europe' \nGROUP BY T1.CountryName \nHAVING COUNT(DISTINCT T2.Maker) >= 3"}
{"question": "What are the names of all European countries with at least 3 manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the name of instructor who is the advisor of the student who has the highest number of total credits. => SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1\nWhat is Nancy Edwards's address? => SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\nGive the ids and names of products with price lower than 600 or higher than 900. => SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900\nReturn the name of the marketing region the store Rob Dinning is located in. => SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"\nWhat is the first name, last name, and phone of the customer with account name 162? => SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\nWhat are the names of all European countries with at least 3 manufacturers? => ", "response": "SELECT DISTINCT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Maker) >= 3"}
{"question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the average number of points for players from the \"AIB\" club? => SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"\nWhat are the emails of customers who have filed complaints on the product which has had the greatest number of complaints? => SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1\nWhat are the name and the nationality of the host of the highest age? => SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1\nShow each student's first name and last name. => SELECT DISTINCT firstname ,  lastname FROM list\nWhat is the name of the hardware product with the greatest price? => SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\nWhat is the maximum horsepower and the make of the car models with 3 cylinders? => ", "response": "SELECT MAX(Horsepower), Maker FROM cars_data WHERE Cylinders = 3 JOIN model_list ON cars_data.Id = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Maker JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY Maker"}
{"question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the description of the product category with the code 'Spices'? => SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"\nFind the first names of the faculty members who are playing Canoeing or Kayaking. => SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\nGive me the star rating descriptions of the hotels that cost more than 10000. => SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000\nWhat are the names of manufacturers with revenue greater than the average of all revenues? => SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)\nWhat are the states with the most invoices? => SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;\nWhat is the largest amount of horsepower for the models with 3 cylinders and what make is it? => ", "response": "SELECT car_names.Make, MAX(cars_data.Horsepower) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.FullName JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1;"}
{"question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the names of the different artists from Bangladesh who never received a rating higher than a 7? => SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7\nFind the number of students taught by the teacher KAWA GORDON. => SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"\nShow the locations of schools that have more than 1 player. => SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1\nWhat is the number of different class sections offered in the course ACCT-211? => SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'\nWhich film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id. => SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\nWhich model saves the most gasoline? That is to say, have the maximum miles per gallon. => ", "response": "SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data)"}
{"question": "What is the car model with the highest mpg ?", "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nReport the name of all campuses in Los Angeles county. => SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"\nWhat is the title of the course with Differential Geometry as a prerequisite? => SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\nWhat are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant? => SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'\nWhich advisors have more than two students? => SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2\nWhat are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000? => SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000\nWhat is the car model with the highest mpg ? => ", "response": "SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data)"}
{"question": "What is the average horsepower of the cars before 1980?", "sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the last names of students in room 111? => SELECT lastname FROM list WHERE classroom  =  111\nWhat was the most popular position at tryouts? => SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1\nWhat are the names of banks in the state of New York? => SELECT bname FROM bank WHERE state  =  'New York'\nHow many medicines were not approved by the FDA? => SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'\nlist the local authorities and services provided by all stations. => SELECT local_authority ,  services FROM station\nWhat is the average horsepower of the cars before 1980? => ", "response": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980"}
{"question": "What is the average horsepower for all cars produced before 1980 ?", "sql": "select avg(horsepower) from cars_data where year  <  1980;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhich staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names. => SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"\nWhich campus was opened between 1935 and 1939? => SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939\nShow the id, the date of account opened, the account name, and other account detail for all accounts. => SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts\nShow all cities and corresponding number of students. => SELECT city_code ,  count(*) FROM Student GROUP BY city_code\nFind the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction. => SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"\nWhat is the average horsepower for all cars produced before 1980 ? => ", "response": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980"}
{"question": "What is the average edispl of the cars of model volvo?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the names and damage in millions for storms, ordered by their max speeds descending? => SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC\nList the snatch score and clean jerk score of body builders in ascending order of snatch score. => SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC\nGive the number of students living in either HKG or CHI. => SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\nWho belong to the institution \"University of Oxford\"? Show the first names and last names. => SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"\nWho are the advisors for students that live in a city with city code \"BAL\"? => SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"\nWhat is the average edispl of the cars of model volvo? => ", "response": "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')"}
{"question": "What is the average edispl for all volvos?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhich film has the most copies in the inventory? List both title and id. => SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\nWhat si the youngest employee's first and last name? => SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;\nHow many undergraduates are there in \"San Jose State University\" in year 2004? => SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"\nWhich club has the most female students as their members? Give me the name of the club. => SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1\nWhat are the languages that are used most often in songs? => SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1\nWhat is the average edispl for all volvos? => ", "response": "SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE car_makers.Maker = 'Volvo'"}
{"question": "What is the maximum accelerate for different number of cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the name of the person who has friends with age above 40 and under age 30? => SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\nShow the ids and details of the investors who have at least two transactions with type code \"SALE\". => SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2\nShow all allergies and their types. => SELECT allergy ,  allergytype FROM Allergy_type\nFind all the building full names containing the word \"court\". => SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"\nWhat are the numbers of races for each constructor id? => SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\nWhat is the maximum accelerate for different number of cylinders? => ", "response": "SELECT MAX(Accelerate) AS max_accelerate, Cylinders FROM cars_data GROUP BY Cylinders"}
{"question": "What is the maximum accelerate for all the different cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the first names of all professors in the Accounting department who is teaching some course and the class room. => SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'\nWhich parties have hosts of age above 50? Give me the party locations. => SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50\nCount the number of male students who had class senator votes in the fall election cycle. => SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"\nCount the number of different last names actors have. => SELECT count(DISTINCT last_name) FROM actor\nList the name of physicians who never took any appointment. => SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\nWhat is the maximum accelerate for all the different cylinders? => ", "response": "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders"}
{"question": "Which model has the most version(make) of cars?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the names of the companies whose headquarters are not located in \"USA\". => SELECT name FROM Companies WHERE Headquarters != 'USA'\nList the name of technicians whose team is not \"NYY\". => SELECT Name FROM technician WHERE Team != \"NYY\"\nFind all the stores in the district with the most population. => SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)\nWhat is the total number of degrees granted after 2000 for each Orange county campus? => SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus\nList the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'. => SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'\nWhich model has the most version(make) of cars? => ", "response": "SELECT Model FROM model_list WHERE ModelId IN (SELECT ModelId FROM car_names GROUP BY ModelId HAVING COUNT(DISTINCT MakeId) = (SELECT MAX(counts) FROM (SELECT ModelId, COUNT(DISTINCT MakeId) AS counts FROM car_names GROUP BY ModelId) AS count_table))"}
{"question": "What model has the most different versions?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nShow the member name and hometown who registered a branch in 2016. => SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016\nReturn the maximum and minimum number of cows across all farms. => SELECT max(Cows) ,  min(Cows) FROM farm\nList the wheels and locations of the railways. => SELECT Wheels ,  LOCATION FROM railway\nList the customer event id and the corresponding move in date and property id. => SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events\nWhat is the count of the songs that last approximately 4 minutes? => SELECT count(*) FROM files WHERE duration LIKE \"4:%\"\nWhat model has the most different versions? => ", "response": "SELECT Model, COUNT(*) AS NumVersions FROM model_list GROUP BY Model ORDER BY NumVersions DESC LIMIT 1"}
{"question": "How many cars have more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the different billing countries for all invoices. => SELECT distinct(BillingCountry) FROM INVOICE\nFind the number of albums. => SELECT count(*) FROM ALBUM\nWhat is the location of the festival with the largest number of audience? => SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1\nHow many clubs are there? => SELECT count(*) FROM club\nWhat are the names of countries that have both players with position forward and players with position defender? => SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\nHow many cars have more than 4 cylinders? => ", "response": "SELECT count(*) FROM cars_data WHERE Cylinders > 4"}
{"question": "What is the number of cars with more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the name of dorms which have TV Lounge but no Study Room as amenity. => SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'\nShow the ids of all employees who have authorized destruction. => SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\nFor grants that have descriptions of Regular and Initial Applications, what are their start dates? => SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'\nFor the airline ids with the top 10 most routes operated, what are their names? => SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10\nWhat is the installation date for each ending station on all the trips? => SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id\nWhat is the number of cars with more than 4 cylinders? => ", "response": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4"}
{"question": "how many cars were produced in 1980?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nshow the train name and station name for each train. => SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id\nGive the phone and postal code corresponding to the address '1031 Daugavpils Parkway'. => SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'\nWhat are the checking and savings balances in accounts belonging to Brown? => SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'\nHow many airports are there per country? Order the countries by decreasing number of airports. => SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC\nSort the first names of all the authors in alphabetical order. => SELECT fname FROM authors ORDER BY fname\nhow many cars were produced in 1980? => ", "response": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980"}
{"question": "In 1980, how many cars were made?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWho are Bob's friends? => SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'\nFind the titles and studios of the films that are produced by some film studios that contained the word \"Universal\". => SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"\nWhat are the products with the maximum page size A4 that also have a pages per minute color smaller than 5? => SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5\nWhat are the types of competition and number of competitions for that type? => SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type\nWhat is the name of the course with the most registered students? => SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\nIn 1980, how many cars were made? => ", "response": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980"}
{"question": "How many car models were produced by the maker with full name American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the id of the files that are available in the format of mp4 and a resolution smaller than 1000? => SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000\nWhat is the maximum stars and year for the most recent movie? => SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\nwhat is the name and position of the head whose department has least number of employees? => SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\nHow many distinct artists have volumes? => SELECT COUNT(DISTINCT Artist_ID) FROM volume\nFind the address line 1 and 2 of the customer with email \"vbogisich@example.org\". => SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"\nHow many car models were produced by the maker with full name American Motor Company? => ", "response": "SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = \"American Motor Company\")"}
{"question": "What is the number of car models created by the car maker American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nShow the names of all the clients with no booking. => SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID\nHow many camera lenses are not used in taking any photos? => SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )\nFind the number of songs in all the studio albums. => SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"\nWhat are the first names and support rep ids for employees serving 10 or more customers? => SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\nShow names for all regions except for Denmark. => SELECT region_name FROM region WHERE region_name != 'Denmark'\nWhat is the number of car models created by the car maker American Motor Company? => ", "response": "SELECT COUNT(*) FROM model_list WHERE Maker = 'American Motor Company'"}
{"question": "Which makers designed more than 3 car models? List full name and the id.", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the average number of gold medals for clubs? => SELECT avg(Gold) FROM club_rank\nWhat are the names of all the races that occurred in the year 2017? => SELECT name FROM races WHERE YEAR = 2017\nReturn the code of the card type that is most common. => SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\nWhat is the name, city, and country of the airport with the highest elevation? => SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1\nGive the different hometowns of gymnasts that have a total point score of above 57.5. => SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5\nWhich makers designed more than 3 car models? List full name and the id. => ", "response": "SELECT Id, FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)"}
{"question": "What are the names and ids of all makers with more than 3 models?", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind id of the candidate who most recently accessed the course? => SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\nIn which year were most of ships built? => SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1\nWhich events have the number of notes between one and three? List the event id and the property id. => SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3\nShow the names of companies and the number of employees they have => SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name\nWhat are the different main industries for all companies? => SELECT DISTINCT main_industry FROM company\nWhat are the names and ids of all makers with more than 3 models? => ", "response": "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)"}
{"question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix? => SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\nWhich grade is studying in room 105? => SELECT DISTINCT grade FROM list WHERE classroom  =  105\nWhat are the names of perpetrators? => SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID\nWhat is the status code with the least number of customers? => SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;\nWhat are the document ids for the budget type code 'SF'? => SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'\nWhich distinctive models are produced by maker with the full name General Motors or weighing more than 3500? => ", "response": "SELECT DISTINCT T4.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T4 ON T2.Model = T4.Model JOIN car_makers AS T3 ON T2.MakeId = T3.Id WHERE (T3.FullName = 'General Motors' OR T1.Weight > 3500)"}
{"question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the average rating for right-footed players and left-footed players? => SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot\nWhat are the speeds of the longest roller coaster? => SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1\ndisplay the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN. => SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )\nFind the total number of students in each department. => SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\nWhat are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103? => SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)\nWhat are the different models created by either the car maker General Motors or weighed more than 3500? => ", "response": "SELECT Model FROM model_list WHERE Maker = 'General Motors' OR ModelId IN (SELECT MakeId FROM car_names INNER JOIN cars_data ON car_names.MakeId=cars_data.Id WHERE Weight > 3500)"}
{"question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the personal name, family name, and author ID of the course author who teaches the most courses? => SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the prices of products that have never gotten a complaint? => SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)\nShow the names of members whose country is \"United States\" or \"Canada\". => SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"\nFind the number of different airports which are the destinations of the American Airlines. => SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'\nWhat are the maximum and minimum resolution of songs whose duration is 3 minutes? => SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"\nIn which years cars were produced weighing no less than 3000 and no more than 4000 ? => ", "response": "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000"}
{"question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nHow many different types of transactions are there? => SELECT count(DISTINCT transaction_type) FROM Financial_Transactions\nWhat are the three largest cities in terms of regional population? => SELECT city FROM city ORDER BY regional_population DESC LIMIT 3\nFor each player, show the team and the location of school they belong to. => SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID\nWhat are the distinct hometowns of gymnasts with total points more than 57.5? => SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5\nWhat is the name of the department with the student that has the lowest GPA? => SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1\nWhat are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? => ", "response": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000"}
{"question": "What is the horsepower of the car with the largest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the name of all students who were in the tryout sorted in alphabetic order. => SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\nFind the names of reviewers who had given higher than 3 star ratings. => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\nFind the name of the most expensive hardware product. => SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\nWhat is the name of the youngest editor? => SELECT Name FROM editor ORDER BY Age ASC LIMIT 1\nShow the ids and names of all documents. => SELECT document_id ,  document_name FROM Documents\nWhat is the horsepower of the car with the largest accelerate? => ", "response": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1"}
{"question": "What is the horsepower of the car with the greatest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the number of courses provided in each semester and year. => SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\nFind the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? => SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"\nWhat are the destinations and number of flights to each one? => SELECT destination ,  count(*) FROM Flight GROUP BY destination\nList the asset id, details, make and model for every asset. => SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets\nWhich student's age is older than 18 and is majoring in 600? List each student's first and last name. => SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;\nWhat is the horsepower of the car with the greatest accelerate? => ", "response": "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)"}
{"question": "For model volvo, how many cylinders does the car with the least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the location of the club named \"Tennis Club\"? => SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"\nWhich authors have last name \"Ueno\"? List their first names. => SELECT fname FROM authors WHERE lname  =  \"Ueno\"\nWhat are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"? => SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"\nList names of all pilot aged 30 or younger in descending alphabetical order. => SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\nHow many cities are in counties that have populations of over 20000? => SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\nFor model volvo, how many cylinders does the car with the least accelerate have? => ", "response": "SELECT MIN(Cylinders) FROM cars_data WHERE ID = (SELECT ID FROM car_names WHERE Make = \"Volvo\" AND Model = \"Model\") AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE ID = (SELECT ID FROM car_names WHERE Make = \"Volvo\" AND Model = \"Model\"))"}
{"question": "For a volvo model, how many cylinders does the version with least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the name corresponding to the accoung with the lowest sum of checking and savings balances? => SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1\nWhat are the names, color descriptions, and product descriptions for products in the 'Herbs' category? => SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"\nReturn the names of teams that have no match season record. => SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)\nHow many airports are there per country? Order the countries by decreasing number of airports. => SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC\nWhat are the names of all the documents, as well as the access counts of each, ordered alphabetically? => SELECT document_name ,  access_count FROM documents ORDER BY document_name\nFor a volvo model, how many cylinders does the version with least accelerate have? => ", "response": "SELECT MIN(cylinders) FROM cars_data WHERE Id IN (SELECT Id FROM car_names JOIN model_list ON car_names.MakeId = model_list.ModelId WHERE Make = 'Volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT Id FROM car_names JOIN model_list ON car_names.MakeId = model_list.ModelId WHERE Make = 'Volvo'))"}
{"question": "How many cars have a larger accelerate than the car with the largest horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nHow many home games did the team Boston Red Stockings play from 1990 to 2000 in total? => SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;\nWhat are the first name and last name of each male member in club \"Hopkins Student Enterprises\"? => SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"\nHow many activities do we have? => SELECT count(*) FROM Activity\nWhat are the names of festivals held in year 2007? => SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007\nGive the average number of cities within markets that had a low market estimation larger than 10000? => SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\nHow many cars have a larger accelerate than the car with the largest horsepower? => ", "response": "SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT Max(Horsepower) FROM cars_data)"}
{"question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the name of airline which runs the most number of routes. => SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\nWhat is the id of the reviewer whose name has substring \u201cMike\u201d? => SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"\nWhat are the distinct first names and cities of the students who have allergy either to milk or to cat? => SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"\nRetrieve all the last names of authors in alphabetical order. => SELECT lname FROM authors ORDER BY lname\nFind all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds? => SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000\nWhat is the number of cars with a greater accelerate than the one with the most horsepower? => ", "response": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)"}
{"question": "How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the different cities where students live? => SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\nHow many customers are there in the customer type with the most customers? => SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1\nHow many movie ratings have more than 3 stars? => SELECT count(*) FROM Rating WHERE stars  >  3\nReturn the full name and id of the actor or actress who starred in the greatest number of films. => SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1\nWhat are the distinct nominees of the musicals with the award that is not \"Tony Award\"? => SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\nHow many countries has more than 2 car makers ? => ", "response": "SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2"}
{"question": "What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind id of the candidate whose email is stanley.monahan@example.org? => SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"\nWhat are the first and last names of all the female students who have president votes? => SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"\nWhat is the number of employees that have a salary between 100000 and 200000? => SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000\nWhat are the names and countries of origin for the artists who produced the top three highly rated songs. => SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3\nWhat are all the different book publishers? => SELECT DISTINCT publisher FROM book_club\nWhat is the number of countries with more than 2 car makers ? => ", "response": "SELECT count(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2"}
{"question": "How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the names of enzymes who does not produce 'Heme'? => SELECT name FROM enzyme WHERE product != 'Heme'\nShow the top 3 apartment type codes sorted by the average number of rooms in descending order. => SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3\nGive the title of the prerequisite to the course International Finance. => SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\nShow the residences that have both a player of gender \"M\" and a player of gender \"F\". => SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\nFind the brand and name for each camera lens, and sort in descending order of maximum aperture. => SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC\nHow many cars has over 6 cylinders? => ", "response": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6"}
{"question": "What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nHow many stadiums are there? => SELECT count(*) FROM stadium\nList all the dates of enrollment and completion of students. => SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment\nList all club names in ascending order of start year. => SELECT name FROM club ORDER BY Start_year ASC\nWhat is the average amount due for all the payments? => SELECT avg(amount_due) FROM payments\nList the object number of railways that do not have any trains. => SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)\nWhat is the number of carsw ith over 6 cylinders? => ", "response": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6"}
{"question": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending? => SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC\nFind the list of page size which have more than 3 product listed => SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3\nReturn the duration of the actor with the greatest age. => SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\nHow many different genders are there in the dorms? => SELECT count(DISTINCT gender) FROM dorm\nWhich film has the highest rental rate? And what is the rate? => SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1\nFor the cars with 4 cylinders, which model has the largest horsepower? => ", "response": "SELECT Model, Horsepower FROM cars_data \nINNER JOIN model_list ON cars_data.Id = model_list.ModelId \nWHERE Cylinders = 4 \nORDER BY Horsepower DESC \nLIMIT 1"}
{"question": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the student ids of students who don't have any allergies? => SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\nWhat are the id and address of the shops which have a happy hour in May? => SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'\nPlease show different denominations and the corresponding number of schools in descending order. => SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC\nShow all the locations with at least two cinemas with capacity above 300. => SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\nWhat are the names of artists that have not had any exhibitions? => SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)\nFor all of the 4 cylinder cars, which model has the most horsepower? => ", "response": "SELECT Model \nFROM cars_data \nWHERE Cylinders = 4 \nORDER BY Horsepower DESC \nLIMIT 1"}
{"question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the name, age, and job title of persons who are friends with Alice for the longest years. => SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')\ndisplay all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40. => SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40\nWhat is the city with the most number of flagship stores? => SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1\nFind the texts of assessment notes for teachers with last name \"Schuster\". => SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"\nWhat are the names of all the customers in alphabetical order? => SELECT name FROM accounts ORDER BY name\nAmong the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. => ", "response": "SELECT T4.MakeId, T5.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Maker JOIN cars_data AS T5 ON T2.MakeId = T5.Id WHERE T1.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T1.Cylinders <= 3 GROUP BY T4.MakeId ORDER BY T5.Make ASC"}
{"question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nShow different teams of technicians and the number of technicians in each team. => SELECT Team ,  COUNT(*) FROM technician GROUP BY Team\nReturn the low and high estimates for all film markets. => SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation\nList the id of students who attended  statistics courses in the order of attendance date. => SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance\nHow many different roles are there on the project staff? => SELECT count(DISTINCT role_code) FROM Project_Staff\nWhich shipping agent shipped the most documents? List the shipping agent name and the number of documents. => SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;\nAmong the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? => ", "response": "SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)"}
{"question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the song in the volume with the maximum weeks on top? => SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1\nWhat is the first name and the last name of the customer who made the earliest rental? => SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1\nWhat are the different names for all songs that have a higher resolution than English songs? => SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")\nWhat is the list of school locations sorted in descending order of school foundation year? => SELECT LOCATION FROM school ORDER BY Founded DESC\nFrom which hometowns did both people older than 23 and younger than 20 come from? => SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20\nWhat is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? => ", "response": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980"}
{"question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nShow the delegates and the names of county they belong to. => SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District\nWhat are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results? => SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\nFind the phone number of all the customers and staff. => SELECT phone_number FROM customers UNION SELECT phone_number FROM staff\nWhich nurses are in charge of patients undergoing treatments? => SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID\nWhat are the teams with the most technicians? => SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? => ", "response": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980"}
{"question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the first names of all students who got a grade C in a class? => SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'\nWhat is the id of the account with the most transactions? => SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1\nGive me the names of customers who have placed orders between 2009-01-01 and 2010-01-01. => SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\nWhat is the id and last name of the driver with the longest laptime? => SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1\nSort all the distinct product names in alphabetical order. => SELECT DISTINCT product_name FROM product ORDER BY product_name\nWhich models are lighter than 3500 but not built by the 'Ford Motor Company'? => ", "response": "SELECT T1.Model FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.Id = T2.Id WHERE T1.Weight < 3500 AND T2.Maker != 'Ford Motor Company' AND T2.Country != 'United States' JOIN model_list AS T3 ON T2.Maker = T3.Maker AND T1.Model = T3.ModelId"}
{"question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat are the names of wrestlers and the elimination moves? => SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\nList the ids, names and market shares of all browsers. => SELECT id ,  name ,  market_share FROM browser\nWhat is the total balance of savings accounts not belonging to someone with the name Brown? => SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'\nFind the states which do not have any employee in their record. => SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)\nShow the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80. => SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80\nWhat are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? => ", "response": "SELECT DISTINCT T3.Model\nFROM cars_data AS T1\nJOIN model_list AS T2 ON T1.Id = T2.ModelId\nJOIN car_makers AS T3 ON T2.Maker = T3.Maker\nWHERE T1.Weight < 3500 AND T3.FullName <> 'Ford Motor Company'"}
{"question": "What are the name of the countries where there is not a single car maker?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nReturn the name, phone number and email address for the customer with the most orders. => SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1\nWhat are the distinct types of the companies that have operated any flights with velocity less than 200? => SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200\nWhat are the headquarters that have both a company in the banking and 'oil and gas' industries? => SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'\nWhat is the name, city, and country of the airport with the lowest altitude? => SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\nFind the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE. => SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"\nWhat are the name of the countries where there is not a single car maker? => ", "response": "SELECT T1.CountryName FROM countries AS T1 LEFT JOIN car_makers AS T2 ON T1.CountryName = T2.Country WHERE T2.Id IS NULL"}
{"question": "What are the names of the countries with no car makers?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the number of routes whose destinations are Italian airports? => SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\nWhat is the total student capacity of all dorms? => SELECT sum(student_capacity) FROM dorm\nFind the name and revenue of the company that earns the highest revenue in each city. => SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter\nWhat are the names of all customers, ordered by account balance? => SELECT cust_name FROM customer ORDER BY acc_bal\nWhich apartments have bookings with status code \"Confirmed\"? Return their apartment numbers. => SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"\nWhat are the names of the countries with no car makers? => ", "response": "SELECT CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL"}
{"question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nList the state names and the number of customers living in each state. => SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county\nFind the number of students who are older than 18 and do not have allergy to either food or animal. => SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")\nHow many stadiums are not in country \"Russia\"? => SELECT count(*) FROM stadium WHERE country != 'Russia'\nCount the number of colors. => SELECT count(*) FROM ref_colors\nWhat is the document type code with most number of documents? => SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1\nWhich are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . => ", "response": "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND Id IN (SELECT Maker FROM cars_data GROUP BY Maker HAVING COUNT(*) > 3)"}
{"question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the last name of the musician who was in the most songs? => SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\nCount the number of students the teacher LORIA ONDERSMA teaches. => SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"\nHow many players were in the team Boston Red Stockings in 2000? => SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000\nShow all customer ids and the number of accounts for each customer. => SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\nWhat is the salaray and name of the employee with the most certificates to fly planes more than 5000? => SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\nWhat are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? => ", "response": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Maker  =  T2.Maker JOIN car_names AS T3 ON T1.Id  =  T3.MakeId JOIN cars_data AS T4 ON T3.Model  =  T4.Id GROUP BY T1.Id, T1.Maker HAVING count(DISTINCT T2.ModelId) >= 2 AND count(DISTINCT T3.MakeId) > 3"}
{"question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nWhat is the maximum stars and year for the most recent movie? => SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\nWhat are the different allergy types? => SELECT DISTINCT allergytype FROM Allergy_type\nWhat are the last names of the teachers who teach the student called GELL TAMI? => SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"\nOn average, how old are the members in the club \"Hopkins Student Enterprises\"? => SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"\nShow the name, average attendance, total attendance for stadiums where no accidents happened. => SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id\nWhat are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? => ", "response": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 LEFT JOIN (SELECT DISTINCT Country FROM car_makers UNION SELECT DISTINCT Country FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId WHERE car_names.Model = 'fiat') AS T2 ON T1.CountryName = T2.Country WHERE T2.Country IS NOT NULL OR (SELECT COUNT(*) FROM car_makers WHERE Country = T1.CountryName) > 3"}
{"question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "prompt": "Given a database 'car_1' have 6 tables named 'continents', 'countries', 'car_makers', 'model_list', 'car_names', 'cars_data'. continents tbl have columns: 'ContId', 'Continent'. countries tbl have columns: 'CountryId', 'CountryName', 'Continent'. car_makers tbl have columns: 'Id', 'Maker', 'FullName', 'Country'. model_list tbl have columns: 'ModelId', 'Maker', 'Model'. car_names tbl have columns: 'MakeId', 'Model', 'Make'. cars_data tbl have columns: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'. \nTranslate text to SQL: \nFind the name and position of the head of the department with the least employees. => SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\nFind the name and address of the customers who have both New and Pending orders. => SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\nReturn the detail of the location named \"UK Gallery\". => SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\nHow many films have the word 'Dummy' in their titles? => SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\nReturn the id of the customer who has the most cards, as well as the number of cards. => SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\nWhat are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? => ", "response": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3) OR CountryId IN (SELECT Country FROM car_makers WHERE Maker = \"Fiat\" GROUP BY Country)"}
{"question": "Which country does Airline \"JetBlue Airways\" belong to?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nHow many different instructors have taught some course? => SELECT COUNT (DISTINCT id) FROM teaches\nCount the number of different official languages corresponding to countries that players who play Defender are from. => SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\nShow the name and location of track with 1 race. => SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1\nWhat is all the information about employees with D or S in their first name, ordered by salary descending? => SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC\nWhat is the number of airlines based in Russia? => SELECT count(*) FROM airlines WHERE country  =  'Russia'\nWhich country does Airline \"JetBlue Airways\" belong to? => ", "response": "SELECT country FROM airlines WHERE Airline = \"JetBlue Airways\""}
{"question": "What country is Jetblue Airways affiliated with?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the durations of the longest and the shortest tracks in milliseconds? => SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\nReturn the titles of films that include 'Deleted Scenes' in their special feature section. => SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'\nFind the name of the genre that is most frequent across all tracks. => SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\nWhich authors have written a paper with title containing the word \"Monadic\"? Return their last names. => SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"\nHow many bookings do we have? => SELECT count(*) FROM BOOKINGS\nWhat country is Jetblue Airways affiliated with? => ", "response": "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'"}
{"question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the maximum price and score of wines produced by St. Helena appelation? => SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\nReturn the names of gymnasts who did not grow up in Santo Domingo. => SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"\nFind the names of customers whose name contains \"Diana\". => SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"\nCount the number of different software platforms. => SELECT count(DISTINCT Software_Platform) FROM device\nShow all video games and their types in the order of their names. => SELECT gname ,  gtype FROM Video_games ORDER BY gname\nWhat is the abbreviation of Airline \"JetBlue Airways\"? => ", "response": "SELECT Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\""}
{"question": "Which abbreviation corresponds to Jetblue Airways?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow all student ids and the number of hours played. => SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid\nFor each manufacturer name, what are the names and prices of their most expensive product? => SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\nList the venues of debates in ascending order of the number of audience. => SELECT Venue FROM debate ORDER BY Num_of_Audience ASC\nList the names of pilots in ascending order of rank. => SELECT Pilot_name FROM pilot ORDER BY Rank ASC\nCount the number of wrestlers. => SELECT count(*) FROM wrestler\nWhich abbreviation corresponds to Jetblue Airways? => ", "response": "SELECT Abbreviation FROM airlines WHERE Airline='Jetblue Airways'"}
{"question": "List all airline names and their abbreviations in \"USA\".", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow the membership level with most number of members. => SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\nWhat are the types of vocals used in the song \"Le Pop\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\nWhat are the names of the activities Mark Giuliano is involved in => SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\nHow many songs use drums as an instrument? => SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"\nreturn the smallest salary for every departments. => SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\nList all airline names and their abbreviations in \"USA\". => ", "response": "SELECT Airline, Abbreviation FROM airlines WHERE Country = \"USA\""}
{"question": "What are the airline names and abbreviations for airlines in the USA?", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the duration, file size, and song format for every pop song, ordered by title alphabetically? => SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name\nShow the transaction type code that occurs the fewest times. => SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1\nFind the total and average amount of settlements. => SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements\nList the first name middle name and last name of all staff. => SELECT first_name ,  middle_name ,  last_name FROM Staff;\nList the description of all aircrafts. => SELECT Description FROM aircraft\nWhat are the airline names and abbreviations for airlines in the USA? => ", "response": "SELECT Airline, Abbreviation FROM airlines WHERE Country = \"USA\""}
{"question": "List the airport code and name in the city of Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nReturn the decor of the room named \"Recluse and defiance\". => SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";\nHow many total pounds were purchased in the year 2018 at all London branches? => SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018\nReturn the title of the film with the highest high estimate? => SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1\nHow many drivers are from Hartford city or younger than 40? => SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40\nHow many lessons have been cancelled? => SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";\nList the airport code and name in the city of Anthony. => ", "response": "SELECT AirportCode, AirportName FROM airports WHERE City = \"Anthony\";"}
{"question": "Give the airport code and airport name corresonding to the city Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the names of all reviewers that have rated 3 or more movies? => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3\nWhat is the city with the most customers? => SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;\nHow many routes go from the United States to Canada? => SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\nPlease show the results of music festivals and the number of music festivals that have had each, ordered by this count. => SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC\nFor each distinct test result, find the number of students who got the result. => SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC\nGive the airport code and airport name corresonding to the city Anthony. => ", "response": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'"}
{"question": "How many airlines do we have?", "sql": "SELECT count(*) FROM AIRLINES", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nReturn the maximum number of points for climbers from the United Kingdom. => SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\nFind the id and name of the stadium where the largest number of injury accidents occurred. => SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nFind the name and training hours of players whose hours are below 1500. => SELECT pName ,  HS FROM Player WHERE HS  <  1500\nWhat is the id of every song that has a resolution higher than that of a song with a rating below 8? => SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\nWhat are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000? => SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;\nHow many airlines do we have? => ", "response": "SELECT COUNT(*) FROM airlines;"}
{"question": "What is the total number of airlines?", "sql": "SELECT count(*) FROM AIRLINES", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nReturn reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars. => SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars\nHow many tasks are there? => SELECT count(*) FROM Tasks\nHow many distinct students are enrolled in courses? => SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment\nGive the name of the department with the lowest budget. => SELECT dept_name FROM department ORDER BY budget LIMIT 1\nFind the last names of the members of the club \"Bootup Baltimore\". => SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"\nWhat is the total number of airlines? => ", "response": "SELECT count(*) FROM airlines"}
{"question": "How many airports do we have?", "sql": "SELECT count(*) FROM AIRPORTS", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"\nWhat are the student ids of students who don't have any allergies? => SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\nWhat is the name of the institution the author \"Katsuhiro Ueno\" belongs to? => SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\nWhich catalog contents have length below 3 or above 5? Find the catalog entry names. => SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5\nList the creation year, name and budget of each department. => SELECT creation ,  name ,  budget_in_billions FROM department\nHow many airports do we have? => ", "response": "SELECT COUNT(*) FROM airports"}
{"question": "Return the number of  airports.", "sql": "SELECT count(*) FROM AIRPORTS", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nwhat are the order id and customer id of the oldest order? => SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\nCount the number of markets that have a number of cities lower than 300. => SELECT count(*) FROM market WHERE Number_cities  <  300\nWhat is the name of the customer who has greatest total loan amount? => SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1\nHow many transaction does each account have? Show the number and account id. => SELECT count(*) ,  account_id FROM Financial_transactions\nHow many vehicles exist? => SELECT count(*) FROM Vehicles;\nReturn the number of  airports. => ", "response": "SELECT count(*) FROM airports;"}
{"question": "How many flights do we have?", "sql": "SELECT count(*) FROM FLIGHTS", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nHow many sports do we have? => SELECT count(DISTINCT sportname) FROM Sportsinfo\nHow many parks does Atlanta city have? => SELECT count(*) FROM park WHERE city = 'Atlanta';\nWho served as an advisor for students who have treasurer votes in the spring election cycle? => SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"\nWhich schools do not have any player? Give me the school locations. => SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)\nWhat are all info of students who registered courses but not attended courses? => SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\nHow many flights do we have? => ", "response": "SELECT count(*) FROM flights in flight_2;"}
{"question": "Return the number of flights.", "sql": "SELECT count(*) FROM FLIGHTS", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhich products has been complained by the customer who has filed least amount of complaints? => SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1\nWhat are the distinct types of mills that are built by American or Canadian architects? => SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'\nWhich employees were hired after September 7th, 1987? => SELECT * FROM employees WHERE hire_date  >  '1987-09-07'\nFind the name of airline which runs the most number of routes. => SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\nCount the number of artists. => SELECT count(*) FROM artist\nReturn the number of flights. => ", "response": "SELECT count(*) FROM flights"}
{"question": "Which airline has abbreviation 'UAL'?", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow the most common apartment type code among apartments with more than 1 bathroom. => SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\nHow many different departments are there in each school that has less than 5 apartments? => SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\nWhat are the first name and last name of each male member in club \"Hopkins Student Enterprises\"? => SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"\nShow the headquarters that have both companies in banking industry and companies in oil and gas industry. => SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"\nWhat is all the information about the basketball match? => SELECT * FROM basketball_match\nWhich airline has abbreviation 'UAL'? => ", "response": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'"}
{"question": "Give the airline with abbreviation 'UAL'.", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow the account name, id and the number of transactions for each account. => SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\nShow member names that are not in the Progress Party. => SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"\nFind the last and first name of students who are playing Football or Lacrosse. => SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"\nShow the names of customers having an order with shipping method FedEx and order status Paid. => SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'\nWhat are the different names of mountains ascended by climbers from the country of West Germany? => SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"\nGive the airline with abbreviation 'UAL'. => ", "response": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'"}
{"question": "How many airlines are from USA?", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow the card type codes and the number of transactions. => SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\nWhat are the names of procedures physician John Wen was trained in? => SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nWhat is the description of the product category with the code 'Spices'? => SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"\nWhat are the naems of all the projects, and how many scientists were assigned to each of them? => SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name\nWhat are the last names of students in room 111? => SELECT lastname FROM list WHERE classroom  =  111\nHow many airlines are from USA? => ", "response": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'"}
{"question": "Return the number of airlines in the USA.", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nOn what dates were employees without the letter M in their first names hired? => SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'\nList all the services in the alphabetical order. => SELECT service_name FROM services ORDER BY service_name\nWhat are the procedures that cost more than 1000 or are specialized in by physician John Wen? => SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nWhat are the last names of faculty in building Barton, sorted by last name? => SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname\nWhat are the names and ages of every person who is a friend of both Dan and Alice? => SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\nReturn the number of airlines in the USA. => ", "response": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'"}
{"question": "Which city and country is the Alton airport at?", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhich last names are both used by customers and by staff? => SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff\nFind the state, account type, and credit score of the customer whose number of loan is 0. => SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\nHow many employees do we have? => SELECT count(*) FROM Employees\nWhat is the customer id, first and last name with least number of accounts. => SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\nWhat is the name and distance for aircraft with id 12? => SELECT name ,  distance FROM Aircraft WHERE aid  =  12\nWhich city and country is the Alton airport at? => ", "response": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'"}
{"question": "Give the city and country for the Alton airport.", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the names of courses with 1 credit? => SELECT CName FROM COURSE WHERE Credits  =  1\nWhat is the last name and office of the professor from the history department? => SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'\nFind the ids of the problems reported after 1978-06-26. => SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"\nGive the codes of document types that have more than 2 corresponding documents. => SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2\nCount the number of different payment method codes used by parties. => SELECT count(DISTINCT payment_method_code) FROM parties\nGive the city and country for the Alton airport. => ", "response": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'"}
{"question": "What is the airport name for airport 'AKO'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nwhich countries have more than 2 airports? => SELECT country FROM airport GROUP BY country HAVING count(*)  >  2\nFind the phone number and email address of customer \"Harold\". => SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"\nWhat is the name of the artist, for each language, that has the most songs with a higher resolution than 500? => SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1\nHow many customers are there? => SELECT sum(no_of_customers) FROM bank\nWhat are the number of rooms for each bed type? => SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;\nWhat is the airport name for airport 'AKO'? => ", "response": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'"}
{"question": "Return the name of the airport with code 'AKO'.", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the name and checking balance of the account which has the lowest savings balance? => SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\nFind the entry name of the catalog with the highest price (in USD). => SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1\nReturn the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates? => SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate\nWhat is the average, minimum, maximum, and total transaction amount? => SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions\nFind the average room count of the apartments that have the \"Studio\" type code. => SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\nReturn the name of the airport with code 'AKO'. => ", "response": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'"}
{"question": "What are airport names at City 'Aberdeen'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the names of all races held between 2009 and 2011? => SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011\nShow all distinct region names ordered by their labels. => SELECT DISTINCT region_name FROM region ORDER BY Label\nFind the number of routes and airport name for each source airport, order the results by decreasing number of routes. => SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC\nWhat is the name of the tourist attraction that is associated with the photo \"game1\"? => SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"\nShow the name of track and the number of races in each track. => SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\nWhat are airport names at City 'Aberdeen'? => ", "response": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'"}
{"question": "What are the names of airports in Aberdeen?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nHow many sections does each course has? => SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code\nList the names of studios that have at least two films. => SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2\nShow the locations of schools that have more than 1 player. => SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1\nShow names of technicians in ascending order of quality rank of the machine they are assigned. => SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank\nWhat are the campuses that opened in 1958? => SELECT campus FROM campuses WHERE YEAR  =  1958\nWhat are the names of airports in Aberdeen? => ", "response": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'"}
{"question": "How many flights depart from 'APG'?", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the sum of revenue from companies with headquarters in Austin? => SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'\nFind the code of the role that have the most employees. => SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\nHow many gymnasts are there? => SELECT count(*) FROM gymnast\nWhich semeseter and year had the fewest students? => SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1\nWhat is the average price of the products for each category? => SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code\nHow many flights depart from 'APG'? => ", "response": "SELECT count(*) FROM flights WHERE SourceAirport = 'APG'"}
{"question": "Count the number of flights departing from 'APG'.", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFind the average prices of all products from each manufacture, and list each company's name. => SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\nWhich flag is most widely used among all ships? => SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1\nShow the average, maximum, minimum enrollment of all schools. => SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school\nHow many tourists did not make any visit? => SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\nWhat is the channel code and contact number of the customer contact channel that was active for the longest time? => SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)\nCount the number of flights departing from 'APG'. => ", "response": "SELECT count(*) FROM flights WHERE SourceAirport = 'APG'"}
{"question": "How many flights have destination ATO?", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the average number of working horses of farms with more than 5000 total number of horses? => SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\nWhat are the first names and birthdates of the professors in charge of ACCT-211? => SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"\nShow the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20. => SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20\nHow many different roles are there on the project staff? => SELECT count(DISTINCT role_code) FROM Project_Staff\nWhat are the first and last names of the 5 customers who purchased something most recently? => SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\nHow many flights have destination ATO? => ", "response": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'"}
{"question": "Count the number of flights into ATO.", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nlist all the names of programs, ordering by launch time. => SELECT name FROM program ORDER BY launch\nWhat are the name and ID of the product bought the most. => SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1\nWhat are the names and job titles of every person ordered alphabetically by name? => SELECT name ,  job FROM Person ORDER BY name\nWhat are the names of all wines produced in 2008? => SELECT Name FROM WINE WHERE YEAR  =  \"2008\"\nWhat are the names of all races held after 2000 in Spain? => SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000\nCount the number of flights into ATO. => ", "response": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'"}
{"question": "How many flights depart from City Aberdeen?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nHow many different departments are there in each school that has less than 5 apartments? => SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\nFind the male friend of Alice whose job is a doctor? => SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'\nWhat is the structure of the document with the least number of accesses? => SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1\nWhat is the most popular file format? => SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1\nReturn the highest acc percent across all basketball matches. => SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\nHow many flights depart from City Aberdeen? => ", "response": "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'"}
{"question": "Return the number of flights departing from Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the last names of female students, ordered by age descending? => SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC\nWhat is the code of the category that the product with the name 'flax' belongs to? => SELECT product_category_code FROM products WHERE product_name  =  \"flax\"\nWhat is the age of the tallest person? => SELECT Age FROM people ORDER BY Height DESC LIMIT 1\nWhat are the names of artists who did not have an exhibition in 2004? => SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\nProvide the last name of the youngest student. => SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\nReturn the number of flights departing from Aberdeen. => ", "response": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'"}
{"question": "How many flights arriving in Aberdeen city?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the name of the race held most recently? => SELECT name FROM races ORDER BY date DESC LIMIT 1\nWhat are the different schools and their nicknames, ordered by their founding years? => SELECT school ,  nickname FROM university ORDER BY founded\nWhat are the different types of video games? => SELECT DISTINCT gtype FROM Video_games\nShow all flight number from Los Angeles. => SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"\nWhat are the degrees conferred in \"San Francisco State University\" in 2001. => SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001\nHow many flights arriving in Aberdeen city? => ", "response": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen'"}
{"question": "Return the number of flights arriving in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nReturn the names of people, ordered alphabetically. => SELECT Name FROM People ORDER BY Name ASC\nList the dates of games by the home team name in descending order. => SELECT Date FROM game ORDER BY home_team DESC\nHow many customers have an account? => SELECT count(DISTINCT customer_id) FROM Accounts\nWhat is the name of the highest rated wine? => SELECT Name FROM WINE ORDER BY Score LIMIT 1\nWhat is the most common hometown of gymnasts? => SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\nReturn the number of flights arriving in Aberdeen. => ", "response": "SELECT COUNT(*) FROM flights WHERE DestAirport='Aberdeen'"}
{"question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the name and checking balance of the account which has the lowest savings balance? => SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\nWhat are the names of different tracks, and how many races has each had? => SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\nFind the average room count of the apartments that have the \"Studio\" type code. => SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\nWhat are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order. => SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details\nWhat is the title, credit value, and department name for courses with more than one prerequisite? => SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\nHow many flights depart from City 'Aberdeen' and have destination City 'Ashley'? => ", "response": "SELECT COUNT(*) FROM flights WHERE SourceAirport  =  'Aberdeen' AND DestAirport  =  'Ashley'"}
{"question": "How many flights fly from Aberdeen to Ashley?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFor each player, show the team and the location of school they belong to. => SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID\nGive the building that the instructor who teaches the greatest number of courses lives in. => SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\nFind the number of male (sex is 'M') students who have some food type allery. => SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\nFind the names of all instructors in the Art department who have taught some course and the course_id. => SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'\nShow the invoice number and the number of transactions for each invoice. => SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\nHow many flights fly from Aberdeen to Ashley? => ", "response": "SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'"}
{"question": "How many flights does airline 'JetBlue Airways' have?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFind the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. => SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\nWhich membership card has more than 5 members? => SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5\nWhat are the enrollments of schools whose denomination is not \"Catholic\"? => SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"\nWhich employees have either destroyed a document or made an authorization to do so? Return their employee ids. => SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\nWhich students study under the teacher named OTHA MOYER? Give me the first and last names of the students. => SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\nHow many flights does airline 'JetBlue Airways' have? => ", "response": "SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'"}
{"question": "Give the number of Jetblue Airways flights.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFind the id of the candidate who got the lowest oppose rate. => SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1\nHow many stores are headquarted in each city? => SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city\nWhich countries have more than two members? => SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2\nWhat are the unique block codes that have available rooms? => SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0\nList names of all pilot aged 30 or younger in descending alphabetical order. => SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\nGive the number of Jetblue Airways flights. => ", "response": "SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways'"}
{"question": "How many 'United Airlines' flights go to Airport 'ASY'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhich studios have never worked with the director Walter Hill? => SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"\nFind the job ID for those jobs which average salary is above 8000. => SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000\nFind the names of schools that have more than one donator with donation amount above 8.5. => SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1\nHow many faculty members participate in each activity? Return the activity names and the number of faculty members. => SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID\nFind the list of documents that are both in the most three popular type and have the most three popular structure. => SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\nHow many 'United Airlines' flights go to Airport 'ASY'? => ", "response": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'"}
{"question": "Count the number of United Airlines flights arriving in ASY Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed? => SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details\nWho is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name. => SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"\nShow the description and code of the attraction type most tourist attractions belong to. => SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\nWhich colleges have both authors with submission score above 90 and authors with submission score below 80? => SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80\nCount the number of captains younger than 50 of each rank. => SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank\nCount the number of United Airlines flights arriving in ASY Airport. => ", "response": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY Airport'"}
{"question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nwhat is the name and position of the head whose department has least number of employees? => SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\nFind the number of activities Mark Giuliano is involved in. => SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\nFind the building that has the largest number of faculty members. => SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1\nPlease show the most common status of roller coasters. => SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\nWhich advisor has most number of students? => SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1\nHow many 'United Airlines' flights depart from Airport 'AHD'? => ", "response": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'"}
{"question": "Return the number of United Airlines flights leaving from AHD Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nHow many rooms have king beds? Report the number for each decor type. => SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;\nHow many schools are there? => SELECT count(*) FROM school\nWhat are the distinct ages of students who have secretary votes in the fall election cycle? => SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\nWhat are all the different zip codes that have a maximum dew point that was always below 70? => SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70\nList the names of people that are not employed by any company => SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)\nReturn the number of United Airlines flights leaving from AHD Airport. => ", "response": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';"}
{"question": "How many United Airlines flights go to City 'Aberdeen'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhich customer made the largest amount of claim in a single claim? Return the customer details. => SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\nWhat are the languages that are used most often in songs? => SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1\nWhat are the catalog entry names of the products with next entry ID above 8? => SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\nHow many distinct colleges are associated with players from the team with name \"Columbus Crew\". => SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\nHow many patients' prescriptions are made by physician John Dorian? => SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"\nHow many United Airlines flights go to City 'Aberdeen'? => ", "response": "SELECT count(*) FROM flights AS T1 \nJOIN airlines AS T2 ON T1.Airline = T2.Abbreviation \nJOIN airports AS T3 ON T1.DestAirport = T3.AirportCode \nWHERE T2.Airline = \"United Airlines\" AND T3.City = \"Aberdeen\""}
{"question": "Count the number of United Airlines flights that arrive in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nCount the number of artists. => SELECT count(*) FROM artist\nHow many players enter hall of fame each year? => SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;\nFind the payment method and phone of the party with email \"enrico09@example.com\". => SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"\nFind the number of routes operated by American Airlines. => SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'\nWhat is the average base price of different bed type? List bed type and average base price. => SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\nCount the number of United Airlines flights that arrive in Aberdeen. => ", "response": "SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Aberdeen';"}
{"question": "Which city has most number of arriving flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the ids of all the employees who have destroyed documents? => SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\nWhat are the papers published under the institution \"Indiana University\"? => SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\nWhat are the first, middle, and last names of all individuals, ordered by last name? => SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name\nWhat are the room name and base price of the room with the lowest base price? => SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;\nHow many staff in total? => SELECT count(*) FROM Staff;\nWhich city has most number of arriving flights? => ", "response": "SELECT DestAirport as City, count(*) as Number_of_Arriving_Flights FROM flights GROUP BY DestAirport ORDER BY Number_of_Arriving_Flights DESC LIMIT 1;"}
{"question": "Which city has the most frequent destination airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFind the description of the club called \"Tennis Club\". => SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"\nHow many customers use each payment method? => SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code\nList all customer status codes and the number of customers having each status code. => SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;\nShow the name and age for all male people who don't have a wedding. => SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)\nHow many main stream browsers whose market share is at least 5 exist? => SELECT count(*) FROM browser WHERE market_share  >=  5\nWhich city has the most frequent destination airport? => ", "response": "SELECT flights.DestAirport, COUNT(*) AS count_dest FROM flights \nJOIN airports ON airports.AirportCode = flights.DestAirport \nGROUP BY flights.DestAirport\nORDER BY count_dest DESC \nLIMIT 1;"}
{"question": "Which city has most number of departing flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nHow long does track Fast As a Shark has? => SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";\nHow many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n => SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id\nWho are the different directors of films which had market estimation in 1995? => SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995\nWhat are the ids of instructors who didnt' teach? => SELECT id FROM instructor EXCEPT SELECT id FROM teaches\nFind the names of all procedures which cost more than 1000 but which physician John Wen was not trained in? => SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nWhich city has most number of departing flights? => ", "response": "SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1;"}
{"question": "Which city is the most frequent source airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFind out 5 customers who most recently purchased something. List customers' first and last name. => SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\nShow all the distinct buildings that have faculty rooms. => SELECT DISTINCT building FROM Faculty\nFind the ids of all the order items whose product id is 11. => SELECT order_item_id FROM order_items WHERE product_id = 11\nFind the department name of the instructor whose name contains 'Soisalon'. => SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'\nWhat are the grapes, appelations, and wines with scores above 93, sorted by Name? => SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name\nWhich city is the most frequent source airport? => ", "response": "SELECT SourceAirport, COUNT(*) AS Frequency FROM flights GROUP BY SourceAirport ORDER BY Frequency DESC LIMIT 1;"}
{"question": "What is the code of airport that has the highest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the headquarter of the company with the largest sales? => SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1\nWhat is the average unit price of all the tracks? => SELECT AVG(UnitPrice) FROM TRACK\nwhat are the order id and customer id of the oldest order? => SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\nWhat is the title of the course that is a prerequisite for Mobile Computing? => SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\nList the name of the school with the smallest enrollment. => SELECT school_name FROM school ORDER BY enrollment LIMIT 1\nWhat is the code of airport that has the highest number of flights? => ", "response": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1"}
{"question": "What is the airport code of the airport with the most flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the names of the songs whose title has the word \"the\"? => SELECT title FROM songs WHERE title LIKE '% the %'\nShow the first year and last year of parties with theme \"Spring\" or \"Teqnology\". => SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\"\nShow aircraft names and number of flights for each aircraft. => SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\nWhat are the chip model and screen mode of the phone with hardware model name \"LG-P760\"? => SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";\nList all cities of addresses in alphabetical order. => SELECT city FROM Addresses ORDER BY city\nWhat is the airport code of the airport with the most flights? => ", "response": "SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1;"}
{"question": "What is the code of airport that has fewest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFind the states which do not have any employee in their record. => SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)\nWhich apartments have unit status availability of both 0 and 1? Return their apartment numbers. => SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1\nWhat are the descriptions and names of the courses that have student enrollment bigger than 2? => SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\nList the names, color descriptions and product descriptions of products with category \"Herbs\". => SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"\nFind the average unit price of jazz tracks. => SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"\nWhat is the code of airport that has fewest number of flights? => ", "response": "SELECT SourceAirport, COUNT(*) as num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights ASC LIMIT 1"}
{"question": "Give the code of the airport with the least flights.", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the distinct names of nurses on call? => SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse\nFind the room number of the rooms which can sit 50 to 100 students and their buildings. => SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100\nShow the name of ships whose nationality is either United States or United Kingdom. => SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"\nFind the maximum and minimum durations of tracks in milliseconds. => SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\nWhat is all the information about employees hired before June 21, 2002? => SELECT * FROM employees WHERE hire_date  <  '2002-06-21'\nGive the code of the airport with the least flights. => ", "response": "SELECT AirportCode FROM airports \nWHERE AirportCode NOT IN \n    (SELECT SourceAirport FROM flights \n     UNION \n     SELECT DestAirport FROM flights) \nORDER BY AirportCode \nLIMIT 1"}
{"question": "Which airline has most number of flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the average latitude and longitude in San Jose? => SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\nReturn the code of the city that has the most students. => SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\nWhat are the id of songs whose format is mp3. => SELECT f_id FROM files WHERE formats  =  \"mp3\"\nGive the different positions of players who play for the country with the capital Dublin. => SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"\nSort the names of products in ascending order of their price. => SELECT Product_Name FROM Products ORDER BY Product_Price ASC\nWhich airline has most number of flights? => ", "response": "SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1"}
{"question": "What airline serves the most flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFind the full name of the customer with the email \"luisg@embraer.com.br\". => SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"\nReturn the name of the party with the most members. => SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1\nWhat are the names of all colleges with a larger enrollment than the largest college in Florida? => SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')\nShow the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'? => SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'\nWhich sport has most number of students on scholarship? => SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1\nWhat airline serves the most flights? => ", "response": "SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1"}
{"question": "Find the abbreviation and country of the airline that has fewest number of flights?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow names of shops that have more than one kind of device in stock. => SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1\nWhat is the highest, lowest, and average student GPA for every department? => SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code\nWhat are the names, headquarters and founders of the company with the highest revenue? => SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1\nShow all video game types. => SELECT DISTINCT gtype FROM Video_games\nFind the name of scientists who are assigned to some project. => SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn\nFind the abbreviation and country of the airline that has fewest number of flights? => ", "response": "SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)"}
{"question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the student IDs for everybody who worked for more than 10 hours per week on all sports? => SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10\nFind all the cities that have 2 to 4 parks. => SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\nWhat are the wines that have prices lower than 50 and have appelations in Monterey county? => SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50\nFind the number of distinct amenities. => SELECT count(*) FROM dorm_amenity\nWhich marketing region has the most drama workshop groups? Give me the region code. => SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1\nWhat is the abbreviation of the airilne has the fewest flights and what country is it in? => ", "response": "SELECT Abbreviation, Country\nFROM airlines\nWHERE uid = (\n  SELECT Airline\n  FROM flights\n  GROUP BY Airline\n  ORDER BY COUNT(*) ASC\n  LIMIT 1\n)"}
{"question": "What are airlines that have some flight departing from airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFor each race name, What is the maximum fastest lap speed for races after 2004 ordered by year? => SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year\nWhat is the document type name for the document with name \"How to read a book\"? => SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"\nWhich buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings. => SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\nWhat are the names of all aicrafts that have never won any match? => SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\nReturn the color code and description for the product with the name 'chervil'. => SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"\nWhat are airlines that have some flight departing from airport 'AHD'? => ", "response": "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.Airline = T2.Airline WHERE T2.SourceAirport = \"AHD\""}
{"question": "Which airlines have a flight with source airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the first and last names of all the female students who have president votes? => SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"\nWhat are names and savings balances of the three accounts with the highest savings balances? => SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3\nShow the ids for all the faculty members who have at least 2 students. => SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2\nFind the entry name of the catalog with the highest price (in USD). => SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1\nFind the names of schools that have some players in the mid position but not in the goalie position. => SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'\nWhich airlines have a flight with source airport AHD? => ", "response": "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.Abbreviation  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'"}
{"question": "What are airlines that have flights arriving at airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nReturn the names of people, ordered by weight ascending. => SELECT Name FROM People ORDER BY Weight ASC\ndisplay all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary. => SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC\nWhat are the total points of gymnasts, ordered by their floor exercise points descending? => SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\nReturn the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones. => SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"\nWhat are the ids of the students who are under 20 years old and are involved in at least one activity. => SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20\nWhat are airlines that have flights arriving at airport 'AHD'? => ", "response": "SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD'"}
{"question": "Which airlines have a flight with destination airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow the average population of all counties. => SELECT avg(Population) FROM county\nHow many rooms does each block floor have? => SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor\nWhat are the destinations and number of flights to each one? => SELECT destination ,  count(*) FROM Flight GROUP BY destination\nWhat is the name of all tracks in the album named Balls to the Wall? => SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\nWhat are the names of body builders in descending order of total scores? => SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC\nWhich airlines have a flight with destination airport AHD? => ", "response": "SELECT Airline FROM flights WHERE DestAirport = 'AHD'"}
{"question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the document status description of the document with id 1? => SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;\nFind the names of all person sorted in the descending order using age. => SELECT name FROM Person ORDER BY age DESC\nShow the minimum, maximum, and average age for all people. => SELECT min(age) ,  max(age) ,  avg(age) FROM people\nWhat are the white percentages of cities, and the corresponding crime rates of the counties they correspond to? => SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID\nGive me a list of names and years of races that had any driver whose forename is Lewis? => SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\nFind all airlines that have flights from both airports 'APG' and 'CVO'. => ", "response": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights AS F1 ON airlines.Airline = F1.Airline JOIN airports AS A1 ON F1.SourceAirport = A1.AirportCode JOIN flights AS F2 ON airlines.Airline = F2.Airline JOIN airports AS A2 ON F2.DestAirport = A2.AirportCode WHERE A1.AirportCode = 'APG' AND A2.AirportCode = 'CVO';"}
{"question": "Which airlines have departing flights from both APG and CVO airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nHow many degrees were conferred at San Jose State University in 2000? => SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000\nWhich payment method is used the most often? => SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1\nShow the id and star rating of each hotel, ordered by its price from low to high. => SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC\nWhat is the average base price of different bed type? List bed type and average base price. => SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\nWhat is total number of show times per dat for each cinema? => SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id\nWhich airlines have departing flights from both APG and CVO airports? => ", "response": "SELECT DISTINCT airline FROM flights WHERE SourceAirport = 'APG' AND airline IN (SELECT airline FROM flights WHERE SourceAirport = 'CVO')"}
{"question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nGive the title and credits for the course that is taught in the classroom with the greatest capacity. => SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)\nWhat is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? => SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\nHow many customers don't have an account? => SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\nFind the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? => SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"\nWhat is the last name of every student who is either female or living in a city with the code BAL or male and under 20? => SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20\nFind all airlines that have flights from airport 'CVO' but not from 'APG'. => ", "response": "SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.Airline = f.Airline WHERE f.SourceAirport = 'CVO' AND a.Airline NOT IN (SELECT DISTINCT a1.Airline FROM airlines AS a1 JOIN flights AS f1 ON a1.Airline = f1.Airline WHERE f1.SourceAirport = 'APG')"}
{"question": "Which airlines have departures from CVO but not from APG airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the average and oldest age for each gender of student? => SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\nWhat is the date of enrollment of the course named \"Spanish\"? => SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"\nWhat are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000? => SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000\nFind products with max page size as \"A4\" and pages per minute color smaller than 5. => SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5\nWhat are the total and average enrollment of all schools? => SELECT sum(enrollment) ,  avg(enrollment) FROM school\nWhich airlines have departures from CVO but not from APG airports? => ", "response": "SELECT A.Airline FROM airlines AS A JOIN flights AS F ON A.Airline = F.Airline WHERE F.SourceAirport = 'CVO' AND A.Airline NOT IN (SELECT A.Airline FROM airlines AS A JOIN flights AS F ON A.Airline = F.Airline WHERE F.SourceAirport = 'APG')"}
{"question": "Find all airlines that have at least 10 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the total time for all lessons taught by Janessa Sawayn? => SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nGive me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities? => SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\nWho is the nominee who has been nominated for the most musicals? => SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\nWhich cmi cross reference id is not related to any parking taxes? => SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines\nShow the maximum and minimum share count of different transaction types. => SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code\nFind all airlines that have at least 10 flights. => ", "response": "SELECT Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.Abbreviation = T2.Airline GROUP BY T2.Airline HAVING COUNT(*) >= 10;"}
{"question": "Which airlines have at least 10 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFind the first name and gender of the student who has allergy to milk but not cat. => SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\nFind the faculty rank that has the least members. => SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1\nCompute the average price of all products with manufacturer code equal to 2. => SELECT avg(price) FROM products WHERE Manufacturer  =  2\nWhat is the average quantity of stocks? => SELECT avg(Quantity) FROM stock\nHow many times has the student Linda Smith visited Subway? => SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";\nWhich airlines have at least 10 flights? => ", "response": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10"}
{"question": "Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nHow many distinct incident type codes are there? => SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident\nFind the number of courses provided in each semester and year. => SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\nList the titles of all items in alphabetic order . => SELECT title FROM item ORDER BY title\nWhat are the different software platforms for devices, ordered by frequency descending? => SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC\nFind the number and average age of students living in each city. => SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code\nFind all airlines that have fewer than 200 flights. => ", "response": "SELECT * FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200)"}
{"question": "Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow home city where at least two drivers older than 40 are from. => SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2\nCount the number of products. => SELECT count(*) FROM products\nList the addresses of all the course authors or tutors. => SELECT address_line_1 FROM Course_Authors_and_Tutors\nWhat are names of stations that have average bike availability above 10 and are not located in San Jose city? => SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"\nWhat are the ids of all songs that have higher resolution of the average resolution in the modern genre? => SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")\nWhich airlines have less than 200 flights? => ", "response": "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200)"}
{"question": "What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the name, city, country, and elevation for every airport in the city of New York? => SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'\nFind the names of all instructors whose name includes the substring \u201cdar\u201d. => SELECT name FROM instructor WHERE name LIKE '%dar%'\nHow many bands are there? => SELECT count(*) FROM Band\nList the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'. => SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'\nWhat is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"? => SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"\nWhat are flight numbers of Airline \"United Airlines\"? => ", "response": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'"}
{"question": "Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nCount how many appointments have been made in total. => SELECT count(*) FROM appointment\nFind out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders. => SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;\nFind the id for the trips that lasted at least as long as the average duration of trips in zip code 94103. => SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)\nFind the id and last name of the student that has the most behavior incidents? => SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\nWhere does the customer with the first name Linda live? And what is her email? => SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'\nWhich flight numbers correspond to United Airlines flights? => ", "response": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'"}
{"question": "What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nList the names of all distinct wines that have scores higher than 90. => SELECT Name FROM WINE WHERE score  >  90\nWhich organisation type hires most research staff? => SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\nFind the names of customers whose name contains \"Diana\". => SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"\nHow many characteristics does the product named \"laurel\" have? => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"\nGive the section titles of the document with the name \"David CV\". => SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"\nWhat are flight numbers of flights departing from Airport \"APG\"? => ", "response": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\""}
{"question": "Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow the nations that have both hosts older than 45 and hosts younger than 35. => SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\nReturn the descriptions and names of the courses that have more than two students enrolled in. => SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\nList the name of rooms with king or queen bed. => SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";\nFind the number of different cities that employees live in. => SELECT COUNT(DISTINCT city) FROM EMPLOYEE\nWhat are the team and starting year of technicians? => SELECT Team ,  Starting_Year FROM technician\nGive the flight numbers of flights leaving from APG. => ", "response": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'"}
{"question": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nCount the number of transactions. => SELECT count(*) FROM Financial_transactions\nShow all information on the airport that has the largest number of international passengers. => SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1\nWhat are the names of all airports whose elevation is between -50 and 50? => SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50\nWhen was the order placed whose shipment tracking number is 3452? Give me the date. => SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452\nRetrieve all the first and last names of authors in the alphabetical order of last names. => SELECT fname ,  lname FROM authors ORDER BY lname\nWhat are flight numbers of flights arriving at Airport \"APG\"? => ", "response": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'"}
{"question": "Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nCount the number of games taken place in park \"Columbia Park\" in 1907. => SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';\nWhat are the names of all instructors with names that include \"dar\"? => SELECT name FROM instructor WHERE name LIKE '%dar%'\nList all schools and their nicknames in the order of founded year. => SELECT school ,  nickname FROM university ORDER BY founded\nWhat is the average latitude and longitude of the starting points of all trips? => SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id\nHow many students are in each department? => SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\nGive the flight numbers of flights landing at APG. => ", "response": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'"}
{"question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the id of every employee who has at least a salary of  100000? => SELECT eid FROM Employee WHERE salary  >  100000\nWhat is the total number of students? => SELECT count(*) FROM Student\nGive the average price and case of wines made from Zinfandel grapes in the year 2009. => SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\nShow the name of the shop that has the most kind of devices in stock. => SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1\nHow many problems did the product called \"voluptatem\" have in record? => SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"\nWhat are flight numbers of flights departing from City \"Aberdeen \"? => ", "response": "SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'"}
{"question": "Give the flight numbers of flights leaving from Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFor each competition, count the number of matches. => SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition\nList all department names ordered by their starting date. => SELECT dname FROM department ORDER BY mgr_start_date\nWhat is the name of the medication used for the patient staying in room 111? => SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111\nCount the number of parties. => SELECT count(*) FROM party\nWhat are the names for all aircrafts with at least 2 flights? => SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\nGive the flight numbers of flights leaving from Aberdeen. => ", "response": "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'"}
{"question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nFind the names of nurses who are nursing an undergoing treatment. => SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID\nHow many customers have an account? => SELECT count(DISTINCT customer_id) FROM Accounts\nList all pilot names in ascending alphabetical order. => SELECT Name FROM pilot ORDER BY Name ASC\nWhat are the names of parties that have both delegates on \"Appropriations\" committee and => SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"\nList all the product names with the color description \"white\". => SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"\nWhat are flight numbers of flights arriving at City \"Aberdeen\"? => ", "response": "SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'"}
{"question": "Give the flight numbers of flights arriving in Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat is the total student capacity of all dorms? => SELECT sum(student_capacity) FROM dorm\nWhat are the official names of cities that have population over 1500 or less than 500? => SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\nWhat are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21' => SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'\nWhich countries have more than one mountain? => SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1\nWhat is the id and salary of the employee named Mark Young? => SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\nGive the flight numbers of flights arriving in Aberdeen. => ", "response": "SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'"}
{"question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWho are Bob's friends? => SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'\nWhat is the name of the track that has had the greatest number of races? => SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\nHow many credits does course CIS-220 have, and what its description? => SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'\nWhich locations contains both shops that opened after the year 2012 and shops that opened before 2008? => SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008\nWhich buildings do not have any company office? Give me the building names. => SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\nFind the number of flights landing in the city of Aberdeen or Abilene. => ", "response": "SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')"}
{"question": "How many flights land in Aberdeen or Abilene?", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the descriptions of all the project outcomes? => SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\nHow many sports do we have? => SELECT count(DISTINCT sportname) FROM Sportsinfo\nShow all cities and corresponding number of students. => SELECT city_code ,  count(*) FROM Student GROUP BY city_code\nWhich teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers. => SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"\nWhat is the name of the artist with the greatest number of albums? => SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\nHow many flights land in Aberdeen or Abilene? => ", "response": "SELECT count(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')"}
{"question": "Find the name of airports which do not have any flight in and out.", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nShow the member name and hometown who registered a branch in 2016. => SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016\nWhat are the first names and date of birth of professors teaching course ACCT-211? => SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"\nFind the first and last name of students who are not in the largest major. => SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)\nFind the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019. => SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\nWhat is the average number of audience for festivals? => SELECT avg(Num_of_Audience) FROM festival_detail\nFind the name of airports which do not have any flight in and out. => ", "response": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)"}
{"question": "Which airports do not have departing or arriving flights?", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "prompt": "Given a database 'flight_2' have 3 tables named 'airlines', 'airports', 'flights'. airlines tbl have columns: 'uid', 'Airline', 'Abbreviation', 'Country'. airports tbl have columns: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'. flights tbl have columns: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'. \nTranslate text to SQL: \nWhat are the names of captains that have either the rank Midshipman or Lieutenant? => SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'\nFind all the catalog publishers whose name contains \"Murray\" => SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"\nReturn the names of entrepreneurs do no not have the investor Rachel Elnaugh. => SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"\nFind all the songs that do not have a lead vocal. => SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\nHow many different statuses do cities have? => SELECT count(DISTINCT Status) FROM city\nWhich airports do not have departing or arriving flights? => ", "response": "SELECT AirportCode, AirportName FROM airports WHERE AirportCode NOT IN (SELECT DISTINCT SourceAirport FROM flights UNION SELECT DISTINCT DestAirport FROM flights)"}
{"question": "How many employees are there?", "sql": "SELECT count(*) FROM employee", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nHow many allergy entries are there? => SELECT count(DISTINCT allergy) FROM Allergy_type\nHow many colors are there? => SELECT count(*) FROM ref_colors\nWhich cities have lower temperature in March than in Dec and have never served as host cities? => SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\nWhat are the characters and duration of actors? => SELECT Character ,  Duration FROM actor\nWhat are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from? => SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3\nHow many employees are there? => ", "response": "SELECT count(*) FROM employee"}
{"question": "Count the number of employees", "sql": "SELECT count(*) FROM employee", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nReturn the investors who have invested in two or more entrepreneurs. => SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2\nWhat are the different location codes for documents? => SELECT DISTINCT location_code FROM Document_locations\nShow the case burden of counties in descending order of population. => SELECT Case_burden FROM county_public_safety ORDER BY Population DESC\nFind the name and budget of departments whose budgets are more than the average budget. => SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\nWhat are the title, id, and description of the movie with the greatest number of actors? => SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1\nCount the number of employees => ", "response": "SELECT COUNT(*) FROM employee"}
{"question": "Sort employee names by their age in ascending order.", "sql": "SELECT name FROM employee ORDER BY age", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat are the id and zip code of the address with the highest monthly rental? => SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1\nShow the denomination shared by more than one school. => SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1\nReturn the titles of any movies with an R rating. => SELECT title FROM film WHERE rating  =  'R'\nGive the years and official names of the cities of each competition. => SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID\nShow the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50. => SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50\nSort employee names by their age in ascending order. => ", "response": "SELECT Name FROM employee ORDER BY Age ASC"}
{"question": "List the names of employees and sort in ascending order of age.", "sql": "SELECT name FROM employee ORDER BY age", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nGive me the name and description of the document type code RV. => SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"\nHow many enzymes do not have any interactions? => SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\nReport the distinct president vote and the vice president vote. => SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD\nWhich city is post code 255 located in? => SELECT city FROM addresses WHERE zip_postcode  =  255\nShow all statement id and the number of accounts for each statement. => SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID\nList the names of employees and sort in ascending order of age. => ", "response": "SELECT Name FROM employee ORDER BY age ASC"}
{"question": "What is the number of employees from each city?", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat are the lifespans of representatives in descending order of vote percent? => SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC\nWhat is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"? => SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"\nHow many students are affected by each allergy type? => SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\nWhich problem id and log id are assigned to the staff named Rylan Homenick? => SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"\nWhat are the names and trade names of the medicines which has 'Yes' value in the FDA record? => SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'\nWhat is the number of employees from each city? => ", "response": "SELECT City, count(*) FROM employee GROUP BY City"}
{"question": "Count the number of employees for each city.", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nList all the types of forms. => SELECT DISTINCT form_type_code FROM forms\nWhich clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs. => SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"\nWhat is the email of the student with first name \"Emma\" and last name \"Rohan\"? => SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"\nWhat are the names of all the different reviewers who rates Gone with the Wind? => SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'\nWhich parties have hosts of age above 50? Give me the party locations. => SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50\nCount the number of employees for each city. => ", "response": "SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City"}
{"question": "Which cities do more than one employee under age 30 come from?", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat are the names of all of Bob's friends? => SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'\nHow many musicians play in the song \"Flash\"? => SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\nWhich party has two or more records? => SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2\nList the names of courses in alphabetical order? => SELECT course_name FROM courses ORDER BY course_name\nWhat is the first name of the student whose last name starts with the letter S and is taking ACCT-211? => SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'\nWhich cities do more than one employee under age 30 come from? => ", "response": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1"}
{"question": "Find the cities that have more than one employee under age 30.", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nFind the full name of employee who supported the most number of customers. => SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nFind the name, headquarter and founder of the manufacturer that has the highest revenue. => SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1\nShow the locations of parties with hosts older than 50. => SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50\nWhat are the nationalities and ages of journalists? => SELECT Nationality ,  Age FROM journalist\nFind the name and id of the team that won the most times in 2008 postseason. => SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\nFind the cities that have more than one employee under age 30. => ", "response": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;"}
{"question": "Find the number of shops in each location.", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nShow the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order. => SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\nName all the products with next entry ID greater than 8. => SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\nWhat is the name and country of origin of the artist who released a song that has \"love\" in its title? => SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"\nList all the login names and family names of course author and tutors. => SELECT login_name ,  family_name FROM Course_Authors_and_Tutors\nWhat are the different years for all competitions that are not of type equal to tournament? => SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"\nFind the number of shops in each location. => ", "response": "SELECT Location, COUNT(*) AS Num_shops FROM shop GROUP BY Location"}
{"question": "How many shops are there in each location?", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nShow the role code with the least employees. => SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1\nShow the description for role name \"Proof Reader\". => SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"\nGive me the claim date, settlement date for all the claims whose claimed amount is larger than the average. => SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )\nList all country and league names. => SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id\nWhat are the ids of the problems reported after the date of any problems reported by Rylan Homenick? => SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )\nHow many shops are there in each location? => ", "response": "SELECT Location, COUNT(*) AS Total_Shops FROM shop GROUP BY Location"}
{"question": "Find the manager name and district of the shop whose number of products is the largest.", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat is the name of the customer who has the largest number of orders? => SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\nHow many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010? => SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";\nList official names of cities in descending order of population. => SELECT Official_Name FROM city ORDER BY Population DESC\nHow many trips started from Mountain View city and ended at Palo Alto city? => SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"\nShow the attendances of the performances at location \"TD Garden\" or \"Bell Centre\" => SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"\nFind the manager name and district of the shop whose number of products is the largest. => ", "response": "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1"}
{"question": "What are the manager name and district of the shop that sells the largest number of products?", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nFor the problem with id 10, return the ids and dates of its problem logs. => SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10\nWhat are the names of storms that did not affect any regions? => SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)\nHow many students got accepted after the tryout? => SELECT count(*) FROM tryout WHERE decision  =  'yes'\nWhat is the minimum, maximum, and average market value for every company? => SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company\nWhich channels are not owned by CCTV? Give me the channel names. => SELECT name FROM channel WHERE OWNER != 'CCTV'\nWhat are the manager name and district of the shop that sells the largest number of products? => ", "response": "SELECT shop.Manager_name, shop.District FROM shop\nJOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nJOIN (SELECT Shop_ID, SUM(Number_products) AS total_products FROM shop GROUP BY Shop_ID) AS shop_products ON shop.Shop_ID = shop_products.Shop_ID\nWHERE shop_products.total_products = (SELECT MAX(total_products) FROM (SELECT Shop_ID, SUM(Number_products) AS total_products FROM shop GROUP BY Shop_ID) AS shop_products)"}
{"question": "find the minimum and maximum number of products of all stores.", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nHow many faculty members participate in each activity? Return the activity names and the number of faculty members. => SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID\nShow the name of employees with three lowest salaries. => SELECT name FROM Employee ORDER BY salary ASC LIMIT 3\nCompute the total amount of settlement across all the settlements. => SELECT sum(Amount_Settled) FROM Settlements\nGive me a list of names and years of races that had any driver whose forename is Lewis? => SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\nWhat are the names of people who have a height greater than 200 or less than 190? => SELECT name FROM people WHERE height  >  200 OR height  <  190\nfind the minimum and maximum number of products of all stores. => ", "response": "SELECT MIN(Number_products), MAX(Number_products) FROM shop"}
{"question": "What are the minimum and maximum number of products across all the shops?", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nHow many students attend course English? => SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\nShow all the information about election. => SELECT * FROM election\nFind the names of users who did not leave any review. => SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\nWhich catalog publisher has published the most catalogs? => SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1\nWhat are the first name and last name of all the teachers? => SELECT DISTINCT firstname ,  lastname FROM teachers\nWhat are the minimum and maximum number of products across all the shops? => ", "response": "SELECT MIN(Number_products), MAX(Number_products) FROM shop"}
{"question": "Return the name, location and district of all shops in descending order of number of products.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nFind the name of physicians who are in charge of more than one patient. => SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1\nWhat is the salaray and name of the employee with the most certificates to fly planes more than 5000? => SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\nWhich programs are never broadcasted in the morning? Give me the names of the programs. => SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"\nShow the name and phone of the customer without any mailshot. => SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)\nShow the zip code of the county with name \"Howard\". => SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"\nReturn the name, location and district of all shops in descending order of number of products. => ", "response": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC"}
{"question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nShow the number of transaction types. => SELECT count(DISTINCT transaction_type) FROM Financial_Transactions\nWhat is the name of customers who do not use Cash as payment method. => SELECT customer_name FROM customers WHERE payment_method != 'Cash'\nWhat is all the information about all people? => SELECT * FROM people\nFind the list of distinct ranks for faculty. => SELECT DISTINCT rank FROM Faculty\nList the names of all genres in alphabetical oder, together with its ratings. => SELECT g_name ,  rating FROM genre ORDER BY g_name\nSort all the shops by number products in descending order, and return the name, location and district of each shop. => ", "response": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC"}
{"question": "Find the names of stores whose number products is more than the average number of products.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat are the names of all aircrafts that John Williams have certificates to be able to fly? => SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"\nWhat is the average rating for right-footed players and left-footed players? => SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot\nCount the number of colors that are not used in any products. => SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\nFor each product with some problems, list the count of problems and the product id. => SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id\nCount the number of rooms that are not in the Lamberton building. => SELECT count(*) FROM classroom WHERE building != 'Lamberton'\nFind the names of stores whose number products is more than the average number of products. => ", "response": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)"}
{"question": "Which shops' number products is above the average? Give me the shop names.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat is the id of the routes whose source and destination airports are in the United States? => SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\nShow the denomination shared by schools founded before 1890 and schools founded after 1900 => SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\nFind the last name of the staff whose email address contains \"wrau\". => SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"\nShow the names of members and the location of performances they attended in ascending alphabetical order of their names. => SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC\nFind the name of the department that offers the largest number of credits of all classes. => SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1\nWhich shops' number products is above the average? Give me the shop names. => ", "response": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)"}
{"question": "find the name of employee who was awarded the most times in the evaluation.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nHow many clubs does \"Linda Smith\" belong to? => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\nFor each type of store, how many of them are there? => SELECT TYPE ,  count(*) FROM store GROUP BY TYPE\nFind the average and maximum rating of all reviews. => SELECT avg(rating) ,  max(rating) FROM review\nReturn the first names and last names of employees who earn more than 30000 in salary. => SELECT fname ,  lname FROM employee WHERE salary  >  30000\nWhat are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'? => SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'\nfind the name of employee who was awarded the most times in the evaluation. => ", "response": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1"}
{"question": "Which employee received the most awards in evaluations? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhich document type is described with the prefix 'Initial'? => SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'\nWhat are the first and last names of all customers with between 1000 and 3000 dollars outstanding? => SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;\nList the names of departments where some physicians are primarily affiliated with. => SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1\nShow the account name, id and the number of transactions for each account. => SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\nWhich allergy type has most number of allergies? => SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1\nWhich employee received the most awards in evaluations? Give me the employee name. => ", "response": "SELECT Name FROM employee \nWHERE Employee_ID IN \n(SELECT Employee_ID FROM evaluation \nGROUP BY Employee_ID \nORDER BY COUNT(*) DESC \nLIMIT 1)"}
{"question": "Find the name of the employee who got the highest one time bonus.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nShow the location code, the starting date and ending data in that location for all the documents. => SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations\nWhich vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"\nList the names and birthdays of the top five players in terms of potential. => SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5\nWhat is the publisher with most number of books? => SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1\nWhat is the vocal type of the band mate whose first name is \"Marianne\" played the most? => SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nFind the name of the employee who got the highest one time bonus. => ", "response": "SELECT e.Name FROM employee AS e JOIN evaluation AS ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1"}
{"question": "Which employee received the biggest bonus? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat are the names of products whose availability equals to 1? => SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1\nwhat is the phone number of employees whose salary is in the range of 8000 and 12000? => SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000\nWhat are the names of players who have the best dribbling? => SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)\nList names for drivers from Hartford city and younger than 40. => SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40\nHow many regions do we have? => SELECT count(*) FROM region\nWhich employee received the biggest bonus? Give me the employee name. => ", "response": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)"}
{"question": "Find the names of employees who never won any award in the evaluation.", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"? => SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"\nWhat are the total points for all gymnasts, ordered by total points descending? => SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\nWhich vocal type has the band mate with first name \"Solveig\" played the most? => SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nWhat is all the information regarding employees who are managers? => SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id\nWhat is the name of the room that can accommodate the most people? => SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;\nFind the names of employees who never won any award in the evaluation. => ", "response": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"}
{"question": "What are the names of the employees who never received any evaluation?", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nwhat are the order id and customer id of the oldest order? => SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\nFor each grant id, how many documents does it have, and which one has the most? => SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1\nPlease list the name and id of all artists that have at least 3 albums in alphabetical order. => SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name\nWhat are the distinct names of wines with prices higher than any wine from John Anthony winery. => SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")\nCount the number of transactions. => SELECT count(*) FROM Financial_transactions\nWhat are the names of the employees who never received any evaluation? => ", "response": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"}
{"question": "What is the name of the shop that is hiring the largest number of employees?", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nHow many devices are there? => SELECT count(*) FROM device\nWhat is the team and starting year for each technician? => SELECT Team ,  Starting_Year FROM technician\nShow the years, book titles, and publishers for all books, in descending order by year. => SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC\nWhat is the total number of deaths and damage for all storms with a max speed greater than the average? => SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)\nFind the code of the location with the largest number of documents. => SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1\nWhat is the name of the shop that is hiring the largest number of employees? => ", "response": "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY hiring.Shop_ID ORDER BY count(hiring.Employee_ID) DESC LIMIT 1"}
{"question": "Which shop has the most employees? Give me the shop name.", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nHow many tasks does each project have? List the task count and the project detail. => SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id\nReturn the founder of Sony. => SELECT founder FROM manufacturers WHERE name  =  'Sony'\nReturn the apartment number and the number of rooms for each apartment. => SELECT apt_number ,  room_count FROM Apartments\nShow the names of climbers and the heights of mountains they climb. => SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\nCount the number of wines produced at Robert Biale winery. => SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\nWhich shop has the most employees? Give me the shop name. => ", "response": "SELECT T2.Name FROM shop AS T2 JOIN hiring AS T1 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID HAVING count(*) = (SELECT max(count) FROM (SELECT count(*) as count FROM hiring GROUP BY Shop_ID) as counts)"}
{"question": "Find the name of the shops that do not hire any employee.", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nHow many addresses are there in country USA? => SELECT count(*) FROM addresses WHERE country  =  'USA'\nReturn the countries of the mountains that have a height larger than 5000. => SELECT Country FROM mountain WHERE Height  >  5000\nWhat are the names of all the playlists? => SELECT name FROM playlists;\nWhat are the different names and countries of origins for all artists whose song ratings are above 9? => SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9\nWhat is average and maximum salary of all employees. => SELECT avg(salary) ,  max(salary) FROM Employee\nFind the name of the shops that do not hire any employee. => ", "response": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)"}
{"question": "Which shops run with no employees? Find the shop names", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhich advisors have more than two students? => SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2\nWhat are the average and minimum age of captains in different class? => SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS\nWhat is the joined year of the pilot of the highest rank? => SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1\nWhat is the total number of rooms available in this inn? => SELECT count(*) FROM Rooms;\nWhich stadium name contains the substring \"Bank\"? => SELECT name FROM stadium WHERE name LIKE \"%Bank%\"\nWhich shops run with no employees? Find the shop names => ", "response": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)"}
{"question": "Find the number of employees hired in each shop; show the shop name as well.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nCount the number of accounts. => SELECT count(*) FROM Accounts\nWhat is the average enrollment number? => SELECT avg(enr) FROM College\nShow the names of the three most recent festivals. => SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3\nWhat is the name and checking balance of the account which has the lowest savings balance? => SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\nWhat are the names of body builders whose total score is higher than 300? => SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300\nFind the number of employees hired in each shop; show the shop name as well. => ", "response": "SELECT shop.Name, COUNT(hiring.Employee_ID) as num_hired \nFROM shop \nINNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID \nGROUP BY shop.Name"}
{"question": "For each shop, return the number of employees working there and the name of the shop.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nReturn the total number of distinct customers. => SELECT count(*) FROM customers\nWhat is the average enrollment number? => SELECT avg(enr) FROM College\nWhen did the first staff member start working? => SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1\nWhich channels are broadcast in the morning? Give me the channel names. => SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'\nList the order dates of all the bookings. => SELECT Order_Date FROM BOOKINGS\nFor each shop, return the number of employees working there and the name of the shop. => ", "response": "SELECT shop.Name, count(hiring.Employee_ID) as Number_of_Employees \nFROM shop \nJOIN hiring ON shop.Shop_ID = hiring.Shop_ID \nGROUP BY shop.Name"}
{"question": "What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat is the forename and surname of the driver with the shortest laptime? => SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1\nWhat is the name of the department with the most students enrolled? => SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1\nList the studios of each film and the number of films produced by that studio. => SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\nWhat are the daily hire costs for the products with substring 'Book' in its name? => SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'\nFind the name of the program that is broadcast most frequently. => SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\nWhat is total bonus given in all evaluations? => ", "response": "SELECT SUM(Bonus) FROM evaluation"}
{"question": "Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhat are the phones of departments in Room 268? => SELECT DPhone FROM DEPARTMENT WHERE Room  =  268\nWhat is the total amount of grant money for research? => SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'\nShow the transaction type descriptions and dates if the share count is smaller than 10. => SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10\nFind the id and surname of the driver who participated the most number of races? => SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\nHow many students are there? => SELECT count(*) FROM student\nFind the total amount of bonus given in all the evaluations. => ", "response": "SELECT sum(Bonus) FROM evaluation"}
{"question": "Give me all the information about hiring.", "sql": "SELECT * FROM hiring", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nCount the number of different statuses. => SELECT count(DISTINCT Status) FROM city\nWhat are all company names that have a corresponding movie directed in the year 1999? => SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999\nFor each Orange county campus, report the number of degrees granted after 2000. => SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus\nHow many schools are there? => SELECT count(*) FROM school\nWhat are the titles of films that do not have a film market estimation? => SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)\nGive me all the information about hiring. => ", "response": "SELECT * FROM hiring"}
{"question": "What is all the information about hiring?", "sql": "SELECT * FROM hiring", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nReturn the id of the department with the fewest staff assignments. => SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1\nShow the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'. => SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'\nShow the authors of submissions and the acceptance results of their submissions. => SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID\nHow many bands are there? => SELECT count(*) FROM Band\nShow all church names that have hosted least two weddings. => SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2\nWhat is all the information about hiring? => ", "response": "SELECT * FROM hiring"}
{"question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nFind products with max page size as \"A4\" and pages per minute color smaller than 5. => SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5\nWhat is the average training hours of all players? => SELECT avg(HS) FROM Player\nList the names of products that are not in any event. => SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)\nFind the id and location of circuits that belong to France or Belgium? => SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"\nHow many allergy entries are there? => SELECT count(DISTINCT allergy) FROM Allergy_type\nWhich district has both stores with less than 3000 products and stores with more than 10000 products? => ", "response": "SELECT District FROM shop WHERE Number_products < 3000 AND District IN (SELECT District FROM shop WHERE Number_products > 10000)"}
{"question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nReturn the gender and name of artist who produced the song with the lowest resolution. => SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1\nList all students' first names and last names who majored in 600. => SELECT Fname , Lname FROM Student WHERE Major  =  600;\nShow the number of male and female assistant professors. => SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex\nHow many medications are prescribed for each brand? => SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand\nShow distinct types of artworks that are nominated in festivals in 2007. => SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007\nFind the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. => ", "response": "SELECT T1.District FROM shop AS T1 WHERE T1.Number_products < 3000 AND T1.District IN (SELECT T2.District FROM shop AS T2 WHERE T2.Number_products > 10000) GROUP BY T1.District"}
{"question": "How many different store locations are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nWhich skill is used in fixing the most number of faults? List the skill id and description. => SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\nShow the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80. => SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80\nFind all the stage positions of the musicians with first name \"Solveig\" => SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"\nHow many scientists do not have any projects assigned to them? => SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\nwhat is the phone number of employees whose salary is in the range of 8000 and 12000? => SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000\nHow many different store locations are there? => ", "response": "SELECT COUNT(DISTINCT Location) FROM shop"}
{"question": "Count the number of distinct store locations.", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "prompt": "Given a database 'employee_hire_evaluation' have 4 tables named 'employee', 'shop', 'hiring', 'evaluation'. employee tbl have columns: 'Employee_ID', 'Name', 'Age', 'City'. shop tbl have columns: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'. hiring tbl have columns: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'. evaluation tbl have columns: 'Employee_ID', 'Year_awarded', 'Bonus'. \nTranslate text to SQL: \nFind the name and description of the role with code \"MG\". => SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"\nHow many colleges has more than 15000 students? => SELECT count(*) FROM College WHERE enr  >  15000\nHow many counties are there in total? => SELECT count(*) FROM county\nHow many users are there? => SELECT count(*) FROM useracct\nWhich contact channel codes were used less than 5 times? => SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\nCount the number of distinct store locations. => ", "response": "SELECT count(DISTINCT Location) FROM shop"}
{"question": "How many documents do we have?", "sql": "SELECT count(*) FROM Documents", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the ids of documents which don't have expense budgets? => SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses\nShow ids of students who play video game and play sports. => SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games\nwhat is the full name and id of the college with the largest number of baseball players? => SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\nFor each zip code, what is the average mean temperature for all dates that start with '8'? => SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code\nWhat is the name of the activity that has the most faculty members involved in? => SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\nHow many documents do we have? => ", "response": "SELECT COUNT(*) FROM Documents"}
{"question": "Count the number of documents.", "sql": "SELECT count(*) FROM Documents", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the names of the physician who prescribed the highest dose? => SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1\nWhich events id does not have any participant with detail 'Kenyatta Kuhn'? => SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'\nWhat is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ? => SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998\nFind the average number of bedrooms of all the apartments. => SELECT avg(bedroom_count) FROM Apartments\nWhat is the headquarter of the company with the largest sales? => SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1\nCount the number of documents. => ", "response": "SELECT COUNT(*) FROM Documents"}
{"question": "List document IDs, document names, and document descriptions for all documents.", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nHow many customers don't have an account? => SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\nFind the balance of the checking account belonging to an owner whose name contains 'ee'. => SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'\nFind the salary and manager number for those employees who is working under a manager. => SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"\nWhat are the names of stations that have latitude lower than 37.5? => SELECT name FROM station WHERE lat  <  37.5\nWhat are the full names of all students => SELECT Fname ,  Lname FROM Student\nList document IDs, document names, and document descriptions for all documents. => ", "response": "SELECT Document_ID, Document_Name, Document_Description FROM Documents"}
{"question": "What are the ids, names, and descriptions for all documents?", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nList the names and the locations that the enzymes can make an effect. => SELECT name ,  LOCATION FROM enzyme\nCount the number of trips that did not end in San Francisco city. => SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\nReturn the names and locations of shops, ordered by name in alphabetical order. => SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC\nList the names of players that do not have coaches. => SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)\nWhat are the job ids corresponding to jobs with average salary above 8000? => SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000\nWhat are the ids, names, and descriptions for all documents? => ", "response": "SELECT Document_ID, Document_Name, Document_Description FROM Documents"}
{"question": "What is the document name and template id for document with description with the letter 'w' in it?", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"? => SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"\nWhat are the delegate and name of the county they belong to, for each county? => SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District\nShow the most common apartment type code among apartments with more than 1 bathroom. => SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\nShow all storm names except for those with at least two affected regions. => SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2\nFind the number and averaged salary of all instructors who are in the department with the highest budget. => SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1\nWhat is the document name and template id for document with description with the letter 'w' in it? => ", "response": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Description LIKE '%w%'"}
{"question": "Return the names and template ids for documents that contain the letter w in their description.", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the names of wrestlers and their teams in elimination, ordered descending by days held? => SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC\nWhat is the average price for wines not produced in Sonoma county? => SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')\nWhat are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21' => SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'\nHow many council taxes are collected for renting arrears ? => SELECT count(*) FROM rent_arrears\nWhat is the product ID of the most frequently ordered item on invoices? => SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1\nReturn the names and template ids for documents that contain the letter w in their description. => ", "response": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Description LIKE '%w%'"}
{"question": "What is the document id, template id and description for document named \"Robbin CV\"?", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nShow the names of schools with a total budget amount greater than 100 or a total endowment greater than 10. => SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10\nWhat are the first names of all the different drivers in alphabetical order? => SELECT DISTINCT forename FROM drivers ORDER BY forename ASC\nReturn the full name and id of the actor or actress who starred in the greatest number of films. => SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1\nWhat is the average gradepoint for students with the last name Smith? => SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"\nWhat is the average number of gold medals for clubs? => SELECT avg(Gold) FROM club_rank\nWhat is the document id, template id and description for document named \"Robbin CV\"? => ", "response": "SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description \nFROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = \"Robbin CV\""}
{"question": "Return the document id, template id, and description for the document with the name Robbin CV.", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the details for statements with the details 'Private Project', and what are the names of the corresponding documents? => SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'\nWhat are the titles of all the albums? => SELECT title FROM albums;\nWhich employee manage most number of peoples? List employee's first and last name, and number of people report to that employee. => SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;\nCompute the total salary that the player with first name Len and last name Barker received between 1985 to 1990. => SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;\nWhat are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate? => SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate\nReturn the document id, template id, and description for the document with the name Robbin CV. => ", "response": "SELECT document_id, template_id, document_description FROM Documents WHERE document_name = 'Robbin CV'"}
{"question": "How many different templates do all document use?", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the names and years released for the movies with the top 3 highest ratings? => SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\nWhat are the names and genders of all artists who released songs in the month of March? => SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"\nReturn the average and minimum ages across artists from the United States. => SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\nWhat is the average rating for right-footed players and left-footed players? => SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot\nHow many different roles are there in the club \"Bootup Baltimore\"? => SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"\nHow many different templates do all document use? => ", "response": "SELECT COUNT(DISTINCT Template_ID) FROM Documents;"}
{"question": "Count the number of different templates used for documents.", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the number and averaged salary of all instructors who are in the department with the highest budget. => SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1\nFind the names and opening hours of the tourist attractions that we get to by bus or walk. => SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"\nFind the names of all instructors whose name includes the substring \u201cdar\u201d. => SELECT name FROM instructor WHERE name LIKE '%dar%'\nFind the distinct first names of the students who have class senator votes. => SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE\nGive the maximum and minimum weeks on top across all volumes. => SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume\nCount the number of different templates used for documents. => ", "response": "SELECT COUNT(DISTINCT Template_ID) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID"}
{"question": "How many documents are using the template with type code 'PPT'?", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the id of the shortest trip? => SELECT id FROM trip ORDER BY duration LIMIT 1\nWhat is the zip code of the hosue of the employee named Janessa Sawayn? => SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nCount the number of book clubs. => SELECT count(*) FROM book_club\nGive the ids of the three products purchased in the largest amounts. => SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3\nWhat is the lowest salary in departments with average salary greater than the overall average. => SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)\nHow many documents are using the template with type code 'PPT'? => ", "response": "SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')"}
{"question": "Count the number of documents that use the PPT template type.", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nHow many classes are held in each department? => SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code\nWhat are the song names for every song whose rating is less than the minimum rating for English songs? => SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\nFind the name of companies whose revenue is smaller than the revenue of all companies based in Austin. => SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')\nWhat are the first names of all students in Smith Hall? => SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'\nHow many students live in each city and what are their average ages? => SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code\nCount the number of documents that use the PPT template type. => ", "response": "SELECT count(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')"}
{"question": "Show all template ids and number of documents using each template.", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"? => SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1\nWhat is the average duration in milliseconds of tracks that belong to Latin or Pop genre? => SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"\nFind the famous titles of artists that do not have any volume. => SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\nFind the name of customers who are living in Colorado? => SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"\nWhat is draft detail of the document with id 7? => SELECT draft_details FROM Document_Drafts WHERE document_id = 7;\nShow all template ids and number of documents using each template. => ", "response": "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Num_Of_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID"}
{"question": "What are all different template ids used for documents, and how many times were each of them used?", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhich employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies. => SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;\nWhat is the temperature of \"Shanghai\" city in January? => SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"\nFind the zip code in which the average mean visibility is lower than 10. => SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10\nWhat is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions? => SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\nShow director with the largest number of show times in total. => SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1\nWhat are all different template ids used for documents, and how many times were each of them used? => ", "response": "SELECT Templates.Template_ID, count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;"}
{"question": "What is the id and type code for the template used by the most documents?", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the first names of all teachers who have taught a course and the corresponding course codes? => SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num\nWhat is the country of the airport with the highest elevation? => SELECT country FROM airports ORDER BY elevation DESC LIMIT 1\nHow many airports are there per country? Order the countries by decreasing number of airports. => SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC\nHow many different genders are there in the dorms? => SELECT count(DISTINCT gender) FROM dorm\nWhat is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly? => SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5\nWhat is the id and type code for the template used by the most documents? => ", "response": "SELECT T1.Template_ID, T1.Template_Type_Code\nFROM Templates AS T1\nJOIN (\n    SELECT MAX(count_docs) AS max_docs\n    FROM (\n        SELECT COUNT(*) AS count_docs\n        FROM Documents\n        GROUP BY Template_ID\n    ) AS subquery\n) AS T2\nON (\n    SELECT COUNT(*) AS count_docs\n    FROM Documents\n    WHERE Template_ID = T1.Template_ID\n    GROUP BY Template_ID\n) = T2.max_docs"}
{"question": "Return the id and type code of the template that is used for the greatest number of documents.", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the maximum and minimum week on top of all volumes? => SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume\nList the names and phone numbers of all the distinct suppliers who supply red jeans. => SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"\nWhat is the average weight of all players? => SELECT avg(weight) FROM Player\nWhat are the names of all the scientists in alphabetical order? => SELECT name FROM scientists ORDER BY name\nFind the address and staff number of the shops that do not have any happy hour. => SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)\nReturn the id and type code of the template that is used for the greatest number of documents. => ", "response": "SELECT T.Template_ID, T.Template_Type_Code \nFROM Templates AS T \nJOIN Documents AS D ON T.Template_ID = D.Template_ID \nGROUP BY T.Template_ID \nORDER BY COUNT(D.Document_ID) DESC \nLIMIT 1"}
{"question": "Show ids for all templates that are used by more than one document.", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the age of the tallest person? => SELECT Age FROM people ORDER BY Height DESC LIMIT 1\nReturn all players sorted by college in ascending alphabetical order. => SELECT player FROM match_season ORDER BY College ASC\nHow many female Professors do we have? => SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"\nShow the status shared by cities with population bigger than 1500 and smaller than 500. => SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\nWhat are the origins of all flights that are headed to Honolulu? => SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"\nShow ids for all templates that are used by more than one document. => ", "response": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1"}
{"question": "What are the template ids of any templates used in more than a single document?", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the names of all tracks that are on the Movies playlist but not in the music playlist? => SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\nFind the the customer details and id for the customers who had more than one policy. => SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\nHow many schools are there in the department? => SELECT count(DISTINCT school_code) FROM department\nList member names and their party names. => SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\nWhat are the names and year of joining for artists that do not have the country \"United States\"? => SELECT name ,  year_join FROM artist WHERE country != 'United States'\nWhat are the template ids of any templates used in more than a single document? => ", "response": "SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1)"}
{"question": "Show ids for all templates not used by any document.", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the total amount of money in the invoices billed from Chicago, Illinois? => SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\nWhat are all the payment methods? => SELECT DISTINCT payment_method FROM customers\nList the first and last name of the students who do not have any food type allergy. => SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\nWhat are the name, id and the corresponding number of visits for each  tourist attraction? => SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID\nShow ids for all documents with budget types described as 'Government'. => SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"\nShow ids for all templates not used by any document. => ", "response": "SELECT T1.Template_ID FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Document_ID IS NULL;"}
{"question": "What are the ids for templates that are not used in any documents?", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nList from which date and to which date these staff work: project staff of the project which hires the most staffs => SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'\nWhich grade is studying in classroom 103? => SELECT DISTINCT grade FROM list WHERE classroom  =  103\nHow many trains have 'Express' in their names? => SELECT count(*) FROM train WHERE name LIKE \"%Express%\"\nShow teams that have suffered more than three eliminations. => SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3\nWhich activity has the most faculty members participating in? Find the activity name. => SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\nWhat are the ids for templates that are not used in any documents? => ", "response": "SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Template_ID IS NULL"}
{"question": "How many templates do we have?", "sql": "SELECT count(*) FROM Templates", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the name, location and seating for the most recently opened track? => SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\nHow many races are there? => SELECT count(*) FROM race\nShow theme and year for all exhibitions with ticket prices lower than 15. => SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15\nList all the customers in increasing order of IDs. => SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\nWhich state has the most customers? => SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1\nHow many templates do we have? => ", "response": "SELECT count(*) FROM Templates"}
{"question": "Count the number of templates.", "sql": "SELECT count(*) FROM Templates", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the maximum fastest lap speed in the Monaco Grand Prix in 2008? => SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\nGive me ids for all the trip that took place in a zip code area with average mean temperature above 60. => SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\nWhat are the first names and support rep ids for employees serving 10 or more customers? => SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\nHow many classes exist for each school? => SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code\nFor each dorm, how many amenities does it have? => SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid\nCount the number of templates. => ", "response": "SELECT COUNT(*) FROM Templates"}
{"question": "Show template ids, version numbers, and template type codes for all templates.", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the ids of the top three products that were purchased in the largest amount? => SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3\nReturn the most frequent result across all musicals. => SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the total quantity of products purchased by \"Rodrick Heaney\"? => SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\nWhat is the customer id, first and last name with least number of accounts. => SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\nWhat is the average rating stars and title for the oldest movie? => SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\nShow template ids, version numbers, and template type codes for all templates. => ", "response": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates"}
{"question": "What are the ids, version numbers, and type codes for each template?", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the name of the medication used for the patient staying in room 111? => SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111\nShow the total number of rooms of the apartments in the building with short name \"Columbus Square\". => SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"\nWhat are the name and typical buying and selling prices of the products that have color described as \"yellow\"? => SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"\nHow many stadiums are not in country \"Russia\"? => SELECT count(*) FROM stadium WHERE country != 'Russia'\nWhat are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'? => SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'\nWhat are the ids, version numbers, and type codes for each template? => ", "response": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates"}
{"question": "Show all distinct template type codes for all templates.", "sql": "SELECT DISTINCT template_type_code FROM Templates", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nReturn the average gross sales in dollars across all films. => SELECT avg(Gross_in_dollar) FROM film\nReturn ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products. => SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)\nWhich program was launched most recently? Return the program name. => SELECT name FROM program ORDER BY launch DESC LIMIT 1\nFind the names of all instructors in computer science department => SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'\nWhat are the first names and ids for customers who have two or more accounts? => SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\nShow all distinct template type codes for all templates. => ", "response": "SELECT DISTINCT Template_Type_Code FROM Templates"}
{"question": "What are the different template type codes?", "sql": "SELECT DISTINCT template_type_code FROM Templates", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the names of shops that have more than a single kind of device in stock? => SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1\nWhat is the city with the most customers? => SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;\nWhat is the id of the candidate whose email is stanley.monahan@example.org? => SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"\nWhat are the names of shops in ascending order of open year? => SELECT Shop_Name FROM shop ORDER BY Open_Year ASC\nWhat are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there? => SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"\nWhat are the different template type codes? => ", "response": "SELECT Template_Type_Code FROM Ref_Template_Types"}
{"question": "What are the ids of templates with template type code PP or PPT?", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the names and urls of images, sorted alphabetically? => SELECT image_name ,  image_url FROM images ORDER BY image_name\nWhat are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"? => SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"\nFind the description of the club called \"Tennis Club\". => SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"\nList the dates of enrollment and completion of the student with personal name \"Karson\". => SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"\nHow many stadiums are not in country \"Russia\"? => SELECT count(*) FROM stadium WHERE country != 'Russia'\nWhat are the ids of templates with template type code PP or PPT? => ", "response": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')"}
{"question": "Return the ids of templates that have the code PP or PPT.", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nGive the average price and case of wines made from Zinfandel grapes in the year 2009. => SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\nCount the number of customers. => SELECT count(*) FROM Customers\nWhich classroom has the most students? => SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1\nList all information about college sorted by enrollment number in the ascending order. => SELECT * FROM College ORDER BY enr\nFind the zip code in which the average mean visibility is lower than 10. => SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10\nReturn the ids of templates that have the code PP or PPT. => ", "response": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')"}
{"question": "How many templates have template type code CV?", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFor each type of store, how many of them are there? => SELECT TYPE ,  count(*) FROM store GROUP BY TYPE\nFind the details for all chip models. => SELECT * FROM chip_model\nFind the name and gender of the candidate who got the highest support rate. => SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\nHow many stadiums are there? => SELECT count(*) FROM stadium\nHow many courses that do not have prerequisite? => SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)\nHow many templates have template type code CV? => ", "response": "SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV'"}
{"question": "Count the number of templates of the type CV.", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the organisation type and id of the organisation which has the most number of research staff? => SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\nPlease show the most common occupation of players. => SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1\nShow the position of players and the corresponding number of players. => SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\nFind the average room count of the apartments that have the \"Studio\" type code. => SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\nReturn the hispanic percentage for cities in which the black percentage is greater than 10. => SELECT Hispanic FROM city WHERE Black  >  10\nCount the number of templates of the type CV. => ", "response": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'"}
{"question": "What is the version number and template type code for the template with version number later than 5?", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nList the first name and last name of customers have the amount of outstanding between 1000 and 3000. => SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;\nWhat is the savings balance of the account belonging to the customer with the highest checking balance? => SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1\nHow many schools have some students playing in goalie and mid positions. => SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')\nList the actual delivery date for all the orders with quantity 1 => SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1\nWhat is the number of flights? => SELECT count(*) FROM Flight\nWhat is the version number and template type code for the template with version number later than 5? => ", "response": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;"}
{"question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhich of the mill names contains the french word 'Moulin'? => SELECT name FROM mill WHERE name LIKE '%Moulin%'\nFind the names of Japanese constructors that have once earned more than 5 points? => SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5\nWhat is the minimum snatch score? => SELECT min(snatch) FROM body_builder\nHow many days had both mean humidity above 50 and mean visibility above 8? => SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8\nWhat are the names of all the different reviewers who rates Gone with the Wind? => SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'\nReturn the version numbers and template type codes of templates with a version number greater than 5. => ", "response": "SELECT Version_Number,Template_Type_Code FROM Templates WHERE Version_Number > 5"}
{"question": "Show all template type codes and number of templates for each.", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nCount the number of bank branches. => SELECT count(*) FROM bank\nFind the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. => SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\nWhat are the different card type codes, and how many different customers hold each type? => SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code\nReturn the top 3 greatest support rates. => SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\nTell me the first and last name of the student who has the most activities. => SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1\nShow all template type codes and number of templates for each. => ", "response": "SELECT Template_Type_Code, COUNT(*) AS \"Number of Templates\" FROM Templates GROUP BY Template_Type_Code"}
{"question": "What are the different template type codes, and how many templates correspond to each?", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name. => SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name\nHow many games are played for all students? => SELECT sum(gamesplayed) FROM Sportsinfo\nWhat is the average fee on a CSU campus in 2005? => SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005\nHom many musicians performed in the song \"Flash\"? => SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\nHow many claim processing stages are there in total? => SELECT count(*) FROM claims_processing_stages\nWhat are the different template type codes, and how many templates correspond to each? => ", "response": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code"}
{"question": "Which template type code has most number of templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the founded year of the non public school that was founded most recently? => SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1\nGive the names and scores of wines made from white grapes. => SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"\nShow the most common headquarter for companies. => SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the distinct ages of students who have secretary votes in the fall election cycle? => SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\nHow many problems are there for product voluptatem? => SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"\nWhich template type code has most number of templates? => ", "response": "SELECT Template_Type_Code, COUNT(*) AS num_templates FROM Templates GROUP BY Template_Type_Code ORDER BY num_templates DESC LIMIT 1"}
{"question": "Return the type code of the template type that the most templates belong to.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the first names of the teachers who teach grade 1? => SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1\nFind the patient who has the most recent undergoing treatment? => SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1\nHow many bookings does each booking status have? List the booking status code and the number of corresponding bookings. => SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\nWhat is the id of the reviewer whose name has substring \u201cMike\u201d? => SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"\nWhat are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3? => SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\nReturn the type code of the template type that the most templates belong to. => ", "response": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"}
{"question": "Show all template type codes with less than three templates.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the name of the player with the largest number of votes? => SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1\nList the id, genre and artist name of English songs ordered by rating. => SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating\nShow the delegates and the names of county they belong to. => SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District\nList the date of perpetrators in descending order of the number of people killed. => SELECT Date FROM perpetrator ORDER BY Killed DESC\nWhat are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"\nShow all template type codes with less than three templates. => ", "response": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3"}
{"question": "What are the codes of template types that have fewer than 3 templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nHow many characteristics are there? => SELECT count(*) FROM CHARACTERISTICS\nReturn the countries of the mountains that have a height larger than 5000. => SELECT Country FROM mountain WHERE Height  >  5000\nCount the members of the club \"Tennis Club\". => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"\nWhat are the addresses of customers living in Germany who have had an invoice? => SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"\nFind the names of stadiums that some Australian swimmers have been to. => SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'\nWhat are the codes of template types that have fewer than 3 templates? => ", "response": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3)"}
{"question": "What the smallest version number and its template type code?", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nList the id and type of each thing, and the details of the organization that owns it. => SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id\nList the teams of the players with the top 5 largest ages. => SELECT Team FROM player ORDER BY Age DESC LIMIT 5\nPlease show the most common type of ships. => SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the different affiliations, and how many schools with each have an enrollment size of above 20000? => SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation\nWhat are the title and maximum price of each film? => SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\nWhat the smallest version number and its template type code? => ", "response": "SELECT MIN(Templates.Version_Number) as smallest_version_number, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY smallest_version_number ASC LIMIT 1"}
{"question": "Return the lowest version number, along with its corresponding template type code.", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhich physicians prescribe a medication of brand X? Tell me the name and position of those physicians. => SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"\nHow many products have the color description 'red' and the characteristic name 'slow'? => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"\nWhat is the phone and email for customer with first name Aniyah and last name Feest? => SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"\nReturn the description for the courses named \"database\". => SELECT course_description FROM COURSES WHERE course_name  =  \"database\"\nWhat are the different card types, and how many transactions have been made with each? => SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\nReturn the lowest version number, along with its corresponding template type code. => ", "response": "SELECT Template_Type_Code, MIN(Version_Number) FROM Templates GROUP BY Template_Type_Code"}
{"question": "What is the template type code of the template used by document with the name \"Data base\"?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the first name of students who are living in the dorm that has most number of amenities. => SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)\nWhat is the name of each dorm that has a TV Lounge but no study rooms? => SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'\nSelect the names and the prices of all the products in the store. => SELECT name ,  price FROM products\nList all directors along with the number of films directed by each director. => SELECT directed_by ,  count(*) FROM film GROUP BY directed_by\nWhat is the the phone number of Nancy Edwards? => SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\nWhat is the template type code of the template used by document with the name \"Data base\"? => ", "response": "SELECT T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = \"Data base\""}
{"question": "Return the template type code of the template that is used by a document named Data base.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nShow the names of products that are in at least two events in ascending alphabetical order of product name. => SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name\nWhat are the total number of Domestic Passengers of airports that contain the word \"London\". => SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"\nWhat are the names of wines that are more expensive then all wines made in the year 2006? => SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)\nHow many budget types do we have? => SELECT count(*) FROM Ref_budget_codes\nWhat are the dates of publications in descending order of price? => SELECT Publication_Date FROM publication ORDER BY Price DESC\nReturn the template type code of the template that is used by a document named Data base. => ", "response": "SELECT T.Template_Type_Code \nFROM Templates AS T \nJOIN Documents AS D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base'"}
{"question": "Show all document names using templates with template type code BK.", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the level name of the catalog with the lowest price (in USD). => SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1\nWhat are each physician's employee id and department id primarily affiliated. => SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1\nWho performed the song named \"Badlands\"? Show the first name and the last name. => SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"\nShow the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'. => SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'\nWhich order's shipment tracking number is \"3452\"? Give me the id of the order. => SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"\nShow all document names using templates with template type code BK. => ", "response": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'"}
{"question": "What are the names of documents that use templates with the code BK?", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat campuses are in Los Angeles county? => SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"\nWho is the oldest person whose job is student? => SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )\nReturn the names of people, ordered by weight ascending. => SELECT Name FROM People ORDER BY Weight ASC\nFind the city that hosted some events in the most recent year. What is the id of this city? => SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1\nWhat is the total number of degrees granted after 2000 for each Orange county campus? => SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus\nWhat are the names of documents that use templates with the code BK? => ", "response": "SELECT Documents.Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'"}
{"question": "Show all template type codes and the number of documents using each type.", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the name, class and rank of all captains. => SELECT name ,  CLASS ,  rank FROM captain\nFind the names of all distinct wines that have appellations in North Coast area. => SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"\nWhich institution does \"Katsuhiro Ueno\" belong to? => SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\nShow student ids who are female and play football. => SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\nCount the number of entrepreneurs. => SELECT count(*) FROM entrepreneur\nShow all template type codes and the number of documents using each type. => ", "response": "SELECT TT.Template_Type_Code, count(Documents.Document_ID) as num_documents \nFROM Ref_Template_Types as TT \nLEFT JOIN Templates ON TT.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY TT.Template_Type_Code"}
{"question": "What are the different template type codes, and how many documents use each type?", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nReturn the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones. => SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"\nWhat is the name and checking balance of the account which has the lowest savings balance? => SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\nWhat are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested? => SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested\nHow many credits is the course that the student with the last name Smithson took, and what is its description? => SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'\nCount the number of cinemas. => SELECT count(*) FROM cinema\nWhat are the different template type codes, and how many documents use each type? => ", "response": "SELECT T1.Template_Type_Code, COUNT(T2.Document_ID) as Number_of_Documents\nFROM Ref_Template_Types as T1\nJOIN Templates as T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nGROUP BY T1.Template_Type_Code"}
{"question": "Which template type code is used by most number of documents?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nHow many customers are there? => SELECT sum(no_of_customers) FROM bank\nShow the names of members and the dates of performances they attended in descending order of attendance of the performances. => SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC\nFind the team of each player and sort them in ascending alphabetical order. => SELECT Team FROM player ORDER BY Team ASC\nShow the apartment numbers of apartments with unit status availability of both 0 and 1. => SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1\nReturn the color description that is most common across all products. => SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1\nWhich template type code is used by most number of documents? => ", "response": "SELECT T1.Template_Type_Code\nFROM Templates AS T1 \nJOIN (\n    SELECT Template_ID, COUNT(*) AS Document_Count\n    FROM Documents\n    GROUP BY Template_ID\n) AS T2 \nON T1.Template_ID = T2.Template_ID\nORDER BY T2.Document_Count DESC \nLIMIT 1"}
{"question": "Return the code of the template type that is most commonly used in documents.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhich course is enrolled in by the most students? Give me the course name. => SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\nHow many services has each resident requested? List the resident id, details, and the count in descending order of the count. => SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC\nWhat are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December? => SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"\nPlease show the police forces and the number of counties with each police force. => SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force\nHow many different bike ids are there? => SELECT count(DISTINCT bike_id) FROM trip\nReturn the code of the template type that is most commonly used in documents. => ", "response": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"}
{"question": "Show all template type codes that are not used by any document.", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nCount the number of products. => SELECT count(*) FROM products\nHow many tasks does each project have? List the task count and the project detail. => SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id\nFor each city, list their names in decreasing order by their highest station latitude. => SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC\nShow the order ids and the number of items in each order. => SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id\nHow many students got accepted after the tryout? => SELECT count(*) FROM tryout WHERE decision  =  'yes'\nShow all template type codes that are not used by any document. => ", "response": "SELECT Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nWHERE Templates.Template_ID IS NULL;"}
{"question": "What are the codes of template types that are not used for any document?", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the name of customers who do not have a loan with a type of Mortgages. => SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'\nReturn the amount of the largest payment. => SELECT amount FROM payment ORDER BY amount DESC LIMIT 1\nWhich vocal type has the band mate with first name \"Marianne\" played the most? => SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nHow many churches have a wedding in year 2016? => SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016\nHow many airlines does Russia has? => SELECT count(*) FROM airlines WHERE country  =  'Russia'\nWhat are the codes of template types that are not used for any document? => ", "response": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)"}
{"question": "Show all template type codes and descriptions.", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the name of customers who are living in Colorado? => SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"\nHow many train stations are there? => SELECT count(*) FROM station\nGive the color of the grape whose wine products have the highest average price? => SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1\nWhat are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte? => SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )\nReturn the titles of films that include 'Deleted Scenes' in their special feature section. => SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'\nShow all template type codes and descriptions. => ", "response": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types"}
{"question": "What are the type codes and descriptions for all template types?", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the different product names, and what is the sum of quantity ordered for each product? => SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name\nGive the phones for departments in room 268. => SELECT DPhone FROM DEPARTMENT WHERE Room  =  268\nHow many distinct birth places are there? => SELECT count(DISTINCT Birth_Place) FROM people\nFind the name of the most popular party form. => SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1\nwhich countries have more than 2 airports? => SELECT country FROM airport GROUP BY country HAVING count(*)  >  2\nWhat are the type codes and descriptions for all template types? => ", "response": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types"}
{"question": "What is the template type descriptions for template type code \"AD\".", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the number of schools that have more than one donator whose donation amount is less than 8.5. => SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)\nFind the county where produces the most number of wines with score higher than 90. => SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1\nHow many users are there? => SELECT count(*) FROM user_profiles\nWhat are the names of actors who are not 20 years old? => SELECT Name FROM actor WHERE Age != 20\nWho has a friend that is from new york city? => SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'\nWhat is the template type descriptions for template type code \"AD\". => ", "response": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'"}
{"question": "Return the template type description of the template type with the code AD.", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the name of the activity with the most students? => SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\nWhat is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000? => SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\nWhich institution has the most papers? Find the name of the institution. => SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1\nWhich customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details. => SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"\nWhat are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? => SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\nReturn the template type description of the template type with the code AD. => ", "response": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'"}
{"question": "What is the template type code for template type description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the age of the tallest person? => SELECT Age FROM people ORDER BY Height DESC LIMIT 1\nReturn the name and job title of the staff with the latest date assigned. => SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1\nShow all game ids and the number of hours played. => SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid\nHow many documents have the status code done? => SELECT count(*) FROM Documents WHERE document_status_code = \"done\";\nwhat is the average number of factories and maximum number of shops for manufacturers that opened before 1990. => SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990\nWhat is the template type code for template type description \"Book\". => ", "response": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\""}
{"question": "Return the type code of the template type with the description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nCount the number of accounts. => SELECT count(*) FROM accounts\nWhat are the three colleges from which the most players are from? => SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3\nShow the names and genders of players with a coach starting after 2011. => SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011\nCount the number of films whose title contains the word 'Dummy'. => SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\nWhat are the names of wines, sorted by price ascending? => SELECT DISTINCT Name FROM WINE ORDER BY price\nReturn the type code of the template type with the description \"Book\". => ", "response": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\""}
{"question": "What are the distinct template type descriptions for the templates ever used by any document?", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nShow all date and share count of transactions. => SELECT date_of_transaction ,  share_count FROM TRANSACTIONS\nHow many rooms have a king bed? => SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\nWhat are the names of all the scientists in alphabetical order? => SELECT name FROM scientists ORDER BY name\nWhat are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction? => SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'\nWhat is the team name and acc regular season score of the school that was founded for the longest time? => SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1\nWhat are the distinct template type descriptions for the templates ever used by any document? => ", "response": "SELECT DISTINCT RT.Template_Type_Description FROM Ref_Template_Types AS RT JOIN Templates AS T ON T.Template_Type_Code = RT.Template_Type_Code JOIN Documents AS D ON D.Template_ID = T.Template_ID"}
{"question": "Return the different descriptions for templates that have been used in a document.", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nReturn the names of the gymnasts. => SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\nWhat are the names of all pilots 30 years old or young in descending alphabetical order? => SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\nList the name of tracks belongs to genre Rock or media type is MPEG audio file. => SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";\nWhat are ids and total number of hours played for each game? => SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid\nPlease list all songs in volumes in ascending alphabetical order. => SELECT Song FROM volume ORDER BY Song\nReturn the different descriptions for templates that have been used in a document. => ", "response": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID JOIN Paragraphs AS T4 ON T3.Document_ID = T4.Document_ID;"}
{"question": "What are the template ids with template type description \"Presentation\".", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind all the phone numbers. => SELECT customer_phone FROM available_policies\nFind the first names of students whose first names contain letter \"a\". => SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'\nFor each party, find its location and the name of its host. Sort the result in ascending order of the age of the host. => SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age\nWhat are the price ranges of five star hotels? => SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"\nWhat is the total time for all lessons taught by Janessa Sawayn? => SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nWhat are the template ids with template type description \"Presentation\". => ", "response": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Presentation\")"}
{"question": "Return the ids corresponding to templates with the description 'Presentation'.", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhich products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin? => SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"\nWhich customer have the most policies? Give me the customer details. => SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\nWhat is the average number of votes of representatives from party \"Republican\"? => SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"\nReturn the publisher that has published the most books. => SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1\nReturn all the committees that have delegates from Democratic party. => SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\nReturn the ids corresponding to templates with the description 'Presentation'. => ", "response": "SELECT Template_ID FROM Templates WHERE Template_Details = 'Presentation'"}
{"question": "How many paragraphs in total?", "sql": "SELECT count(*) FROM Paragraphs", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhich classrooms are used by grade 5? => SELECT DISTINCT classroom FROM list WHERE grade  =  5\nReturn the type name, type description, and date of creation for each document. => SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code\nWhat are the names of parties that have no members? => SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\nFind the name and id of the team that won the most times in 2008 postseason. => SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\nHom many musicians performed in the song \"Flash\"? => SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\nHow many paragraphs in total? => ", "response": "SELECT COUNT(*) FROM Paragraphs"}
{"question": "Count the number of paragraphs.", "sql": "SELECT count(*) FROM Paragraphs", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the names of shops that do not have any devices in stock? => SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)\nWhen did customer with first name as Carole and last name as Bernhard became a customer? => SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";\nHow many distinct birth places are there? => SELECT count(DISTINCT Birth_Place) FROM people\nFind the name of the swimmer who has the most records. => SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1\nFind the salary and manager number for those employees who is working under a manager. => SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"\nCount the number of paragraphs. => ", "response": "SELECT count(*) FROM Paragraphs"}
{"question": "How many paragraphs for the document with name 'Summer Show'?", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhich players are from Indonesia? => SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\nWhat are the facility codes of the apartments with more than four bedrooms? => SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\nList the name of the colleges whose enrollment is greater 18000 sorted by the college's name. => SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName\nWhat are the total points for all gymnasts, ordered by total points descending? => SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\nWho performed the song named \"Badlands\"? Show the first name and the last name. => SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"\nHow many paragraphs for the document with name 'Summer Show'? => ", "response": "SELECT COUNT(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T1.Document_Name  =  \"Summer Show\""}
{"question": "Count the number of paragraphs in the document named 'Summer Show'.", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the different names and countries of origins for all artists whose song ratings are above 9? => SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9\nWhat is the first name and the last name of the customer who made the earliest rental? => SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1\nWhat are the names of the dorm that does not have a TV Lounge? => SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\nWho is the founder of Sony? => SELECT founder FROM manufacturers WHERE name  =  'Sony'\nShow the order ids and the number of invoices for each order. => SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\nCount the number of paragraphs in the document named 'Summer Show'. => ", "response": "SELECT count(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')"}
{"question": "Show paragraph details for paragraph with text 'Korea ' .", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nList the names of phones in ascending order of price. => SELECT Name FROM phone ORDER BY Price ASC\nHow many wines are there for each grape? => SELECT count(*) ,  Grape FROM WINE GROUP BY Grape\nWhat are the type codes and descriptions of each budget type? => SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes\nFind the last names of the members of the club \"Bootup Baltimore\". => SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"\nWhat campuses are located in Los Angeles county and opened after 1950? => SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950\nShow paragraph details for paragraph with text 'Korea ' . => ", "response": "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'"}
{"question": "What are the details for the paragraph that includes the text 'Korea ' ?", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nIn which year did the most recent crime happen? => SELECT max(YEAR) FROM perpetrator;\nWhich event names were used more than twice for party events? => SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\nWhat are the origins of all flights that are headed to Honolulu? => SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"\nShow ids for all documents with budget types described as 'Government'. => SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"\nHow many students have personal names that contain the word \"son\"? => SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"\nWhat are the details for the paragraph that includes the text 'Korea ' ? => ", "response": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"%Korea%\""}
{"question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the total account balances for each customer from Utah or Texas? => SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\nShow the name and phone for customers with a mailshot with outcome code 'No Response'. => SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'\nWhat are the last names of the teachers who teach the student called GELL TAMI? => SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"\nHow many games are played for all football games by students on scholarship? => SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'\nWhat are the names of all races that occurred after 12:00:00 or before 09:00:00? => SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"\nShow all paragraph ids and texts for the document with name 'Welcome to NY'. => ", "response": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')"}
{"question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nShow the official names of the cities that have hosted more than one competition. => SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\nList the names of buildings with at least 200 feet of height and with at least 20 floors. => SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20\nGive the name of the products that have a color description 'yellow'. => SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'\nWhat are the id and details of the customers who have at least 3 events? => SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\nHow many vehicle in total? => SELECT count(*) FROM Vehicles;\nWhat are the ids and texts of paragraphs in the document titled 'Welcome to NY'? => ", "response": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');"}
{"question": "Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the name of airline which runs the most number of routes. => SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\nCount the number of invoices. => SELECT count(*) FROM Invoices\nFind the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\". => SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"\nWhat are the names of manufacturers with revenue greater than the average of all revenues? => SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)\nShow all dates of transactions whose type code is \"SALE\". => SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"\nShow all paragraph texts for the document \"Customer reviews\". => ", "response": "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = \"Customer reviews\")"}
{"question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nHow many papers are published in total? => SELECT count(*) FROM papers\nWhich faculty do not participate in any activity? Find their faculty ids. => SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in\nFind all the cities that have 2 to 4 parks. => SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\nShow names for all employees with salary more than the average. => SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\nWhat is the last name of the youngest student? => SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\nWhat are the paragraph texts for the document with the name 'Customer reviews'? => ", "response": "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews')"}
{"question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nHow many dorms have amenities? => SELECT count(DISTINCT dormid) FROM has_amenity\nWhat is the name of the department with the most credits? => SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1\nCount the number of statements. => SELECT count(*) FROM Statements\nFind the number of followers for each user. => SELECT count(*) FROM follows GROUP BY f1\nHow many stadiums are not in country \"Russia\"? => SELECT count(*) FROM stadium WHERE country != 'Russia'\nShow all document ids and the number of paragraphs in each document. Order by document id. => ", "response": "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID ASC"}
{"question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the names, ages, and countries of artists, sorted by the year they joined? => SELECT name ,  age ,  country FROM artist ORDER BY Year_Join\nWhich colleges does each player with a name that starts with the letter D  who tried out go to? => SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'\nHow many professors are teaching class with code ACCT-211? => SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\nWho are the ministers who took office after 1961 or before 1959? => SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959\nWhat are the first names of customers who have not rented any films after '2005-08-23 02:06:01'? => SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\nReturn the different document ids along with the number of paragraphs corresponding to each, ordered by id. => ", "response": "SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID"}
{"question": "Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nCount the number of tests with \"Fail\" result. => SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\nWhat are the distinct customers who have orders with status \"On Road\"? Give me the customer details? => SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"\nShow the names of clubs that have players with position \"Right Wing\". => SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"\nShow the game name that has most number of hours played. => SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1\nCount the number of transactions. => SELECT count(*) FROM Financial_transactions\nShow all document ids, names and the number of paragraphs in each document. => ", "response": "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS num_of_paragraphs \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID, Documents.Document_Name"}
{"question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nReturn the average horizontal bar points across all gymnasts. => SELECT avg(Horizontal_Bar_Points) FROM gymnast\nFind the full name of the customer with the email \"luisg@embraer.com.br\". => SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"\nWhich paper has the most authors? Give me the paper title. => SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)\nWhen did Linda Smith visit Subway? => SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";\nWhat are the birth date and birth place of the body builder with the highest total points? => SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1\nWhat are the ids and names of each document, as well as the number of paragraphs in each? => ", "response": "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs \nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name"}
{"question": "List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhich school has the fewest professors? => SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\nShow all train names and times in stations in London in descending order by train time. => SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC\nFind the number of distinct currency codes used in drama workshop groups. => SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups\nWhat are the maximum and minimum budget of the departments? => SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\nShow all artist name, age, and country ordered by the yeared they joined. => SELECT name ,  age ,  country FROM artist ORDER BY Year_Join\nList all document ids with at least two paragraphs. => ", "response": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2"}
{"question": "What are the ids of documents that have 2 or more paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhich cities served as a host city after 2010? => SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010\nFind the average rating star for each movie that received at least 2 ratings. => SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2\nHow many colleges has more than 15000 students? => SELECT count(*) FROM College WHERE enr  >  15000\nWhat is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"? => SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"\nWhat are the carriers of devices whose software platforms are not \"Android\"? => SELECT Carrier FROM device WHERE Software_Platform != 'Android'\nWhat are the ids of documents that have 2 or more paragraphs? => ", "response": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*)>=2"}
{"question": "What is the document id and name with greatest number of paragraphs?", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat are the ids of all students who don't play sports? => SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo\nGive the maximum and minimum gradepoints for students living in NYC? => SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"\nCount the number of tracks that are part of the rock genre. => SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\nList the name and gender for all artists who released songs in March. => SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"\nWhat distinct accelerator names are compatible with the browswers that have market share higher than 15? => SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;\nWhat is the document id and name with greatest number of paragraphs? => ", "response": "SELECT Documents.Document_ID, Documents.Document_Name\nFROM Documents \nINNER JOIN (\n    SELECT Document_ID, COUNT(*) AS num_paragraphs\n    FROM Paragraphs\n    GROUP BY Document_ID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n) AS max_paragraphs\nON Documents.Document_ID = max_paragraphs.Document_ID;"}
{"question": "Return the id and name of the document with the most paragraphs.", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nReturn the elimination movies of wrestlers on Team Orton. => SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"\nHow many video game types exist? => SELECT count(DISTINCT gtype) FROM Video_games\nWhat are the names of the reviewers who have rated a movie more than 3 stars before? => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\nWhich people severed as governor most frequently? => SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the name of rooms that cost more than the average. => SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );\nReturn the id and name of the document with the most paragraphs. => ", "response": "SELECT d.Document_ID, d.Document_Name FROM Documents AS d JOIN Paragraphs AS p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1"}
{"question": "What is the document id with least number of paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the first and last name of all employees who live in the city Damianfort? => SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";\nReturn the claim start date for the claims whose claimed amount is no more than the average => SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\nWhat are the payment method codes that have been used by more than 3 parties? => SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3\nShow the names of all the activities Mark Giuliano participates in. => SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\nFind the names of the workshop groups where services with product name \"film\" are performed. => SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"\nWhat is the document id with least number of paragraphs? => ", "response": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;"}
{"question": "Return the id of the document with the fewest paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the name of dorms that do not have any amenity => SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)\nReturn the name and id of the furniture with the highest market rate. => SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1\nShow the status shared by cities with population bigger than 1500 and smaller than 500. => SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\nList the distinct hometowns that are not associated with any gymnast. => SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\nWhat are the names of teams that do no have match season record? => SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)\nReturn the id of the document with the fewest paragraphs. => ", "response": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) = (SELECT MIN(paragraph_count) FROM (SELECT Document_ID, COUNT(*) AS paragraph_count FROM Paragraphs GROUP BY Document_ID) AS temp_count)"}
{"question": "What is the document id with 1 to 2 paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nTell me the price ranges for all the hotels. => SELECT price_range FROM HOTELS\nWhat is the name, type, and flag of the ship that was built in the most recent year? => SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1\nReturn the code of the city that has the most students. => SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\nWhat is the average number of customers across banks in the state of Utah? => SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\nGive the country id and corresponding count of cities in each country. => SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id\nWhat is the document id with 1 to 2 paragraphs? => ", "response": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2."}
{"question": "Give the ids of documents that have between one and two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nCount the number of customers that have the customer type that is most common. => SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1\nFind the cities which were once a host city after 2010? => SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010\nFind the top 3 wineries with the greatest number of wines made of white color grapes. => SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3\nWhat is the type description of the organization whose detail is listed as 'quo'? => SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'\nWhich role is most common for the staff? => SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\nGive the ids of documents that have between one and two paragraphs. => ", "response": "SELECT Documents.Document_ID FROM Documents JOIN (SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID) AS T1 ON Documents.Document_ID = T1.Document_ID WHERE T1.num_paragraphs BETWEEN 1 AND 2."}
{"question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nFind the average checking balance. => SELECT avg(balance) FROM checking\nWhat are the names of students and their respective departments, ordered by number of credits from least to greatest? => SELECT name ,  dept_name FROM student ORDER BY tot_cred\nWhat is the number of branches that have more than the average number of memberships? => SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)\nShow names of shops that have more than one kind of device in stock. => SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1\nShow the denomination of the school that has the most players. => SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1\nShow the document id with paragraph text 'Brazil' and 'Ireland'. => ", "response": "SELECT T1.Document_ID FROM paragraphs AS T1 JOIN paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text = 'Brazil' AND T2.Paragraph_Text = 'Ireland'"}
{"question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "prompt": "Given a database 'cre_Doc_Template_Mgt' have 4 tables named 'Ref_Template_Types', 'Templates', 'Documents', 'Paragraphs'. Ref_Template_Types tbl have columns: 'Template_Type_Code', 'Template_Type_Description'. Templates tbl have columns: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'. Documents tbl have columns: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'. Paragraphs tbl have columns: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'. \nTranslate text to SQL: \nWhat is the average and oldest age for each gender of student? => SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\nWhat are the details of the markets that can be accessed by walk or bus? => SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\nWhat countries are the female artists who sung in the language Bangla from? => SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"\nReturn the device carriers that do not have Android as their software platform. => SELECT Carrier FROM device WHERE Software_Platform != 'Android'\nWhat is the average age and how many male students are there in each city? => SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code\nWhat are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? => ", "response": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY T1.Document_ID HAVING COUNT(DISTINCT T2.Paragraph_Text) = 2"}
{"question": "How many teachers are there?", "sql": "SELECT count(*) FROM teacher", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the names of all the clubs starting with the oldest? => SELECT name FROM club ORDER BY Start_year ASC\nReturn the name of the heaviest entrepreneur. => SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1\nFind the id and name of the most expensive base price room. => SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;\nWhat are the ids and names of accounts with 4 or more transactions? => SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\nHow many customers are there? => SELECT count(*) FROM customers\nHow many teachers are there? => ", "response": "SELECT count(*) FROM teacher"}
{"question": "What is the total count of teachers?", "sql": "SELECT count(*) FROM teacher", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nHow many different FDA approval statuses exist for medicines? => SELECT count(DISTINCT FDA_approved) FROM medicine\nfind the name of all departments that do actually have one or more employees assigned to them. => SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\nWhat are the names and location of the shops in ascending alphabetical order of name. => SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC\nList the names of departments where some physicians are primarily affiliated with. => SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1\nWhat are the names for all aircrafts with at least 2 flights? => SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\nWhat is the total count of teachers? => ", "response": "SELECT count(*) FROM teacher"}
{"question": "List the names of teachers in ascending order of age.", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nFor every medicine id, what are the names of the medicines that can interact with more than one enzyme? => SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\nFind the last names of all the teachers that teach GELL TAMI. => SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"\nHow many students live in each city and what are their average ages? => SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code\nList the names of members who did not participate in any round. => SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)\nList the first name and last name of customers have the amount of outstanding between 1000 and 3000. => SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;\nList the names of teachers in ascending order of age. => ", "response": "SELECT Name FROM teacher ORDER BY Age ASC"}
{"question": "What are the names of the teachers ordered by ascending age?", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nHow many budget types do we have? => SELECT count(*) FROM Ref_budget_codes\nWhen was the document named \"Marry CV\" stored? Give me the date. => SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"\nWho is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name. => SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"\nHow many clubs have total medals less than 10? => SELECT count(*) FROM club_rank WHERE Total  <  10\nReturn the characters for actors, ordered by age descending. => SELECT Character FROM actor ORDER BY age DESC\nWhat are the names of the teachers ordered by ascending age? => ", "response": "SELECT Name FROM teacher ORDER BY Age ASC"}
{"question": "What are the age and hometown of teachers?", "sql": "SELECT Age ,  Hometown FROM teacher", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat is the name of the tallest building? => SELECT name FROM building ORDER BY height_feet DESC LIMIT 1\nFind the marketing region description of China? => SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"\nFind the products which have problems reported by both Lacey Bosco and Kenton Champlin? => SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"\nFor each policy type, return its type code and its count in the record. => SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code\nRetrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\" => SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"\nWhat are the age and hometown of teachers? => ", "response": "SELECT Age, Hometown FROM teacher"}
{"question": "What is the age and hometown of every teacher?", "sql": "SELECT Age ,  Hometown FROM teacher", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nShow all customer ids and the number of accounts for each customer. => SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\nWhat is the average unit price of tracks that belong to Jazz genre? => SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"\nFind the name and category of the most expensive product. => SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1\nFind the names and opening hours of the tourist attractions that we get to by bus or walk. => SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"\nWhat are the names and location of the shops in ascending alphabetical order of name. => SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC\nWhat is the age and hometown of every teacher? => ", "response": "SELECT Age, Hometown FROM teacher"}
{"question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "sql": "select name from teacher where hometown != \"little lever urban district\"", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nTell me the first and last name of the student who has the most activities. => SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1\nShow all account ids and account details. => SELECT account_id ,  account_details FROM Accounts\nWhich locations have 2 or more cinemas with capacity over 300? => SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\nShow the id, name of each editor and the number of journal committees they are on. => SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\nFind the the grape whose white color grapes are used to produce wines with scores higher than 90. => SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90\nList the name of teachers whose hometown is not `` Little Lever Urban District '' . => ", "response": "SELECT Name FROM teacher WHERE Hometown <> \"Little Lever Urban District\""}
{"question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "sql": "select name from teacher where hometown != \"little lever urban district\"", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the names of all Rock tracks that are stored on MPEG audio files? => SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";\nList the names of all genres in alphabetical oder, together with its ratings. => SELECT g_name ,  rating FROM genre ORDER BY g_name\nList the weight of the body builders who have snatch score higher than 140 or have the height greater than 200. => SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;\ndisplay all the details from Employees table for those employees who was hired before 2002-06-21. => SELECT * FROM employees WHERE hire_date  <  '2002-06-21'\nWhat is the rating of the restaurant Subway? => SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";\nWhat are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? => ", "response": "SELECT Name FROM teacher WHERE Hometown <> \"Little Lever Urban District\";"}
{"question": "Show the name of teachers aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nShow names of pilots that have more than one record. => SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1\nWhat is the maximum length in meters for the bridges and what are the architects' names? => SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id\nWhat are the ids of all students who have attended at least one course? => SELECT student_id FROM student_course_attendance\nWhat are the times of elimination for any instances in which the elimination was done by Punk or Orton? => SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"\nHow many customer cards are there? => SELECT count(*) FROM Customers_cards\nShow the name of teachers aged either 32 or 33? => ", "response": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33"}
{"question": "What are the names of the teachers who are aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nFind the names of rooms that have been reserved for more than 60 times. => SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60\nShow the names of people, and dates and venues of debates they are on the affirmative side. => SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID\nShow ids of students who play video game and play sports. => SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games\nFind the total revenue for each manufacturer. => SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name\nFind the code of the role that have the most employees. => SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\nWhat are the names of the teachers who are aged either 32 or 33? => ", "response": "SELECT Name FROM teacher WHERE Age IN (32, 33)"}
{"question": "What is the hometown of the youngest teacher?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nGive me the star rating descriptions of the hotels that cost more than 10000. => SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000\nFind the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\". => SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";\nWhat are the names and job titles of every person ordered alphabetically by name? => SELECT name ,  job FROM Person ORDER BY name\nWhat are the countries for each market, ordered alphabetically? => SELECT Country FROM market ORDER BY Country ASC\nWhat is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019? => SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'\nWhat is the hometown of the youngest teacher? => ", "response": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)"}
{"question": "Where is the youngest teacher from?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nShow the names of all the clients with no booking. => SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID\nShow all calendar dates and day Numbers. => SELECT calendar_date ,  day_Number FROM Ref_calendar\nFind the name of instructors who are advising more than one student. => SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1\nShow the number of transactions for different investors. => SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id\nHow many characteristics does the product named \"laurel\" have? => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"\nWhere is the youngest teacher from? => ", "response": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)"}
{"question": "Show different hometown of teachers and the number of teachers from each hometown.", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the names and ids of the tourist attractions that are visited at most once? => SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\nWhich party has the largest number of delegates? => SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the title, phone number and hire date for the employee named Nancy Edwards? => SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\nFind the number of different departments in each school whose number of different departments is less than 5. => SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\nHow many distinct artists have volumes? => SELECT COUNT(DISTINCT Artist_ID) FROM volume\nShow different hometown of teachers and the number of teachers from each hometown. => ", "response": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown"}
{"question": "For each hometown, how many teachers are there?", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nFind the name of the stadium that has the maximum capacity. => SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1\nFind the states of the colleges that have students in the tryout who played in striker position. => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'\nCount the number of transactions. => SELECT count(*) FROM Financial_transactions\nOf all players with an overall rating greater than 80, how many are right-footed and left-footed? => SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot\nHow many persons are not body builders? => SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)\nFor each hometown, how many teachers are there? => ", "response": "SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown"}
{"question": "List the most common hometown of teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the ids of stations that have latitude above 37.4 and never had bike availability below 7? => SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7\nFind the description of the club called \"Tennis Club\". => SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"\nWhich studios have an average gross of over 4500000? => SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000\nReturn the names of the gymnasts. => SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\nWhat are the first name, last name, and phone number of all the female faculty members? => SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'\nList the most common hometown of teachers. => ", "response": "SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1"}
{"question": "What is the most commmon hometowns for teachers?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nShow the price ranges of hotels with 5 star ratings. => SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"\nHow many cities are in Australia? => SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\nFind the name of the campuses opened before 1800. => SELECT campus FROM campuses WHERE YEAR  <  1800\nWhat are the full names of all students => SELECT Fname ,  Lname FROM Student\nShow the attendances of the performances at location \"TD Garden\" or \"Bell Centre\" => SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"\nWhat is the most commmon hometowns for teachers? => ", "response": "SELECT Hometown, COUNT(*) AS Total FROM teacher GROUP BY Hometown ORDER BY Total DESC LIMIT 1"}
{"question": "Show the hometowns shared by at least two teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the birth places that are shared by at least two people? => SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2\nShow all party names and the number of members in each party. => SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\nWhat are the start and end dates for incidents with incident type code \"NOISE\"? => SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"\nShow name, address road, and city for all branches sorted by open year. => SELECT name ,  address_road ,  city FROM branch ORDER BY open_year\nFind the number of albums by the artist \"Metallica\". => SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\nShow the hometowns shared by at least two teachers. => ", "response": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2"}
{"question": "What are the towns from which at least two teachers come from?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nShow the names of players and names of their coaches. => SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID\nfind the name and age of the pilot who has won the most number of times among the pilots who are younger than 30. => SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1\nWhat are the details of the three most expensive hotels? => SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3\nShow the distinct countries of managers. => SELECT DISTINCT Country FROM manager\nCount the number of accounts. => SELECT count(*) FROM Accounts\nWhat are the towns from which at least two teachers come from? => ", "response": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2"}
{"question": "Show names of teachers and the courses they are arranged to teach.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nCount the number of rooms that are not in the Lamberton building. => SELECT count(*) FROM classroom WHERE building != 'Lamberton'\nWhat are the first and last names of the performer who was in the back stage position for the song \"Badlands\"? => SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"\nWhat campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled? => SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200\nWhat are the names and players of all the clubs? => SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID\nFind the number of different airports which are the destinations of the American Airlines. => SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'\nShow names of teachers and the courses they are arranged to teach. => ", "response": "SELECT teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID"}
{"question": "What is the name of each teacher and what course they teach?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nFind the names of states that have some college students playing in goalie and mid positions. => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'\nHow many editors are there? => SELECT count(*) FROM editor\nList the names of technicians in ascending order of age. => SELECT Name FROM technician ORDER BY Age ASC\nShow the distinct themes of journals. => SELECT DISTINCT Theme FROM journal\nReturn the phone and email of the customer with the first name Aniyah and last name Feest. => SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"\nWhat is the name of each teacher and what course they teach? => ", "response": "SELECT teacher.Name, course.Course \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nJOIN course ON course_arrange.Course_ID = course.Course_ID"}
{"question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat is the customer id, first and last name with least number of accounts. => SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\nWhat are the names and addressed of customers who have both New and Pending orders? => SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\nWhich city is the headquarter of the store named \"Blackville\" in? => SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"\nShow the names of companies and the number of employees they have => SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name\nWhat are the maximum and average height of the mountains? => SELECT max(height) ,  avg(height) FROM mountain\nShow names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. => ", "response": "SELECT T2.Name ,  T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID JOIN course AS T3 ON T1.Course_ID  =  T3.Course_ID ORDER BY T2.Name ASC"}
{"question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the official names of cities that have hosted more than one competition? => SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\nSort the names of products in ascending order of their price. => SELECT Product_Name FROM Products ORDER BY Product_Price ASC\nWhat is the issue date of the volume with the minimum weeks on top? => SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1\nWhat is the first name of the author with last name \"Ueno\"? => SELECT fname FROM authors WHERE lname  =  \"Ueno\"\nList the distinct ranges of the mountains with the top 3 prominence. => SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3\nWhat are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? => ", "response": "SELECT Teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course.Course_ID = course_arrange.Course_ID\nORDER BY Teacher.Name ASC"}
{"question": "Show the name of the teacher for the math course.", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant? => SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'\nWhat is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions? => SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\nPlease show the team that has the most number of technicians. => SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1\nHow many invoices were billed from Chicago, IL? => SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\nHow many unique labels are there for albums? => SELECT count(DISTINCT label) FROM albums\nShow the name of the teacher for the math course. => ", "response": "SELECT teacher.Name FROM course_arrange \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nJOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID \nWHERE Lower(course.Course) = 'math'"}
{"question": "What are the names of the people who teach math courses?", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nHow many students are enrolled in college? => SELECT sum(enr) FROM College\nShow names of technicians in ascending order of quality rank of the machine they are assigned. => SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank\nHow many customers have email that contains \"gmail.com\"? => SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"\nReturn the codes of the document types that do not have a total access count of over 10000. => SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000\nFind the name of dorms that do not have amenity TV Lounge. => SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\nWhat are the names of the people who teach math courses? => ", "response": "SELECT DISTINCT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID JOIN course AS T3 ON T1.Course_ID  =  T3.Course_ID WHERE T3.Course  =  \"math\""}
{"question": "Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nFind the average room count of the apartments that have the \"Studio\" type code. => SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\nList all vehicle id => SELECT vehicle_id FROM Vehicles;\nwhat are the details of the cmi masters that have the cross reference code 'Tax'? => SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'\nHow many services has each resident requested? List the resident id, details, and the count in descending order of the count. => SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC\nFind the first names of all instructors who have taught some course and the course description. => SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code\nShow names of teachers and the number of courses they teach. => ", "response": "SELECT T2.Name, count(T3.Course_ID) FROM teacher AS T2 JOIN course_arrange AS T1 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T1.Course_ID = T3.Course_ID GROUP BY T2.Name"}
{"question": "What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the names of the products that have a color description of 'red' and the 'fast' characteristic? => SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"\nFind the name of all students who were in the tryout sorted in alphabetic order. => SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\nHow many assets does each third party company supply? List the count and the company id. => SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id\nWhat is the average, minimum, maximum, and total transaction amount? => SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions\nWho has written a paper that has the word \"Functional\" in its title? Return the first names of the authors. => SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"\nWhat are the names of the teachers and how many courses do they teach? => ", "response": "SELECT t2.Name, count(t1.Course_ID) as courses_taught FROM course_arrange as t1 JOIN teacher as t2 ON t1.Teacher_ID = t2.Teacher_ID GROUP BY t2.Name"}
{"question": "Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the usernames and passwords of users that have the most common role? => SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\nFor each dorm, how many amenities does it have? => SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid\nFind the id and name of the stadium where the largest number of injury accidents occurred. => SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nList categories that have at least two books after year 1989. => SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2\nGive me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities. => SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\nShow names of teachers that teach at least two courses. => ", "response": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(*)  >=  2"}
{"question": "What are the names of the teachers who teach at least two courses?", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhen do all the researcher role staff start to work, and when do they stop working? => SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'\nShow the names of members and names of colleges they go to. => SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID\nWhat are the building, room number, semester and year of courses in the Psychology department, sorted using course title? => SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title\nHow many distinct types of accounts are there? => SELECT count(DISTINCT acc_type) FROM customer\nFind the names of the trains that do not pass any station located in London. => SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")\nWhat are the names of the teachers who teach at least two courses? => ", "response": "SELECT T2.Name FROM teacher AS T2 JOIN course_arrange AS T1 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(T1.Course_ID) >= 2"}
{"question": "List the names of teachers who have not been arranged to teach courses.", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nShow budget type codes and the number of documents in each budget type. => SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code\nWhat is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle? => SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"\nList the studios of each film and the number of films produced by that studio. => SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\nWhat are the names of parties that do not have delegates in election? => SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)\nWhat are names and savings balances of the three accounts with the highest savings balances? => SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3\nList the names of teachers who have not been arranged to teach courses. => ", "response": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)"}
{"question": "What are the names of the teachers whose courses have not been arranged?", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "prompt": "Given a database 'course_teach' have 3 tables named 'course', 'teacher', 'course_arrange'. course tbl have columns: 'Course_ID', 'Staring_Date', 'Course'. teacher tbl have columns: 'Teacher_ID', 'Name', 'Age', 'Hometown'. course_arrange tbl have columns: 'Course_ID', 'Teacher_ID', 'Grade'. \nTranslate text to SQL: \nWhat are the names of all instructors with a higher salary than any of the instructors in the Biology department? => SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\nWhat are the titles of films and corresponding types of market estimations? => SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID\nWhat are all the section titles of the document named \"David CV\"? => SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"\nReturn the characters and durations for each actor. => SELECT Character ,  Duration FROM actor\nWhat are the song names for every song whose rating is less than the minimum rating for English songs? => SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\nWhat are the names of the teachers whose courses have not been arranged? => ", "response": "SELECT name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT Course_arrange.Teacher_ID FROM Course_arrange)"}
{"question": "How many visitors below age 30 are there?", "sql": "SELECT count(*) FROM visitor WHERE age  <  30", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nWhat are the ids of all employees that don't have certificates? => SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\nReturn the founded year for the school with the largest enrollment. => SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1\nWhich statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? => SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\nGive me the minimum and maximum bathroom count among all the apartments. => SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\nCompute the mean price of procedures physician John Wen was trained in. => SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nHow many visitors below age 30 are there? => ", "response": "SELECT COUNT(*) FROM visitor WHERE Age < 30"}
{"question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nHow many leagues are there in England? => SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"\nFind the names of states that have some college students playing in goalie and mid positions. => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'\nHow many lessons did the customer Ryan Goodwin complete? => SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";\nFind the names of reviewers who had given higher than 3 star ratings. => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\nWhat are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top? => SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2\nFind the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. => ", "response": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC"}
{"question": "What is the average age of the visitors whose membership level is not higher than 4?", "sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nHow many cities are there that have more than 3 airports? => SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\nWhat is the least popular kind of decor? => SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;\nWhat are the minimum and maximum vote percents of elections? => SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election\nHow many distinct courses are enrolled in by students? => SELECT count(course_id) FROM Student_Course_Enrolment\nWhat is the number of departments in Division \"AS\"? => SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"\nWhat is the average age of the visitors whose membership level is not higher than 4? => ", "response": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4"}
{"question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nWhat are the different product sizes? => SELECT DISTINCT product_size FROM Products\nCount the number of different affected regions. => SELECT count(DISTINCT region_id) FROM affected_region\nShow different builders of railways, along with the corresponding number of railways using each builder. => SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder\nHow old is the youngest winning pilot and what is their name? => SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1\nFind the patient who most recently stayed in room 111. => SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1\nFind the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. => ", "response": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age ASC"}
{"question": "Find the id and name of the museum that has the most staff members?", "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nFind the busiest destination airport that runs most number of routes in China. => SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\nHow many students are there? => SELECT count(*) FROM student\nHow many artists are there? => SELECT count(*) FROM artist\nWhat are the id and first name of the student whose addresses have the highest average monthly rental? => SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1\nShow the name of the party that has at least two records. => SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2\nFind the id and name of the museum that has the most staff members? => ", "response": "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)"}
{"question": "Find the average number of staff working for the museums that were open before 2009.", "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nWhat is the role with the smallest number of employees? Find the role codes. => SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1\nFind the name of the customer who made the order of the largest amount of goods. => SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)\nWhat is the last name of the musicians who has played back position the most? => SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\nWhat is the state and enrollment of the colleges where have any students who got accepted in the tryout decision. => SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\nWhat is the code of each role and the number of employees in each role? => SELECT role_code ,  count(*) FROM Employees GROUP BY role_code\nFind the average number of staff working for the museums that were open before 2009. => ", "response": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009"}
{"question": "What are the opening year and staff number of the museum named Plaza Museum?", "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nWhen was the first asset acquired? => SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1\nReturn the code of the card type that is most common. => SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\nWhat is average and maximum salary of all employees. => SELECT avg(salary) ,  max(salary) FROM Employee\nHow many activities does Mark Giuliano participate in? => SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\nList the names of members who did not attend any performance. => SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)\nWhat are the opening year and staff number of the museum named Plaza Museum? => ", "response": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'"}
{"question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nHow many kinds of roles are there for the staff? => SELECT count(DISTINCT role_code) FROM Project_Staff\nWhich room has the highest base price? => SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;\nFind the name and partition id for users who tweeted less than twice. => SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2\nReturn the addresses of the course authors or tutors whose personal name is \"Cathrine\". => SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"\nFind the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"? => SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1\nfind the names of museums which have more staff than the minimum staff number of all museums opened after 2010. => ", "response": "SELECT Museum.Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)"}
{"question": "find the id, name and age for visitors who visited some museums more than once.", "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nWhat is the company where Eduardo Martins is a customer? => SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\nWhat are the ids of the problems which are reported before 1978-06-26? => SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"\nShow different locations of railways along with the corresponding number of railways at each location. => SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION\nWhat are the forename and surname of the driver who has the smallest laptime? => SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1\nWhat is the first and last name of the student participating in the most activities? => SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1\nfind the id, name and age for visitors who visited some museums more than once. => ", "response": "SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor \nJOIN visit \nON visitor.ID = visit.visitor_ID \nGROUP BY visitor.ID \nHAVING COUNT(DISTINCT visit.Museum_ID) > 1;"}
{"question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nWhat are the main industries of the companies without gas stations and what are the companies? => SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\nFind the number of different product types. => SELECT count(DISTINCT product_type_code) FROM products\nReturn all reviewer names and movie names together in a single list. => SELECT name FROM Reviewer UNION SELECT title FROM Movie\nWhat are the name and location of the cinema with the largest capacity? => SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1\nFind the number of investors in total. => SELECT count(*) FROM INVESTORS\nWhat are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? => ", "response": "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership \nFROM visitor \nINNER JOIN visit ON visitor.ID = visit.visitor_ID \nGROUP BY visitor.ID \nORDER BY SUM(visit.Total_spent) DESC \nLIMIT 1;"}
{"question": "What are the id and name of the museum visited most times?", "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nList the name of ships that are not involved in any mission => SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)\nWhich directors had a movie both in the year 1999 and 2000? => SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999\nReturn the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010. => SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";\nList the number of invoices from Chicago, IL. => SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\nHow many aircrafts do we have? => SELECT count(*) FROM Aircraft\nWhat are the id and name of the museum visited most times? => ", "response": "SELECT Museum_ID, Name FROM museum WHERE Museum_ID = (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1)"}
{"question": "What is the name of the museum that had no visitor yet?", "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nFind all the songs whose name contains the word \"the\". => SELECT title FROM songs WHERE title LIKE '% the %'\nFind the name of the customer who made an order most recently. => SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1\nWhat are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"? => SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"\nFind the number of trains starting from each origin. => SELECT origin ,  count(*) FROM train GROUP BY origin\nHow many languages are in these films? => SELECT count(DISTINCT language_id) FROM film\nWhat is the name of the museum that had no visitor yet? => ", "response": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)"}
{"question": "Find the name and age of the visitor who bought the most tickets at once.", "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nWhat are the dates of the assessment notes? => SELECT date_of_notes FROM Assessment_Notes\nWhich major has least number of students? List the major and the number of students. => SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;\nWhat are the name and description for role code \"MG\"? => SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"\nWhich physicians are trained in procedures that are more expensive than 5000? => SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000\nWhat is the shortest and most poorly rated song for each genre, ordered alphabetically by genre? => SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is\nFind the name and age of the visitor who bought the most tickets at once. => ", "response": "SELECT Name, Age FROM visitor WHERE ID = (SELECT visitor_ID FROM visit ORDER BY Num_of_Ticket DESC LIMIT 1)"}
{"question": "What are the average and maximum number of tickets bought in all visits?", "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nWhat are the ages of all of Zach's friends who are in the longest relationship? => SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\nFind the last name of the author with first name \"Amal\". => SELECT lname FROM authors WHERE fname  =  \"Amal\"\nList the race class with at least two races. => SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\nList the authors who do not have submission to any workshop. => SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)\nWhat are the names and location of the shops in ascending alphabetical order of name. => SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC\nWhat are the average and maximum number of tickets bought in all visits? => ", "response": "SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit"}
{"question": "What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nFor each station, return its longitude and the average duration of trips that started from the station. => SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id\nWhat are the codes of types of documents of which there are for or more? => SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\nShow the average price of hotels for different pet policy. => SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn\nWhat are the first names and date of birth of professors teaching course ACCT-211? => SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"\nWhat are the names of schools with the top 3 largest size? => SELECT cName FROM college ORDER BY enr DESC LIMIT 3\nWhat is the total ticket expense of the visitors whose membership level is 1? => ", "response": "SELECT SUM(T3.Total_spent) FROM visitor AS T1 JOIN visit AS T3 ON T1.ID  =  T3.visitor_ID WHERE T1.Level_of_membership  =  1"}
{"question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nWhat student id corresponds to the oldest student? => SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)\nWho performed the song named \"Le Pop\"? => SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"\nList the name and count of each product in all orders. => SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id\nWhat address was the document with id 4 mailed to? => SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;\nWhat are all the distinct payment types? => SELECT DISTINCT payment_type_code FROM payments\nWhat is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? => ", "response": "SELECT visitor.Name FROM visitor WHERE visitor.ID IN (SELECT T1.visitor_ID FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Open_Year < 2009) AND visitor.ID IN (SELECT T1.visitor_ID FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Open_Year > 2011)"}
{"question": "Find the number of visitors who did not visit any museum opened after 2010.", "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nFind the name of the swimmer who has the most records. => SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1\nWhat are the names and years of all races that had a driver with the last name Lewis? => SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\nCount the number of different hometowns of these people. => SELECT count(DISTINCT Hometown) FROM people\nWhat are the balances of checking accounts belonging to people with savings balances greater than the average savings balance? => SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\nFind the schools that were either founded after 1850 or public. => SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'\nFind the number of visitors who did not visit any museum opened after 2010. => ", "response": "SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010))"}
{"question": "How many museums were opened after 2013 or before 2008?", "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "prompt": "Given a database 'museum_visit' have 3 tables named 'museum', 'visitor', 'visit'. museum tbl have columns: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'. visitor tbl have columns: 'ID', 'Name', 'Level_of_membership', 'Age'. visit tbl have columns: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'. \nTranslate text to SQL: \nFind the city with the most number of stores. => SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1\nFind the contact channel code that was used by the customer named \"Tillman Ernser\". => SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"\nWhat is the name of the room that can accommodate the most people? => SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;\nTell me the highest, lowest, and average cost of procedures. => SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures\nHow many budgets are above 3000 in year 2001 or before? => SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001\nHow many museums were opened after 2013 or before 2008? => ", "response": "SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008"}
{"question": "Find the total number of players.", "sql": "SELECT count(*) FROM players", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nShow the name, location, open year for all tracks with a seating higher than the average. => SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)\nPlease show the most common age of editors. => SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1\nWhat are all the policy types of the customer named \"Dayana Robel\"? => SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"\nWhat is the nationality of the journalist with the largest number of years working? => SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1\nWhat is the average fee for a CSU campus in the year of 1996? => SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\nFind the total number of players. => ", "response": "SELECT COUNT(player_id) FROM players"}
{"question": "How many players are there?", "sql": "SELECT count(*) FROM players", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are distinct locations where tracks are located? => SELECT DISTINCT LOCATION FROM track\nList the distinct carriers of phones with memories bigger than 32. => SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32\nWhat is the last name of the youngest student? => SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\nWhat are the total points for all gymnasts, ordered by total points descending? => SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\nFind the IDs of customers whose name contains \"Diana\". => SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\nHow many players are there? => ", "response": "SELECT COUNT(*) FROM players"}
{"question": "Find the total number of matches.", "sql": "SELECT count(*) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nShow the company name with the number of gas station. => SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\nWhat are the name, origin and owner of each program? => SELECT name ,  origin ,  OWNER FROM program\nList the builders of railways in ascending alphabetical order. => SELECT Builder FROM railway ORDER BY Builder ASC\nList the document ids for any documents with the status code done and the type code paper. => SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";\nList the names and origins of people who are not body builders. => SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id\nFind the total number of matches. => ", "response": "SELECT COUNT(*) FROM matches;"}
{"question": "Count the number of matches.", "sql": "SELECT count(*) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nCount the number of characteristics. => SELECT count(*) FROM CHARACTERISTICS\nFind the titles of the papers that contain the word \"ML\". => SELECT title FROM papers WHERE title LIKE \"%ML%\"\nWhat is the gender and name of the artist who sang the song with the smallest resolution? => SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1\nCount the number of courses with more than 2 credits. => SELECT count(*) FROM COURSE WHERE Credits  >  2\nFind the last name of the individuals that have been contact individuals of an organization. => SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id\nCount the number of matches. => ", "response": "SELECT COUNT(*) FROM matches"}
{"question": "List the first name and birth date of all players from the country with code USA.", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nFor each city, list their names in decreasing order by their highest station latitude. => SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC\nGive me the claim date, settlement date for all the claims whose claimed amount is larger than the average. => SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )\nFind the number of different cities that employees live in. => SELECT COUNT(DISTINCT city) FROM EMPLOYEE\nWhich friend of Zach has the longest-lasting friendship? => SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\nHow many camera lenses are not used in taking any photos? => SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )\nList the first name and birth date of all players from the country with code USA. => ", "response": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'"}
{"question": "What are the first names and birth dates of players from the USA?", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the id of the candidate whose email is stanley.monahan@example.org? => SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"\nWhat are the description and credit of the course which the student whose last name is Smithson took? => SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'\nWhat is the document type code for document type \"Paper\"? => SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\nWhat is the membership level with the most people? => SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\nWhat are the code and description of the least frequent detention type ? => SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1\nWhat are the first names and birth dates of players from the USA? => ", "response": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'"}
{"question": "Find the average age of losers and winners of all matches.", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nfind the full name of employees who report to Nancy Edwards? => SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";\nWhich buildings have more than one company offices? Give me the building names. => SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1\nFind the name of songs that does not have a back vocal. => SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\nWhat are the distinct location names? => SELECT DISTINCT Location_Name FROM LOCATIONS\nShow the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. => SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\nFind the average age of losers and winners of all matches. => ", "response": "SELECT AVG(DATEDIFF(CURRENT_DATE(), T1.birth_date)/365) AS avg_loser_age, AVG(DATEDIFF(CURRENT_DATE(), T2.birth_date)/365) AS avg_winner_age FROM matches AS T3 JOIN players AS T1 ON T3.loser_id = T1.player_id JOIN players AS T2 ON T3.winner_id = T2.player_id;"}
{"question": "What are the average ages of losers and winners across matches?", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nFind the average and total capacity of dorms for the students with gender X. => SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\nFind the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841. => SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)\nWhat is the id of the appointment that started most recently? => SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1\nWhat is the total count of enzymes? => SELECT count(*) FROM enzyme\nWhat are the store names of drama workshop groups? => SELECT Store_Name FROM Drama_Workshop_Groups\nWhat are the average ages of losers and winners across matches? => ", "response": "SELECT AVG(loser_age), AVG(winner_age) FROM matches"}
{"question": "Find the average rank of winners in all matches.", "sql": "SELECT avg(winner_rank) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nPlease show the songs that have result \"nominated\" at music festivals. => SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"\nReturn the categories of music festivals that have the result \"Awarded\". => SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"\nCount the number of different countries that climbers are from. => SELECT COUNT(DISTINCT Country) FROM climber\nWhat type of game is Call of Destiny? => SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"\nSelect the name of the products with a price less than or equal to $200. => SELECT name FROM products WHERE price  <=  200\nFind the average rank of winners in all matches. => ", "response": "SELECT AVG(winner_rank) FROM matches"}
{"question": "What is the average rank for winners in all matches?", "sql": "SELECT avg(winner_rank) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nHow many papers are published by the institution \"Tokohu University\"? => SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"\nWhat are the first and last names of the performer who was in the back stage position for the song \"Badlands\"? => SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"\nFind the average access count across all documents? => SELECT avg(access_count) FROM documents\nFind the average order quantity per order. => SELECT avg(order_quantity) FROM order_items\nFind the name of persons who are friends with Bob. => SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'\nWhat is the average rank for winners in all matches? => ", "response": "SELECT avg(winner_rank) FROM matches"}
{"question": "Find the highest rank of losers in all matches.", "sql": "SELECT min(loser_rank) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the name of organization that has the greatest number of contact individuals? => SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\nFor each id of a driver who participated in at most 30 races, how many races did they participate in? => SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30\nFind the first names of teachers whose email address contains the word \"man\". => SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'\nWhat are the balances of checking accounts belonging to people with savings balances greater than the average savings balance? => SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\nFind the name of the ship that is steered by the youngest captain. => SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\nFind the highest rank of losers in all matches. => ", "response": "SELECT MAX(loser_rank) FROM matches"}
{"question": "What is the best rank of losers across all matches?", "sql": "SELECT min(loser_rank) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nFind the name of the source user with the highest average trust score. => SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1\nReturn all players sorted by college in ascending alphabetical order. => SELECT player FROM match_season ORDER BY College ASC\nShow the name and opening year for three churches that opened most recently. => SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\nList the problem id and log id which are assigned to the staff named Rylan Homenick. => SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"\nWhat is the highest salary among each team? List the team name, id and maximum salary. => SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;\nWhat is the best rank of losers across all matches? => ", "response": "SELECT MAX(loser_rank) FROM matches"}
{"question": "find the number of distinct country codes of all players.", "sql": "SELECT count(DISTINCT country_code) FROM players", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nPlease show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000. => SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000\nWhat are the first names of students in room 108? => SELECT firstname FROM list WHERE classroom  =  108\nGive the ids of the three products purchased in the largest amounts. => SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3\nShow ids for all the male faculty. => SELECT FacID FROM Faculty WHERE Sex  =  'M'\nFind the city with the most number of stores. => SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1\nfind the number of distinct country codes of all players. => ", "response": "SELECT COUNT(DISTINCT country_code) FROM players"}
{"question": "How many distinct countries do players come from?", "sql": "SELECT count(DISTINCT country_code) FROM players", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhich university is in Los Angeles county and opened after 1950? => SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950\nReturn the name of the heaviest entrepreneur. => SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1\nWhich park did the most people attend in 2008? => SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;\nList the types of competition that have at most five competitions of that type. => SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5\nWhat is the total amount of money spent by Lucas Mancini? => SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\nHow many distinct countries do players come from? => ", "response": "SELECT COUNT(DISTINCT country_code) FROM players;"}
{"question": "Find the number of distinct name of losers.", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nPlease show the titles of films and the types of market estimations. => SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID\nWhat are the first name and last name of all the teachers? => SELECT DISTINCT firstname ,  lastname FROM teachers\nWhat are names for top three branches with most number of membership? => SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3\nFind the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"? => SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1\nWhat details are there on the research staff? List the result in ascending alphabetical order. => SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC\nFind the number of distinct name of losers. => ", "response": "SELECT COUNT(DISTINCT loser_name) FROM matches"}
{"question": "How many different loser names are there?", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the names of all instructors with a higher salary than any of the instructors in the Biology department? => SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\nList the studios of each film and the number of films produced by that studio. => SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\nWhat is the campus fee of \"San Francisco State University\" in year 2000? => SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000\nWhat are the names of instructors who didn't teach? => SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)\nShow the draft pick numbers and draft classes of players whose positions are defenders. => SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\nHow many different loser names are there? => ", "response": "SELECT COUNT(DISTINCT loser_name) FROM matches"}
{"question": "Find the name of tourney that has more than 10 matches.", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nHow many voting records do we have? => SELECT count(*) FROM VOTING_RECORD\nWhat are the names and location of the wrestlers? => SELECT Name ,  LOCATION FROM wrestler\nFind the name of songs that does not have a back vocal. => SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\nWhat are the other account details for the account with the name 338? => SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"\nList each donator name and the amount of endowment in descending order of the amount of endowment. => SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC\nFind the name of tourney that has more than 10 matches. => ", "response": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10"}
{"question": "What are the names of tournaments that have more than 10 matches?", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nReturn the issue date of the volume that has spent the fewest weeks on top. => SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1\nWhat are the names of all products that are not the most frequently-used maximum page size? => SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)\nWhat is the number of states that has some colleges whose enrollment is smaller than the average enrollment? => SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)\nShow the faculty id of each faculty member, along with the number of students he or she advises. => SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID\nFind the starting date and ending data in location for the document named \"Robin CV\". => SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"\nWhat are the names of tournaments that have more than 10 matches? => ", "response": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10"}
{"question": "List the names of all winners who played in both 2013 and 2016.", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the names of all stations with a latitude smaller than 37.5? => SELECT name FROM station WHERE lat  <  37.5\nWhat is the channel code and contact number of the customer contact channel that was active for the longest time? => SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)\nWhich course authors teach two or more courses? Give me their addresses and author IDs. => SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\nFind the name of the customer who made the most orders. => SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\nWhat are the names and urls of images, sorted alphabetically? => SELECT image_name ,  image_url FROM images ORDER BY image_name\nList the names of all winners who played in both 2013 and 2016. => ", "response": "SELECT DISTINCT T1.winner_name FROM matches AS T1 JOIN matches AS T2 ON T1.winner_id = T2.winner_id WHERE T1.year = 2013 AND T2.year = 2016"}
{"question": "What are the names of players who won in both 2013 and 2016?", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the customer phone numbers under the policy \"Life Insurance\"? => SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"\nWhat is the first name, GPA, and phone number of the students with the top 5 GPAs? => SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5\nWhat are the enrollment dates of all the tests that have result \"Pass\"? => SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"\nWhat is the average age of the members of the club \"Bootup Baltimore\"? => SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"\nWhat are the first names of students in room 108? => SELECT firstname FROM list WHERE classroom  =  108\nWhat are the names of players who won in both 2013 and 2016? => ", "response": "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016"}
{"question": "List the number of all matches who played in years of 2013 or 2016.", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the name and open year for the branch with most number of memberships registered in 2016? => SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\nHow many songs appear in studio albums? => SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"\nShow the names and ids of tourist attractions that are visited at least two times. => SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2\nFind the name of the youngest organization. => SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\nHow many products are there? => SELECT count(*) FROM products\nList the number of all matches who played in years of 2013 or 2016. => ", "response": "SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016"}
{"question": "How many matches were played in 2013 or 2016?", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the name and opening year for the branch that registered the most members in 2016? => SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\nHow many events are there? => SELECT count(*) FROM event\nShow institution names along with the number of proteins for each institution. => SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id\nWhat are the names of customers who have a loan of more than 3000 in amount? => SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000\nWhat is the average price for a lesson taught by Janessa Sawayn? => SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nHow many matches were played in 2013 or 2016? => ", "response": "SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016"}
{"question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat ranks do we have for faculty? => SELECT DISTINCT rank FROM Faculty\nReturn the names of the regions affected by storms that had a death count of at least 10. => SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10\nHow many different bike ids are there? => SELECT count(DISTINCT bike_id) FROM trip\nFind the number of teachers who teach the student called CHRISSY NABOZNY. => SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"\nWhat are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin? => SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"\nWhat are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? => ", "response": "SELECT p.country_code, p.first_name FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE m.tourney_name = \"WTA Championships\" AND EXISTS (SELECT * FROM matches WHERE tourney_name = \"Australian Open\" AND winner_id = m.winner_id)"}
{"question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ? => SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"\nFind the total amount of products ordered before 2018-03-17 07:13:53. => SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"\nReturn the age of the person with the greatest height. => SELECT Age FROM people ORDER BY Height DESC LIMIT 1\nWhat are the different states that had students successfully try out? => SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\nFor each classroom, show the classroom number and find how many students are using it. => SELECT classroom ,  count(*) FROM list GROUP BY classroom\nWhat are the first names and country codes for players who won both the WTA Championships and the Australian Open? => ", "response": "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' AND year IN (SELECT year FROM matches WHERE tourney_name = 'Australian Open' AND winner_id = matches.winner_id))"}
{"question": "Find the first name and country code of the oldest player.", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the number of professors who are in the Accounting or Biology departments? => SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'\nFind the order id and customer id associated with the oldest order. => SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\nWhat are total salaries and department id for each department that has more than 2 employees? => SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2\nHow many distinct countries are the climbers from? => SELECT COUNT(DISTINCT Country) FROM climber\nFind the number of students who are older than 18 and do not have allergy to either food or animal. => SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")\nFind the first name and country code of the oldest player. => ", "response": "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)"}
{"question": "What is the first name and country code of the oldest player?", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the vocal types used in song \"Badlands\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"\nWhat are the details of the markets that can be accessed by walk or bus? => SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\nWhat is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'? => SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'\nWhat are the mascots for schools with enrollments above the average? => SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)\nWhat is all the job history info done by employees earning a salary greater than or equal to 12000? => SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000\nWhat is the first name and country code of the oldest player? => ", "response": "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)"}
{"question": "List the first and last name of all players in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the names and dates of races, and the names of the tracks where they are held? => SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id\nWhat is the average GPA of students taking ACCT-211? => SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'\nWhat is the total number of customers who use banks in New York City? => SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'\nList the asset id, details, make and model for every asset. => SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets\nFind all types of store and number of them. => SELECT TYPE ,  count(*) FROM store GROUP BY TYPE\nList the first and last name of all players in the order of birth date. => ", "response": "SELECT first_name, last_name FROM players ORDER BY birth_date"}
{"question": "What are the full names of all players, sorted by birth date?", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the distinct last names of the students who have class president votes? => SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE\nFind the states where have the colleges whose enrollments are less than the largest size. => SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)\nFind distinct cities of addresses of people? => SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\nHow many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"? => SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'\nCompute the mean price of procedures physician John Wen was trained in. => SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nWhat are the full names of all players, sorted by birth date? => ", "response": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC"}
{"question": "List the first and last name of all players who are left / L hand in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nHow many movies were made before 2000? => SELECT count(*) FROM Movie WHERE YEAR  <  2000\nWhich channels are broadcast in the morning? Give me the channel names. => SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'\nList all media types. => SELECT name FROM media_types;\nList all the subject names. => SELECT subject_name FROM SUBJECTS\nFind the maximum and total number of followers of all users. => SELECT max(followers) ,  sum(followers) FROM user_profiles\nList the first and last name of all players who are left / L hand in the order of birth date. => ", "response": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;"}
{"question": "What are the full names of all left handed players, in order of birth date?", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the most common hometown of gymnasts? => SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\nList the names of editors who are older than 25. => SELECT Name FROM editor WHERE Age  >  25\nWhich destination has least number of flights? => SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\nHow many professors who are from either Accounting or Biology department? => SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'\nWhat is the maximum stars and year for the most recent movie? => SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\nWhat are the full names of all left handed players, in order of birth date? => ", "response": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC"}
{"question": "Find the first name and country code of the player who did the most number of tours.", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nFind the ids and names of stations from which at least 200 trips started. => SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\nWhat are the names of members and their corresponding parties? => SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\nFind the average and oldest age for students with different sex. => SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\nReturn the ids of documents that do not have expenses. => SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses\nWhat are the id and address of the shops which have a happy hour in May? => SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'\nFind the first name and country code of the player who did the most number of tours. => ", "response": "SELECT first_name, country_code FROM players WHERE player_id = (\nSELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1)"}
{"question": "What is the first name and country code of the player with the most tours?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nShow the names of products and the number of events they are in, sorted by the number of events in descending order. => SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC\nShow different types of ships and the number of ships of each type. => SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE\nWhat is the name of the bank branch that has lent the greatest amount? => SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1\nCount the number of tracks. => SELECT count(*) FROM track\nPlease show the most common type of ships. => SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the first name and country code of the player with the most tours? => ", "response": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"question": "Find the year that has the most number of matches.", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWho are the players from Indonesia? => SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\nWho is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name. => SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"\nWhat are the different types of forms? => SELECT DISTINCT form_type_code FROM forms\nFor each city, what is the highest latitude for its stations? => SELECT city ,  max(lat) FROM station GROUP BY city\nShow names for all employees who have certificate of Boeing 737-800. => SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"\nFind the year that has the most number of matches. => ", "response": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1"}
{"question": "Which year had the most matches?", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nFind the number of distinct bed types available in this inn. => SELECT count(DISTINCT bedType) FROM Rooms;\nFind the name and salary of instructors who are advisors of the students from the Math department. => SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'\nWhat is the maximum, minimum, and average amount of money outsanding for all customers? => SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;\nWhat are the names and trade names of the medicines which has 'Yes' value in the FDA record? => SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'\nCount the number of cities in Australia. => SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\nWhich year had the most matches? => ", "response": "SELECT year, COUNT(*) as matches_count FROM matches GROUP BY year ORDER BY matches_count DESC LIMIT 1;"}
{"question": "Find the name and rank points of the winner who won the most times.", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nHow many artists are above age 46 and joined after 1990? => SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990\nFind the most prominent max page size among all the products. => SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1\nWhat are the names and ids of documents that have the type code BK? => SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"\nFind the state which has the most number of customers. => SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1\nShow ids, customer ids, names for all accounts. => SELECT account_id ,  customer_id ,  account_name FROM Accounts\nFind the name and rank points of the winner who won the most times. => ", "response": "SELECT winner_name, sum(winner_rank_points) as total_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"}
{"question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhich people severed as comptroller most frequently? Give me the name of the person and the frequency count. => SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the salaray and name of the employee with the most certificates to fly planes more than 5000? => SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\nWhat are the names of the activities Mark Giuliano is involved in => SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\nShow names and seatings, ordered by seating for all tracks opened after 2000. => SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating\nFind the name of the user who gives the most reviews. => SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1\nWhat is the name of the winner who has won the most matches, and how many rank points does this player have? => ", "response": "SELECT winner_name, winner_rank_points FROM matches WHERE winner_name = (SELECT winner_name FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1"}
{"question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nFind the first name of students who are living in the Smith Hall. => SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'\nList players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007. => SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'\nWhich party has two or more records? => SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2\nWhat are the first names of all students who took ACCT-211 and received a C? => SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'\nReturn the hosts of competitions for which the theme is not Aliens? => SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\nFind the name of the winner who has the highest rank points and participated in the Australian Open tourney. => ", "response": "SELECT T1.winner_name FROM matches AS T1 JOIN rankings AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'Australian Open' AND T2.ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE player_id = T1.winner_id)"}
{"question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nHow many parties are there? => SELECT count(*) FROM party\nFind the name of companies whose revenue is greater than the average revenue of all companies. => SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)\nCount the number of wines produced at Robert Biale winery. => SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\nWhat are the names of all aircrafts that John Williams have certificates to be able to fly? => SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"\nWhat are the different fates of the mission that involved ships from the United States? => SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"\nWhat is the name of the winner with the most rank points who participated in the Australian Open tournament? => ", "response": "SELECT MAX(rankings.ranking_points), players.first_name, players.last_name FROM rankings\nJOIN players ON rankings.player_id = players.player_id\nJOIN matches ON rankings.player_id = matches.winner_id\nWHERE matches.tourney_name = \"Australian Open\""}
{"question": "find the names of loser and winner who played in the match with greatest number of minutes.", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nList the project details of the projects launched by the organisation => SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )\nGive the phones for departments in room 268. => SELECT DPhone FROM DEPARTMENT WHERE Room  =  268\nWhat are the names of products produced by both Creative Labs and Sony? => SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\nHow many locations are listed in the database? => SELECT count(*) FROM Ref_locations\nList in alphabetic order all different amenities. => SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name\nfind the names of loser and winner who played in the match with greatest number of minutes. => ", "response": "SELECT matches.loser_name, matches.winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)"}
{"question": "What are the names of the winner and loser who played in the longest match?", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the average number of attendance at home games for each year? => SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;\nWhat are the unique names of all race held between 2014 and 2017? => SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\nShow the name of aircraft which fewest people have its certificate. => SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\nWhat are the result description of the project whose detail is 'sint'? => SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'\nWhat is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating? => SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars\nWhat are the names of the winner and loser who played in the longest match? => ", "response": "SELECT T1.winner_name, T1.loser_name FROM matches AS T1 WHERE T1.minutes = (SELECT MAX(minutes) FROM matches)"}
{"question": "Find the average ranking for each player and their first name.", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nShow the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\". => SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\nWhat is the last name of the contact individual from the Labour party organization who was contacted most recently? => SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1\nWhat is the average balance in checking accounts? => SELECT avg(balance) FROM checking\nList the names of all distinct wines in alphabetical order. => SELECT DISTINCT Name FROM WINE ORDER BY Name\nShow the names of employees that work for companies with sales bigger than 200. => SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200\nFind the average ranking for each player and their first name. => ", "response": "SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id, players.first_name"}
{"question": "What are the first names of all players, and their average rankings?", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the name, origin and owner of each program? => SELECT name ,  origin ,  OWNER FROM program\nWhat is the party of the representative that has the smallest number of votes. => SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1\ndisplay those employees who joined after 7th September, 1987. => SELECT * FROM employees WHERE hire_date  >  '1987-09-07'\nWhich guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names. => SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\nReturn the name and job title of the staff with the latest date assigned. => SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1\nWhat are the first names of all players, and their average rankings? => ", "response": "SELECT first_name ,  AVG(rankings.ranking) AS avg_rank FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY players.player_id, first_name"}
{"question": "Find the total ranking points for each player and their first name.", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are all the distinct payment types? => SELECT DISTINCT payment_type_code FROM payments\nWhat are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"\nHow many customers are there? => SELECT count(*) FROM Customers;\nFind the average fee on a CSU campus in 1996 => SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\nWhat is the last name of the author that has published the most papers? => SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1\nFind the total ranking points for each player and their first name. => ", "response": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name"}
{"question": "What are the first names of all players, and their total ranking points?", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nFind the names of the courses that have just one student enrollment. => SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\nWhat are the average and minimum age of captains in different class? => SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS\nFor each end station id, what is its name, latitude, and minimum duration for trips ended there? => SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id\nWhat is the maximum stars and year for the most recent movie? => SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\nCount the number of items store 1 has in stock. => SELECT count(*) FROM inventory WHERE store_id  =  1\nWhat are the first names of all players, and their total ranking points? => ", "response": "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name"}
{"question": "find the number of players for each country.", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhich department has the largest number of employees? => SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;\nList the names of all players who have a crossing score higher than 90 and prefer their right foot. => SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"\nWhich authors belong to the institution \"Google\"? Show the first names and last names. => SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\nShow the ids for all the faculty members who have at least 2 students. => SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2\nFind the names of courses taught by the tutor who has personal name \"Julio\". => SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"\nfind the number of players for each country. => ", "response": "SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code;"}
{"question": "How many players are from each country?", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nfind the name and age of the pilot who has won the most number of times among the pilots who are younger than 30. => SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1\nWhat are the names of climbers who are not from the country of Switzerland? => SELECT Name FROM climber WHERE Country != \"Switzerland\"\nFind the total number of students and total number of instructors for each department. => SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name\nReturn the names and classes of ships that do not have a captain? => SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)\nFind the total rating ratio for each channel owner. => SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER\nHow many players are from each country? => ", "response": "SELECT country_code, COUNT(*) FROM players GROUP BY country_code"}
{"question": "find the code of the country where has the greatest number of players.", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nhow many degrees were conferred between 1998 and 2002? => SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus\nWhat is the maximum page size for everything that has more than 3 products listed? => SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3\nShow the ids and names of all documents. => SELECT document_id ,  document_name FROM Documents\nList the major of each male student. => SELECT Major FROM STUDENT WHERE Sex  =  \"M\"\nWhat campuses opened before 1800? => SELECT campus FROM campuses WHERE YEAR  <  1800\nfind the code of the country where has the greatest number of players. => ", "response": "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1"}
{"question": "What is the code of the country with the most players?", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the names and ages of editors? => SELECT Name ,  Age FROM editor\nFind the number of funiture types produced by each manufacturer as well as the company names. => SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id\nWhat is the total access count of documents that are of the most common document type? => SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1\nShow the description and code of the attraction type most tourist attractions belong to. => SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the student ids for those on scholarship in major number 600? => SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'\nWhat is the code of the country with the most players? => ", "response": "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1"}
{"question": "Find the codes of countries that have more than 50 players.", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the result description of the project whose detail is 'sint'? => SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'\nHow many females are in the network? => SELECT count(*) FROM Person WHERE gender  =  'female'\nGive the songs included in volumes that have more than 1 week on top. => SELECT Song FROM volume WHERE Weeks_on_Top  >  1\nHow many different genders are there in the dorms? => SELECT count(DISTINCT gender) FROM dorm\nFind the busiest source airport that runs most number of routes in China. => SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\nFind the codes of countries that have more than 50 players. => ", "response": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50"}
{"question": "What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the age of the friend of Zach with longest year relationship? => SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\nShow the names of buildings except for those having an institution founded in 2003. => SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003\nHow many addresses have zip code 197? => SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"\nShow the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\" => SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\nWhat are the names of the customers and staff members? => SELECT customer_details FROM customers UNION SELECT staff_details FROM staff\nWhat are the codes of countries with more than 50 players? => ", "response": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50"}
{"question": "Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the ids of stations that are located in San Francisco and have average bike availability above 10. => SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10\nShow the flight number of flights with three lowest distances. => SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3\nGive me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01? => SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"\nWhat is the average unit price of all the tracks? => SELECT AVG(UnitPrice) FROM TRACK\nWhat is the title of the prerequisite class of International Finance course? => SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\nFind the total number of tours for each ranking date. => ", "response": "SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date"}
{"question": "How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhich patient is undergoing the most recent treatment? => SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1\nShow the names of all the activities Mark Giuliano participates in. => SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\nWhat is the average money requested by all entrepreneurs? => SELECT avg(Money_Requested) FROM entrepreneur\nwhat is the address of history department? => SELECT dept_address FROM department WHERE dept_name  =  'History'\nHow many different countries are all the swimmers from? => SELECT count(DISTINCT nationality) FROM swimmer\nHow many total tours were there for each ranking date? => ", "response": "SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date"}
{"question": "Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nHow many airports are there per country? Order the countries by decreasing number of airports. => SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC\nWhat are the rank, first name, and last name of the faculty members? => SELECT rank ,  Fname ,  Lname FROM Faculty\nWith which kind of payment method were the least number of payments processed? => SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1\nList the names of all distinct wines in alphabetical order. => SELECT DISTINCT Name FROM WINE ORDER BY Name\nHow many animal type allergies exist? => SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\nFind the number of matches happened in each year. => ", "response": "SELECT COUNT(*) AS num_matches, year FROM matches GROUP BY year ORDER BY year ASC"}
{"question": "How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the maximum, minimum and average years spent working on a school bus? => SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus\nFind the names of the channels that are broadcast in the morning. => SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'\nWhat are the titles of all the albums? => SELECT title FROM albums;\nShow the draft pick numbers and draft classes of players whose positions are defenders. => SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\nWho is the director of movie Avatar? => SELECT director FROM Movie WHERE title  = 'Avatar'\nHow many matches were played in each year? => ", "response": "SELECT year, COUNT(*) FROM matches GROUP BY year;"}
{"question": "Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nFind the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010. => SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";\nWhat are the invoice numbers created before 1989-09-03 or after 2007-12-25? => SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"\nWhat are the average access counts of documents that have the functional area description \"Acknowledgement\"? => SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"\nList the names of people that have not been on the affirmative side of debates. => SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)\nWhat products are sold at the store named Miramichi? => SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"\nFind the name and rank of the 3 youngest winners across all matches. => ", "response": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;"}
{"question": "What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the total number of rooms available in this inn? => SELECT count(*) FROM Rooms;\nHow many staff live in state Georgia? => SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";\nHow many people are older than every engineer? => SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\nShow all product names without an order. => SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id\nReturn the song in the volume that has spent the most weeks on top? => SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1\nWhat are the names and ranks of the three youngest winners across all matches? => ", "response": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;"}
{"question": "How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nShow all date and share count of transactions. => SELECT date_of_transaction ,  share_count FROM TRANSACTIONS\nWhat is the list of program names, sorted by the order of launch date? => SELECT name FROM program ORDER BY launch\nWhat are the names and trade names of the medicines which has 'Yes' value in the FDA record? => SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'\nWhat campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled? => SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200\nWhat are the ids, full names, and phones of each customer? => SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers\nHow many different winners both participated in the WTA Championships and were left handed? => ", "response": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'"}
{"question": "Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the title, id, and description of the movie with the greatest number of actors? => SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1\nReturn the minister who left office at the latest time. => SELECT minister FROM party ORDER BY left_office DESC LIMIT 1\nFind name of the project that needs the least amount of time to finish and the name of scientists who worked on it. => SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)\nWhat are the names of directors who directed movies with 5 star rating? Also return the title of these movies. => SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5\nWhich districts have at least two addresses? => SELECT district FROM address GROUP BY district HAVING count(*)  >=  2\nFind the number of left handed winners who participated in the WTA Championships. => ", "response": "SELECT COUNT(*) FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'"}
{"question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat is the last name and office of the professor from the history department? => SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'\nList the asset id, details, make and model for every asset. => SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets\nHow many students are in each department? => SELECT count(*) ,  dept_code FROM student GROUP BY dept_code\nFind the first name and office of the professor who is in the history department and has a Ph.D. degree. => SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'\nWhat are the different product names? What is the average product price for each of them? => SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name\nFind the first name, country code and birth date of the winner who has the highest rank points in all matches. => ", "response": "SELECT p.first_name, p.country_code, p.birth_date \nFROM players p \nJOIN matches m ON p.player_id = m.winner_id \nJOIN rankings r ON p.player_id = r.player_id \nWHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings)"}
{"question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nFind the number of departments in each school. => SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code\nList the grape, winery and year of the wines whose price is bigger than 100 ordered by year. => SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR\nList the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born. => SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'\nWhat is the city with the most customers? => SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;\nWhat are the names of wrestlers and their teams in elimination, ordered descending by days held? => SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC\nWhat is the first name, country code, and birth date of the player with the most winner rank points across all matches? => ", "response": "SELECT first_name, country_code, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches))"}
{"question": "Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nHow many players are from each country? => SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\nFind the movies with the highest average rating. Return the movie titles and average rating. => SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1\nFind the name of students who have taken the prerequisite course of the course with title International Finance. => SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')\nFind the total number of students living in the male dorm (with gender M). => SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'\nCount the number of statements. => SELECT count(*) FROM Statements\nFind the number of players for each hand type. => ", "response": "SELECT hand, COUNT(*) FROM players GROUP BY hand"}
{"question": "How many players are there for each hand type?", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "prompt": "Given a database 'wta_1' have 3 tables named 'players', 'matches', 'rankings'. players tbl have columns: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'. matches tbl have columns: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'. rankings tbl have columns: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'. \nTranslate text to SQL: \nWhat are the opening years in which at least two shops opened? => SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2\nCount the number of colors. => SELECT count(*) FROM ref_colors\nList the major of each male student. => SELECT Major FROM STUDENT WHERE Sex  =  \"M\"\nWhat is the department name of the students with lowest gpa belongs to? => SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1\nWhat are the names of customers who do not have any policies? => SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\nHow many players are there for each hand type? => ", "response": "SELECT hand, count(*) FROM players GROUP BY hand"}
{"question": "How many ships ended up being 'Captured'?", "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nShow the names of donors who donated to both school \"Glenn\" and \"Triton.\" => SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'\nFind the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type. => SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation\nWhat are the ids of all male students who do not play football? => SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\nWhich papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers. => SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"\nWhat is the founded year of the non public school that was founded most recently? => SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1\nHow many ships ended up being 'Captured'? => ", "response": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'"}
{"question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nWhat are the last names of faculty who are part of the computer science department? => SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"\nWhat are the phone numbers of customers using the policy with the code \"Life Insurance\"? => SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"\nFor each bed type, find the average base price of different bed type. => SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\nFind the name of all customers whose name contains \"Alex\". => SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"\nShow the names and details of all the staff members. => SELECT Name ,  Other_Details FROM Staff\nList the name and tonnage ordered by in descending alphaetical order for the names. => ", "response": "SELECT name, tonnage FROM ship ORDER BY name DESC"}
{"question": "List the name, date and result of each battle.", "sql": "SELECT name ,  date FROM battle", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nWhat is the id of the instructor who advises of all students from History department? => SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\nWhat are the numbers of wines for different grapes? => SELECT count(*) ,  Grape FROM WINE GROUP BY Grape\nWhat are the ids, types, and details of the organization with the most research staff? => SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\nWhat is the average attendance of stadiums with capacity percentage higher than 100%? => SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100\nWhich customer's name contains \"Alex\"? Find the full name. => SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"\nList the name, date and result of each battle. => ", "response": "SELECT name, date, result FROM battle"}
{"question": "What is maximum and minimum death toll caused each time?", "sql": "SELECT max(killed) ,  min(killed) FROM death", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nHow many professors who has a either Ph.D. or MA degree? => SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\nShow all church names except for those that had a wedding in year 2015. => SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015\nFind the names of users who did not leave any review. => SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\nHow many customers have an account? => SELECT count(DISTINCT customer_id) FROM Accounts\nWhat is the name of the instructor who advises the student with the greatest number of total credits? => SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1\nWhat is maximum and minimum death toll caused each time? => ", "response": "SELECT MAX(killed + injured) as max_death_toll, MIN(killed + injured) as min_death_toll FROM death"}
{"question": "What is the average number of injuries caused each time?", "sql": "SELECT avg(injured) FROM death", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nCount the number of voting records for each election cycle. => SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\nReturn the distinct customer details. => SELECT DISTINCT customer_details FROM Customers\nWhat are the names of shops that have more than a single kind of device in stock? => SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1\nList the position of players with average number of points scored by players of that position bigger than 20. => SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\nReturn the names of singers who are from UK and released an English song. => SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"\nWhat is the average number of injuries caused each time? => ", "response": "SELECT AVG(killed + injured) FROM death"}
{"question": "What are the death and injury situations caused by the ship with tonnage 't'?", "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nList the names of clubs that do not have any players. => SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\nHow many students are enrolled in the class taught by some professor from the accounting department? => SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'\nWho are the different directors of films which had market estimation in 1995? => SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995\nWhat are the different statement ids on accounts, and the number of accounts for each? => SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID\nWhat is the number of ships? => SELECT count(*) FROM ship\nWhat are the death and injury situations caused by the ship with tonnage 't'? => ", "response": "SELECT note, killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')"}
{"question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nFind the description of the claim status \"Open\". => SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\nFor each type of store, how many of them are there? => SELECT TYPE ,  count(*) FROM store GROUP BY TYPE\nShow all member names who are not in charge of any event. => SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\nWhat are the different names of all the races in reverse alphabetical order? => SELECT DISTINCT name FROM races ORDER BY name DESC\nShow the names of companies and of employees. => SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID\nWhat are the name and results of the battles when the bulgarian commander is not 'Boril' => ", "response": "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'"}
{"question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nHow many students participated in tryouts for each college by descennding count? => SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC\nWhen was the school with the largest enrollment founded? => SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1\nWhat are the movie titles with the highest average rating and what are those ratings? => SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1\nWhich countries do not have a stadium that was opened after 2006? => SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006\nList the names of people that are not entrepreneurs. => SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)\nWhat are the different ids and names of the battles that lost any 'Brig' type shipes? => ", "response": "SELECT DISTINCT b.id, b.name FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'"}
{"question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nFind the names of students who have taken any course in the fall semester of year 2003. => SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)\nHow many heads of the departments are older than 56 ? => SELECT count(*) FROM head WHERE age  >  56\nWhat are the countries for each market, ordered alphabetically? => SELECT Country FROM market ORDER BY Country ASC\nWhat are the names of mountains that have a height of over 5000 or a prominence of over 1000? => SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000\nList the name of rooms with king or queen bed. => SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";\nWhat are the ids and names of the battles that led to more than 10 people killed in total. => ", "response": "SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10"}
{"question": "What is the ship id and name that caused most total injuries?", "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nWhat are the first, middle, and last names of all individuals, ordered by last name? => SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name\nWhat are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds? => SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000\nWhat are the distinct positions of the players from a country whose capital is Dublin? => SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"\nCount the number of distinct artists who have volumes. => SELECT COUNT(DISTINCT Artist_ID) FROM volume\nHow many dorms are there and what is the total capacity for each gender? => SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender\nWhat is the ship id and name that caused most total injuries? => ", "response": "SELECT d.caused_by_ship_id, s.name \nFROM death d \nJOIN ship s ON d.caused_by_ship_id = s.id \nGROUP BY d.caused_by_ship_id \nORDER BY SUM(d.injured) DESC \nLIMIT 1;"}
{"question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nShow the id, name of each editor and the number of journal committees they are on. => SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\nWhat are the names of the five oldest people? => SELECT Name FROM People ORDER BY Age DESC LIMIT 5\nWhat is the name of the bank branch with the greatest number of customers? => SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1\nShow budget type codes and the number of documents in each budget type. => SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code\nFor each party, return the name of the party and the number of delegates from that party. => SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party\nWhat are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? => ", "response": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'"}
{"question": "How many different results are there for the battles?", "sql": "SELECT count(DISTINCT RESULT) FROM battle", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nHow many people are under 40 for each gender? => SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender\nHow many universities have a campus fee higher than average? => SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\nList the name of artworks in ascending alphabetical order. => SELECT Name FROM artwork ORDER BY Name ASC\nShow the names of cities in counties that have a crime rate less than 100. => SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)\nShow the station name with greatest number of trains. => SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1\nHow many different results are there for the battles? => ", "response": "SELECT COUNT(DISTINCT result) FROM battle"}
{"question": "How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nWhat are the dates of ceremony and results for each music festival? => SELECT Date_of_ceremony ,  RESULT FROM music_festival\nHow many employees do we have? => SELECT count(*) FROM Employee\nReturn the type name, type description, and date of creation for each document. => SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code\nWhat are the names of musicals with nominee \"Bob Fosse\"? => SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\nFind the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\". => SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"\nHow many battles did not lose any ship with tonnage '225'? => ", "response": "SELECT count(*) FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage != 225 OR ship.tonnage IS NULL"}
{"question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nWhat are the lifespans of representatives in descending order of vote percent? => SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC\nHow many allergies are there? => SELECT count(DISTINCT allergy) FROM Allergy_type\nHow many events are there? => SELECT count(*) FROM event\nWhat are the first names for students who have an \"a\" in their first name? => SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'\nWhat are the total enrollments of universities of each affiliation type? => SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\nList the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' => ", "response": "SELECT battle.name, battle.date \nFROM battle \nJOIN death ON battle.id = death.caused_by_ship_id \nJOIN ship ON death.caused_by_ship_id = ship.id \nWHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'"}
{"question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nHow many invoices do we have? => SELECT count(*) FROM Invoices\ndisplay the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working. => SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\nWhat is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff? => SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')\nFind the name of the artist who made the album \"Balls to the Wall\". => SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\nWhat are the flight numbers for the aircraft Airbus A340-300? => SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\nShow names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. => ", "response": "SELECT b.name, b.result, b.bulgarian_commander\nFROM battle b\nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM death d JOIN ship s ON d.caused_by_ship_id = s.id \n    WHERE s.location = 'English Channel' AND d.note = 'lost'\n)"}
{"question": "What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'", "prompt": "Given a database 'battle_death' have 3 tables named 'battle', 'ship', 'death'. battle tbl have columns: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'. ship tbl have columns: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'. death tbl have columns: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'. \nTranslate text to SQL: \nWhat is the unit of measurement of product named \"cumin\"? => SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"\nWhat are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names? => SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"\nFind the name of accounts whose checking balance is below the average checking balance. => SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\nWhat are the number of rooms for each bed type? => SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;\nShow the home city with the most number of drivers. => SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1\nWhat are the notes of the death events which has substring 'East'? => ", "response": "SELECT note FROM death WHERE note LIKE '%East%'"}
{"question": "what are all the addresses including line 1 and line 2?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the first name and department name of all employees? => SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\nShow the locations that have at least two performances. => SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2\nWhich channels broadcast both in the morning and at night? Give me the channel names. => SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'\nShow the average share count of transactions for different investors. => SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id\nFind the number of different states which banks are located at. => SELECT count(DISTINCT state) FROM bank\nwhat are all the addresses including line 1 and line 2? => ", "response": "SELECT line_1, line_2 FROM Addresses"}
{"question": "What is the first and second line for all addresses?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat is the mean longitude for all stations that have never had more than 10 bikes available? => SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)\nList all customer status codes and the number of customers having each status code. => SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;\nHow many different items were reviewed by some users? => SELECT count(DISTINCT i_id) FROM review\nhow many female dependents are there? => SELECT count(*) FROM dependent WHERE sex  =  'F'\nReturn the ids of all products that were ordered more than three times or supplied more than 80000. => SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000\nWhat is the first and second line for all addresses? => ", "response": "SELECT line_1, line_2 FROM Addresses;"}
{"question": "How many courses in total are listed?", "sql": "SELECT count(*) FROM Courses", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the code and description of the most frequent behavior incident type? => SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1\nWhich organizations are not a parent organization of others? List the organization id. => SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations\nWhat are the ids and names of the web accelerators that are compatible with two or more browsers? => SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\nWhat is the first name of the professor who is teaching CIS-220 and QM-261? => SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'\nHow many different types of transactions are there? => SELECT count(DISTINCT transaction_type) FROM Financial_Transactions\nHow many courses in total are listed? => ", "response": "SELECT count(*) FROM Courses"}
{"question": "How many courses are there?", "sql": "SELECT count(*) FROM Courses", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat is the first name and last name employee helps the customer with first name Leonie? => SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"\nWhat are the full names of faculty members who are a part of department 520? => SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520\nReturn the number of customers who have at least one order with \"Cancelled\" status. => SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"\nWhat is the total number of students enrolled in schools without any goalies? => SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\nFind the number of courses provided in each semester and year. => SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\nHow many courses are there? => ", "response": "SELECT count(*) FROM Courses"}
{"question": "How is the math course described?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nHow many products have a price higher than the average? => SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)\nWhat is the total home game attendance of team Boston Red Stockings from 2000 to 2010? => SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;\nWhat is the average bike availablility for stations not in Palo Alto? => SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\nWhat are the maximum and minimum number of transit passengers of all aiports. => SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport\nWhat are the names and scores of wines that are made of white color grapes? => SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"\nHow is the math course described? => ", "response": "It is unclear which math course is being referred to, as there is no specific information about a math course in the provided database schema."}
{"question": "What are the descriptions for all the math courses?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the names of all directors whose movies are rated by Sarah Martinez. => SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'\nWhich catalog contents has price above 700 dollars? Show their catalog entry names and capacities. => SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\nHow many transaction does account with name 337 have? => SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\nShow the name of aircraft which fewest people have its certificate. => SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\nReturn the full names and salaries for employees with first names that end with the letter m. => SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\nWhat are the descriptions for all the math courses? => ", "response": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'"}
{"question": "What is the zip code of the address in the city Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the minimum and maximum crime rate of counties? => SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety\nFind all the policy types that are used by more than 2 customers. => SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2\nTell me the number of orders with \"Second time\" as order detail. => SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"\nReturn the id of the project that has the fewest corresponding documents. => SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\nWhat is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class? => SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'\nWhat is the zip code of the address in the city Port Chelsea? => ", "response": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'"}
{"question": "What is the zip code for Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nCompute the average age of the members in the club \"Tennis Club\". => SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"\nWhich faculty members advise two ore more students? Give me their faculty ids. => SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2\nWhat is the last name of the student who received an A in the class with the code 10018? => SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018\nWhat are the salaries and manager ids for employees who have managers? => SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"\nWhat are the first names of all students who took ACCT-211 and received a C? => SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'\nWhat is the zip code for Port Chelsea? => ", "response": "It is not possible to answer this question as there is no indication of which table contains the information for the city of Port Chelsea."}
{"question": "Which department offers the most number of degrees? List department name and id.", "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nList the studios of each film and the number of films produced by that studio. => SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\nWhat are the official names of cities that have population over 1500 or less than 500? => SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\nFind the number of trains starting from each origin. => SELECT origin ,  count(*) FROM train GROUP BY origin\nWhat are the phone numbers of customers using the policy with the code \"Life Insurance\"? => SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"\nFind the maximum age of all the students. => SELECT max(Age) FROM STUDENT\nWhich department offers the most number of degrees? List department name and id. => ", "response": "SELECT department_id, department_name, COUNT(*) as num_degrees FROM Degree_Programs GROUP BY department_id, department_name ORDER BY num_degrees DESC LIMIT 1"}
{"question": "What is the name and id of the department with the most number of degrees ?", "sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhich authors have submitted to more than one workshop? => SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\nFind the names of products that were bought by at least two distinct customers. => SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2\nHow many unique classes are offered? => SELECT count(DISTINCT class_code) FROM CLASS\nFind the names of scientists who are not working on the project with the highest hours. => SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)\nHow many games are held after season 2007? => SELECT count(*) FROM game WHERE season  >  2007\nWhat is the name and id of the department with the most number of degrees ? => ", "response": "SELECT department_name, department_id FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id HAVING COUNT(*) = (SELECT MAX(degree_count) FROM (SELECT COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id) AS T1))"}
{"question": "How many departments offer any degree?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the first and last names of the customers with the 10 cheapest invoices? => SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;\nWhat is the total amount of payment? => SELECT sum(Amount_Payment) FROM Payments\nWhich staff members are assigned to the problem with id 1? Give me their first and last names. => SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1\nWhat are the different names of the product characteristics? => SELECT DISTINCT characteristic_name FROM CHARACTERISTICS\nWhat are the names of device shops, and what are the carriers that they carry devices in stock for? => SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID\nHow many departments offer any degree? => ", "response": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs"}
{"question": "How many different departments offer degrees?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nList the name of artworks whose type is not \"Program Talent Show\". => SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"\nShow the most frequently used carrier of the phones. => SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1\nWhich customers have an insurance policy with the type code \"Deputy\"? Give me the customer details. => SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"\nWhat is the total time for all lessons taught by Janessa Sawayn? => SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nWhat is the area for the appelation which produced the most wines prior to 2010? => SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1\nHow many different departments offer degrees? => ", "response": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs"}
{"question": "How many different degree names are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFor each classroom with at least 2 classes, how many classes are offered? => SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2\nWhat is the name of the game that has been played the most? => SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1\nWhat are the life spans of representatives from New York state or Indiana state? => SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"\nWhat are the distinct ages of the heads who are acting? => SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'\nWhat are the full names of customers with the account name 900? => SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"\nHow many different degree names are offered? => ", "response": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}
{"question": "How many different degrees are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the names of editors of age either 24 or 25. => SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25\nHow many distinct governors are there? => SELECT count(DISTINCT Governor) FROM party\nCount the number of clubs located at \"HHH\". => SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"\nWhat are the titles of all albums that start with A in alphabetical order? => SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;\nList the height and weight of people in descending order of height. => SELECT Height ,  Weight FROM people ORDER BY Height DESC\nHow many different degrees are offered? => ", "response": "SELECT COUNT(*) FROM Degree_Programs"}
{"question": "How many degrees does the engineering department offer?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nHow many routes end in a Canadian airport? => SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'\nWhich allergy type has most number of allergies? => SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1\nWhat is the complete description of the researcher role. => SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'\nWhat are the names of scientists who have not been assigned a project? => SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\nWhat are the mascots for schools with enrollments above the average? => SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)\nHow many degrees does the engineering department offer? => ", "response": "SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')"}
{"question": "How many degrees does the engineering department have?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the location codes with at least 3 documents. => SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3\nSelect the code of the product that is cheapest in each product category. => SELECT code ,  name ,  min(price) FROM products GROUP BY name\nWhat are the different locations of the school with the code BUS? => SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'\nFind the names of the top 3 departments that provide the largest amount of courses? => SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3\nWhat is the last name of the musician that has been at the back position the most? => SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\nHow many degrees does the engineering department have? => ", "response": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'engineering')"}
{"question": "What are the names and descriptions of all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the addresses and author IDs of the course authors that teach at least two courses. => SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\nList the names of players in ascending order of votes. => SELECT Player_name FROM player ORDER BY Votes ASC\nShow the names and ids of tourist attractions that are visited at most once. => SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\nHow many distinct kinds of injuries happened after season 2010? => SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010\nReturn the color description that is most common across all products. => SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1\nWhat are the names and descriptions of all the sections? => ", "response": "SELECT section_name, section_description FROM Sections"}
{"question": "What are the names and descriptions for all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow each state and the number of addresses in each state. => SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county\nList the name of artworks whose type is not \"Program Talent Show\". => SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"\nFind the number of manufactures that are based in Tokyo or Beijing. => SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'\nFind the number of trains starting from each origin. => SELECT origin ,  count(*) FROM train GROUP BY origin\nFind all students taught by OTHA MOYER. Output the first and last names of the students. => SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\nWhat are the names and descriptions for all the sections? => ", "response": "SELECT section_name, section_description FROM Sections"}
{"question": "What are the names and id of courses having at most 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the maximum share count of transactions where the amount is smaller than 10000 => SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000\nSelect the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order). => SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC\nList the name and assets of each company in ascending order of company name. => SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\nWhich cmi cross reference id is not related to any parking taxes? => SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines\nFind the first names of teachers whose email address contains the word \"man\". => SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'\nWhat are the names and id of courses having at most 2 sections? => ", "response": "SELECT course_name, course_id FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) <= 2)"}
{"question": "What are the names and ids of every course with less than 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the distinct names of mountains climbed by climbers from country \"West Germany\". => SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"\nList all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name. => SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name\nFind the name of rooms booked by some customers whose first name contains ROY. => SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'\nWhat are the distinct first names, last names, and phone numbers for customers with accounts? => SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\nWhat are the titles and average ratings for all movies that have the lowest average rating? => SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1\nWhat are the names and ids of every course with less than 2 sections? => ", "response": "SELECT course_name, course_id FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) < 2)"}
{"question": "List the section_name in reversed lexicographical order.", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the names of actors who are not 20 years old? => SELECT Name FROM actor WHERE Age != 20\nWhat are the dates when customers with ids between 10 and 20 became customers? => SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20\nList every album whose title starts with A in alphabetical order. => SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;\nWhich university is in Los Angeles county and opened after 1950? => SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950\nFind the first and last name of students who are living in the dorms that have amenity TV Lounge. => SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\nList the section_name in reversed lexicographical order. => ", "response": "SELECT section_name FROM Sections ORDER BY section_name DESC"}
{"question": "What are the names of the sections in reverse alphabetical order?", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the apartment type codes and apartment numbers in the buildings managed by \"Kyle\". => SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"\nList the actual delivery date for all the orders with quantity 1 => SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1\nWhich game type has least number of games? => SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1\nFind the name of product that is produced by both companies Creative Labs and Sony. => SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\nFind the forename and surname of drivers whose nationality is German? => SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"\nWhat are the names of the sections in reverse alphabetical order? => ", "response": "SELECT section_name FROM Sections ORDER BY section_name DESC"}
{"question": "What is the semester which most student registered in? Show both the name and the id.", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the state of the college which player Charles is attending. => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'\nHow many cities are there that have more than 3 airports? => SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\nFind the average credit score of the customers who have some loan. => SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\nWhat is the most frequent status of bookings? => SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1\nShow different locations of railways along with the corresponding number of railways at each location. => SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION\nWhat is the semester which most student registered in? Show both the name and the id. => ", "response": "SELECT T1.semester_id, T2.semester_name FROM student_enrolment T1 JOIN semesters T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id, T2.semester_name ORDER BY count(*) DESC LIMIT 1"}
{"question": "For each semester, what is the name and id of the one with the most students registered?", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow all cities and corresponding number of students. => SELECT city_code ,  count(*) FROM Student GROUP BY city_code\nHow many vehicles exist? => SELECT count(*) FROM Vehicles;\nFind the average rating star for each movie that received at least 2 ratings. => SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2\nWhat are the description and credit of the course which the student whose last name is Smithson took? => SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'\nReturn the full names and salaries for employees with first names that end with the letter m. => SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\nFor each semester, what is the name and id of the one with the most students registered? => ", "response": "SELECT S.semester_name, S.semester_id, COUNT(SE.student_enrolment_id) AS num_students \nFROM Semesters AS S \nINNER JOIN Student_Enrolment AS SE ON SE.semester_id = S.semester_id \nGROUP BY S.semester_id \nHAVING COUNT(SE.student_enrolment_id) = (\n    SELECT COUNT(SE2.student_enrolment_id) \n    FROM Student_Enrolment AS SE2 \n    WHERE SE2.semester_id = S.semester_id \n    GROUP BY SE2.semester_id \n    ORDER BY COUNT(SE2.student_enrolment_id) DESC \n    LIMIT 1\n)"}
{"question": "What is the description of the department whose name has the substring the computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nList the name of physicians who never took any appointment. => SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\nFor each manufacturer name, what are the names and prices of their most expensive product? => SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\nList all tracks bought by customer Daan Peeters. => SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";\nWhat is the average latitude and longitude of all starting stations for the trips? => SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id\nFind the entry names of the catalog with the attribute that have the most entries. => SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)\nWhat is the description of the department whose name has the substring the computer? => ", "response": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}
{"question": "What is the department description for the one whose name has the word computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the titles of items that received any rating below 5. => SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5\nFind the number of distinct courses that have enrolled students. => SELECT count(course_id) FROM Student_Course_Enrolment\nList the first name middle name and last name of all staff. => SELECT first_name ,  middle_name ,  last_name FROM Staff;\nHow many albums has Billy Cobam released? => SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\nList the id of students who registered course statistics in the order of registration date. => SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date\nWhat is the department description for the one whose name has the word computer? => ", "response": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}
{"question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFor each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade. => SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade\nWhat is the description of the club named \"Tennis Club\"? => SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"\nTell me the price ranges for all the hotels. => SELECT price_range FROM HOTELS\nShow the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms. => SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1\nHow many schools are there in the department? => SELECT count(DISTINCT school_code) FROM department\nWho are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. => ", "response": "I'm sorry, but the given database schema does not have a column that links a student to multiple degree programs in one semester. Without that information, it is not possible to query for the students who are enrolled in 2 degree programs in one semester."}
{"question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFor each election cycle, report the number of voting records. => SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\nHow many gas companies are there? => SELECT count(*) FROM company\nList the name of the shop with the latest open year. => SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1\nList the state in the US with the most invoices. => SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;\nWhich district has the largest population? => SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1\nWhat are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? => ", "response": "SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students\nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nWHERE Student_Enrolment.degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(*) = 2)\nAND Student_Enrolment.semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(*) = 2)"}
{"question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nCount the number of invoices. => SELECT count(*) FROM Invoices\nWhat are the names of instructors who have taught C Programming courses? => SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\nHow many male (sex is M) students have class senator votes in the fall election cycle? => SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"\nList the name and count of each product in all orders. => SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id\nWhat is the name of the technician whose team is not 'NYY'? => SELECT Name FROM technician WHERE Team != \"NYY\"\nWho is enrolled in a Bachelor degree program? List the first name, middle name, last name. => ", "response": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Degree_Programs AS T2 ON T1.student_id = T2.degree_program_id WHERE T2.degree_summary_name LIKE \"%Bachelor%\""}
{"question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat campuses are located in Chico? => SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"\nWhat are the different first names and highest degree attained for professors teaching in the Computer Information Systems department? => SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'\nWhat are the names and years released for the movies with the top 3 highest ratings? => SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\nSort the company names in descending order of the company's market value. => SELECT name FROM Companies ORDER BY Market_Value_billion DESC\nWhich policy type has the most records in the database? => SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\nWhat are the first, middle, and last names for everybody enrolled in a Bachelors program? => ", "response": "SELECT first_name, middle_name, last_name FROM Students \nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name = 'Bachelors'"}
{"question": "Find the kind of program which most number of students are enrolled in?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the names of the scientists, and how many projects are each of them working on? => SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name\nWhat is the maximum, minimum and average years spent working on a school bus? => SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus\nWhat are the maximum and minimum number of transit passengers of all aiports. => SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport\nFind the average number of customers cross all banks. => SELECT avg(no_of_customers) FROM bank\nTell me the price ranges for all the hotels. => SELECT price_range FROM HOTELS\nFind the kind of program which most number of students are enrolled in? => ", "response": "SELECT T1.degree_summary_name, COUNT(*) AS enrolment_count \nFROM degree_programs AS T1 \nJOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_summary_name \nORDER BY enrolment_count DESC \nLIMIT 1"}
{"question": "What is the degree summary name that has the most number of students enrolled?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nHow many credit cards does customer Blanche Huels have? => SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"\nShow names of companies and that of employees in descending order of number of years working for that employee. => SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working\nList member names and their party names. => SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\nWhat are the names of all districts with a city area greater than 10 or have more than 100000 people living there? => SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000\nWhat is the average number of customers across banks in the state of Utah? => SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\nWhat is the degree summary name that has the most number of students enrolled? => ", "response": "SELECT T3.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Degree_Programs AS T3 ON T2.degree_summary_name = T3.degree_summary_name GROUP BY T3.degree_summary_name ORDER BY COUNT(DISTINCT T1.student_id) DESC LIMIT 1"}
{"question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the name and age for all male people who don't have a wedding. => SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)\nWhat student id corresponds to the oldest student? => SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)\ndisplay the department name, city, and state province for each department. => SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id\nList all pilot names in ascending alphabetical order. => SELECT Name FROM pilot ORDER BY Name ASC\nWhat is the id and last name of the driver who participated in the most races after 2010? => SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\nFind the program which most number of students are enrolled in. List both the id and the summary. => ", "response": "SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id = (SELECT degree_program_id FROM Student_Enrollment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)"}
{"question": "What is the program id and the summary of the degree that has the most students enrolled?", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nwhat is the average number of factories and maximum number of shops for manufacturers that opened before 1990. => SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990\nWhat is average age of male for different job title? => SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job\nFind the name and country of origin for all artists who have release at least one song of resolution above 900. => SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1\nFind the name of accounts whose checking balance is below the average checking balance. => SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\nWhat are the years of opening for tracks with seating between 4000 and 5000? => SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\nWhat is the program id and the summary of the degree that has the most students enrolled? => ", "response": "SELECT T1.degree_program_id, T1.degree_summary_description \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_program_id \nORDER BY COUNT(T2.student_enrolment_id) DESC \nLIMIT 1"}
{"question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the description of transaction type with code \"PUR\". => SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"\nWhat are the names of reviewers who had rated 3 star and 4 star? => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4\nFind the first and last name of the faculty who is involved in the largest number of activities. => SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\nShow the prices of publications whose publisher is either \"Person\" or \"Wiley\" => SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\nHow many problems does the product with the most problems have? List the number of the problems and product name. => SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1\nWhich student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. => ", "response": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS num_enrollments\nFROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nORDER BY num_enrollments DESC\nLIMIT 1"}
{"question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the number of courses provided in each semester and year. => SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\nWhat is the description of document type 'Paper'? => SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";\nHow many students who are female are allergic to milk or eggs? => SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"\nWhat are the ids of documents which don't have expense budgets? => SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses\nWhat is the id and last name of the driver who participated in the most races after 2010? => SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\nWhat is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? => ", "response": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, count(*) as num_of_enrolments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_of_enrolments DESC LIMIT 1"}
{"question": "Which semesters do not have any student enrolled? List the semester name.", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the unique ids of those departments where any manager is managing 4 or more employees. => SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\nFind the busiest destination airport that runs most number of routes in China. => SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\nFind the titles of items whose rating is higher than the average review rating of all items. => SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\nFind the name of dorms only for female (F gender). => SELECT dorm_name FROM dorm WHERE gender  =  'F'\nList the names of all distinct wines in alphabetical order. => SELECT DISTINCT Name FROM WINE ORDER BY Name\nWhich semesters do not have any student enrolled? List the semester name. => ", "response": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)"}
{"question": "What is the name of the semester with no students enrolled?", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFor each submission, find its author and acceptance result. => SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID\nHow many team franchises are active, with active value 'Y'? => SELECT count(*) FROM team_franchise WHERE active = 'Y';\nReturn the title and inventory id of the film that is rented most often. => SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1\nWhat is the number of routes operated by the airline American Airlines whose destinations are in Italy? => SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\nwhat is the GDP of the city with the largest population. => SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1\nWhat is the name of the semester with no students enrolled? => ", "response": "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)"}
{"question": "What are all the course names of the courses which ever have students enrolled in?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the number of projects. => SELECT count(*) FROM Projects\nwhich poll source does the highest oppose rate come from? => SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1\nFind the first name of students living in city PHL whose age is between 20 and 25. => SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25\nShow the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\" => SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\nShow all the locations where no cinema has capacity over 800. => SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800\nWhat are all the course names of the courses which ever have students enrolled in? => ", "response": "SELECT DISTINCT course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id"}
{"question": "What are the names of all courses that have some students enrolled?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nHow many employees live in Georgia? => SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";\nWhat are the names and years of all races that had a driver with the last name Lewis? => SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\nWhat are the names of enzymes who does not produce 'Heme'? => SELECT name FROM enzyme WHERE product != 'Heme'\nWhat are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? => SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\nWhat is the first and last name of all students who play Football or Lacrosse? => SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"\nWhat are the names of all courses that have some students enrolled? => ", "response": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses);"}
{"question": "What's the name of the course with most number of enrollments?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nCount the number of characteristics of the 'flax' product. => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"\nWhat are the names of all the media types? => SELECT name FROM media_types;\nWhat are the first names for all faculty professors, ordered by first name? => SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname\nWhat is the channel code and contact number of the customer contact channel that was active for the longest time? => SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)\nWhat are the first names and department numbers for employees with last name McEwen? => SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'\nWhat's the name of the course with most number of enrollments? => ", "response": "SELECT course_name FROM courses AS t1 JOIN student_enrollment_courses AS t2 ON t1.course_id  =  t2.course_id GROUP BY t1.course_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"question": "What is the name of the course with the most students enrolled?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the name of physicians who are affiliated with both Surgery and Psychiatry departments. => SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'\nFind the number of papers published by the institution \"University of Pennsylvania\". => SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"\nWhat is the highest elevation of an airport in the country of Iceland? => SELECT max(elevation) FROM airports WHERE country  =  'Iceland'\nShow the season, the player, and the name of the team that players belong to. => SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id\nWhat are the positions and teams of pilots? => SELECT POSITION ,  Team FROM pilot\nWhat is the name of the course with the most students enrolled? => ", "response": "SELECT course_name, COUNT(student_enrolment_id) AS enrolment_count FROM student_enrolment_courses JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_name ORDER BY enrolment_count DESC LIMIT 1"}
{"question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nReturn the address and email of the customer with the first name Linda. => SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'\nWhat are the dates with a maximum temperature higher than 85? => SELECT date FROM weather WHERE max_temperature_f  >  85\nWhat is the storm name and max speed which affected the greatest number of regions? => SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1\nWhat is the average fee for a CSU campus in the year of 2005? => SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005\nWhat are the crime rates of counties sorted by number of offices ascending? => SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC\nFind the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. => ", "response": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrollment)"}
{"question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nList the total points of gymnasts in descending order of floor exercise points. => SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\nReturn the different nominees of musicals that have an award that is not the Tony Award. => SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\nGive me a list of names and years of races that had any driver whose forename is Lewis? => SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\nList all church names in descending order of opening date. => SELECT name FROM church ORDER BY open_date DESC\nFind all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa. => SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'\nWhat are the last name of the students who live in North Carolina but have not registered in any degree programs? => ", "response": "SELECT last_name FROM students WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment)"}
{"question": "Show the date and id of the transcript with at least 2 course results.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFor each product which has problems, what are the number of problems and the product id? => SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id\nWhat are the names of all the songs whose album is under the label of \"Universal Music Group\"? => SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"\nFind the name and address of the department that has the highest number of students. => SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1\nShow different nationalities along with the number of hosts of each nationality. => SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality\nHow many addresses are there in country USA? => SELECT count(*) FROM addresses WHERE country  =  'USA'\nShow the date and id of the transcript with at least 2 course results. => ", "response": "SELECT T1.transcript_date ,  T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2"}
{"question": "What is the date and id of the transcript with at least 2 courses listed?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the names of the regions in alphabetical order? => SELECT region_name FROM region ORDER BY region_name\nWhat are the names of the colleges that are larger than at least one college in Florida? => SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')\nWhat is the code of each role and the number of employees in each role? => SELECT role_code ,  count(*) FROM Employees GROUP BY role_code\nHow many tests have result \"Fail\"? => SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\nHow many rooms in total are there in the apartments in the building with short name \"Columbus Square\"? => SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"\nWhat is the date and id of the transcript with at least 2 courses listed? => ", "response": "SELECT transcript_id, transcript_date FROM Transcripts WHERE (SELECT count(*) FROM Transcript_Contents WHERE Transcripts.transcript_id = Transcript_Contents.transcript_id) >= 2"}
{"question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhich programs' origins are not \"Beijing\"? Give me the program names. => SELECT name FROM program WHERE origin != 'Beijing'\nWhich skill is used in fixing the most number of faults? List the skill id and description. => SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\nHow many users are logged in? => SELECT count(*) FROM users WHERE user_login  =  1\nReturn the description and unit of measurement for products in the 'Herbs' category. => SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"\nWhat type of game is Call of Destiny? => SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"\nWhat is the phone number of the man with the first name Timmothy and the last name Ward? => ", "response": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'"}
{"question": "What is the mobile phone number of the student named Timmothy Ward ?", "sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind how many different affiliation types there are. => SELECT count(DISTINCT affiliation) FROM university\nWhat are the ids of all students who played video games and sports? => SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games\nCount the number of bank branches. => SELECT count(*) FROM bank\nShow all distinct product categories along with the number of mailshots in each category. => SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category\nWhat are the product id and product type of the cheapest product? => SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1\nWhat is the mobile phone number of the student named Timmothy Ward ? => ", "response": "I cannot provide the SQL query to answer this question as the 'Students' table in the given database schema does not have a 'mobile_phone_number' column."}
{"question": "Who is the first student to register? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat is the area for the appelation which produced the most wines prior to 2010? => SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1\nShow the minimum, maximum, and average age for all people. => SELECT min(age) ,  max(age) ,  avg(age) FROM people\nHow many times did Boston Red Stockings lose in 2009 postseason? => SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;\nWhat are the first names of the faculty members playing both Canoeing and Kayaking? => SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'\nWho is the youngest employee in the company? List employee's first and last name. => SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;\nWho is the first student to register? List the first name, middle name and last name. => ", "response": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;"}
{"question": "What is the first, middle, and last name of the first student to register?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"? => SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"\nWhat are the names and ids of customers whose address contains TN? => SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\nWhat are the unique names of all race held between 2014 and 2017? => SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\nReturn the average gross sales in dollars across all films. => SELECT avg(Gross_in_dollar) FROM film\nFind the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. => SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\nWhat is the first, middle, and last name of the first student to register? => ", "response": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}
{"question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhich major has least number of students? List the major and the number of students. => SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;\nWhat are the naems of all the projects, and how many scientists were assigned to each of them? => SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name\nWhich programs' origins are not \"Beijing\"? Give me the program names. => SELECT name FROM program WHERE origin != 'Beijing'\nWhat is the first name and last name of the student who have most number of sports? => SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1\nShow the names of customers who have both an order in completed status and an order in part status. => SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'\nWho is the earliest graduate of the school? List the first name, middle name and last name. => ", "response": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IN (SELECT MIN(date_left) FROM Students) ;"}
{"question": "What is the first, middle, and last name of the earliest school graduate?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the last names of all the teachers that teach GELL TAMI. => SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"\nWhat is the average price for wines not produced in Sonoma county? => SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')\nFind the average credit score of the customers who have some loan. => SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\nFind the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\". => SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"\nShow the average amount of transactions for different investors. => SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id\nWhat is the first, middle, and last name of the earliest school graduate? => ", "response": "SELECT first_name, middle_name, last_name FROM students WHERE date_left = (SELECT MIN(date_left) FROM students WHERE date_left IS NOT NULL)"}
{"question": "Whose permanent address is different from his or her current address? List his or her first name.", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nReturn the code of the document type that is most common. => SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1\nWhat is the name of the department with the most students minoring in it? => SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1\nWhat are the ages of the gymnasts, ordered descending by their total points? => SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC\nShow ids for all aircrafts with more than 1000 distance. => SELECT aid FROM Aircraft WHERE distance  >  1000\nList the vehicle flight number, date and pilot of all the flights, ordered by altitude. => SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC\nWhose permanent address is different from his or her current address? List his or her first name. => ", "response": "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id"}
{"question": "What is the first name of the student whose permanent address is different from his or her current one?", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the total hours of all projects. => SELECT sum(hours) FROM projects\nWhat are the first name and major of the students who are able to consume soy? => SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\nWhat are the names and ages of every person who is a friend of both Dan and Alice? => SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\nHow many artists are from Bangladesh? => SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\nWhat are the id of students who registered courses or attended courses? => SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance\nWhat is the first name of the student whose permanent address is different from his or her current one? => ", "response": "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id"}
{"question": "Which address holds the most number of students currently? List the address id and all lines.", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat college has a student who successfully made the team in the role of a goalie? => SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'\nList the name of the aircraft that has been named winning aircraft the most number of times. => SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1\nWhat are full names and salaries of employees working in the city of London? => SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'\nList every individual's first name, middle name and last name in alphabetical order by last name. => SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name\nWhat is the shop name corresponding to the shop that opened in the most recent year? => SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1\nWhich address holds the most number of students currently? List the address id and all lines. => ", "response": "SELECT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details \nFROM Addresses \nWHERE address_id IN (\n    SELECT current_address_id FROM Students \n    UNION \n    SELECT permanent_address_id FROM Students\n    ) \nGROUP BY address_id \nORDER BY COUNT(*) DESC \nLIMIT 1"}
{"question": "What is the id, line 1, and line 2 of the address with the most students?", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat is the name of the perpetrator with the biggest weight. => SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1\nList the names of pilots in ascending order of rank. => SELECT Pilot_name FROM pilot ORDER BY Rank ASC\nWhat are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841? => SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)\nWhat are the names and revenues of the companies with the highest revenues in each headquarter city? => SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter\nWhat is the id of the appointment that started most recently? => SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1\nWhat is the id, line 1, and line 2 of the address with the most students? => ", "response": "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 \nFROM Addresses \nJOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id \nGROUP BY Addresses.address_id \nORDER BY COUNT(*) DESC \nLIMIT 1"}
{"question": "On average, when were the transcripts printed?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nList the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born. => SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'\nList the names of wrestlers in descending order of days held. => SELECT Name FROM wrestler ORDER BY Days_held DESC\nWhat are the names of customers who have taken both Mortgage and Auto loans? => SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'\nWhat is the title of the course with Differential Geometry as a prerequisite? => SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\nWhat are the enrollments of schools whose denomination is not \"Catholic\"? => SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"\nOn average, when were the transcripts printed? => ", "response": "SELECT AVG(transcript_date) FROM transcripts"}
{"question": "What is the average transcript date?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed? => SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details\nFind the names of users who did not leave any review. => SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\nList the names of editors in ascending order of age. => SELECT Name FROM editor ORDER BY Age ASC\nShow the maximum and minimum share count of different transaction types. => SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code\nFind the name of the products that have the color description \"red\" and have the characteristic name \"fast\". => SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"\nWhat is the average transcript date? => ", "response": "SELECT AVG(transcript_date) FROM Transcripts"}
{"question": "When is the first transcript released? List the date and details.", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nHow many project staff worked as leaders or started working before '1989-04-24 23:51:54'? => SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'\nWhich channels broadcast both in the morning and at night? Give me the channel names. => SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'\nShow the name of the shop that has the most kind of devices in stock. => SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the names and number of hours spent training for each player who trains for less than 1500 hours? => SELECT pName ,  HS FROM Player WHERE HS  <  1500\nList the total points of gymnasts in descending order of floor exercise points. => SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\nWhen is the first transcript released? List the date and details. => ", "response": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}
{"question": "What is the earliest date of a transcript release, and what details can you tell me?", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat is the booking status code of the apartment with apartment number \"Suite 634\"? => SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"\nHow many tracks are in each genre? => SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;\nWhat is the type of vocables that appears most frequently? => SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nHow many professors are in the accounting dept? => SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"\nHow many music festivals have had each kind of result, ordered descending by count? => SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC\nWhat is the earliest date of a transcript release, and what details can you tell me? => ", "response": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}
{"question": "How many transcripts are released?", "sql": "SELECT count(*) FROM Transcripts", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the location code, the starting date and ending data in that location for all the documents. => SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations\nShow the name and location of track with 1 race. => SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1\nHow many churches opened before 1850 are there? => SELECT count(*) FROM Church WHERE Open_Date  <  1850\nFind the details of the shops that can be reached by walk. => SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"\nWhat are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment? => SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"\nHow many transcripts are released? => ", "response": "It is not clear which table in the database 'student_transcripts_tracking' contains information about released transcripts. Please provide more details or information for me to assist you better."}
{"question": "How many transcripts are listed?", "sql": "SELECT count(*) FROM Transcripts", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the names of all colleges that have two or more players? => SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2\nWhat is the year and semester with the most courses? => SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\nFind the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order. => SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC\nWhat activities do we have? => SELECT activity_name FROM Activity\nShow the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme. => SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC\nHow many transcripts are listed? => ", "response": "SELECT COUNT(*) FROM Transcripts"}
{"question": "What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nHow many different services are provided by all stations? => SELECT count(DISTINCT services) FROM station\nWhat are the coupon amount of the coupons owned by both good and bad customers? => SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'\nHow many candidates are there? => SELECT count(*) FROM candidate\nWhat are the names and years of the movies that has the top 3 highest rating star? => SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\nWhat are the departure and arrival dates of all flights from LA to Honolulu? => SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\nWhat is the last transcript release date? => ", "response": "SELECT MAX(transcript_date) FROM Transcripts"}
{"question": "When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the names of the ships that are not involved in any missions? => SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)\nWhat is the total number of people who could stay in the modern rooms in this inn? => SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\nWhat are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape? => SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\nHow many distinct hometowns did these people have? => SELECT count(DISTINCT Hometown) FROM people\nList the themes of parties in ascending order of number of hosts. => SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC\nWhen was the last transcript released? => ", "response": "SELECT MAX(transcript_date) FROM Transcripts"}
{"question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow all ages and corresponding number of students. => SELECT age ,  count(*) FROM Student GROUP BY age\nFind the first names and offices of all instructors who have taught some course and also find the course description. => SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num\nList the name and assets of each company in ascending order of company name. => SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\nShow the most common nationality of pilots. => SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\nShow the top 3 most common colleges of players in match seasons. => SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3\nHow many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. => ", "response": "SELECT student_course_id, COUNT(transcript_id) AS enrolment_count FROM Transcript_Contents GROUP BY student_course_id HAVING enrolment_count = MAX(enrolment_count)"}
{"question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa? => SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'\nWhat are the names of the albums that have more than 10 tracks? => SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;\nList the order dates of all the bookings. => SELECT Order_Date FROM BOOKINGS\nFind all details for each swimmer. => SELECT * FROM swimmer\nList all schools and their nicknames in the order of founded year. => SELECT school ,  nickname FROM university ORDER BY founded\nWhat is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? => ", "response": "SELECT student_course_id, COUNT(course_id) AS course_count FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY course_count DESC LIMIT 1"}
{"question": "Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nReport the first name and last name of all the students. => SELECT DISTINCT firstname ,  lastname FROM list\nWhich job titles correspond to jobs with salaries over 9000? => SELECT job_title FROM jobs WHERE min_salary  >  9000\nFind the female friends of Alice. => SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'\nWhat are the names of the reviewers who have rated a movie more than 3 stars before? => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\nFind the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010. => SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";\nShow the date of the transcript which shows the least number of results, also list the id. => ", "response": "SELECT transcript_id, transcript_date \nFROM Transcripts \nWHERE transcript_id IN \n    (SELECT transcript_id \n    FROM Transcript_Contents \n    GROUP BY transcript_id \n    ORDER BY COUNT(*) ASC\n    LIMIT 1)"}
{"question": "What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the names of the services that have never been used? => SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id\nWhat are the lengths and heights of roller coasters? => SELECT LENGTH ,  Height FROM roller_coaster\nWhat type of game is Call of Destiny? => SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"\nWhat is the id and salary of the employee named Mark Young? => SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\nWhich major has most number of students? => SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1\nWhat is the date and id of the transcript with the least number of results? => ", "response": "SELECT transcript_id, transcript_date FROM Transcripts \nWHERE transcript_id NOT IN (SELECT transcript_id FROM Transcript_Contents)\nORDER BY transcript_date ASC LIMIT 1"}
{"question": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow all allergies with number of students affected. => SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\nShow the product ids and the number of unique orders containing each product. => SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\nWhat is the id of the trip that started from the station with the highest dock count? => SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1\nWhat is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds? => SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3\nWhich schools do not have any player? Give me the school locations. => SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)\nFind the semester when both Master students and Bachelor students got enrolled in. => ", "response": "SELECT s.semester_name \nFROM semesters s \nJOIN student_enrolment se ON se.semester_id = s.semester_id \nJOIN degree_programs dp ON dp.degree_program_id = se.degree_program_id \nWHERE dp.degree_summary_name IN ('Master', 'Bachelor') \nGROUP BY s.semester_name \nHAVING COUNT(DISTINCT dp.degree_summary_name) = 2"}
{"question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat is the first and last name of the oldest employee? => SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1\nShow all countries and the number of people from each country. => SELECT country ,  count(*) FROM people GROUP BY country\nWhat are the names and years of the movies that has the top 3 highest rating star? => SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\nFind the names of courses taught by the tutor who has personal name \"Julio\". => SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"\nWhat are all the movies rated as R? List the titles. => SELECT title FROM film WHERE rating  =  'R'\nWhat is the id of the semester that had both Masters and Bachelors students enrolled? => ", "response": "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  IN  (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name  IN  ('Masters', 'Bachelors')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id)  =  2"}
{"question": "How many different addresses do the students currently live?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nShow the 3 counties with the smallest population. => SELECT County_name FROM county ORDER BY Population ASC LIMIT 3\nShow customer ids who don't have an account. => SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts\nWhat are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment? => SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"\nWhat are the id of students who registered course 301? => SELECT student_id FROM student_course_attendance WHERE course_id  =  301\nWhich 3 wineries produce the most wines made from white grapes? => SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3\nHow many different addresses do the students currently live? => ", "response": "SELECT COUNT(DISTINCT current_address_id) FROM students"}
{"question": "What are the different addresses that have students living there?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the name of the most expensive product. => SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1\nWhat is the phone number of the performer Ashley? => SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"\nPlease show the categories of the music festivals with count more than 1. => SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1\nWhat are the region names affected by the storm with a number of deaths of least 10? => SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10\nList the names of perpetrators in descending order of the year. => SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC\nWhat are the different addresses that have students living there? => ", "response": "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details\nFROM Addresses\nWHERE address_id IN (SELECT current_address_id FROM Students UNION SELECT permanent_address_id FROM Students)"}
{"question": "List all the student details in reversed lexicographical order.", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nFind the first name of students living in city PHL whose age is between 20 and 25. => SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25\nWhat are the teams with the most technicians? => SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the names of all the clubs ordered in descending alphabetical order? => SELECT name FROM club ORDER BY name DESC\nShow all the information about election. => SELECT * FROM election\nWhat is the type of allergy Cat? => SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"\nList all the student details in reversed lexicographical order. => ", "response": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC"}
{"question": "What other details can you tell me about students in reverse alphabetical order?", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the maximum and minimum number of silver medals for all the clubs? => SELECT max(Silver) ,  min(Silver) FROM club_rank\nWhat are the names of scientists who have not been assigned a project? => SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\nWhat are the names of companies whose headquarters are not \"USA\"? => SELECT name FROM Companies WHERE Headquarters != 'USA'\nFind the types and details for all premises and order by the premise type. => SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type\nFind the last names of students studying in room 111. => SELECT lastname FROM list WHERE classroom  =  111\nWhat other details can you tell me about students in reverse alphabetical order? => ", "response": "SELECT * FROM Students ORDER BY last_name DESC"}
{"question": "Describe the section h.", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there? => SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100\nWhat are the names of customers with a higher checking balance than savings balance? => SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\nFind the cities corresponding to employees who help customers with the postal code 70174. => SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\nSelect all the data from the products and each product's manufacturer. => SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code\nWhat is the description for the budget type with code ORG? => SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\nDescribe the section h. => ", "response": "I'm sorry, I cannot perform this task as the given database 'student_transcripts_tracking' does not have a table named 'section h'. Please provide more information about the table you are referring to."}
{"question": "What is the description for the section named h?", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat is the id and name of the browser that is compatible with the most web accelerators? => SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nWhat is the name and hours for the project which has the most scientists assigned to it? => SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\nList the name and number of followers for each user, and sort the results by the number of followers in descending order. => SELECT name ,  followers FROM user_profiles ORDER BY followers DESC\nFind the last and first name of students who are playing Football or Lacrosse. => SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"\nWhat is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'? => SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'\nWhat is the description for the section named h? => ", "response": "SELECT section_description FROM Sections WHERE section_name = 'h'"}
{"question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nCount the total number of bookings made. => SELECT count(*) FROM BOOKINGS\nHow many products have prices of at least 180? => SELECT count(*) FROM products WHERE price >= 180\nWhat is the address of each course author or tutor? => SELECT address_line_1 FROM Course_Authors_and_Tutors\nHow many clubs are there? => SELECT count(*) FROM club\nGive the class of races that is most common. => SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1\nFind the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . => ", "response": "SELECT first_name FROM Students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582' AND permanent_address_id = address_id"}
{"question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "prompt": "Given a database 'student_transcripts_tracking' have 11 tables named 'Addresses', 'Courses', 'Departments', 'Degree_Programs', 'Sections', 'Semesters', 'Students', 'Student_Enrolment', 'Student_Enrolment_Courses', 'Transcripts', 'Transcript_Contents'. Addresses tbl have columns: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'. Courses tbl have columns: 'course_id', 'course_name', 'course_description', 'other_details'. Departments tbl have columns: 'department_id', 'department_name', 'department_description', 'other_details'. Degree_Programs tbl have columns: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'. Sections tbl have columns: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'. Semesters tbl have columns: 'semester_id', 'semester_name', 'semester_description', 'other_details'. Students tbl have columns: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'. Student_Enrolment tbl have columns: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'. Student_Enrolment_Courses tbl have columns: 'student_course_id', 'course_id', 'student_enrolment_id'. Transcripts tbl have columns: 'transcript_id', 'transcript_date', 'other_details'. Transcript_Contents tbl have columns: 'student_course_id', 'transcript_id'. \nTranslate text to SQL: \nWhat is the receipt date of the document with id 3? => SELECT receipt_date FROM Documents WHERE document_id = 3;\nWhat is the attribute data type of the attribute with name \"Green\"? => SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"\nFind the name of the department that has no students minored in? => SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO\nCount the number of patients who stayed in room 112. => SELECT count(patient) FROM stay WHERE room  =  112\nFind the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"? => SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1\nWhat are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? => ", "response": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'"}
{"question": "List the title of all cartoons in alphabetical order.", "sql": "SELECT Title FROM Cartoon ORDER BY title", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nShow the tourist attractions visited by the tourist whose detail is 'Vincent'. => SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"\nWhat is the name of the department with an instructure who has a name like 'Soisalon'? => SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'\nWhat are the names of the directors who made exactly one movie excluding director NULL? => SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1\nWhat is the title, phone number and hire date for the employee named Nancy Edwards? => SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\nList all club names in descending alphabetical order. => SELECT name FROM club ORDER BY name DESC\nList the title of all cartoons in alphabetical order. => ", "response": "SELECT Title FROM Cartoon ORDER BY Title ASC"}
{"question": "What are the titles of the cartoons sorted alphabetically?", "sql": "SELECT Title FROM Cartoon ORDER BY title", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the names of captains, sorted by age descending? => SELECT name FROM captain ORDER BY age DESC\nHow many documents can one grant have at most? List the grant id and number. => SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1\nWhat are the advisors => SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2\nReturn the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'. => SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\nList all document ids and receipt dates of documents. => SELECT document_id ,  receipt_date FROM Documents;\nWhat are the titles of the cartoons sorted alphabetically? => ", "response": "SELECT Title FROM Cartoon ORDER BY Title ASC"}
{"question": "List all cartoon directed by \"Ben Jones\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat is the number of invoices and total money billed in them from CA? => SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";\nWhat is the list of school locations sorted in descending order of school foundation year? => SELECT LOCATION FROM school ORDER BY Founded DESC\nWhich cities have lower temperature in March than in July and have been once host cities? => SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\nWhat is the sex of the candidate who had the highest unsure rate? => SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\nWhat are the names of festivals held in year 2007? => SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007\nList all cartoon directed by \"Ben Jones\". => ", "response": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"}
{"question": "What are the names of all cartoons directed by Ben Jones?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. => SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\nShow the draft pick numbers and draft classes of players whose positions are defenders. => SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\nHow many papers are published by the institution \"Tokohu University\"? => SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"\nFind all the name of documents without any sections. => SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\nReturn the amount of the largest payment. => SELECT amount FROM payment ORDER BY amount DESC LIMIT 1\nWhat are the names of all cartoons directed by Ben Jones? => ", "response": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'"}
{"question": "How many cartoons were written by \"Joseph Kuhr\"?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nShow the ids of all employees who don't destroy any document. => SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\nFind the names of stadiums which have never had any event. => SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)\nFind the names of channels that are not owned by CCTV. => SELECT name FROM channel WHERE OWNER != 'CCTV'\nList the state in the US with the most invoices. => SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;\nFind the titles of all the papers written by \"Aaron Turon\". => SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"\nHow many cartoons were written by \"Joseph Kuhr\"? => ", "response": "I'm sorry, I cannot answer this question as there is no \"written_by\" column in the Cartoon table provided."}
{"question": "What is the number of cartoones written by Joseph Kuhr?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the product type whose average price is higher than the average price of all products. => SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)\nGive the full name and phone of the customer who has the account name 162. => SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\nWhat are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top? => SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2\nHow many games in total did team Boston Red Stockings attend from 2000 to 2010? => SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;\nWhat is the name of the bank branch with the greatest number of customers? => SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1\nWhat is the number of cartoones written by Joseph Kuhr? => ", "response": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'"}
{"question": "list all cartoon titles and their directors ordered by their air date", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat is the last name of every student who is either female or living in a city with the code BAL or male and under 20? => SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20\nFind the name of different colleges involved in the tryout in alphabetical order. => SELECT DISTINCT cName FROM tryout ORDER BY cName\nFind the checking balance of the accounts whose savings balance is higher than the average savings balance. => SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\nFind the name and position of physicians who prescribe some medication whose brand is X? => SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"\nFind all the cities that have 2 to 4 parks. => SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\nlist all cartoon titles and their directors ordered by their air date => ", "response": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC"}
{"question": "What is the name and directors of all the cartoons that are ordered by air date?", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the total capacity of all dorms. => SELECT sum(student_capacity) FROM dorm\nWhich major has between 2 and 30 number of students? List major and the number of students. => SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;\nWhat instrument is used the most? => SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1\nWhat is the title of the album that was released by the artist whose name has the phrase 'Led'? => SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'\nWhat is the name of the department htat has no students minoring in it? => SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO\nWhat is the name and directors of all the cartoons that are ordered by air date? => ", "response": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;"}
{"question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nHow many songs are there? => SELECT count(*) FROM Songs\nWhat are the names of the storms that affected both the regions of Afghanistan and Albania? => SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'\nShow the most common country across members. => SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the address of employee Nancy Edwards? => SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\nWhat are the titles and directors of the films were never presented in China? => SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')\nList the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". => ", "response": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"}
{"question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the public schools and what are their locations? => SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'\nFind the number of people whose age is greater than all engineers. => SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\nList the vehicle flight number, date and pilot of all the flights, ordered by altitude. => SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC\nWhat is the name of the person whose age is below 30? => SELECT name FROM Person WHERE age  <  30\nWhat are the top 10 customers' first and last names with the highest gross sales, and also what are the sales? => SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;\nWhat are the titles of all cartoons directed by Ben Jones or Brandon Vietti? => ", "response": "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')"}
{"question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the description of the claim status \"Open\". => SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\nShow all countries and the number of people from each country. => SELECT country ,  count(*) FROM people GROUP BY country\nWhat is the total number of hours per week and number of games played by students under 20? => SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20\nWhat is the id of the trip that has the shortest duration? => SELECT id FROM trip ORDER BY duration LIMIT 1\nReturn the name of the organization which has the most contact individuals. => SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\nWhich country has the most of TV Channels? List the country and number of TV Channels it has. => ", "response": "SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1"}
{"question": "What is the country with the most number of TV Channels and how many does it have?", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nHow many document types are there? => SELECT count(*) FROM Ref_document_types\nFind the average age of students living in each dorm and the name of dorm. => SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name\nFind all the forenames of distinct drivers who was in position 1 as standing and won? => SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1\nList all media types. => SELECT name FROM media_types;\nFor each county, find the name of the county and the number of delegates from that county. => SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\nWhat is the country with the most number of TV Channels and how many does it have? => ", "response": "SELECT Country, COUNT(*) as num_channels \nFROM TV_Channel \nGROUP BY Country \nORDER BY num_channels DESC \nLIMIT 1"}
{"question": "List the number of different series names and contents in the TV Channel table.", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nList the name, origin and owner of each program. => SELECT name ,  origin ,  OWNER FROM program\nGive the name of each department and the number of employees in each. => SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name\nWhat are the gender and occupation of players? => SELECT Gender ,  Occupation FROM player\nWhat are the names of products that are not 'white' in color and are not measured by the unit 'Handful'? => SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"\nHow many students attend course English? => SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\nList the number of different series names and contents in the TV Channel table. => ", "response": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel"}
{"question": "How many different series and contents are listed in the TV Channel table?", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the states with colleges that have enrollments less than the some other college? => SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)\nFor each zip code, what is the average mean temperature for all dates that start with '8'? => SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code\nWhat are the names of all movies that received 3 or 4 stars? => SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4\nWhat are the name, id and the corresponding number of visits for each  tourist attraction? => SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID\nFind the number of dorms that have some amenity. => SELECT count(DISTINCT dormid) FROM has_amenity\nHow many different series and contents are listed in the TV Channel table? => ", "response": "SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_content FROM TV_Channel"}
{"question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the names of artists that do not have any albums. => SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\nWhat is the average rating and resolution of all bangla songs? => SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"\nWhat are the names of customers who have purchased both products Latte and Americano? => SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'\nWhat is the total amount of money loaned by banks in New York state? => SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'\nRetrieve the list of all cities. => SELECT DISTINCT city FROM addresses\nWhat is the content of TV Channel with serial name \"Sky Radio\"? => ", "response": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}
{"question": "What is the content of the series Sky Radio?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nShow the name, street address, and number of floors for all buildings ordered by the number of floors. => SELECT name ,  street_address ,  floors FROM building ORDER BY floors\nShow the statement id and the statement detail for the statement with most number of accounts. => SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1\nWhat are the names of all aircrafts that have won a match at least twice? => SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2\nWhat is the first and last name of all students who are younger than average? => SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)\nWhat is the total number of companies? => SELECT count(*) FROM company\nWhat is the content of the series Sky Radio? => ", "response": "It is not possible to answer this question with the given tables as there is no series named \"Sky Radio\" in any of the tables."}
{"question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are all the instruments used? => SELECT DISTINCT instrument FROM Instruments\nHow many assets does each maintenance contract contain? List the number and the contract id. => SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id\nFind the names and publication dates of all catalogs that have catalog level number greater than 5. => SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5\nWhat is the id and last name of the driver who participated in the most races after 2010? => SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\nWho are the players that have names containing the letter a? => SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'\nWhat is the Package Option of TV Channel with serial name \"Sky Radio\"? => ", "response": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'"}
{"question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nList the name of all rooms sorted by their prices. => SELECT roomName FROM Rooms ORDER BY basePrice;\nShow all the distinct president votes made on 08/30/2015. => SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"\nWhat is the type of the document whose description starts with the word 'Initial'? => SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'\nWhat are the state and country of all the cities that have post codes starting with 4.\\ => SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"\nShow all titles and their instructors' names for courses in 2008, in alphabetical order by title. => SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title\nWhat are the Package Options of the TV Channels whose series names are Sky Radio? => ", "response": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'"}
{"question": "How many TV Channel using language English?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the id and address of the shops whose score is below the average score. => SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)\nWhat are the different region names, ordered by labels? => SELECT DISTINCT region_name FROM region ORDER BY Label\nWhat is the name of the country with the most number of home airlines? => SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1\nWhat are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates? => SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date\nWhat are the ids of all songs that have higher resolution of the average resolution in the modern genre? => SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")\nHow many TV Channel using language English? => ", "response": "SELECT COUNT(*) FROM TV_Channel WHERE Language = \"English\""}
{"question": "How many TV Channels use the English language?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the different product sizes? => SELECT DISTINCT product_size FROM Products\nHow many accounts have a savings balance above the average savings balance? => SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\nWhich authors have submitted to more than one workshop? => SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\nFor each origin, how many flights came from there? => SELECT origin ,  count(*) FROM Flight GROUP BY origin\nFind the name, checking balance and saving balance of all accounts in the bank. => SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\nHow many TV Channels use the English language? => ", "response": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'"}
{"question": "List the language used least number of TV Channel. List language and number of TV Channel.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the names of the tourist attractions that can be accessed by bus? => SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"\nShow the manager name for gas stations belonging to the ExxonMobil company. => SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'\nCompute the average price of all the products. => SELECT avg(price) FROM products\nWhat is the average and largest salary of all employees? => SELECT avg(salary) ,  max(salary) FROM Employee\nWhat are the titles of all movies that were not reviewed by Chris Jackson? => SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'\nList the language used least number of TV Channel. List language and number of TV Channel. => ", "response": "SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1"}
{"question": "What are the languages used by the least number of TV Channels and how many channels use it?", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat is the least popular kind of decor? => SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;\nCount the number of regions. => SELECT count(*) FROM region\nList the names of editors that are not on any journal committee. => SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\nWhat is the total number of residents for the districts with the 3 largest areas? => SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3\nWhat is the id and name of the employee with the highest salary? => SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1\nWhat are the languages used by the least number of TV Channels and how many channels use it? => ", "response": "SELECT Language, count(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;"}
{"question": "List each language and the number of TV Channels using it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhich people severed as governor most frequently? => SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1\nShow the team that have at least two technicians. => SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2\nWho are the players that have names containing the letter a? => SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'\nHow many bookings did each customer make? List the customer id, first name, and the count. => SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\nWho are the lieutenant governor and comptroller from the democratic party? => SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"\nList each language and the number of TV Channels using it. => ", "response": "SELECT Language, COUNT(*) AS Channels\nFROM TV_Channel\nGROUP BY Language"}
{"question": "For each language, list the number of TV Channels that use it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nHow many transactions correspond to each invoice number? => SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\nWhat is the country of the airport with the highest elevation? => SELECT country FROM airports ORDER BY elevation DESC LIMIT 1\nWhat are the names of directors who directed movies with 5 star rating? Also return the title of these movies. => SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5\nReturn the hometown that is most common among gymnasts. => SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the hometowns that are shared by at least two gymnasts? => SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\nFor each language, list the number of TV Channels that use it. => ", "response": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language"}
{"question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nReturn the characters for actors, ordered by age descending. => SELECT Character FROM actor ORDER BY age DESC\nList all names of courses with 1 credit? => SELECT CName FROM COURSE WHERE Credits  =  1\nWhat is the entry name of the most expensive catalog (in USD)? => SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1\nWhich film has the most copies in the inventory? List both title and id. => SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\nShow names of ships involved in a mission launched after 1928. => SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928\nWhat is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. => ", "response": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"The Rise of the Blue Beetle!\""}
{"question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat is the last name of the student who received an A in the class with the code 10018? => SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018\nShow the names of trains and locations of railways they are in. => SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID\nWhat are the names of tourist attraction that Alison visited but Rosalind did not visit? => SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"\nWhat are the first names of student who only took one course? => SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1\nWhat is the average enrollment of schools? => SELECT avg(Enrollment) FROM school\nWhat is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? => ", "response": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Title  =  \"The Rise of the Blue Beetle\""}
{"question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat is the first name, gpa and phone number of the top 5 students with highest gpa? => SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5\nWhat are the famous title of the artists associated with volumes with more than 2 weeks on top? => SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2\nWhat is the savings balance of the account belonging to the customer with the highest checking balance? => SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1\nHow many registed students do each course have? List course name and the number of their registered students? => SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id\nFind the average age of students who are living in the dorm with the largest capacity. => SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)\nList the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". => ", "response": "SELECT T3.Title FROM Cartoon AS T1 JOIN TV_series AS T2 ON T1.id = T2.id JOIN TV_Channel AS T3 ON T2.series_name = T3.series_name WHERE T3.series_name = \"Sky Radio\" AND T3.Content = \"Cartoon\""}
{"question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhich cities have 2 to 4 parks? => SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\nList all statement ids and statement details. => SELECT STATEMENT_ID ,  statement_details FROM Statements\nShow the flight number and distance of the flight with maximum price. => SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1\nWhat is the nickname of the employee named Janessa Sawayn? => SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\nWhat are the ids of all aircrafts that can cover a distance of more than 1000? => SELECT aid FROM Aircraft WHERE distance  >  1000\nWhat is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? => ", "response": "SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\";"}
{"question": "List the Episode of all TV series sorted by rating.", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nOn what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses? => SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"\nWhat is the maximum length in meters for the bridges and what are the architects' names? => SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id\nWhat are the total number of Domestic Passengers of airports that contain the word \"London\". => SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"\nList all employees in the circulation history of the document with id 1. List the employee's name. => SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;\nFind all information of all the products with a price between $60 and $120. => SELECT * FROM products WHERE price BETWEEN 60 AND 120\nList the Episode of all TV series sorted by rating. => ", "response": "SELECT Episode FROM TV_series ORDER BY Rating DESC"}
{"question": "What are all of the episodes ordered by ratings?", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFor each phone, show its names and total number of stocks. => SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name\nShow the authors who have submissions to more than one workshop. => SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\nShow the region name with at least two storms. => SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\nWhat are the names of all singers that are from the UK and released a song in English? => SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"\nFind the name of companies whose revenue is between 100 and 150. => SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150\nWhat are all of the episodes ordered by ratings? => ", "response": "SELECT episode_name FROM episodes ORDER BY rating DESC"}
{"question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFor each trip, return its ending station's installation date. => SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id\nWhat is the most common result of the music festival? => SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1\nWhat are all the movies rated as R? List the titles. => SELECT title FROM film WHERE rating  =  'R'\nShow the names of companies and of employees. => SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID\nFind the name and college of students whose decisions are yes in the tryout. => SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\nList top 3 highest Rating  TV series. List the TV series's Episode and Rating. => ", "response": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"}
{"question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nPlease list the name and id of all artists that have at least 3 albums in alphabetical order. => SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name\nWhat are the maximum and minimum age of students with major 600? => SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600\nWhich university is in Los Angeles county and opened after 1950? => SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950\nList all information about college sorted by enrollment number in the ascending order. => SELECT * FROM College ORDER BY enr\nWhat is the average gradepoint for students with the last name Smith? => SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"\nWhat are 3 most highly rated episodes in the TV series table and what were those ratings? => ", "response": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"}
{"question": "What is minimum and maximum share of TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat is the average duration in milliseconds of tracks that belong to Latin or Pop genre? => SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"\nWhich physicians are trained in procedures that are more expensive than 5000? => SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000\nWhat are the names of students and their respective departments, ordered by number of credits from least to greatest? => SELECT name ,  dept_name FROM student ORDER BY tot_cred\nWhat are the names of all female candidates in alphabetical order (sex is F)? => SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name\nCount the number of transactions. => SELECT count(*) FROM Financial_transactions\nWhat is minimum and maximum share of TV series? => ", "response": "SELECT MIN(Share), MAX(Share) FROM TV_series."}
{"question": "What is the maximum and minimum share for the TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the number and averaged salary of all instructors who are in the department with the highest budget. => SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1\nShow the facility codes of apartments with more than 4 bedrooms. => SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\nFor each start station id, what is its name, longitude and average duration of trips started there? => SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id\nFind the classrooms in which grade 4 is studying. => SELECT DISTINCT classroom FROM list WHERE grade  =  4\nWhat are the names of students who haven't taken any Biology courses? => SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')\nWhat is the maximum and minimum share for the TV series? => ", "response": "SELECT MAX(T1.Share), MIN(T1.Share) FROM TV_series AS T1"}
{"question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nList the name of tracks belongs to genre Rock or genre Jazz. => SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\nReturn the song in the volume that has spent the most weeks on top? => SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1\nWhat are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks? => SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\nWhat are the name and assets of each company, sorted in ascending order of company name? => SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\nFind the distinct ages of students who have secretary votes in the fall election cycle. => SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\nWhat is the air date of TV series with Episode \"A Love of a Lifetime\"? => ", "response": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}
{"question": "When did the episode \"A Love of a Lifetime\" air?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nReturn the founder of Sony. => SELECT founder FROM manufacturers WHERE name  =  'Sony'\nWhat are the ids for courses that were offered in both Fall of 2009 and Spring of 2010? => SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010\nWhat are the ids of the movies that are not reviewed by Brittany Harris. => SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\nHow many unique labels are there for albums? => SELECT count(DISTINCT label) FROM albums\nList all countries of markets in descending order of number of cities. => SELECT Country FROM market ORDER BY Number_cities DESC\nWhen did the episode \"A Love of a Lifetime\" air? => ", "response": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'"}
{"question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the title and maximum price of each film? => SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\nWhich vocal type has the band mate with last name \"Heilo\" played the most? => SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nGive the maximum price and score for wines produced in the appelation St. Helena. => SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\nHow many colors are there? => SELECT count(*) FROM ref_colors\nCount the number of departments which offer courses. => SELECT count(DISTINCT dept_name) FROM course\nWhat is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? => ", "response": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}
{"question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat is the code of the school where the accounting department belongs to? => SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"\nFind the id, forename and number of races of all drivers who have at least participated in two races? => SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2\nFind the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment. => SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"\nReturn the names of all counties sorted by county name in descending alphabetical order. => SELECT County_name FROM county ORDER BY County_name DESC\nFind the names of users who have more than one tweet. => SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\nWhat is the weekly rank for the episode \"A Love of a Lifetime\"? => ", "response": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}
{"question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhich papers did the author \"Olin Shivers\" write? Give me the paper titles. => SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"\nWhat are the first names of students studying in room 107? => SELECT DISTINCT firstname FROM list WHERE classroom  =  107\nWhat are the grade number and classroom number of each class in the list? => SELECT DISTINCT classroom ,  grade FROM list\nHow many songs have a lead vocal? => SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"\nWhat is the total time for all lessons taught by Janessa Sawayn? => SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nWhat is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. => ", "response": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime'"}
{"question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the name of the courses that do not have any prerequisite? => SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)\nList the name of tracks belongs to genre Rock or genre Jazz. => SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\nPlease list the countries and years of film market estimations. => SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID\nHow many undergraduates are there at San Jose State => SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"\nWhat are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from? => SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3\nWhat is the name of the series that has the episode \"A Love of a Lifetime\"? => ", "response": "SELECT series_name FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}
{"question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nShow different types of ships and the average tonnage of ships of each type. => SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE\nCount the number of customer cards of the type Debit. => SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"\nWhat are the names of the technicians  and how many machines are they assigned to repair? => SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name\nHow many products have the characteristic named \"hot\"? => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"\nWhich orders have shipment after 2000-01-01? Give me the order ids. => SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"\nList the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". => ", "response": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\""}
{"question": "What is the episode for the TV series named \"Sky Radio\"?", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the names of all singers that are from the UK and released a song in English? => SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"\nWhat are the names of all departments in alphabetical order? => SELECT dept_name FROM department ORDER BY dept_name\nHow many schools have students playing in goalie and mid-field positions? => SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')\nWhat is the name of the project that has a scientist assigned to it whose name contains 'Smith'? => SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'\nShow member names without any registered branch. => SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)\nWhat is the episode for the TV series named \"Sky Radio\"? => ", "response": "SELECT Episode FROM TV_series WHERE series_name = \"Sky Radio\""}
{"question": "Find the number of cartoons directed by each of the listed directors.", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the department with the most employees. => SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;\nWhich buildings do not have any company office? Give me the building names. => SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\nWhat are the different ages of editors? Show each age along with the number of editors of that age. => SELECT Age ,  COUNT(*) FROM editor GROUP BY Age\nFind the number of employees of each gender whose salary is lower than 50000. => SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex\nWhat are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'? => SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'\nFind the number of cartoons directed by each of the listed directors. => ", "response": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by"}
{"question": "How many cartoons did each director create?", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhich artist does the album \"Balls to the Wall\" belong to? => SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\nFind all the songs that do not have a back vocal. => SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\nWhat are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets? => SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3\nFind the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount. => SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1\nWhat are the numbers of all flights that can cover a distance of more than 2000? => SELECT flno FROM Flight WHERE distance  >  2000\nHow many cartoons did each director create? => ", "response": "SELECT director, COUNT(*) AS total_cartoons FROM Cartoon GROUP BY director"}
{"question": "Find the production code and channel of the most recently aired cartoon .", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat is the last name of the musician that has been at the back position the most? => SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\nReturn each apartment type code along with the maximum and minimum number of rooms among each type. => SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code\nWhat are the amenities in the dorm that a student who has the last name of Smith lives in? => SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'\nWhat are the first names of the people in alphabetical order? => SELECT first_name FROM people ORDER BY first_name\nHow many members of \"Bootup Baltimore\" are older than 18? => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18\nFind the production code and channel of the most recently aired cartoon . => ", "response": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1"}
{"question": "What is the produdction code and channel of the most recent cartoon ?", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the total purchases for members rated at level 6? => SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6\nWhat are the names of representatives with more than 10000 votes in election? => SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000\nHow many donors have endowment for school named \"Glenn\"? => SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"\nCount the number of customers. => SELECT count(*) FROM customers\nHow many classes are held in each department? => SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code\nWhat is the produdction code and channel of the most recent cartoon ? => ", "response": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1"}
{"question": "Find the package choice and series name of the TV channel that has high definition TV.", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina? => SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"\nList all female students age is older than 18 who is not majoring in 600. List students' first name and last name. => SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';\nWhich company was started by the entrepreneur with the greatest height? => SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\nWhat are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"? => SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"\nWhat are the names, address roads, and cities of the branches ordered by opening year? => SELECT name ,  address_road ,  city FROM branch ORDER BY open_year\nFind the package choice and series name of the TV channel that has high definition TV. => ", "response": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = true"}
{"question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nReturn names of songs in volumes that are by artists that are at least 32 years old. => SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32\nWhat is the total amount of moeny paid by the customer Carole Bernhard? => SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"\nHow many customers do not have an account? => SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\nWhat are the phone, room, and building of the faculty member called Jerry Prince? => SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"\nHow many clubs does \"Linda Smith\" have membership for? => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\nWhat are the package options and the name of the series for the TV Channel that supports high definition TV? => ", "response": "SELECT TV_Channel.Package_Option, TV_series.series_name \nFROM TV_Channel \nJOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_Channel.Hight_definition_TV = 'Yes'"}
{"question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the three products that have the most problems?s => SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3\nWhat are the different first names and highest degree attained for professors teaching in the Computer Information Systems department? => SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'\nFind the id of courses which are registered or attended by student whose id is 121? => SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121\nWhat are the unique names of all race held between 2014 and 2017? => SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\nFind the state which has the most number of customers. => SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1\nwhich countries' tv channels are playing some cartoon written by Todd Casey? => ", "response": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Written_by = 'Todd Casey'"}
{"question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhich countries have more than two members? => SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2\nShow the height of the mountain climbed by the climber with the maximum points. => SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1\nWhat is the name of the project with the most hours? => SELECT name FROM projects ORDER BY hours DESC LIMIT 1\nShow the school name and type for schools without a school bus. => SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)\nShow the names of the three most recent festivals. => SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3\nWhat are the countries that have cartoons on TV that were written by Todd Casey? => ", "response": "SELECT DISTINCT TV_Channel.Country\nFROM TV_Channel\nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey'"}
{"question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nCount the number of colors. => SELECT count(*) FROM ref_colors\nWhat are the ids of all reviewers who did not give 4 stars? => SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4\nWhat is the average number of bedrooms of all apartments? => SELECT avg(bedroom_count) FROM Apartments\nWhat are the ids and details for each project? => SELECT project_id ,  project_details FROM Projects\nList the count and id of each product in all the orders. => SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id\nwhich countries' tv channels are not playing any cartoon written by Todd Casey? => ", "response": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')"}
{"question": "What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the full name and id of the college that has the most baseball players. => SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\nShow the name of each county along with the corresponding number of delegates from that county. => SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\nFind the number of rooms with more than 50 capacity for each building. => SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building\nFind job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009. => SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'\nFind the average and maximum hours for the students whose tryout decision is yes. => SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\nWhat are the countries that are not playing cartoons written by Todd Casey? => ", "response": "SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by <> 'Todd Casey'"}
{"question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the official names of cities with population bigger than 1500 or smaller than 500. => SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\nFind the last names of faculties in building Barton in alphabetic order. => SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname\nShow year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened. => SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\nShow the id and details of the investor that has the largest number of transactions. => SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1\nHow many counties correspond to each police force? => SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force\nFind the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? => ", "response": "SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon \nINNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Directed_by = 'Michael Chang'"}
{"question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the wines that have prices higher than 50 and made of Red color grapes? => SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50\nWhat are the names of all clubs that do not have any players? => SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\nWhat was the date of the earliest payment? => SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1\nFind the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order. => SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3\nWhat are all the different zip codes that have a maximum dew point that was always below 70? => SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70\nWhat is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? => ", "response": "SELECT TV_Channel.series_name, TV_Channel.Country \nFROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Directed_by = 'Michael Chang'"}
{"question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nHow many hosts does each nationality have? List the nationality and the count. => SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality\nWhat is the phone and email for customer with first name Aniyah and last name Feest? => SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"\nFor each airport name, how many routes start at that airport? => SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name\nWhat is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? => SELECT max(OMIM) FROM enzyme\nReturn the number of companies created by Andy. => SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'\nfind the pixel aspect ratio and nation of the tv channels that do not use English. => ", "response": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'"}
{"question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nShow the product ids and the number of unique orders containing each product. => SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\nWhat is the zip code that has the lowest average mean sea level pressure? => SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1\nWhat is the total student capacity of all dorms? => SELECT sum(student_capacity) FROM dorm\nWhat are the names of reviewers who had rated 3 star and 4 star? => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4\nList the name of all tracks in the playlists of Movies. => SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";\nWhat is the pixel aspect ratio and country of origin for all TV channels that do not use English? => ", "response": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';"}
{"question": "find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nShow all distinct building descriptions. => SELECT DISTINCT building_description FROM Apartment_Buildings\nWhat is the theme and artist name for the exhibition with a ticket price higher than the average? => SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\nList all information about college sorted by enrollment number in the ascending order. => SELECT * FROM College ORDER BY enr\nWhat are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students? => SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100\nWhat are the papers published under the institution \"Indiana University\"? => SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\nfind id of the tv channels that from the countries where have more than two tv channels. => ", "response": "SELECT TV_Channel.id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*)>2)"}
{"question": "What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nShow the student id of the oldest student. => SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)\nWhich city has hosted the most events? => SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1\nList the names of journalists in ascending order of years working. => SELECT Name FROM journalist ORDER BY Years_working ASC\nHow many students does each advisor have? => SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor\nCount the number of all the calendar items. => SELECT count(*) FROM Ref_calendar\nWhat are the ids of all tv channels that have more than 2 TV channels? => ", "response": "SELECT id FROM TV_Channel WHERE Package_Option > 2"}
{"question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the total checking and saving balance of all accounts sorted by the total balance in ascending order. => SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance\nGive me a list of descriptions of the problems that are reported by the staff whose first name is Christop. => SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"\nWhich category does the product named \"flax\" belong to? => SELECT product_category_code FROM products WHERE product_name  =  \"flax\"\nList the name of all products along with the number of complaints that they have received. => SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name\nShow the names of journalists and the number of events they reported. => SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name\nfind the id of tv channels that do not play any cartoon directed by Ben Jones. => ", "response": "SELECT T1.id FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT * FROM Cartoon AS T2 WHERE T1.id = T2.Channel AND T2.Directed_by = \"Ben Jones\")"}
{"question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nHow many different professors are there for the different schools? => SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code\nWhat is the id, forname and surname of the driver who had the first position in terms of laptime at least twice? => SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2\nWho are the advisors for students that live in a city with city code \"BAL\"? => SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"\nWhat is the average capacity of the stadiums that were opened in year 2005? => SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005\nFind the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\". => SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"\nWhat are the ids of the TV channels that do not have any cartoons directed by Ben Jones? => ", "response": "SELECT T1.id FROM TV_Channel AS T1 WHERE T1.id NOT IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Directed_by = \"Ben Jones\")"}
{"question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nWhat are the first names and birthdates of the professors in charge of ACCT-211? => SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"\nShow the game name that has most number of hours played. => SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1\nWhat are the average amount purchased and value purchased for the supplier who supplies the most products. => SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)\nWhat are the names of teams that do no have match season record? => SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)\nWhen did researchers start and stop working? => SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'\nfind the package option of the tv channel that do not have any cartoon directed by Ben Jones. => ", "response": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"}
{"question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "prompt": "Given a database 'tvshow' have 3 tables named 'TV_Channel', 'TV_series', 'Cartoon'. TV_Channel tbl have columns: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'. TV_series tbl have columns: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'. Cartoon tbl have columns: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'. \nTranslate text to SQL: \nFind the names of users who did not leave any review. => SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\nShow the ids and details of the investors who have at least two transactions with type code \"SALE\". => SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2\nHow many male and female assistant professors do we have? => SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex\nFind the number of routes that have destination John F Kennedy International Airport. => SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'\nFind the number of phones for each accreditation type. => SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type\nWhat are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? => ", "response": "SELECT TV_Channel.Package_Option \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL"}
{"question": "How many poker players are there?", "sql": "SELECT count(*) FROM poker_player", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the distinct names of nurses on call? => SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse\nFind the name of dorms that do not have amenity TV Lounge. => SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\nCount the number of budget codes. => SELECT count(*) FROM Ref_budget_codes\nList the status shared by more than two roller coaster. => SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2\nCompute the average profits companies make. => SELECT avg(Profits_billion) FROM Companies\nHow many poker players are there? => ", "response": "SELECT count(*) FROM poker_player"}
{"question": "Count the number of poker players.", "sql": "SELECT count(*) FROM poker_player", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nReturn the names of people, ordered alphabetically. => SELECT Name FROM People ORDER BY Name ASC\nWhat are the dates for the documents with both 'GV' type and 'SF' type expenses? => SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'\nWhat is the average number of customers across banks in the state of Utah? => SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\nShow the reign and days held of wrestlers. => SELECT Reign ,  Days_held FROM wrestler\nFor each country, what is the average elevation of that country's airports? => SELECT avg(elevation) ,  country FROM airports GROUP BY country\nCount the number of poker players. => ", "response": "SELECT COUNT(Poker_Player_ID) FROM poker_player"}
{"question": "List the earnings of poker players in descending order.", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nHow many games are held after season 2007? => SELECT count(*) FROM game WHERE season  >  2007\nWhat are the different names of friends who are younger than the average age for a friend? => SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)\nHow many students are older than average for each gender? => SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\nWhat is the most popular first name of the actors? => SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1\nWhich teams had more than 3 eliminations? => SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3\nList the earnings of poker players in descending order. => ", "response": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}
{"question": "What are the earnings of poker players, ordered descending by value?", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nHow many different services are provided by all stations? => SELECT count(DISTINCT services) FROM station\nWhat is the id of the patient who stayed in room 111 most recently? => SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1\nCount the number of games taken place in park \"Columbia Park\" in 1907. => SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';\nCount the number of Professors who have office in building NEB. => SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"\nIn how many different cities are banks located? => SELECT count(DISTINCT city) FROM bank\nWhat are the earnings of poker players, ordered descending by value? => ", "response": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}
{"question": "List the final tables made and the best finishes of poker players.", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the distinct last names of the students who have president votes and have 8741 as the advisor? => SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"\nFind the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties? => SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2\nFor each station, return its longitude and the average duration of trips that started from the station. => SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id\nHow many different majors are there and how many different city codes are there for each student? => SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\nWhat are the average, minimum, and max ages for each of the different majors? => SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major\nList the final tables made and the best finishes of poker players. => ", "response": "SELECT Final_Table_Made, Best_Finish FROM poker_player"}
{"question": "What are the final tables made and best finishes for all poker players?", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat is the oldest log id and its corresponding problem id? => SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1\nHow many tourists did not make any visit? => SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\nCount the number of tracks. => SELECT count(*) FROM track\nWhat are the names, headquarters and revenues for manufacturers, sorted by revenue descending? => SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\nWhat are all the dates of enrollment and completion in record? => SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment\nWhat are the final tables made and best finishes for all poker players? => ", "response": "SELECT Final_Table_Made, Best_Finish FROM poker_player"}
{"question": "What is the average earnings of poker players?", "sql": "SELECT avg(Earnings) FROM poker_player", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhich manager won the most manager award? Give me the manager's first name, last name and id. => SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;\nFind the number of rooms located on each block floor. => SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor\nCount the number of markets that have a number of cities lower than 300. => SELECT count(*) FROM market WHERE Number_cities  <  300\nFind the name of department that offers the class whose description has the word \"Statistics\". => SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'\nWhat is the description and code of the type of service that is performed the most often? => SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the average earnings of poker players? => ", "response": "SELECT AVG(Earnings) FROM poker_player"}
{"question": "Return the average earnings across all poker players.", "sql": "SELECT avg(Earnings) FROM poker_player", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the full names of faculty members who are a part of department 520? => SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520\nList all customer status codes and the number of customers having each status code. => SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;\nFind the start and end dates of detentions of teachers with last name \"Schultz\". => SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\"\nCount the number of Professors who have office in building NEB. => SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"\nWhat country is the artist who made the fewest songs from? => SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1\nReturn the average earnings across all poker players. => ", "response": "SELECT AVG(Earnings) FROM poker_player"}
{"question": "What is the money rank of the poker player with the highest earnings?", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nShow card type codes with at least 5 cards. => SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\nFind the physician who prescribed the highest dose. What is his or her name? => SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1\nFind the name and age of the person who is a friend of Dan or Alice. => SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'\nGive the ids for documents that have the budget description 'Government'. => SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"\nShow the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working. => SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3\nWhat is the money rank of the poker player with the highest earnings? => ", "response": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)"}
{"question": "Return the money rank of the player with the greatest earnings.", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat is the name of the person who has the oldest average age for their friends, and what is that average age? => SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1\nReturn the type code of the document named \"David CV\". => SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"\nWhat are the names of different tracks, and how many races has each had? => SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\nWhich people severed as governor most frequently? => SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the campus fee of \"San Jose State University\" in year 1996? => SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996\nReturn the money rank of the player with the greatest earnings. => ", "response": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)"}
{"question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin? => SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"\nShow the ages of gymnasts in descending order of total points. => SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC\nWhich vocal type has the band mate with first name \"Solveig\" played the most? => SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nIn zip code 94107, on which day neither Fog nor Rain was not observed? => SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"\nHow many credits does course CIS-220 have, and what its description? => SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'\nWhat is the maximum number of final tables made among poker players with earnings less than 200000? => ", "response": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000"}
{"question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nShow the names and main services for train stations that have the top three total number of passengers. => SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3\nShow the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\". => SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"\nHow many airports are there per country? Order the countries by decreasing number of airports. => SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC\nList the information of all instructors ordered by their salary in ascending order. => SELECT * FROM instructor ORDER BY salary\nWhich poll resource provided the most number of candidate information? => SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1\nReturn the maximum final tables made across all poker players who have earnings below 200000. => ", "response": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000"}
{"question": "What are the names of poker players?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nList the campus that have between 600 and 1000 faculty lines in year 2004. => SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004\nShow the name, open date, and organizer for all churches. => SELECT name ,  open_date ,  organized_by FROM Church\nList the names of people that are not perpetrators. => SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)\nList the distinct names of the instructors, ordered by name. => SELECT DISTINCT name FROM  instructor ORDER BY name\nWhat are the gender and occupation of players? => SELECT Gender ,  Occupation FROM player\nWhat are the names of poker players? => ", "response": "SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID"}
{"question": "Return the names of all the poker players.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the numbers of wines for different grapes? => SELECT count(*) ,  Grape FROM WINE GROUP BY Grape\nFind the checking balance and saving balance in the Brown\u2019s account. => SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'\nHow many distinct publication dates are there in our record? => SELECT COUNT (DISTINCT Publication_Date) FROM publication\nWhat are the ids of stations that are located in San Francisco and have average bike availability above 10. => SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10\nFind the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim. => SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )\nReturn the names of all the poker players. => ", "response": "SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID GROUP BY Name"}
{"question": "What are the names of poker players whose earnings is higher than 300000?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nHow many customers are there? => SELECT sum(no_of_customers) FROM bank\nWhat are the names of the storms that affected Denmark? => SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\nWhat are the all games score and location of the school called Clemson? => SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'\nWhat are the characters of actors in descending order of age? => SELECT Character FROM actor ORDER BY age DESC\nWhich college has any student who is a goalie and succeeded in the tryout. => SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'\nWhat are the names of poker players whose earnings is higher than 300000? => ", "response": "SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000"}
{"question": "Give the names of poker players who have earnings above 300000.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nShow order ids and the total quantity in each order. => SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id\nWhich countries do not have a stadium that was opened after 2006? => SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006\nFind the total credits of all classes offered by each department. => SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\nHow many books fall into each category? => SELECT category ,  count(*) FROM book_club GROUP BY category\nFind the name, account type, and account balance of the customer who has the highest credit score. => SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\nGive the names of poker players who have earnings above 300000. => ", "response": "SELECT ppl.Name FROM people AS ppl JOIN poker_player AS pp ON ppl.People_ID = pp.People_ID WHERE pp.Earnings > 300000"}
{"question": "List the names of poker players ordered by the final tables made in ascending order.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nHow many restaurant is the Sandwich type restaurant? => SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'\nFind the last name and hire date of the professor who is in office DRE 102. => SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'\nWhich organizations are not a parent organization of others? List the organization id. => SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations\nWhat is the average credit score for customers who have never taken a loan? => SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\nShow all artist names and the year joined who are not from United States. => SELECT name ,  year_join FROM artist WHERE country != 'United States'\nList the names of poker players ordered by the final tables made in ascending order. => ", "response": "SELECT people.name\nFROM people \nJOIN poker_player ON people.People_ID = poker_player.People_ID\nORDER BY poker_player.Final_Table_Made ASC"}
{"question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nFind the address of all customers that live in Germany and have invoice. => SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"\nFind the description of the claim status \"Open\". => SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\nWhat are the different majors? => SELECT DISTINCT Major FROM Student\nGive me the names of customers who have placed orders between 2009-01-01 and 2010-01-01. => SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\nWhat are the different ids and names of the stations that have had more than 12 bikes available? => SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12\nWhat are the names of poker players, ordered ascending by the number of final tables they have made? => ", "response": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC"}
{"question": "What is the birth date of the poker player with the lowest earnings?", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nShow the name and country for all people whose age is smaller than the average. => SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\nWhat are the average enrollment size of the universities that are founded before 1850? => SELECT avg(enrollment) FROM university WHERE founded  <  1850\nWhat are the hosts of competitions whose theme is not \"Aliens\"? => SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\nFind the id and location of circuits that belong to France or Belgium? => SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"\nWhat are the names of all pilots listed by descending age? => SELECT Name FROM pilot ORDER BY Age DESC\nWhat is the birth date of the poker player with the lowest earnings? => ", "response": "SELECT Birth_Date FROM people WHERE People_ID = (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player))"}
{"question": "Return the birth date of the poker player with the lowest earnings.", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nReturn the the details of all products. => SELECT DISTINCT product_details FROM products\nFind the names of stadiums that the most swimmers have been to. => SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1\nReturn the investors who have invested in two or more entrepreneurs. => SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2\nShow the names of phones and the districts of markets they are on. => SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID\nWhat is the name of the tallest building? => SELECT name FROM building ORDER BY height_feet DESC LIMIT 1\nReturn the birth date of the poker player with the lowest earnings. => ", "response": "SELECT p2.Birth_Date FROM poker_player AS p1 JOIN people AS p2 ON p1.People_ID = p2.People_ID ORDER BY p1.Earnings ASC LIMIT 1"}
{"question": "What is the money rank of the tallest poker player?", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nShow the product type codes which have at least two products. => SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2\nFind the number of distinct gender for dorms. => SELECT count(DISTINCT gender) FROM dorm\nWhat is the first name and last name of the student who have most number of sports? => SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1\nWhat are the dates with a maximum temperature higher than 85? => SELECT date FROM weather WHERE max_temperature_f  >  85\nShow the average transaction amount for different transaction types. => SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code\nWhat is the money rank of the tallest poker player? => ", "response": "SELECT p.money_rank FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height = (SELECT MAX(height) FROM people)"}
{"question": "Return the money rank of the poker player with the greatest height.", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the ids, full names, and phones of each customer? => SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers\nlist all female (sex is F) candidate names in the alphabetical order. => SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name\nWhat are the roles with three or more employees? Give me the role codes. => SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3\nWhich contact channel has been used by the customer with name \"Tillman Ernser\"? => SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"\nList the area and county of all appelations. => SELECT Area ,  County FROM APPELLATIONS\nReturn the money rank of the poker player with the greatest height. => ", "response": "SELECT p1.Money_Rank FROM poker_player AS p1 JOIN people AS p2 ON p1.People_ID = p2.People_ID WHERE p2.Height = (SELECT MAX(Height) FROM people)"}
{"question": "What is the average earnings of poker players with height higher than 200?", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the full names of faculty members who are a part of department 520? => SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520\nWhat is average enrollment of colleges in the state FL? => SELECT avg(enr) FROM College WHERE state  =  'FL'\nWhat is the list of school locations sorted in descending order of school foundation year? => SELECT LOCATION FROM school ORDER BY Founded DESC\nWhat are the ids of all students who have attended at least one course? => SELECT student_id FROM student_course_attendance\nWhat are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009? => SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'\nWhat is the average earnings of poker players with height higher than 200? => ", "response": "SELECT AVG(Earnings) FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE p.Height > 200"}
{"question": "Give average earnings of poker players who are taller than 200.", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nfind the names of people who are taller than 200 or lower than 190. => SELECT name FROM people WHERE height  >  200 OR height  <  190\nReturn the number of customers who have at least one order with \"Cancelled\" status. => SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"\nWhich course authors teach two or more courses? Give me their addresses and author IDs. => SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\nWhich customers have made at least two orders? Give me each customer name and number of orders made. => SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2\nHow many distinct courses are enrolled in by students? => SELECT count(course_id) FROM Student_Course_Enrolment\nGive average earnings of poker players who are taller than 200. => ", "response": "SELECT AVG(p.Earnings) FROM poker_player as p JOIN people as pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200"}
{"question": "What are the names of poker players in descending order of earnings?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the names of customers with credit score less than the average credit score across customers? => SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)\nFind the movies with the highest average rating. Return the movie titles and average rating. => SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1\nShow the distinct names of mountains climbed by climbers from country \"West Germany\". => SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"\nList all tracks bought by customer Daan Peeters. => SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";\nWhat are the names of all products that are not the most frequently-used maximum page size? => SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)\nWhat are the names of poker players in descending order of earnings? => ", "response": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC"}
{"question": "Return the names of poker players sorted by their earnings descending.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are names of customers who never ordered product Latte. => SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'\nShow the average price range of hotels that have 5 star ratings and allow pets. => SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\nSort the company names in descending order of the company's market value. => SELECT name FROM Companies ORDER BY Market_Value_billion DESC\nWhat amenities does Smith Hall have in alphabetical order? => SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name\nFor which countries are there more than four distinct addresses listed? => SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4\nReturn the names of poker players sorted by their earnings descending. => ", "response": "SELECT P1.Poker_Player_ID, P2.Name FROM poker_player AS P1 JOIN people AS P2 ON P1.People_ID = P2.People_ID ORDER BY Earnings DESC"}
{"question": "What are different nationalities of people and the corresponding number of people from each nation?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nShow the denomination shared by schools founded before 1890 and schools founded after 1900 => SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\nShow the builder of railways associated with the trains named \"Andaman Exp\". => SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\"\nFind the salary and manager number for those employees who is working under a manager. => SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"\nWhat are the names of all races held after 2000 in Spain? => SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000\nWhat are the aircrafts with top 3 shortest lengthes? List their names. => SELECT name FROM Aircraft ORDER BY distance LIMIT 3\nWhat are different nationalities of people and the corresponding number of people from each nation? => ", "response": "SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality"}
{"question": "How many people are there of each nationality?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nShow all video game types. => SELECT DISTINCT gtype FROM Video_games\nWhat is the most common birth place of people? => SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the names of the tracks that are Rock or Jazz songs? => SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\nWhat are all the policy types of the customer named \"Dayana Robel\"? => SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"\nWho has friends that are younger than the average age? => SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)\nHow many people are there of each nationality? => ", "response": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality"}
{"question": "What is the most common nationality of people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat is the response received date for the document described as Regular that was granted more than 100 dollars? => SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100\nCount the products that have the color description \"white\" or have the characteristic name \"hot\". => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"\nWhat are the total number of students who are living in a male dorm? => SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'\nShow the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80. => SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80\nWhat are the maximum price and score of wines produced by St. Helena appelation? => SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\nWhat is the most common nationality of people? => ", "response": "SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1"}
{"question": "Give the nationality that is most common across all people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nHow many distinct teams are involved in match seasons? => SELECT count(DISTINCT Team) FROM match_season\nWhat are the names of all the songs whose album is under the label of \"Universal Music Group\"? => SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"\nWhat is each customer's move in date, and the corresponding customer id and details? => SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id\nShow the names of trains and locations of railways they are in. => SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID\nShow the official names of the cities that have hosted more than one competition. => SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\nGive the nationality that is most common across all people. => ", "response": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}
{"question": "What are the nationalities that are shared by at least two people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the codes of card types that have 5 or more cards? => SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\nShow each state and the number of addresses in each state. => SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county\nWhat is the season of the game which causes the player 'Walter Samuel' to get injured? => SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'\nReturn the name of the wrestler who had the lowest number of days held. => SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1\nwhat is the name of the country that participated in the most tournament competitions? => SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1\nWhat are the nationalities that are shared by at least two people? => ", "response": "SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) >= 2"}
{"question": "Return the nationalities for which there are two or more people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the first names and office locations for all professors sorted alphabetically by first name? => SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname\nFind the name of the source user with the highest average trust score. => SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1\nWhat are the names of all instructors with a higher salary than any of the instructors in the Biology department? => SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\nHow many languages are in these films? => SELECT count(DISTINCT language_id) FROM film\nFind the names of all procedures which cost more than 1000 but which physician John Wen was not trained in? => SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nReturn the nationalities for which there are two or more people. => ", "response": "SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2"}
{"question": "List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat is the famous release date of the artist with the oldest age? => SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1\nShow the names of phones and the districts of markets they are on. => SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID\nWho is the person that has no friend? => SELECT name FROM person EXCEPT SELECT name FROM PersonFriend\nFind all the name of documents without any sections. => SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\nWhat are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix? => SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\nList the names and birth dates of people in ascending alphabetical order of name. => ", "response": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC"}
{"question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nList the name of physicians who never took any appointment. => SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\nAt which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total. => SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;\nWhat are the different cities listed? => SELECT DISTINCT headquarter FROM manufacturers\nWhat are names of customers who never ordered product Latte. => SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'\nHow many followers does each user have? => SELECT count(*) FROM follows\nWhat are the names and birth dates of people, ordered by their names in alphabetical order? => ", "response": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC"}
{"question": "Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nFind the product type whose average price is higher than the average price of all products. => SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)\nIn which city do the most employees live and how many of them live there? => SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;\nReturn the sum of all payment amounts. => SELECT sum(amount) FROM payment\nShow the names of members that have a rank in round higher than 3. => SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3\nShow theme and year for all exhibitions with ticket prices lower than 15. => SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15\nShow names of people whose nationality is not \"Russia\". => ", "response": "SELECT Name FROM people WHERE Nationality <> 'Russia'"}
{"question": "What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nList from which date and to which date these staff work: project staff of the project which hires the most staffs => SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'\nShow different types of ships and the average tonnage of ships of each type. => SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE\nWho are the nominees who have been nominated for both a Tony Award and a Drama Desk Award? => SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\nWhat are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape? => SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\nFor each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade. => SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade\nWhat are the names of people who are not from Russia? => ", "response": "SELECT Name FROM people WHERE Nationality <> 'Russia'"}
{"question": "List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the countries of mountains with height bigger than 5000? => SELECT Country FROM mountain WHERE Height  >  5000\nWhat is the average time span of contact channels in the database? => SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels\nHow many performances are there? => SELECT count(*) FROM performance\nShow the ids and names of all documents. => SELECT document_id ,  document_name FROM Documents\nWhich institution has the most papers? Find the name of the institution. => SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1\nList the names of people that are not poker players. => ", "response": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"}
{"question": "What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nFind the state and country of all cities with post code starting with 4. => SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"\nFind the schools that were either founded after 1850 or public. => SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'\nIN which year did city \"Taizhou ( Zhejiang )\" serve as a host city? => SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\"\nFind the first names of students with age above 22. => SELECT Fname FROM STUDENT WHERE Age  >  22\nShow all train names and times in stations in London in descending order by train time. => SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC\nWhat are the names of people who do not play poker? => ", "response": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"}
{"question": "How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nShow all information on the airport that has the largest number of international passengers. => SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1\nWhat is the id for the employee called Ebba? => SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"\nCount the number of accounts. => SELECT count(*) FROM accounts\nFind the name of companies whose revenue is smaller than the revenue of all companies based in Austin. => SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')\nWhich product has the most problems? Give me the number of problems and the product name. => SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1\nHow many distinct nationalities are there? => ", "response": "SELECT count(DISTINCT Nationality) FROM people"}
{"question": "Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people", "prompt": "Given a database 'poker_player' have 2 tables named 'poker_player', 'people'. poker_player tbl have columns: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'. people tbl have columns: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'. \nTranslate text to SQL: \nWhat are the titles for courses with two prerequisites? => SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2\nWhat are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron? => SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")\nWhat is the team name and acc regular season score of the school that was founded for the longest time? => SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1\nWhich vocal type is the most frequently appearring type? => SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nList the names and phone numbers of all the distinct suppliers who supply red jeans. => SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"\nCount the number of different nationalities. => ", "response": "SELECT COUNT(DISTINCT Nationality) FROM people"}
{"question": "How many states are there?", "sql": "SELECT count(*) FROM area_code_state", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nShow the names and genders of players with a coach starting after 2011. => SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011\nWhich film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id. => SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\nWhat are the names of wrestlers and their teams in elimination, ordered descending by days held? => SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC\nFind the id and star rating of each hotel and sort them in increasing order of price. => SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC\nWhat are the movie titles with the highest average rating and what are those ratings? => SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1\nHow many states are there? => ", "response": "Without seeing the data in the database, the SQL query to answer this question would be: SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE."}
{"question": "List the contestant numbers and names, ordered by contestant name descending.", "sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nWhich customers have the substring \"Diana\" in their names? Return the customer details. => SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"\ndisplay the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number. => SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id\nWhat is the description for the results whose project detail is 'sint'? => SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'\nWhat is the salaray and name of the employee with the most certificates to fly planes more than 5000? => SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\nWhat are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach? => SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'\nList the contestant numbers and names, ordered by contestant name descending. => ", "response": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC"}
{"question": "List the vote ids, phone numbers and states of all votes.", "sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nPlease show the team that has the most number of technicians. => SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1\nFind the name of players whose card is yes in the descending order of training hours. => SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC\nShow the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name. => SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC\nReturn the unique name for stations that have ever had 7 bikes available. => SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7\nWhat are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language? => SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages\nList the vote ids, phone numbers and states of all votes. => ", "response": "SELECT vote_id, phone_number, state FROM VOTES"}
{"question": "What are the maximum and minimum values of area codes?", "sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nWhat are the first names and office of the professors who are in the history department and have a Ph.D? => SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'\nWhat are the names of the colleges that are larger than at least one college in Florida? => SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')\nList the names of counties in descending order of population. => SELECT Name FROM county_public_safety ORDER BY Population DESC\nList the 3 highest salaries of the players in 2001? => SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;\nSelect the names of manufacturer whose products have an average price higher than or equal to $150. => SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150\nWhat are the maximum and minimum values of area codes? => ", "response": "SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE"}
{"question": "What is last date created of votes from the state 'CA'?", "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nFind the number and averaged salary of all instructors who are in the department with the highest budget. => SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1\nHow many students are over 18 and do not have allergy to food type or animal type? => SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")\nFor each director, what is the title and score of their most poorly rated movie? => SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director\nFind the id of the customers who have order status both \"On Road\" and \"Shipped\". => SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"\nWhat is the average price for flights from Los Angeles to Honolulu. => SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\nWhat is last date created of votes from the state 'CA'? => ", "response": "SELECT max(created) FROM VOTES WHERE state = 'CA'"}
{"question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nFind the last name of the author with first name \"Amal\". => SELECT lname FROM authors WHERE fname  =  \"Amal\"\nList all information about the assessment notes sorted by date in ascending order. => SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC\nWhat are the distinct ages of students who have secretary votes in the fall election cycle? => SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\nFind the first and last names of all the female (sex is F) students who have president votes. => SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"\nList all employees in the circulation history of the document with id 1. List the employee's name. => SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;\nWhat are the names of the contestants whose names are not 'Jessie Alloway' => ", "response": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'"}
{"question": "What are the distinct states and create time of all votes?", "sql": "SELECT DISTINCT state ,  created FROM votes", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nHow many premises are there? => SELECT count(*) FROM premises\nList the names of the top 5 oldest people. => SELECT Name FROM People ORDER BY Age DESC LIMIT 5\nCount the number of appelations in Napa County. => SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\nHow many papers are \"Atsushi Ohori\" the author of? => SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\nWhat are the movie titles with the highest average rating and what are those ratings? => SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1\nWhat are the distinct states and create time of all votes? => ", "response": "SELECT DISTINCT state, created FROM VOTES"}
{"question": "What are the contestant numbers and names of the contestants who had at least two votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nWhich poll resource provided the most number of candidate information? => SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1\nFind the id of routes whose source and destination airports are in the United States. => SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\nWhat is the average fee on a CSU campus in 2005? => SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005\nList the names of editors that are not on any journal committee. => SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\nFind the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. => SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\nWhat are the contestant numbers and names of the contestants who had at least two votes? => ", "response": "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)"}
{"question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nWhat are the titles and average ratings for all movies that have the lowest average rating? => SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1\nWhat are the first and last name of the author who published the paper titled \"Nameless, Painless\"? => SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"\nFind the total number of students and total number of instructors for each department. => SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name\nList the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts. => SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC\nRetrieve the title of the paper that has the largest number of authors. => SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)\nOf all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? => ", "response": "SELECT T2.contestant_number, T2.contestant_name FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T2.contestant_name ORDER BY COUNT(T1.vote_id) ASC LIMIT 1"}
{"question": "What are the number of votes from state 'NY' or 'CA'?", "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nWhat are the types of competition and number of competitions for that type? => SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type\nSelect the code of the product that is cheapest in each product category. => SELECT code ,  name ,  min(price) FROM products GROUP BY name\nList the distinct ranges of the mountains with the top 3 prominence. => SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3\nShow headquarters with at least two companies in the banking industry. => SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2\nReturn the hispanic percentage for cities in which the black percentage is greater than 10. => SELECT Hispanic FROM city WHERE Black  >  10\nWhat are the number of votes from state 'NY' or 'CA'? => ", "response": "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'"}
{"question": "How many contestants did not get voted?", "sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nWhat are all the location codes and location names? => SELECT location_code ,  location_name FROM Ref_locations\nFind the full name of the customer with the email \"luisg@embraer.com.br\". => SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"\nShow the years, book titles, and publishers for all books, in descending order by year. => SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC\nWhat is the age of the doctor named Zach? => SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'\nFind the city where the most customers live. => SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1\nHow many contestants did not get voted? => ", "response": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)"}
{"question": "What is the area code in which the most voters voted?", "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nWhat is the name of the dorm with both a TV Lounge and Study Room listed as amenities? => SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'\nWhat is the last name of the musician that have produced the most number of songs? => SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\nWhat is the structure of the document with the least number of accesses? => SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1\nWhat are the maximum and minimum number of cows across all farms. => SELECT max(Cows) ,  min(Cows) FROM farm\nHow many users are there? => SELECT count(*) FROM user_profiles\nWhat is the area code in which the most voters voted? => ", "response": "SELECT state, area_code, count(*) AS num_votes FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY area_code ORDER BY num_votes DESC LIMIT 1"}
{"question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nList all the activities we have. => SELECT activity_name FROM Activity\nHow many dorms have amenities? => SELECT count(DISTINCT dormid) FROM has_amenity\nFind the first and last name of students whose age is younger than the average age. => SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)\nWhat are the different affiliations, and how many schools with each have an enrollment size of above 20000? => SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation\nWhat is the average capacity of the stadiums that were opened in year 2005? => SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005\nWhat are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? => ", "response": "SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')"}
{"question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nHow many different cities do people originate from? => SELECT count(DISTINCT city) FROM Person\nReturn each apartment type code along with the maximum and minimum number of rooms among each type. => SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code\nWhen was the order placed whose shipment tracking number is 3452? Give me the date. => SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452\nFind the name of the ships that have more than one captain. => SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\nWhich countries have more than two members? => SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2\nList the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. => ", "response": "SELECT area_code FROM voter_1.VOTES WHERE contestant_number = 'Tabatha Gehling' AND phone_number IN (SELECT phone_number FROM voter_1.VOTES WHERE contestant_number = 'Kelly Clauss') GROUP BY area_code"}
{"question": "Return the names of the contestants whose names contain the substring 'Al' .", "sql": "select contestant_name from contestants where contestant_name like \"%al%\"", "prompt": "Given a database 'voter_1' have 3 tables named 'AREA_CODE_STATE', 'CONTESTANTS', 'VOTES'. AREA_CODE_STATE tbl have columns: 'area_code', 'state'. CONTESTANTS tbl have columns: 'contestant_number', 'contestant_name'. VOTES tbl have columns: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'. \nTranslate text to SQL: \nWhat are the different names of the product characteristics? => SELECT DISTINCT characteristic_name FROM CHARACTERISTICS\nFind the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick. => SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )\nList the status shared by more than two roller coaster. => SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2\nWhich teams had more than 3 eliminations? => SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3\nHow many drama workshop groups are there in each city? Return both the city and the count. => SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town\nReturn the names of the contestants whose names contain the substring 'Al' . => ", "response": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'"}
{"question": "What are the names of all the countries that became independent after 1950?", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhere is the headquarter of the company founded by James? => SELECT headquarter FROM manufacturers WHERE founder  =  'James'\nWhat campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956? => SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200\nFind the title and star rating of the movie that got the least rating star for each reviewer. => SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID\nFind the list of documents that are both in the most three popular type and have the most three popular structure. => SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\nWhat is the average salary of employees who have a commission percentage that is not null? => SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\nWhat are the names of all the countries that became independent after 1950? => ", "response": "SELECT Name FROM country WHERE IndepYear > 1950"}
{"question": "Give the names of the nations that were founded after 1950.", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the number of routes and airport name for each source airport, order the results by decreasing number of routes. => SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC\nFind the papers which have \"Olin Shivers\" as an author. => SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"\nWhat are the names of departments that have at least one employee. => SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\nFind the first names and degree of all professors who are teaching some class in Computer Info. Systems department. => SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'\nHow many users are there? => SELECT count(*) FROM user_profiles\nGive the names of the nations that were founded after 1950. => ", "response": "SELECT Name FROM country WHERE IndepYear > 1950"}
{"question": "How many countries have a republic as their form of government?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the first name of student who is taking classes from accounting and Computer Info. Systems departments => SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'\nWhich clubs have one or more members whose advisor is \"1121\"? => SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121\nWhat are the themes of farm competitions sorted by year in ascending order? => SELECT Theme FROM farm_competition ORDER BY YEAR ASC\nCount the number of members in club \"Bootup Baltimore\" whose age is below 18. => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18\nCount the number of customers that have the customer type that is most common. => SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1\nHow many countries have a republic as their form of government? => ", "response": "SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic'"}
{"question": "How many countries have governments that are republics?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhich districts have at least two addresses? => SELECT district FROM address GROUP BY district HAVING count(*)  >=  2\nFind the total checking and saving balance of all accounts sorted by the total balance in ascending order. => SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance\nTell me the ages of the oldest and youngest students studying major 600. => SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600\nWhat is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"? => SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"\nHow many distinct cities does the employees live in? => SELECT COUNT(DISTINCT city) FROM EMPLOYEE\nHow many countries have governments that are republics? => ", "response": "SELECT COUNT(*) FROM country WHERE GovernmentForm  =  'Republic'"}
{"question": "What is the total surface area of the countries in the Caribbean region?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the most frequent status of bookings? => SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1\nShow names of technicians in ascending order of quality rank of the machine they are assigned. => SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank\nFind the names of the channels that are broadcast in the morning. => SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'\nRetrieve all the first and last names of authors in the alphabetical order of last names. => SELECT fname ,  lname FROM authors ORDER BY lname\nWhat are the maximum and minimum sales of the companies whose industries are not \"Banking\". => SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\nWhat is the total surface area of the countries in the Caribbean region? => ", "response": "SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean'"}
{"question": "How much surface area do the countires in the Carribean cover together?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many events are there for each party? => SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\nShow the school name and type for schools without a school bus. => SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)\nFind products with max page size as \"A4\" and pages per minute color smaller than 5. => SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5\nWhat are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000? => SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000\nReturn the name, location, and seating of the track that was opened in the most recent year. => SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\nHow much surface area do the countires in the Carribean cover together? => ", "response": "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'"}
{"question": "Which continent is Anguilla in?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow the school name and type for schools without a school bus. => SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)\nWhat are the other account details for the account with the name 338? => SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"\nFind the name of the person who has friends with age above 40 but not under age 30? => SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\nWhat is the zip code the county named \"Howard\" is located in? => SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"\nWhat are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies? => SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5\nWhich continent is Anguilla in? => ", "response": "SELECT Continent FROM country WHERE Name = \"Anguilla\""}
{"question": "What is the continent name which Anguilla belongs to?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names of all songs that have a lower rating than some song of blues genre? => SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")\nWhat are the ages of the gymnasts, ordered descending by their total points? => SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC\nWhat is the type of allergy Cat? => SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"\nHow many problems are there for product voluptatem? => SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"\nShow all home cities except for those having a driver older than 40. => SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40\nWhat is the continent name which Anguilla belongs to? => ", "response": "SELECT Continent FROM country WHERE Code  =  \"AIA\""}
{"question": "Which region is the city Kabul located in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nProvide the last name of the youngest student. => SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\nShow theme and year for all exhibitions in an descending order of ticket price. => SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC\nShow last names for all student who are on scholarship. => SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'\nWhat are the names of products that have never been ordered? => SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id\nWhat are the title and issues of the books? => SELECT Title ,  Issues FROM book\nWhich region is the city Kabul located in? => ", "response": "SELECT region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul')"}
{"question": "What region is Kabul in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the average latitude and longitude of the starting points of all trips? => SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id\nShow details of all investors if they make any transaction with share count greater than 100. => SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100\nHow many papers are written by authors from the institution \"University of Pennsylvania\"? => SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"\nList the names of products that are not in any event. => SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)\nWhat is the name of the department that offers a course that has a description including the word \"Statistics\"? => SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'\nWhat region is Kabul in? => ", "response": "It is not possible to answer this question as there is no information in the given database 'world_1' about the region of Kabul."}
{"question": "Which language is the most popular in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nList the publisher of the publication with the highest price. => SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\nShow the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\". => SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"\nWhat are the names of regions with two or more storms? => SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\nFind the first names of students whose first names contain letter \"a\". => SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'\nWhat are the names of all instructors with a higher salary than any of the instructors in the Biology department? => SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\nWhich language is the most popular in Aruba? => ", "response": "SELECT Language FROM countryLanguage WHERE CountryCode = 'ABW' AND Percentage = (SELECT max(Percentage) FROM countryLanguage WHERE CountryCode = 'ABW')"}
{"question": "What language is predominantly spoken in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the names of stadiums whose capacity is smaller than the average capacity. => SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)\nReturn the phone numbers of employees with salaries between 8000 and 12000. => SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000\nWhat are the names of perpetrators? => SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID\nShow the country names and the corresponding number of players. => SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\nReturn the phone number of the customer who filed the complaint that was raised most recently. => SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1\nWhat language is predominantly spoken in Aruba? => ", "response": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1"}
{"question": "What are the population and life expectancies in Brazil?", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many faculty lines are there in \"San Francisco State University\" in year 2004? => SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"\nHow many females are in the network? => SELECT count(*) FROM Person WHERE gender  =  'female'\nHow many allergy entries are there? => SELECT count(DISTINCT allergy) FROM Allergy_type\nWhat are the names and headquarters of all manufacturers, ordered by revenue descending? => SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC\nCount the number of voting records for each election cycle. => SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\nWhat are the population and life expectancies in Brazil? => ", "response": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'"}
{"question": "Give me Brazil\u2019s population and life expectancies.", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow the price ranges of hotels with 5 star ratings. => SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"\nWhat instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"? => SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"\nFind all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles. => SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200\nShow the average amount of transactions for different investors. => SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id\nWhat is the list of school locations sorted in descending order of school foundation year? => SELECT LOCATION FROM school ORDER BY Founded DESC\nGive me Brazil\u2019s population and life expectancies. => ", "response": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'"}
{"question": "What are the region and population of Angola?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the different majors? => SELECT DISTINCT Major FROM Student\nWhat are the names of all reviewers that have rated 3 or more movies? => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3\nFind the maximum and minimum monthly rental for all student addresses. => SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses\nWhich county do the delegates on \"Appropriations\" committee belong to? Give me the county names. => SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"\nList the personal names and family names of all the students in alphabetical order of family name. => SELECT personal_name ,  family_name FROM Students ORDER BY family_name\nWhat are the region and population of Angola? => ", "response": "SELECT Region, Population FROM country WHERE Name = \"Angola\""}
{"question": "What region does Angola belong to and what is its population?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nReturn the number of customers who have at least one order with \"Cancelled\" status. => SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"\nHow many students and instructors are in each department? => SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name\nWhat is the customer last name, id and phone number with most number of orders? => SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\nReturn the phone numbers for all customers and suppliers. => SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers\nFind the last name and age of the student who has allergy to both milk and cat. => SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\nWhat region does Angola belong to and what is its population? => ", "response": "SELECT Region, Population FROM country WHERE Name = 'Angola'"}
{"question": "What is the average expected life expectancy for countries in the region of Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow the number of male and female assistant professors. => SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex\nFind the grade taught in classroom 103. => SELECT DISTINCT grade FROM list WHERE classroom  =  103\nFor each grade 0 classroom, return the classroom number and the count of students. => SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom\nGive me the dates when the max temperature was higher than 85. => SELECT date FROM weather WHERE max_temperature_f  >  85\nWhat are the names of people who are not entrepreneurs? => SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)\nWhat is the average expected life expectancy for countries in the region of Central Africa? => ", "response": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'"}
{"question": "How long is the people\u2019s average life expectancy in Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many distinct incident type codes are there? => SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident\nShow the parties that have both representatives in New York state and representatives in Pennsylvania state. => SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"\nFind the number of rooms for each bed type. => SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;\nList the top 10 customers by total gross sales. List customers' first and last name and total gross sales. => SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;\nWhat is the unit price of the tune \"Fast As a Shark\"? => SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";\nHow long is the people\u2019s average life expectancy in Central Africa? => ", "response": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = \"Central Africa\";"}
{"question": "What is the name of country that has the shortest life expectancy in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the starting year of the oldest technicians? => SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1\nShow all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers. => SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25\nHow many states have smaller colleges than average? => SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)\nReturn the color description that is most common across all products. => SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1\nWhat are the names of customers who live in Colorado state? => SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"\nWhat is the name of country that has the shortest life expectancy in Asia? => ", "response": "SELECT t1.Name FROM country AS t1 WHERE t1.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = \"Asia\")"}
{"question": "Give the name of the country in Asia with the lowest life expectancy.", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the name of the district with the smallest area? => SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1\nWhat are the names of festivals held in year 2007? => SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007\nWhat is the apartment number of the apartment with the most beds? => SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1\nWhat is the total amount of grant money for research? => SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'\nList all club names in descending alphabetical order. => SELECT name FROM club ORDER BY name DESC\nGive the name of the country in Asia with the lowest life expectancy. => ", "response": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1"}
{"question": "What is the total population and maximum GNP in Asia?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhich employees have the role with code \"HR\"? Find their names. => SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"\nShow the names of products and the number of events they are in, sorted by the number of events in descending order. => SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC\nwhat are the first name and last name of all candidates? => SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id\nlist the first and last names, and the addresses of all employees in the ascending order of their birth date. => SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate\nList the names, phone numbers, and emails of all customers sorted by their dates of becoming customers. => SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer\nWhat is the total population and maximum GNP in Asia? => ", "response": "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'"}
{"question": "How many people live in Asia, and what is the largest GNP among them?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the titles of the papers the author \"Stephanie Weirich\" wrote. => SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"\nGive the different reigns of wrestlers who are not located in Tokyo, Japan. => SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"\nWhich film has the most number of actors or actresses? List the film name, film id and description. => SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1\nReturn the dates of ceremony and the results of all music festivals => SELECT Date_of_ceremony ,  RESULT FROM music_festival\nHow many students are enrolled in college? => SELECT sum(enr) FROM College\nHow many people live in Asia, and what is the largest GNP among them? => ", "response": "SELECT sum(Population) AS Total_Population, MAX(GNP) AS Largest_GNP FROM country WHERE Continent = \"Asia\""}
{"question": "What is the average life expectancy in African countries that are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nCount the number of documents with expenses. => SELECT count(*) FROM Documents_with_expenses\nShow the nicknames of schools that are not in division 1. => SELECT Nickname FROM school_details WHERE Division != \"Division 1\"\nWhat are the gas station ids, locations, and manager names for the gas stations ordered by opening year? => SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year\nWhat are the names of all aicrafts that have never won any match? => SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\nWhat is the name of the department and office location for the professor with the last name of Heffington? => SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'\nWhat is the average life expectancy in African countries that are republics? => ", "response": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'"}
{"question": "Give the average life expectancy for countries in Africa which are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nCount the number of customers recorded. => SELECT count(*) FROM CUSTOMERS\nWhat are the names of all reviewers that have given 3 or 4 stars for reviews? => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4\nShow all information about each body builder. => SELECT * FROM body_builder\nHow many members have the black membership card? => SELECT count(*) FROM member WHERE Membership_card  =  'Black'\nWhat are the ids of all students and number of hours played? => SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid\nGive the average life expectancy for countries in Africa which are republics? => ", "response": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'"}
{"question": "What is the total surface area of the continents Asia and Europe?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the number of projects which each scientist is working on and scientist's name. => SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name\nHow many manufacturers have headquarters in either Tokyo or Beijing? => SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'\nWhat is the headquarter of the company whose founder is James? => SELECT headquarter FROM manufacturers WHERE founder  =  'James'\nWhat is the membership level with the most people? => SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\nShow all storm names affecting region \"Denmark\". => SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\nWhat is the total surface area of the continents Asia and Europe? => ", "response": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'"}
{"question": "Give the total surface area covered by countries in Asia or Europe.", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many assessment notes are there in total? => SELECT count(*) FROM ASSESSMENT_NOTES\nWhat are the descriptions and names of the courses that have student enrollment bigger than 2? => SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\nWhat are the names and dates of races, and the names of the tracks where they are held? => SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id\nList document type codes and the number of documents in each code. => SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\nHow many books are there for each publisher? => SELECT publisher ,  count(*) FROM book_club GROUP BY publisher\nGive the total surface area covered by countries in Asia or Europe. => ", "response": "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')"}
{"question": "How many people live in Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the total amount claimed in the most recently created document. => SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)\nHow many faculty, in total, are there in the year 2002? => SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002\nWhat are the department ids, full names, and salaries for employees who make the most in their departments? => SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id\nWhat is the average cost of procedures that physician John Wen was trained in? => SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nShow first name for all students with major 600. => SELECT Fname FROM Student WHERE Major  =  600\nHow many people live in Gelderland district? => ", "response": "SELECT sum(Population) FROM city WHERE District  =  'Gelderland'"}
{"question": "What is the total population of Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nList the names of players that do not have coaches. => SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)\nWhat are the ids of all the employees who authorize document destruction? => SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\nFind the states of the colleges that have students in the tryout who played in striker position. => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'\nReturn the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates? => SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate\nWhat is the position that is most common among players in match seasons? => SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1\nWhat is the total population of Gelderland district? => ", "response": "SELECT SUM(Population) FROM city WHERE District = 'Gelderland'"}
{"question": "What is the average GNP and total population in all nations whose government is US territory?", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nList the name of film studio that have the most number of films. => SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the descriptions of the courses with name \"database\"? => SELECT course_description FROM COURSES WHERE course_name  =  \"database\"\nHow many medicines were not approved by the FDA? => SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'\nShow the name and location for all tracks. => SELECT name ,  LOCATION FROM track\nCount the number of tourists who did not visit any place. => SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\nWhat is the average GNP and total population in all nations whose government is US territory? => ", "response": "SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm LIKE '%US territory%'"}
{"question": "Give the mean GNP and total population of nations which are considered US territory.", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names of people in ascending order of weight? => SELECT Name FROM People ORDER BY Weight ASC\nWhat are the first names of the professors who do not play Canoeing or Kayaking as activities? => SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\nFind all the vocal types. => SELECT DISTINCT TYPE FROM vocals\nWhat are the names of all departments in alphabetical order? => SELECT dept_name FROM department ORDER BY dept_name\nWhere does the staff member with the first name Elsa live? => SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'\nGive the mean GNP and total population of nations which are considered US territory. => ", "response": "SELECT AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND Region = 'Caribbean' AND GNP IS NOT NULL AND Population IS NOT NULL"}
{"question": "How many unique languages are spoken in the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the id of every employee who has at least a salary of  100000? => SELECT eid FROM Employee WHERE salary  >  100000\nShow the years, book titles, and publishers for all books, in descending order by year. => SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC\nShow the station name and number of trains in each station. => SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id\nHow many songs, on average, are sung by a female artist? => SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"\nFind the name of customers who have more than one loan. => SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\nHow many unique languages are spoken in the world? => ", "response": "SELECT COUNT(DISTINCT Language) FROM countrylanguage"}
{"question": "What is the number of distinct languages used around the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names, address roads, and cities of the branches ordered by opening year? => SELECT name ,  address_road ,  city FROM branch ORDER BY open_year\nList all role codes, role names, and role descriptions. => SELECT role_code ,  role_name ,  role_description FROM ROLES\nWhich trip started from the station with the largest dock count? Give me the trip id. => SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1\nShow names of technicians and series of machines they are assigned to repair. => SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID\nFind the number of games taken place in city Atlanta in 2000. => SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';\nWhat is the number of distinct languages used around the world? => ", "response": "SELECT COUNT(DISTINCT Language) FROM countrylanguage;"}
{"question": "How many type of governments are in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the name of the source user with the highest average trust score. => SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1\nHow many documents do not have any expense? => SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )\nShow ids of students who don't play video game. => SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games\nWhat are the schools that were either founded before 1850 or are public? => SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'\nCount the number of colors that are not used in any products. => SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\nHow many type of governments are in Africa? => ", "response": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'"}
{"question": "How many different forms of governments are there in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFor each policy type, return its type code and its count in the record. => SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code\nWhat are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20? => SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20\nFind the number of rooms with king bed for each decor type. => SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;\nWhat are the total account balances for each customer from Utah or Texas? => SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\nHow many actors are there? => SELECT count(*) FROM actor\nHow many different forms of governments are there in Africa? => ", "response": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'"}
{"question": "What is the total number of languages used in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow all the buildings along with the number of faculty members the buildings have. => SELECT building ,  count(*) FROM Faculty GROUP BY building\nList the names of aircrafts and that did not win any match. => SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\nShow the manager name with most number of gas stations opened after 2000. => SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1\nFind the name and training hours of players whose hours are below 1500. => SELECT pName ,  HS FROM Player WHERE HS  <  1500\nReturn the different statuses of cities, ascending by frequency. => SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\nWhat is the total number of languages used in Aruba? => ", "response": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'"}
{"question": "How many languages are spoken in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the number of students in each major. => SELECT count(*) ,  major FROM student GROUP BY major\nWhat is the campus fee in the year 2000 for San Jose State University? => SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000\nList the height and weight of people in descending order of height. => SELECT Height ,  Weight FROM people ORDER BY Height DESC\nShow all investor details. => SELECT Investor_details FROM INVESTORS\nWhat is the name of party with most number of members? => SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1\nHow many languages are spoken in Aruba? => ", "response": "SELECT count(*) FROM countrylanguage WHERE CountryCode='ABW'"}
{"question": "How many official languages does Afghanistan have?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow last names for all student who are on scholarship. => SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'\nShow the titles of books in descending order of publication price. => SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC\nWhat is the number of cities in the United States with more than 3 airports? => SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3\nWhat is the number of departments in Division \"AS\"? => SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"\nFind the number of distinct amenities. => SELECT count(*) FROM dorm_amenity\nHow many official languages does Afghanistan have? => ", "response": "SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'"}
{"question": "How many official languages are spoken in Afghanistan?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many activities do we have? => SELECT count(*) FROM Activity\nWhat is the most common amenity in the dorms? => SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1\nShow all team names. => SELECT Name FROM Team\nFind the number of albums. => SELECT count(*) FROM ALBUM\nWhat are the emails and phone numbers of custoemrs who have never filed a complaint? => SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)\nHow many official languages are spoken in Afghanistan? => ", "response": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'"}
{"question": "What is name of the country that speaks the largest number of languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the name and hours for the project which has the most scientists assigned to it? => SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\nWhat are the full name (first and last name) and salary for all employees who does not have any value for commission? => SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"\nHow many students are there? => SELECT count(*) FROM list\nWhat is the number of colleges with a student population greater than 15000? => SELECT count(*) FROM College WHERE enr  >  15000\nFind courses that ran in Fall 2009 but not in Spring 2010. => SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010\nWhat is name of the country that speaks the largest number of languages? => ", "response": "SELECT country.Name FROM country JOIN (SELECT CountryCode, COUNT(DISTINCT Language) AS lang_count FROM countrylanguage GROUP BY CountryCode ORDER BY lang_count DESC LIMIT 1) AS T ON country.Code = T.CountryCode"}
{"question": "Give the name of the nation that uses the greatest amount of languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the titles of all movies directed by steven spielberg. => SELECT title FROM Movie WHERE director = 'Steven Spielberg'\nWhat is the name of the tourist attraction that is associated with the photo \"game1\"? => SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"\nWhat is the id of the most recent order? => SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1\nShow the minimum, maximum, and average age for all people. => SELECT min(age) ,  max(age) ,  avg(age) FROM people\nWhat is the average snatch score of body builders? => SELECT avg(Snatch) FROM body_builder\nGive the name of the nation that uses the greatest amount of languages. => ", "response": "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM countrylanguage GROUP BY CountryCode)))"}
{"question": "Which continent has the most diverse languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nCompute the average salary of the players in the team called 'Boston Red Stockings'. => SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'\nList all female students age is older than 18 who is not majoring in 600. List students' first name and last name. => SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';\nWhat are the names of actors ordered descending by the year in which their musical was awarded? => SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\nList the name of actors in ascending alphabetical order. => SELECT Name FROM actor ORDER BY Name ASC\nCount the number of programs broadcast for each time section of a day. => SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day\nWhich continent has the most diverse languages? => ", "response": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  = 'T' GROUP BY T1.Continent ORDER BY COUNT(DISTINCT T2.Language) DESC LIMIT 1"}
{"question": "Which continent speaks the most languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nCount the number of programs broadcast for each time section of a day. => SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day\nHow many different jobs are listed? => SELECT count(DISTINCT job) FROM Person\nWho performed the song named \"Le Pop\"? => SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"\nHow many authors are there? => SELECT count(*) FROM authors\nFind the the grape whose white color grapes are used to produce wines with scores higher than 90. => SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90\nWhich continent speaks the most languages? => ", "response": "SELECT T1.Continent, COUNT(*) AS numLanguages FROM countrylanguage AS T2 JOIN country AS T1 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY numLanguages DESC LIMIT 1"}
{"question": "How many countries speak both English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nCount the number of male students who had class senator votes in the fall election cycle. => SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"\nFind the names of all English songs. => SELECT song_name FROM song WHERE languages  =  \"english\"\nHow many schools are there? => SELECT count(*) FROM school\nHow many distinct kinds of injuries happened after season 2010? => SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010\nShow the id of the employee named Ebba. => SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"\nHow many countries speak both English and Dutch? => ", "response": "SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T' GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2"}
{"question": "What is the number of nations that use English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the result description of the project whose detail is 'sint'? => SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'\nFind the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. => SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\nList the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes. => SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\nHow many counties are there? => SELECT count(*) FROM county_public_safety\nWhat are the different schools and their nicknames, ordered by their founding years? => SELECT school ,  nickname FROM university ORDER BY founded\nWhat is the number of nations that use English and Dutch? => ", "response": "SELECT count(*) FROM countrylanguage WHERE language = 'English' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch')"}
{"question": "What are the names of nations speak both English and French?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the name of the department that offers a course that has a description including the word \"Statistics\"? => SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'\nWhat is the total quantity of products purchased by \"Rodrick Heaney\"? => SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\nShow all student IDs who have at least two allergies. => SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\nWhat is the status code with the least number of customers? => SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;\nFind the name of instructors who are advising more than one student. => SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1\nWhat are the names of nations speak both English and French? => ", "response": "SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN countrylanguage AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.Language  =  'English' AND T3.Language  =  'French'"}
{"question": "Give the names of nations that speak both English and French.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow the ids and details of the investors who have at least two transactions with type code \"SALE\". => SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2\nWhat are the names of all the Japanese constructors that have earned more than 5 points? => SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5\nFind the name of the first 5 customers. => SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5\nCount the number of countries. => SELECT count(*) FROM country\nWhich enzyme names have the substring \"ALA\"? => SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"\nGive the names of nations that speak both English and French. => ", "response": "SELECT c.Name FROM country c \nJOIN countrylanguage l1 on c.Code = l1.CountryCode AND l1.Language = 'English' \nJOIN countrylanguage l2 on c.Code = l2.CountryCode AND l2.Language = 'French'"}
{"question": "What are the names of nations where both English and French are official languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many type of jobs do they have? => SELECT count(DISTINCT job) FROM Person\nFor each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade. => SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade\nFor each aircraft that has won an award, what is its name and how many time has it won? => SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft\nFind all manufacturers' names and their headquarters, sorted by the ones with highest revenue first. => SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC\nHow many orders does Lucas Mancini has? => SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\nWhat are the names of nations where both English and French are official languages? => ", "response": "SELECT DISTINCT T1.Name FROM country T1 JOIN countrylanguage T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' AND T1.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T') ORDER BY T1.Name ASC;"}
{"question": "Give the names of countries with English and French as official languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow names of technicians who are assigned to repair machines with value point more than 70. => SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70\nGive the unit of measure for the product with the name 'cumin'. => SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"\nWhat are all the customer phone numbers under the most popular policy type? => SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)\nFind the number of distinct gender for dorms. => SELECT count(DISTINCT gender) FROM dorm\nShow the ids of all employees who don't destroy any document. => SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\nGive the names of countries with English and French as official languages. => ", "response": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(*) = 2"}
{"question": "What is the number of distinct continents where Chinese is spoken?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nSort the names of all counties in ascending order of population. => SELECT County_name FROM county ORDER BY Population ASC\nList all department names ordered by their starting date. => SELECT dname FROM department ORDER BY mgr_start_date\nWhat are the different cities where people live? => SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\nWhat is the most common type of ships? => SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\nShow the different nationalities and the number of journalists of each nationality. => SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality\nWhat is the number of distinct continents where Chinese is spoken? => ", "response": "SELECT COUNT(DISTINCT Continent) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language='Chinese')"}
{"question": "How many continents speak Chinese?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names and ids of the tourist attractions that are visited at most once? => SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\nWhat are the distinct salaries of all instructors who earned less than the maximum salary? => SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)\nWhich building has the largest number of company offices? Give me the building name. => SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the names and arrival times of trains? => SELECT Name ,  Arrival FROM train\nWhat are the codes and names for all regions, sorted by codes? => SELECT region_code ,  region_name FROM region ORDER BY region_code\nHow many continents speak Chinese? => ", "response": "SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'"}
{"question": "What are the regions that use English or Dutch?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhich game type has least number of games? => SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1\nFind the names of the customers who have an deputy policy. => SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"\nHow many customers have an account? => SELECT count(DISTINCT customer_id) FROM Accounts\nWhat are the different names of mountains ascended by climbers from the country of West Germany? => SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"\nFor each classroom with at least 2 classes, how many classes are offered? => SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2\nWhat are the regions that use English or Dutch? => ", "response": "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'))"}
{"question": "Which regions speak Dutch or English?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the name of the artist who produced the shortest song? => SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1\nWhich vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"\ndisplay the full name (first and last name), and salary of those employees who working in any department located in London. => SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'\nWhat are the distinct president votes on 08/30/2015? => SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"\nWhat are the id of each employee and the number of document destruction authorised by that employee? => SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID\nWhich regions speak Dutch or English? => ", "response": "SELECT Region FROM country WHERE (Language = \"Dutch\" OR Language = \"English\") GROUP BY Region"}
{"question": "What are the countries where either English or Dutch is the official language ?", "sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat details are there on the research staff? List the result in ascending alphabetical order. => SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC\nShow the names and main services for train stations that have the top three total number of passengers. => SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3\nFind the total student enrollment for different affiliation type schools. => SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\nWhich faculty members advise two ore more students? Give me their faculty ids. => SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2\nShow director with the largest number of show times in total. => SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1\nWhat are the countries where either English or Dutch is the official language ? => ", "response": "SELECT DISTINCT Country.Name FROM Country \nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE CountryLanguage.IsOfficial = 'T' AND (CountryLanguage.Language = 'English' OR CountryLanguage.Language = 'Dutch') ORDER BY Country.Name ASC"}
{"question": "Which countries have either English or Dutch as an official language?", "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many exhibition are there in year 2005 or after? => SELECT count(*) FROM exhibition WHERE YEAR  >=  2005\nList the first and last name of the students who do not have any food type allergy. => SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\nWhich order has the most recent shipment? Give me the order id. => SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)\nWho are the nominees who have been nominated for both a Tony Award and a Drama Desk Award? => SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\nWhat are the positions with both players having more than 20 points and less than 10 points. => SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10\nWhich countries have either English or Dutch as an official language? => ", "response": "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  \"English\" AND IsOfficial  =  \"T\") OR Code IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  \"Dutch\" AND IsOfficial  =  \"T\")"}
{"question": "Which language is the most popular on the Asian continent?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nPlease show the songs that have result \"nominated\" at music festivals. => SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"\nWhat are the names of players who train between 500 and 1500 hours? => SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500\nWhat is the number of routes whose destinations are Italian airports? => SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\nCount the number of customers who do not have an account. => SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\nfind the number of medicines offered by each trade. => SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name\nWhich language is the most popular on the Asian continent? => ", "response": "SELECT Language FROM countrylanguage AS C JOIN country AS Cn ON C.CountryCode = Cn.Code WHERE Cn.Continent = 'Asia' ORDER BY Percentage DESC LIMIT 1"}
{"question": "What is the language that is used by the largest number of Asian nations?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFor each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season. => SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC\nHow many companies are headquartered in the US? => SELECT count(*) FROM company WHERE Headquarters  =  'USA'\nHow many products have a price higher than the average? => SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)\nWhat are the ids and names for each of the documents? => SELECT document_id ,  document_name FROM Documents\nHow many students are enrolled in some classes that are taught by an accounting professor? => SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'\nWhat is the language that is used by the largest number of Asian nations? => ", "response": "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent='Asia') GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1"}
{"question": "Which languages are spoken by only one country in republic governments?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind names of all students who took some course and the course description. => SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code\nWhat is the total and minimum enrollment of all schools? => SELECT sum(enrollment) ,  min(enrollment) FROM university\nWhat are the names and flags of ships that do not have a captain with the rank of Midshipman? => SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\nWhich state can address \"6862 Kaitlyn Knolls\" possibly be in? => SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"\nFor each team, return the team name, id and the maximum salary among the team. => SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;\nWhich languages are spoken by only one country in republic governments? => ", "response": "SELECT Language FROM countrylanguage WHERE IsOfficial  =  'T' AND CountryCode IN (SELECT Code FROM country WHERE GovernmentForm  LIKE  '%Republic%' GROUP BY Code HAVING COUNT(*) = 1)"}
{"question": "What languages are only used by a single country with a republic government?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the most common competition type? => SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1\nWhich country has at most 3 stadiums listed? => SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3\nShow all member names who are not in charge of any event. => SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\nSelect the project names which are not assigned yet. => SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\nWhat are the names of all the video games and their types in alphabetical order? => SELECT gname ,  gtype FROM Video_games ORDER BY gname\nWhat languages are only used by a single country with a republic government? => ", "response": "SELECT l.Language \nFROM countrylanguage l \nJOIN country c ON c.Code = l.CountryCode \nWHERE c.GovernmentForm = 'Republic' \nGROUP BY l.Language \nHAVING COUNT(DISTINCT c.Code) = 1;"}
{"question": "Find the city with the largest population that uses English.", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nList the details of the customers who do not have any policies. => SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id\nWhat are the titles and directors of the films were never presented in China? => SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')\nWhat are the ids of stations that are located in San Francisco and have average bike availability above 10. => SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10\nFind the state of the college which player Charles is attending. => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'\nShow all date and share count of transactions. => SELECT date_of_transaction ,  share_count FROM TRANSACTIONS\nFind the city with the largest population that uses English. => ", "response": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1"}
{"question": "What is the most populace city that speaks English?", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the name of the customer that made the order with the largest quantity? => SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)\nGive the city that the student whose family name is Kim lives in. => SELECT city_code FROM Student WHERE LName  =  \"Kim\"\nWhat is the id and name of the enzyme that can interact with the most medicines as an activator? => SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nWhat are the names of all directors whose movies have been reviewed by Sarah Martinez? => SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'\nFind the year which offers the largest number of courses. => SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\nWhat is the most populace city that speaks English? => ", "response": "SELECT t1.Name FROM city AS t1 JOIN countrylanguage AS t2 ON t1.CountryCode  =  t2.CountryCode JOIN country AS t3 ON t1.CountryCode  =  t3.Code WHERE t2.Language  =  'English' ORDER BY t1.Population DESC LIMIT 1"}
{"question": "Find the name, population and expected life length of asian country with the largest area?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the number of routes whose destinations are Italian airports? => SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\nWhat are the names and capitals of each country? => SELECT Country_name ,  Capital FROM country\nFind the famous titles of artists that do not have any volume. => SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\nList the dates of enrollment and completion of the student with personal name \"Karson\". => SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"\nShow company name and main industry without a gas station. => SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\nFind the name, population and expected life length of asian country with the largest area? => ", "response": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1"}
{"question": "What are the name, population, and life expectancy of the largest Asian country by land?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the document type name for the document with name \"How to read a book\"? => SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"\nWhat are card ids, customer ids, card types, and card numbers for each customer card? => SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards\nFind the name and access counts of all documents, in alphabetic order of the document name. => SELECT document_name ,  access_count FROM documents ORDER BY document_name\nList the email addresses of the drama workshop groups located in Alaska state. => SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"\nReturn all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40. => SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40\nWhat are the name, population, and life expectancy of the largest Asian country by land? => ", "response": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1"}
{"question": "What is average life expectancy in the countries where English is not the official language?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the address of the location \"UK Gallery\"? => SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\nWhat are the names and decor of rooms with a king bed? Sort them by their price => SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;\nWhat is the description of the most popular role among users that have logged in? => SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)\nWhat is the name and country of origin for each artist who has released a song with a resolution higher than 900? => SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1\nWhat are the names of wrestlers and their teams in elimination, ordered descending by days held? => SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC\nWhat is average life expectancy in the countries where English is not the official language? => ", "response": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"}
{"question": "Give the mean life expectancy of countries in which English is not the official language.", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nList the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents. => SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;\nWhat are the official names of cities that have hosted more than one competition? => SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\nFind the number of papers published by the institution \"University of Pennsylvania\". => SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"\nWhat is the total number of airlines? => SELECT count(*) FROM airlines\nWhich accelerator name contains substring \"Opera\"? => SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"\nGive the mean life expectancy of countries in which English is not the official language. => ", "response": "SELECT AVG(c.LifeExpectancy) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND cl.IsOfficial = 'T'"}
{"question": "What is the total number of people living in the nations that do not use English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the name and id of the team with the most victories in 2008 postseason? => SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\nWhat are the first names of all the students aged above 22? => SELECT Fname FROM STUDENT WHERE Age  >  22\nWho are the ministers and what parties do they belong to, listed descending by the times they took office? => SELECT minister ,  party_name FROM party ORDER BY took_office DESC\nFind the last names of all the authors that have written a paper with title containing the word \"Monadic\". => SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"\nHow many gas station are opened between 2000 and 2005? => SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005\nWhat is the total number of people living in the nations that do not use English? => ", "response": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"}
{"question": "How many people live in countries that do not speak English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow the reign and days held of wrestlers. => SELECT Reign ,  Days_held FROM wrestler\nHow many customers in state of CA? => SELECT count(*) FROM customers WHERE state = \"CA\";\nFind the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\". => SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"\nHow many members of \"Bootup Baltimore\" are older than 18? => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18\nShow the country names and the corresponding number of players. => SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\nHow many people live in countries that do not speak English? => ", "response": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"}
{"question": "What is the official language spoken in the country whose head of state is Beatrix?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many engineers did each staff contact? List both the contact staff name and number of engineers contacted. => SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name\nWhat are the names of climbers who are not from the country of Switzerland? => SELECT Name FROM climber WHERE Country != \"Switzerland\"\nList the name of the shop with the latest open year. => SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1\nWho are the nominees who have been nominated for both a Tony Award and a Drama Desk Award? => SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\nShow student ids who are on scholarship and have major 600. => SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'\nWhat is the official language spoken in the country whose head of state is Beatrix? => ", "response": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = \"Beatrix\" AND IsOfficial = \"T\")"}
{"question": "What is the official language used in the country the name of whose head of state is Beatrix.", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names for tracks without a race in class 'GT'. => SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\nWhat are the positions of both players that have more than 20 20 points and less than 10 points? => SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10\nWhat is the name of the track that has had the greatest number of races? => SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\nWhat is the average age for all managers? => SELECT avg(Age) FROM manager\nWhich attribute definitions have attribute value 0? Give me the attribute name and attribute ID. => SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0\nWhat is the official language used in the country the name of whose head of state is Beatrix. => ", "response": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix' AND IsOfficial = 'T')"}
{"question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the number of students whose city code is NYC and who have class senator votes in the spring election cycle. => SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"\nShow card type codes with at least 5 cards. => SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\nHow many vocal types are used in the song \"Le Pop\"? => SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\nWhat are the names of stations that have latitude lower than 37.5? => SELECT name FROM station WHERE lat  <  37.5\nHow many students participated in tryouts for each college by descennding count? => SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC\nWhat is the total number of unique official languages spoken in the countries that are founded before 1930? => ", "response": "SELECT count(DISTINCT language) FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = \"T\""}
{"question": "For the countries founded before 1930, what is the total number of distinct official languages?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind all the papers published by the institution \"Google\". => SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\nWhat are the types of competition and number of competitions for that type? => SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type\nWhich department has the most professors with a Ph.D.? => SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1\nFind the number of complaints with Product Failure type for each complaint status. => SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code\nShow the names of authors from college \"Florida\" or \"Temple\" => SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"\nFor the countries founded before 1930, what is the total number of distinct official languages? => ", "response": "SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'"}
{"question": "What are the countries that have greater surface area than any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the name and description of the role with code \"MG\". => SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"\nWhat are the average height and weight across males (sex is M)? => SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'\nHow many employees have salary between 100000 and 200000? => SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000\nWhat are the names of all employees who have a salary higher than average? => SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\nWhat are the names of artists who are Male and are from UK? => SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"\nWhat are the countries that have greater surface area than any country in Europe? => ", "response": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')"}
{"question": "Which countries have greater area than that of any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes? => SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2\nCount the number of different parties. => SELECT count(DISTINCT party_name) FROM party\nFind the full name of employee who supported the most number of customers. => SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nList the names of people that are not employed by any company => SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)\nFind the unit of measurement and product category code of product named \"chervil\". => SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"\nWhich countries have greater area than that of any country in Europe? => ", "response": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')"}
{"question": "What are the African countries that have a  population less than any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nwhich poll source does the highest oppose rate come from? => SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1\nReturn the code of the city that has the most students. => SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\nReturn the name and id of the furniture with the highest market rate. => SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1\nShow the shipping charge and customer id for customer orders with order status Cancelled or Paid. => SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'\nWhat are all the customer phone numbers under the most popular policy type? => SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)\nWhat are the African countries that have a  population less than any country in Asia? => ", "response": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')"}
{"question": "Which African countries have a smaller population than that of any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the number of web accelerators used for each Operating system. => SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system\nWhat is the average cost of procedures that physician John Wen was trained in? => SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nFind the first names and offices of all professors sorted by alphabetical order of their first name. => SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname\nShow the locations shared by shops with open year later than 2012 and shops with open year before 2008. => SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008\nHow many different instruments are used in the song \"Badlands\"? => SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"\nWhich African countries have a smaller population than that of any country in Asia? => ", "response": "SELECT DISTINCT C1.Name \nFROM country AS C1 \nWHERE C1.Continent = 'Africa' AND \n      C1.Population < ALL(SELECT C2.Population FROM country AS C2 WHERE C2.Continent = 'Asia')"}
{"question": "Which Asian countries have a population that is larger than any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow the name of each county along with the corresponding number of delegates from that county. => SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\nShow the party that has the most people. => SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\nShow all student ids who are older than 20. => SELECT StuID FROM Student WHERE age  >  20\nHow many customers are there in the customer type with the most customers? => SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1\nFind the the grape whose white color grapes are used to produce wines with scores higher than 90. => SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90\nWhich Asian countries have a population that is larger than any country in Africa? => ", "response": "SELECT Name FROM country WHERE Continent = \"Asia\" AND Population > (SELECT MAX(Population) FROM country WHERE Continent = \"Africa\")"}
{"question": "What are the Asian countries which have a population larger than that of any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the top 10 customers' first and last names with the highest gross sales, and also what are the sales? => SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;\nWhat is the average fee for a CSU campus in the year of 1996? => SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\nFind the author for each submission and list them in ascending order of submission score. => SELECT Author FROM submission ORDER BY Scores ASC\nWhich cities have lower temperature in March than in July and have been once host cities? => SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\nShow the unique first names, last names, and phone numbers for all customers with any account. => SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\nWhat are the Asian countries which have a population larger than that of any country in Africa? => ", "response": "SELECT Name FROM country WHERE Continent  =  'Asia' AND Population  >  (SELECT MAX(Population) FROM country WHERE Continent  =  'Africa')"}
{"question": "What are the country codes for countries that do not speak English?", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nPlease show the software platforms of devices in descending order of the count. => SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC\nShow different types of ships and the average tonnage of ships of each type. => SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE\nShow the authors of submissions and the acceptance results of their submissions. => SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID\nFind the first and last name of students whose age is younger than the average age. => SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)\nList document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS. => SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";\nWhat are the country codes for countries that do not speak English? => ", "response": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"}
{"question": "Return the country codes for countries that do not speak English.", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhich apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers. => SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\nWho are the friends of Alice that are doctors? => SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'\nReturn the address content for the customer whose name is \"Maudie Kertzmann\". => SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"\nWhat is the campus fee of \"San Francisco State University\" in year 1996? => SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996\nWhat are the first name and gender of the students who have allergy to milk but can put up with cats? => SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\nReturn the country codes for countries that do not speak English. => ", "response": "SELECT CountryCode FROM countrylanguage WHERE Language <> \"English\" GROUP BY CountryCode"}
{"question": "What are the country codes of countries where people use languages other than English?", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many bands are there? => SELECT count(*) FROM Band\nList the most common result of the musicals. => SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the id and first name of the student whose addresses have the highest average monthly rental? => SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1\nShow all distinct location names. => SELECT DISTINCT Location_Name FROM LOCATIONS\nWhat are the first and last name of all biology professors? => SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"\nWhat are the country codes of countries where people use languages other than English? => ", "response": "SELECT CountryCode FROM countrylanguage WHERE Language != 'English' GROUP BY CountryCode"}
{"question": "Give the country codes for countries in which people speak langauges that are not English.", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names of all of Alice's friends of friends? => SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'\nFind all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona. => SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"\nFind all the papers published by the institution \"Google\". => SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\nWhat is the title and director for the movie with highest worldwide gross in the year 2000 or before? => SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1\nShow the names of phones that are on market with number of shops greater than 50. => SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50\nGive the country codes for countries in which people speak langauges that are not English. => ", "response": "SELECT DISTINCT cl.CountryCode FROM countrylanguage AS cl WHERE cl.Language  <>  'English'"}
{"question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nOn which day has it neither been foggy nor rained in the zip code of 94107? => SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"\nFind the policy type the most customers choose. => SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1\nFind the distinct names of all races held between 2014 and 2017? => SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\nWhat is the average price for each type of product? => SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code\nWhat are the countries of all airlines whose names start with Orbit? => SELECT country FROM airlines WHERE name LIKE 'Orbit%'\nWhat are the codes of the countries that do not speak English and whose government forms are not Republic? => ", "response": "SELECT Code FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'"}
{"question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nwhat is the phone number of employees whose salary is in the range of 8000 and 12000? => SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000\nList the names of all the channels owned by either CCTV or HBS => SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'\nFind the last name and hire date of the professor who is in office DRE 102. => SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'\nAmong all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount. => SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\nFind the product names whose average product price is below 1000000. => SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000\nReturn the codes of countries that do not speak English and do not have Republics for governments. => ", "response": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm NOT LIKE '%Republic%'"}
{"question": "Which cities are in European countries where English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the destinations and number of flights to each one? => SELECT destination ,  count(*) FROM Flight GROUP BY destination\nWhich orders have shipment after 2000-01-01? Give me the order ids. => SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"\nWhat are the different names of all songs without back vocals? => SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\nShow all product names and the total quantity ordered for each product name. => SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name\nFind the id of suppliers whose average amount purchased for each product is above 50000 or below 30000. => SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000\nWhich cities are in European countries where English is not the official language? => ", "response": "SELECT DISTINCT c.Name FROM city AS c INNER JOIN country AS co ON c.CountryCode = co.Code INNER JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language != 'English' AND cl.IsOfficial = 'F';"}
{"question": "What are the names of cities in Europe for which English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow all the locations with at least two cinemas with capacity above 300. => SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\nHow many countries are there in total? => SELECT count(*) FROM country\nShow names of technicians in ascending order of quality rank of the machine they are assigned. => SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank\nHow many different teams have had eliminated wrestlers? => SELECT COUNT (DISTINCT team) FROM elimination\nWhat is the id and family name of the driver who has the longest laptime? => SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1\nWhat are the names of cities in Europe for which English is not the official language? => ", "response": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T'"}
{"question": "Which unique cities are in Asian countries where Chinese is the official language ?", "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders. => SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;\nfind the total market rate of the furnitures that have the top 2 market shares. => SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2\nHow old is the average person for each job? => SELECT avg(age) ,  job FROM Person GROUP BY job\nShow the region name with at least two storms. => SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\nReturn the type name, type description, and date of creation for each document. => SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code\nWhich unique cities are in Asian countries where Chinese is the official language ? => ", "response": "SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' ;"}
{"question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names of artists who are Male and are from UK? => SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"\nHow many allergy entries are there? => SELECT count(DISTINCT allergy) FROM Allergy_type\nreturn all columns of the albums created in the year of 2012. => SELECT * FROM Albums WHERE YEAR  =  2012\nFind the names and publication dates of all catalogs that have catalog level number greater than 5. => SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5\nShow the names and heights of buildings with at least two institutions founded after 1880. => SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2\nReturn the different names of cities that are in Asia and for which Chinese is the official language. => ", "response": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode  =  country.Code JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  \"Asia\" AND countrylanguage.Language  =  \"Chinese\" AND countrylanguage.IsOfficial  =  \"T\""}
{"question": "What are the name, independence year, and surface area of the country with the smallest population?", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFor which countries are there more than four distinct addresses listed? => SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4\nWhat is the name of the person who has the oldest average age for their friends, and what is that average age? => SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1\nWho were the governors of the parties associated with delegates from district 1? => SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1\nFor each user, return the name and the average rating of reviews given by them. => SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id\nWhat are the apartment number, start date, and end date of each apartment booking? => SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id\nWhat are the name, independence year, and surface area of the country with the smallest population? => ", "response": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)"}
{"question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the number of employees that have a salary between 100000 and 200000? => SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000\nCount the number of customer cards of the type Debit. => SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"\nWhich authors have first name \"Amal\"? List their last names. => SELECT lname FROM authors WHERE fname  =  \"Amal\"\nWhat is the maximum level of managers in countries that are not \"Australia\"? => SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"\nWhat are the players who played for Columbus Crew, and how many years did each play for? => SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\nGive the name, year of independence, and surface area of the country that has the lowest population. => ", "response": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1"}
{"question": "What are the population, name and leader of the country with the largest area?", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nList official names of cities in descending order of population. => SELECT Official_Name FROM city ORDER BY Population DESC\nWhat is the name of the most expensive product? => SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1\nHow many different instructors have taught some course? => SELECT COUNT (DISTINCT id) FROM teaches\nWhat are the hosts of competitions whose theme is not \"Aliens\"? => SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\nWhat are the names of countries that have both players with position forward and players with position defender? => SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\nWhat are the population, name and leader of the country with the largest area? => ", "response": "SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}
{"question": "Give the name, population, and head of state for the country that has the largest area.", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names, headquarters and founders of the company with the highest revenue? => SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1\nWhat are the ids and names for each of the documents? => SELECT document_id ,  document_name FROM Documents\nShow all titles and their instructors' names for courses in 2008, in alphabetical order by title. => SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title\nWhen did the first staff member start working? => SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1\nList all the names of schools with an endowment amount smaller than or equal to 10. => SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10\nGive the name, population, and head of state for the country that has the largest area. => ", "response": "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}
{"question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow ids for all aircrafts with more than 1000 distance. => SELECT aid FROM Aircraft WHERE distance  >  1000\nReturn the average money requested across all entrepreneurs. => SELECT avg(Money_Requested) FROM entrepreneur\nHow many international and domestic passengers are there in the airport London Heathrow? => SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"\nHow many drivers were in the Australian Grand Prix held in 2009? => SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009\nWhat are the ids of courses offered in Fall of 2009 but not in Spring of 2010? => SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010\nReturn the country name and the numbers of languages spoken for each country that speaks at least 3 languages. => ", "response": "SELECT Name, COUNT(Language) AS Language_Count FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY CountryCode HAVING COUNT(Language) >= 3"}
{"question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many movie reviews does each director get? => SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director\nCompute the mean price of procedures physician John Wen was trained in. => SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nWhat is the first and last name of all students who are younger than average? => SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)\nCount the number of accounts. => SELECT count(*) FROM Accounts\nWhich company was started by the entrepreneur with the greatest height? => SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\nWhat are the names of countries that speak more than 2 languages, as well as how many languages they speak? => ", "response": "SELECT T1.Name, COUNT(T2.Language) AS Number_of_Languages \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode \nGROUP BY T1.Name \nHAVING COUNT(T2.Language) > 2"}
{"question": "Find the number of cities in each district whose population is greater than the average population of cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the name of all students who were in the tryout sorted in alphabetic order. => SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\nShow all allergy types. => SELECT DISTINCT allergytype FROM Allergy_type\nReturn the famous titles of the artist called \"Triumfall\". => SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"\nShow the zip code of the county with name \"Howard\". => SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"\nWhat are the start station's name and id for the one that had the most start trips in August? => SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1\nFind the number of cities in each district whose population is greater than the average population of cities? => ", "response": "SELECT District, COUNT(*) FROM city \nWHERE Population > (SELECT AVG(Population) FROM city) \nGROUP BY District"}
{"question": "How many cities in each district have a population that is above the average population across all cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the prices of wines produced before the year of 2010? => SELECT Price FROM WINE WHERE YEAR  <  2010\nWhat are all company names that have a corresponding movie directed in the year 1999? => SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999\nWhich vocal type has the band mate with last name \"Heilo\" played the most? => SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nFind all the cities that have 2 to 4 parks. => SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\nFind the the customer details and id for the customers who had more than one policy. => SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\nHow many cities in each district have a population that is above the average population across all cities? => ", "response": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District"}
{"question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the first name, gpa and phone number of the top 5 students with highest gpa? => SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5\nWhat is the first and last name of the professor in biology department? => SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"\nWhat are all the policy types of the customer named \"Dayana Robel\"? => SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"\nHow long is the total lesson time took by the customer named Rylan Goodwin? => SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";\nWhich school has the smallest amount of professors? => SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\nFind the government form name and total population for each government form whose average life expectancy is longer than 72. => ", "response": "SELECT T1.GovernmentForm, SUM(T1.Population) as TotalPopulation FROM country AS T1 WHERE T1.LifeExpectancy > 72 GROUP BY T1.GovernmentForm"}
{"question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many members are in each party? => SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\nWhat are the total amount of money in the invoices billed from Chicago, Illinois? => SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\nFind the name and building of the department with the highest budget. => SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1\nWhat are the movie titles with the highest average rating and what are those ratings? => SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1\nWhat instrument is used the most? => SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1\nWhat are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? => ", "response": "SELECT governmentForm, SUM(population) FROM country WHERE lifeExpectancy > 72 GROUP BY governmentForm"}
{"question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names of all aircrafts that John Williams have certificates to be able to fly? => SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"\nWhat is the id and last name of the driver who participated in the most races after 2010? => SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\nWhat are the names of players who train between 500 and 1500 hours? => SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500\nFind the number of students taught by TARRING LEIA. => SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"\nList the customer event id and the corresponding move in date and property id. => SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events\nFind the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? => ", "response": "SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72"}
{"question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nReturn the first names of the 5 staff members who have handled the most complaints. => SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5\nFind the famous titles of artists that do not have any volume. => SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\nWhat are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times? => SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100\nGive me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities? => SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\nFind the names of females who are friends with Zach => SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'\nWhat are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? => ", "response": "SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS avg_life_expectancy FROM country WHERE continent NOT IN (SELECT continent FROM country WHERE AVG(lifeexpectancy) >= 72) GROUP BY continent"}
{"question": "What are the names and areas of countries with the top 5 largest area?", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the different album labels listed? => SELECT DISTINCT label FROM Albums\nReturn the codes of the document types that do not have a total access count of over 10000. => SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000\nShow the invoice number and the number of transactions for each invoice. => SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\nWhich delegates are from counties with population smaller than 100000? => SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000\nWhich department has the highest average instructor salary? => SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1\nWhat are the names and areas of countries with the top 5 largest area? => ", "response": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}
{"question": "Return the names and surface areas of the 5 largest countries.", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds? => SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000\nWhat are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE? => SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"\nWhat are the maximum and minimum number of silver medals for clubs. => SELECT max(Silver) ,  min(Silver) FROM club_rank\nFind the first name and gender of the student who has allergy to milk but not cat. => SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\nHow many customers are there? => SELECT count(*) FROM customers\nReturn the names and surface areas of the 5 largest countries. => ", "response": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}
{"question": "What are names of countries with the top 3 largest population?", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the names of candidates who have a lower support rate than oppose rate? => SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\nWhich physician was trained in the procedure that costs the most. => SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1\nPlease list all album titles in alphabetical order. => SELECT Title FROM ALBUM ORDER BY Title\nList the names of companies by ascending number of sales. => SELECT Name FROM company ORDER BY Sales_in_Billion ASC\nShow the average share count of transactions each each investor, ordered by average share count. => SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)\nWhat are names of countries with the top 3 largest population? => ", "response": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}
{"question": "Return the names of the 3 most populated countries.", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the nicknames of schools whose division is not 1? => SELECT Nickname FROM school_details WHERE Division != \"Division 1\"\nShow the outcome code of mailshots along with the number of mailshots in each outcome code. => SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code\nHow long is the total lesson time took by the customer named Rylan Goodwin? => SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";\nShow the parties that have both representatives in New York state and representatives in Pennsylvania state. => SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"\nFind the total budgets of the Marketing or Finance department. => SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\nReturn the names of the 3 most populated countries. => ", "response": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}
{"question": "What are the names of the nations with the 3 lowest populations?", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many orders does Lucas Mancini has? => SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\nWhich publishers did not publish a book in 1989? => SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989\nFind the names of the regions which were affected by the storm that killed the greatest number of people. => SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1\nReturn all the committees that have delegates from Democratic party. => SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\nFind the customer name and date of the orders that have the status \"Delivered\". => SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"\nWhat are the names of the nations with the 3 lowest populations? => ", "response": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;"}
{"question": "Return the names of the 3 countries with the fewest people.", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the emails of the user named \"Mary\". => SELECT email FROM user_profiles WHERE name  =  'Mary'\nFor each staff id, what is the description of the role that is involved with the most number of projects? => SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1\nShow the ids of the employees who don't authorize destruction for any document. => SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\nList the names of all the distinct customers who bought a keyboard. => SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\nWhat is the name of the track that has had the greatest number of races? => SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\nReturn the names of the 3 countries with the fewest people. => ", "response": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"}
{"question": "how many countries are in Asia?", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow the names of cities in counties that have a crime rate less than 100. => SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)\nList the distinct ranges of the mountains with the top 3 prominence. => SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3\nShow the names of members and the decoration themes they have. => SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID\nShow the name of track and the number of races in each track. => SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\nShow the start dates and end dates of all the apartment bookings. => SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings\nhow many countries are in Asia? => ", "response": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'"}
{"question": "Count the number of countries in Asia.", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nCount the number of distinct delegates who are from counties with population above 50000. => SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000\nHow many faculty members did the university that conferred the most degrees in 2002 have? => SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1\nWhat is the name of the race that occurred most recently? => SELECT name FROM races ORDER BY date DESC LIMIT 1\nWhat is the last name of the musician that have produced the most songs? => SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\nWhat are the heights of body builders with total score smaller than 315? => SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315\nCount the number of countries in Asia. => ", "response": "SELECT count(*) FROM country WHERE Continent = 'Asia'"}
{"question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nFind the \"date became customers\" of the customers whose ID is between 10 and 20. => SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20\nList the names of all scientists sorted in alphabetical order. => SELECT name FROM scientists ORDER BY name\nWhat is the role with the smallest number of employees? Find the role codes. => SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1\nHow many dorms are in the database? => SELECT count(*) FROM dorm\nWhat is the name and country of origin of the artist who released a song that has \"love\" in its title? => SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"\nWhat are the names of the countries that are in the continent of Europe and have a population of 80000? => ", "response": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000"}
{"question": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \ndisplay all the information of those employees who did not have any job in the past. => SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)\nFind the author who achieved the highest score in a submission. => SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1\nList the name of all playlist. => SELECT name FROM playlists;\nWhat are the distinct ages of students who have secretary votes in the fall election cycle? => SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\nWhat are the dates for the documents with both 'GV' type and 'SF' type expenses? => SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'\nGive the names of countries that are in Europe and have a population equal to 80000. => ", "response": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;"}
{"question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat is the name of every college in alphabetical order that has more than 18000 students enrolled? => SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName\nWhen did the first payment happen? => SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1\nList the distinct names of the instructors, ordered by name. => SELECT DISTINCT name FROM  instructor ORDER BY name\nList the names of states that have more than 2 parks. => SELECT state FROM park GROUP BY state HAVING count(*)  >  2;\nWhich room has the highest base price? => SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;\nWhat is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? => ", "response": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent='North America' AND SurfaceArea > 3000;"}
{"question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the different names, locations, and products of the enzymes that are capable inhibitor interactions? => SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'\nReturn the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'. => SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\nList the names of phones that are not on any market. => SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)\nWhat are all the employee ids and the names of the countries in which they work? => SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\nWhat are the names of representatives with more than 10000 votes in election? => SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000\nGive the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . => ", "response": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000"}
{"question": "What are the cities whose population is between 160000 and 900000?", "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the three countries that the least players are from? => SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\nHow many different countries are all the swimmers from? => SELECT count(DISTINCT nationality) FROM swimmer\nList all department names ordered by their starting date. => SELECT dname FROM department ORDER BY mgr_start_date\nHow many phones are there? => SELECT count(*) FROM phone\nShow all game names played by Linda Smith => SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"\nWhat are the cities whose population is between 160000 and 900000? => ", "response": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;"}
{"question": "Return the names of cities that have a population between 160000 and 900000 .", "sql": "select name from city where population between 160000 and 900000", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhat are the first names of all the students? => SELECT DISTINCT fname FROM student\nHow many products are never booked with amount higher than 200? => SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )\nShow the name, phone, and payment method code for all customers in descending order of customer number. => SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC\nWhat are the three largest cities in terms of regional population? => SELECT city FROM city ORDER BY regional_population DESC LIMIT 3\nFind the maximum and average capacity among rooms in each building. => SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\nReturn the names of cities that have a population between 160000 and 900000 . => ", "response": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000"}
{"question": "Which language is spoken by the largest number of countries?", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow the name, role code, and date of birth for the employee with name 'Armani'. => SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'\nWhat is the name corresponding to the accoung with the lowest sum of checking and savings balances? => SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1\nWhat are the vocal types used in song \"Le Pop\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\nWhat are the start station's name and id for the one that had the most start trips in August? => SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the names of the pilots in alphabetical order? => SELECT Name FROM pilot ORDER BY Name ASC\nWhich language is spoken by the largest number of countries? => ", "response": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1"}
{"question": "Give the language that is spoken in the most countries.", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow the names of products that are in at least two events in ascending alphabetical order of product name. => SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name\nwhat is id of students who registered some courses but the least number of courses in these students? => SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1\nCount the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10. => SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10\nFor each grant id, how many documents does it have, and which one has the most? => SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1\nShow the average population of all counties. => SELECT avg(Population) FROM county\nGive the language that is spoken in the most countries. => ", "response": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1"}
{"question": "What is the language spoken by the largest percentage of people in each country?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nShow theme and year for all exhibitions in an descending order of ticket price. => SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC\nCount the number of cities in Australia. => SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\nWhat is the average price range of five star hotels that allow pets? => SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\nWhat is the average number of stars that each reviewer awards for a movie? => SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\nWhat are the cities that have more than 2 airports sorted by number of airports? => SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)\nWhat is the language spoken by the largest percentage of people in each country? => ", "response": "SELECT T1.CountryCode, T2.Language \nFROM countrylanguage AS T1 \nJOIN (\n    SELECT CountryCode, Language, Percentage \n    FROM countrylanguage \n    WHERE Percentage = (\n        SELECT MAX(Percentage) \n        FROM countrylanguage AS innerT \n        WHERE innerT.CountryCode = countrylanguage.CountryCode\n    )\n) AS T2 ON T1.CountryCode = T2.CountryCode \nGROUP BY T1.CountryCode"}
{"question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhich locations have 2 or more cinemas with capacity over 300? => SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\nReturn the result that is most frequent at music festivals. => SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1\nShow the players and the years played. => SELECT Player ,  Years_Played FROM player\nHow many events have each participants attended? List the participant id, type and the number. => SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\nFind the job ID for those jobs which average salary is above 8000. => SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000\nWhat are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? => ", "response": "SELECT cl.CountryCode, cl.Language\nFROM countrylanguage cl\nJOIN (\n    SELECT CountryCode, MAX(Percentage) AS MaxPercentage\n    FROM countrylanguage\n    GROUP BY CountryCode\n) max_pct ON cl.CountryCode = max_pct.CountryCode AND cl.Percentage = max_pct.MaxPercentage \nJOIN country c ON cl.CountryCode = c.Code;"}
{"question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nWhich colleges do the tryout players whose name starts with letter D go to? => SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'\nFind the number of routes for each source airport and the airport name. => SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name\nWhat is the product with the highest height? Give me the catalog entry name. => SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1\nIn what city does Janessa Sawayn live? => SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nList the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif' => SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'\nWhat is the total number of countries where Spanish is spoken by the largest percentage of people? => ", "response": "SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1) AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Population > 0) AS T3"}
{"question": "Count the number of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nHow many instruments does the song \"Le Pop\" use? => SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\nFind the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance. => SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\nHow many airports are there per city in the United States? Order the cities by decreasing number of airports. => SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC\nAmong all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount. => SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\nHow long is the total lesson time took by customer with first name as Rylan and last name as Goodwin? => SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";\nCount the number of countries for which Spanish is the predominantly spoken language. => ", "response": "SELECT COUNT(*) FROM countrylanguage WHERE Language = \"Spanish\" AND IsOfficial = \"T\""}
{"question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nCount the number of clubs for which the student named \"Eric Tai\" is a member. => SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"\nWhich college has any student who is a goalie and succeeded in the tryout. => SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'\nWhat are the different types of video games? => SELECT DISTINCT gtype FROM Video_games\nWhat are the result description of the project whose detail is 'sint'? => SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'\nWhat are the names of scientists who are assigned to any project? => SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn\nWhat are the codes of countries where Spanish is spoken by the largest percentage of people? => ", "response": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1"}
{"question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "Given a database 'world_1' have 4 tables named 'city', 'sqlite_sequence', 'country', 'countrylanguage'. city tbl have columns: 'ID', 'Name', 'CountryCode', 'District', 'Population'. sqlite_sequence tbl have columns: 'name', 'seq'. country tbl have columns: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'. countrylanguage tbl have columns: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'. \nTranslate text to SQL: \nList the most common type of competition. => SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the stories of highest building? => SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1\nSort the list of all the first and last names of authors in alphabetical order of the last names. => SELECT fname ,  lname FROM authors ORDER BY lname\nHow many students are 18 years old? => SELECT count(*) FROM Student WHERE age  =  18\nList the names of departments where some physicians are primarily affiliated with. => SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1\nReturn the codes of countries for which Spanish is the predominantly spoken language. => ", "response": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50"}
{"question": "How many conductors are there?", "sql": "SELECT count(*) FROM conductor", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nReport the first name and last name of all the teachers. => SELECT DISTINCT firstname ,  lastname FROM teachers\nWhat is the title, credit value, and department name for courses with more than one prerequisite? => SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\nCount the number of appelations in Napa County. => SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\nShow the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme. => SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC\nList the number of invoices from Chicago, IL. => SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\nHow many conductors are there? => ", "response": "SELECT COUNT(*) FROM conductor"}
{"question": "Count the number of conductors.", "sql": "SELECT count(*) FROM conductor", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhich room has the highest rate? List the room's full name, rate, check in and check out date. => SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;\nFind the name of the ship that is steered by the youngest captain. => SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\nList venues of all matches in the order of their dates starting from the most recent one. => SELECT venue FROM MATCH ORDER BY date DESC\nWhat are all locations of train stations? => SELECT DISTINCT LOCATION FROM station\nShow the id, name of each editor and the number of journal committees they are on. => SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\nCount the number of conductors. => ", "response": "SELECT COUNT(*) FROM conductor"}
{"question": "List the names of conductors in ascending order of age.", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nGive me the average and minimum price (in Euro) of the products. => SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents\nWhich headquarter locations are used by more than 2 companies? => SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2\nShow the number of cities in counties that have a population more than 20000. => SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\nfind the highest support percentage, lowest consider rate and oppose rate of all candidates. => SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate\nWhat is the last name of the youngest student? => SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\nList the names of conductors in ascending order of age. => ", "response": "SELECT Name FROM conductor ORDER BY Age ASC"}
{"question": "What are the names of conductors, ordered by age?", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction? => SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'\nGive the advisor with the most students. => SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1\nWhat are the names of body builders? => SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\nFind the name, address, number of students in the departments that have the top 3 highest number of students. => SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3\nWhat is first names of the top 5 staff who have handled the greatest number of complaints? => SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5\nWhat are the names of conductors, ordered by age? => ", "response": "SELECT Name FROM conductor ORDER BY Age ASC"}
{"question": "What are the names of conductors whose nationalities are not \"USA\"?", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nCount the number of entrepreneurs. => SELECT count(*) FROM entrepreneur\nShow the rank, first name, and last name for all the faculty. => SELECT rank ,  Fname ,  Lname FROM Faculty\ndisplay the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name. => SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')\nList all the possible ways to get to attractions, together with the number of attractions accessible by these methods. => SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There\nReturn the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'. => SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\nWhat are the names of conductors whose nationalities are not \"USA\"? => ", "response": "SELECT Name FROM conductor WHERE Nationality <> 'USA'"}
{"question": "Return the names of conductors that do not have the nationality \"USA\".", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nShow the manager name with most number of gas stations opened after 2000. => SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1\nFind the names of all physicians and their primary affiliated departments' names. => SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1\nShow the number of documents. => SELECT count(*) FROM Documents\nFind all information of all the products with a price between $60 and $120. => SELECT * FROM products WHERE price BETWEEN 60 AND 120\nShow the station name with at least two trains. => SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2\nReturn the names of conductors that do not have the nationality \"USA\". => ", "response": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}
{"question": "What are the record companies of orchestras in descending order of years in which they were founded?", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat are the distinct secretary votes in the fall election cycle? => SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"\nWhat is the name of the movie produced after 2000 and directed by James Cameron? => SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000\nthe names of models that launched between 2002 and 2004. => SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;\nWhat are department ids for departments with managers managing more than 3 employees? => SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\nShow all distinct region names ordered by their labels. => SELECT DISTINCT region_name FROM region ORDER BY Label\nWhat are the record companies of orchestras in descending order of years in which they were founded? => ", "response": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"}
{"question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat are the ids of songs that are available in either mp4 format or have resolution above 720? => SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720\nWhich organisation hired the most number of research staff? List the organisation id, type and detail. => SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\nFind the titles of all the papers written by \"Aaron Turon\". => SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"\nFind the name of the stadium that has the maximum capacity. => SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1\nList the distinct police forces of counties whose location is not on east side. => SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"\nReturn the record companies of orchestras, sorted descending by the years in which they were founded. => ", "response": "SELECT Record_Company FROM orchestra INNER JOIN conductor ON orchestra.Conductor_ID=conductor.Conductor_ID ORDER BY Year_of_Founded DESC"}
{"question": "What is the average attendance of shows?", "sql": "SELECT avg(Attendance) FROM SHOW", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nList the distinct ranges of the mountains with the top 3 prominence. => SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3\nList the publication dates of publications with 3 lowest prices. => SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\nWhat are the names of all video games that are collectible cards? => SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"\nWhat are the ids of the problems reported after the date of any problems reported by Rylan Homenick? => SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )\nShow theme and year for all exhibitions with ticket prices lower than 15. => SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15\nWhat is the average attendance of shows? => ", "response": "SELECT AVG(Attendance) FROM show"}
{"question": "Return the average attendance across all shows.", "sql": "SELECT avg(Attendance) FROM SHOW", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors? => SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'\nWhat is the average salary of employees who have a commission percentage that is not null? => SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\nWhat are the different names of all the races in reverse alphabetical order? => SELECT DISTINCT name FROM races ORDER BY name DESC\nShow all customer ids and the number of accounts for each customer. => SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\nFind the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. => SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\nReturn the average attendance across all shows. => ", "response": "SELECT AVG(Attendance) FROM show"}
{"question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhich film has the most number of actors or actresses? List the film name, film id and description. => SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1\nWhat are the faculty ids of all the male faculty members? => SELECT FacID FROM Faculty WHERE Sex  =  'M'\nFind all the ids and dates of the logs for the problem whose id is 10. => SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10\nList the name of film studio that have the most number of films. => SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1\nReturn the names of products in the category 'Spices'. => SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"\nWhat are the maximum and minimum share of performances whose type is not \"Live final\". => ", "response": "SELECT MAX(share), MIN(share) FROM performance WHERE type <> 'Live final'"}
{"question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nShow the id, the date of account opened, the account name, and other account detail for all accounts. => SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts\nHow many customers are there? => SELECT sum(no_of_customers) FROM bank\nWhich problem log was created most recently? Give me the log id. => SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1\nWhich statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? => SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\nHow many drivers participated in the race Australian Grand Prix held in 2009? => SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009\nReturn the maximum and minimum shares for performances that do not have the type \"Live final\". => ", "response": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != \"Live final\""}
{"question": "How many different nationalities do conductors have?", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nGive the distinct headquarters of manufacturers. => SELECT DISTINCT headquarter FROM manufacturers\nWhat are the star rating descriptions of the hotels with price above 10000? => SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000\nWhat are the number of different course codes? => SELECT count(DISTINCT crs_code) FROM CLASS\nIn which country does Roberto Almeida? => SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\nWhat are the countries that participated in both friendly and tournament type competitions? => SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'\nHow many different nationalities do conductors have? => ", "response": "SELECT count(DISTINCT Nationality) FROM conductor"}
{"question": "Count the number of different nationalities of conductors.", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nList the venues of debates in ascending order of the number of audience. => SELECT Venue FROM debate ORDER BY Num_of_Audience ASC\nShow the date valid from and the date valid to for the card with card number '4560596484842'. => SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\nWhat is the average and minimum age of all artists from United States. => SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\nShow the region name with at least two storms. => SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\nWhat are the prices of products that have never gotten a complaint? => SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)\nCount the number of different nationalities of conductors. => ", "response": "SELECT COUNT(DISTINCT Nationality) FROM conductor"}
{"question": "List names of conductors in descending order of years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat are the names of all video games that are collectible cards? => SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"\nWhich kind of policy type was chosen by the most customers? => SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1\nShow the ids of all employees who have either destroyed a document or made an authorization to do this. => SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\nHow many professors have a Ph.D. in each department? => SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code\nFind the number of records of each policy type and its type code. => SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code\nList names of conductors in descending order of years of work. => ", "response": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"}
{"question": "What are the names of conductors, sorted descending by the number of years they have worked?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat is the id and salary of the employee named Mark Young? => SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\nShow all information about each body builder. => SELECT * FROM body_builder\nWhat is the vocal type of the band mate whose first name is \"Marianne\" played the most? => SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\nWhat are the themes and locations of parties? => SELECT Party_Theme ,  LOCATION FROM party\nWhat is the campus fee in the year 2000 for San Jose State University? => SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000\nWhat are the names of conductors, sorted descending by the number of years they have worked? => ", "response": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"}
{"question": "List the name of the conductor with the most years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nFind all the songs performed by artist with last name \"Heilo\" => SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"\nHow many counties are there in total? => SELECT count(*) FROM county\nWhat is the count of the songs that last approximately 4 minutes? => SELECT count(*) FROM files WHERE duration LIKE \"4:%\"\nWhat is the last name of the staff member in charge of the complaint on the product with the lowest price? => SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1\nWhich county has the largest population? Give me the name of the county. => SELECT County_name FROM county ORDER BY Population DESC LIMIT 1\nList the name of the conductor with the most years of work. => ", "response": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}
{"question": "What is the name of the conductor who has worked the greatest number of years?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nReturn the name of each physician and the number of patients he or she treats. => SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\nCount the number of accounts. => SELECT count(*) FROM accounts\nWhat are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check' => SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'\nshow the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length. => SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet\nlist all the names of programs, ordering by launch time. => SELECT name FROM program ORDER BY launch\nWhat is the name of the conductor who has worked the greatest number of years? => ", "response": "SELECT name FROM conductor WHERE year_of_work = (SELECT MAX(year_of_work) FROM conductor)"}
{"question": "Show the names of conductors and the orchestras they have conducted.", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat are the id and details of the customers who have at least 3 events? => SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\nShow the name for regions not affected. => SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\nHow many students are enrolled in the class taught by some professor from the accounting department? => SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'\nWhich customers have made at least two orders? Give me each customer name and number of orders made. => SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2\nFind the id of users who are followed by Mary and Susan. => SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"\nShow the names of conductors and the orchestras they have conducted. => ", "response": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID"}
{"question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nList the name and phone number of all suppliers in the alphabetical order of their addresses. => SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details\nShow names for all regions except for Denmark. => SELECT region_name FROM region WHERE region_name != 'Denmark'\nList the distinct carriers of phones with memories bigger than 32. => SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32\nWhat are the names of players who have the best dribbling? => SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)\nWhat are the SSN and names of scientists working on the project with the most hours? => SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)\nWhat are the names of conductors as well as the corresonding orchestras that they have conducted? => ", "response": "SELECT T1.Name, T2.Orchestra\nFROM conductor AS T1\nJOIN orchestra AS T2\nON T1.Conductor_ID = T2.Conductor_ID\nORDER BY T1.Name ASC"}
{"question": "Show the names of conductors that have conducted more than one orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nReturn the most frequent result across all musicals. => SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1\nList all headquarters and the number of companies in each headquarter. => SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\nHow many cities are there that have more than 3 airports? => SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\nWhat are the different product names? What is the average product price for each of them? => SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name\nWhat are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with. => SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC\nShow the names of conductors that have conducted more than one orchestras. => ", "response": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) > 1)"}
{"question": "What are the names of conductors who have conducted at more than one orchestra?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nFind the invoice numbers which are created before 1989-09-03 or after 2007-12-25. => SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"\nGive me the descriptions of the service types that cost more than 100. => SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100\nFind the classroom that the most students use. => SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1\nWhat is the detail of the location UK Gallery? => SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\nList all students' first names and last names who majored in 600. => SELECT Fname , Lname FROM Student WHERE Major  =  600;\nWhat are the names of conductors who have conducted at more than one orchestra? => ", "response": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1"}
{"question": "Show the name of the conductor that has conducted the most number of orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nFind the building that has the largest number of faculty members. => SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1\nWhat are all the different book publishers? => SELECT DISTINCT publisher FROM book_club\nHow many cities are in Australia? => SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\nShow each location and the number of cinemas there. => SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION\nPlease show different denominations and the corresponding number of schools in descending order. => SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC\nShow the name of the conductor that has conducted the most number of orchestras. => ", "response": "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1"}
{"question": "What is the name of the conductor who has conducted the most orchestras?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103? => SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)\nList the names of products that are not in any event. => SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)\nWhat is the title of the course that is a prerequisite for Mobile Computing? => SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\nWhat is the name of the staff that is in charge of the attraction named \"US museum\"? => SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"\nHow many products have the color description 'red' and the characteristic name 'slow'? => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"\nWhat is the name of the conductor who has conducted the most orchestras? => ", "response": "SELECT T1.Name FROM Conductor AS T1 JOIN Orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1"}
{"question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nFind the name of dorms only for female (F gender). => SELECT dorm_name FROM dorm WHERE gender  =  'F'\nFind the number of employees we have. => SELECT count(*) FROM Employees\nHow many products are never booked with amount higher than 200? => SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )\nHow many female students have milk or egg allergies? => SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"\nFor each main industry, what is the total number of companies for the industry with the highest total market value? => SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1\nPlease show the name of the conductor that has conducted orchestras founded after 2008. => ", "response": "SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID  =  o.Conductor_ID WHERE o.Year_of_Founded  >  2008"}
{"question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWho were the comptrollers of the parties associated with the delegates from district 1 or district 2? => SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2\nFor each position, what is the minimum time students spent practicing? => SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos\nWhat is the average age for each dorm and what are the names of each dorm? => SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name\nFind the number of scientists who are not assigned to any project. => SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\nShow the names of players coached by the rank 1 coach. => SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1\nWhat are the names of conductors who have conducted orchestras founded after the year 2008? => ", "response": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008"}
{"question": "Please show the different record companies and the corresponding number of orchestras.", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nList the council tax ids and their related cmi cross references of all the parking fines. => SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines\nReturn the categories of music festivals that have the result \"Awarded\". => SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"\nWhat are the names of all genres in alphabetical order, combined with its ratings? => SELECT g_name ,  rating FROM genre ORDER BY g_name\nShow the name and location of track with 1 race. => SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1\nTell me the booking status code for the apartment with number \"Suite 634\". => SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"\nPlease show the different record companies and the corresponding number of orchestras. => ", "response": "SELECT Record_Company, COUNT(Orchestra_ID) AS num_of_orchestras FROM orchestra GROUP BY Record_Company"}
{"question": "How many orchestras does each record company manage?", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nReturn the names of products that have had complaints filed by the customer who has filed the fewest complaints. => SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1\nWhat are the names of instructors who advise more than one student? => SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1\nWhat is all the information on the airport with the largest number of international passengers? => SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1\nWhich room has the highest rate? List the room's full name, rate, check in and check out date. => SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;\nHom many albums does the artist \"Metallica\" have? => SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\nHow many orchestras does each record company manage? => ", "response": "SELECT t1.Record_Company, COUNT(DISTINCT t2.Orchestra_ID) as num_orchestras FROM orchestra as t2 JOIN record_company as t1 ON t2.Record_Company = t1.Company_ID GROUP BY t1.Record_Company"}
{"question": "Please show the record formats of orchestras in ascending order of count.", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nList the names of all the physicians who prescribe Thesisin as medication. => SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"\nFind the address line 1 and 2 of the customer with email \"vbogisich@example.org\". => SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"\nWhich classrooms are used by grade 4? => SELECT DISTINCT classroom FROM list WHERE grade  =  4\nFind the city where the most customers live. => SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1\nWhich locations contains both shops that opened after the year 2012 and shops that opened before 2008? => SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008\nPlease show the record formats of orchestras in ascending order of count. => ", "response": "SELECT Major_Record_Format, COUNT(*) as count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC"}
{"question": "What are the major record formats of orchestras, sorted by their frequency?", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nPlease show the employee last names that serves no more than 20 customers. => SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20\nWhat are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points? => SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20\nWhat are the different account ids that have made financial transactions, as well as how many transactions correspond to each? => SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\nFind the players whose names contain letter 'a'. => SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'\nHow many distinct incident type codes are there? => SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident\nWhat are the major record formats of orchestras, sorted by their frequency? => ", "response": "SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC"}
{"question": "List the record company shared by the most number of orchestras.", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nFind the number of students in total. => SELECT count(*) FROM list\nFind the names of swimmers who has a result of \"win\". => SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'\nList all the services in the alphabetical order. => SELECT service_name FROM services ORDER BY service_name\nList the name of enzymes in descending lexicographical order. => SELECT name FROM enzyme ORDER BY name DESC\nSelect the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order). => SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC\nList the record company shared by the most number of orchestras. => ", "response": "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(DISTINCT Orchestra_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT Orchestra_ID) AS cnt FROM orchestra GROUP BY Record_Company) AS tmp)"}
{"question": "What is the record company used by the greatest number of orchestras?", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat is the title of the course that was offered at building Chandler during the fall semester in the year of 2010? => SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010\nHow many book clubs are there? => SELECT count(*) FROM book_club\nWhat zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature? => SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80\nWhat is the name of the activity with the most students? => SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\nFind the number of employees we have. => SELECT count(*) FROM Employees\nWhat is the record company used by the greatest number of orchestras? => ", "response": "SELECT T1.Record_Company FROM orchestra AS T1 JOIN (SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) as num_orchestras FROM orchestra GROUP BY Record_Company ORDER BY num_orchestras DESC LIMIT 1) AS T2 ON T1.Record_Company = T2.Record_Company"}
{"question": "List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nFind the name of the club that has the most female students. => SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1\nCount the number of distinct governors. => SELECT count(DISTINCT Governor) FROM party\nFind the states which do not have any employee in their record. => SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)\nHow many furniture components are there in total? => SELECT sum(num_of_component) FROM furniture\nWho has friends that are younger than the average age? => SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)\nList the names of orchestras that have no performance. => ", "response": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}
{"question": "What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nShow name, opening year, and capacity for each cinema. => SELECT name ,  openning_year ,  capacity FROM cinema\nFind all the customer last names that do not have invoice totals larger than 20. => SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20\nWhat are the building, room number, semester and year of courses in the Psychology department, sorted using course title? => SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title\nFind the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005. => SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005\nWhat are the maximum and minimum resolution of songs whose duration is 3 minutes? => SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"\nWhat are the orchestras that do not have any performances? => ", "response": "SELECT Orchestra.Orchestra \nFROM Orchestra \nLEFT JOIN Performance ON Orchestra.Orchestra_ID = Performance.Orchestra_ID \nWHERE Performance.Performance_ID IS NULL"}
{"question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat is the least common media type in all tracks? => SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1\nWhat are the maximum and minimum number of silver medals for clubs. => SELECT max(Silver) ,  min(Silver) FROM club_rank\nShow the pair of male and female names in all weddings after year 2014 => SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014\nWhat are the times of elimination for wrestlers with over 50 days held? => SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50\nHow many colors are there? => SELECT count(*) FROM ref_colors\nShow the record companies shared by orchestras founded before 2003 and after 2003. => ", "response": "SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded < 2003 AND T1.Orchestra_ID IN (SELECT T2.Orchestra_ID FROM orchestra AS T2 WHERE T2.Year_of_Founded > 2003)"}
{"question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat is the team and starting year for each technician? => SELECT Team ,  Starting_Year FROM technician\nWhat are the first names of all students who are older than 20? => SELECT fname FROM student WHERE age  >  20\nShow the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64. => SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64\nWhich city has hosted the most events? => SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1\nWhat is the investor that has invested in the most number of entrepreneurs? => SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? => ", "response": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003"}
{"question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nFind the list of cities that no customer is living in. => SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)\nWhich employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies. => SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;\nWhat are the names of all instructors with names that include \"dar\"? => SELECT name FROM instructor WHERE name LIKE '%dar%'\nCount the total number of counties. => SELECT count(*) FROM county\nOn which days more than one revisions were made on catalogs. => SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1\nFind the number of orchestras whose record format is \"CD\" or \"DVD\". => ", "response": "SELECT count(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'"}
{"question": "Count the number of orchestras that have CD or DVD as their record format.", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nWhat is the number of routes whose destinations are Italian airports? => SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\nFind the names of the items that did not receive any review. => SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\nList first name and last name of customers lived in city Lockmanfurt. => SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";\nWhen and in what zip code did max temperature reach 80? => SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80\nWhich orders are made by the customer named \"Jeramie\"? Give me the order ids and status. => SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"\nCount the number of orchestras that have CD or DVD as their record format. => ", "response": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')"}
{"question": "Show the years in which orchestras that have given more than one performance are founded.", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nHow many video game types exist? => SELECT count(DISTINCT gtype) FROM Video_games\nGive me the title and highest price for each film. => SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\nCount the number of patients who stayed in room 112. => SELECT count(patient) FROM stay WHERE room  =  112\nWhat is the salaray and name of the employee that is certified to fly the most planes? => SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\nWhat is the most common major among female (sex is F) students? => SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1\nShow the years in which orchestras that have given more than one performance are founded. => ", "response": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1) GROUP BY Year_of_Founded"}
{"question": "What are years of founding for orchestras that have had more than a single performance?", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "prompt": "Given a database 'orchestra' have 4 tables named 'conductor', 'orchestra', 'performance', 'show'. conductor tbl have columns: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'. orchestra tbl have columns: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'. performance tbl have columns: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'. show tbl have columns: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'. \nTranslate text to SQL: \nShow the name of the county with the biggest population. => SELECT County_name FROM county ORDER BY Population DESC LIMIT 1\nReturn all the distinct secretary votes made in the fall election cycle. => SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"\nHow many customers does Steve Johnson support? => SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";\nShow names for all regions except for Denmark. => SELECT region_name FROM region WHERE region_name != 'Denmark'\nWhat are the locations of all the gas stations ordered by opening year? => SELECT LOCATION FROM gas_station ORDER BY open_year\nWhat are years of founding for orchestras that have had more than a single performance? => ", "response": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING count(*) > 1)"}
{"question": "How many high schoolers are there?", "sql": "SELECT count(*) FROM Highschooler", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the name and active date of the customer that use email as the contact channel. => SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'\nWhat is the id and name of the aircraft that can cover the maximum distance? => SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\nGive me the names of members whose address is in Harford or Waterbury. => SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'\nWhat kind of decor has the least number of reservations? => SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;\nHow many products were not included in any order? => SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\nHow many high schoolers are there? => ", "response": "SELECT COUNT(*) FROM Highschooler;"}
{"question": "Count the number of high schoolers.", "sql": "SELECT count(*) FROM Highschooler", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the id of suppliers whose average amount purchased for each product is above 50000 or below 30000. => SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000\nFind the number of distinct currency codes used in drama workshop groups. => SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups\nShow the distinct position of players from college UCLA or Duke. => SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"\nWhat is the total number of students? => SELECT count(*) FROM Student\nWhat are the names and buildings of the deparments, sorted by budget descending? => SELECT dept_name ,  building FROM department ORDER BY budget DESC\nCount the number of high schoolers. => ", "response": "SELECT COUNT(*) FROM Highschooler"}
{"question": "Show the names and grades of each high schooler.", "sql": "SELECT name ,  grade FROM Highschooler", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat is the payment method code used by the most orders? => SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1\nHow many distinct order ids correspond to each product? => SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\nShow all titles and their instructors' names for courses in 2008, in alphabetical order by title. => SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title\nFind the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. => SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\nHow many students got accepted after the tryout? => SELECT count(*) FROM tryout WHERE decision  =  'yes'\nShow the names and grades of each high schooler. => ", "response": "SELECT name, grade FROM Highschooler"}
{"question": "What are the names and grades for each high schooler?", "sql": "SELECT name ,  grade FROM Highschooler", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nHow many transaction does account with name 337 have? => SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\nList the name of physicians who took some appointment. => SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\nShow the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000. => SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000\nWhat is the name and country of origin for each artist who has released a song with a resolution higher than 900? => SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1\nFind the average order quantity per order. => SELECT avg(order_quantity) FROM order_items\nWhat are the names and grades for each high schooler? => ", "response": "SELECT name, grade FROM Highschooler"}
{"question": "Show all the grades of the high schoolers.", "sql": "SELECT grade FROM Highschooler", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nShow the names of players coached by the rank 1 coach. => SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1\nWhich document type is described with the prefix 'Initial'? => SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'\nList all vehicle id => SELECT vehicle_id FROM Vehicles;\nWhat are the distinct buildings with capacities of greater than 50? => SELECT DISTINCT building FROM classroom WHERE capacity  >  50\nWhat are the names and account balances for customers who have taken a total amount of more than 5000 in loans? => SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000\nShow all the grades of the high schoolers. => ", "response": "SELECT grade FROM Highschooler;"}
{"question": "What is the grade of each high schooler?", "sql": "SELECT grade FROM Highschooler", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nHow many music festivals have had each kind of result, ordered descending by count? => SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC\nFind the total number of catalog contents. => SELECT count(*) FROM catalog_contents\nReturn the highest acc percent across all basketball matches. => SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\nShow the id of the employee named Ebba. => SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"\nHow many performances are there? => SELECT count(*) FROM performance\nWhat is the grade of each high schooler? => ", "response": "SELECT grade FROM Highschooler"}
{"question": "What grade is Kyle in?", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhich teachers teach in classroom 109? Give me their last names. => SELECT lastname FROM teachers WHERE classroom  =  109\nFind the cities which were once a host city after 2010? => SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010\nHow many budgets are above 3000 in year 2001 or before? => SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001\nWhat is the id of the longest song? => SELECT f_id FROM files ORDER BY duration DESC LIMIT 1\nWhat are the official languages of the countries of players from Maryland or Duke college? => SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\nWhat grade is Kyle in? => ", "response": "SELECT grade FROM Highschooler WHERE name = 'Kyle'"}
{"question": "Return the grade for the high schooler named Kyle.", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nReturn the issue date of the volume that has spent the fewest weeks on top. => SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1\nShow the location codes and the number of documents in each location. => SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code\nWhat are the distinct names of customers who have purchased at least three different products? => SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3\nWhat are the product id and product type of the cheapest product? => SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1\nWhat are the wines that have prices higher than 50 and made of Red color grapes? => SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50\nReturn the grade for the high schooler named Kyle. => ", "response": "SELECT grade FROM Highschooler WHERE name = 'Kyle'"}
{"question": "Show the names of all high schoolers in grade 10.", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nList total amount of  invoice from Chicago, IL. => SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\nWhat are the different ranges of the 3 mountains with the highest prominence? => SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3\nFind the titles of items whose rating is higher than the average review rating of all items. => SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\nWhich allergy type is most common? => SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1\nFind the id of courses which are registered or attended by student whose id is 121? => SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121\nShow the names of all high schoolers in grade 10. => ", "response": "SELECT name FROM Highschooler WHERE grade = 10"}
{"question": "What are the names of all high schoolers in grade 10?", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nReturn the distinct name of customers whose order status is Pending, in the order of customer id. => SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id\nWhat are the ids and first names of customers who do not hold a credit card? => SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"\nList first name and last name of customers lived in city Lockmanfurt. => SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";\nWhat is employee Nancy Edwards's phone number? => SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\nShow the ids of all employees who don't destroy any document. => SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\nWhat are the names of all high schoolers in grade 10? => ", "response": "SELECT name FROM Highschooler WHERE grade = 10;"}
{"question": "Show the ID of the high schooler named Kyle.", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the name of customer who has the highest amount of loans. => SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1\nShow the short names of the buildings managed by \"Emma\". => SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"\nWhat are the distinct nominees of the musicals with the award that is not \"Tony Award\"? => SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\nWhat is the name of the department with the fewest professors? => SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1\nWhat is the average ROM size of phones produced by the company named \"Nokia Corporation\"? => SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";\nShow the ID of the high schooler named Kyle. => ", "response": "SELECT ID FROM Highschooler WHERE name = 'Kyle';"}
{"question": "What is Kyle's id?", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat are the names of the states that have some college students playing in the positions of goalie and mid-field? => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'\nWhat is the membership card held by both members living in Hartford and ones living in Waterbury address? => SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'\nFind the rank of the faculty that the fewest faculties belong to. => SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1\nFind the names of reviewers who had given higher than 3 star ratings. => SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\nCount the number of stores. => SELECT count(*) FROM store\nWhat is Kyle's id? => ", "response": "Without knowing the specific table where Kyle's information is stored, it is not possible to provide an accurate SQL query to retrieve his ID."}
{"question": "How many high schoolers are there in grade 9 or 10?", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat are the ids of products from the supplier with id 2, which are more expensive than the average price across all products? => SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)\nWhich store owns most items? => SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1\nShow me the number of parks the state of NY has. => SELECT count(*) FROM park WHERE state  =  'NY';\nFind the number of team franchises that are active (have 'Y' as \"active\" information). => SELECT count(*) FROM team_franchise WHERE active = 'Y';\nWhat are the first names and support rep ids for employees serving 10 or more customers? => SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\nHow many high schoolers are there in grade 9 or 10? => ", "response": "SELECT count(*) FROM Highschooler WHERE grade IN (9, 10)"}
{"question": "Count the number of high schoolers in grades 9 or 10.", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the total capacity of all dorms. => SELECT sum(student_capacity) FROM dorm\nWhat are the ids of the candidates that have an outcome code of Pass? => SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\nHow many students are older than 20 in each dorm? => SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name\nWhich team had the least number of attendances in home games in 1980? => SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\nHow many different services are provided by all stations? => SELECT count(DISTINCT services) FROM station\nCount the number of high schoolers in grades 9 or 10. => ", "response": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)"}
{"question": "Show the number of high schoolers for each grade.", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFor grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date. => SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'\nList the names of buildings with at least 200 feet of height and with at least 20 floors. => SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20\nWhich patient is undergoing the most recent treatment? => SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1\nWhat are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes? => SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2\nWhat are the names of artist who have the letter 'a' in their names? => SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\nShow the number of high schoolers for each grade. => ", "response": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade"}
{"question": "How many high schoolers are in each grade?", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nGive the hometowns from which two or more gymnasts are from. => SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\nShow the average, minimum, and maximum age for different majors. => SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major\nFind the ids of the nurses who are on call in block floor 1 and block code 1. => SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1\nWhich poll resource provided the most number of candidate information? => SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1\nHow many distinct programs are broadcast at \"Night\" time? => SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'\nHow many high schoolers are in each grade? => ", "response": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade"}
{"question": "Which grade has the most high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat are the total amount and average amount paid in claim headers? => SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers\nFind the year which offers the largest number of courses. => SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\nShow station names without any trains. => SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)\nWhat are the names of organizations, ordered by the date they were formed, ascending? => SELECT organization_name FROM organizations ORDER BY date_formed ASC\nReturn the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010. => SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";\nWhich grade has the most high schoolers? => ", "response": "SELECT grade, COUNT(*) AS total_highschoolers FROM Highschooler GROUP BY grade ORDER BY total_highschoolers DESC LIMIT 1"}
{"question": "Return the grade that has the greatest number of high schoolers.", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nHow many airlines does Russia has? => SELECT count(*) FROM airlines WHERE country  =  'Russia'\nWhat are the names and other details for accounts corresponding to the customer named Meaghan Keeling? => SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"\nList the course name of courses sorted by credits. => SELECT CName FROM COURSE ORDER BY Credits\nWhat are the total number of students who are living in a male dorm? => SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'\nReturn the category code and typical price of 'cumin'. => SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"\nReturn the grade that has the greatest number of high schoolers. => ", "response": "SELECT grade, count(*) FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"}
{"question": "Show me all grades that have at least 4 students.", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhich team had the least number of attendances in home games in 1980? => SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\nGive me the maximum low temperature and average precipitation at the Amersham station. => SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"\nWhat are the address and phone number of the buildings managed by \"Brenden\"? => SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"\nFind the last name of the individuals that have been contact individuals of an organization. => SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id\nShow all advisors who have at least two students. => SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2\nShow me all grades that have at least 4 students. => ", "response": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4"}
{"question": "Which grades have 4 or more high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat are the official names of cities that have not hosted a farm competition? => SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)\ndisplay the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M. => SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'\nHow many rooms in each building have a capacity of over 50? => SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building\nWhat is the name of the district with the smallest area? => SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1\nWhat are the names of the airports in the city of Goroka? => SELECT name FROM airports WHERE city  =  'Goroka'\nWhich grades have 4 or more high schoolers? => ", "response": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4"}
{"question": "Show the student IDs and numbers of friends corresponding to each.", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFor each project id, how many tasks are there? => SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id\nWhat are the names of all tracks that are on the Movies playlist but not in the music playlist? => SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\nList the names of wrestlers and the teams in elimination in descending order of days held. => SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC\nFind the title of all the albums of the artist \"AC/DC\". => SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\nFind the distinct last names of the students who have class president votes. => SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE\nShow the student IDs and numbers of friends corresponding to each. => ", "response": "SELECT Friend.student_id, Highschooler.name as StudentName, Friend.friend_id, Highschooler.name as FriendName\nFROM Friend \nINNER JOIN Highschooler ON Friend.student_id = Highschooler.ID\nINNER JOIN Highschooler AS H ON Friend.friend_id = H.ID \nORDER BY Friend.student_id ASC;"}
{"question": "How many friends does each student have?", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nHow many invoices were billed from Chicago, IL? => SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\nWhich locations contains both shops that opened after the year 2012 and shops that opened before 2008? => SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008\nHow many different software platforms are there for devices? => SELECT count(DISTINCT Software_Platform) FROM device\nWho is the oldest person whose job is student? => SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )\nFind the distinct names of all songs that have a higher resolution than some songs in English. => SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")\nHow many friends does each student have? => ", "response": "SELECT student_id, COUNT(friend_id) FROM friend GROUP BY student_id;"}
{"question": "Show the names of high school students and their corresponding number of friends.", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat are the full names and department ids for the lowest paid employees across all departments. => SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)\nFind the names of programs that are never broadcasted in the morning. => SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"\nFind the cities corresponding to employees who help customers with the postal code 70174. => SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\nFind the brand and name for each camera lens, and sort in descending order of maximum aperture. => SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC\nWhat are the login names used both by some course authors and some students? => SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students\nShow the names of high school students and their corresponding number of friends. => ", "response": "SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_of_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY num_of_friends DESC"}
{"question": "What are the names of the high schoolers and how many friends does each have?", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nReturn the names and typical buying and selling prices for products that have 'yellow' as their color description. => SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"\nCount the number of products in the category 'Seeds'. => SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"\nHow many train stations are there? => SELECT count(*) FROM station\nHow many camera lenses have a focal length longer than 15 mm? => SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15\nFor each company, return the company name and the name of the building its office is located in. => SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id\nWhat are the names of the high schoolers and how many friends does each have? => ", "response": "SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID"}
{"question": "What is the name of the high schooler who has the greatest number of friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nHow many employees have certificate. => SELECT count(DISTINCT eid) FROM Certificate\nWhat is the maximum and mininum number of stars a rating can receive? => SELECT max(stars) ,  min(stars) FROM Rating\nWhat are the names of actors who have been in the musical titled The Phantom of the Opera? => SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\nFind the number of classes in each department. => SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code\nWhat are the distinct names and nationalities of the architects who have ever built a mill? => SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id\nWhat is the name of the high schooler who has the greatest number of friends? => ", "response": "SELECT Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID = (\n    SELECT Friend.student_id \n    FROM Friend \n    GROUP BY Friend.student_id \n    ORDER BY COUNT(Friend.friend_id) DESC \n    LIMIT 1\n)"}
{"question": "Return the name of the high school student with the most friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat is the name of the district with the smallest area? => SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1\nGive the total money requested by entrepreneurs who are taller than 1.85. => SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85\nWhat is the total number of customers across banks? => SELECT sum(no_of_customers) FROM bank\nHow many accounts are there for each customer id? => SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\nList the name and assets of each company in ascending order of company name. => SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\nReturn the name of the high school student with the most friends. => ", "response": "SELECT Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID = (\n    SELECT friend.student_id \n    FROM Friend \n    GROUP BY friend.student_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)"}
{"question": "Show the names of high schoolers who have at least 3 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nShow first name and last name for all students. => SELECT Fname ,  Lname FROM Student\nHow many students are taught by teacher TARRING LEIA? => SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"\nFor grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date. => SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'\nCompute the average price of all products with manufacturer code equal to 2. => SELECT avg(price) FROM products WHERE Manufacturer  =  2\nShow the location code, the starting date and ending data in that location for all the documents. => SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations\nShow the names of high schoolers who have at least 3 friends. => ", "response": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend GROUP BY Friend.student_id HAVING count(*) >= 3)"}
{"question": "What are the names of high schoolers who have 3 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat is the campus fee for San Francisco State University in 1996? => SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996\nWhat are the names of all the tracks that are in both the Movies and music playlists? => SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\nFor each movie that received more than 3 reviews, what is the average rating? => SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2\nFind the name of the department that offers the largest number of credits of all classes. => SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1\nFind the payment method that is used most frequently. => SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1\nWhat are the names of high schoolers who have 3 or more friends? => ", "response": "SELECT name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 3"}
{"question": "Show the names of all of the high schooler Kyle's friends.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the name of the room with the maximum occupancy. => SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;\nWhat are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"? => SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"\nWhat is the first name, last name, and phone of the customer with card 4560596484842. => SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"\nWhat are the name of rooms booked by customers whose first name has \"ROY\" in part? => SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'\nWhat are the different account ids that have made financial transactions, as well as how many transactions correspond to each? => SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\nShow the names of all of the high schooler Kyle's friends. => ", "response": "SELECT T2.name \nFROM Highschooler AS T1 \nJOIN Friend AS F ON T1.ID = F.student_id \nJOIN Highschooler AS T2 ON F.friend_id = T2.ID \nWHERE T1.name = \"Kyle\""}
{"question": "Return the names of friends of the high school student Kyle.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the total number of king beds available. => SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\nFind the name of all customers. => SELECT customer_name FROM customers\nPlease show the employee first names and ids of employees who serve at least 10 customers. => SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\nFind the salaries of all distinct instructors that are less than the largest salary. => SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)\nWhich trip started from the station with the largest dock count? Give me the trip id. => SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1\nReturn the names of friends of the high school student Kyle. => ", "response": "SELECT h.name as 'Kyle\\'s Friends'\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.friend_id\nWHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"question": "How many friends does the high school student Kyle have?", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nList the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born. => SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'\nWhat are the first names of student who only took one course? => SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1\nWhat document types have more than 2 corresponding documents? => SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2\nGroup by ships by flag, and return number of ships that have each flag. => SELECT count(*) ,  flag FROM ship GROUP BY flag\nWhat are the names of the ships that are not involved in any missions? => SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)\nHow many friends does the high school student Kyle have? => ", "response": "It's not possible to answer this question with the given information because there is no information in the database about a student named Kyle."}
{"question": "Count the number of friends Kyle has.", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nList all information about courses sorted by credits in the ascending order. => SELECT * FROM COURSE ORDER BY Credits\nWhat are the names and years of all races that had a driver with the last name Lewis? => SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\nShow the location name and code with the least documents. => SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\nWhat are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300? => SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"\nWhat is total amount claimed summed across all the claims? => SELECT sum(Amount_Claimed) FROM Claims\nCount the number of friends Kyle has. => ", "response": "SELECT COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = \"Kyle\""}
{"question": "Show ids of all students who do not have any friends.", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the name and gender type of the dorms whose capacity is greater than 300 or less than 100. => SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100\nWhat are the first names and office locations for all professors sorted alphabetically by first name? => SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname\nWhich member names corresponding to members who are not in the Progress Party? => SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"\nReturn the number of companies created by Andy. => SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'\nWhich catalog content has the highest height? Give me the catalog entry name. => SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1\nShow ids of all students who do not have any friends. => ", "response": "SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL"}
{"question": "What are the ids of high school students who do not have friends?", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the number of female students (with F sex) living in Smith Hall => SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\nWhat is the department name of the students with lowest gpa belongs to? => SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1\nGive the average number of cities within markets that had a low market estimation larger than 10000? => SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\nReport the first name and last name of all the students. => SELECT DISTINCT firstname ,  lastname FROM list\nWhat are the states or counties of the address of the stores with marketing region code \"CA\"? => SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"\nWhat are the ids of high school students who do not have friends? => ", "response": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"}
{"question": "Show names of all high school students who do not have any friends.", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the total number of students in each department. => SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\nWhich clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs. => SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"\nWhat are the first names of all students that are not enrolled in courses? => SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)\nWhat is the product with the highest height? Give me the catalog entry name. => SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1\nShow the shop addresses ordered by their opening year. => SELECT address FROM shop ORDER BY open_year\nShow names of all high school students who do not have any friends. => ", "response": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"}
{"question": "What are the names of students who have no friends?", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhich cities have served as host cities more than once? Return me their GDP and population. => SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1\nWhat are the first names of all students who live in the dorm with the most amenities? => SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)\nWhat are the names and trade names of the medcines that are FDA approved? => SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'\nWhat are the ids of all aircrafts that can cover a distance of more than 1000? => SELECT aid FROM Aircraft WHERE distance  >  1000\nCount the number of customers who have an account. => SELECT count(DISTINCT customer_id) FROM Accounts\nWhat are the names of students who have no friends? => ", "response": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"}
{"question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat are the names of all friends who are from New York? => SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'\nFind the titles of the papers that contain the word \"ML\". => SELECT title FROM papers WHERE title LIKE \"%ML%\"\nWhat is the total number of clubs that have less than 10 medals in total? => SELECT count(*) FROM club_rank WHERE Total  <  10\nWhat are the names of all playlists that have more than 100 tracks? => SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;\nWhat are the names, details and data types of the characteristics which are never used by any product? => SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\nShow the ids of high schoolers who have friends and are also liked by someone else. => ", "response": "SELECT DISTINCT f.student_id FROM Friend AS f JOIN Likes AS l ON f.student_id = l.student_id WHERE f.friend_id IS NOT NULL AND l.liked_id IS NOT NULL;"}
{"question": "What are the ids of students who both have friends and are liked?", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat is the product ID of the most frequently ordered item on invoices? => SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1\nList the names and the locations that the enzymes can make an effect. => SELECT name ,  LOCATION FROM enzyme\nShow total hours per week and number of games played for student David Shieber. => SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"\nHow many papers have \"Atsushi Ohori\" published? => SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\nList the research staff details, and order in ascending order. => SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC\nWhat are the ids of students who both have friends and are liked? => ", "response": "SELECT DISTINCT(f.student_id) FROM Friend as f JOIN Likes as l ON f.student_id = l.student_id AND f.friend_id = l.liked_id"}
{"question": "Show name of all students who have some friends and also are liked by someone else.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? => SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\nWhat are the names of wines made from red grapes and with prices above 50? => SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50\nReturn the maximum enrollment across all schools. => SELECT max(Enrollment) FROM university\nShow the ids for all the faculty members who have at least 2 students. => SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2\nWhat are the states, account types, and credit scores for customers who have 0 loans? => SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\nShow name of all students who have some friends and also are liked by someone else. => ", "response": "SELECT DISTINCT Highschooler.name \nFROM Highschooler \nJOIN Friend ON Highschooler.ID = Friend.student_id \nJOIN Likes ON Highschooler.ID = Likes.student_id \nWHERE EXISTS (SELECT * FROM Friend WHERE Friend.student_id = Highschooler.ID) \nAND EXISTS (SELECT * FROM Likes WHERE Likes.student_id = Highschooler.ID)"}
{"question": "What are the names of high schoolers who both have friends and are liked?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhich customer have the most policies? Give me the customer details. => SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\nWhich trip started from the station with the largest dock count? Give me the trip id. => SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1\nWhat are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana? => SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"\nWhat are the first names of all professors who teach more than one class? => SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1\nWhat are the ids of the students who registered course statistics by order of registration date? => SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date\nWhat are the names of high schoolers who both have friends and are liked? => ", "response": "SELECT h.name FROM Highschooler AS h WHERE h.ID IN (SELECT f1.student_id FROM Friend AS f1 INTERSECT SELECT l1.student_id FROM Likes AS l1)"}
{"question": "Count the number of likes for each student id.", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat are the areas and counties for all appelations? => SELECT Area ,  County FROM APPELLATIONS\nFind the number of rooms with more than 50 capacity for each building. => SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building\nFind the name of the teacher who teaches the largest number of students. => SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1\nWhen did customer with first name as Carole and last name as Bernhard became a customer? => SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";\nWhat are the bed type and name of all the rooms with traditional decor? => SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";\nCount the number of likes for each student id. => ", "response": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id;"}
{"question": "How many likes correspond to each student id?", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nShow the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000. => SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005\nFind all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids. => SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;\nFind the distinct Advisor of students who have treasurer votes in the spring election cycle. => SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"\nWhat are the different product names, and what is the sum of quantity ordered for each product? => SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name\nHow many tests have result \"Fail\"? => SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\nHow many likes correspond to each student id? => ", "response": "SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id"}
{"question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFor each submission, show the author and their affiliated college. => SELECT Author ,  College FROM submission\nWhat is the oldest log id and its corresponding problem id? => SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1\nWhat campus has the most faculties in 2003? => SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\nWhat is the average distance and price for all flights from LA? => SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\nFor each team, return the team name, id and the maximum salary among the team. => SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;\nShow the names of high schoolers who have likes, and numbers of likes for each. => ", "response": "SELECT Highschooler.name, COUNT(Likes.student_id) AS num_likes \nFROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nGROUP BY Highschooler.ID;"}
{"question": "What are the names of high schoolers who have likes, and how many likes does each have?", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nFind the name and college of students whose decisions are yes in the tryout. => SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\nWhat are the names of all aicrafts that have never won any match? => SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\nWhat are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"? => SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"\nFind the id and name of the stadium where the largest number of injury accidents occurred. => SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nWhat are the white percentages of cities, and the corresponding crime rates of the counties they correspond to? => SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID\nWhat are the names of high schoolers who have likes, and how many likes does each have? => ", "response": "SELECT Highschooler.name, COUNT(Likes.liked_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;"}
{"question": "What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhich customer status code has least number of customers? => SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;\nFind the name of account that has the lowest total checking and saving balance. => SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1\nShow the locations shared by shops with open year later than 2012 and shops with open year before 2008. => SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008\nCount the number of films whose title contains the word 'Dummy'. => SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\nWhat are the instruments are used in the song \"Le Pop\"? => SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\nWhat is the name of the high schooler who has the greatest number of likes? => ", "response": "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1;"}
{"question": "Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nReturn the distinct customer details. => SELECT DISTINCT customer_details FROM Customers\nList the most common type of artworks. => SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\nWhat is the name and salary of the employee with the id 242518965? => SELECT name ,  salary FROM Employee WHERE eid  =  242518965\nHow many students are older than average for each gender? => SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\nFind the name and country of origin for all artists who have release at least one song of resolution above 900. => SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1\nGive the name of the student with the most likes. => ", "response": "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1"}
{"question": "Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat are the staff roles of the staff who => SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'\nFind the name of the patient who made the appointment with the most recent start date. => SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1\nFind the name of tracks which are in Movies playlist but not in music playlist. => SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\nWhat are the names of all aicrafts that have never won any match? => SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\nReturn the sum of all payment amounts. => SELECT sum(amount) FROM payment\nShow the names of students who have at least 2 likes. => ", "response": "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) >= 2"}
{"question": "What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhich products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin? => SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"\nWhat is the name of the customer with the worst credit score? => SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1\nFind the number of distinct bed types available in this inn. => SELECT count(DISTINCT bedType) FROM Rooms;\nFind the name and position of the head of the department with the least employees. => SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\nWhat are the investors that have invested in at least two entrepreneurs? => SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2\nWhat are the names of students who have 2 or more likes? => ", "response": "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) >= 2"}
{"question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhich channels broadcast both in the morning and at night? Give me the channel names. => SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'\nHow many problems did the product called \"voluptatem\" have in record? => SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"\nWhat are the names of Art instructors who have taught a course, and the corresponding course id? => SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'\nShow the party and the number of drivers in each party. => SELECT party ,  count(*) FROM driver GROUP BY party\nFind the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20. => SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20\nShow the names of students who have a grade higher than 5 and have at least 2 friends. => ", "response": "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2)"}
{"question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nReturn the elimination movies of wrestlers on Team Orton. => SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"\nShow the crime rate of counties with a city having white percentage more than 90. => SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90\nWhat are the names of all the documents, as well as the access counts of each, ordered alphabetically? => SELECT document_name ,  access_count FROM documents ORDER BY document_name\nShow the countries that have managers of age above 50 or below 46. => SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46\nList all the model names sorted by their launch year. => SELECT model_name FROM chip_model ORDER BY launch_year\nWhat are the names of high schoolers who have a grade of over 5 and have 2 or more friends? => ", "response": "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2)"}
{"question": "How many likes does Kyle have?", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nCount the number of party events. => SELECT count(*) FROM party_events\nShow all artist names who didn't have an exhibition in 2004. => SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\nWhat is the average speed of roller coasters? => SELECT avg(Speed) FROM roller_coaster\nFind the name, age, and job title of persons who are friends with Alice for the longest years. => SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')\nFind the entry name of the catalog with the highest price (in USD). => SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1\nHow many likes does Kyle have? => ", "response": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')"}
{"question": "Return the number of likes that the high schooler named Kyle has.", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nHow many distinct claim outcome codes are there? => SELECT count(DISTINCT claim_outcome_code) FROM claims_processing\nWhich institution does \"Katsuhiro Ueno\" belong to? => SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\nHow long is the total lesson time took by customer with first name as Rylan and last name as Goodwin? => SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";\nReturn the names of products that have had complaints filed by the customer who has filed the fewest complaints. => SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1\nHow many parks are there in Atlanta city? => SELECT count(*) FROM park WHERE city = 'Atlanta';\nReturn the number of likes that the high schooler named Kyle has. => ", "response": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')"}
{"question": "Find the average grade of all students who have some friends.", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nGive me the product type, name and price for all the products supplied by supplier id 3. => SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3\nWhat are names for top three branches with most number of membership? => SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3\nFind the name of students who took some course offered by Statistics department. => SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'\nReturn the product type, name, and price for products supplied by supplier 3. => SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3\nWhat are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000? => SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000\nFind the average grade of all students who have some friends. => ", "response": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"}
{"question": "What is the average grade of students who have friends?", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat is the description of the claim status \"Open\"? => SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\nShow the location codes and the number of documents in each location. => SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code\nShow different locations and the number of performances at each location. => SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION\nWhat are the descriptions and names of the courses that have student enrollment bigger than 2? => SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\nWhat are the names of storms that did not affect two or more regions? => SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2\nWhat is the average grade of students who have friends? => ", "response": "SELECT AVG(H.grade) FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id OR H.ID = F.friend_id"}
{"question": "Find the minimum grade of students who have no friends.", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nWhat are the descriptions of the service types with product price above 100? => SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100\nWhat are the full names and department ids for the lowest paid employees across all departments. => SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)\nShow the season, the player, and the name of the country that player belongs to. => SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country\nFind the names of states that have some college students playing in goalie and mid positions. => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'\nShow the distinct leader names of colleges associated with members from country \"Canada\". => SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"\nFind the minimum grade of students who have no friends. => ", "response": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"}
{"question": "What is the lowest grade of students who do not have any friends?", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "Given a database 'network_1' have 3 tables named 'Highschooler', 'Friend', 'Likes'. Highschooler tbl have columns: 'ID', 'name', 'grade'. Friend tbl have columns: 'student_id', 'friend_id'. Likes tbl have columns: 'student_id', 'liked_id'. \nTranslate text to SQL: \nShow the member names which are in both the party with id 3 and the party with id 1. => SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1\nList all the login names and family names of course author and tutors. => SELECT login_name ,  family_name FROM Course_Authors_and_Tutors\nWhat are the names of the customers who have made two or less orders? => SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2\nWhat are the names and parties of representatives? => SELECT Name ,  Party FROM representative\nHow many instructors teach a course in the Spring of 2010? => SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\nWhat is the lowest grade of students who do not have any friends? => ", "response": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"}
{"question": "Which states have both owners and professionals living there?", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind the names of users who have more than one tweet. => SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\nWhat is the total count of enzymes? => SELECT count(*) FROM enzyme\nFind the names of procedures which physician John Wen was trained in. => SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\nHow many different cities have these stations? => SELECT count(DISTINCT city) FROM station\nCount the number of products that were never ordered. => SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\nWhich states have both owners and professionals living there? => ", "response": "SELECT DISTINCT state FROM owners WHERE state IN (SELECT state FROM professionals)"}
{"question": "Find the states where both owners and professionals live.", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nOn what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses? => SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"\nWhat are the names of people in ascending order of height? => SELECT Name FROM People ORDER BY Height ASC\nShow station names without any trains. => SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)\nFind the name of the nurse who has the largest number of appointments. => SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1\nWhich players won awards in both 1960 and 1961? Return their first names and last names. => SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961\nFind the states where both owners and professionals live. => ", "response": "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)"}
{"question": "What is the average age of the dogs who have gone through any treatments?", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind the name of all the cities and states. => SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses\nList the clubs having \"Davis Steven\" as a member. => SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\nWhat are the first names for all students who are from the major numbered 600? => SELECT Fname FROM Student WHERE Major  =  600\nWhat are the degrees conferred in \"San Francisco State University\" in 2001. => SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001\nList the name, location, mascot for all schools. => SELECT school_name ,  LOCATION ,  mascot FROM school\nWhat is the average age of the dogs who have gone through any treatments? => ", "response": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)"}
{"question": "Find the average age of the dogs who went through treatments.", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nList the forenames of all distinct drivers in alphabetical order? => SELECT DISTINCT forename FROM drivers ORDER BY forename ASC\nShow the name and country for all people whose age is smaller than the average. => SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\nWhat is the most common participant type? => SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1\nShow name and distance for all aircrafts. => SELECT name ,  distance FROM Aircraft\nFind the number of teachers who teach the student called CHRISSY NABOZNY. => SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"\nFind the average age of the dogs who went through treatments. => ", "response": "SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)"}
{"question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nHow many different cities have these stations? => SELECT count(DISTINCT city) FROM station\nWhat states have at least two representatives? => SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2\nShow the average price range of hotels that have 5 star ratings and allow pets. => SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\nHow many customers are there? => SELECT count(*) FROM customers\nWhat is maximum, minimum and average amount of outstanding of customer? => SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;\nWhich professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. => ", "response": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)"}
{"question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nList first name and last name of customers that have more than 2 payments. => SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;\nShow the fleet series of the aircrafts flied by pilots younger than 34 => SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34\nWhich physicians are trained in procedures that are more expensive than 5000? => SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000\nFind the average and minimum weight for each gender. => SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex\nFind the name of the train whose route runs through greatest number of stations. => SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1\nFind the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. => ", "response": "SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = 'Indiana' OR (SELECT COUNT(*) FROM Treatments WHERE professional_id = T1.professional_id) > 2;"}
{"question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nReturn the primary conference of the school with the lowest acc percentage score. => SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\nfind all dependent names who have a spouse relation with some employee. => SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'\nFor each policy type, return its type code and its count in the record. => SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code\nCount the number of rooms that are not in the Lamberton building. => SELECT count(*) FROM classroom WHERE building != 'Lamberton'\nWhich nationality has the most hosts? => SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\nWhich dogs have not cost their owner more than 1000 for treatment ? List the dog names . => ", "response": "SELECT d.name \nFROM Dogs AS d \nJOIN Treatments AS t ON d.dog_id = t.dog_id \nJOIN Charges AS c ON t.cost_of_treatment <= c.charge_amount \nWHERE c.charge_amount <= 1000 \nGROUP BY d.name"}
{"question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFor each grade 0 classroom, report the total number of students. => SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom\nFind the id and last name of the student that has the most behavior incidents? => SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\nWhat are the log id and entry description of each problem? => SELECT problem_log_id ,  log_entry_description FROM problem_log\nShow id and location of railways that are associated with more than one train. => SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1\nWho is the president of the club \"Bootup Baltimore\"? Give me the first and last name. => SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"\nWhat are the names of the dogs for which the owner has not spend more than 1000 for treatment ? => ", "response": "SELECT d.name FROM dogs AS d LEFT JOIN treatments AS t ON d.dog_id = t.dog_id GROUP BY d.dog_id HAVING SUM(t.cost_of_treatment) <= 1000 OR SUM(t.cost_of_treatment) IS NULL"}
{"question": "Which first names are used for professionals or owners but are not used as dog names?", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the description, code and the corresponding count of each service type? => SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code\nFind the name of students who took any class in the years of 2009 and 2010. => SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010\nWhat is the most common competition type? => SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the first name and last name of all the teachers? => SELECT DISTINCT firstname ,  lastname FROM teachers\nHow many customers don't have an account? => SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\nWhich first names are used for professionals or owners but are not used as dog names? => ", "response": "SELECT DISTINCT first_name FROM ((SELECT DISTINCT first_name FROM owners) UNION (SELECT DISTINCT first_name FROM professionals)) AS T1 WHERE first_name NOT IN (SELECT DISTINCT name FROM dogs)"}
{"question": "Find the first names that are used for professionals or owners but are not used as dog names.", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the average prices of products, grouped by manufacturer code? => SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer\nFind the average height of the players who belong to the college called 'Yale University'. => SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';\nShow the id of each employee and the number of document destruction authorised by that employee. => SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID\nCount different addresses of each school. => SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code\nWhat are the names, checking balances, and savings balances for all customers? => SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\nFind the first names that are used for professionals or owners but are not used as dog names. => ", "response": "SELECT DISTINCT(first_name) FROM (\n    SELECT first_name FROM owners\n    UNION ALL\n    SELECT first_name FROM professionals\n) AS T1\nWHERE first_name NOT IN (SELECT name FROM dogs)"}
{"question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nGive the color of the grape whose wine products have the highest average price? => SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1\nWhat are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course. => SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"\nReturn the ids and details corresponding to projects for which there are more than two documents. => SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2\nShow the minimum, maximum, and average age for all people. => SELECT min(age) ,  max(age) ,  avg(age) FROM people\nFind the name and attribute ID of the attribute definitions with attribute value 0. => SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0\nWhich professional did not operate any treatment on dogs? List the professional's id, role and email. => ", "response": "SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 WHERE NOT EXISTS (SELECT * FROM Treatments AS T2 WHERE T2.professional_id = T1.professional_id AND T2.treatment_type_code LIKE 'DOG%')"}
{"question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nGive me ids for all the trip that took place in a zip code area with average mean temperature above 60. => SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\nCount the number of songs. => SELECT count(*) FROM Songs\nSort all the rooms according to the price. Just report the room names. => SELECT roomName FROM Rooms ORDER BY basePrice;\nHow many students are taught by teacher TARRING LEIA? => SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"\nWhat is the total amount of money spent by Lucas Mancini? => SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\nGive me the id, role and email of the professionals who did not perform any treatment on dogs. => ", "response": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);"}
{"question": "Which owner owns the most dogs? List the owner id, first name and last name.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the phone numbers of customers using the policy with the code \"Life Insurance\"? => SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"\nWhat are the names of actors who are not 20 years old? => SELECT Name FROM actor WHERE Age != 20\nWhat are the names of cities that are in the county with the most police officers? => SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\nCount the number of times the team \"Boston Red Stockings\" lost in 2009 postseason. => SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;\nWhat is the id and name of the enzyme with most number of medicines that can interact as 'activator'? => SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\nWhich owner owns the most dogs? List the owner id, first name and last name. => ", "response": "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY count(*) DESC LIMIT 1)"}
{"question": "Return the owner id, first name and last name of the owner who has the most dogs.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the ordered list of customer ids? => SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\nWhat are the names of the courses that have exactly 1 student enrollment? => SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\nWhat is the name and price of the cheapest product? => SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1\nHow many patients do each physician take care of? List their names and number of patients they take care of. => SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\nWhat is the name of the aircraft that has won an award the most? => SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1\nReturn the owner id, first name and last name of the owner who has the most dogs. => ", "response": "SELECT T1.owner_id, T1.first_name, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nGROUP BY T2.owner_id \nORDER BY COUNT(*) DESC \nLIMIT 1"}
{"question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind the distinct ages of students who have secretary votes in the fall election cycle. => SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\nCount the products that have the color description \"white\" or have the characteristic name \"hot\". => SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"\nFind the name of students who have taken the prerequisite course of the course with title International Finance. => SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')\nReturn the names of songs for which format is mp3 and resolution is below 1000. => SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000\nFor each user, return the name and the average rating of reviews given by them. => SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id\nWhich professionals have done at least two treatments? List the professional's id, role, and first name. => ", "response": "SELECT T1.professional_id, T1.role_code, T1.first_name \nFROM professionals AS T1 \nJOIN treatments AS T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(T2.treatment_id) >= 2"}
{"question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50? => SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50\nList the names of the schools without any endowment. => SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)\nWhat is the total amount of money spent by Lucas Mancini? => SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\nCan you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000? => SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000\nWhat are the different names of all reviewers whose ratings do not have a date field? => SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"\nWhat are the id, role, and first name of the professionals who have performed two or more treatments? => ", "response": "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)"}
{"question": "What is the name of the breed with the most dogs?", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind all the songs performed by artist with last name \"Heilo\" => SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"\nShow the years and the official names of the host cities of competitions. => SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID\nHow many degrees were conferred in \"San Jose State University\" in 2000? => SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000\nWhat are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000? => SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000\nShow the id of each employee and the number of document destruction authorised by that employee. => SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID\nWhat is the name of the breed with the most dogs? => ", "response": "SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)"}
{"question": "Which breed do the most dogs have? Give me the breed name.", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nShow the different statuses and the numbers of roller coasters for each status. => SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status\nShow the locations that have at least two performances. => SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2\nShow the names and details of all the staff members. => SELECT Name ,  Other_Details FROM Staff\nWhat are the states of the colleges where students who tried out for the striker position attend? => SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'\nList the names of people that are not employed by any company => SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)\nWhich breed do the most dogs have? Give me the breed name. => ", "response": "SELECT B.breed_name FROM Dogs AS D JOIN Breeds AS B ON D.breed_code  =  B.breed_code GROUP BY B.breed_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1"}
{"question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nHow many products are there for each manufacturer? => SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\nHow many universities have a location that contains NY? => SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"\nWhich directors had a movie in either 1999 or 2000? => SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\nFind the top 3 products which have the largest number of problems? => SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3\nHow many students have cat allergies? => SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\nWhich owner has paid for the most treatments on his or her dogs? List the owner id and last name. => ", "response": "SELECT T1.owner_id, T2.last_name FROM (\n  SELECT owner_id, SUM(cost_of_treatment) AS total_cost \n  FROM treatments \n  JOIN dogs ON treatments.dog_id = dogs.dog_id \n  JOIN owners ON dogs.owner_id = owners.owner_id \n  GROUP BY owners.owner_id\n) AS T1 \nJOIN owners AS T2 ON T1.owner_id = T2.owner_id \nORDER BY T1.total_cost DESC \nLIMIT 1"}
{"question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nIn how many cities are there airports in the country of Greenland? => SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'\nWhat is the name of customers who do not use Cash as payment method. => SELECT customer_name FROM customers WHERE payment_method != 'Cash'\nWhat is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841? => SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)\nFind the last name of female (sex is F) students in the descending order of age. => SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC\nWhat is the name of the youngest editor? => SELECT Name FROM editor ORDER BY Age ASC LIMIT 1\nTell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. => ", "response": "SELECT t.owner_id, o.last_name \nFROM treatments t \nINNER JOIN dogs d ON t.dog_id = d.dog_id \nINNER JOIN owners o ON d.owner_id = o.owner_id \nGROUP BY t.owner_id, o.last_name \nORDER BY SUM(cost_of_treatment) DESC \nLIMIT 1"}
{"question": "What is the description of the treatment type that costs the least money in total?", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the carrier of the most expensive phone? => SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1\nWhat are the names of regions with two or more storms? => SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\nFind the name of the dorm with the largest capacity. => SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1\nWhat are the majors only less than three students are studying? => SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\nWhat are the phone numbers of all customers and suppliers. => SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers\nWhat is the description of the treatment type that costs the least money in total? => ", "response": "SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1"}
{"question": "Give me the description of the treatment type whose total cost is the lowest.", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nHow many distinct publication dates are there in our record? => SELECT COUNT (DISTINCT Publication_Date) FROM publication\nShow the average, maximum, minimum enrollment of all schools. => SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school\nWhat is the name of the staff that is in charge of the attraction named \"US museum\"? => SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"\nWhat are the clean and jerk score of the body builder with the highest total score? => SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1\nWhich themes have had corresponding exhibitions that have had attendance both below 100 and above 500? => SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500\nGive me the description of the treatment type whose total cost is the lowest. => ", "response": "SELECT treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) ASC LIMIT 1"}
{"question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the country that has the most perpetrators? => SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1\nFind the city and name of bank branches that provide business loans. => SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'\nShow the name and country for all people whose age is smaller than the average. => SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\nShow the album names and ids for albums that contain tracks with unit price bigger than 1. => SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID\nWhat are the full names of employees who with in department 70 or 90? => SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90\nWhich owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. => ", "response": "SELECT T1.owner_id, T1.zip_code \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 ON T2.dog_id = T3.dog_id \nGROUP BY T1.owner_id \nORDER BY SUM(T3.cost_of_treatment) DESC \nLIMIT 1"}
{"question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nGive the names and locations of all wrestlers. => SELECT Name ,  LOCATION FROM wrestler\nFind the number of distinct students enrolled in courses. => SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment\nHow many schools are there? => SELECT count(*) FROM school\nShow all distinct publishers for books. => SELECT DISTINCT publisher FROM book_club\nPlease list the countries and years of film market estimations. => SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID\nFind the owner id and zip code of the owner who spent the most money in total for his or her dogs. => ", "response": "SELECT owner_id, zip_code FROM Owners \nWHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id \n                   ORDER BY SUM((SELECT charge_amount FROM Charges \n                   WHERE Charges.charge_id = Treatments.treatment_type_code) * cost_of_treatment) DESC LIMIT 1)"}
{"question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nCount the number of accounts. => SELECT count(*) FROM Accounts\nWhat are the names of all songs that are in mp3 format and have a resolution lower than 1000? => SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000\nWhat are the customer phone numbers under the policy \"Life Insurance\"? => SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"\nHow many clubs does \"Linda Smith\" belong to? => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\nHow many students have cat allergies? => SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\nWhich professionals have done at least two types of treatments? List the professional id and cell phone. => ", "response": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)"}
{"question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nhow many programs are broadcast in each time section of the day? => SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day\nWhat is the average credit score for customers who have never taken a loan? => SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\nShow different teams of technicians and the number of technicians in each team. => SELECT Team ,  COUNT(*) FROM technician GROUP BY Team\nAmong all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled. => SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )\nWhat are the names of representatives with more than 10000 votes in election? => SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000\nFind the id and cell phone of the professionals who operate two or more types of treatments. => ", "response": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)"}
{"question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nHow many different departments are there in each school that has less than 5 apartments? => SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\nFind the distinct locations that has a cinema. => SELECT DISTINCT LOCATION FROM cinema\nWhat is the number of departments in Division \"AS\"? => SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"\nWhat are the distinct address type codes for all customer addresses? => SELECT DISTINCT address_type_code FROM customer_addresses\nWhat are the ids and full names of customers who hold two or more cards? => SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\nWhat are the first name and last name of the professionals who have done treatment with cost below average? => ", "response": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))"}
{"question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the name of the product with the highest price? => SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1\nFind the average access count across all documents? => SELECT avg(access_count) FROM documents\nWhat are the names of instructors who didn't teach courses in the Spring? => SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\nWhat is the total kills of the perpetrators with height more than 1.84. => SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84\nWhat are the names of all the songs whose album is under the label of \"Universal Music Group\"? => SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"\nWhich professionals have operated a treatment that costs less than the average? Give me theor first names and last names. => ", "response": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))"}
{"question": "List the date of each treatment, together with the first name of the professional who operated it.", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the name and salary of all employees in order of salary? => SELECT name ,  salary FROM Employee ORDER BY salary\nWhich vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"? => SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"\nFind the number of students in each major. => SELECT count(*) ,  major FROM student GROUP BY major\nFind all the songs performed by artist with last name \"Heilo\" => SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"\nWhat are the enrollments of schools whose denomination is not \"Catholic\"? => SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"\nList the date of each treatment, together with the first name of the professional who operated it. => ", "response": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id"}
{"question": "What are the date and the operating professional's first name of each treatment?", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are all the policy types of the customer that has the most policies listed? => SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)\nHow many students are age 18? => SELECT count(*) FROM Student WHERE age  =  18\nWhat are the names of all the video games and their types in alphabetical order? => SELECT gname ,  gtype FROM Video_games ORDER BY gname\nWhat is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841? => SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)\nCount the number of institutions. => SELECT count(*) FROM inst\nWhat are the date and the operating professional's first name of each treatment? => ", "response": "SELECT date_of_treatment, first_name\nFROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id"}
{"question": "List the cost of each treatment and the corresponding treatment type description.", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nList the project details of the project both producing patent and paper as outcomes. => SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'\nList the names of products that are not in any event. => SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)\nWhat are the different first names for customers from Brazil who have also had an invoice? => SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"\nWhat is employee Nancy Edwards's phone number? => SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\nWhat are the codes corresponding to document types for which there are less than 3 documents? => SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\nList the cost of each treatment and the corresponding treatment type description. => ", "response": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code"}
{"question": "What are the cost and treatment type description of each treatment?", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhich channels are broadcast in the morning? Give me the channel names. => SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'\nGive the order ids for all orders, as well as the total product quantity in each. => SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id\nA list of the top 8 countries by gross/total invoice size. List country name and gross invoice size. => SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;\nHow many budget record has a budget amount smaller than the invested amount? => SELECT count(*) FROM budget WHERE budgeted  <  invested\nWhat is the title and credits of the course that is taught in the largest classroom (with the highest capacity)? => SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)\nWhat are the cost and treatment type description of each treatment? => ", "response": "SELECT t1.cost_of_treatment, t2.treatment_type_description FROM Treatments AS t1 JOIN Treatment_Types AS t2 ON t1.treatment_type_code = t2.treatment_type_code"}
{"question": "List each owner's first name, last name, and the size of his for her dog.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the name and typical buying and selling prices of the products that have color described as \"yellow\"? => SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"\nFind the name of the user who gives the most reviews. => SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1\nWhat is the alphabetically ordered list of all distinct medications? => SELECT DISTINCT name FROM medication ORDER BY name\nWhich publishers did not publish a book in 1989? => SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989\nList the name of technicians whose team is not \"NYY\". => SELECT Name FROM technician WHERE Team != \"NYY\"\nList each owner's first name, last name, and the size of his for her dog. => ", "response": "SELECT o.first_name, o.last_name, s.size_description FROM owners AS o JOIN dogs AS d ON o.owner_id = d.owner_id JOIN sizes AS s ON d.size_code = s.size_code ORDER BY o.last_name, o.first_name"}
{"question": "What are each owner's first name, last name, and the size of their dog?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nCount the number of gymnasts. => SELECT count(*) FROM gymnast\nWhich tourist attraction is associated with the photo \"game1\"? Return its name. => SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"\nList all church names in descending order of opening date. => SELECT name FROM church ORDER BY open_date DESC\nList Aerosmith's albums. => SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\nCount the number of captains younger than 50 of each rank. => SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank\nWhat are each owner's first name, last name, and the size of their dog? => ", "response": "SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;"}
{"question": "List pairs of the owner's first name and the dogs's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nlist the first and last names, and the addresses of all employees in the ascending order of their birth date. => SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate\nWhat is first names of the top 5 staff who have handled the greatest number of complaints? => SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5\nWhat are the names of all races that occurred after 12:00:00 or before 09:00:00? => SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"\nWhat are the names of all clubs that do not have any players? => SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\nList all media types. => SELECT name FROM media_types;\nList pairs of the owner's first name and the dogs's name. => ", "response": "SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;"}
{"question": "What are each owner's first name and their dogs's name?", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students? => SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"\nFind the name of the ships that have more than one captain. => SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\nIn which year are there festivals both inside the 'United States' and outside the 'United States'? => SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'\nReturn the most common full name among all actors. => SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1\nWhat is the name, city, country, and elevation for every airport in the city of New York? => SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'\nWhat are each owner's first name and their dogs's name? => ", "response": "SELECT Owners.first_name, Dogs.name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id"}
{"question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nShow all information on the airport that has the largest number of international passengers. => SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1\nFor each election cycle, report the number of voting records. => SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\nWhat are the names and opening hours of the tourist attractions that can be accessed by bus or walk? => SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"\nFind the types and details for all premises and order by the premise type. => SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type\nWhen did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible? => SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'\nList the names of the dogs of the rarest breed and the treatment dates of them. => ", "response": "SELECT Dogs.name, Treatments.date_of_treatment\nFROM Dogs\nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Breeds.breed_name = (SELECT breed_name FROM Breeds ORDER BY breed_code LIMIT 1)"}
{"question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhich game type has least number of games? => SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1\nFind the id of songs that are available in mp4 format and have resolution lower than 1000. => SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000\nHow many book clubs are there? => SELECT count(*) FROM book_club\nFind the average hours for the students whose tryout decision is no. => SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'\nShow all customer ids and the number of accounts for each customer. => SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\nWhich dogs are of the rarest breed? Show their names and treatment dates. => ", "response": "SELECT d.name, t.date_of_treatment \nFROM Dogs AS d \nJOIN Breeds AS b ON d.breed_code = b.breed_code \nJOIN Treatments AS t ON d.dog_id = t.dog_id \nWHERE b.breed_name = (SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY count(*) ASC LIMIT 1)"}
{"question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nCount the number of schools that have had basketball matches. => SELECT count(DISTINCT school_id) FROM basketball_match\nShow all the cinema names and opening years in descending order of opening year. => SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC\nWhat are the ids of all songs that have higher resolution of the average resolution in the modern genre? => SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")\nWhat are the names of documents that contain the substring \"CV\"? => SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"\nFind the document type name of the document named \"How to read a book\". => SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"\nWhich dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. => ", "response": "SELECT Owners.first_name, Dogs.name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Owners.state = \"Virginia\""}
{"question": "Find the first names of owners living in Virginia and the names of dogs they own.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nHow many rooms in each building have a capacity of over 50? => SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building\nFind the name of amenity that is most common in all dorms. => SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1\nWhat is the first name and last name of the customer that has email \"luisg@embraer.com.br\"? => SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"\nList the course name of courses sorted by credits. => SELECT CName FROM COURSE ORDER BY Credits\nWhat is the station station and end station for the trips with the three smallest ids? => SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\nFind the first names of owners living in Virginia and the names of dogs they own. => ", "response": "SELECT o.first_name, d.name FROM owners AS o JOIN dogs AS d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia' ORDER BY o.first_name ASC"}
{"question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nHow many courses do the student whose id is 171 attend? => SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\nReturn the average number of weeks on top for volumes by artists that are at most 25 years old. => SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25\nShow theme and year for all exhibitions with ticket prices lower than 15. => SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15\nWhat are the names of actors ordered descending by the year in which their musical was awarded? => SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\nShow the city and the number of branches opened before 2010 for each city. => SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city\nWhat are the arriving date and the departing date of the dogs who have gone through a treatment? => ", "response": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_id IS NOT NULL"}
{"question": "Find the arriving date and the departing date of the dogs that received a treatment.", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nShow the id, name of each festival and the number of artworks it has nominated. => SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID\nHow many papers are written by authors from the institution \"University of Pennsylvania\"? => SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"\nHow many times the number of adults and kids staying in a room reached the maximum capacity of the room? => SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;\nPlease show the names of aircrafts associated with airport with name \"London Gatwick\". => SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"\nFind the name of the swimmer who has at least 2 records. => SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2\nFind the arriving date and the departing date of the dogs that received a treatment. => ", "response": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.treatment_id IS NOT NULL"}
{"question": "List the last name of the owner owning the youngest dog.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nPlease list the countries and years of film market estimations. => SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID\nWhat is the highest acc percent score in the competition? => SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\nList the number of invoices from the US, grouped by state. => SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;\nList the official name and status of the city with the largest population. => SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\nWhat are the building, room number, semester and year of courses in the Psychology department, sorted using course title? => SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title\nList the last name of the owner owning the youngest dog. => ", "response": "SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs))"}
{"question": "Who owns the youngest dog? Give me his or her last name.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhich parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee? => SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"\nShow the number of transaction types. => SELECT count(DISTINCT transaction_type) FROM Financial_Transactions\nWhat are the names of the customers who bought product \"food\" at least once? => SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1\nWhat are the ids of the faculty members who do not advise any student. => SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student\nShow the maximum and minimum share count of different transaction types. => SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code\nWho owns the youngest dog? Give me his or her last name. => ", "response": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.date_departed  IS NULL ORDER BY T2.date_of_birth ASC LIMIT 1"}
{"question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhich winery is the wine that has the highest score from? => SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1\nHow many male students (sex is 'M') are allergic to any type of food? => SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\nGive me ids for all the trip that took place in a zip code area with average mean temperature above 60. => SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\nWhat are the different cities that have more than 100 memberships? => SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100\nWhat is the description of the club named \"Tennis Club\"? => SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"\nList the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. => ", "response": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\""}
{"question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind the name of bank branch that provided the greatest total amount of loans. => SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1\nFind the number of vocal types used in song \"Le Pop\" => SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\nfind the name and age of the pilot who has won the most number of times among the pilots who are younger than 30. => SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1\nList each birth place along with the number of people from there. => SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place\nWhat campus has the most faculties in 2003? => SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\nWhat are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? => ", "response": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'"}
{"question": "What are the arriving date and the departing date of all the dogs?", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the type of the organization with the most research staff? => SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\nWhat are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'? => SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"\nList all location codes and location names. => SELECT location_code ,  location_name FROM Ref_locations\nShow the id and builder of the railway that are associated with the most trains. => SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1\nShow the names of players and names of their coaches. => SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID\nWhat are the arriving date and the departing date of all the dogs? => ", "response": "SELECT date_arrived, date_departed FROM Dogs"}
{"question": "List the arrival date and the departure date for all the dogs.", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind the name and address of the customers who have both New and Pending orders. => SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\nShow the name of aircraft which fewest people have its certificate. => SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\nFind the total population of the districts where the area is bigger than the average city area. => SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)\nShow name and distance for all aircrafts. => SELECT name ,  distance FROM Aircraft\nHow many students live in HKG or CHI? => SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\nList the arrival date and the departure date for all the dogs. => ", "response": "SELECT date_arrived, date_departed FROM Dogs"}
{"question": "How many dogs went through any treatments?", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nCount the number of distinct product types. => SELECT count(DISTINCT product_type_code) FROM products\nShow the name of the building that has the most company offices. => SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1\nShow each gender code and the corresponding count of guests sorted by the count in descending order. => SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC\nGive the different hometowns of gymnasts that have a total point score of above 57.5. => SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5\nWhat is the id of the instructor who advises of all students from History department? => SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\nHow many dogs went through any treatments? => ", "response": "SELECT COUNT(DISTINCT dog_id) FROM treatments"}
{"question": "Count the number of dogs that went through a treatment.", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind the name of the courses that do not have any prerequisite? => SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)\nGive the title of the prerequisite to the course International Finance. => SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\nWhich three cities have the largest regional population? => SELECT city FROM city ORDER BY regional_population DESC LIMIT 3\ndisplay all the information of those employees who did not have any job in the past. => SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)\nList the name of all projects that are operated longer than the average working hours of all projects. => SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)\nCount the number of dogs that went through a treatment. => ", "response": "SELECT COUNT(DISTINCT dog_id) FROM treatments"}
{"question": "How many professionals have performed any treatment to dogs?", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order. => SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details\nShow the name and the nationality of the oldest host. => SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1\nWhat are the names of wines that are more expensive then all wines made in the year 2006? => SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)\nWhat is the name of each course and the corresponding number of student enrollment? => SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\nFind the name and category of the most expensive product. => SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1\nHow many professionals have performed any treatment to dogs? => ", "response": "SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE professional_id IS NOT NULL AND dog_id IS NOT NULL"}
{"question": "Find the number of professionals who have ever treated dogs.", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nShow the ids of all employees who have authorized destruction. => SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\nFind the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA. => SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"\nFind the titles of albums that contain tracks of both the Reggae and Rock genres. => SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\nWhat are the names of customers with a higher checking balance than savings balance? => SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\nWhat are the first names of all students in Smith Hall? => SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'\nFind the number of professionals who have ever treated dogs. => ", "response": "SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs)"}
{"question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind the players whose names contain letter 'a'. => SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'\nReturn the average, maximum, and total revenues across all manufacturers. => SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers\nWhich countries have more than two members? => SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2\nWhat are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'? => SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'\nWhich tourist attractions does the visitor with detail 'Vincent' visit? => SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"\nWhich professionals live in a city containing the substring 'West'? List his or her role, street, city and state. => ", "response": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'"}
{"question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind the id of the candidate who got the lowest oppose rate. => SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1\nShow the name, time, and service for all trains. => SELECT name ,  TIME ,  service FROM train\nWhat are the ids for courses that were offered in both Fall of 2009 and Spring of 2010? => SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010\nFor all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description. => SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\nList the physicians' employee ids together with their primary affiliation departments' ids. => SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1\nFind the role, street, city and state of the professionals living in a city that contains the substring 'West'. => ", "response": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'"}
{"question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nShow all the distinct president votes made on 08/30/2015. => SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"\nShow the country where people older than 30 and younger than 25 are from. => SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30\nWhich staff have contacted which engineers? List the staff name and the engineer first name and last name. => SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id\nWhat are the categories of music festivals for which there have been more than 1 music festival? => SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1\nHow many songs have a lead vocal? => SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"\nWhich owners live in the state whose name contains the substring 'North'? List his first name, last name and email. => ", "response": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'"}
{"question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the id of every song that has a resolution higher than that of a song with a rating below 8? => SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\nWhat are the names of entrepreneurs? => SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\nPlease show the employee last names that serves no more than 20 customers. => SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20\nList first name and last name of customers that have more than 2 payments. => SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;\nShow the names of editors that are on the committee of journals with sales bigger than 3000. => SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000\nReturn the first name, last name and email of the owners living in a state whose name contains the substring 'North'. => ", "response": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'"}
{"question": "How many dogs have an age below the average?", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the names of the ships that are not from the United States? => SELECT Name FROM ship WHERE Nationality != \"United States\"\nHow many professors who has a either Ph.D. or MA degree? => SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\nWhat is the maximum enrollment across all schools? => SELECT max(Enrollment) FROM university\nFor each distinct product name, show its average product price. => SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name\nWhat are the names of customers who have not taken a Mortage loan? => SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'\nHow many dogs have an age below the average? => ", "response": "SELECT count(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)"}
{"question": "Count the number of dogs of an age below the average.", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFor every medicine id, what are the names of the medicines that can interact with more than one enzyme? => SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\nOf all players with an overall rating greater than 80, how many are right-footed and left-footed? => SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot\nHow many students and instructors are in each department? => SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name\nWhich contact channel has been used by the customer with name \"Tillman Ernser\"? => SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"\nFor each city, return the highest latitude among its stations. => SELECT city ,  max(lat) FROM station GROUP BY city\nCount the number of dogs of an age below the average. => ", "response": "SELECT count(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)"}
{"question": "How much does the most recent treatment cost?", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the first names of all history professors who do not teach? => SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num\nWhat is the average bike availablility for stations not in Palo Alto? => SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\nWhat is the phone and email for customer with first name Aniyah and last name Feest? => SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"\nList all the distinct product names ordered by product id? => SELECT DISTINCT product_name FROM product ORDER BY product_id\nShow all locations and the number of gas stations in each location ordered by the count. => SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\nHow much does the most recent treatment cost? => ", "response": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"question": "Show me the cost of the most recently performed treatment.", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the ids and details for each project? => SELECT project_id ,  project_details FROM Projects\nShow the name of track with most number of races. => SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\nHow many accounts are there in total? => SELECT count(*) FROM accounts\nWhat is the total time for all lessons taught by Janessa Sawayn? => SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nWhat type of game is Call of Destiny? => SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"\nShow me the cost of the most recently performed treatment. => ", "response": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"question": "How many dogs have not gone through any treatment?", "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nList the number of invoices and the invoice total from California. => SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";\nWhat are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"? => SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"\nHow many distinct publication dates are there in our record? => SELECT COUNT (DISTINCT Publication_Date) FROM publication\nWhat is the description of the role named \"Proof Reader\"? => SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"\nShow the number of document types. => SELECT count(*) FROM Ref_document_types\nHow many dogs have not gone through any treatment? => ", "response": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)"}
{"question": "Tell me the number of dogs that have not received any treatment .", "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nCount the number of Annual Meeting events that took place in the region of the United Kingdom. => SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\nOn which day and in which zip code was the min dew point lower than any day in zip code 94107? => SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)\nWhat is the most popular payment method? => SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1\nFind the id and local authority of the station with has the highest average high temperature. => SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1\nShow total hours per week and number of games played for students under 20. => SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20\nTell me the number of dogs that have not received any treatment . => ", "response": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)"}
{"question": "How many owners temporarily do not have any dogs?", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the customer phone numbers under the policy \"Life Insurance\"? => SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"\nWhich months have more than 2 happy hours? => SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2\nWhat are the details for all projects that did not hire any staff in a research role? => SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\nCount the number of schools. => SELECT count(*) FROM school\nHow many members are in each party? => SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\nHow many owners temporarily do not have any dogs? => ", "response": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)"}
{"question": "Find the number of owners who do not own any dogs at this moment.", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind the name of the youngest organization. => SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\nList all the contact channel codes that were used less than 5 times. => SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\nShow name, address road, and city for all branches sorted by open year. => SELECT name ,  address_road ,  city FROM branch ORDER BY open_year\nFor each election cycle, report the number of voting records. => SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\nCount the number of different countries that climbers are from. => SELECT COUNT(DISTINCT Country) FROM climber\nFind the number of owners who do not own any dogs at this moment. => ", "response": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NULL)"}
{"question": "How many professionals did not operate any treatment on dogs?", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the name, city, and country of the airport with the lowest altitude? => SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\nWhat are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed? => SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details\nFind the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. => SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\nWhich colleges does each player with a name that starts with the letter D  who tried out go to? => SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'\nCount the number of customers. => SELECT count(*) FROM Customers\nHow many professionals did not operate any treatment on dogs? => ", "response": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)"}
{"question": "Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nReturn the maximum enrollment across all schools. => SELECT max(Enrollment) FROM university\nHow many aircrafts exist in the database? => SELECT count(*) FROM Aircraft\nCount the number of products that were never ordered. => SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\nFind the names of swimmers who has a result of \"win\". => SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'\nWhat is the id of the most recent order? => SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1\nFind the number of professionals who have not treated any dogs. => ", "response": "SELECT count(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)"}
{"question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the city name, id, and number of addresses corresponding to the city with the most addressed? => SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1\nWhich accelerator name contains substring \"Opera\"? => SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"\nHow many apartments do not have any facility? => SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)\nFor each airport name, how many routes start at that airport? => SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name\nList each test result and its count in descending order of count. => SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC\nList the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. => ", "response": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1"}
{"question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nList the council tax ids and their related cmi cross references of all the parking fines. => SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines\nWhat is the total number of deaths and damage for all storms with a max speed greater than the average? => SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)\nFind the name and age of all males in order of their age. => SELECT name FROM Person WHERE gender  =  'male' ORDER BY age\nList the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\". => SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"\nGive the distinct department ids of departments in which a manager is in charge of 4 or more employees? => SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\nWhat are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. => ", "response": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1"}
{"question": "What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the total number of the audiences who visited any of the festivals? => SELECT sum(Num_of_Audience) FROM festival_detail\nWhat is the name and date of the most recent race? => SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1\nWhat is the total amount of grants given by each organisations? Also list the organisation id. => SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id\nWhat are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names. => SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy\nShow the ids of the investors who have at least two transactions. => SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2\nWhat is the average age of all the dogs? => ", "response": "SELECT AVG(age) FROM Dogs"}
{"question": "Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the famous titles of the artist \"Triumfall\"? => SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"\nShow the top 3 apartment type codes sorted by the average number of rooms in descending order. => SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3\nList the first and last names of all distinct staff members who are assigned to the problem whose id is 1. => SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1\nWhat are the names of customers who have not taken a Mortage loan? => SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'\nWhich physicians have never taken any appointment? Find their names. => SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\nCompute the average age of all the dogs. => ", "response": "SELECT AVG(age) FROM Dogs"}
{"question": "What is the age of the oldest dog?", "sql": "SELECT max(age) FROM Dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nPlease show the employee first names and ids of employees who serve at least 10 customers. => SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\nFind the number of employees we have. => SELECT count(*) FROM Employees\nFind the name of the nurse who has the largest number of appointments. => SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1\nReturn the average enrollment of universities founded before 1850. => SELECT avg(enrollment) FROM university WHERE founded  <  1850\nWhat are the different parties of representative? Show the party name and the number of representatives in each party. => SELECT Party ,  COUNT(*) FROM representative GROUP BY Party\nWhat is the age of the oldest dog? => ", "response": "SELECT MAX(age) FROM Dogs"}
{"question": "Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhich city has the least number of customers whose type code is \"Good Credit Rating\"? => SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1\nList official names of cities in descending order of population. => SELECT Official_Name FROM city ORDER BY Population DESC\nFind the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin. => SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')\nWho is the youngest male? => SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\nWhat are the names of wines made from red grapes? => SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"\nTell me the age of the oldest dog. => ", "response": "SELECT max(age) AS oldest_dog_age FROM Dogs"}
{"question": "How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are all the employee ids and the names of the countries in which they work? => SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\nWhat is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ? => SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\nReturn the hosts of competitions for which the theme is not Aliens? => SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\nWhat are the names of studios that have made two or more films? => SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2\nList the names of mountains that do not have any climber. => SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\nHow much does each charge type costs? List both charge type and amount. => ", "response": "SELECT charge_type, charge_amount FROM Charges"}
{"question": "List each charge type and its amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is all the information about employees with D or S in their first name, ordered by salary descending? => SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC\nWhich major has least number of students? List the major and the number of students. => SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;\nFind the name of the department that has the biggest number of students minored in? => SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1\nList all the customers in increasing order of IDs. => SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\nWhich room has the highest base price? => SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;\nList each charge type and its amount. => ", "response": "SELECT charge_type, charge_amount FROM Charges;"}
{"question": "How much does the most expensive charge type costs?", "sql": "SELECT max(charge_amount) FROM Charges", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nHow many distinct types of accounts are there? => SELECT count(DISTINCT acc_type) FROM customer\nHow many parties are there? => SELECT count(*) FROM party\nWhat are the details for all projects that did not hire any staff in a research role? => SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\ndisplay the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working. => SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\nList the names of roller coasters by ascending order of length. => SELECT Name FROM roller_coaster ORDER BY LENGTH ASC\nHow much does the most expensive charge type costs? => ", "response": "SELECT MAX(charge_amount) FROM Charges WHERE charge_type = (SELECT MAX(charge_type) FROM Charges)"}
{"question": "What is the charge amount of the most expensive charge type?", "sql": "SELECT max(charge_amount) FROM Charges", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nList the name and residence for players whose occupation is not \"Researcher\". => SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\nWhat are the first name and last name of the players whose death record is empty? => SELECT name_first ,  name_last FROM player WHERE death_year = '';\nWhat are the names of the tourist attractions that have parking or shopping as their feature details? => SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'\nShow the distinct position of players from college UCLA or Duke. => SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"\nWhat are the names of parties that have no members? => SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\nWhat is the charge amount of the most expensive charge type? => ", "response": "SELECT MAX(charge_amount) FROM Charges"}
{"question": "List the email, cell phone and home phone of all the professionals.", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhich address do not have any member with the black membership card? => SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'\nList the name of all rooms sorted by their prices. => SELECT roomName FROM Rooms ORDER BY basePrice;\nWhat are the names of products with price at most 200? => SELECT name FROM products WHERE price  <=  200\nFind the id of songs that are available in mp4 format and have resolution lower than 1000. => SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000\nWhat is the type of the document whose description starts with the word 'Initial'? => SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'\nList the email, cell phone and home phone of all the professionals. => ", "response": "SELECT email_address, cell_number, home_phone FROM Professionals"}
{"question": "What are the email, cell phone and home phone of each professional?", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat are the student ids for students over 20 years old? => SELECT StuID FROM Student WHERE age  >  20\nWhat is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ? => SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\nWhat are the names of wrestlers who have never been eliminated? => SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)\nWhat are the names of parties that have no members? => SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\nFind the name of project that continues for the longest time. => SELECT name FROM projects ORDER BY hours DESC LIMIT 1\nWhat are the email, cell phone and home phone of each professional? => ", "response": "SELECT email_address, cell_number, home_phone FROM Professionals"}
{"question": "What are all the possible breed type and size type combinations?", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the cell phone number of the student whose address has the lowest monthly rental? => SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1\nWhat is the course title of the prerequisite of course Mobile Computing? => SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\nFind the product names whose average product price is below 1000000. => SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000\nShow name, address road, and city for all branches sorted by open year. => SELECT name ,  address_road ,  city FROM branch ORDER BY open_year\nWhat are the ids for all sporty students who are on scholarship? => SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'\nWhat are all the possible breed type and size type combinations? => ", "response": "SELECT b.breed_name, s.size_description FROM Breeds AS b, Sizes AS s"}
{"question": "Find the distinct breed type and size type combinations for dogs.", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nFind all details for each swimmer. => SELECT * FROM swimmer\nlist names of all departments ordered by their names. => SELECT dept_name FROM department ORDER BY dept_name\nWhich state has the greatest total number of bank customers? => SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1\nWhat are the types of every competition and in which countries are they located? => SELECT Competition_type ,  Country FROM competition\nWhat are the descriptions of the categories that products with product descriptions that contain the letter t are in? => SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'\nFind the distinct breed type and size type combinations for dogs. => ", "response": "SELECT DISTINCT breed_code, size_code FROM Dogs"}
{"question": "List the first name of all the professionals along with the description of the treatment they have done.", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nWhat is the first name, GPA, and phone number of the students with the top 5 GPAs? => SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5\nWhat are the team and the location of school each player belongs to? => SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID\nFind the name of customers who did not pay with Cash. => SELECT customer_name FROM customers WHERE payment_method != 'Cash'\nWhat are the invoice dates, order ids, and order details for all invoices? => SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\nFind the name of dorms that do not have amenity TV Lounge. => SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\nList the first name of all the professionals along with the description of the treatment they have done. => ", "response": "SELECT T1.first_name, T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id"}
{"question": "What are each professional's first name and description of the treatment they have performed?", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "prompt": "Given a database 'dog_kennels' have 8 tables named 'Breeds', 'Charges', 'Sizes', 'Treatment_Types', 'Owners', 'Dogs', 'Professionals', 'Treatments'. Breeds tbl have columns: 'breed_code', 'breed_name'. Charges tbl have columns: 'charge_id', 'charge_type', 'charge_amount'. Sizes tbl have columns: 'size_code', 'size_description'. Treatment_Types tbl have columns: 'treatment_type_code', 'treatment_type_description'. Owners tbl have columns: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'. Dogs tbl have columns: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'. Professionals tbl have columns: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'. Treatments tbl have columns: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'. \nTranslate text to SQL: \nGive the name of the department with the lowest budget. => SELECT dept_name FROM department ORDER BY budget LIMIT 1\nWhat is the name of the artist, for each language, that has the most songs with a higher resolution than 500? => SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1\nFind the number of reviews. => SELECT count(*) FROM review\nWhat is the name, type, and flag of the ship that was built in the most recent year? => SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1\nFind the number and average age of students living in each city. => SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code\nWhat are each professional's first name and description of the treatment they have performed? => ", "response": "SELECT Professionals.first_name, Treatments.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id"}
{"question": "How many singers are there?", "sql": "SELECT count(*) FROM singer", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nCount the number of documents with expenses. => SELECT count(*) FROM Documents_with_expenses\nWhat are the names of all campuses located at Chico? => SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"\nWhich party has the largest number of delegates? => SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\nWhich physician was trained in the procedure that costs the most. => SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1\nWhat are the names, checking balances, and savings balances for all customers? => SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\nHow many singers are there? => ", "response": "SELECT COUNT(*) FROM singer"}
{"question": "What is the count of singers?", "sql": "SELECT count(*) FROM singer", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nFind the name and address of the customers who have both New and Pending orders. => SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\nFind the name of instructors who are advising more than one student. => SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1\nFind the name of dorms which have TV Lounge but no Study Room as amenity. => SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'\nReturn the the details of all products. => SELECT DISTINCT product_details FROM products\nFind the names of courses that have either 3 credits or 1 credit but 4 hours. => SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4\nWhat is the count of singers? => ", "response": "SELECT COUNT(*) FROM singer;"}
{"question": "List the name of singers in ascending order of net worth.", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nList the names and scores of all wines. => SELECT Name ,  Score FROM WINE\nWhat is the name of the shop that has the most different kinds of devices in stock? => SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the appelations for wines produced after 2008 but not in the Central Coast area? => SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"\nWhat instruments does the the song \"Le Pop\" use? => SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\nFind the first names of teachers whose email address contains the word \"man\". => SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'\nList the name of singers in ascending order of net worth. => ", "response": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}
{"question": "What are the names of singers ordered by ascending net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nShow all distinct city where branches with at least 100 memberships are located. => SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100\nWhat is the average, maximum, and minimum for the number of hours spent training? => SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player\nWho are the players from Indonesia? => SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\nReport the total number of students for each fourth-grade classroom. => SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom\nWhat are the names of companies that do not make DVD drives? => SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'\nWhat are the names of singers ordered by ascending net worth? => ", "response": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}
{"question": "What are the birth year and citizenship of singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent? => SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"\nWhat are the country names, area and population which has both roller coasters with speed higher => SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55\nWhat are the names and account balances for customers who have taken a total amount of more than 5000 in loans? => SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000\nList the distinct ranges of the mountains with the top 3 prominence. => SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3\nShow the delegate and committee information of elections. => SELECT Delegate ,  Committee FROM election\nWhat are the birth year and citizenship of singers? => ", "response": "SELECT Birth_Year, Citizenship FROM singer"}
{"question": "What are the birth years and citizenships of the singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat is the maximum OMIM value in the database? => SELECT max(OMIM) FROM enzyme\nList the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured. => SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'\nFind the list of attribute data types possessed by more than 3 attribute definitions. => SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\nList the amount and donor name for the largest amount of donation. => SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1\nShow the description and code of the attraction type most tourist attractions belong to. => SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the birth years and citizenships of the singers? => ", "response": "SELECT Birth_Year, Citizenship FROM singer"}
{"question": "List the name of singers whose citizenship is not \"France\".", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nHow many gold medals has the club with the most coaches won? => SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\nShow names of climbers and the names of mountains they climb. => SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\nWhat is the name of the movie that has been reviewed the most? => SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\nHow many different majors are there and how many different city codes are there for each student? => SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\nFind the id for the trips that lasted at least as long as the average duration of trips in zip code 94103. => SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)\nList the name of singers whose citizenship is not \"France\". => ", "response": "SELECT Name FROM singer WHERE Citizenship != 'France'"}
{"question": "What are the names of the singers who are not French citizens?", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat is the velocity of the pilot named 'Thompson'? => SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'\nWhat is the average price for a lesson taught by Janessa Sawayn? => SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\nWhich assets did not incur any fault log? List the asset model. => SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)\nIn which distinct years was the governor \"Eliot Spitzer\"? => SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"\nWhat are the titles of all movies that have not been rated? => SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)\nWhat are the names of the singers who are not French citizens? => ", "response": "SELECT Name FROM singer WHERE Citizenship != 'French'"}
{"question": "Show the name of singers whose birth year is either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nSelect the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order). => SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC\nWhich cities have 2 to 4 parks? => SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\nHow many different status codes of things are there? => SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things\nList the carriers of devices in ascending alphabetical order. => SELECT Carrier FROM device ORDER BY Carrier ASC\nWhat are the first names and last names of the students that minor in the department with DNO 140. => SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140\nShow the name of singers whose birth year is either 1948 or 1949? => ", "response": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949"}
{"question": "What are the names of the singers whose birth years are either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nList the names of buildings that have no company office. => SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\nHow many people are older than every engineer? => SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\nIn which city do the most employees live and how many of them live there? => SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;\nWhen did the staff member Janessa Sawayn leave the company? => SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\nWhat are the countries that contain 3 or more cities? => SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3\nWhat are the names of the singers whose birth years are either 1948 or 1949? => ", "response": "SELECT name FROM singer WHERE birth_year IN (1948, 1949)"}
{"question": "What is the name of the singer with the largest net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat are the dates that have an average sea level pressure between 30.3 and 31? => SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31\nWhat are the names of instructors who earn more than at least one instructor from the Biology department? => SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\nFind the names of all artists that have \"a\" in their names. => SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\nList the studios which average gross is above 4500000. => SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000\nReturn the titles of any movies with an R rating. => SELECT title FROM film WHERE rating  =  'R'\nWhat is the name of the singer with the largest net worth? => ", "response": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}
{"question": "What is the name of the singer who is worth the most?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nReturn the names and ids of all products whose price is between 600 and 700. => SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\nWhat is the headquarter of the company whose founder is James? => SELECT headquarter FROM manufacturers WHERE founder  =  'James'\nWhat are the dates of ceremony and results for each music festival? => SELECT Date_of_ceremony ,  RESULT FROM music_festival\nWhat is the type with the fewest games? => SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1\nWhat is the most common role for the staff? => SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\nWhat is the name of the singer who is worth the most? => ", "response": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}
{"question": "Show different citizenship of singers and the number of singers of each citizenship.", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat are the denomination more than one school have? => SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1\nList the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\" => SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"\nFind the address and staff number of the shops that do not have any happy hour. => SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)\nList the name of all customers sorted by their account balance in ascending order. => SELECT cust_name FROM customer ORDER BY acc_bal\nFind the number of students taught by TARRING LEIA. => SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"\nShow different citizenship of singers and the number of singers of each citizenship. => ", "response": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship"}
{"question": "For each citizenship, how many singers are from that country?", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nHow many documents can one grant have at most? List the grant id and number. => SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1\nFind the number of amenities for each of the dorms that can accommodate more than 100 students. => SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid\nWhat are the names and other details for accounts corresponding to the customer named Meaghan Keeling? => SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"\nReturn the budget type codes, budget type descriptions and document ids for documents with expenses. => SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code\nWhat are the names of cities that are in counties that have a crime rate below 100? => SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)\nFor each citizenship, how many singers are from that country? => ", "response": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship"}
{"question": "Please show the most common citizenship of singers.", "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nShow the park of the roller coaster with the highest speed. => SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1\nWhat are the countries of all airlines whose names start with Orbit? => SELECT country FROM airlines WHERE name LIKE 'Orbit%'\nFind the number of users in each role. => SELECT count(*) ,  role_code FROM users GROUP BY role_code\nWhat are the first and last names of all students who are living in a dorm with a TV Lounge? => SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\nWhat is the number of artists for each gender? => SELECT count(*) ,  gender FROM artist GROUP BY gender\nPlease show the most common citizenship of singers. => ", "response": "SELECT Citizenship, COUNT(*) AS count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1"}
{"question": "What is the most common singer citizenship ?", "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat are the names of courses that give either 3 credits, or 1 credit and 4 hours? => SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4\nReturn the duration of the actor with the greatest age. => SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\nWhat campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco? => SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"\ndisplay the average salary of employees for each department who gets a commission percentage. => SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\nFind the name and id of the good with the highest average rank. => SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1\nWhat is the most common singer citizenship ? => ", "response": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"}
{"question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nFind the catalog publisher that has the most catalogs. => SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1\nShow the description of the transaction type that occurs most frequently. => SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1\nWhat are the names of workshop groups in which services with product name \"film\" are performed? => SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"\nFind the average age and experience working length of journalists working on different role type. => SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type\nList the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts. => SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC\nShow different citizenships and the maximum net worth of singers of each citizenship. => ", "response": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship."}
{"question": "For each citizenship, what is the maximum net worth?", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat information is there on albums from 2010? => SELECT * FROM Albums WHERE YEAR  =  2010\nShow name and salary for all employees sorted by salary. => SELECT name ,  salary FROM Employee ORDER BY salary\nWhat details do we have on the students who registered for courses most recently? => SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1\nSort all the rooms according to the price. Just report the room names. => SELECT roomName FROM Rooms ORDER BY basePrice;\nWhat are the carriers of devices that are in stock in more than a single shop? => SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1\nFor each citizenship, what is the maximum net worth? => ", "response": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}
{"question": "Show titles of songs and names of singers.", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhich party has the largest number of delegates? => SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\nIn which year were most of ships built? => SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1\nList roles that have more than one employee. List the role description and number of employees. => SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;\nFor each nomination, show the name of the artwork and name of the festival where it is nominated. => SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID\nFind the top 3 products which have the largest number of problems? => SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3\nShow titles of songs and names of singers. => ", "response": "SELECT Song.Title, singer.Name FROM song JOIN singer ON Song.Singer_ID  =  singer.Singer_ID"}
{"question": "What are the song titles and singer names?", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nFind the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco. => SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"\nList the name, origin and owner of each program. => SELECT name ,  origin ,  OWNER FROM program\nWhat are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year? => SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year\nWhat is the document type code with most number of documents? => SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1\nCount the number of different account types. => SELECT count(DISTINCT acc_type) FROM customer\nWhat are the song titles and singer names? => ", "response": "SELECT singer.Name, song.Title FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID"}
{"question": "Show distinct names of singers that have songs with sales more than 300000.", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nReturn the duration of the actor with the greatest age. => SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\nFind the total number of courses offered. => SELECT count(*) FROM COURSES\nOf all the claims, what was the earliest date when any claim was made? => SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1\nShow the type of school and the number of buses for each type. => SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type\nWhat is the most common major among female (sex is F) students? => SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1\nShow distinct names of singers that have songs with sales more than 300000. => ", "response": "SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000"}
{"question": "what are the different names of the singers that have sales more than 300000?", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nFind the name of each user and number of tweets tweeted by each of them. => SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid\nWhat is the unit of measurement of product named \"cumin\"? => SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"\nWhat are the names of the customers who have made two or less orders? => SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2\nWhat is the id of the project with least number of documents? => SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\nShow the employee ids and the number of documents destroyed by each employee. => SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID\nwhat are the different names of the singers that have sales more than 300000? => ", "response": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000"}
{"question": "Show the names of singers that have more than one song.", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nFind the number of amenities for each of the dorms that can accommodate more than 100 students. => SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid\nWhat are all the payment methods? => SELECT DISTINCT payment_method FROM customers\nWhat is the average prices of wines for each each? => SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\nWhen did the first staff for the projects started working? => SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1\nFind the emails of the user named \"Mary\". => SELECT email FROM user_profiles WHERE name  =  'Mary'\nShow the names of singers that have more than one song. => ", "response": "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)"}
{"question": "What are the names of the singers that have more than one songs?", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nShow the official names of the cities that have hosted more than one competition. => SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\nWhat are the name and assets of each company, sorted in ascending order of company name? => SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\nHow many courses does the student with id 171 actually attend? => SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\nWhat are the total account balances for each customer from Utah or Texas? => SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\nFor each company id, what are the companies and how many gas stations does each one operate? => SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\nWhat are the names of the singers that have more than one songs? => ", "response": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*)  >  1"}
{"question": "Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nFind the total hours of all projects. => SELECT sum(hours) FROM projects\nFind the titles of albums that contain tracks of both the Reggae and Rock genres. => SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\nWhat are the names of perpetrators whose country is not \"China\"? => SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"\nShow the number of male and female assistant professors. => SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex\nHow many reviewers listed? => SELECT count(*) FROM Reviewer\nShow the names of singers and the total sales of their songs. => ", "response": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name"}
{"question": "For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nHow many students are there? => SELECT count(*) FROM student\nShow origins of all flights with destination Honolulu. => SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"\nHow many sports do we have? => SELECT count(DISTINCT sportname) FROM Sportsinfo\nFind the name of the customer who made an order most recently. => SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1\nGive the different hometowns of gymnasts that have a total point score of above 57.5. => SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5\nFor each singer name, what is the total sales for their songs? => ", "response": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID GROUP BY singer.Name"}
{"question": "List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat are the names of musicals who have no actors? => SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\nList every album whose title starts with A in alphabetical order. => SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;\nFind out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described => SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\nWhich Payments were processed with Visa? List the payment Id, the date and the amount. => SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'\nWhich year had the greatest number of courses? => SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\nList the name of singers that do not have any song. => ", "response": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}
{"question": "What is the sname of every sing that does not have any song?", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat are the companies of entrepreneurs, ordered descending by amount of money requested? => SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC\nHow many apartment bookings are there in total? => SELECT count(*) FROM Apartment_Bookings\nWhich cities have served as host cities more than once? Return me their GDP and population. => SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1\nWhat are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate? => SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate\nWhat are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome. => SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'\nWhat is the sname of every sing that does not have any song? => ", "response": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}
{"question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nList the names of counties in descending order of population. => SELECT Name FROM county_public_safety ORDER BY Population DESC\nFind the number of patients who are not using the medication of Procrastin-X. => SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )\nWhat are the grapes, wineries and years for wines with price higher than 100, sorted by year? => SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR\nHow many members does the club \"Tennis Club\" has? => SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"\nShow the names of people aged either 35 or 36. => SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36\nShow the citizenship shared by singers with birth year before 1945 and after 1955. => ", "response": "SELECT Citizenship from singer WHERE Birth_Year < 1945 OR Birth_Year > 1955"}
{"question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "prompt": "Given a database 'singer' have 2 tables named 'singer', 'song'. singer tbl have columns: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'. song tbl have columns: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'. \nTranslate text to SQL: \nWhat are full names and salaries of employees working in the city of London? => SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'\nHow many drivers are from Hartford city or younger than 40? => SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40\nGive the ids and names of products with price lower than 600 or higher than 900. => SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900\nReturn the average number of weeks on top for volumes by artists that are at most 25 years old. => SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25\nWhat are the appelations for wines produced after 2008 but not in the Central Coast area? => SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"\nWhat are the citizenships that are shared by singers with a birth year before 1945 and after 1955? => ", "response": "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955"}
{"question": "How many available features are there in total?", "sql": "SELECT count(*) FROM Other_Available_Features", "prompt": "Given a database 'real_estate_properties' have 5 tables named 'Ref_Feature_Types', 'Ref_Property_Types', 'Other_Available_Features', 'Properties', 'Other_Property_Features'. Ref_Feature_Types tbl have columns: 'feature_type_code', 'feature_type_name'. Ref_Property_Types tbl have columns: 'property_type_code', 'property_type_description'. Other_Available_Features tbl have columns: 'feature_id', 'feature_type_code', 'feature_name', 'feature_description'. Properties tbl have columns: 'property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details'. Other_Property_Features tbl have columns: 'property_id', 'feature_id', 'property_feature_description'. \nTranslate text to SQL: \nList the height and weight of people in descending order of height. => SELECT Height ,  Weight FROM people ORDER BY Height DESC\nShow all ministers and parties they belong to in descending order of the time they took office. => SELECT minister ,  party_name FROM party ORDER BY took_office DESC\nFor each product type, return the maximum and minimum price. => SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\nWhat are the names of captains, sorted by age descending? => SELECT name FROM captain ORDER BY age DESC\nHow many department stores does the store chain South have? => SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"\nHow many available features are there in total? => ", "response": "SELECT COUNT(*) FROM Other_Available_Features"}
{"question": "What is the feature type name of feature AirCon?", "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "prompt": "Given a database 'real_estate_properties' have 5 tables named 'Ref_Feature_Types', 'Ref_Property_Types', 'Other_Available_Features', 'Properties', 'Other_Property_Features'. Ref_Feature_Types tbl have columns: 'feature_type_code', 'feature_type_name'. Ref_Property_Types tbl have columns: 'property_type_code', 'property_type_description'. Other_Available_Features tbl have columns: 'feature_id', 'feature_type_code', 'feature_name', 'feature_description'. Properties tbl have columns: 'property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details'. Other_Property_Features tbl have columns: 'property_id', 'feature_id', 'property_feature_description'. \nTranslate text to SQL: \nWhat is the name of the shop that has the greatest quantity of devices in stock? => SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1\nWhich cities have lower temperature in March than in Dec and have never served as host cities? => SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\nWhat are the names of tracks that contain the the word you in them? => SELECT Name FROM TRACK WHERE Name LIKE '%you%'\nWhat are the ids of the students who either registered or attended a course? => SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance\nShow the name of the shop that have the largest quantity of devices in stock. => SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1\nWhat is the feature type name of feature AirCon? => ", "response": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')"}
{"question": "Show the property type descriptions of properties belonging to that code.", "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "prompt": "Given a database 'real_estate_properties' have 5 tables named 'Ref_Feature_Types', 'Ref_Property_Types', 'Other_Available_Features', 'Properties', 'Other_Property_Features'. Ref_Feature_Types tbl have columns: 'feature_type_code', 'feature_type_name'. Ref_Property_Types tbl have columns: 'property_type_code', 'property_type_description'. Other_Available_Features tbl have columns: 'feature_id', 'feature_type_code', 'feature_name', 'feature_description'. Properties tbl have columns: 'property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details'. Other_Property_Features tbl have columns: 'property_id', 'feature_id', 'property_feature_description'. \nTranslate text to SQL: \nWhat are the maximum and minimum product prices for each product type? => SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\nWhich countries have at least 3 cities? => SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3\nShow all card type codes and the number of customers holding cards in each type. => SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code\nList the teams of the players with the top 5 largest ages. => SELECT Team FROM player ORDER BY Age DESC LIMIT 5\nWhat is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? => SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\nShow the property type descriptions of properties belonging to that code. => ", "response": "Assuming you meant \"Show the property type descriptions of properties belonging to a specific property type code\", the SQL query would be:\n\nSELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = [specific property type code];"}
{"question": "What are the names of properties that are either houses or apartments with more than 1 room?", "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "prompt": "Given a database 'real_estate_properties' have 5 tables named 'Ref_Feature_Types', 'Ref_Property_Types', 'Other_Available_Features', 'Properties', 'Other_Property_Features'. Ref_Feature_Types tbl have columns: 'feature_type_code', 'feature_type_name'. Ref_Property_Types tbl have columns: 'property_type_code', 'property_type_description'. Other_Available_Features tbl have columns: 'feature_id', 'feature_type_code', 'feature_name', 'feature_description'. Properties tbl have columns: 'property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details'. Other_Property_Features tbl have columns: 'property_id', 'feature_id', 'property_feature_description'. \nTranslate text to SQL: \nFor all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description. => SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\nList the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities. => SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'\nWhich semeseter and year had the fewest students? => SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1\nWhat is the average salary of employees who have a commission percentage that is not null? => SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\nWhat are the names of all students who tried out in alphabetical order? => SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\nWhat are the names of properties that are either houses or apartments with more than 1 room? => ", "response": "SELECT property_name FROM Properties WHERE (property_type_code = 'HSE' OR property_type_code = 'APT') AND room_count > 1"}
