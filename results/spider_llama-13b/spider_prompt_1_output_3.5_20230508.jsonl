{"question": "How many singers do we have?", "sql": "SELECT count(*) FROM singer", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many singers do we have?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many singers do we have?. \nSELECT  SELECT COUNT(*)\nFROM    singers\n\nHow many concerts do we have?. \nSELECT  SELECT COUNT(*)\nFROM    concerts\n\nHow many singers have sung at least one concert?. \nSELECT  SELECT COUNT(*)\nFROM    singer_in_concert\n\nHow many singers have sung at least one concert?. \nSELECT  SELECT COUNT(*)\nFROM    singer_in_concert\n\nHow many concerts have had at least one singer?. \nSELECT  SELECT COUNT(*)\nFROM    singer_in_concert\n\nHow many concerts have had at least one singer?. \nSELECT  SELECT COUNT(*)\nFROM    singer_in_concert\n\n# What is the average age of all the singers?. \nSELECT  SELECT AVG(age)\nFROM    singers\n\n# What is the average age of the singers that are younger than 40?. \nSELECT  SELECT AVG(age)\nFROM    singers\nWHERE   age < 40\n\n# What is the average age of the singers that are younger than 40?. \nSELECT  SELECT AVG(age)\nFROM    singers\nWHERE"}
{"question": "What is the total number of singers?", "sql": "SELECT count(*) FROM singer", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the total number of singers?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the total number of singers?. \nSELECT  SELECT COUNT(*) AS singers\nFROM    singer\n\nWhat is the total number of concerts?. \nSELECT  SELECT COUNT(*) AS concerts\nFROM    concert\n\nWhat is the total number of concerts in which at least one singer is in?. \nSELECT  SELECT COUNT(*) AS concerts_with_singers\nFROM    singer_in_concert\n\nWhat is the total number of concerts in which at least one singer is in, who is a male?. \nSELECT  SELECT COUNT(*) AS concerts_with_male_singers\nFROM    singer_in_concert\nWHERE   singer.Is_male = True\n\nWhat is the total number of concerts in which at least one singer is in, who is a male and is older than 30 years?. \nSELECT  SELECT COUNT(*) AS concerts_with_male_older_than_30\nFROM    singer_in_concert\nWHERE   singer.Is_male = True\nAND     singer.Age > 30\n\nWhat is the total number of concerts in which at least one singer is in, who is a male and is older than 30 years, and the concert is in"}
{"question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow name, country, age for all singers ordered by age from the oldest to the youngest.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow name, country, age for all singers ordered by age from the oldest to the youngest.. \nSELECT  SELECT  singer.name, singer.country, singer.age  FROM    singer  ORDER BY singer.age ASC\nSELECT  SELECT  singer.name, singer.country, singer.age  FROM    singer  ORDER BY singer.age DESC\n\"SELECT * FROM concert_singer ORDER BY age ASC\"\n\n\n#####################\n#SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow name, country, age for all singers ordered by age from the oldest to the youngest.. \nSELECT  SELECT  singer.name, singer.country, singer.age  FROM    singer  ORDER BY singer.age"}
{"question": "What are the names, countries, and ages for every singer in descending order of age?", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names, countries, and ages for every singer in descending order of age?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names, countries, and ages for every singer in descending order of age?. \nSELECT  SELECT * FROM singer  ORDER BY singer.age DESC\n# LIMIT 2\nWhat is the name and country of the oldest singer?.\nSELECT  SELECT Singer_ID, Name, Country FROM singer  WHERE age = (SELECT MAX(age) FROM singer)\n# LIMIT 1\nWhat is the name of the singer who was in the fewest concerts?.\nSELECT  SELECT Name FROM singer  WHERE singer_in_concert.concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert_ID FROM concert WHERE concert_ID = (SELECT concert"}
{"question": "What is the average, minimum, and maximum age of all singers from France?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average, minimum, and maximum age of all singers from France?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average, minimum, and maximum age of all singers from France?. \nSELECT  SELECT Singer_ID, COUNT(Singer_ID) FROM singer GROUP BY Singer_ID  HAVING COUNT(Singer_ID) > 1 ORDER BY Singer_ID;\n#SELECT Singer_ID, COUNT(Singer_ID) FROM singer GROUP BY Singer_ID HAVING COUNT(Singer_ID) > 1 ORDER BY Singer_ID;\nWhat is the name of the oldest singer?. \nSELECT Singer_ID, MIN(Age) FROM singer GROUP BY Singer_ID;\n#SELECT Singer_ID, MIN(Age) FROM singer GROUP BY Singer_ID;\nWhich country has the youngest and oldest singers?. \nSELECT Country, MIN(Age) FROM singer GROUP BY Country ORDER BY Country;\n#SELECT Country, MIN(Age) FROM singer GROUP BY Country ORDER BY Country;\n"}
{"question": "What is the average, minimum, and maximum age for all French singers?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average, minimum, and maximum age for all French singers?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average, minimum, and maximum age for all French singers?. \nSELECT  SELECT avg(s.age),  MIN(s.age), MAX(s.age)\nFROM singer s\nWHERE s.Country = 'French';\n\"\"\"\n\n# What is the average, minimum, and maximum age for all French singers?. \n# SELECT  SELECT avg(s.age),  MIN(s.age), MAX(s.age)\n# FROM singer s\n# WHERE s.Country = 'French';\n\n# What is the average, minimum, and maximum age for all Italian singers?. \nSELECT  SELECT avg(s.age),  MIN(s.age), MAX(s.age)\nFROM singer s\nWHERE s.Country = 'Italian';\n\n# What is the average, minimum, and maximum age for all German singers?. \nSELECT  SELECT avg(s.age),  MIN(s.age), MAX(s.age)\nFROM singer s\nWHERE s.Country = 'German';\n\n# What is the average, minimum, and maximum age for all English singers?. \nSELECT  SELECT avg(s.age),  MIN(s.age"}
{"question": "Show the name and the release year of the song by the youngest singer.", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the name and the release year of the song by the youngest singer.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the name and the release year of the song by the youngest singer.. \nSELECT  SELECT stadium.location, stadium.name, stadium.capacity, stadium.highest, stadium.lowest, stadium.average FROM stadium\nJOIN singer ON singer.stadium_id = stadium.stadium_id\nJOIN concert ON concert.concert_id = singer.concert_id\nJOIN singer_in_concert ON singer_in_concert.singer_id = singer.singer_id\nWHERE singer.age >= 18\nORDER BY singer.age\n\n#SELECT the name and the release year of the song by the oldest singer.. \nSELECT  SELECT stadium.location, stadium.name, stadium.capacity, stadium.highest, stadium.lowest, stadium.average FROM stadium\nJOIN singer ON singer.stadium_id = stadium.stadium_id\nJOIN concert ON concert.concert_id = singer.concert_id\nJOIN singer_in_concert ON singer_in_concert.singer_id = singer.singer_id\nWHERE singer.age <= 40\nORDER BY singer.age\n"}
{"question": "What are the names and release years for all the songs of the youngest singer?", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names and release years for all the songs of the youngest singer?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names and release years for all the songs of the youngest singer?. \nSELECT  SELECT_SQL, *, COUNT(*) AS SELECT_COUNT FROM concert_singer GROUP BY Singer_ID\n```\n\n## \u041b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430\n\n* \u041a. \u0411. \u0421\u0442\u044e\u0430\u0440\u0442, \u0414. \u0427. \u0411\u0435\u0439\u043b\u0438. \u0420\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0430\u043b\u0433\u0435\u0431\u0440\u0430: \u0443\u0447\u0435\u0431. \u043f\u043e\u0441\u043e\u0431\u0438\u0435 \u0434\u043b\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u0441\u0448. \u0443\u0447\u0435\u0431. \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043f\u043e \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u043f\u043e\u0434\u0433\u043e\u0442. \u00ab080101.55 \u2013 \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430 \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430\u00bb / \u041a. \u0411. \u0421\u0442\u044e\u0430\u0440\u0442, \u0414. \u0427. \u0411\u0435\u0439\u043b\u0438; \u041f\u043e\u0434 \u0440\u0435\u0434. \u0410. \u041d. \u0411\u043e\u0440\u0434\u044e\u0433\u0438\u043d\u0430. \u2014 \u0421\u041f\u0431.: \u0411\u0438\u043d\u043e\u043c. \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u044f \u0437\u043d\u0430\u043d\u0438\u0439, 2009. \u2014 176 \u0441. \u2014 ISBN 978-5-94774-744-4.\n* \u0413. \u0424. \u0411\u0451\u0440\u043d. \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0442\u0435\u043e\u0440\u0438\u044e \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 = An Introduction to Database Systems. \u2014 \u041c.: \u0412\u0438\u043b\u044c\u044f\u043c\u0441, 2006. \u2014 808 \u0441. \u2014 ISBN 5-8459-0789-3.\n\n"}
{"question": "What are all distinct countries where singers above age 20 are from?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are all distinct countries where singers above age 20 are from?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are all distinct countries where singers above age 20 are from?. \nSELECT  SELECT DISTINCT country FROM singer WHERE country IS NOT NULL AND age > 20\n"}
{"question": "What are  the different countries with singers above age 20?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are  the different countries with singers above age 20?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are  the different countries with singers above age 20?. \n}
{"question": "Show all countries and the number of singers in each country.", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow all countries and the number of singers in each country.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow all countries and the number of singers in each country.. \nSELECT  SELECT Country, COUNT(Singer_ID)  FROM singer s\n  GROUP BY Country\n  ORDER BY Country ASC\n\nShow all singers in Germany, \nSELECT  SELECT Singer_ID  FROM singer s\n  WHERE Country = 'Germany'\n  GROUP BY Singer_ID\n  ORDER BY Singer_ID ASC\n\n\nShow all concerts from 2013, \nSELECT  SELECT *  FROM concert c\n  WHERE Year = 2013\n  ORDER BY Year ASC\n\nShow all singers who performed in concert 1 from 2013, \nSELECT  SELECT Singer_ID  FROM singer_in_concert si\n  WHERE concert_ID = 1\n  ORDER BY Singer_ID ASC\n\nShow all singers who have performed in a concert, \nSELECT  SELECT Singer_ID  FROM singer_in_concert si\n  WHERE concert_ID = 1\n  GROUP BY Singer_ID\n  ORDER BY Singer_ID ASC\n\nShow all singers in the concert with id 1, \nSELECT  SELECT *  FROM singer s\n  WHERE singer_in_"}
{"question": "How many singers are from each country?", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many singers are from each country?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many singers are from each country?. \nSELECT  SELECT Count(Singer_ID) AS Country_singer_count, Country FROM Singer GROUP BY Country\nHow many singers are there?. \nSELECT Count(Singer_ID) AS Total_singers_count, Name FROM Singer\nHow many singers performed in each stadium?. \nSELECT Count(Singer_ID) AS Stadium_singer_count, Stadium_ID FROM singer_in_concert GROUP BY Stadium_ID\nHow many singers performed in each stadium?. \nSELECT Count(Singer_ID) AS Total_singers_count, Name FROM Singer\n\n# SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('con"}
{"question": "List all song names by singers above the average age.", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList all song names by singers above the average age.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList all song names by singers above the average age.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  song.song_Name,\n  singer.Name AS singerName,\n  singer.Country AS countryName,\n  singer.Song_release_year,\n  singer.Age AS age,\n  singer.Is_male,\n  avg(singer.Age) AS averageAge\nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\n  song,\n  singer,\n  singer_in_concert\nWHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE\n  singer_in_concert.concert_ID = concert.concert_ID\n  AND  AND  AND  AND  AND  AND  AND  AND  AND  AND  AND  AND\n  singer_in_concert.Singer_ID = singer.Singer_ID\n  AND  AND  AND  AND  AND  AND  AND  AND  AND  AND  AND  AND\n  singer.Song_release_year"}
{"question": "What are all the song names by singers who are older than average?", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are all the song names by singers who are older than average?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are all the song names by singers who are older than average?. \nSELECT  SELECT song_name FROM singer, concert, singer_in_concert WHERE singer_ID=singer_ID AND singer_in_concert.concert_ID=concert.concert_ID AND concert.theme=\"mixed\" AND singer_ID = singer_ID\n\nWhat is the name of the most popular song?. SELECT song_name FROM (SELECT song_name, COUNT(Singer_ID) AS Singers FROM singer, concert, singer_in_concert WHERE singer_ID=singer_ID AND singer_in_concert.concert_ID=concert.concert_ID AND concert.theme=\"mixed\" AND singer_ID = singer_ID GROUP BY song_name ORDER BY COUNT(Singer_ID) DESC LIMIT 1)\n\nWhat is the name of the most popular artist?. SELECT name FROM (SELECT name, COUNT(Singer_ID) AS Singers FROM singer, concert, singer_in_concert WHERE singer_ID=singer_ID AND singer_in_concert.concert_ID=concert.concert_ID AND concert.theme=\"mixed\" AND singer_ID = singer_ID GROUP BY name ORDER"}
{"question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow location and name for all stadiums with a capacity between 5000 and 10000.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow location and name for all stadiums with a capacity between 5000 and 10000.. \nSELECT  SELECT stadium.Location, stadium.Name, stadium.Capacity, MAX(stadium.Highest), MIN(stadium.Lowest), AVG(stadium.Average),\n    stadium.Stadium_ID\nFROM    stadium\nWHERE   Capacity >= 5000\nAND     Capacity <= 10000\nGROUP BY stadium.Stadium_ID\nORDER BY  stadium.Capacity DESC\n\nShow location and name for all singers with an age between 25 and 35.. \nSELECT  SELECT singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male,\n    singer.Singer_ID\nFROM    singer\nWHERE   Age >= 25\nAND     Age <= 35\nGROUP BY singer.Singer_ID\nORDER BY  singer.Age DESC\n\nShow location and name for all concerts.. \nSELECT  SELECT concert.concert_Name, concert.Theme, stadium.Location, stadium.Name,\n    MAX(singer_in_concert"}
{"question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the locations and names of all stations with capacity between 5000 and 10000?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the locations and names of all stations with capacity between 5000 and 10000?. \nSELECT  SELECT Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average, \nFROM    stadium\nWHERE  5000 <= Capacity AND Capacity < 10000;\n\"\"\"\n\n### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the locations and names of all stations with capacity between 5000 and 10000?. \nSELECT  SELECT Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average, \nFROM    stadium\nWHERE  5000 <= Capacity AND"}
{"question": "What is the maximum capacity and the average of all stadiums ?", "sql": "select max(capacity), average from stadium", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the maximum capacity and the average of all stadiums ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the maximum capacity and the average of all stadiums ?. \nSELECT  SELECT stadium.capacity, ROUND(AVG(st.capacity),2) as avg_st_capacity \nFROM    stadium, singer_in_concert sinc, concert c, stadium st\nWHERE   c.concert_ID=sinc.concert_ID\nAND     sinc.singer_ID=st.singer_ID\nAND     st.capacity != 0\nGROUP   BY st.capacity\nORDER   BY 2 DESC\nLIMIT  1\n\n"}
{"question": "What is the average and maximum capacities for all stadiums ?", "sql": "select avg(capacity) ,  max(capacity) from stadium", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average and maximum capacities for all stadiums ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the average and maximum capacities for all stadiums ?. \nSELECT  SELECT stadium.Location, stadium.Name, stadium.Capacity, \n    max(capacity) AS max_capacity, min(capacity) AS min_capacity, \n    avg(capacity) AS average_capacity\nFROM stadium\nGROUP BY stadium.Location, stadium.Name, stadium.Capacity\nORDER BY max_capacity DESC, min_capacity ASC, stadium.Name ASC;\n\nWhat is the average and maximum capacities for all stadiums in India ?\nSELECT  SELECT stadium.Location, stadium.Name, stadium.Capacity, \n    max(capacity) AS max_capacity, min(capacity) AS min_capacity, \n    avg(capacity) AS average_capacity\nFROM stadium\nWHERE stadium.Location IN ('IN')\nGROUP BY stadium.Location, stadium.Name, stadium.Capacity\nORDER BY max_capacity DESC, min_capacity ASC, stadium.Name ASC;\n\nWhat is the average and maximum capacities for all stadiums which is situated in Kolkata ?\nSELECT  SELECT stadium."}
{"question": "What is the name and capacity for the stadium with highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity for the stadium with highest average attendance?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity for the stadium with highest average attendance?. \nSELECT  SELECT stadium.location, stadium.capacity, stadium.highest, stadium.lowest, stadium.average, \n        SELECT stadium.highest, stadium.lowest, stadium.average, stadium.location, stadium.capacity \n        FROM stadium\n        JOIN (SELECT stadium_ID, stadium_highest, stadium_lowest, stadium_average, stadium_location, stadium_capacity\n              FROM stadium) AS stadium ON stadium.stadium_ID = stadium.stadium_ID\n        ORDER BY stadium.highest DESC\n        LIMIT 1;\n\n"}
{"question": "What is the name and capacity for the stadium with the highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity for the stadium with the highest average attendance?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity for the stadium with the highest average attendance?. \nSELECT  SELECT stadium.location, stadium.name, stadium.capacity, stadium.highest, stadium.lowest, stadium.average\nFROM stadium\nWHERE stadium.average = (SELECT  SELECT max(average)\nFROM stadium\nWHERE stadium.capacity > stadium.highest)\n\n\n#SELECT singer.name, singer.country, song.name, song.release_year, song.artist_id, singer.id\n#FROM song, singer\n#WHERE song.id = singer.song_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "How many concerts are there in year 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many concerts are there in year 2014 or 2015?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many concerts are there in year 2014 or 2015?. \nSELECT  SELECT count(concert_name) AS ConcertsFromYear,\n    count(case when stadium_id IS NULL then 1 else stadium_id end) AS NoStadium\nFROM concert\nWHERE year IN (2014, 2015)\nGROUP BY concert_name\nHAVING count(concert_name) > 1\nORDER BY count(case when stadium_id IS NULL then 1 else stadium_id end) DESC\n"}
{"question": "How many concerts occurred in 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many concerts occurred in 2014 or 2015?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nHow many concerts occurred in 2014 or 2015?. \nSELECT  SELECT concert.concert_ID, count(singer.Singer_ID)\nFROM    concert\nJOIN    singer_in_concert\nON      singer_in_concert.concert_ID = concert.concert_ID\nJOIN    singer\nON      singer.Singer_ID = singer_in_concert.Singer_ID\nWHERE   concert.concert_Name = 'Halloween'\nAND     year(concert.concert_Date) = 2014\nAND     year(concert.concert_Date) = 2015\nGROUP BY concert.concert_ID\nHAVING  count(singer.Singer_ID) > 1;\n"}
{"question": "Show the stadium name and the number of concerts in each stadium.", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium name and the number of concerts in each stadium.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium name and the number of concerts in each stadium.. \nSELECT  SELECT stadium.Location, COUNT(*) AS count_concerts\nFROM concert\nINNER JOIN singer_in_concert ON singer_in_concert.Stadium_ID = concert.Stadium_ID\nINNER JOIN stadium ON stadium.Stadium_ID = singer_in_concert.Stadium_ID\nGROUP BY stadium.Location;\n\nShow the stadium name and the average number of concerts per year in each stadium.. \nSELECT  SELECT stadium.Location, COUNT(*) AS count_concerts,\nSUM(COUNT(*)) AS sum_concerts\nFROM concert\nINNER JOIN singer_in_concert ON singer_in_concert.Stadium_ID = concert.Stadium_ID\nINNER JOIN stadium ON stadium.Stadium_ID = singer_in_concert.Stadium_ID\nGROUP BY stadium.Location, YEAR(concert.Year)\nORDER BY stadium.Location;\n\nShow the stadium name, the number of concerts in each stadium, and the number of concerts for each artist in each stadium.. \nSELECT"}
{"question": "For each stadium, how many concerts play there?", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFor each stadium, how many concerts play there?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFor each stadium, how many concerts play there?. \nSELECT  SELECT stadium.Location, COUNT(concert_in_stadium.stadium_ID) FROM stadium, concert_in_stadium WHERE stadium.Location = concert_in_stadium.Location GROUP BY stadium.Location\n\nFor each country, how many singers are there?.\nSELECT  SELECT singer.Country, COUNT(singer.ID) FROM singer GROUP BY singer.Country\n\nFor each city, how many concerts and singers have been born there?.\nSELECT  SELECT city.Location, COUNT(concert.concert_ID), COUNT(singer.ID) FROM city, concert, singer WHERE city.Location = concert.Location AND city.Location = singer.Location GROUP BY city.Location\n\nFor each year, how many concerts and singers play?.\nSELECT  SELECT year, COUNT(concert.concert_ID), COUNT(singer.ID) FROM concert, singer WHERE year = concert.Year AND year = singer.Year GROUP BY year\n\nFor each song, how many concerts have performed it?.\nSELECT  SELECT song_name, COUNT(concert.concert_ID) FROM song, concert WHERE song_name = concert.S"}
{"question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium name and capacity with most number of concerts in year 2014 or after.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium name and capacity with most number of concerts in year 2014 or after.. \nSELECT  SELECT stadium.Name, stadium.Capacity,\n        count(concert.concert_ID)\nFROM    stadium INNER JOIN concert_singer\n        ON stadium.Stadium_ID = concert_singer.Stadium_ID\n        INNER JOIN concert\n        ON stadium.Stadium_ID = concert.Stadium_ID\n        INNER JOIN singer_in_concert\n        ON concert.concert_ID = singer_in_concert.concert_ID\n        INNER JOIN singer\n        ON singer_in_concert.Singer_ID = singer.Singer_ID\nWHERE  concert.concert_Name  = '2014 or after'\nGROUP  BY stadium.Name\nORDER  BY count(concert.concert_ID) DESC\nLIMIT  1;\n\n# Select a stadium whose name starts with 'A' and has a capacity less than 10,000.\nSELECT  SELECT stadium.Name, stadium.Capacity,\n        count(concert.concert_ID)\nFROM    stadium INNER JOIN concert_singer\n        ON stadium"}
{"question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity of the stadium with the most concerts after 2013 ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and capacity of the stadium with the most concerts after 2013 ?. \nSELECT  SELECT * FROM stadium WHERE stadium.capacity > '90000' AND stadium.Year > 2013;\n\n#What is the name of the stadium with the highest average of concerts after 2013?\nSELECT  stadium.Name AS 'Stadium Name', AVG(stadium.capacity) AS 'Average capacity', count(*) AS 'Total concerts'\nFROM stadium\nWHERE stadium.capacity > '90000' AND stadium.Year > 2013\nGROUP BY stadium.Name;\n\n#What is the stadium with the most concerts after 2013 ?\nSELECT  stadium.Name AS 'Stadium Name', count(*) AS 'Total concerts'\nFROM stadium\nWHERE stadium.capacity > '90000' AND stadium.Year > 2013\nGROUP BY stadium.Name;\n\n#What is the singer with the most concerts in the year 2013?\nSELECT  singer.Name AS 'Singer Name', count(singer_in_concert.concert_"}
{"question": "Which year has most number of concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhich year has most number of concerts?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhich year has most number of concerts?. \nSELECT  SELECT  SELECT  SELECT  SELECT\n    stadium.capacity,\n    stadium.highest,\n    stadium.lowest,\n    stadium.average,\n    stadium.location,\n    stadium.name,\n    stadium.id\nFROM    stadium\nJOIN concert ON stadium.id = concert.stadium_id\nWHERE  concert.year = (\n    SELECT  SELECT  SELECT  SELECT  SELECT\n        MAX(year)\n    FROM    concert\n    GROUP BY concert.year\n    ORDER BY year DESC\n);\n\nWhich year has most number of concerts?. \nSELECT  SELECT  SELECT  SELECT  SELECT\n    stadium.capacity,\n    stadium.highest,\n    stadium.lowest,\n    stadium.average,\n    stadium.location,\n    stadium.name,\n    stadium.id\nFROM    stadium\nJOIN concert ON stadium.id = concert.stadium_id\nWHERE  concert.year = (\n    SELECT  SELECT  SELECT  SELECT  SELECT\n        MAX(year)\n    FROM    concert\n    GROUP BY concert."}
{"question": "What is the year that had the most concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the year that had the most concerts?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the year that had the most concerts?. \nSELECT  SELECT MAX(concert_id) FROM concert_singer WHERE concert_id IS NOT NULL;\n\n\n\n"}
{"question": "Show the stadium names without any concert.", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium names without any concert.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the stadium names without any concert.. \nSELECT  SELECT * FROM stadium;\n*/\n\n# Show the stadiums with their properties\nSELECT  stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average\nFROM    stadium;\n\n# Show the stadiums with their properties\nSELECT stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average\nFROM stadium;\n\n# Show the stadiums with their properties\nSELECT stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average\nFROM stadium;\n\n# Show the stadiums with their properties\nSELECT stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average\nFROM stadium;\n\n# Show the stadiums with their properties\nSELECT stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium"}
{"question": "What are the names of the stadiums without any concerts?", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the stadiums without any concerts?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the stadiums without any concerts?. \nSELECT  SELECT  SELECT  SELECT  SELECT \n    stadium.Location, \n    stadium.Name,\n    stadium.Capacity,\n    MAX(stadium.Highest),\n    MIN(stadium.Lowest),\n    AVG(stadium.Highest)\nFROM stadium\nWHERE 1 = 1\nGROUP BY stadium.Location,\n    stadium.Name,\n    stadium.Capacity\nHAVING MAX(stadium.Highest) IS NULL;\n\n\nWhat is the name of the singer with the highest age?. \nSELECT  SELECT  SELECT  SELECT  SELECT \n    singer.Name,\n    singer.Age\nFROM singer\nWHERE 1 = 1\nGROUP BY singer.Name\nORDER BY singer.Age DESC;\n\nWhat is the name of the singer with the lowest age?. \nSELECT  SELECT  SELECT  SELECT  SELECT \n    singer.Name,\n    singer.Age\nFROM singer\nWHERE 1 = 1\nGROUP BY singer.Name\nORDER BY singer.Age ASC;\n\nWhat is the name of the singer with the lowest age?. \nSELECT  SELECT  SELECT "}
{"question": "Show countries where a singer above age 40 and a singer below 30 are from.", "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow countries where a singer above age 40 and a singer below 30 are from.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow countries where a singer above age 40 and a singer below 30 are from.. \nSELECT  SELECT * FROM concert WHERE singer_in_concert.Name IN ('Tina Turner','Ronan Keating','Gloria Gaynor','Hall & Oates') AND concert.Year = 2014;\nSELECT  SELECT * FROM singer WHERE singer.Country IN ('Germany','France','United States','Spain','Italy');\nSELECT  SELECT * FROM concert WHERE concert.Stadium_ID IN ('Stadium_0','Stadium_1');\nSELECT  SELECT * FROM singer WHERE singer.Country IN ('France','Italy','Spain','United States');\n\n"}
{"question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow names for all stadiums except for stadiums having a concert in year 2014.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow names for all stadiums except for stadiums having a concert in year 2014.. \nSELECT  SELECT stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average\nFROM stadium\nWHERE stadium.Location NOT IN ('Johannesburg','Lusaka','Beira')\nAND YEAR(concert.concert_Date) = 2014\nORDER BY stadium.Capacity\n\n\n"}
{"question": "What are the names of all stadiums that did not have a concert in 2014?", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of all stadiums that did not have a concert in 2014?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of all stadiums that did not have a concert in 2014?. \nSELECT  SELECT Name, Location, Capacity, Highest, Lowest, Average FROM stadium WHERE YEAR = 2014;\n\n# How many concerts did they have in 2014?.\nSELECT COUNT(Name) FROM concert WHERE YEAR = 2014;\n\n# Find all singers that were not in a concert in 2014.\nSELECT Name, Country, Song_Name, Song_release_year, Age, Is_male FROM singer WHERE YEAR = 2014;\n\n# Find all concerts where the singers were not in 2014.\nSELECT DISTINCT Name, Theme, Stadium_ID, Year FROM concert WHERE YEAR = 2014;\n\n# Find all singers that were in a concert in 2014.\nSELECT Name, Country, Song_Name, Song_release_year, Age, Is_male FROM singer WHERE YEAR = 2014;\n\n# Find all concerts that had singers in 2014.\nSELECT DISTINCT Name, Theme, Stadium_ID, Year FROM concert WHERE YEAR = 2"}
{"question": "Show the name and theme for all concerts and the number of singers in each concert.", "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the name and theme for all concerts and the number of singers in each concert.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nShow the name and theme for all concerts and the number of singers in each concert.. \nSELECT  SELECT stadium.name AS stadiumName, stadium.location, stadium.capacity, stadium.highest, stadium.lowest, stadium.average,\nFROM    stadium\nUNION ALL\nSELECT singer.name AS singerName, singer.country, singer.song_name, singer.song_release_year, singer.age, singer.is_male\nFROM    singer\nUNION ALL\nSELECT concert.name AS concertName, concert.theme, stadium.name AS stadiumName, stadium.location, stadium.capacity, stadium.highest, stadium.lowest, stadium.average\nFROM    concert\nJOIN    singer_in_concert ON singer_in_concert.concert_ID = concert.concert_ID\nJOIN    singer ON singer.Singer_ID = singer_in_concert.Singer_ID\nJOIN    stadium ON stadium.Stadium_ID = singer_in_concert.Stadium_ID\nORDER BY singerName;\n\"\"\"\n\n\n\n"}
{"question": "What are the names , themes , and number of singers for every concert ?", "sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names , themes , and number of singers for every concert ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names , themes , and number of singers for every concert ?. \nSELECT  SELECT stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, \n         SELECT singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male \nFROM    stadium, \n         singer \nWHERE   stadium.Location LIKE 'London%' OR stadium.Location LIKE 'Boston%' OR stadium.Location LIKE 'Berlin%' OR stadium.Location LIKE 'Tokyo%' OR stadium.Location LIKE 'Moscow%' OR stadium.Location LIKE 'Paris%' OR stadium.Location LIKE 'New York%' OR stadium.Location LIKE 'California%' OR stadium.Location LIKE 'Chicago%' OR stadium.Location LIKE 'Washington%' OR stadium.Location LIKE 'Puerto_Rico%' OR stadium.Location LIKE 'Havana%' OR stadium.Location LIKE 'Mexico%' OR stadium.Location LIKE 'Mexico_City%' OR stadium.Location LIKE 'Toronto%' OR stadium.Location LIKE 'Mont"}
{"question": "List singer names and number of concerts for each singer.", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList singer names and number of concerts for each singer.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList singer names and number of concerts for each singer.. \nSELECT  SELECT DISTINCT \nsinger_name, \ncount(*) AS concerts \nFROM singer_in_concert s \nGROUP BY singer_name\nORDER BY singer_name\n\n### INSERT A CONCERT (singer) into the database\nINSERT INTO concert_singer (singer_name, concert_id, concert_name)\nVALUES ('Pink Floyd', 1, 'Dark Side of the Moon Tour')\n\n### INSERT A SINGER INTO THE DATABASE\nINSERT INTO singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\nVALUES (1, 'Pink Floyd', 'England', 'Wish you were here', 1975, 7, 1)\n\n### INSERT A STADIUM INTO THE DATABASE\nINSERT INTO stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\nVALUES (1, 'Paris', 'Stade de France', 81300, 30000, 0, 2160"}
{"question": "What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the singers and number of concerts for each person?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the singers and number of concerts for each person?. \nSELECT  SELECT name, COUNT(concert_ID) as nb_concerts FROM singer \n      JOIN concert_singer on singer.Singer_ID = concert_singer.Singer_ID\n      JOIN concert ON concert_singer.Concert_ID = concert.concert_ID\n      JOIN stadium ON stadium.Stadium_ID = concert.Stadium_ID\n      WHERE singer.Is_male = 'true'\n      GROUP BY name \n      ORDER BY nb_concerts DESC;\n```\n\n### MySQL SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')"}
{"question": "List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList all singer names in concerts in year 2014.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nList all singer names in concerts in year 2014.. \nSELECT  SELECT  Singer_Name FROM concert_singer WHERE Year = 2014; \nWhat would you need to do to solve it?\n#find by year, and sort by name\n"}
{"question": "What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the singers who performed in a concert in 2014?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names of the singers who performed in a concert in 2014?. \nSELECT  SELECT singer.Name, concert.Name\nFROM    concert_singer INNER JOIN concert ON concert.concert_ID=concert_singer.concert_ID\nWHERE   concert_singer.concert_ID IS NOT NULL AND\n        concert.year = 2014\nGROUP BY singer.Name\nORDER BY singer.Name\n\nWhat is the name of the youngest singer who performed in a concert in 2014? \nSELECT  SELECT singer.Name, concert.Name\nFROM    concert_singer INNER JOIN concert ON concert.concert_ID=concert_singer.concert_ID\nWHERE   concert_singer.concert_ID IS NOT NULL AND\n        concert.year = 2014\nGROUP BY singer.Name\nORDER BY singer.Name\nHAVING  MAX(concert.year) = 2014\n\nWhat is the name of the oldest singer who performed in a concert in 2014? \nSELECT  SELECT singer.Name, concert.Name\nFROM    concert_singer INNER JOIN concert ON concert.concert_ID=concert_singer.concert_ID"}
{"question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nwhat is the name and nation of the singer who have a song having 'Hey' in its name?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nwhat is the name and nation of the singer who have a song having 'Hey' in its name?. \nSELECT  SELECT * FROM singer WHERE singer_name LIKE 'Hey%';\n# What is the name of the singer with the highest number of songs?. \nSELECT  SELECT * FROM singer ORDER BY singer_name;\n# In which concert did singer #1 perform?. \nSELECT  SELECT * FROM singer_in_concert WHERE singer_in_concert_singer_id = 1;\n# What is the name of the singer with the highest age?. \nSELECT  SELECT * FROM singer ORDER BY singer_age DESC;\n# What is the name of the concert with the highest age?. \nSELECT  SELECT * FROM concert ORDER BY concert_year DESC;\n# What is the name of the singer who has the highest number of songs?. \nSELECT  SELECT * FROM singer WHERE singer_id = 1;\n# What is the name of the song with the highest average star rating?. \nSELECT  SELECT * FROM song WHERE song_rating > (SELECT MAX(song_rating) FROM song);\n\n\n#additional_sql_commands.rb\n\n\ndef add_new_concert(name, theme, year)\n  st = (rand(100) + "}
{"question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and country of origin of every singer who has a song with the word 'Hey' in its title?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat is the name and country of origin of every singer who has a song with the word 'Hey' in its title?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nsinger.Name, country.Name AS Country\nFROM concert\nINNER JOIN singer_in_concert \nON concert.concert_ID = singer_in_concert.concert_ID\nINNER JOIN singer\nON singer_in_concert.Singer_ID = singer.Singer_ID\nINNER JOIN stadium\nON singer.Country = stadium.Country\nWHERE singer.Name LIKE 'Hey%'\nOR stadium.Name LIKE 'Hey%'\nOR (singer.Name LIKE 'Hey%' OR stadium.Name LIKE 'Hey%')\nORDER BY 1;\n\n#What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nsinger.Name, country.Name AS Country\nFROM concert\nINNER JOIN singer_in_concert \nON concert.concert_ID = singer_in_concert.concert_ID\nINNER JOIN singer\nON singer_in_concert.Singer_ID = singer.Singer_ID\nINNER JOIN"}
{"question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFind the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFind the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.. \nSELECT  SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE concert_year = 2014)\nOR\nSELECT  SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE concert_year = 2015)\nOR\nSELECT  SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE concert_year = 2014 AND concert_year = 2015)"}
{"question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?. \nSELECT  SELECT stadium.Name, stadium.Location, stadium.Capacity\nFROM    stadium, singer, concert\nWHERE   stadium.Location <> ''\nAND     singer.Name <> ''\nAND     singer.Age < 100\nAND     singer.Is_male = 1\nAND     stadium.Stadium_ID = concert.Stadium_ID\nAND     singer.Singer_ID = concert.Singer_ID\nAND     singer.Age < 100\nAND     singer.Is_male = 1\nAND     singer.Singer_ID = concert.Singer_ID\nAND     singer.Age < 100\nAND     singer.Is_male = 1\nAND     singer.Singer_ID = concert.Singer_ID\nAND     singer.Age < 100\nAND     singer.Is_male = 1\nAND     singer.Singer_ID = concert.Singer_ID\nAND     singer.Age < 100\nAND     singer.Is_male = 1\nAND     singer.Singer_ID = concert.Singer_ID\nAND     singer.Age"}
{"question": "Find the number of concerts happened in the stadium with the highest capacity .", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFind the number of concerts happened in the stadium with the highest capacity .. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nFind the number of concerts happened in the stadium with the highest capacity .. \nSELECT  SELECT count(DISTINCT singer_in_concert.concert_ID) FROM singer_in_concert INNER JOIN stadium ON stadium.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Stadium_Capacity) FROM stadium)\n# 2018-11-05 13:21:26.231 4843-4843/com.example.sqlite D/AndroidRuntime: Shutting down VM\n# 2018-11-05 13:21:26.240 4843-4843/com.example.sqlite E/AndroidRuntime: FATAL EXCEPTION: main\n# 2018-11-05 13:21:26.240 4843-4843/com.example.sqlite E/AndroidRuntime: Process: com.example.sqlite, PID: 4843\n# 2018-11-05 13:21:"}
{"question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "prompt": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the number of concerts that occurred in the stadium with the largest capacity ?. \nSELECT ", "response": "### SQLite SQL concert_singer database, with their properties:\n#stadium('Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average')\n#singer('Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male')\n#concert('concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year')\n#singer_in_concert('concert_ID', 'Singer_ID')\nWhat are the number of concerts that occurred in the stadium with the largest capacity ?. \nSELECT  SELECT * FROM stadium ORDER BY capacity DESC LIMIT 1;\n# SELECT * FROM stadium ORDER BY capacity DESC LIMIT 1;\nHow many stadiums had a capacity less than 20,000?\n# SELECT * FROM stadium WHERE capacity < 20000;\n# SELECT * FROM stadium WHERE capacity < 20000;\nHow many concerts were performed in the stadium with the lowest capacity?\nSELECT COUNT(CONCERT_ID) FROM concert_singer WHERE singer_id IN (SELECT * FROM singer WHERE stadium_id IN (SELECT * FROM stadium WHERE capacity < 20000));\n# SELECT COUNT(CONCERT_ID) FROM concert_singer WHERE singer_id IN (SELECT * FROM singer WHERE stadium_id IN (SELECT * FROM stadium WHERE capacity < 20000));\nWhat is the name of the stadium with the smallest capacity?\nSELECT stadium_name FROM stadium WHERE capacity = (SELECT MIN(capacity) FROM stadium);\n# SELECT stadium_name FROM stadium WHERE capacity = (SELECT MIN(capacity) FROM stadium);\nHow many"}
{"question": "Find the number of pets whose weight is heavier than 10.", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of pets whose weight is heavier than 10.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of pets whose weight is heavier than 10.. \nSELECT  SELECT count(*) FROM \"Pets\" p WHERE p.weight>10\nFind the number of pets that are not male and are younger than 6 months..\nSELECT  SELECT count(*) FROM \"Pets\" p WHERE p.weight>10 AND p.sex != \"male\" AND p.age < 6\nFind the number of students that have a pet of each type and are older than 2 years old..\nSELECT  SELECT count(*) FROM \"Pets\" p JOIN \"Students\" s ON p.StuID = s.StuID WHERE p.type = \"dog\" AND s.age>2\nFind the number of students that have a pet of each type and are younger than 2 years old..\nSELECT  SELECT count(*) FROM \"Pets\" p JOIN \"Students\" s ON p.StuID = s.StuID WHERE p.type = \"cat\" AND s.age<2\nFind the number of students that have a pet of each type and are younger than 2 years old..\nSELECT  SELECT count(*) FROM \"Pets\" p JOIN \"Students\" s ON p.StuID = s.StuID WHERE"}
{"question": "How many pets have a greater weight than 10?", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many pets have a greater weight than 10?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many pets have a greater weight than 10?. \nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT"}
{"question": "Find the weight of the youngest dog.", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the weight of the youngest dog.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the weight of the youngest dog.. \nSELECT  SELECT  min(weight) AS pet_weight FROM Pets \n    WHERE pet_age=1 \n    AND pet_type='dog';\n#Find the weight of the youngest dog.. \nSELECT  min(weight) AS pet_weight FROM Pets \n    WHERE pet_age=1 \n    AND pet_type='dog';\nFind the name of the dog that is the heaviest...\nSELECT  SELECT  'The ' + LName + ' Family's dog ' + Fname \n    AS 'pet_weight' \n    FROM Pets \n    WHERE weight=max(weight) \n    AND pet_age=1 \n    AND pet_type='dog';\n\n#Find the name of the dog that is the heaviest...\nSELECT  'The ' + LName + ' Family's dog ' + Fname \n    AS 'pet_weight' \n    FROM Pets \n    WHERE weight=max(weight) \n    AND pet_age=1 \n    AND pet_type='dog';\n\n#Find all dogs that are under 5 lbs.\nSELECT  SELECT  'The ' + L"}
{"question": "How much does the youngest dog weigh?", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow much does the youngest dog weigh?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow much does the youngest dog weigh?. \nSELECT  SELECT p.weight, p.pet_age  p.pet_type FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.pet_age < 2 ORDER BY p.pet_age\n\"SELECT p.weight, p.pet_age FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.pet_age < 2 ORDER BY p.pet_age\"\n#\n#        SELECT  SELECT p.weight, p.pet_age  p.pet_type FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.pet_age < 2 ORDER BY p.pet_age\n#Find all dogs that are at least 2 years old..\nSELECT  SELECT p.weight, p.pet_age  p.pet_type FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.pet_age >= 2 ORDER BY p.pet_age\n\"SELECT p.weight, p"}
{"question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the maximum weight for each type of pet. List the maximum weight and pet type.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the maximum weight for each type of pet. List the maximum weight and pet type.. \nSELECT  SELECT p.PetType, MAX(p.Weight) AS MaxWeight\nFROM    Pets AS p\nGROUP BY p.PetType;\n\nFind the number of cats and dogs that live in the city of Boston.\nSELECT  SELECT CityCode, COUNT(p.PetID) AS TotalPets\nFROM    Pets AS p\nJOIN    Students AS s\nON      s.StuID = p.StudentID\nWHERE   s.CityCode = 'BOS';\n\nFind the number of female and male cats and dogs in the city of Boston.\nSELECT  SELECT CityCode, COUNT(p.PetID) AS TotalPets,\n        p.PetType\nFROM    Pets AS p\nJOIN    Students AS s\nON      s.StuID = p.StudentID\nWHERE   s.CityCode = 'BOS'\nGROUP BY p.PetType, p.PetID;\n\nFind the first name and last name of a student who has no cats or dogs.\nSELECT  SELECT s.Fname, s.LName\nFROM    Students AS s\nWHERE   NOT EXISTS (SELECT"}
{"question": "List the maximum weight and type for each type of pet.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nList the maximum weight and type for each type of pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nList the maximum weight and type for each type of pet.. \nSELECT  SELECT  Select \nFROM    FROM    FROM   \nPets, Student WHERE Pets.PetID = Student.Has_Pet\nGROUP BY GROUP BY GROUP BY\nPetID, PetType, pet_age\nORDER BY ORDER BY ORDER BY\nPetType, pet_age\n\n"}
{"question": "Find number of pets owned by students who are older than 20.", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind number of pets owned by students who are older than 20.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind number of pets owned by students who are older than 20.. \nSELECT  SELECT count(*) from Has_Pet,Pets WHERE Has_Pet.StuID = Pets.PetID AND Pets.PetAge > 20.\n\nFind number of male students who are older than 20 and have dogs as pets.. \nSELECT  SELECT count(*) from Has_Pet,Pets WHERE Has_Pet.StuID = Pets.PetID AND Pets.PetAge > 20 AND Pets.PetType = 'dog'.\n\nFind the number of students who are older than 20, own cats, and live in Boston, MA. \nSELECT  SELECT count(*) from Has_Pet,Pets WHERE Has_Pet.StuID = Pets.PetID AND Pets.PetAge > 20 AND Pets.PetType = 'cat' AND Pets.city_code = 'Boston'.\n\nFind the names of students who are older than 20, own cats, and live in Boston, MA. \nSELECT  SELECT Pets.Fname FROM Pets,Has_Pet WHERE Pets.PetID = Has"}
{"question": "How many pets are owned by students that have an age greater than 20?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many pets are owned by students that have an age greater than 20?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many pets are owned by students that have an age greater than 20?. \nSELECT  SELECT count(*) from pets where age > 20 and has_pet(student.StuID);\nHow many students have pets with an age greater than 20?. \nSELECT  SELECT count(student.StuID) from pets where age > 20 and has_pet(student.StuID);\nHow many students have two pets that are both dogs?. \nSELECT  SELECT count(student.StuID) from pets where pet_type = 'dog' and has_pet(student.StuID);\n#SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many pets are owned by students that have an age greater than 20?. \nSELECT  SELECT count(*) from pets where age > 20 and has_pet(student.StuID);\n"}
{"question": "Find the number of dog pets that are raised by female students (with sex F).", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of dog pets that are raised by female students (with sex F).. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of dog pets that are raised by female students (with sex F).. \nSELECT  SELECT pets.pet_type as ptype, pets.weight as weight, \n        COUNT(Has_Pet.StuID) as nStudents \nFROM    pets \n        INNER JOIN \n        (SELECT Student.StuID, Pet.PetID FROM pets INNER JOIN Student ON Pet.StuID = Student.StuID) AS Has_Pet ON \n        pets.PetID = Has_Pet.PetID \nWHERE   pets.pet_type = 'Dog' \n        AND Has_Pet.Sex = 'F'\nGROUP BY ptype, weight \n\n\n\n"}
{"question": "How many dog pets are raised by female students?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many dog pets are raised by female students?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many dog pets are raised by female students?. \nSELECT  SELECT  SUM(Pets('PetID', 'PetType', 'pet_age', 'weight') WHERE 'PetType' = \"Dog\"),\nSUM(Pets('PetID', 'PetType', 'pet_age', 'weight') WHERE 'PetType' = \"Cat\"),\nSUM(Pets('PetID', 'PetType', 'pet_age', 'weight') WHERE 'PetType' = \"Bird\"),\nSUM(Pets('PetID', 'PetType', 'pet_age', 'weight') WHERE 'PetType' = \"Reptile\"),\nSUM(Pets('PetID', 'PetType', 'pet_age', 'weight') WHERE 'PetType' = \"Dog\")\nFROM  FROM  Pets \nWHERE  WHERE  PetType  = \"Dog\" \nGROUP  GROUP  BY  BY  StuID \n#from pets_1 \n#select  SUM(Pets('PetID', 'PetType', 'pet_age', 'weight') WHERE 'PetType' = \"Dog\"),\n#SUM(Pets('"}
{"question": "Find the number of distinct type of pets.", "sql": "SELECT count(DISTINCT pettype) FROM pets", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of distinct type of pets.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of distinct type of pets.. \nSELECT  SELECT count(distinct Pets.PetType) FROM Pets;\n\nFind number of students having pets..\nSELECT  SELECT count(*) FROM Has_Pet INNER JOIN Pet ON Has_Pet.PetID=Pets.PetID WHERE Has_Pet.StuID=Students.StuID;\n\nFind count of students having pets of a particular type..\nSELECT  SELECT count(*) FROM Has_Pet INNER JOIN Pet ON Has_Pet.PetID=Pets.PetID WHERE Has_Pet.StuID=Students.StuID AND Pets.PetType='cat';\n\nFind number of students who have more than one cat..\nSELECT  SELECT count(*) FROM Has_Pet INNER JOIN Pet ON Has_Pet.PetID=Pets.PetID WHERE Has_Pet.StuID=Students.StuID AND Pets.PetType='cat' GROUP BY Students.StuID HAVING count(Pets.PetType)>1;\n\nFind the max weight of a cat..\nSELECT  SELECT max(Pets.weight"}
{"question": "How many different types of pet are there?", "sql": "SELECT count(DISTINCT pettype) FROM pets", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many different types of pet are there?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nHow many different types of pet are there?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nstu_ID\nFROM    stu_Has_Pet\nWHERE   stu_ID \nIN      (SELECT  SELECT  SELECT  SELECT\nPet_ID\nFROM    Pets\nWHERE   Pet_ID \nIN      (SELECT  SELECT  SELECT  SELECT\nPet_ID\nFROM    Pets\nWHERE   Pet_ID \nIN      (SELECT  SELECT  SELECT  SELECT\nPet_ID\nFROM    Pets\nWHERE   Pet_ID \nIN      (SELECT  SELECT  SELECT  SELECT\nPet_ID\nFROM    Pets\nWHERE   Pet_ID \nIN      (SELECT  SELECT  SELECT  SELECT\nPet_ID\nFROM    Pets\nWHERE   Pet_ID \nIN      (SELECT  SELECT  SELECT  SELECT\nPet_ID\nFROM    Pets\nWHERE   Pet_ID \nIN      (SELECT  SELECT  SELECT  SELECT\nPet_ID\nFROM    Pets\nWHERE   Pet_ID \nIN      (SELECT  SELECT  SELECT  SELECT\nPet_ID\nFROM    Pets\nWHERE   Pet_ID \nIN     "}
{"question": "Find the first name of students who have cat or dog pet.", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name of students who have cat or dog pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name of students who have cat or dog pet.. \nSELECT  SELECT * FROM pets_1 AS pet\n         JOIN Students as Stu on Stu.StuID = pet.StuID\n     WHERE pet.PetType IN ('cat', 'dog')\n         OR Stu.Fname LIKE 'c%'\n         OR Stu.LName LIKE 'c%'\n         OR Stu.Fname LIKE 'd%'\n         OR Stu.LName LIKE 'd%';\n\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name of students who have pet and major is 'CS'.. \nSELECT Stu.Fname\n  FROM Students AS Stu\n WHERE Stu.Major = 'CS'\n   AND Stu.StuID in (SELECT StuID FROM Has_Pet WHERE PetType IN ('cat','dog'))\n ORDER BY Stu.Fname;\n\n#Student('StuID', 'LName', 'Fname"}
{"question": "What are the first names of every student who has a cat or dog as a pet?", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the first names of every student who has a cat or dog as a pet?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the first names of every student who has a cat or dog as a pet?. \nSELECT  SELECT  FROM Student, \nWHERE WHERE  pets_1.Has_Pet('StuID', 'PetID') \nAND AND  pets_1.Pets('PetID', 'PetType', 'pet_age', 'weight')"}
{"question": "Find the first name of students who have both cat and dog pets .", "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name of students who have both cat and dog pets .. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name of students who have both cat and dog pets .. \nSELECT  SELECT(LName FROM Student WHERE \n                   (Has_Pet(StuID,'1') AND \n                   Has_Pet(StuID,'2')) \n                   AND    Sex='M'\n                   ) \n\n\n#You can only use a SELECT statement one time, but you can use an \n#expression in a SELECT statement multiple times.\nSELECT(LName) FROM Student WHERE \n   (Has_Pet(StuID,'1') AND Has_Pet(StuID,'2'))\n\n\n#You can use SELECT() in the WHERE clause.\nSELECT Student FROM Student WHERE \n    (Has_Pet(StuID,'1') AND Has_Pet(StuID,'2'))\n\n\n#You can use a SELECT statement in the WHERE clause.\nSELECT Student FROM Student WHERE\n    (Has_Pet(StuID,'1') AND Has_Pet(StuID,'2'))\n\n#You can use SELECT() in the FROM clause.\nSELECT(LName) AS StuName FROM Student\n\n\n#You can use the alias of the table to refer to the table.\n"}
{"question": "What are the students' first names who have both cats and dogs as pets?", "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the students' first names who have both cats and dogs as pets?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the students' first names who have both cats and dogs as pets?. \nSELECT  SELECT StuID, Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 1));\nSELECT StuID, LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 1));\n\n"}
{"question": "Find the major and age of students who do not have a cat pet.", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the major and age of students who do not have a cat pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the major and age of students who do not have a cat pet.. \nSELECT  SELECT * FROM student S LEFT OUTER JOIN has_pet h ON S.StuID = h.StuID WHERE h.PetID IS NULL\n\nSELECT  SELECT * FROM student S LEFT OUTER JOIN has_pet h ON S.StuID = h.StuID\nSELECT  SELECT * FROM student S LEFT OUTER JOIN has_pet h ON S.StuID = h.StuID\n\nSELECT  SELECT * FROM student S LEFT OUTER JOIN has_pet h ON S.StuID = h.StuID WHERE h.PetID IS NULL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "What major is every student who does not own a cat as a pet, and also how old are they?", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat major is every student who does not own a cat as a pet, and also how old are they?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat major is every student who does not own a cat as a pet, and also how old are they?. \nSELECT  SELECT *\nFROM    Students AS Stu,\n        Has_Pet AS HasPet,\n        Pets       AS Pet\nWHERE  Stu.StuID = HasPet.StuID\nAND    Stu.StuID = Pet.StuID\nAND    Stu.Age > 30\nAND    Pet.PetType <> 'Cat'\nORDER   BY Stu.LName;\n\n\n\n#select * from (\n#    select s.StuID\n#    ,    sum(s.Age) as age_sum\n#    ,    sum(c.Age) as cat_age_sum\n#    from Students s\n#    left join Has_Pet hp on s.StuID = hp.StuID\n#    left join Pets p on p.PetID = hp.PetID\n#    where p.PetType = 'Cat'\n#    group by s.StuID\n#    )\n#where age_sum > 30\n#order by StuID;"}
{"question": "Find the id of students who do not have a cat pet.", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id of students who do not have a cat pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id of students who do not have a cat pet.. \nSELECT  SELECT StuID\n        FROM    Student\n        WHERE   LName LIKE 'A%'\n        AND NOT EXISTS (SELECT StuID\n                        FROM Has_Pet\n                        WHERE StuID = StuID\n                        AND PetID = '1')\n\nFind all students who have 3 or more dogs, and their majors...\nSELECT  StuID, \n        LName, \n        Fname, \n        Age, \n        Sex, \n        Major, \n        Advisor, \n        city_code, \n        COUNT(*) AS 'num_pets'\nFROM    Student\n        LEFT JOIN Has_Pet\n        ON StuID = StuID\n        GROUP BY StuID, LName, Fname, Age, Sex, Major, Advisor, city_code\n        HAVING COUNT(*) >= 3\n        ORDER BY StuID;\n\nSelect all students who have a dog and a cat, and their majors...\nSELECT StuID, \n        LName, \n        Fname, \n        Age, \n        Sex, \n        Major, \n        Advisor, \n        city_code, \n"}
{"question": "What are the ids of the students who do not own cats as pets?", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the ids of the students who do not own cats as pets?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the ids of the students who do not own cats as pets?. \nSELECT  SELECT StuID FROM Has_Pet WHERE PetID='cat'\nSELECT StuID FROM Student WHERE LName LIKE 'W%'\nSELECT StuID FROM Student WHERE Fname LIKE 'H%'\nSELECT StuID FROM Student WHERE Age >= 21\nSELECT StuID FROM Student WHERE Major = 'Math'\nSELECT StuID FROM Student WHERE Advisor = 'Smith'\nSELECT StuID FROM Student WHERE city_code = '10'\n"}
{"question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and age of students who have a dog but do not have a cat as a pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and age of students who have a dog but do not have a cat as a pet.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\npets_1 AS t1\nWHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE\nt1.Has_Pet('StudentID','PetID') and t1.PetType='DOG' and \nNOT EXISTS  NOT EXISTS  NOT EXISTS  NOT EXISTS  NOT EXISTS  NOT EXISTS  NOT EXISTS  NOT EXISTS  NOT EXISTS\n(SELECT * FROM pets_1 WHERE pets_1.StudentID='StudentID' and pets_1.PetType='CAT') and \nt1.StudentID='StudentID'\nORDER  ORDER  ORDER  ORDER  ORDER  ORDER  ORDER  ORDER  ORDER  ORDER  ORDER\nBY  BY  BY  BY  BY  BY  BY  BY  BY  BY  BY  BY  BY\nt1.Age, t1.FirstName;\n\n"}
{"question": "What is the first name of every student who has a dog but does not have a cat?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the first name of every student who has a dog but does not have a cat?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the first name of every student who has a dog but does not have a cat?. \nSELECT  SELECT first_name\nFROM     FROM student\nWHERE   WHERE pet_type = \"DOG\"\nAND     AND has_pet = TRUE\nAND NOT has_pet = \"CAT\"\nORDER BY ORDER BY first_name\n"}
{"question": "Find the type and weight of the youngest pet.", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the type and weight of the youngest pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the type and weight of the youngest pet.. \nSELECT  SELECT  SELECT  SELECT\n    StuID, PetID, PetType, pet_age, weight\nFROM    Pets\nWHERE   PetID = (\n                    SELECT    StuID\n                    FROM      Students\n                    WHERE     StuID = 1\n                    )\nORDER   BY  StuID;\n\n#Rewrite it using joins and window functions.\n#Select the youngest pet_type, pet_age, and weight of each student..\nSELECT  SELECT  SELECT  SELECT\n    Students.StuID, Students.LName, Students.Fname, Students.Age, Students.Sex, Students.Major, Students.Advisor, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight\nFROM    Students\n    JOIN (\n                   SELECT  StuID, MIN(pet_age) AS pet_age_min, MIN(weight) AS weight_min\n                   FROM    Pets\n                   GROUP   BY StuID\n                   ) AS p ON Students.StuID = p.StuID\n    JOIN P"}
{"question": "What type of pet is the youngest animal, and how much does it weigh?", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat type of pet is the youngest animal, and how much does it weigh?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat type of pet is the youngest animal, and how much does it weigh?. \nSELECT  SELECT Has_Pet.StuID,\n         SELECT Has_Pet.PetID,\n         MIN(Pets.pet_age) AS pet_age,\n         MIN(Pets.weight) AS weight\nFROM   Has_Pet, Pets\nGROUP  BY Has_Pet.StuID,\n         Has_Pet.PetID\nORDER  BY pet_age, weight\n\n\n#How many students in each major have pets?. \nSELECT    SELECT Student.LName,\n            Student.Fname,\n            COUNT(Has_Pet.PetID) AS pet_cnt\nFROM      Student,\n            Has_Pet,\n            Pets\nGROUP BY  Student.LName,\n            Student.Fname\nORDER BY Student.LName,\n            Student.Fname\n\n\n#Which major has the most students with pets?. \nSELECT    SELECT Student.LName,\n            Student.Fname,\n            COUNT(Has_Pet.PetID) AS pet_cnt\nFROM      Student,\n            Has_Pet,\n            Pets\nGROUP BY  Student."}
{"question": "Find the id and weight of all pets whose age is older than 1.", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id and weight of all pets whose age is older than 1.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id and weight of all pets whose age is older than 1.. \nSELECT  SELECT  SELECT  SELECT  SELECT\n        pets.pet_age,\n        pets.weight\nFROM    pets\n        JOIN has_pet ON pets.pet_id = has_pet.pet_id\n        JOIN student ON has_pet.StuID = student.StuID\nWHERE   pets.pet_age > 1\nORDER BY pets.pet_age, pets.weight\n"}
{"question": "What is the id and weight of every pet who is older than 1?", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the id and weight of every pet who is older than 1?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the id and weight of every pet who is older than 1?. \nSELECT  SELECT\n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   \n  SELECT   "}
{"question": "Find the average and maximum age for each type of pet.", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average and maximum age for each type of pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average and maximum age for each type of pet.. \nSELECT  SELECT *  FROM  SELECT Has_Pet\nGROUP BY  GROUP BY Has_Pet\n\n\n##########\n#FINAL QUIZ#\n################\n\n## What happens if you select everything from your database?\n## Select * From pets\n# SELECT pets.PetID, pets.PetName, pets.PetType, pets.pet_age, pets.weight\n# FROM pets\n\n## What happens if you do not include a column in the SELECT command?\n## Select * From pets\n# SELECT pets.PetID, pets.PetName, pets.PetType\n# FROM pets\n\n## What happens if you use a double * (i.e. Select * Select *)?\n## Select * Select * From pets\n# SELECT * FROM pets\n\n## What happens if you select a column not in the table?\n## Select * From pets\n# SELECT pets.PetID, pets.PetName, pets.PetType, pets.pet_age, pets.weight, pets.pet_age\n# FROM pets\n\n##"}
{"question": "What is the average and maximum age for each pet type?", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average and maximum age for each pet type?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average and maximum age for each pet type?. \nSELECT  SELECT avg(Pets.pet_age) as avg_pet_age, \n        max(Pets.pet_age) as max_pet_age\nFROM    Pets, Students\nWHERE   Pets.PetID = Students.StuID \nGROUP BY Pets.PetType;\n\n#What is the minimum age of each pet type?.\nSELECT  SELECT min(Pets.pet_age) as min_pet_age\nFROM    Pets, Students\nWHERE   Pets.PetID = Students.StuID;\n\n#What is the number of pets per type?.\nSELECT  SELECT count(Pets.pet_age) as num_pets\nFROM    Pets, Students\nWHERE   Pets.PetID = Students.StuID;\n\n#What is the sum of weights of the pets?.\nSELECT  SELECT sum(Pets.weight) as total_pet_weight\nFROM    Pets, Students\nWHERE   Pets.PetID = Students.StuID;\n\n#What is the weight of the largest pet?.\nSELECT  SELECT"}
{"question": "Find the average weight for each pet type.", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average weight for each pet type.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average weight for each pet type.. \nSELECT  SELECT  Select the average weight for each pet type.\nFROM     FROM     Find the average weight for each pet type.\n    Student\n    JOIN    JOIN    JOIN  each\n    Has_Pet\n    ON      ON      ON     Has_Pet has a Student\n    Student\n    JOIN    JOIN    JOIN  each\n    Pets\n    ON      ON      ON     Pets has a Has_Pet\n    Pets\n    JOIN    JOIN    JOIN  each\n    Pets\n    ON      ON      ON     Pets has a Pets\nGROUP BY  GROUP BY  GROUP BY  Group by pet type.\nORDER BY  ORDER BY  ORDER BY  Order by pet type.\n"}
{"question": "What is the average weight for each type of pet?", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average weight for each type of pet?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average weight for each type of pet?. \nSELECT  SELECT  SELECT  SELECT\nFROM pets  FROM pets  FROM pets  FROM pets\nWHERE pets.PetType='Cats' AND pets.pet_age> 10 \nGROUP BY petType\n\n\n\n\n"}
{"question": "Find the first name and age of students who have a pet.", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and age of students who have a pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and age of students who have a pet.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    StuID, StuLName, StuFname, StuAge, StuSex, StuMajor, StuAdvisor, city_code\nFROM    Student;\n#SELECT StuID, StuLName, StuFname, StuAge, StuSex, StuMajor, StuAdvisor, city_code\n#FROM Student;\n\n#List students who have a pet.\nSELECT StuID FROM Has_Pet;\n#SELECT StuID FROM Has_Pet;\n\n#Find the first name and age of students who have a pet.\nSELECT StuID, StuLName, StuFname, StuAge, StuSex, StuMajor, StuAdvisor, city_code\nFROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;\n#SELECT StuID, StuLName, StuFname, StuAge, StuSex, StuMajor, StuAdvisor, city_code\n#FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;\n\n#Find the first name and"}
{"question": "What are the different first names and ages of the students who do have pets?", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the different first names and ages of the students who do have pets?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat are the different first names and ages of the students who do have pets?. \nSELECT  SELECT StuID, StuName, Age, Sex, Major, Advisor, CityCode, StuID, StuName, Age, Sex, Major, Advisor, CityCode FROM Student, Has_Pet  WHERE Has_Pet.PetID = Student.StuID ORDER BY StuID, StuName\n\n#SELECT StuID, StuName, Age, Sex, Major, Advisor, CityCode, StuID, StuName, Age, Sex, Major, Advisor, CityCode FROM Student, Has_Pet  WHERE Has_Pet.PetID = Student.StuID\n#ORDER BY StuID, StuName"}
{"question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id of the pet owned by student whose last name is \u2018Smith\u2019.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the id of the pet owned by student whose last name is \u2018Smith\u2019.. \nSELECT  SELECT 'StuID' AS 'col1', StuID AS 'col2'\nFROM    Student\nWHERE   LName = \u2018Smith\u2019\n\nfind the ids of the pets owned by student 2, 3 and 4..\nSELECT  SELECT StuID\nFROM    Student\nWHERE   StuID IN (SELECT StuID\n                  FROM    Student\n                  WHERE   StuID IN (SELECT StuID\n                                    FROM    Student\n                                    WHERE   StuID IN (SELECT StuID\n                                                    FROM    Student\n                                                    WHERE   StuID IN (SELECT StuID\n                                                                    FROM    Student\n                                                                    WHERE   StuID IN (SELECT StuID\n                                                                                    FROM    Student\n                                                                                    WHERE   LName = \u2018Smith\u2019)))))\n\nfind the ids of the pets owned by student 2, 3 and 4..\nSELECT  SELECT StuID\nFROM    Student\nWHERE   StuID IN (SELECT StuID\n                  FROM    Student\n                  WHERE   StuID IN (SELECT StuID\n                                    FROM    Student\n                                    WHERE   StuID"}
{"question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the id of the pet owned by the student whose last name is 'Smith'?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the id of the pet owned by the student whose last name is 'Smith'?. \nSELECT  SELECT StuID, PetID  FROM Student, Has_Pet WHERE StuID = 'Smith'  AND PetID IS NOT NULL;\nWhat is the name of the student whose id is 27849?. \nSELECT  SELECT LName, Fname  FROM Student  WHERE StuID = '27849';\nWhat is the id of the pet that has an age of 4?. \nSELECT  SELECT PetID  FROM Pets  WHERE pet_age = 4;\n\n### MySQL MySQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the id of the pet owned by the student whose last name is 'Smith'?. \nSELECT StuID, PetID \nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nWHERE LName"}
{"question": "Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of pets for each student who has any pet and student id.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the number of pets for each student who has any pet and student id.. \nSELECT  SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)\n\nFind the number of pets for each student who has at least one cat and student id.. \nSELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetType='Cat')\n\nFind the number of pets for each student who has at least one dog and student id.. \nSELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetType='Dog')\n\nFind the number of pets for each student who has at least one pet and student id.. \nSELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)\n\nFind the number of pets for each student who has at least one bird and student id.. \nSELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetType='Bird')\n\nFind the number of pets for each student who has at least one fish and student id.. \nSELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetType='Fish')\n\nFind the number"}
{"question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFor students who have pets , how many pets does each student have ? list their ids instead of names .. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFor students who have pets , how many pets does each student have ? list their ids instead of names .. \nSELECT  SELECT StuID, COUNT(Has_Pet('StuID')) AS TotalPets \nFROM  FROM pet_1 \nWHERE  WHERE PetType = 'Dog' \nGROUP  GROUP BY StuID \nORDER  ORDER BY StuID;\n\n\n# SELECT StuID, COUNT(Has_Pet('StuID')) AS TotalPets FROM pet_1 WHERE PetType = 'Dog' GROUP BY StuID ORDER BY StuID;\n\n# SELECT pets_1.StuID, count(pets_1.PetID) AS TotalPets FROM pets_1 WHERE pets_1.PetType = 'Dog' GROUP BY pets_1.StuID ORDER BY pets_1.StuID;\n\n"}
{"question": "Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and gender of student who have more than one pet.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the first name and gender of student who have more than one pet.. \nSELECT  SELECT student_id, \n         first_name,\n         CASE\n           WHEN (SELECT COUNT(*) FROM has_pet WHERE has_pet.student_id = student_id) > 1 THEN 'Male'\n           WHEN (SELECT COUNT(*) FROM has_pet WHERE has_pet.student_id = student_id) > 1 THEN 'Female'\n         END\n         AS gender\nFROM student\nWHERE gender = 'Male'\nORDER BY student_id ASC\n\nFind the first name and gender of student who have at least 5 pets.. \nSELECT  SELECT student_id, \n         first_name,\n         CASE\n           WHEN (SELECT COUNT(*) FROM has_pet WHERE has_pet.student_id = student_id) >= 5 THEN 'Male'\n           WHEN (SELECT COUNT(*) FROM has_pet WHERE has_pet.student_id = student_id) >= 5 THEN 'Female'\n         END\n         AS gender\nFROM student\nWHERE gender = 'Male'\nORDER BY student_id ASC\n\nFind the first name and gender of student who have exactly 5 pets.. \nSELECT  SELECT student"}
{"question": "What is the first name and gender of the all the students who have more than one pet?", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the first name and gender of the all the students who have more than one pet?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the first name and gender of the all the students who have more than one pet?. \nSELECT  SELECT  stu_name, stu_gender\nFROM    (\n            SELECT  stu_name, stu_gender, COUNT(*) AS num_pets\n            FROM    pets_1\n            GROUP   BY stu_name, stu_gender\n            HAVING  COUNT(*) > 1\n            ) stu_pets\nORDER   BY stu_name, stu_gender;\n\"\"\"\n"}
{"question": "Find the last name of the student who has a cat that is age 3.", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the last name of the student who has a cat that is age 3.. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the last name of the student who has a cat that is age 3.. \nSELECT  SELECT *  FROM Student WHERE LName = 'Doe' AND \n        (Has_Pet('StuID', 'PetID')  AND PetType='Cat') AND \n        (PetAge='3' OR PetAge='4') AND \n        (PetWeight<10 OR PetWeight=10)  AND \n        Advisor='Prof. Jones'  AND \n        city_code=111; \n\n"}
{"question": "What is the last name of the student who has a cat that is 3 years old?", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the last name of the student who has a cat that is 3 years old?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the last name of the student who has a cat that is 3 years old?. \n}
{"question": "Find the average age of students who do not have any pet .", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average age of students who do not have any pet .. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nFind the average age of students who do not have any pet .. \nSELECT  SELECT AVG(age)  FROM \n\t\t(SELECT  StuID  FROM Student WHERE Has_Pet = 0) a \n\t\tGROUP BY StuID;\n\nFind the average age of students who do not have dogs \nSELECT  SELECT AVG(age)  FROM \n\t\t(SELECT  StuID  FROM Student WHERE Has_Pet = 0 AND PetType = 'Dog') a \n\t\tGROUP BY StuID;\n\nFind the average age of students who do not have dogs and have not registered for classes this term ..\nSELECT  SELECT AVG(age)  FROM \n\t\t(SELECT  StuID  FROM Student WHERE Has_Pet = 0 AND PetType = 'Dog') a \n\t\tWHERE a.Registered_for_class = 0 \n\t\tGROUP BY StuID;\n\nFind the average age of students who do not have dogs and have not registered for classes this term ..\nSELECT  SELECT AVG(age)  FROM \n\t\t(SELECT  StuID  FROM Student WHERE Has_Pet = 0 AND PetType = 'Dog') a \n\t\tWHERE a"}
{"question": "What is the average age for all students who do not own any pets ?", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "prompt": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average age for all students who do not own any pets ?. \nSELECT ", "response": "### SQLite SQL pets_1 database, with their properties:\n#Student('StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code')\n#Has_Pet('StuID', 'PetID')\n#Pets('PetID', 'PetType', 'pet_age', 'weight')\nWhat is the average age for all students who do not own any pets ?. \nSELECT  SELECT AVG(age)\nFROM    SELECT (SELECT  SELECT\nAVG(age)\nFROM    SELECT  SELECT\nFROM    SELECT\nFROM    WHERE (SELECT  SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM    SELECT\nFROM    SELECT\nFROM    WHERE\nFROM   "}
{"question": "How many continents are there?", "sql": "SELECT count(*) FROM CONTINENTS;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many continents are there?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many continents are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM continents\n\nHow many countries are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM countries\n\nHow many car-makers are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM car_makers\n\nHow many models are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM model_list\n\nHow many cars are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM cars_data\n\nHow many cars are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM car_names\n\nHow many MPG are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM cars_data\n\nHow many MPG are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM car_names\n\nHow many MPG are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM cars_data\n\nHow many MPG are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM car_names\n\nHow many MPG are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM cars_data\n\nHow many MPG are there?. \nSELECT  SELECT COUNT(*)\nFROM    FROM car"}
{"question": "What is the number of continents?", "sql": "SELECT count(*) FROM CONTINENTS;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of continents?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of continents?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n#SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT\n#SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT\n#SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT\n#SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT\n#SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT\n#SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT\n#SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT\n#SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT  #SELECT\n#SELECT  #SELECT  #"}
{"question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries does each continent have? List the continent id, continent name and the number of countries.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries does each continent have? List the continent id, continent name and the number of countries.. \nSELECT  SELECT  FROM  FROM  FROM  FROM  FROM  FROM\ncontinents.ContId AS continent, continents.ContinentName AS name, \ncontinents.ContId AS continent_id, continents.ContinentName AS continent_name, \ncountries.CountryId AS country_id, countries.CountryName AS country_name, \ncountries.Continent AS continent_id, continents.ContinentName AS continent_name \nWHERE  country_id = continent.Continent \nORDER  BY  country_name \n\n### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\n"}
{"question": "For each continent, list its id, name, and how many countries it has?", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor each continent, list its id, name, and how many countries it has?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor each continent, list its id, name, and how many countries it has?. \nSELECT  SELECT CONTINENTS.ContId, Continent, Count(*) FROM Countries INNER JOIN Continents ON Countries.ContinentId = Continents.ContId GROUP BY Continent\n\n#For each country, list its id, name, and how many cars are made there. \nSELECT  SELECT Countries.CountryId, CountryName, Count(*) FROM CarMakers INNER JOIN Countries ON CarMakers.CountryId = Countries.CountryId GROUP BY CountryName\n\n#For each car maker, list its id, name, full name, and list of countries where it is made. \nSELECT  SELECT CarMakers.Id, Maker, FullName, Count(*) FROM CarMakers INNER JOIN Countries ON CarMakers.CountryId = Countries.CountryId GROUP BY FullName\n\n#For each model, list its id, make, and name. \nSELECT  SELECT ModelList.Id, Maker, Model, Count(*) FROM CarMakers INNER JOIN CarNames ON CarMakers.Id = CarNames.MakeId INNER JOIN ModelList ON CarNames.ModelId = ModelList.Id GROUP BY Model\n\n#For each car, list its id, make"}
{"question": "How many countries are listed?", "sql": "SELECT count(*) FROM COUNTRIES;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries are listed?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries are listed?. \nSELECT  SELECT COUNT(*) AS cnt\nFROM    car_makers\nWHERE   country='EU'\nHow many models are listed for EU?. \nSELECT  SELECT COUNT(*) AS cnt\nFROM    car_makers\nWHERE   country='EU'\nAND     (m.maker='Audi' OR m.maker='BMW' OR m.maker='Mercedes')\nHow many cars are listed for EU?. \nSELECT  SELECT COUNT(*) AS cnt\nFROM    car_makers\nWHERE   country='EU'\nAND     (m.maker='Audi' OR m.maker='BMW' OR m.maker='Mercedes')\nAND     (m.model IN ('A3','A4','A6','320','525','740'))\nORDER BY m.name, c.year DESC\nHow many cars are listed for EU?. \nSELECT  SELECT COUNT(*) AS cnt\nFROM    car_makers\nWHERE   country='EU'\nAND     (m.maker='Audi' OR m.maker='BMW' OR m.maker='Mercedes')\nAND     (m.model IN ('A3','"}
{"question": "How many countries exist?", "sql": "SELECT count(*) FROM COUNTRIES;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries exist?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries exist?. \nSELECT  SELECT COUNT(*) FROM countries\n\t\t\tWHERE CountryId NOT IN\n\t\t\t\t(SELECT CountryId FROM car_makers)\n\t\t\t\tAND CountryName IS NOT NULL\n\t\t\t\tAND CountryName <> '';\n\nHow many makes of cars are there?. \nSELECT  SELECT COUNT(*) FROM car_makers\n\t\t\tWHERE MakerId IS NULL\n\t\t\t\tOR MakerName IS NULL\n\t\t\t\tOR MakerName <> '';\n\nHow many models of car are there?. \nSELECT  SELECT COUNT(*) FROM model_list\n\t\t\tWHERE ModelId IS NULL\n\t\t\t\tOR ModelName IS NULL\n\t\t\t\tOR ModelName <> '';\n\nHow many countries produce cars?. \nSELECT  SELECT COUNT(*) FROM car_makers\n\t\t\tWHERE CountryId IS NOT NULL\n\t\t\t\tAND CountryId NOT IN\n\t\t\t\t\t(SELECT ContinentId FROM continents);\n\nHow many models of car are there produced in Europe?. \nSELECT  SELECT COUNT(*) FROM car_makers\n\t\t\tWHERE CountryId IS NOT NULL\n\t\t\t\tAND CountryId NOT IN\n\t\t"}
{"question": "How many models does each car maker produce? List maker full name, id and the number.", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many models does each car maker produce? List maker full name, id and the number.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many models does each car maker produce? List maker full name, id and the number.. \n}
{"question": "What is the full name of each car maker, along with its id and how many models it produces?", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the full name of each car maker, along with its id and how many models it produces?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the full name of each car maker, along with its id and how many models it produces?. \nSELECT  SELECT DISTINCT Continent FROM car_makers;\nSELECT  SELECT DISTINCT Continent FROM car_makers;\nSELECT  SELECT DISTINCT FullName FROM car_makers;\nSELECT  SELECT COUNT(Id) FROM car_makers;\nSELECT  SELECT COUNT(Id) FROM car_makers;\nSELECT  SELECT FullName FROM car_makers;\nSELECT  SELECT COUNT(Id) FROM car_makers;\nSELECT  SELECT FullName FROM car_makers;\nSELECT  SELECT DISTINCT Continent FROM car_makers;\nSELECT  SELECT DISTINCT Continent FROM car_makers;\nSELECT  SELECT DISTINCT FullName FROM car_makers;\nSELECT  SELECT DISTINCT Continent FROM car_makers;\nSELECT  SELECT DISTINCT FullName FROM car_makers;\nSELECT  SELECT COUNT(Id) FROM car_makers;\nSELECT  SELECT DISTINCT Continent FROM car_makers;\nSELECT  SELECT DISTINCT FullName FROM car_makers;\nSELECT  SELECT DISTINCT FullName FROM car_makers;\nSELECT  SELECT DISTINCT Continent FROM car_makers;"}
{"question": "Which model of the car has the minimum horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model of the car has the minimum horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model of the car has the minimum horsepower?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nMakeId, Model, Make, MakeName, ModelName, ModelName, Horsepower, Horsepower\nFROM model_list, car_makers, car_names, cars_data\nWHERE car_makers.Id = model_list.Maker AND\ncar_makers.Id = car_names.Maker AND\ncar_names.Model = cars_data.Model AND\ncar_names.Make = MakeName AND\ncars_data.Horsepower = MIN(cars_data.Horsepower) AND\ncars_data.Horsepower > 0\n\n\n\"\"\"\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nMakeId, Model, Make, MakeName, ModelName, ModelName, Horsepower, Horsepower\nFROM model_list, car_makers, car_names, cars_data\nWHERE car_makers.Id = model_list.Maker AND\ncar_makers.Id = car_names.Maker AND\ncar_names.Model = cars_data.Model AND\ncar_names.Make"}
{"question": "What is the model of the car with the smallest amount of horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the model of the car with the smallest amount of horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the model of the car with the smallest amount of horsepower?. \nSELECT  SELECT (\n    SELECT *\n    FROM cars\n    JOIN model_list m ON cars.MakeId = m.MakeId\n    JOIN model m2 ON m.ModelId = m2.ModelId\n    JOIN car_names cn ON m2.Model = cn.Model\n    JOIN car_makers cmk ON cn.Make = cmk.Id\n    JOIN countries ctry ON cmk.Country = ctry.CountryId\n    WHERE ctry.Continent = \"ASIA\"\n    ORDER BY cn.Model\n    LIMIT 1\n    )\n    AS \"leastHorsepower\"\n    ORDER BY 1\n    LIMIT 1\n    OFFSET 0\n#   COUNT(*) AS \"tally\"\n#   GROUP BY \"leastHorsepower\"\n"}
{"question": "Find the model of the car whose weight is below the average weight.", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the model of the car whose weight is below the average weight.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the model of the car whose weight is below the average weight.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  MakeId,Model,Year,Weight, AVG(Weight) AS Avg_Weight\nFROM  car_names,  car_makers,  car_makers.model_list,  cars_data\nWHERE  car_names.MakeId = car_makers.MakeId\nAND    car_names.Model = car_makers.Model_Name\nAND    car_makers.Maker = car_makers.Model_Name\nAND    car_makers.Model_Name = model_list.Model_Name\nAND    car_makers.Model_Name = cars_data.Model\nAND    car_names.Year = cars_data.Year\nAND    AVG(Weight) < (SELECT  AVG(Weight) \n                     FROM    car_names,  car_makers,  car_makers.model_list,  cars_data\n                     WHERE  car_names.MakeId = car_makers.MakeId\n                       AND    car_names.Model = car_makers.Model"}
{"question": "What is the model for the car with a weight smaller than the average?", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the model for the car with a weight smaller than the average?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the model for the car with a weight smaller than the average?. \nSELECT  SELECT * FROM cars WHERE weight < (SELECT AVG(weight) FROM cars)\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Find the name of the makers that produced some cars in the year of 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the name of the makers that produced some cars in the year of 1970?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the name of the makers that produced some cars in the year of 1970?. \nSELECT  SELECT 'Makers' AS Name,\n    COUNT(cars_data.Maker) AS Count\nFROM    car_names, car_makers, cars, cars_data\nWHERE   car_names.MakeId = car_makers.Id\nAND     cars.ModelId = car_makers.Id\nAND     cars.CarId = cars_data.CarId\nAND     cars_data.Year = 1970\nGROUP BY car_makers.Maker\nHAVING COUNT(cars_data.Maker) > 0\nORDER BY COUNT(cars_data.Maker) DESC;\n\n"}
{"question": "What is the name of the different car makers who produced a car in 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of the different car makers who produced a car in 1970?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of the different car makers who produced a car in 1970?. \n}
{"question": "Find the make and production time of the cars that were produced in the earliest year?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the make and production time of the cars that were produced in the earliest year?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFind the make and production time of the cars that were produced in the earliest year?. \nSELECT  SELECT car_makers.Maker, car_makers.FullName, car_makers.Country, MAX(cars_data.Year)\nFROM car_makers\nJOIN car_names\nON car_makers.Id = car_names.MakeId\nJOIN model_list\nON car_makers.Id = model_list.MakerId\nJOIN car_1.car_makes\nON model_list.ModelId = car_1.car_makes.ModelId\nJOIN car_1.car_models\nON car_1.car_makes.Id = car_models.MakerId\nJOIN car_1.cars_data\nON car_models.Id = car_1.cars_data.ModelId\nWHERE car_makers.Country = 'United States'\nGROUP BY car_makers.Maker, car_makers.FullName, car_makers.Country\nORDER BY car_makers.FullName\n\"\"\"\n\ndef get_car_makers(connection):\n\tcursor = connection.cursor()\n\tcursor.execute(\"select distinct make_name,"}
{"question": "What is the maker of the carr produced in the earliest year and what year was it?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maker of the carr produced in the earliest year and what year was it?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maker of the carr produced in the earliest year and what year was it?. \nSELECT  SELECT ModelId, Maker, Model, Make\nFROM  FROM car_makers\nWHERE WHERE Continent = 'Europe'\nORDER BY  BY CarYear\nLIMIT  LIMIT 1\n# Note that the SELECT keyword indicates that this is a database query, not an application-specific query.\n# This means that this query will work in any application that can access this database.\n#The ORDER BY keyword is used to organize the results of a query.\n#It can be used to sort the results by any column in the table.\n#ORDER BY column_name can be used to sort in ascending order.\n#ORDER BY column_name DESC can be used to sort in descending order.\n#LIMIT is used to restrict the number of records in the query result.\n#In this case, it restricts the query result to only one record.\n#Mostly, it is used in the case where the results of the query are to be displayed on the screen.\n\n# How many of each car does a dealer have in stock?\n# SELECT  SELECT MakeId, Model, Make, ModelId, Maker, Model, MakeId, Maker, Model\n# FROM "}
{"question": "Which distinct car models are the produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich distinct car models are the produced after 1980?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich distinct car models are the produced after 1980?. \nSELECT  SELECT COUNT(*)\nFROM car_makers AS maker JOIN car_names AS model\nWHERE maker.MakeId = model.MakeId AND maker.FullName = 'Honda' AND year < 2014\n\"SELECT maker.FullName FROM car_makers AS maker JOIN car_names AS model\nWHERE maker.MakeId = model.MakeId AND maker.FullName = 'Honda' AND year < 2014\n\"SELECT COUNT(*) FROM car_makers AS maker JOIN car_names AS model\nWHERE maker.MakeId = model.MakeId AND maker.FullName = 'Honda' AND year < 2014\n\"SELECT COUNT(*) FROM car_makers AS maker JOIN car_names AS model\nWHERE maker.MakeId = model.MakeId AND maker.FullName = 'Honda' AND year < 2014\n\"SELECT COUNT(*) FROM car_makers AS maker JOIN car_names AS model\nWHERE maker.MakeId = model.MakeId AND maker.FullName = 'Honda' AND year < 2014\n\"SELECT COUNT(*)"}
{"question": "What are the different models for the cards produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models for the cards produced after 1980?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models for the cards produced after 1980?. \n}
{"question": "How many car makers are there in each continents? List the continent name and the count.", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car makers are there in each continents? List the continent name and the count.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car makers are there in each continents? List the continent name and the count.. \nSELECT  SELECT  Count(CountryId), Continent FROM  COUNT(CountryId) AS Continent\nFROM    countries\nWHERE   CountryId IS NOT NULL\nGROUP   BY Continent\n\n\n\n\n"}
{"question": "What is the name of each continent and how many car makers are there in each one?", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of each continent and how many car makers are there in each one?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of each continent and how many car makers are there in each one?. \nSELECT  SELECT  1, Continent FROM Continent UNION ALL SELECT  SELECT 2, Continent FROM Continent UNION ALL SELECT  SELECT 3, Continent FROM Continent UNION ALL SELECT  SELECT 4, Continent FROM Continent UNION ALL SELECT  SELECT 5, Continent FROM Continent UNION ALL SELECT  SELECT 6, Continent FROM Continent UNION ALL SELECT  SELECT 7, Continent FROM Continent UNION ALL SELECT  SELECT 8, Continent FROM Continent UNION ALL SELECT  SELECT 9, Continent FROM Continent UNION ALL SELECT  SELECT 10, Continent FROM Continent\nWhat is the name of each country and how many car makers are there in each one?. \nSELECT  SELECT  1, Country FROM Country UNION ALL SELECT  SELECT 2, Country FROM Country UNION ALL SELECT  SELECT 3, Country FROM Country UNION ALL SELECT  SELECT 4, Country FROM Country UNION ALL SELECT  SELECT 5, Country FROM Country UNION ALL SELECT  SELECT 6, Country FROM Country UNION ALL SELECT  SELECT 7, Country FROM Country UNION ALL SELECT  SELECT 8, Country FROM Country UNION ALL SELECT  SELECT 9, Country FROM Country UNION ALL SELECT  SELECT 10, Country FROM"}
{"question": "Which of the countries has the most car makers? List the country name.", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich of the countries has the most car makers? List the country name.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich of the countries has the most car makers? List the country name.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nContId, COUNT(ModelId) AS CountOfModelId, Continent,  FROM car_makers, \nGROUP BY ContId \nORDER BY CountOfModelId DESC \n\nIn which country are the most cars made? List the country name.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nCountry, COUNT(Id) AS CountOfId, FROM car_makers, \nGROUP BY Country \nORDER BY CountOfId DESC \n\nIn which country are the most cars sold? List the country name.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nCountry, COUNT(Id) AS CountOfId, FROM model_list, \nWHERE ModelId = car_names.MakeId, \nGROUP BY Country \nORDER BY CountOfId DESC \n\nWhat car maker has the most models? List the maker name.. \nSELECT  SELECT  SELECT  SELECT "}
{"question": "What is the name of the country with the most car makers?", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of the country with the most car makers?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the name of the country with the most car makers?. \nSELECT  SELECT COUNT(MakeId) AS number, Continent\nFROM   model_list\nGROUP BY Continent\nORDER BY number DESC;\n\n# Which country has the most car makers?\nSELECT  MakeId, CountryName\nFROM    model_list\nGROUP BY CountryName;\n\n# Which country has the most cars?\nSELECT  Continent, SUM(MPG) AS MPGsum\nFROM    car_names\nGROUP BY Continent;\n\n# Which country has the most cars per person?\nSELECT  CountryName, COUNT(ContId) AS cars_count, COUNT(ContId)/COUNT(Id) AS cars_count_per_person\nFROM    car_names\nGROUP BY CountryName;\n\n# Which country has the most cars?\nSELECT  Continent, SUM(Cylinders), SUM(Displacement)\nFROM    car_names\nGROUP BY Continent;\n\n# Which car has the most horsepower?\nSELECT  CarName, MAX(Horsepower)\nFROM    car_names\nGROUP BY CarName;\n\n# Which car has the most horsepower per dollar?\nSELECT  CarName, Horsepower, CURRENT"}
{"question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models are produced by each maker ? Only list the count and the maker full name .. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models are produced by each maker ? Only list the count and the maker full name .. \nSELECT  SELECT Continent, Maker, Count(*) AS Cnt FROM car_makers GROUP BY Maker;\n\nWhat is the highest MPG for each car ? \nSELECT car_1.Model, MAX(car_1.MPG) AS Max_MPG FROM car_1 GROUP BY car_1.Model;\n\nWhat is the most popular car ?\nSELECT car_1.Model, Count(*) AS Cnt FROM car_1 GROUP BY car_1.Model ORDER BY Cnt DESC LIMIT 1;\n\nWhat is the least popular car ?\nSELECT car_1.Model, Count(*) AS Cnt FROM car_1 GROUP BY car_1.Model ORDER BY Cnt ASC LIMIT 1;\n\nWhat is the average (AVG) MPG for each model ?\nSELECT car_1.Model, AVG(car_1.MPG) AS Avg_MPG FROM car_1 GROUP BY car_1.Model;\n\nWhat is the most fuel efficient car in each country ?\nSELECT car_1.Make, car_1.Model, MIN(car_1.MPG) AS Min_MPG FROM car_1 JOIN country_1 ON car"}
{"question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of car models that are produced by each maker and what is the id and full name of each maker?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of car models that are produced by each maker and what is the id and full name of each maker?. \nSELECT  SELECT MakerId, FullName FROM CarMakers WHERE ContinentId=2;\nSELECT  SELECT MakerId, FullName FROM CarMakers WHERE ContinentId=4;\nWhat is the list of models for each car maker?. \nSELECT  SELECT MakeId, Model FROM CarModels WHERE ContinentId=2;\nSELECT  SELECT MakeId, Model FROM CarModels WHERE ContinentId=4;\nWhat are the id and full name of the cars that are produced by a maker?. \nSELECT  SELECT ModelId, MakeId, FullName FROM CarNames WHERE ContinentId=2;\nSELECT  SELECT ModelId, MakeId, FullName FROM CarNames WHERE ContinentId=4;\nWhat are the id and full name of cars that are produced by a maker?. \nSELECT  SELECT ModelId, MakeId, FullName FROM CarNames WHERE ContinentId=2;\nSELECT  SELECT ModelId, MakeId, FullName FROM CarNames WHERE ContinentId=4;\nWhat is the list of cars that are produced by each maker?. \nSELECT  SELECT ModelId, MakeId, FullName FROM CarNames WHERE ContinentId=2;\nSELECT "}
{"question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the accelerate of the car make amc hornet sportabout (sw)?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the accelerate of the car make amc hornet sportabout (sw)?. \nSELECT  SELECT Accelerate FROM Car WHERE Name='amc hornet sportabout (sw)'\nWhat is the Horsepower of the car make isuzu amigo?\nSELECT  SELECT Horsepower FROM Car WHERE Name='isuzu amigo'\n\n###Todo:\n#1.Change the column names as necessary.\n#2.Add cars, models, makes that you are interested in.\n#3.Create car_list.csv file from the Car_1 database.\n#4.Read the car_list.csv file into a dictionary:\n#     dict_car_list = {}\n#5.Create a function that finds the Car_1 database rows that match the country\n#    in the dict_car_list.csv file.\n#6.Create a function that finds the Car_1 database rows that match the car make\n#    in the dict_car_list.csv file.\n#7.Create a function that finds the Car_1 database rows that match the model\n#    in the dict_car_list.csv file.\n#8.Create a function that finds the Car_1 database rows that match the MPG of\n#    the car"}
{"question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow much does the car accelerate that makes amc hornet sportabout (sw)?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow much does the car accelerate that makes amc hornet sportabout (sw)?. \nSELECT  SELECT Make, 0, Model\nFROM car_makers, model_list, car_names, cars_data\nWHERE Make = \"AMC\" AND Model = \"Hornet Sportabout (SW)\" AND Make = 'AMC' AND Model = \"Hornet Sportabout (SW)\"\n\n### MySQL MYSQL database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow much does the car accelerate that makes amc hornet sportabout (sw)?. \nSELECT Make, 0, Model\nFROM car_makers, model_list, car_names, cars_data\nWHERE Make = \"AMC\" AND Model = \"Hornet Sport"}
{"question": "How many car makers are there in france?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car makers are there in france?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car makers are there in france?. \nSELECT  SELECT COUNT(*)\nFROM    SELECT * FROM car_makers\nWHERE   \"Country\"=\"FRANCE\"\n\nHow many car makers are there in france?. \nSELECT  SELECT COUNT(*)\nFROM    SELECT * FROM car_makers\nWHERE   \"Country\"=\"FRANCE\"\n\nHow many car makers are there in france?. \nSELECT  SELECT COUNT(*)\nFROM    SELECT * FROM car_makers\nWHERE   \"Country\"=\"FRANCE\"\n\nHow many car makers are there in france?. \nSELECT  SELECT COUNT(*)\nFROM    SELECT * FROM car_makers\nWHERE   \"Country\"=\"FRANCE\"\n\nHow many cars are there in france?. \nSELECT  SELECT COUNT(*)\nFROM    SELECT * FROM car_names\nWHERE   \"Country\"=\"FRANCE\"\n\nHow many cars are there in france?. \nSELECT  SELECT COUNT(*)\nFROM    SELECT * FROM car_names\nWHERE   \"Country\"=\"FRANCE\"\n\nHow many cars are there in france?. \nSELECT  SELECT COUNT(*)\nFROM    SELECT * FROM car_names\nWHERE   \"Country\"=\"FRANCE\"\n\nHow"}
{"question": "What is the number of makers of care in France?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of makers of care in France?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of makers of care in France?. \nSELECT  SELECT count(Maker) FROM car_makers where Country='France'\n#=> \"2\"\n\nWhat is the number of makers of care in Germany?. \nSELECT  SELECT count(Maker) FROM car_makers where Country='Germany'\n#=> \"3\"\n\nWhat is the number of car_makers?. \nSELECT  SELECT count(Maker) FROM car_makers\n#=> \"22\"\n\nWhat is the number of car models?. \nSELECT  SELECT count(Model) FROM car_makers\n#=> \"252\"\n\nWhat is the number of car models in France?. \nSELECT  SELECT count(Model) FROM car_makers where Country='France'\n#=> \"75\"\n\nWhat is the number of car models in Germany?. \nSELECT  SELECT count(Model) FROM car_makers where Country='Germany'\n#=> \"35\"\n\nWhat is the number of models of the car with engine size greater than or equal to 2000 cc?. \nSELECT  SELECT count(Model) FROM car_makers where EngineSize >= 2000"}
{"question": "How many car models are produced in the usa?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models are produced in the usa?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models are produced in the usa?. \nSELECT  SELECT\n    COUNT(C.ID)\nFROM\n    car_makers C\nWHERE\n    C.CountryId = 4\nORDER BY\n    C.Id\n\n\n\n"}
{"question": "What is the count of the car models produced in the United States?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the count of the car models produced in the United States?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the count of the car models produced in the United States?. \nSELECT  SELECT id,\n        make,\n        count(*) as count\n        FROM car_makers\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_makers.id = car_names.make\n        JOIN car_names ON car_"}
{"question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average miles per gallon(mpg) of the cars with 4 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average miles per gallon(mpg) of the cars with 4 cylinders?. \nSELECT  SELECT car_makers.makes.mpg  WHERE  car_makers.makes.cylinders = 4;\nWhat is the average miles per gallon(mpg) of the cars with more than 100 horsepower?. \nSELECT car_makers.makes.mpg  WHERE car_makers.makes.horsepower > 100;\nWhat is the average miles per gallon(mpg) of the cars with 4 cylinders and 150 horsepower?. \nSELECT car_makers.makes.mpg  WHERE car_makers.makes.cylinders = 4 AND car_makers.makes.horsepower = 150;\nWhat is the average miles per gallon(mpg) of the cars made by the \"Ford\" company?. \nSELECT car_makers.makes.mpg  WHERE car_makers.makes.makes = \"Ford\";\nWhat is the average miles per gallon(mpg) of the cars made by the \"Toyota\" company?. \nSELECT car_makers.makes"}
{"question": "What is the average miles per gallon of all the cards with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average miles per gallon of all the cards with 4 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average miles per gallon of all the cards with 4 cylinders?. \nSELECT  SELECT car_makers.Maker, AVG(cars_data.MPG) AS AvgMPG\nFROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Maker\nWHERE (cars_data.Cylinders = 4)\nGROUP BY car_makers.Maker\nORDER BY car_makers.Maker\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the smallest weight of the car produced with 8 cylinders on 1974 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the smallest weight of the car produced with 8 cylinders on 1974 ?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM\ncountries, model_list, car_makers, cars_data, \nWHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE\ncountry_id = \"1\" \nAND     AND     AND     AND     AND     AND     AND     AND\ncar_maker_id = \"1\" \nAND     AND     AND     AND     AND     AND     AND     AND\nmodel_id = \"20\"\nAND     AND     AND     AND     AND     AND     AND     AND\nmake_id = \"1\"\nAND     AND     AND     AND     AND     AND     AND     AND\ncar_id = \"50\"\nAND     AND     AND     AND     AND     AND     AND     AND\nyear = 1974\nAND     AND     AND     AND     AND     AND     AND     AND\ncylinders = \"8\"\nORDER    ORDER    ORDER    ORDER    ORDER    ORDER    ORDER    ORDER\nBY     BY     BY     BY     BY     BY     BY    "}
{"question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the minimum weight of the car with 8 cylinders produced in 1974 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the minimum weight of the car with 8 cylinders produced in 1974 ?. \nSELECT  SELECT car_makers.Maker,\n          car_makers.FullName,\n          car_makers.Country\n        FROM car_makers\n        WHERE car_makers.Country = 'US'\n        ORDER BY car_makers.Country;\n#cylinders > 8\n#country = 'US'\n#year = 1974\n\n\n\n\n"}
{"question": "What are all the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are all the makers and models?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are all the makers and models?. \nSELECT  SELECT count(1), \"Continent\", \"CountryName\", \"FullName\" FROM \ncontinents, \ncountries,\ncar_makers,\nmodel_list,\ncar_names,\ncars_data\nWHERE  car_makers.Country = countries.CountryName\nAND  car_makers.Continent = continents.ContId\nAND  model_list.MakeId = car_makers.Id\nAND  model_list.Model = car_names.Model\nAND  car_names.MakeId = car_makers.Id\nAND  car_makers.Id = car_names.Maker\nAND  car_names.Model = cars_data.Model;\n"}
{"question": "What are the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the makers and models?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the makers and models?. \nSELECT  SELECT  'Select', 'SELECT',\n         ' '   , ' '\nFROM     FROM     car_makers   ;\nSELECT  SELECT  'Select', 'SELECT',\n         ' '   , ' '\nFROM     FROM     car_models   ;\nSELECT  SELECT  'Select', 'SELECT',\n         ' '   , ' '\nFROM     FROM     model_list   ;\nSELECT  SELECT  'Select', 'SELECT',\n         ' '   , ' '\nFROM     FROM     car_names   ;\nSELECT  SELECT  'Select', 'SELECT',\n         ' '   , ' '\nFROM     FROM     cars_data   ;\n```\n\n## Python\n\n```\nimport sqlite3\nconn = sqlite3.connect('car.db')\nc=conn.cursor()\nc.execute('''CREATE TABLE car_makers (Id INTEGER PRIMARY KEY, FullName TEXT)''')\nc.execute('''CREATE TABLE car_models (Id INTEGER PRIMARY KEY, MakeId INTEGER, Model TEXT,\n                                     FOREIGN KEY (MakeId) REFERENCES car_makers (Id))''')"}
{"question": "What are the countries having at least one car maker? List name and id.", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the countries having at least one car maker? List name and id.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the countries having at least one car maker? List name and id.. \nSELECT  SELECT CONTINENTS.Name AS continent_name FROM CONTINENTS WHERE EXISTS (SELECT 1 FROM COUNTRIES INNER JOIN MODEL_LIST ON COUNTRIES.CountryId = MODEL_LIST.CountryId WHERE MODEL_LIST.MakerId = CAR_MAKERS.Id) ; \n\nselect c.name\nfrom countries c, model_list ml, car_makers cmm\nwhere ml.makerid = cmm.id and ml.continentid = c.id\n\nWhat are the names of all the countries? \nSELECT CONTINENTS.Name AS continent_name FROM CONTINENTS WHERE EXISTS (SELECT 1 FROM COUNTRIES WHERE EXISTS (SELECT 1 FROM MODEL_LIST WHERE EXISTS (SELECT 1 FROM CAR_MAKERS WHERE CAR_MAKERS.Id = MODEL_LIST.MakerId))) ; \n\nselect c.name\nfrom countries c\njoin model_list ml\non ml.countryid = c.id\n\nHow many car makers are there? \nSELECT COUNT(cmm.Id) AS mak"}
{"question": "What are the names and ids of all countries with at least one car maker?", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names and ids of all countries with at least one car maker?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names and ids of all countries with at least one car maker?. \nSELECT  SELECT Countries.CountryId FROM Countries, CarMakers\nWHERE CarMakers.CountryId = Countries.CountryId\nAND Countries.ContinentId = '3';\n#select Countries.CountryId FROM Countries, CarMakers WHERE CarMakers.CountryId = Countries.CountryId AND Countries.ContinentId = '3';\n#select Countries.CountryId FROM Countries, CarMakers WHERE CarMakers.CountryId = Countries.CountryId AND Countries.ContinentId = '3';\n#SELECT CarMakers.Country FROM CarMakers, Countries WHERE CarMakers.CountryId = Countries.CountryId AND Countries.ContinentId = '3';\nSELECT Countries.CountryId, Countries.CountryName FROM Countries, CarMakers WHERE CarMakers.CountryId = Countries.CountryId AND Countries.ContinentId = '3';\n#SELECT Countries.CountryId, Countries.CountryName FROM Countries, CarMakers WHERE CarMakers.CountryId = Countries.CountryId AND Countries.ContinentId = '3';\nSELECT CarMakers.Country FROM CarMakers,"}
{"question": "What is the number of the cars with horsepower more than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of the cars with horsepower more than 150?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of the cars with horsepower more than 150?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM    FROM    FROM\ncars_data  cars_data  cars_data  cars_data  cars_data  cars_data\nWHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE\nhorsepower > 150;\n*/\n\n#import org.sqlite.SQLite;\n#import org.sqlite.SQLiteDataSource;\n#import org.sqlite.SQLiteException;\n\n#import org.sqlite.SQLiteFactory;\n#import org.sqlite.SQLiteOpenHelper;\n\n#import java.io.File;\n#import java.io.FileInputStream;\n#import java.io.FileNotFoundException;\n#import java.io.InputStream;\n\n#import java.io.PrintStream;\n\n#import java.io.InputStream;\n\n#import org.sqlite.SQLiteDatabase;\n#import org.sqlite.SQLiteStatement;\n#import org.sqlite.SQLiteQueryBuilder;\n#import org.sqlite.SQLiteQueryBuilder;\n\n#import org.sqlite.SQLite;\n#import org."}
{"question": "What is the number of cars with a horsepower greater than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with a horsepower greater than 150?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with a horsepower greater than 150?. \nSELECT  SELECT CarMaker.FullName || ' ' || CarModel.Model AS car_model, COUNT(*) AS count_of_cars\nFROM CarModel\nJOIN CarMaker\nON CarMaker.Id = CarModel.Maker\nJOIN Car\nON CarModel.Id = Car.Model\nWHERE Car.Horsepower > 150\nGROUP BY CarModel.Model\nORDER BY count_of_cars DESC;\n\n### [db]\nselect * from car_1 order by make, model;\n\n\n\n\n\n\n\n"}
{"question": "What is the average weight of cars each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average weight of cars each year?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average weight of cars each year?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    sum(weight)                            sum(weight)\nFROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM\n    car_1                                 car_1                                \nWHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE\n    Year < 2000                           Year < 2000                          \n    OR      OR      OR      OR      OR      OR      OR      OR\n    Year > 2008                           Year > 2008                          \n    OR      OR      OR      OR      OR      OR      OR      OR\n    Country = 'US'                        Country = 'US'                       \nGROUP   GROUP   GROUP   GROUP   GROUP   GROUP   GROUP   GROUP\n    BY     BY     BY     BY     BY     BY     BY     BY     BY\n    Year     Year     Year     Year     Year     Year     Year\nORDER   ORDER   ORDER   ORDER   ORDER   ORDER   ORDER   ORDER\n    BY     BY     BY     BY     BY     BY     BY     BY     BY\n    Year     Year     Year     Year"}
{"question": "What is the average weight and year for each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average weight and year for each year?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average weight and year for each year?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  MIN(weight) AS minweight, MIN(year) AS minyear,\n  MAX(weight) AS maxweight, MAX(year) AS maxyear\n  FROM cars_data\n  GROUP BY year;\n"}
{"question": "Which countries in europe have at least 3 car manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich countries in europe have at least 3 car manufacturers?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich countries in europe have at least 3 car manufacturers?. \nSELECT  SELECT COUNT(*) AS num\nFROM    SELECT COUNT(DISTINCT Country) AS num\nFROM    model_list\nJOIN    cars_data ON cars_data.MakeId = model_list.Maker AND cars_data.Year = 1980\nJOIN    country ON country.Id = model_list.Country\nWHERE   country.Continent = 'Europe';\n"}
{"question": "What are the names of all European countries with at least 3 manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names of all European countries with at least 3 manufacturers?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names of all European countries with at least 3 manufacturers?. \nSELECT  SELECT  CountryName FROM countries\nWHERE CountryName LIKE '%[A-Za-z]%'\nAND  AND  Continent = 'Europe'\nAND  AND  Continent = 'Europe'\nAND  AND  CountryName NOT LIKE '[%]%'\nORDER  ORDER  BY CountryName\nLIMIT  LIMIT 10;\n# Which is the highest MPG rating of a 2001 Toyota? \nSELECT  SELECT  MAX(Mpg) FROM cars_data\nWHERE  WHERE  MakeId = '1002'\nAND  AND  ModelId = '2'\nAND  AND  Year = '2001'\nLIMIT  LIMIT  1;\n# How many cars were sold in the world last year? \nSELECT  SELECT  COUNT(Id) FROM cars_data\nWHERE  WHERE  Year = '2015'\nLIMIT  LIMIT  1;\n# Which are the most popular cars in the USA? \nSELECT  SELECT  CountryId, Continent, MakerId, MakeName, MAX(Sold) AS Sold\nFROM  FROM  model_list\nJOIN  JOIN  cars_data"}
{"question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum horsepower and the make of the car models with 3 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum horsepower and the make of the car models with 3 cylinders?. \nSELECT  SELECT make, max(hors) FROM car_1 GROUP BY make;\n# 2014-10-07 11:16:55.242  INFO 18090 --- [ost-startStop-1] org.apache.solr.client.solrj.impl.HttpSolrClient  : Solr returned: \n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":11,\n    \"params\":{\n      \"q\":\"{!lucene v=1.5}id:24146,24147,24148,24149,24150,24151,24152,24153,24154,24155,24156,24157,24158,24159,24160,24161,24162,24163,24164,24165,241"}
{"question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the largest amount of horsepower for the models with 3 cylinders and what make is it?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the largest amount of horsepower for the models with 3 cylinders and what make is it?. \nSELECT  SELECT  'Horsepower',\n        (SELECT  (SELECT  count(*)\n                   FROM  car_names\n                   WHERE  car_names.MakeId = car_makers.Id\n                         AND car_names.Model = model_list.Model)\n                 FROM  car_makers\n                 WHERE  car_makers.Cylinders = 3)\nFROM    car_makers\nWHERE  car_makers.Cylinders = 3;\n\n#############################################\n\n\"\"\"\n\nimport sqlite3\n\n# Connect to SQLite database\nconn = sqlite3.connect('car_1.db')\nc = conn.cursor()\n\n# SELECT  SELECT  'Horsepower',\n#        (SELECT  (SELECT  count(*)\n#                   FROM  car_names\n#                   WHERE  car_names.MakeId = car_makers.Id\n#                         AND car_names.Model = model_list.Model)\n#                 FROM  car_makers\n#                 WHERE  car_makers.Cylinders = 3)\n#FROM    car_makers\n#WHERE"}
{"question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model saves the most gasoline? That is to say, have the maximum miles per gallon.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model saves the most gasoline? That is to say, have the maximum miles per gallon.. \nSELECT  SELECT car_makers.Maker, COUNT(*) \nFROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId\nGROUP BY car_makers.Maker\nHAVING COUNT(*) > 2\nORDER BY COUNT(*) DESC\n"}
{"question": "What is the car model with the highest mpg ?", "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the car model with the highest mpg ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the car model with the highest mpg ?. \nSELECT  SELECT  Maker, Model, SUM(mpg)\nFROM    model_list m INNER JOIN car_makers c\nON      c.Id = m.Maker\nWHERE   c.Country = 'Germany'\nGROUP BY m.Model;\n\n\n#What is the car model with the highest weight ?. \nSELECT  SELECT  Make, Model, MAX(Weight)\nFROM    model_list m INNER JOIN car_makers c\nON      c.Id = m.Maker\nWHERE   c.Country = 'Germany'\nGROUP BY m.Model;\n\n\n#What is the year of the car model with the highest horsepower ?. \nSELECT  SELECT  Make, Model, MAX(Horsepower)\nFROM    model_list m INNER JOIN car_makers c\nON      c.Id = m.Maker\nWHERE   c.Country = 'Germany'\nGROUP BY m.Model;\n\n\n#What is the name of the car model with the highest year ?. \nSELECT  SELECT  Maker, Model,\nMAX(\n    CASE WHEN Accelerate = 0 THEN 1 ELSE 0 END"}
{"question": "What is the average horsepower of the cars before 1980?", "sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average horsepower of the cars before 1980?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average horsepower of the cars before 1980?. \nSELECT  SELECT  AVG(Horsepower) FROM  car_1\nWHERE  Year < 1980; \n\n#get the top 2 cars by horsepower.\nSELECT  SELECT  MakeId, Model, Horsepower \nFROM    car_1 \nWHERE  Horsepower \nIN    (SELECT  SELECT  MAX(Horsepower), \n                    MakeId \n      FROM    car_1 \n      GROUP   BY MakeId); \n\n#Find cars with horsepower over 300 and year 2010 or later.\nSELECT  SELECT  MakeId, Model, Horsepower \nFROM    car_1 \nWHERE  (Horsepower > 300 OR Year > 2010) \nAND  (Horsepower > 300 AND Year > 2010)\nGROUP   BY MakeId, Model; \n\n\n#find cars with year over 2010.\nSELECT  SELECT  Year \nFROM    car_1 \nWHERE  Year > 2010; \n\n#find car that has horsepower 120 or"}
{"question": "What is the average horsepower for all cars produced before 1980 ?", "sql": "select avg(horsepower) from cars_data where year  <  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average horsepower for all cars produced before 1980 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average horsepower for all cars produced before 1980 ?. \nSELECT  SELECT AVG(Horsepower) FROM car_makers, car_names, car_1 WHERE car_makers.Maker = car_names.Maker AND car_1.MakeId = car_names.Maker AND Year < 1980\n\n##Python\nimport sqlite3\n\ndef find_average_horsepower(database):\n    car_makers, car_names, car_1 = database\n    for row in car_makers.execute('SELECT MakeId FROM car_makers WHERE MakeName = ?', ('Ford',)):\n        print row\n\n        for row in car_names.execute('SELECT Model FROM car_names WHERE MakeId = ?', row[0]):\n            print row\n\n            for row in car_1.execute('SELECT AVG(Horsepower) FROM car_1 WHERE Year < 1980'):\n                print row\n\n#Python\nimport sqlite3\n\nconn = sqlite3.connect('cars.db')\n\ndef find_average_horsepower(database):\n    car_makers, car_names, car_1 = database\n    for row"}
{"question": "What is the average edispl of the cars of model volvo?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average edispl of the cars of model volvo?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average edispl of the cars of model volvo?. \nSELECT  SELECT AVG(Edispl) FROM car_1 WHERE Model='Volvo';\n#car_1#\n###############################################################################\n#                                                                             #\n#     The text in this book is free for non-commercial use only.  The        #\n#     code is available under the same terms as Perl itself.  Commercial     #\n#     use requires a license from O'Reilly.  See the PERL5KLTN.TXT file       #\n#     for details.                                                            #\n#                                                                             #\n###############################################################################\n#   Revision History:\n#    1.1   - 9/21/03 - fixed typo in Note: for in SELECT\n#\n###############################################################################\n\nuse strict;\n\nuse feature qw(say);\n\nprint \"SELECT  SELECT AVG(Edispl) FROM car_1 WHERE Model='Volvo';\\n\";\n\nmy $car_1 = {\n    'countries' => {\n        'CountryId' => {\n            'CountryName' =>"}
{"question": "What is the average edispl for all volvos?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average edispl for all volvos?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the average edispl for all volvos?. \nSELECT  SELECT AVG(edispl) FROM car_1 WHERE Maker = 'Volvo';\n\nWhat is the number of distinct cars in the car_1 database?. \nSELECT  SELECT COUNT(DISTINCT(Id)) FROM car_1;\n\nWhat is the highest value of edispl for all cars?. \nSELECT  SELECT MAX(edispl) FROM car_1;\n\nWhat is the lowest value of edispl for all cars?. \nSELECT  SELECT MIN(edispl) FROM car_1;\n\nWhat is the highest value of acceleration for all cars?. \nSELECT  SELECT MAX(Accelerate) FROM car_1;\n\nWhat is the lowest value of acceleration for all cars?. \nSELECT  SELECT MIN(Accelerate) FROM car_1;\n\nWhat is the highest value of weight for all cars?. \nSELECT  SELECT MAX(Weight) FROM car_1;\n\nWhat is the lowest value of weight for all cars?. \nSELECT  SELECT MIN(Weight) FROM car_1;\n\nWhat is the highest value of horsepower for all cars?. \nSELECT  SELECT MAX(Horsepower) FROM"}
{"question": "What is the maximum accelerate for different number of cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum accelerate for different number of cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum accelerate for different number of cylinders?. \nSELECT  SELECT * FROM cars_data WHERE Cylinders <= 10 ORDER BY Cylinders;\nSELECT  SELECT * FROM cars_data WHERE Cylinders > 10 ORDER BY Cylinders;\nSELECT  SELECT * FROM cars_data WHERE Cylinders >= 10 ORDER BY Cylinders;\n#\n"}
{"question": "What is the maximum accelerate for all the different cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum accelerate for all the different cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum accelerate for all the different cylinders?. \nSELECT  SELECT Max(Cylinders)\nFROM cars_data;\nSELECT  SELECT Max(Weight)\nFROM cars_data;\nSELECT  SELECT Max(Horsepower)\nFROM cars_data;\nSELECT  SELECT Max(Accelerate)\nFROM cars_data;\n"}
{"question": "Which model has the most version(make) of cars?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model has the most version(make) of cars?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich model has the most version(make) of cars?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\ncars_data.MakeId, COUNT(cars_data.MakeId) AS no_of_cars\nFROM car_makers\nJOIN cars_data\nON car_makers.Id = cars_data.Maker\nGROUP BY car_makers.Id\nORDER BY cars_data.MakeId DESC\n"}
{"question": "What model has the most different versions?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat model has the most different versions?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat model has the most different versions?. \n}
{"question": "How many cars have more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars have more than 4 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars have more than 4 cylinders?. \nSELECT  SELECT * FROM car_makers WHERE Countries = 'United States';\nSELECT * FROM car_makers WHERE Countries = 'United States'\n\nSELECT  SELECT * FROM car_makers WHERE Countries = 'United States' AND Maker = 'Toyota';\nSELECT * FROM car_makers WHERE Countries = 'United States' AND Maker = 'Toyota'\n\nSELECT  SELECT * FROM car_makers WHERE Countries = 'United States' AND Maker = 'Toyota' AND Cylinders > 4;\nSELECT * FROM car_makers WHERE Countries = 'United States' AND Maker = 'Toyota' AND Cylinders > 4\n\nSELECT  SELECT * FROM car_makers WHERE Countries = 'United States' AND Maker = 'Toyota' AND Cylinders > 4 AND Horsepower < 150;\nSELECT * FROM car_makers WHERE Countries = 'United States' AND Maker = 'Toyota' AND Cylinders > 4 AND Horsepower < 150\n\nSELECT  SELECT * FROM"}
{"question": "What is the number of cars with more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with more than 4 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with more than 4 cylinders?. \nSELECT  SELECT COUNT(*) FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN model_list ON car_makers.id = model_list.makeid WHERE edispl < 1000;\nSELECT  SELECT COUNT(*) FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN model_list ON car_makers.id = model_list.makeid WHERE edispl < 1000 AND cylinders > 4;\nSELECT  SELECT COUNT(*) FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN model_list ON car_makers.id = model_list.makeid WHERE edispl < 1000 AND cylinders > 4 AND weight < 1000;\n"}
{"question": "how many cars were produced in 1980?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nhow many cars were produced in 1980?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nhow many cars were produced in 1980?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT"}
{"question": "In 1980, how many cars were made?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nIn 1980, how many cars were made?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nIn 1980, how many cars were made?. \n}
{"question": "How many car models were produced by the maker with full name American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models were produced by the maker with full name American Motor Company?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many car models were produced by the maker with full name American Motor Company?. \nSELECT  SELECT COUNT(fullName) FROM car_makers WHERE fullName = 'American Motor Company'\n\nHow many car models were produced by the maker with full name Buick?. \nSELECT  SELECT COUNT(fullName) FROM car_makers WHERE fullName = 'Buick'\n\nHow many car models were produced by the maker with full name Chevrolet?. \nSELECT  SELECT COUNT(fullName) FROM car_makers WHERE fullName = 'Chevrolet'\n\nHow many car models were produced by the maker with full name Cadillac?. \nSELECT  SELECT COUNT(fullName) FROM car_makers WHERE fullName = 'Cadillac'\n\nHow many car models were produced by the maker with full name Chrysler?. \nSELECT  SELECT COUNT(fullName) FROM car_makers WHERE fullName = 'Chrysler'\n\nHow many car models were produced by the maker with full name Dodge?. \nSELECT  SELECT COUNT(fullName) FROM car_makers WHERE fullName = 'Dodge'\n\nHow many car models were produced by the maker with full name Ford?. \nSELECT  SELECT COUNT"}
{"question": "What is the number of car models created by the car maker American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of car models created by the car maker American Motor Company?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of car models created by the car maker American Motor Company?. \nSELECT  SELECT car_makers.Maker, COUNT(car_makers.Model) AS TotalModels \nFROM    car_makers INNER JOIN car_names ON car_makers.Maker = car_names.Make \nWHERE   car_makers.Maker = 'American Motor Company'\nGROUP BY car_makers.Maker\nORDER BY car_makers.Maker;\n\n# What is the number of cars by car maker Ford? \nSELECT  SELECT car_makers.Maker, COUNT(car_makers.Model) AS TotalModels \nFROM    car_makers INNER JOIN car_names ON car_makers.Maker = car_names.Make \nWHERE   car_makers.Maker = 'Ford' \nGROUP BY car_makers.Maker\nORDER BY car_makers.Maker;\n\n# What is the number of cars with 4 cylinders and a fuel economy of less than 20 miles per gallon, by year?. \nSELECT  SELECT car_makers.Maker, COUNT(car_makers.Model) AS TotalModels \nFROM    car_makers"}
{"question": "Which makers designed more than 3 car models? List full name and the id.", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich makers designed more than 3 car models? List full name and the id.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich makers designed more than 3 car models? List full name and the id.. \nSELECT  SELECT  id,  fullname  from  car_makers  WHERE  makeid IN  (\n SELECT  SELECT  id  from  car_makers  WHERE  maker  IN  (\n SELECT  SELECT  maker  from  car_makers  GROUP BY  maker  HAVING  COUNT(id) > 3 \n )\n );\n\n## TODO:\n# Which makers design cars with most MPG?\n# What are the countries who produces the most cars?\n# Which countries have most models?\n# Which country has the best designed cars?\n# Which continent has most cars?\n# How many cars is produced by each continent?\n# How many countries are in each continent?\n# Which year has the highest MPG?\n# How many countries has 1 model?\n# How many car models are in a country?\n# How many cars has each country?\n\n## TODO:\n\n\n\n"}
{"question": "What are the names and ids of all makers with more than 3 models?", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names and ids of all makers with more than 3 models?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names and ids of all makers with more than 3 models?. \nSELECT  SELECT_DATABASE('car_1'),\n        COUNT(*) AS id,\n        MAKER AS name\nFROM car_makers\nWHERE COUNT(ID) > 3\nGROUP BY name\nORDER BY id DESC;\n"}
{"question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich distinctive models are produced by maker with the full name General Motors or weighing more than 3500?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich distinctive models are produced by maker with the full name General Motors or weighing more than 3500?. \nSELECT  SELECT  FROM  FROM  FROM  FROM  FROM  WHERE\n#car_makers('Id', 'Maker', 'FullName', 'Country')\ncar_makers('Id', 'Maker', 'FullName', 'Country')\n#car_names('MakeId', 'Model', 'Make')\ncar_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\ncars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE\ncars_data('Weight', '>', '3500')\ncars_data('Country', 'IN', 'United States', 'Canada', 'Mexico')\ncars_data('MakeId', 'IN', 'GM', 'Toyota')\ncars_data('MakeId', 'IN', 'GM', 'Toyota')\n"}
{"question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models created by either the car maker General Motors or weighed more than 3500?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models created by either the car maker General Motors or weighed more than 3500?. \nSELECT  SELECT car_makers.Maker, SUM(car_makers.Id) AS Cnt\nFROM car_makers \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId\nINNER JOIN cars_data ON car_names.Model = cars_data.Model\nWHERE (car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500)\nGROUP BY car_makers.Maker\nHAVING Cnt > 1\nORDER BY car_makers.Maker\n\"\"\"\n\n\ndef test_query_by_countries():\n    \"\"\"\n    Find the total number of cars by country.\n    \"\"\"\n    countries_query = \"SELECT count(car_makers.Id) AS TotalCars FROM car_makers \" \\\n                      \"JOIN car_names ON car_makers.Id = car_names.MakeId \" \\\n                      \"JOIN cars_data ON car_names.Model = cars_data.Model \" \\\n                      \"WHERE car_names.CountryName IN ('China', 'United States')\""}
{"question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nIn which years cars were produced weighing no less than 3000 and no more than 4000 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nIn which years cars were produced weighing no less than 3000 and no more than 4000 ?. \nSELECT  SELECT car_makers.Id AS car_makers_Id,\n            car_makers.Maker AS car_makers_Maker,\n            car_makers.FullName AS car_makers_FullName,\n            cars_data.Id AS cars_data_Id,\n            cars_data.MPG AS cars_data_MPG,\n            cars_data.Cylinders AS cars_data_Cylinders,\n            cars_data.Edispl AS cars_data_Edispl,\n            cars_data.Horsepower AS cars_data_Horsepower,\n            cars_data.Weight AS cars_data_Weight,\n            cars_data.Accelerate AS cars_data_Accelerate,\n            cars_data.Year AS cars_data_Year\n    FROM    (SELECT cars_data.Id AS Id,\n                  cars_data.MPG AS MPG,\n                  cars_data.Cylinders AS Cylinders,\n                  cars_data.Edispl AS Edispl,\n                  cars_data.Horsepower AS Horsepower,\n"}
{"question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?. \nSELECT  SELECT CONTINENT\nFROM    cars_data\nWHERE    (car_makers.continent = continent.continent)\nAND     (car_makers.fullname = cars_data.make)\nAND      (MPG < 4000)\nAND      (Edispl > 3000)\nORDER BY  CARS_DATA.year\n# SELECT  SELECT CONTINENT\n# FROM    cars_data\n# WHERE    (car_makers.continent = continent.continent)\n# AND     (car_makers.fullname = cars_data.make)\n# AND      (MPG < 4000)\n# AND      (Edispl > 3000)\n# ORDER BY  CARS_DATA.year\n\n## What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?.\nSELECT  SELECT COUNT(cars_data.year)\nFROM    cars_data\nWHERE    (car_makers.continent = continent.continent)\nAND     ("}
{"question": "What is the horsepower of the car with the largest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the horsepower of the car with the largest accelerate?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the horsepower of the car with the largest accelerate?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What is the horsepower of the car with the greatest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the horsepower of the car with the greatest accelerate?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the horsepower of the car with the greatest accelerate?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT \nFROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM\ncars_data  car_makers  model_list  countries  car_makers  model_list \nWHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE\ncars_data.id = model_list.maker AND model_list.maker = car_makers.id AND car_makers.id = countries.id AND countries.id = 1\n\n#Use prepared statements to improve performance, as each query executes only once.\n\n#Create connection to SQLite database.\n\n#Create the query.\n\n#Execute the query.\n\n#Close the connection.\n\n"}
{"question": "For model volvo, how many cylinders does the car with the least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor model volvo, how many cylinders does the car with the least accelerate have?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor model volvo, how many cylinders does the car with the least accelerate have?. \nSELECT  SELECT COUNT(a1.Id) AS CountOfModelVolvo,  a1.Horsepower,  a1.Weight,  a1.Accelerate,  a1.Year  FROM car_makers,  model_list,  cars_data,  model_data,  car_makers_models,  cars_data_models WHERE  model_data.Id = model_list.Model AND  model_data.Country = model_list.Country AND  car_makers_models.Make = car_makers.Id AND  car_makers_models.Model = cars_data_models.Model AND  cars_data_models.Car = cars_data.Id AND  cars_data.Accelerate < 15 AND  cars_data.Year >= 1990 AND  cars_data.Horsepower > 100  GROUP BY  a1.Horsepower,  a1.Weight,  a1.Accelerate,  a1.Year  ORDER BY  CountOfModelVolvo,  Accelerate,  Horsepower,  Weight,  Year\n\n\n## SQLfiddle -"}
{"question": "For a volvo model, how many cylinders does the version with least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor a volvo model, how many cylinders does the version with least accelerate have?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor a volvo model, how many cylinders does the version with least accelerate have?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  COUNT(DISTINCT cars_data.Cylinders) AS count1\n  FROM (SELECT DISTINCT cars_data.Cylinders FROM car_names\n                      JOIN car_makers ON car_makers.Id = car_names.MakeId\n                      JOIN model_list ON model_list.Maker = car_makers.Id\n                      JOIN cars_data ON cars_data.MakeId = model_list.Maker\n                      JOIN continents ON continents.Id = cars_data.Country)\n  JOIN continents ON continents.Id = cars_data.Country\n  JOIN countries ON countries.Id = continents.Continent\n  JOIN car_makers ON car_makers.Id = cars_data.Maker\n  JOIN model_list ON model_list.Maker = car_makers.Id\n  JOIN cars_data ON cars_data.MakeId = model_list.Maker\n  JOIN car_names ON car_names.MakeId = cars_data.Maker\n  WHERE car_makers.Name LIKE 'Volvo'"}
{"question": "How many cars have a larger accelerate than the car with the largest horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars have a larger accelerate than the car with the largest horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars have a larger accelerate than the car with the largest horsepower?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  COUNT(*) AS cnt,  COUNT(*) AS cnt,  COUNT(*) AS cnt,  COUNT(*) AS cnt,  COUNT(*) AS cnt,  COUNT(*) AS cnt,  COUNT(*) AS cnt,  COUNT(*) AS cnt,  COUNT(*) AS cnt\nFROM    car_1  WHERE  car_1.accelerate > car_1.horsepower;\n\n\n\n\n\n\n\n"}
{"question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with a greater accelerate than the one with the most horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of cars with a greater accelerate than the one with the most horsepower?. \nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT"}
{"question": "How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries has more than 2 car makers ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many countries has more than 2 car makers ?. \nSELECT  SELECT COUNT(*) FROM countries WHERE COUNT(*) > 2\n\nHow many car makers has more than 3 models ?. \nSELECT  SELECT COUNT(*) FROM car_makers WHERE COUNT(*) > 3\n\nHow many models has more than 10000 cars ?. \nSELECT  SELECT COUNT(*) FROM car_names WHERE COUNT(*) > 10000\n\nHow many car has more than 300 MPG ?. \nSELECT  SELECT COUNT(*) FROM cars_data WHERE COUNT(*) > 300\n"}
{"question": "What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of countries with more than 2 car makers ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of countries with more than 2 car makers ?. \nSELECT  SELECT Continent, COUNT(CountryId)\nFROM    Country \nJOIN    Car_Maker\nON      Continent = Continent\nWHERE   CountryId IN (SELECT CountryId\n                     FROM    Country\n                     WHERE   Continent = Continent)\nGROUP BY Continent\nHAVING  COUNT(CountryId) > 2;\n\n\n\n\n"}
{"question": "How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars has over 6 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nHow many cars has over 6 cylinders?. \nSELECT  SELECT COUNT(*)\nFROM  FROM car_makers, \n        car_names\nWHERE car_makers.Maker = car_names.MakeId\nAND  AND Carmakers.Maker = 'Renault' AND car_names.Model = 'Safrane'\nAND  AND Carmakers.Maker = 'Renault' AND car_names.Model = 'Safrane'\nAND  AND Carmakers.Maker = 'Renault' AND car_names.Model = 'Safrane'\nAND  AND Carmakers.Maker = 'Renault' AND car_names.Model = 'Safrane'\nAND  AND Carmakers.Maker = 'Renault' AND car_names.Model = 'Safrane'\nAND  AND Carmakers.Maker = 'Renault' AND car_names.Model = 'Safrane'\nAND  AND Carmakers.Maker = 'Renault' AND car_names.Model = 'Safrane'\nAND  AND Carmakers.Maker = 'Renault' AND car_names.Model = 'Safrane"}
{"question": "What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of carsw ith over 6 cylinders?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the number of carsw ith over 6 cylinders?. \nSELECT  SELECT * FROM cars WHERE Cylinders>6;\nWhat is the number of carsw ith under 4 cylinders?. \nSELECT  SELECT * FROM cars WHERE Cylinders<4;\nWhat is the number of carsw ith between 4 and 6 cylinders?. \nSELECT  SELECT * FROM cars WHERE Cylinders>=4 AND Cylinders<=6;\n\n#SELECT COUNT(*) FROM countries WHERE Continent='North America'\n#SELECT COUNT(*) FROM cars WHERE Cylinders>6\n#SELECT COUNT(*) FROM cars WHERE Cylinders<4\n#SELECT COUNT(*) FROM cars WHERE Cylinders>=4 AND Cylinders<=6\n\n#How many Continents are in the database?.\nSELECT COUNT(*) AS NumContinents FROM continents;\n\n#How many Countries are in the database?.\nSELECT COUNT(*) AS NumCountries FROM countries;\n\n#How many Car Makers are in the database?.\nSELECT COUNT(*) AS NumMakers FROM car_makers;\n\n#Which Car Maker has the highest number of models?. \nSELECT Name, COUNT(*) AS NumModels FROM car_"}
{"question": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor the cars with 4 cylinders, which model has the largest horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor the cars with 4 cylinders, which model has the largest horsepower?. \nSELECT  SELECT name, MAX(horsepower) horsepower \nFROM car_names JOIN car_makers JOIN model_list JOIN cars_data\nWHERE horsepower >= 230 AND cylinders >= 4 AND cylinders <= 6\nGROUP BY name;\n\nAnswer:\nSelect 'Porsche 911 Turbo' from car_names, porsche_911_turbo\n\nAnswer: You are performing a cartesian product between the car_names and the car_makers tables and, then, doing the same for the model_list and car_makers tables and so on. This is very inefficient.\n\nYou should filter the data before making the JOIN.\n\nSomething like this:\n\n\\begin{code}\nSELECT m.name, m.horsepower\nFROM car_names n\nINNER JOIN car_makers m ON m.name=n.name\nWHERE n.cylinders>=4 AND n.cylinders<=6\nGROUP BY m.name;\n\\end{code}\n\nComment: I wrote the query in C# and it gave the correct answer.\nI just don't understand"}
{"question": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor all of the 4 cylinder cars, which model has the most horsepower?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nFor all of the 4 cylinder cars, which model has the most horsepower?. \nSELECT  SELECT Model.FullName,\n    COUNT(Model.FullName)\n    FROM Model\n    GROUP BY Model.FullName\n    HAVING COUNT(Model.FullName)>1\n#ans:\n#Op1.28\n\n\nFor all of the 8 cylinder cars, which model has the least horsepower?. \nSELECT  SELECT Model.FullName,\n    COUNT(Model.FullName)\n    FROM Model\n    GROUP BY Model.FullName\n    HAVING COUNT(Model.FullName)>1\n#ans:\n#Op2.13\n\n\nFor all of the 4 cylinder cars, which model has the highest mpg?. \nSELECT  SELECT Model.FullName,\n    SUM(Car.MPG)\n    FROM Car, Model\n    WHERE Car.MakeId=Model.Id\n    GROUP BY Model.FullName\n    HAVING COUNT(Model.FullName)>1\n#ans:\n#Op1.10\n\n\nFor all of the 8 cylinder cars, which model has the highest mpg?. \nSELECT  SELECT Model.FullName,\n    SUM(Car.MPG)\n"}
{"question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nAmong the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nAmong the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.. \nSELECT  SELECT makeid\nFROM car_makers\nWHERE id NOT IN (\n  SELECT id FROM car_makers\n  WHERE cylinders >= 4)\nGROUP BY makeid\nHAVING COUNT(*) = 1\nORDER BY makeid\n\n"}
{"question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nAmong the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nAmong the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?. \nSELECT  SELECT ModelId, MakeName FROM CarMaker WHERE MakeId=?????\n\"\"\"\n# carmakers have an index on (MakeName,MakeId)\n#make_id is unique\n\nclass Maker(object):\n\tdef __init__(self, make_id):\n\t\tself.make_id = make_id\n\tdef __repr__(self):\n\t\treturn 'Maker(%s)' % self.make_id\n\tdef __eq__(self, other):\n\t\treturn self.make_id == other.make_id\n\tdef __hash__(self):\n\t\treturn hash(self.make_id)\n\nclass Continent(object):\n\tdef __init__(self, id):\n\t\tself.id = id\n\tdef __repr__(self):\n\t\treturn 'Continent(%s)' % self.id\n\tdef __eq__(self, other):\n\t\treturn self.id == other.id\n\tdef __hash__(self):\n\t\treturn hash(self.id)\n\nclass Country(object):\n\tdef __init__(self, id, name):\n\t\tself.id"}
{"question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?. \nSELECT  SELECT `MPG` FROM `cars_data` WHERE `Horsepower` <= 100 AND `Cylinders` >= 8 AND (`Edispl` = 0 OR `Edispl` = 1) AND `Accelerate` <= 10 AND `Year` >= 1980 LIMIT 1;\n#0.55\nWhat is the name of the model that has the highest miles per gallon ?. \nSELECT  SELECT `Make`, `Model` FROM `car_names` WHERE `Make` = (SELECT `Id` FROM `car_makers` WHERE `FullName` = 'Ford') AND `Model` = (SELECT `Id` FROM `car_makers` WHERE `FullName` = 'Mustang') LIMIT 1;\n#Ford Mustang\nWhat is the name of the car that has the highest miles per gallon ?. \nSELECT  SELECT `Make`, `Model` FROM `car_names` WHERE `Make` = (SELECT `Id` FROM `car_makers` WHERE `FullName` = 'Ford') AND `Model` = (SELECT `Id` FROM `car"}
{"question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?. \nSELECT  SELECT max(mpg) FROM cars WHERE \n        (cylinders BETWEEN 8 AND 9) OR \n        (year < 1980) \nAS mpg_future\n\nWhat is the minimum year of the cars that had 6 cylinders and were produced after 1979 ?. \nSELECT  SELECT min(year) FROM cars WHERE \n        (cylinders = 6) AND \n        (year > 1979)\nAS car_year\n\n"}
{"question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich models are lighter than 3500 but not built by the 'Ford Motor Company'?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich models are lighter than 3500 but not built by the 'Ford Motor Company'?. \nSELECT  SELECT id AS make_id, \n        country AS country_id, \n        fullname AS fullname_id, \n        model AS model_id, \n        name AS model_name, \n        mpg AS mpg_id, \n        cylinders AS cylinders_id, \n        edispl AS edispl_id, \n        horsepower AS horsepower_id, \n        weight AS weight_id, \n        accelerate AS accelerate_id, \n        year AS year_id \nFROM car_makers \nJOIN model_list USING(maker_id) \nJOIN cars_data USING(make_id) \nWHERE id < 3500 \nAND fullname != 'Ford Motor Company' \nORDER BY country, name; \n\n\n### ActiveRecord\nCar.find(:all, :conditions => [\"make.name = ? AND mpg >= ? AND mpg <= ? AND make.name != ? AND id < 3500\", \"Ford Motor Company\", 35, 3500, \"Ford Motor Company\"])"}
{"question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?. \nSELECT  SELECT car_makers.Maker, car_makers.Model, COUNT(car_makers.Model)\nFROM car_makers\nWHERE (NOT car_makers.Maker = 'Ford') AND (car_makers.Model IS NOT NULL) AND (car_makers.Model < 3500)\nGROUP BY car_makers.Maker, car_makers.Model\nHAVING COUNT(car_makers.Model) > 0\nORDER BY car_makers.Maker, car_makers.Model\nLIMIT 2\n"}
{"question": "What are the name of the countries where there is not a single car maker?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the name of the countries where there is not a single car maker?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the name of the countries where there is not a single car maker?. \nSELECT  SELECT CONCAT('Continent: ', Continent) FROM continents UNION SELECT Continent FROM continents WHERE Continent != ''\nWhat are the name of the car makers with at least one car model?. \nSELECT CONCAT('Car maker: ', Maker) FROM car_makers WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE MakeId = Maker)\nWhat are the name of the cars that have only one model?. \nSELECT CONCAT('Car: ', Make) FROM car_makers WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE MakeId = Make)\nWhat are the name of the cars that have only one model?. \nSELECT CONCAT('Car: ', Make) FROM car_makers WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE MakeId = Make)\nWhat are the name of the cars that have at least one model?. \nSELECT CONCAT('Car: ', Make) FROM car_makers WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE MakeId = Make)\nWhat are the name of the cars that have at least one model?. \nSELECT CONCAT('Car: ', Make) FROM car_makers"}
{"question": "What are the names of the countries with no car makers?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names of the countries with no car makers?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the names of the countries with no car makers?. \nSELECT  SELECT  id AS CountryId, name AS CountryName FROM car_makers UNION ALL\nSELECT  SELECT  id AS CountryId, 'World' AS CountryName FROM car_makers\n\n# What are the names of the car makes for which no models are known?.\nSELECT  SELECT  id AS MakeId, full_name AS FullName, country AS Country FROM car_makers\nWHERE  WHERE  (NOT EXISTS (SELECT  SELECT  name AS ModelName FROM model_list WHERE  WHERE  (SELECT  SELECT  country AS Country FROM car_makers WHERE  WHERE  id = country_id))\nOR  OR  (SELECT  SELECT  name AS ModelName FROM model_list WHERE  WHERE  id = country_id) = 'World')\n# What are the names of the models in the model_list table?.\nSELECT  SELECT  id AS ModelId, name AS ModelName FROM model_list\n# What are the names of the cars in the cars_data table?.\nSELECT  SELECT  id AS CarId, \n(SELECT  SELECT  name AS MakeName FROM car_makes WHERE  WHERE  id = make_id) AS Make, \n(SELECT  SELECT"}
{"question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhich are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .. \nSELECT  SELECT `Maker`\nFROM `car_makers`\nGROUP BY `Maker`\nHAVING COUNT(*) > 3;\n\"\"\"\n\n\n"}
{"question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  car_makers.Maker,\n  COUNT(car_makers.Maker) AS count,\n  GROUP_CONCAT(car_makers.Maker) AS car_makers_group_concat,\n  car_makers.FullName,\n  COUNT(car_makers.FullName) AS car_makers_count_1,\n  GROUP_CONCAT(car_makers.FullName) AS car_makers_group_concat_1,\n  car_makers.Country,\n  COUNT(car_makers.Country) AS car_makers_count_2,\n  GROUP_CONCAT(car_makers.Country) AS car_makers_group_concat_2,\n  COUNT(car_makers.Country) AS car_makers_count_3,\n  GROUP_CONCAT(car_makers.Country) AS car_makers_group_concat_3,\nFROM car_makers\n  LEFT OUTER JOIN car_names\n    ON car_makers.Maker = car_"}
{"question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?. \nSELECT  SELECT id AS \"CountryID\", name AS \"CountryName\"\nFROM countries\nWHERE id IN (\n    SELECT  SELECT Continent AS \"Continent\", COUNT(Model) AS \"Count\"\n    FROM model_list\n    GROUP BY Continent\n    HAVING Count > 3 OR Continent = \"fiat\"\n)\nORDER BY CountryID\n"}
{"question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "prompt": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?. \nSELECT ", "response": "### SQLite SQL car_1 database, with their properties:\n#continents('ContId', 'Continent')\n#countries('CountryId', 'CountryName', 'Continent')\n#car_makers('Id', 'Maker', 'FullName', 'Country')\n#model_list('ModelId', 'Maker', 'Model')\n#car_names('MakeId', 'Model', 'Make')\n#cars_data('Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year')\nWhat are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n          COUNT(D.Continent) AS ContinentCount,\n          COUNT(D.CountryName) AS CountryNameCount,\n          D.CountryName,\n          D.Continent\n      FROM  FROM  FROM  FROM  FROM  FROM  FROM\n          ( SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n                  COUNT(*) AS ModelNameCount,\n                  ModelName,\n                  MakeId\n              FROM  FROM  FROM  FROM  FROM  FROM\n                  ( SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n                      CONCAT(M.FullName, ' ', M.Model) AS ModelName,\n                      M.MakeId\n                  FROM  FROM  FROM  FROM  FROM  FROM\n                      ( SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n                          COUNT(*) AS CarMakerCount,\n                          CarMaker\n                      FROM  FROM  FROM  FROM  FROM  FROM\n                          ( SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n                              C.Id AS MakeId,\n                              C.FullName AS FullName,\n                             "}
{"question": "Which country does Airline \"JetBlue Airways\" belong to?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich country does Airline \"JetBlue Airways\" belong to?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich country does Airline \"JetBlue Airways\" belong to?. \nSELECT  SELECT_WITH_TIMING(Airline, 'Country')\nFROM airlines \nWHERE Abbreviation = 'JBA'\n\n### Deprecated \nSELECT  SELECT_WITH_TIMING(AirportCode, 'City', 'Country')\nFROM airports \nWHERE AirportCode = 'JFK'\n\n### ORDER BY\nSELECT_WITH_TIMING(FlightNo, 'FlightNo')\nFROM flights \nORDER BY FlightNo\n\n### Where\nSELECT_WITH_TIMING(Airline, 'Airline')\nFROM flights \nWHERE FlightNo = '815'\nAND SourceAirport = 'BOS'\n\n### UNION\nSELECT_WITH_TIMING(Airline, 'Airline')\nFROM flights \nWHERE FlightNo = '815'\nAND SourceAirport = 'BOS'\nUNION\nSELECT_WITH_TIMING(Airline, 'Airline')\nFROM flights \nWHERE FlightNo = '815'\nAND SourceA"}
{"question": "What country is Jetblue Airways affiliated with?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat country is Jetblue Airways affiliated with?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat country is Jetblue Airways affiliated with?. \nSELECT  SELECT Country FROM airlines WHERE Abbreviation = 'Jetblue Airways'\n\n#What country is WestJet Airlines affiliated with?. \nSELECT  SELECT Country FROM airlines WHERE Abbreviation = 'WestJet Airlines'\n\n#What country is Aer Lingus affiliated with?. \nSELECT  SELECT Country FROM airlines WHERE Abbreviation = 'Aer Lingus'\n\n#What country is Southwest Airlines affiliated with?. \nSELECT  SELECT Country FROM airlines WHERE Abbreviation = 'Southwest Airlines'\n\n#What country is United Airlines affiliated with?. \nSELECT  SELECT Country FROM airlines WHERE Abbreviation = 'United Airlines'\n\n#What country is American Airlines affiliated with?. \nSELECT  SELECT Country FROM airlines WHERE Abbreviation = 'American Airlines'\n\n#What country is British Airways affiliated with?. \nSELECT  SELECT Country FROM airlines WHERE Abbreviation = 'British Airways'\n\n#What country is Aeromexico affiliated with?. \nSELECT  SELECT Country FROM airlines WHERE Abbreviation = 'Aeromexico'\n\n#What country is Air Canada affiliated"}
{"question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the abbreviation of Airline \"JetBlue Airways\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the abbreviation of Airline \"JetBlue Airways\"?. \nSELECT  SELECT  'Airline Abbreviation' AS airline_abbreviation, \n    AIR.abbreviation AS airline_abbreviation \nFROM airlines AS AIR\nWHERE AIR.abbreviation LIKE 'JetBlue'\n\nWhat is the name of the City with Airport Code \"LAX\"?. \nSELECT  SELECT  'AirportCity' AS airport_city, \n    AIR.city AS airport_city \nFROM airports AS AIR\nWHERE AIR.airportCode LIKE 'LAX'\n\nWhat is the name of the Country of the City with Airport Code \"LAX\"?. \nSELECT  SELECT  'AirportCountry' AS airport_country, \n    AIR.country AS airport_country \nFROM airports AS AIR\nWHERE AIR.airportCode LIKE 'LAX'\n\nWhat is the name of the City with Airport Code \"SFO\"?. \nSELECT  SELECT  'AirportCity' AS airport_city, \n    AIR.city AS airport_city \nFROM airports AS AIR\nWHERE AIR.airport"}
{"question": "Which abbreviation corresponds to Jetblue Airways?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich abbreviation corresponds to Jetblue Airways?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich abbreviation corresponds to Jetblue Airways?. \nSELECT  SELECT COUNT(*) FROM (SELECT airlines.CountryAbbrev FROM airlines \n  LEFT JOIN airports ON airports.Country=airlines.Country \n  LEFT JOIN airlines ON airports.AirportCode=airlines.AirportCode \n  WHERE airlines.Country='US'\n  AND airports.AirportCode='JFK') \nGROUP BY airlines.CountryAbbrev \nHAVING COUNT(*) = 1 \nORDER BY airlines.CountryAbbrev \n\"\n\n\n\n\n"}
{"question": "List all airline names and their abbreviations in \"USA\".", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nList all airline names and their abbreviations in \"USA\".. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nList all airline names and their abbreviations in \"USA\".. \nSELECT  SELECT DISTINCT airlines.abbreviation FROM airlines, airports WHERE airlines.country='USA' AND airports.country='USA' AND airlines.country=airports.country;\n\n\"\"\"\n\n"}
{"question": "What are the airline names and abbreviations for airlines in the USA?", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are the airline names and abbreviations for airlines in the USA?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are the airline names and abbreviations for airlines in the USA?. \nSELECT  SELECT airline, abbrev FROM airlines\nWHERE Country = 'USA'\nORDER BY airline\n\n#list the number of flights from a specific airport to another one\nSELECT  SELECT COUNT(flight) AS NumOfFlights FROM flights\nWHERE SourceAirport = 'ORD' \nAND DestAirport = 'LAX'\n\n#list all airports which are used as destination for a specific airline\nSELECT  SELECT airportcode, airportname FROM airports\nWHERE airlines.uid = 'AA'\n\n#list all destinations for a specific flight\nSELECT  SELECT DestAirport FROM flights\nWHERE flightno = 'AA 504'\n\n#count the number of flights for a specific airline\nSELECT  SELECT COUNT(flightno) AS NumOfFlights FROM flights\nWHERE airline = 'AA'\n\n#count all flights from and to an airport\nSELECT  SELECT COUNT(flightno) AS NumOfFlights FROM flights\nWHERE SourceAirport = 'LAX'\nAND DestAirport = 'ORD'\n\n#count flights of a specific air"}
{"question": "List the airport code and name in the city of Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nList the airport code and name in the city of Anthony.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nList the airport code and name in the city of Anthony.. \nSELECT  SELECT * FROM airports\nWHERE City = 'Anthony';\n\n"}
{"question": "Give the airport code and airport name corresonding to the city Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the airport code and airport name corresonding to the city Anthony.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the airport code and airport name corresonding to the city Anthony.. \nSELECT  SELECT * FROM airports WHERE City = \"Anthony\"\n\n#give the airlines that fly to the city Anthony. \nSELECT  SELECT * FROM airlines WHERE Abbreviation = \"UA\"\n\n#give the flights that fly from New York (NYC) to Dallas (DAL)\nSELECT  SELECT * FROM flights WHERE Airline = \"UA\" AND SourceAirport = \"JFK\" AND DestAirport = \"DFW\"\n\n#Give the departure times for the flights from NYC to DAL in the next 3 days (it will show the departure time of the last flight for each day)\nSELECT  SELECT * FROM flights WHERE Airline = \"UA\" AND SourceAirport = \"JFK\" AND DestAirport = \"DFW\" AND DepartureDateTime > strftime('%s', strftime('%Y-%m-%d', strftime('%s', now()))+3600)\n\n#Give the arrival times for the flights from NYC to DAL in the next 3 days (it will show the arrival time of the first flight for"}
{"question": "How many airlines do we have?", "sql": "SELECT count(*) FROM AIRLINES", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airlines do we have?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airlines do we have?. \nSELECT  SELECT COUNT(*) FROM airlines AS a\n\nHow many airports do we have?. \nSELECT  SELECT COUNT(*) FROM airports AS a\n\nHow many flights do we have?. \nSELECT  SELECT COUNT(*) FROM flights AS f\n\nHow many airports do we have?. \nSELECT  SELECT COUNT(*) FROM airports AS a\n\nHow many flights do we have?. \nSELECT  SELECT COUNT(*) FROM flights AS f\n\n\n"}
{"question": "What is the total number of airlines?", "sql": "SELECT count(*) FROM AIRLINES", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the total number of airlines?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the total number of airlines?. \nSELECT  SELECT COUNT(*) AS num_airlines\nFROM    FROM airlines\nWhat is the total number of airports?. \nSELECT  SELECT COUNT(*) AS num_airports\nFROM    FROM airports\nWhat is the total number of flights?. \nSELECT  SELECT COUNT(*) AS num_flights\nFROM    FROM flights\n\n# Find the first record of airlines table.\nSELECT airlines.abbrev\nFROM   airlines\nWHERE  airlines.abbrev = 'SQ'\nLIMIT  1\n\n# Find the first record of airports table.\nSELECT airports.name\nFROM   airports\nWHERE  airports.name = 'SYD'\nLIMIT  1\n\n# Find the first record of flights table.\nSELECT flights.flightno\nFROM   flights\nWHERE  flights.flightno = 'SQ258'\nLIMIT  1\n\n\n\n# Test adding a new record into the airlines table.\nINSERT INTO airlines (abbrev) VALUES ('S7')\n\n# Test adding a new record into the airports table.\nINSERT INTO airports (name) VALUES ('S"}
{"question": "How many airports do we have?", "sql": "SELECT count(*) FROM AIRPORTS", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airports do we have?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airports do we have?. \nSELECT  SELECT COUNT(*)\nFROM airports\n### How many flights have been registered for the year 2009?. \nSELECT  SELECT COUNT(*)\nFROM flights\nWHERE flightDate BETWEEN '2009-01-01' AND '2009-12-31'\n\n### What is the airline with the most flights?. \nSELECT  SELECT COUNT(*)\nFROM flights\nWHERE flightDate BETWEEN '2009-01-01' AND '2009-12-31'\nGROUP BY flight.Airline\nHAVING COUNT(*) = (\nSELECT  SELECT COUNT(*)\nFROM flights\nWHERE flightDate BETWEEN '2009-01-01' AND '2009-12-31'\n)\n### Which airports were used the most?. \nSELECT  SELECT COUNT(*)\nFROM flights\nWHERE flightDate BETWEEN '2009-01-01' AND '2009-12-31'\nGROUP BY flights.SourceAirport\nH"}
{"question": "Return the number of  airports.", "sql": "SELECT count(*) FROM AIRPORTS", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of  airports.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of  airports.. \nSELECT  SELECT COUNT( * ) AS cnt FROM airports;\n# 1194\nReturn the number of  airlines..\nSELECT  SELECT COUNT( * ) AS cnt FROM airlines;\n# 349\nReturn the number of  flights..\nSELECT  SELECT COUNT( * ) AS cnt FROM flights;\n# 2275\n"}
{"question": "How many flights do we have?", "sql": "SELECT count(*) FROM FLIGHTS", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights do we have?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights do we have?. \nSELECT  SELECT count(*) FROM flights\n\nHow many flights have a destination in Amsterdam?. \nSELECT  SELECT count(*) FROM flights WHERE DestAirport = 'AMS'\n\nHow many flights have a source in Amsterdam?. \nSELECT  SELECT count(*) FROM flights WHERE SourceAirport = 'AMS'\n\nHow many flights have a destination in Amsterdam and a source in Amsterdam?. \nSELECT  SELECT count(*) FROM flights WHERE DestAirport = 'AMS' AND SourceAirport = 'AMS'\n\n\n"}
{"question": "Return the number of flights.", "sql": "SELECT count(*) FROM FLIGHTS", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights.. \nSELECT  SELECT count(*) AS air_count FROM airlines\n\nReturn the number of airports in the database..\nSELECT  SELECT count(*) AS air_count FROM airports\n\nReturn the number of airlines in the database..\nSELECT  SELECT count(*) AS air_count FROM airlines\n\nReturn the number of flights in the database..\nSELECT  SELECT count(*) AS air_count FROM flights\n\n# List of columns\nSELECT  SELECT * FROM airlines\n\n# List of columns\nSELECT  SELECT * FROM airports\n\n# List of columns\nSELECT  SELECT * FROM flights\n\n# List of columns\nSELECT  SELECT * FROM flights WHERE flight_no LIKE '1%'\n\n# List of columns\nSELECT  SELECT * FROM flights WHERE flight_no LIKE 'F%'\n\n# List of columns\nSELECT  SELECT * FROM flights WHERE flight_no LIKE '%'\n\n# List of columns\nSELECT  SELECT * FROM flights WHERE flight_no LIKE '%1%'\n\n# List of columns\nSELECT  SELECT * FROM flights WHERE flight_no LIKE '%F%'\n\n# List of columns\nSELECT  SELECT * FROM flights WHERE flight_no LIKE '%'"}
{"question": "Which airline has abbreviation 'UAL'?", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airline has abbreviation 'UAL'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airline has abbreviation 'UAL'?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "Give the airline with abbreviation 'UAL'.", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the airline with abbreviation 'UAL'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the airline with abbreviation 'UAL'.. \nSELECT  SELECT * FROM airlines WHERE Abbreviation = 'UAL';\n# => [{'Airline': 'United Airlines', 'Abbreviation': 'UAL'},\n#      {'Airline': 'US Airways', 'Abbreviation': 'US'},\n#      {'Airline': 'Virgin America', 'Abbreviation': 'VX'},\n#      {'Airline': 'Virgin Atlantic', 'Abbreviation': 'VS'},\n#      {'Airline': 'Xtra Airways', 'Abbreviation': 'TF'},\n#      {'Airline': 'American Airlines', 'Abbreviation': 'AA'},\n#      {'Airline': 'Air Canada', 'Abbreviation': 'AC'},\n#      {'Airline': 'Alaska Airlines', 'Abbreviation': 'AS'},\n#      {'Airline': 'Allegiant Air', 'Abbreviation': 'G4'},\n#      {'Airline': 'American Eagle', 'Abbreviation': 'AE'},\n#      {'Airline': 'Asiana Airlines', 'Abbreviation': 'OZ'},\n#     "}
{"question": "How many airlines are from USA?", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airlines are from USA?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many airlines are from USA?. \nSELECT  SELECT COUNT(airlines.uid)  FROM  FROM airlines  WHERE  WHERE airlines.abbrev = \"USA\" \nHow many airlines are from UK?. \nSELECT  SELECT COUNT(airlines.uid)  FROM  FROM airlines  WHERE  WHERE airlines.abbrev = \"UK\" \nHow many flights are from ORD?. \nSELECT  SELECT COUNT(flights.uid)  FROM  FROM flights  WHERE  WHERE flights.sourceAirport = \"ORD\" \nHow many flights are from SFO?. \nSELECT  SELECT COUNT(flights.uid)  FROM  FROM flights  WHERE  WHERE flights.destAirport = \"SFO\" \nHow many flights are from SFO to ORD?. \nSELECT  SELECT COUNT(flights.uid)  FROM  FROM flights  WHERE  WHERE flights.sourceAirport = \"SFO\"  AND  AND flights.destAirport = \"ORD\" \nHow many flights are from ORD to SFO?. \nSELECT  SELECT COUNT(flights.uid)  FROM  FROM flights  WHERE "}
{"question": "Return the number of airlines in the USA.", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of airlines in the USA.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of airlines in the USA.. \n}
{"question": "Which city and country is the Alton airport at?", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city and country is the Alton airport at?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city and country is the Alton airport at?. \nSELECT  SELECT city, country FROM airports \nWHERE  WHERE city = 'Alton' AND country = 'UK';\n\n\n\n"}
{"question": "Give the city and country for the Alton airport.", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the city and country for the Alton airport.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the city and country for the Alton airport.. \nSELECT  SELECT airports.City, airports.Country, airports.CountryAbbrev\nFROM airports\nWHERE airports.AirportCode = 'BLV'\nORDER BY airports.City;\n# What is the city for the Alton airport?\nSELECT airports.City\nFROM airports\nWHERE airports.AirportCode = 'BLV';\n# What is the country for the Alton airport?\nSELECT airports.Country\nFROM airports\nWHERE airports.AirportCode = 'BLV';\n# What is the country abbreviation for the Alton airport?\nSELECT airports.CountryAbbrev\nFROM airports\nWHERE airports.AirportCode = 'BLV';\n# What is the full name of the Alton airport?\nSELECT airports.AirportName\nFROM airports\nWHERE airports.AirportCode = 'BLV';\n# Give the city for the LAX airport..\nSELECT airports.City\nFROM airports\nWHERE airports.AirportCode = 'LAX';\n# Give the country for the LAX airport..\nSELECT airports.Country\nFROM"}
{"question": "What is the airport name for airport 'AKO'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the airport name for airport 'AKO'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the airport name for airport 'AKO'?. \nSELECT  SELECT  SELECT  SELECT  SELECT\n# airline 1: 'Air Canada'  'Air Canada'  'Air Canada'  'Air Canada'  'Air Canada'\n# city 1: 'AKO'  'AKO'  'AKO'  'AKO'  'AKO'\n# country 1: 'CAN'  'CAN'  'CAN'  'CAN'  'CAN'\n# country_abbrev 1: 'CAN'  'CAN'  'CAN'  'CAN'  'CAN'\n# airport 1: 'AKO'  'AKO'  'AKO'  'AKO'  'AKO'\n# flight 1: '333'  '333'  '333'  '333'  '333'\nWhat is the airline name for flight 333?. \nSELECT  SELECT  SELECT  SELECT  SELECT\n# airline 1: 'Air Canada'  'Air Canada'  'Air Canada'  'Air Canada"}
{"question": "Return the name of the airport with code 'AKO'.", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the name of the airport with code 'AKO'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the name of the airport with code 'AKO'.. \nSELECT  SELECT airports.City, airports.AirportCode, airports.AirportName\n        FROM  FROM airports WHERE airports.AirportCode = 'AKO'\n\nReturn the code of the airport with name 'Fra'...\nSELECT  SELECT airports.AirportCode\n        FROM  FROM airports WHERE airports.AirportName = 'Fra'\n\nReturn the name of the airport with code 'LHR'...\nSELECT  SELECT airports.AirportName\n        FROM  FROM airports WHERE airports.AirportCode = 'LHR'\n\nReturn the name of the airport with code 'AMS'...\nSELECT  SELECT airports.AirportName\n        FROM  FROM airports WHERE airports.AirportCode = 'AMS'\n\nReturn the code of the airport with name 'Paris'...\nSELECT  SELECT airports.AirportCode\n        FROM  FROM airports WHERE airports.AirportName = 'Paris'\n\nReturn the name of the airport with code 'ZRH'...\nSELECT  SELECT airports.AirportName"}
{"question": "What are airport names at City 'Aberdeen'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airport names at City 'Aberdeen'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airport names at City 'Aberdeen'?. \nSELECT  SELECT  City,\n          CONCAT(City, \" Airport\") AS AirportName,\n          Country AS CountryAbbrev\nFROM airports\nWHERE City = \"Aberdeen\";\n\n"}
{"question": "What are the names of airports in Aberdeen?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are the names of airports in Aberdeen?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are the names of airports in Aberdeen?. \nSELECT  SELECT  *  FROM  FROM  flight_2  WHERE  WHERE  Country = 'UK'  ORDER  ORDER  BY  BY  AirportCode  DESC  DESC  LIMIT  LIMIT  0 10\nThe airport codes are written in lowercase.\nHow many flights leave from Aberdeen Airport?. \nSELECT COUNT(FlightNo) FROM flight_2 WHERE Country = 'UK' AND AirportCode = 'ABZ'\n30\nHow many flights leave from Aberdeen Airport on a Saturday?. \nSELECT COUNT(FlightNo) FROM flight_2 WHERE Country = 'UK' AND AirportCode = 'ABZ' AND DayOfWeek = 6\n14\nHow many flights from Aberdeen Airport arrive in London?. \nSELECT COUNT(DestAirport) FROM flight_2 WHERE Country = 'UK' AND AirportCode = 'ABZ' AND DestAirport = 'LHR'\n2\nHow many flights from Aberdeen Airport arrive in London on Monday?. \nSELECT COUNT(DestAirport) FROM flight_2 WHERE Country = 'UK' AND AirportCode = 'ABZ' AND DestAirport = 'LHR"}
{"question": "How many flights depart from 'APG'?", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from 'APG'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from 'APG'?. \nSELECT  SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';\n\n\n# How many flights depart from 'APG' in the last hour?. \nSELECT  SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND FTime > 3600;\n\n# How many flights depart from 'APG' in the last hour?. \nSELECT  SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND FTime > 3600 AND (FTime > 3600 AND FTime < 7200);\n\n\n# How many flights depart from 'APG' in the last hour?. \nSELECT  SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND FTime > 3600 AND (FTime > 3600 AND FTime < 7200) AND (FTime > 6000 AND FTime < 8400);\n\n\n# How many flights depart from 'APG' in the last hour?. \nSELECT  SELECT COUNT(*) FROM flights WHERE SourceAirport = 'AP"}
{"question": "Count the number of flights departing from 'APG'.", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of flights departing from 'APG'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of flights departing from 'APG'.. \nSELECT  SELECT COUNT(*) FROM flights WHERE DestAirport = 'APG'\n\"\"\"\n\nfrom airlines import airlines, airports, flights\nfrom datetime import date\n\n\ndef count_flights(destination):\n    \"\"\"\n    Returns the number of flights arriving at the destination airport.\n\n    Parameters\n    ----------\n    destination : str\n        The destination airport.\n\n    Returns\n    -------\n    int\n        The number of flights arriving at the destination airport.\n    \"\"\"\n    return len(flights(destination, True))\n\n\ndef find_flight_id(flight_number, destination):\n    \"\"\"\n    Returns the flight ID for a given flight number and destination.\n\n    Parameters\n    ----------\n    flight_number : str\n        The flight number.\n    destination : str\n        The destination airport.\n\n    Returns\n    -------\n    int\n        The flight ID.\n    \"\"\"\n    for flight in flights(destination, True):\n        if flight['FlightNo'] == flight_number:\n            return flight['FlightID']\n"}
{"question": "How many flights have destination ATO?", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights have destination ATO?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights have destination ATO?. \nSELECT  SELECT count(*), sum(destination = 'ATO')  FROM flights WHERE airport = 'ATO' GROUP BY airport;\nHow many flights have source ATO?.\nSELECT  SELECT count(*), sum(source = 'ATO') FROM flights WHERE airport = 'ATO' GROUP BY airport;\nHow many flights have both source and destination ATO?.\nSELECT  SELECT count(*), sum(source = 'ATO') + sum(destination = 'ATO') FROM flights WHERE airport = 'ATO' GROUP BY airport;\n\n\n"}
{"question": "Count the number of flights into ATO.", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of flights into ATO.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of flights into ATO.. \nSELECT  SELECT count(*) FROM flights WHERE DestAirport = 'ATO';\n\n\n\n"}
{"question": "How many flights depart from City Aberdeen?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from City Aberdeen?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from City Aberdeen?. \nSELECT  SELECT COUNT(*) FROM flights WHERE SourceAirport='ABZ';\nSelect the total number of flights from the database flight_2.db with destination 'CDG'. \nSELECT  SELECT COUNT(*) FROM flights WHERE DestAirport='CDG';\nSelect all flight destinations in the database flight_2.db that begin with the letter 'A'. \nSELECT  SELECT DestAirport FROM flights WHERE DestAirport LIKE 'A%';\nSelect all flight origins in the database flight_2.db that begin with the letter 'Z'. \nSELECT  SELECT SourceAirport FROM flights WHERE SourceAirport LIKE 'Z%';\nSelect all airlines in the database flight_2.db that have at least 2 flights to Paris. \nSELECT  SELECT Airline FROM flights WHERE DestAirport='CDG' GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) >= 2;\nSelect all airlines in the database flight_2.db that have at least 50 flights to Paris. \nSELECT  SELECT Airline FROM flights WHERE DestAirport='CDG' GROUP BY Airline H"}
{"question": "Return the number of flights departing from Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights departing from Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights departing from Aberdeen.. \nSELECT  SELECT count(flights.FlightNo) FROM flights WHERE flights.SourceAirport = 'ABZ' \n\n# If you want to see the SQL code you can do this:\n#import sqlite3 as sq\n\n#conn = sq.connect('flight_2.db')\n#c = conn.cursor()\n\n#c.execute('SELECT count(flights.FlightNo) FROM flights WHERE flights.SourceAirport = 'ABZ')\n#print(c.fetchone())\n\n#create a new table with the same structure as the SQL database (without the table_name)\n#flight_table = Table('flights',meta, autoload_with=engine)\n#flight_table.create()\n#conn.commit()\n\n#Create a new table with the same structure as the SQL database (without the table_name)\n#flight_table = Table('flights',meta, autoload_with=engine)\n#flight_table.create()\n\n# query the table for all flights leaving Aberdeen\n#flight_table.select().where(flight_table"}
{"question": "How many flights arriving in Aberdeen city?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights arriving in Aberdeen city?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights arriving in Aberdeen city?. \nSELECT  SELECT COUNT(*)  FROM  FROM airports\n        JOIN flights\n        USING (SourceAirport)\n        JOIN airlines\n        USING (Airline)\nWHERE   WHERE City = 'Aberdeen'\nAND     AND SourceAirport = 'ABZ'\nAND     AND CountryAbbrev = 'GB';\n\n# How many flights starting from New York city?. \nSELECT  SELECT COUNT(*)  FROM  FROM airports\n        JOIN flights\n        USING (SourceAirport)\n        JOIN airlines\n        USING (Airline)\nWHERE   WHERE City = 'New York'\nAND     AND SourceAirport = 'JFK'\nAND     AND CountryAbbrev = 'US';\n\n# How many flights that arrive in Madrid and depart from Glasgow?. \nSELECT  SELECT COUNT(*)  FROM  FROM airports\n        JOIN flights\n        USING (SourceAirport)\n        JOIN airlines\n        USING (Airline)\nWHERE   WHERE City = 'Madrid'\nAND     AND SourceAirport = 'MAD'\nAND     AND CountryAbbrev = '"}
{"question": "Return the number of flights arriving in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights arriving in Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of flights arriving in Aberdeen.. \nSELECT  SELECT COUNT(*) FROM  airports WHERE Country='GB' AND AirportCode = 'ABZ'\nSELECT  SELECT COUNT(*) FROM  flights WHERE DestAirport = 'ABZ'\nSELECT  SELECT COUNT(*) FROM  airports WHERE Country='GB' AND AirportCode = 'BHX'\nSELECT  SELECT COUNT(*) FROM  flights WHERE SourceAirport = 'BHX'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from City 'Aberdeen' and have destination City 'Ashley'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights depart from City 'Aberdeen' and have destination City 'Ashley'?. \nSELECT  SELECT COUNT(flights.flightNo)\n        FROM flight_2\n        JOIN airports ON airports.airportCode = flights.sourceAirport\n        JOIN airlines ON airlines.airline = flights.airline\n        JOIN cities ON cities.city = airports.city\n        JOIN airports ON airports.airportCode = flights.destAirport\n        JOIN airlines ON airlines.airline = flights.airline\n        JOIN cities ON cities.city = airports.city\n        WHERE  cities.city = 'Aberdeen'\n        AND    cities.city = 'Ashley'\n        AND    airlines.airline = 'ANA'\n        AND    flights.flightNo = 'JAL 101'\n        AND    flights.flightNo = 'JAL 102'\n\n"}
{"question": "How many flights fly from Aberdeen to Ashley?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights fly from Aberdeen to Ashley?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights fly from Aberdeen to Ashley?. \nSELECT  SELECT COUNT(1) \nFROM    flights \nWHERE (SourceAirport = 'ABZ' \nAND DestAirport = 'ASH') \nOR (SourceAirport = 'ASH' \nAND DestAirport = 'ABZ') \nGROUP BY SourceAirport, DestAirport \nORDER BY COUNT(1) DESC \nLIMIT 10;\n\n# How many flights arrive in London?.\nSELECT  SELECT COUNT(1) \nFROM    flights \nWHERE (SourceAirport = 'LON' \nOR DestAirport = 'LON') \nGROUP BY SourceAirport, DestAirport \nORDER BY COUNT(1) DESC \nLIMIT 10;\n\n# How many flights fly from London?\nSELECT  SELECT COUNT(1) \nFROM    flights \nWHERE (SourceAirport = 'LON' \nOR DestAirport = 'LON') \nGROUP BY SourceAirport, DestAirport \nORDER BY COUNT(1) DESC \nLIMIT 10;\n\n# How many flights fly"}
{"question": "How many flights does airline 'JetBlue Airways' have?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights does airline 'JetBlue Airways' have?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights does airline 'JetBlue Airways' have?. \nSELECT  SELECT COUNT(*),  'Airline', 'JetBlue Airways', 1 FROM  flights\nWhat are the airports for each flight?. \nSELECT  SELECT Airline,  'FlightNo',  'DestAirport' FROM  flights\nHow many flights go from airport 'IAD' to airport 'JFK'?. \nSELECT  SELECT COUNT(*),  'Airport', 'IAD', 'DestAirport', 'JFK' FROM  flights\nHow many airports are there? \nSELECT  SELECT COUNT(*),  'City', 'AirportCode',  'AirportName',  'Country', 'CountryAbbrev' FROM  airports\nWhat is the shortest flight?. \nSELECT  SELECT MIN('FlightNo')  FROM  flights\nWhat is the longest flight?. \nSELECT  SELECT MAX('FlightNo')  FROM  flights\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Give the number of Jetblue Airways flights.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the number of Jetblue Airways flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the number of Jetblue Airways flights.. \nSELECT  SELECT COUNT(Airline) FROM flights WHERE Airline = 'JetBlue';\n\nJetblue Airways flights from New York City to Washington DC: \nSELECT  SELECT Airline, DestAirport FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'WAS';\n\nAll flights going to Washington DC: \nSELECT  SELECT DestAirport FROM flights;\n\nJetblue Airways flights going to Washington DC: \nSELECT  SELECT DestAirport FROM flights WHERE Airline = 'JetBlue';\n\nJetblue Airways flights that stop in Washington DC: \nSELECT  SELECT Airline FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'WAS';\n\nSouthwest Air flights going to Washington DC: \nSELECT  SELECT Airline FROM flights WHERE Airline = 'Southwest';\n\nSouthwest Air flights going to Washington DC that start in Boston: \nSELECT  SELECT Airline FROM flights WHERE Airline = 'Southwest' AND SourceAirport = 'BOS';\n\nAll flights that start"}
{"question": "How many 'United Airlines' flights go to Airport 'ASY'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many 'United Airlines' flights go to Airport 'ASY'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many 'United Airlines' flights go to Airport 'ASY'?. \nSELECT  SELECT * FROM flights WHERE 'United Airlines' = Airline AND Airport = 'ASY'\n\nHow many 'United Airlines' flights go to Airport 'ASY'?. \nSELECT  SELECT * FROM flights WHERE Airline = 'United Airlines' AND Airport = 'ASY'\n\nHow many flights use 'ASY'?. \nSELECT  SELECT * FROM flights WHERE Airport = 'ASY'\n\nHow many 'United Airlines' flights go to Airport 'ASY'?. \nSELECT  SELECT * FROM flights WHERE 'United Airlines' = Airline AND Airport = 'ASY'\n\nHow many 'United Airlines' flights go to Airport 'ASY'?. \nSELECT  SELECT * FROM flights WHERE Airline = 'United Airlines' AND Airport = 'ASY'\n\nHow many flights use 'ASY'?. \nSELECT  SELECT * FROM flights WHERE Airport = 'ASY'\n\nHow many 'United Airlines' flights go to Airport 'ASY'?. \nSELECT  SELECT * FROM flights WHERE 'United Airlines' = Airline AND Airport = 'ASY'\n\nHow many"}
{"question": "Count the number of United Airlines flights arriving in ASY Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of United Airlines flights arriving in ASY Airport.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of United Airlines flights arriving in ASY Airport.. \nSELECT  SELECT count(*), \n        airlines.Abbreviation, \n        airlines.Country,\n        airports.City, \n        airports.AirportCode, \n        airports.AirportName,\n        airports.CountryAbbrev \nFROM  FROM flights, \n        airports, \n        airlines\nWHERE  WHERE flights.SourceAirport=airports.AirportCode \n        AND flights.DestAirport=airports.AirportCode \n        AND airlines.Airline=flights.Airline \nGROUP BY  GROUP BY airlines.Abbreviation \nORDER BY  ORDER BY airlines.Abbreviation \n\n\n\n"}
{"question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many 'United Airlines' flights depart from Airport 'AHD'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many 'United Airlines' flights depart from Airport 'AHD'?. \nSELECT  SELECT COUNT (*) FROM flights WHERE Airline = 'United Airlines' \n                                             AND DestAirport = 'AHD'\n---------------------------------------------------------------------------------------\n    1\n---------------------------------------------------------------------------------------\n\n# Let's just make this easier... \nSELECT  SELECT COUNT (*) FROM flights WHERE Airline = 'United Airlines'\n---------------------------------------------------------------------------------------\n    1\n---------------------------------------------------------------------------------------\n\n# Is 'AHD' the only airport from which United Airlines flies to? \nSELECT  SELECT COUNT (*) FROM flights WHERE Airline = 'United Airlines'\n                                            AND DestAirport NOT IN\n                                                ('AHD','PHL','JFK','DFW','LAX')\n---------------------------------------------------------------------------------------\n    0\n---------------------------------------------------------------------------------------\n\n# How many 'United Airlines' flights depart from Airport 'AHD'? \nSELECT  SELECT COUNT (*) FROM flights WHERE Airline = 'United Airlines'\n                                            AND DestAirport = 'AHD'\n---------------------------------------------------------------------------------------\n    1\n---------------------------------------------------------------------------------------\n"}
{"question": "Return the number of United Airlines flights leaving from AHD Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of United Airlines flights leaving from AHD Airport.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nReturn the number of United Airlines flights leaving from AHD Airport.. \nSELECT  SELECT COUNT(*) FROM  flights WHERE airline = 'UA';\n\"\"\"\n\nfrom mdb import mdb\nimport sqlite3\nimport sys\n\nflight_2 = sqlite3.connect(\"flight_2.db\")\ncursor = flight_2.cursor()\n\n#print \"load flight_2 from database:\"\n#cursor.execute(\"SELECT * FROM flights\")\n#print cursor.fetchone()\n\ncursor.execute(\"SELECT COUNT(*) FROM flights\")\nprint cursor.fetchone()\n\n#print \"close flight_2:\"\n#cursor.close()\n#flight_2.close()\n\nprint \"end of script\"\n\n"}
{"question": "How many United Airlines flights go to City 'Aberdeen'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many United Airlines flights go to City 'Aberdeen'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many United Airlines flights go to City 'Aberdeen'?. \nSELECT  SELECT Count(*) FROM flights WHERE airline='United' AND destination='Aberdeen'\nHow many people are on Flight #321? \nSELECT  SELECT SUM(passengers) FROM flights WHERE flightno='321'\nHow many flights are there between London and Manchester?. \nSELECT  SELECT Count(*) FROM flights WHERE airline='British Airways' AND destination='Manchester' OR destination='London'\nWrite a function that returns the number of flights that end up at some airport. \nSELECT  SELECT Count(*) FROM flights WHERE destination='Miami'\n\"\"\"\n\n\ndef functions():\n    from airport import *\n    from flight import *\n    return [\n        Function(r\"^SELECT .*\\n$\", \"SELECT\", \"_compile\"),\n        Function(\"^COUNT\\(.*\\)$\", \"Count\", \"_compile\"),\n        Function(\"^COUNT\\(\\w+\\)\\.+\\s+\\*\\.\\.\\s+\", \"Count\", \"_compile\"),\n        Function(\"^SUM\\(\\w+\\)\\.+\\s+\\*\\.\\.\\s+\", \"Sum\", \"_compile\"),\n        Function(\"^COUNT\\"}
{"question": "Count the number of United Airlines flights that arrive in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of United Airlines flights that arrive in Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nCount the number of United Airlines flights that arrive in Aberdeen.. \nSELECT  SELECT count(*) AS total_flights, airlines.Airline,\n\t\t\tairports.City, airports.AirportCode, airports.AirportName,\n\t\t\tairports.Country, airports.CountryAbbrev,\n\t\t\tflights.Airline, flights.FlightNo,\n\t\t\tflights.SourceAirport, flights.DestAirport\n\t\tFROM airlines,\n\t\t\tflights,\n\t\t\tairports\n\t\tWHERE airlines.Airline = flights.Airline\n\t\t\tAND airlines.Airline = 'United Airlines'\n\t\t\tAND flights.SourceAirport = airports.AirportCode\n\t\t\tAND flights.DestAirport = airports.AirportCode\n\t\tGROUP BY airlines.Airline, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport,"}
{"question": "Which city has most number of arriving flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has most number of arriving flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has most number of arriving flights?. \nSELECT  SELECT count(flights.Airline)\nFROM    flights\nWHERE   flights.DestAirport = '?City'\nAND     flights.Arrived = 1\nGROUP   BY airports.City\nORDER BY count(flights.Airline) DESC;\n\nWhich country has most number of flights?. \nSELECT  SELECT count(flights.Airline)\nFROM    flights\nWHERE   flights.DestAirport = '?' AND flights.Arrived = 1\nGROUP   BY countries.Country\nORDER BY count(flights.Airline) DESC;\n"}
{"question": "Which city has the most frequent destination airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has the most frequent destination airport?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has the most frequent destination airport?. \nSELECT  SELECT CountryAbbrev, Country, \n         ( SELECT COUNT(*) \n           FROM airports, airlines, flights,\n                 ( SELECT SourceAirport FROM flights ) AS s,\n                 ( SELECT DestAirport FROM flights ) AS d,\n                 ( SELECT City FROM airports ) AS c\n           WHERE City = c.City\n             AND airlines.Airline = airports.Airline\n             AND flights.SourceAirport = s.SourceAirport\n             AND flights.DestAirport = d.DestAirport\n             AND flights.FlightNo = s.FlightNo\n         ) AS Cnt\n    FROM airports, airlines, flights\n    WHERE ( SELECT DestAirport FROM flights ) = ?\n      AND ( SELECT SourceAirport FROM flights ) = ?\nGROUP BY CountryAbbrev, Country\nORDER BY Cnt DESC\nLIMIT 2\n"}
{"question": "Which city has most number of departing flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has most number of departing flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city has most number of departing flights?. \nSELECT  SELECT city, COUNT(flight) AS flight_count\nFROM  FROM flights\nWHERE  WHERE airport = 'CAN'\nGROUP BY  GROUP BY city\nORDER BY  ORDER BY flight_count DESC\nLIMIT  LIMIT 1\n"}
{"question": "Which city is the most frequent source airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city is the most frequent source airport?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich city is the most frequent source airport?. \nSELECT  SELECT  airportName AS sourceCity FROM airports GROUP BY airportName ORDER BY COUNT(*) DESC\nWhich city is the most frequent destination airport?. \nSELECT  SELECT  airportName AS destCity FROM airports GROUP BY airportName ORDER BY COUNT(*) DESC\nWhich city is the most frequent source airport for flight 720?. \nSELECT  SELECT  airportCity, COUNT(*) FROM flights WHERE flightNo = 720 GROUP BY airportCity\nWhich city is the most frequent destination airport for flight 720?. \nSELECT  SELECT  airportCity, COUNT(*) FROM flights WHERE flightNo = 720 GROUP BY airportCity\nWhich city is the most frequent source airport for the route from Paris to Moscow?. \nSELECT  SELECT  airportCity, COUNT(*) FROM flights WHERE flightNo = 720 AND sourceAirport = 'CDG' GROUP BY airportCity\nWhich city is the most frequent destination airport for the route from Paris to Moscow?. \nSELECT  SELECT  airportCity, COUNT(*) FROM flights WHERE flightNo = 720 AND destAirport = 'SV"}
{"question": "What is the code of airport that has the highest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the code of airport that has the highest number of flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the code of airport that has the highest number of flights?. \nSELECT  SELECT *  FROM airports a JOIN (SELECT  SELECT * FROM flights f  JOIN airlines ai ON f.airline = ai.uid)  ON a.airport = ai.sourceairport ORDER BY COUNT(*) DESC;\n# SAMPLE OUTPUT\nCity     AirportCode AirportName Country CountryAbbrev\nParis    CDG       Paris - Charles de Gaulle France France\nLA        LAX       Los Angeles  United States USA\n# SAMPLE OUTPUT\n# SELECT  SELECT *  FROM airports a JOIN (SELECT  SELECT * FROM flights f  JOIN airlines ai ON f.airline = ai.uid)  ON a.airport = ai.sourceairport ORDER BY COUNT(*) DESC;\n\n"}
{"question": "What is the airport code of the airport with the most flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the airport code of the airport with the most flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the airport code of the airport with the most flights?. \nSELECT  SELECT a.AirportCode, count(*) as num_flights FROM flights INNER JOIN airports ON flights.DestAirportCode = airports.AirportCode GROUP BY a.AirportCode ORDER BY num_flights DESC\n#or, in two lines:\nairports = session.query(airports).all()\nflights = session.query(flights).all()\nnum_flights = (flights.c.DestAirportCode==airports.c.AirportCode).count()\nfor a in airports:\n    print a.AirportCode + ' ' + str(num_flights[a])\n"}
{"question": "What is the code of airport that has fewest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the code of airport that has fewest number of flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the code of airport that has fewest number of flights?. \nSELECT  SELECT  SELECT  airports.City,  COUNT(*)  AS Number_Of_Flights,  MIN(Number_Of_Flights)  AS Fewest_Number_Of_Flights  FROM  airports INNER JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.Country = 'USA' GROUP BY airports.City ORDER BY Number_Of_Flights  DESC  LIMIT 1\n\nSELECT  SELECT  SELECT  COUNT(*)  AS Number_Of_Flights,  MIN(Number_Of_Flights)  AS Fewest_Number_Of_Flights  FROM  airports INNER JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.Country = 'USA' GROUP BY airports.City ORDER BY Number_Of_Flights  DESC  LIMIT 1\n\nSELECT  SELECT  SELECT  COUNT(*)  AS Number_Of_Flights,  MIN(Number_Of_Flights)  AS Fewest_Number_Of_Flights  FROM  airports INNER JOIN flights ON"}
{"question": "Give the code of the airport with the least flights.", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the code of the airport with the least flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the code of the airport with the least flights.. \nSELECT  SELECT count(*) AS count, airports.CountryAbbrev AS country, airports.City AS city\nFROM    airports\nGROUP BY airports.City, airports.CountryAbbrev\nORDER BY airports.City, airports.CountryAbbrev\nLIMIT  1\n"}
{"question": "Which airline has most number of flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airline has most number of flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airline has most number of flights?. \nSELECT  SELECT  airlines.uid, COUNT(*) FROM flights, airlines WHERE flights.Airline = airlines.uid\n#> 199062\n\n# How many cities do you have?. \n# (There are 3492 city names in the SQL flight_2 database)\nSELECT  SELECT  count(*) FROM airports\n#> 3492\n\n# Which airline has least number of flights?. \nSELECT  SELECT  airlines.uid, COUNT(*) FROM flights, airlines WHERE flights.Airline = airlines.uid\n#> 211728\n\n# Which city has most number of airports?. \nSELECT  SELECT  airports.City, COUNT(*) FROM airports\n#> London\n\n# Which city has least number of airports?. \nSELECT  SELECT  airports.City, COUNT(*) FROM airports\n#> Oslo\n\n# Which city has most number of flights?. \nSELECT  SELECT  airports.City, COUNT(*) FROM flights, airports WHERE flights.DestAirport = airports.City\n#> London\n\n# Which"}
{"question": "What airline serves the most flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat airline serves the most flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat airline serves the most flights?. \nSELECT  SELECT airlines.abbrev, count(flights.flightno) AS flight_count\nFROM  FROM airlines JOIN flights ON airlines.uid = flights.airline\nWHERE flights.airline = 'B6'\nGROUP BY  GROUP BY airlines.abbrev\nORDER BY  ORDER BY airlines.abbrev\n"}
{"question": "Find the abbreviation and country of the airline that has fewest number of flights?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the abbreviation and country of the airline that has fewest number of flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the abbreviation and country of the airline that has fewest number of flights?. \nSELECT  SELECT AirportCode, CountryAbbrev FROM Airports ORDER BY CountryAbbrev ASC LIMIT 1;\nSELECT  SELECT FlightNo FROM Flights WHERE AirportCode = $1 ORDER BY FlightNo LIMIT 1;\n#Total flights by airline is 5,803.\n#Airline with fewest flights has 4.\n##2.2.11: Calculate the average number of stops per flight.\n#Airline with fewest stops has 1.\n##2.2.12: Calculate the average flight duration.\n#Average flight duration is 8.39 hours.\n##2.2.13: Find the number of passengers who flew on at least one of the flights for each airline.\n#Airline with fewest passengers is ANA.\n##2.2.14: Find the most popular route, by number of passengers.\n#Most popular route is LGA - JFK.\n##2.2.15: Find the number of routes with a flight duration of at least 3 hours.\n#Number of routes with a flight duration of at least 3 hours is"}
{"question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the abbreviation of the airilne has the fewest flights and what country is it in?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat is the abbreviation of the airilne has the fewest flights and what country is it in?. \nSELECT  SELECT  'airlines','uid','Airline','Abbreviation','Country' FROM flight_2 WHERE  NOT (airlines.abbreviation IS NULL AND airlines.Country IS NULL)\n\n"}
{"question": "What are airlines that have some flight departing from airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airlines that have some flight departing from airport 'AHD'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airlines that have some flight departing from airport 'AHD'?. \nSELECT  SELECT  airline, COUNT(flightno)\nFROM    (\n        SELECT  airline,\n                flightno,\n                CASE WHEN sourceairport = 'AHD' THEN 1 ELSE 0 END AS destairport\n        FROM    flights\n        )\nWHERE   COUNT(destairport) = 0\n\n\n# Question 2:\n# What is the total number of flights in your table.\n#SELECT COUNT(*) FROM flights\n\n# Question 3:\n# What is the total number of passengers on all the flights in the table.\n#SELECT SUM(COUNT(flightno)) FROM flights\n\n# Question 4:\n# What is the total number of flights that were cancelled.\n#SELECT COUNT(CASE WHEN flightno = 'ZZZ999' THEN flightno ELSE NULL END) FROM flights\n\n# Question 5:\n# What is the total number of flights that arrived at airport 'AHD'.\n#SELECT COUNT(CASE WHEN sourceairport = 'AHD' THEN flightno ELSE NULL END) FROM flights\n\n# Question 6:\n# What is the total number of fl"}
{"question": "Which airlines have a flight with source airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have a flight with source airport AHD?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have a flight with source airport AHD?. \nSELECT  SELECT airlines.uid, airlines.Abbreviation\nFROM    airlines,\n        flights\nWHERE   flights.Airline = airlines.uid\nAND     flights.DestAirport = 'AHD';\n\n## Dijkstra's Shortest Path Algorithm:\nfind the shortest path from the airport codes AHD, BCN, CPH, DUS to the airport code LHR\n\nclass Solution:\n    def shortestPath(self, airports):\n        \"\"\"\n        :type airports: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        # 1. Build the flight graph: an edge will be added for each flight\n        # 2. Compute the shortest distance from each airport to each other airport\n        # 3. Compute the shortest paths from each airport to all other airports\n        # 4. Return the shortest path\n        \n        g = Graph()\n        for airport in airports:\n            airport_code = airport\n            g.add_node(airport_code)\n            # for each airport"}
{"question": "What are airlines that have flights arriving at airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airlines that have flights arriving at airport 'AHD'?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are airlines that have flights arriving at airport 'AHD'?. \nSELECT  SELECT 'Airline' AS property, \n        airlines.abbreviation AS value \n        FROM airlines, flights \n        WHERE airlines.uid = flights.airline AND flights.dest_airport_code = 'AHD';\n\n## What are airlines that have flights arriving at airport 'AHD'?. \nSELECT  SELECT 'Airline' AS property, \n        airlines.abbreviation AS value \n        FROM airlines, flights \n        WHERE airlines.uid = flights.airline AND flights.dest_airport_code = 'AHD'\nGROUP BY airlines.abbreviation;\n\n## What are airports that have flights arriving at airport 'AHD'?. \nSELECT  SELECT 'Airport' AS property, \n        airports.city AS value \n        FROM airports, flights \n        WHERE airports.airport_code = flights.dest_airport_code AND flights.dest_airport_code = 'AHD';\n\n## What are airports that have flights arriving at airport 'A"}
{"question": "Which airlines have a flight with destination airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have a flight with destination airport AHD?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have a flight with destination airport AHD?. \nSELECT  SELECT  * FROM    flights WHERE    SourceAirport = AHD\n\nWhich airports have a flight with destination airport AHD?. \nSELECT  SELECT  * FROM    flights WHERE    DestAirport = AHD\n\nWhich airlines have a flight with destination airport AHD?. \nSELECT  SELECT  * FROM    flights WHERE    SourceAirport IN ('NYC', 'LAX') AND DestAirport = AHD\n\nWhich airports have a flight with destination airport AHD?. \nSELECT  SELECT  * FROM    flights WHERE    DestAirport IN ('NYC', 'LAX') AND DestAirport = AHD\n\nWhich airlines have a flight with destination airport AHD?. \nSELECT  SELECT  * FROM    flights WHERE    SourceAirport IN ('NYC', 'LAX') AND DestAirport IN ('NYC', 'LAX') AND DestAirport = AHD\n\nWhich airports have a flight with destination airport AHD?. \nSELECT  SELECT  * FROM    flights WHERE    DestAirport IN ('NY"}
{"question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have flights from both airports 'APG' and 'CVO'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have flights from both airports 'APG' and 'CVO'.. \nSELECT  SELECT distinct a.Abbreviation, count(distinct b.SourceAirport) AS sAirports, count(distinct c.DestAirport) AS dAirports FROM airlines a, airports b, flights c WHERE a.Airline = c.Airline AND b.AirportCode = c.SourceAirport AND b.AirportCode = c.DestAirport\n\n\n\n}
{"question": "Which airlines have departing flights from both APG and CVO airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have departing flights from both APG and CVO airports?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have departing flights from both APG and CVO airports?. \nSELECT  SELECT * FROM airlines  WHERE  (Select Name FROM airports WHERE AirportCode = 'APG') AND (Select Name FROM airports WHERE AirportCode = 'CVO')\nWhat airlines are flying into CVO airport?. \nSELECT  SELECT * FROM airlines  WHERE  (Select Name FROM airports WHERE AirportCode = 'CVO')\n\nWhat airlines are flying into APG airport?. \nSELECT  SELECT * FROM airlines  WHERE  (Select Name FROM airports WHERE AirportCode = 'APG')\n\nWhat airports are serviced by American Airlines?. \nSELECT  SELECT * FROM airlines  WHERE  (Select Name FROM airports WHERE Abbreviation = 'AA')\n\nWhat airports are serviced by Air Canada?. \nSELECT  SELECT * FROM airlines  WHERE  (Select Name FROM airports WHERE Abbreviation = 'AC')\n\nWhat airports are serviced by Alaska Airlines?. \nSELECT  SELECT * FROM airlines  WHERE  (Select Name FROM airports WHERE Abbreviation = 'AS')\n\nWhat airports are serviced by Delta Airlines?. \nSELECT  SELECT * FROM airlines  WHERE  (Select Name"}
{"question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have flights from airport 'CVO' but not from 'APG'.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have flights from airport 'CVO' but not from 'APG'.. \nSELECT  SELECT airlines.uid\nFROM    flights, \n        airlines\nWHERE  airlines.airline = flights.airline\n       AND ( NOT EXISTS (\n               SELECT *\n               FROM    flights\n               WHERE  flights.flightno = 506\n                 AND flights.airline = airlines.airline\n                 AND flights.destairport = 'APG'\n           )\n        )\n       AND ( EXISTS (\n               SELECT *\n               FROM    flights\n               WHERE  flights.flightno = 427\n                 AND flights.airline = airlines.airline\n                 AND flights.destairport = 'CVO'\n           )\n        )\n\n"}
{"question": "Which airlines have departures from CVO but not from APG airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have departures from CVO but not from APG airports?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have departures from CVO but not from APG airports?. \nSELECT  SELECT  DISTINCT\nFROM    FROM    airlines\nJOIN    JOIN    flights\nON      ON      flights.airline = airlines.uid\nWHERE   WHERE   flights.airport = 'APG'\nAND     AND     flights.airport != 'CVO'\n\"\"\"\n\n# Clean up the data for the query\ndata = [\n    [\"Airline\", \"Abbreviation\", \"Country\"],\n    [\"Airline\", \"AirportCode\", \"AirportName\", \"Country\", \"CountryAbbrev\"],\n    [\"Airline\", \"FlightNo\", \"SourceAirport\", \"DestAirport\"]\n]\n\n# Make sure that the Airports' data is in the Airports table\nfor i,j in enumerate(data[0]):\n    if j != data[1][i]:\n        data[0][i] = j\n        data[1][i] = data[0][i]\n        data[2][i] = data[0][i]\n        data[3][i] = data[0][i]\n        data[4][i] ="}
{"question": "Find all airlines that have at least 10 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have at least 10 flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have at least 10 flights.. \nSELECT  SELECT Count(flights)\nFROM    SELECT airlines\nWHERE Count(flights)>=10;\n\nFind all airports that have at least 20 flights.. \nSELECT  SELECT Count(flights)\nFROM    SELECT airports\nWHERE Count(flights)>=20;\n\nFind all airlines that have more flights than airports.. \nSELECT  SELECT Count(flights)\nFROM    SELECT airlines\nWHERE Count(flights) > Count(airports);\n\n\n"}
{"question": "Which airlines have at least 10 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have at least 10 flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have at least 10 flights?. \nSELECT  SELECT  Select airlines.uid AS airline,COUNT(*) AS flight_count\nFROM    flights JOIN airlines ON flights.airline=airlines.uid \nGROUP   BY airlines.uid \nHAVING  flight_count > 10\nORDER   BY flight_count DESC\nLIMIT   1\n\nWhat are the airlines that have at least 10 flights each?. \nSELECT  SELECT  Select airlines.uid AS airline,COUNT(*) AS flight_count\nFROM    flights JOIN airlines ON flights.airline=airlines.uid \nGROUP   BY airlines.uid \nHAVING  flight_count > 10\nORDER   BY flight_count DESC\nLIMIT   10\n\nWhat are the airports that have the most flights each?. \nSELECT  SELECT  Select airports.City,COUNT(*) AS flight_count\nFROM    flights JOIN airports ON flights.DestAirport=airports.City \nGROUP   BY airports.City \nORDER   BY flight_count DESC\nLIMIT   1\n\nWhat are the airports that have the most flights each?."}
{"question": "Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have fewer than 200 flights.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind all airlines that have fewer than 200 flights.. \nSELECT  SELECT 'Airline', COUNT(1) AS \"TotalAirline\", COUNT(1)\nFROM flights\nGROUP BY 1\nHAVING COUNT(1) < 200\n\nFind all airlines that have more than 200 flights.. \nSELECT  SELECT 'Airline', COUNT(1) AS \"TotalAirline\", COUNT(1)\nFROM flights\nGROUP BY 1\nHAVING COUNT(1) > 200\n\nFind all airlines that have between 100 and 200 flights.. \nSELECT  SELECT 'Airline', COUNT(1) AS \"TotalAirline\", COUNT(1)\nFROM flights\nGROUP BY 1\nHAVING COUNT(1) BETWEEN 100 AND 200\n\nFind all airlines that have at least 100 and at most 200 flights.. \nSELECT  SELECT 'Airline', COUNT(1) AS \"TotalAirline\", COUNT(1)\nFROM flights\nGROUP BY 1\nHAVING COUNT(1) BETWEEN 100"}
{"question": "Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have less than 200 flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airlines have less than 200 flights?. \nSELECT  SELECT COUNT(*) AS count\nFROM    FROM airlines, flights\nWHERE   WHERE country != 'USA'\nAND      AND (country != 'USA' OR flightno IN (SELECT  SELECT COUNT(*) AS count\nFROM    FROM airlines, flights\nWHERE   WHERE country != 'USA'\nAND      AND (country != 'USA' OR flightno IN (SELECT  SELECT COUNT(*) AS count\nFROM    FROM airlines, flights\nWHERE   WHERE country != 'USA'\nAND      AND (country != 'USA' OR flightno IN (SELECT  SELECT COUNT(*) AS count\nFROM    FROM airlines, flights\nWHERE   WHERE country != 'USA'\nAND      AND (country != 'USA' OR flightno IN (SELECT  SELECT COUNT(*) AS count\nFROM    FROM airlines, flights\nWHERE   WHERE country != 'USA'\nAND      AND (country != 'USA' OR flightno IN (SELECT  SELECT COUNT(*) AS count\nFROM    FROM airlines, flights\nWHERE   WHERE country != 'USA'\nAND      AND (country != 'USA' OR flightno IN (SELECT  SELECT COUNT(*) AS count\nFROM    FROM airlines, flights\nWHERE  "}
{"question": "What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of Airline \"United Airlines\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of Airline \"United Airlines\"?. \n}
{"question": "Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich flight numbers correspond to United Airlines flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich flight numbers correspond to United Airlines flights?. \nSELECT  SELECT flights.Airline, flights.FlightNo\nFROM    flights\nWHERE   flights.Airline = 'UAL'\nORDER BY flights.FlightNo;\n\nSELECT  SELECT flights.Airline, flights.FlightNo\nFROM    flights\nWHERE   flights.Airline = 'UAL'\nORDER BY flights.FlightNo;\n\nSELECT  SELECT flights.Airline, flights.FlightNo\nFROM    flights\nWHERE   flights.Airline = 'UAL'\nORDER BY flights.FlightNo;\n\nSELECT  SELECT flights.Airline, flights.FlightNo\nFROM    flights\nWHERE   flights.Airline = 'UAL'\nORDER BY flights.FlightNo;\n\nSELECT  SELECT flights.Airline, flights.FlightNo\nFROM    flights\nWHERE   flights.Airline = 'UAL'\nORDER BY flights.FlightNo;\n\nSELECT  SELECT flights.Airline, flights.FlightNo\nFROM    flights\nWHERE  "}
{"question": "What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights departing from Airport \"APG\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights departing from Airport \"APG\"?. \n}
{"question": "Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights leaving from APG.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights leaving from APG.. \nSELECT  SELECT * FROM flights WHERE flights.FlightNo BETWEEN 'A1000' and 'A1999';\n#Hint: use \"WHERE\" instead of \"AND\"\n#Hint: Don't forget to convert the flight number to a string\n#Hint: Use SELECT * instead of specifying each column name\n"}
{"question": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights arriving at Airport \"APG\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights arriving at Airport \"APG\"?. \nSELECT  SELECT FROM  WHERE\n\n# Show all flights to/from Airport \"APG\" that landed on Friday, 19 July 2013, between 5:00pm and 6:00pm. \nSELECT  SELECT FROM  WHERE\n\n# Show all flights from/to Airport \"APG\" that landed on Friday, 19 July 2013, between 5:00pm and 6:00pm. \nSELECT  SELECT FROM  WHERE\n\n# Show all flights that landed at Airport \"APG\" between 5:00pm and 6:00pm on Friday, 19 July 2013. \nSELECT  SELECT FROM  WHERE\n\n# Show all flights that landed at Airport \"APG\" between 5:00pm and 6:00pm on Friday, 19 July 2013. \nSELECT  SELECT FROM  WHERE"}
{"question": "Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights landing at APG.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights landing at APG.. \nSELECT  SELECT  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM \n         airlines,\n         airports,\n         flights,\n         flight_2,\n         City,\n         Country,\n         CountryAbbrev,\n         SourceAirport,\n         DestAirport\nWHERE flight_2.Airline = airlines.uid\n  AND flight_2.SourceAirport = SourceAirport\n  AND flight_2.DestAirport = DestAirport\n  AND flights.FlightNo = flight_2.FlightNo\n  AND flight_2.City = airports.City\n  AND flights.Airline = airlines.uid\n  AND flights.FlightNo = flight_2.FlightNo\n  AND flight_2.Country = Country\n  AND flight_2.CountryAbbrev = CountryAbbrev\nORDER BY City, FlightNo\n\n# Give the flight numbers of flights landing at APG.. \nSELECT  SELECT  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM \n         airlines,\n         air"}
{"question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights departing from City \"Aberdeen \"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights departing from City \"Aberdeen \"?. \nSELECT  SELECT * FROM flights\nWHERE WHERE SourceAirport = \"ABR\" AND SourceAirport = \"ABR\"\nAND ( ( FlightNo = \"AB202\" ) \n    OR ( FlightNo = \"AB203\" )\n    OR ( FlightNo = \"AB204\" )\n    OR ( FlightNo = \"AB205\" )\n    OR ( FlightNo = \"AB206\" )\n    OR ( FlightNo = \"AB207\" )\n    OR ( FlightNo = \"AB208\" )\n    OR ( FlightNo = \"AB209\" )\n    OR ( FlightNo = \"AB210\" )\n    OR ( FlightNo = \"AB211\" )\n    OR ( FlightNo = \"AB212\" )\n    OR ( FlightNo = \"AB213\" )\n    OR ( FlightNo = \"AB214\" )\n    OR ( FlightNo = \"AB215\" )\n    OR ( FlightNo = \"AB216\" )\n    OR ("}
{"question": "Give the flight numbers of flights leaving from Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights leaving from Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights leaving from Aberdeen.. \nSELECT  SELECT 1  '1',\n        SELECT  SELECT 2  '2',\n        SELECT  SELECT 3  '3',\n        SELECT  SELECT 4  '4'\nFROM    (\n        SELECT  SELECT 1  '1'\n        UNION\n        SELECT  SELECT 2  '2'\n        UNION\n        SELECT  SELECT 3  '3'\n        UNION\n        SELECT  SELECT 4  '4'\n        ) T\n    WHERE  1 IN (SELECT  SELECT 1 FROM (SELECT  1 UNION ALL SELECT  2 UNION ALL SELECT  3 UNION ALL SELECT  4) T)\n         AND 2 IN (SELECT  SELECT 1 FROM (SELECT  1 UNION ALL SELECT  2 UNION ALL SELECT  3 UNION ALL SELECT  4) T)\n         AND 3 IN (SELECT  SELECT 1 FROM (SELECT  1 UNION ALL SELECT  2 UNION ALL SELECT  3 UNION ALL SELECT  4) T)\n         AND 4 IN (SELECT  SELECT 1 FROM (SELECT  1 UNION ALL SELECT  2 UNION ALL SELECT  3 UNION ALL SELECT  4) T);\n\n\n\n\n"}
{"question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights arriving at City \"Aberdeen\"?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhat are flight numbers of flights arriving at City \"Aberdeen\"?. \nSELECT  SELECT airports.CountryAbbrev AS CountryAbbrev,\n       SUM(flights.FlightNo) AS SumOfFlightNo\nFROM    airports INNER JOIN flights ON flights.DestAirport = airports.AirportCode\nWHERE   airports.City = 'Aberdeen'\nGROUP BY airports.CountryAbbrev\nHAVING  SumOfFlightNo > 1\n# =>\n# Aberdeen\n# 1\n# 1\n\nWhat is the total number of flights of all airlines arriving at City \"Aberdeen\"?. \nSELECT  SELECT airports.City AS City,\n       SUM(flights.FlightNo) AS SumOfFlightNo\nFROM    airports INNER JOIN flights ON flights.DestAirport = airports.AirportCode\nGROUP BY airports.City\n# =>\n# Aberdeen\n# 4\n\nWhat are flight numbers of flights arriving at City \"Aberdeen\" which are departing from airport \"Glasgow International Airport\"?. \nSELECT  SELECT airports.City AS City,\n       airports"}
{"question": "Give the flight numbers of flights arriving in Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights arriving in Aberdeen.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nGive the flight numbers of flights arriving in Aberdeen.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\nflights AS f\nINNER JOIN airlines AS a\nON a.uid = f.airline\nINNER JOIN airports AS a1\nON a1.uid = f.destairport\nWHERE f.flightno LIKE '46%'\nAND a1.city = 'Aberdeen'\nAND a.abbreviation = 'BMA'\nAND a.abbreviation = 'BMA'\nAND a1.abbreviation = 'BMA'\nORDER BY f.flightno\n\n"}
{"question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the number of flights landing in the city of Aberdeen or Abilene.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the number of flights landing in the city of Aberdeen or Abilene.. \nSELECT  SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'ABZ' OR DestAirport = 'ABI';\n#>>> 1\n\n"}
{"question": "How many flights land in Aberdeen or Abilene?", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights land in Aberdeen or Abilene?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nHow many flights land in Aberdeen or Abilene?. \nSELECT  SELECT * FROM airlines\nWHERE CountryAbbrev = 'AB' \nOR CountryAbbrev = 'ABL'\nORDER BY CountryAbbrev ASC\n\n# How many flights depart from Abilene or Aberdeen?. \nSELECT  SELECT * FROM airlines\nWHERE CountryAbbrev = 'AB' \nOR CountryAbbrev = 'ABL'\nORDER BY CountryAbbrev DESC\n\n\nHow many flights land in Abilene or Aberdeen?. \nSELECT  SELECT * FROM airports\nWHERE CountryAbbrev = 'AB' \nOR CountryAbbrev = 'ABL'\nORDER BY CountryAbbrev ASC\n\n# How many flights depart from Abilene or Aberdeen?. \nSELECT  SELECT * FROM airports\nWHERE CountryAbbrev = 'AB' \nOR CountryAbbrev = 'ABL'\nORDER BY CountryAbbrev DESC\n\n\nHow many flights land in Aberdeen or Abilene?. \nSELECT  SELECT * FROM flights\nWHERE Airline = 'AB' \nOR Airline = 'ABL'\nORDER BY Airline ASC\n\n# How"}
{"question": "Find the name of airports which do not have any flight in and out.", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the name of airports which do not have any flight in and out.. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nFind the name of airports which do not have any flight in and out.. \nSELECT  SELECT\n\n## SQL Flight_3, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\n#flight_dates('SourceAirport', 'DestAirport', 'date')\nFind the name of airports which do not have any flight in or out in past 5 years.. \nSELECT  SELECT\n"}
{"question": "Which airports do not have departing or arriving flights?", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "prompt": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airports do not have departing or arriving flights?. \nSELECT ", "response": "### SQLite SQL flight_2 database, with their properties:\n#airlines('uid', 'Airline', 'Abbreviation', 'Country')\n#airports('City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev')\n#flights('Airline', 'FlightNo', 'SourceAirport', 'DestAirport')\nWhich airports do not have departing or arriving flights?. \nSELECT  SELECT  City  FROM  airports\nWHERE  NOT EXISTS (SELECT  'Departure' FROM  flights\nWHERE  SourceAirport = City\nAND    SourceAirport is not null\nAND    DestAirport is null)\nAND    NOT EXISTS (SELECT  'Arrival' FROM  flights\nWHERE  DestAirport = City\nAND    DestAirport is not null\nAND    SourceAirport is null)\n\nWhich airports have departing flights but not arriving flights?.\nSELECT  City  FROM  airports\nWHERE  EXISTS (SELECT  'Departure' FROM  flights\nWHERE  SourceAirport = City\nAND    SourceAirport is not null\nAND    DestAirport is null)\nAND    NOT EXISTS (SELECT  'Arrival' FROM  flights\nWHERE  DestAirport = City\nAND    DestAirport is not null\nAND    SourceAirport is null)\n\nWhich airports have arriving flights but not departing flights?.\nSELECT  City  FROM  airports\nWHERE  EXISTS (SELECT  'Arrival' FROM  fl"}
{"question": "How many employees are there?", "sql": "SELECT count(*) FROM employee", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many employees are there?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many employees are there?. \nSELECT  SELECT COUNT(DISTINCT \"employee_hire_evaluation\".\"Employee_ID\")\nFROM    \"employee_hire_evaluation\"\n#How many employees are there?. \nSELECT  SELECT COUNT(DISTINCT \"employee_hire_evaluation\".\"Employee_ID\")\nFROM    \"employee_hire_evaluation\"\n#SELECT  SELECT COUNT(\"employee_hire_evaluation\".\"Employee_ID\")\n#FROM    \"employee_hire_evaluation\"\n#How many shops are there?. \nSELECT  SELECT COUNT(DISTINCT \"shop\".\"Shop_ID\")\nFROM    \"shop\"\n#How many shops are there?. \nSELECT  SELECT COUNT(DISTINCT \"shop\".\"Shop_ID\")\nFROM    \"shop\"\n#SELECT  SELECT COUNT(\"shop\".\"Shop_ID\")\n#FROM    \"shop\"\n#How many employees are there?. \nSELECT  SELECT COUNT(DISTINCT \"employee_hire_evaluation\".\"Employee_ID\")\nFROM    \"employee_hire_evaluation\"\n#How many employees are there?. \nSELECT  SELECT COUNT(DISTINCT \"employee_hire"}
{"question": "Count the number of employees", "sql": "SELECT count(*) FROM employee", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of employees. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of employees. \nSELECT  SELECT * FROM employee ORDER BY employee_id;\n\n##Now, count the number of shops.\nSELECT  SELECT COUNT(*) AS no_shop_id FROM shop;\n\n##Count the number of employees per shop.\nSELECT  SELECT * FROM hiring WHERE shop_id IN (SELECT shop_id FROM shop);\n\n##Count the number of employees hired since 2001.\nSELECT  SELECT * FROM hiring WHERE start_from > '2001-01-01';\n\n##Count the number of employees working full time.\nSELECT  SELECT * FROM hiring WHERE hiring_status = 'full_time';\n\n##Count the number of employees who were not awarded the highest bonus.\nSELECT  SELECT * FROM evaluation WHERE bonus != 'HIGHEST_BONUS';\n\n##Count the number of employees who were awarded the highest bonus.\nSELECT  SELECT * FROM evaluation WHERE bonus = 'HIGHEST_BONUS';\n\n##Count the number of employees working for shops in New York city.\nSELECT  SELECT * FROM hiring WHERE shop_id IN (SELECT shop_id FROM shop WHERE location = 'New York');"}
{"question": "Sort employee names by their age in ascending order.", "sql": "SELECT name FROM employee ORDER BY age", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nSort employee names by their age in ascending order.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nSort employee names by their age in ascending order.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nemployee_ID,  employee_ID,  employee_ID,  employee_ID,  employee_ID,  employee_ID,  employee_ID,\nName,  Name,  Name,  Name,  Name,  Name,\nAge,  Age,  Age,  Age,  Age,  Age,\nCity,  City,  City,  City,  City,  City,\nShop_ID,  Shop_ID,  Shop_ID,  Shop_ID,  Shop_ID,  Shop_ID,\nStart_from,  Start_from,  Start_from,  Start_from,  Start_from,  Start_from,\nIs_full_time,  Is_full_time,  Is_full_time,  Is_full_time,  Is_full_time,  Is_full_time,\nYear_awarded,  Year_awarded,  Year_awarded,  Year_awarded,  Year_awarded,  Year_awarded\nFROM"}
{"question": "List the names of employees and sort in ascending order of age.", "sql": "SELECT name FROM employee ORDER BY age", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nList the names of employees and sort in ascending order of age.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nList the names of employees and sort in ascending order of age.. \nSELECT  SELECT Employee_ID, \n        Name, \n        Age \nFROM    employee_hire_evaluation \nORDER BY  Age\n\n### Extracts all rows that contain an 'i' (case sensitive) in the Name column \nSELECT  SELECT * \nFROM    employee_hire_evaluation \nWHERE   Name \n        LIKE '%i%' \n\n### Extracts all rows that contain an 'i' (case sensitive) in the Name column \nSELECT  SELECT * \nFROM    employee_hire_evaluation \nWHERE   Name \n        LIKE '%i%' \nAND     Age > 20\n\n### Selects all employees who are over 40 years old and are from the Shop with ID 7. \nSELECT  SELECT * \nFROM    employee_hire_evaluation \nWHERE   Age > 40 \nAND     Shop_ID = 7\n\n### Selects the year of evaluation. \nSELECT  SELECT Year_awarded \nFROM    evaluation \n\n### Selects all employees who have been awarded a bonus \nSELECT  SELECT * \nFROM    evaluation"}
{"question": "What is the number of employees from each city?", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is the number of employees from each city?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is the number of employees from each city?. \nSELECT  SELECT employee_city, COUNT(employee_city) FROM employee GROUP BY employee_city;\n# SELECT  SELECT employee_city, COUNT(employee_city) FROM employee GROUP BY employee_city;\n# City, Total\n# Lala, 6\n# Jia, 3\n# San, 2\n# 6, 3, 2\nWhat is the number of employees who have their own cars?. \nSELECT  SELECT employee_car, COUNT(employee_car) FROM employee WHERE employee_car != 'null' GROUP BY employee_car;\n# SELECT  SELECT employee_car, COUNT(employee_car) FROM employee WHERE employee_car != 'null' GROUP BY employee_car;\n# car, Total\n# null, 17\n# Toyota, 1\n# Ford, 1\n# 17, 1, 1\nWhat is the number of employees who are married?. \nSELECT  SELECT employee_married, COUNT(employee_married) FROM employee GROUP BY employee_married;\n# SELECT  SELECT employee_married, COUNT(employee_married) FROM employee GROUP BY employee_married;\n# Married, Total"}
{"question": "Count the number of employees for each city.", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of employees for each city.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of employees for each city.. \nSELECT  SELECT Shop_ID, COUNT(Employee_ID) AS number_employees FROM evaluation GROUP BY Shop_ID\n\n\"\"\"\n\nimport sqlite3\nimport sys\n\nconn = sqlite3.connect(\"sqlite.db\")\nc = conn.cursor()\n\nc.execute(\"CREATE TABLE IF NOT EXISTS shop(shop_id INTEGER PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INTEGER, Manager_name TEXT)\")\nc.execute(\"CREATE TABLE IF NOT EXISTS employee(Employee_ID INTEGER PRIMARY KEY, Name TEXT, Age INTEGER, City TEXT)\")\nc.execute(\"CREATE TABLE IF NOT EXISTS hiring(Shop_ID INTEGER PRIMARY KEY, Employee_ID INTEGER, Start_from INTEGER, Is_full_time INTEGER)\")\nc.execute(\"CREATE TABLE IF NOT EXISTS evaluation(Employee_ID INTEGER, Year_awarded INTEGER, Bonus INTEGER)\")\n\n# Insert some data.\nc.execute(\"INSERT INTO shop(Name, Location, District, Number_products, Manager_name) VALUES (?, ?, ?, ?"}
{"question": "Which cities do more than one employee under age 30 come from?", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich cities do more than one employee under age 30 come from?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich cities do more than one employee under age 30 come from?. \nSELECT  SELECT shop.Location AS shop_location, \n        COUNT(shop.Location) AS shop_location_count, \n        MIN(shop.Location) AS shop_location_min, \n        MAX(shop.Location) AS shop_location_max \nFROM shop, \n    employee,\n    hiring, \n    evaluation \nWHERE shop.Shop_ID = hiring.Shop_ID \nAND shop.Shop_ID = evaluation.Shop_ID \nAND employee.Employee_ID = hiring.Employee_ID \nAND shop.Number_products > 10 \nAND shop.Location = 'London' \nAND shop.District = 'Finsbury' \nAND shop.Location IS NOT NULL \nAND shop.Number_products IS NOT NULL \nAND shop.Location IS NOT NULL \nAND shop.District IS NOT NULL \nAND shop.Location <> '' \nAND shop.District <> '' \nAND shop.Location <> ' ' \nAND shop.District <> ' ' \nAND shop.Number_products > 5 \nAND shop.Number_products < 5"}
{"question": "Find the cities that have more than one employee under age 30.", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the cities that have more than one employee under age 30.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the cities that have more than one employee under age 30.. \nSELECT  SELECT shop.Name, COUNT(*) AS Number_of_employees_under_30 \nFROM    shop \nJOIN    employee_hire_evaluation \nON      shop.Shop_ID = employee_hire_evaluation.Shop_ID \nWHERE   shop.Number_products > 1 \nAND     employee_hire_evaluation.Year_awarded BETWEEN 2000 AND 2004 \nAND     employee_hire_evaluation.Employee_ID <= 30 \nGROUP BY shop.Name \nHAVING   COUNT(*) > 1;\n\n\n# Find the number of Shops in district '1'\nSELECT  SELECT COUNT(*) AS Number_of_Shops_in_district_1 \nFROM    shop \nWHERE   shop.Location = 'District_1' \nGROUP BY shop.Shop_ID \nHAVING   COUNT(*) > 1;\n\n"}
{"question": "Find the number of shops in each location.", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the number of shops in each location.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the number of shops in each location.. \nSELECT  SELECT shop.Location,\n        count(shop.Location) AS No_Shops\nFROM    employee hire\n        INNER JOIN hiring ON hire.Shop_ID = hiring.Shop_ID\n        INNER JOIN shop ON shop.Shop_ID = hiring.Shop_ID\nWHERE   shop.Location IS NOT NULL\nGROUP BY shop.Location\nORDER BY No_Shops DESC\n*/\n\nSELECT shop.Location, count(shop.Location) AS No_Shops\nFROM employee_hire_evaluation hire\n    INNER JOIN employee ON employee.Employee_ID = hire.Employee_ID\n    INNER JOIN shop ON shop.Shop_ID = hire.Shop_ID\nWHERE shop.Location IS NOT NULL\nGROUP BY shop.Location\nORDER BY No_Shops DESC;\n\n\n\n"}
{"question": "How many shops are there in each location?", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many shops are there in each location?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many shops are there in each location?. \nSELECT  SELECT shop_id, COUNT(DISTINCT shop_id) FROM shop GROUP BY shop_id \nHINT:  SELECT COUNT(DISTINCT shop_id) FROM shop GROUP BY shop_id \n\nHow many shops have exactly 3 different locations?. \nSELECT  SELECT shop_id, COUNT(*) FROM shop GROUP BY shop_id HAVING COUNT(*) = 3 \nHINT:  SELECT COUNT(*) FROM shop GROUP BY shop_id HAVING COUNT(*) = 3 \n\nHow many shops have more than 100 different products?. \nSELECT  SELECT shop_id, COUNT(*) FROM shop GROUP BY shop_id HAVING COUNT(*) > 100 \nHINT:  SELECT COUNT(*) FROM shop GROUP BY shop_id HAVING COUNT(*) > 100 \n\nHow many shops have more than 100 different products and a manager whose name starts with a letter?. \nSELECT  SELECT shop_id, COUNT(*) FROM shop GROUP BY shop_id HAVING COUNT(*) > 100 AND shop_manager_name LIKE '[A-Z]%' \nHINT:  SELECT COUNT(*) FROM"}
{"question": "Find the manager name and district of the shop whose number of products is the largest.", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the manager name and district of the shop whose number of products is the largest.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the manager name and district of the shop whose number of products is the largest.. \nSELECT  SELECT shop_id, manager_name, district  FROM shop  WHERE number_products = ( \n                                                                                           SELECT  SELECT max(number_products) FROM shop  );\n\"\"\"\n\n\ndef find_the_max_product_shop(db_file_name):\n    db = sqlite3.connect(db_file_name)\n    with db:\n        c = db.cursor()\n        c.execute(\"SELECT shop_id, manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);\")\n        shop_info = c.fetchone()\n        print \"The shop info is %s, and the district is %s\" % (shop_info, shop_info['district'])\n    db.close()\n"}
{"question": "What are the manager name and district of the shop that sells the largest number of products?", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the manager name and district of the shop that sells the largest number of products?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the manager name and district of the shop that sells the largest number of products?. \nSELECT  SELECT shop.Manager_name, \n          SELECT shop.District\n          FROM   shop\n          JOIN   hiring\n          ON     hiring.Shop_ID = shop.Shop_ID\n          JOIN   employee\n          ON     employee.Employee_ID = hiring.Employee_ID\n          JOIN   evaluation\n          ON     evaluation.Employee_ID = employee.Employee_ID\n          JOIN   shop\n          ON     shop.Shop_ID = evaluation.Shop_ID\n          WHERE  evaluation.Year_awarded = (SELECT MAX(evaluation.Year_awarded)\n                                            FROM   evaluation\n                                            GROUP  BY Shop_ID)\n"}
{"question": "find the minimum and maximum number of products of all stores.", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nfind the minimum and maximum number of products of all stores.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nfind the minimum and maximum number of products of all stores.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What are the minimum and maximum number of products across all the shops?", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the minimum and maximum number of products across all the shops?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the minimum and maximum number of products across all the shops?. \nSELECT  SELECT shop.Location, shop.Number_products FROM shop;\n# [['London', 10], ['Bristol', 15], ['Manchester', 20]]\nWhat is the minimum number of products across all the shops?\nSELECT MIN(shop.Number_products) AS min_products FROM shop;\n# 10\nWhat is the maximum number of products across all the shops?\nSELECT MAX(shop.Number_products) AS max_products FROM shop;\n# 20\nWhat is the difference between the maximum and minimum number of products across all the shops?\nSELECT MAX(shop.Number_products) - MIN(shop.Number_products) AS max_products_diff FROM shop;\n# 10\nWhat is the highest bonus given across all the shops?.\nSELECT  SELECT evaluation.Bonus FROM evaluation;\n# [250, 100]\nWhat is the minimum bonus given across all the shops?\nSELECT MIN(evaluation.Bonus) AS min_bonus FROM evaluation;\n# 250\nWhat is the maximum bonus given across all the shops?\n"}
{"question": "Return the name, location and district of all shops in descending order of number of products.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nReturn the name, location and district of all shops in descending order of number of products.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nReturn the name, location and district of all shops in descending order of number of products.. \nSELECT  SELECT shop_name, \n        shop_location,\n        shop_district\n        FROM  shop\n        ORDER BY shop_number_products DESC;\n"}
{"question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nSort all the shops by number products in descending order, and return the name, location and district of each shop.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nSort all the shops by number products in descending order, and return the name, location and district of each shop.. \nSELECT  SELECT shop_id, name, location, district FROM shop ORDER BY number_products DESC;\n\"SELECT shop_id, name, location, district FROM shop ORDER BY number_products DESC\" \u4e0d\u7528\u600e\u4e48\u628a?\n\"\"SELECT\"\"\u662fSQL\u8bed\u53e5\u7684\u5f00\u59cb\u7b26,\u5b83\u8868\u793a\u5f53\u524d\u8bed\u53e5\u662f\u4e00\u4e2aSQL\u8bed\u53e5.\n\"SHOP\"\u662f\u8868\u540d,\u548c\"NAME,LOCATION,DISTRICT\"\u662f\u5217\u540d. \n\"ORDER BY\"\u662fSQL\u8bed\u53e5\u4e2d\u6700\u5e38\u89c1\u7684\u6392\u5e8f\u5b50\u53e5, \u5f53\u524d\u8868\u4e2d\u7684\u5b57\u6bb5\u540d\u548c\u5b57\u6bb5\u7c7b\u578b\u4e5f\u5728\"ORDER BY\"\u5b50\u53e5\u4e2d. \n\u4f7f\u7528SHOP(\u8868\u540d)\u548cNAME,LOCATION,DISTRICT(\u5217\u540d)\u5b9e\u73b0\u6392\u5e8f, \u5f53\u524d\u67e5\u8be2\u7684\u7ed3\u679c\u662f\u6309\u7167\u8868\u4e2d\u5b57\u6bb5\u540d\u548c\u7c7b\u578b\u7684\u6392\u5e8f. \n\u6392\u5e8f\u7ed3\u679c\u65f6,\u5373\u4f7f\u6570\u636e\u4e2d\u6709\u91cd\u590d\u7684\u503c,\u4e5f\u662f\u53ef\u80fd\u7684,\u8fd9\u6837\u7684"}
{"question": "Find the names of stores whose number products is more than the average number of products.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the names of stores whose number products is more than the average number of products.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the names of stores whose number products is more than the average number of products.. \nSELECT  SELECT shop_id, AVG(number_products) AS average FROM shop GROUP BY shop_id\n\n\nFind the employees whose ages are less than the average age.\nSELECT  SELECT employee_id, AVG(age) AS average FROM employee GROUP BY employee_id"}
{"question": "Which shops' number products is above the average? Give me the shop names.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shops' number products is above the average? Give me the shop names.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shops' number products is above the average? Give me the shop names.. \nSELECT  SELECT_shop.shop_id, shop_name,\n         AVG(SELECT_shop.number_products)\nFROM    (SELECT shop_id, shop_name, number_products,\n                  AVG(number_products) AS number_products_avg\n        FROM   shop_products) AS SELECT_shop\nGROUP   BY shop_id, shop_name, number_products_avg\nHAVING  number_products_avg >= (SELECT AVG(number_products)\n                                 FROM shop_products)\n"}
{"question": "find the name of employee who was awarded the most times in the evaluation.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nfind the name of employee who was awarded the most times in the evaluation.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nfind the name of employee who was awarded the most times in the evaluation.. \nSELECT  SELECT  shop_name AS \"Name\", shop_location, shop_district, shop_number_of_products, shop_manager_name,\n            COUNT(*) AS \"Number_of_Awards\", \nFROM  FROM  shop,\n             hiring,\n             evaluation,\n             employee\nWHERE  WHERE  shop.shop_id = hiring.shop_id\n            AND  AND  shop.shop_id = evaluation.shop_id\n            AND  AND  shop.shop_id = employee.employee_id\n            AND  AND  hiring.hiring_year >= '1990'\n            AND  AND  hiring.hiring_year <= '2010'\n            AND  AND  hiring.is_full_time = 'true'\n            AND  AND  hiring.start_from <= '1990'\n            AND  AND  hiring.start_from >= '1990'\n            AND  AND  evaluation.evaluation_year >= '1990'\n            AND  AND  evaluation.evaluation_year <= '2010'\n            AND  AND  evaluation"}
{"question": "Which employee received the most awards in evaluations? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich employee received the most awards in evaluations? Give me the employee name.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich employee received the most awards in evaluations? Give me the employee name.. \nSELECT  SELECT  SELECT \n  SELECT  employee_hire_evaluation.employee_id,\n  employee_hire_evaluation.shop_id,\n  employee_hire_evaluation.year_awarded,\n  employee_hire_evaluation.bonus\nFROM employee_hire_evaluation\nGROUP BY employee_hire_evaluation.employee_id,\nemployee_hire_evaluation.shop_id,\nemployee_hire_evaluation.year_awarded,\nemployee_hire_evaluation.bonus\nORDER BY employee_hire_evaluation.year_awarded DESC;\n# SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shop awarded the most bonuses to employees in evaluations"}
{"question": "Find the name of the employee who got the highest one time bonus.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the name of the employee who got the highest one time bonus.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the name of the employee who got the highest one time bonus.. \nSELECT  SELECT shop_id, bonus,\nFROM    hiring JOIN evaluation\nON hiring.employee_id = evaluation.employee_id\nJOIN shop ON shop_id = shop.shop_id\nWHERE  shop.city = 'NYC'  AND year_awarded = 2008\nORDER BY bonus DESC; \n"}
{"question": "Which employee received the biggest bonus? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich employee received the biggest bonus? Give me the employee name.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich employee received the biggest bonus? Give me the employee name.. \nSELECT  SELECT\nFROM    hiring\n        INNER JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID\n        INNER JOIN shop ON evaluation.Shop_ID = shop.Shop_ID\n        INNER JOIN employee ON shop.Shop_ID = employee.Shop_ID\n        INNER JOIN shop ON shop.Location = 'London'\nWHERE (shop.Number_products BETWEEN 50 AND 150)\nAND (shop.Location = 'London')\nAND (evaluation.Year_awarded = 2011)\nAND (evaluation.Bonus = 20000)\nORDER BY bonus DESC\n\n"}
{"question": "Find the names of employees who never won any award in the evaluation.", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the names of employees who never won any award in the evaluation.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the names of employees who never won any award in the evaluation.. \nSELECT  SELECT  * FROM  SELECT  employees.Name AS Emp_Name, \n                         shop_name AS Shop_Name, \n                         shop_id AS Shop_ID, \n                         start_from AS Start_From, \n                         is_full_time AS Is_Full_Time, \n                         evaluation.bonus AS Bonus \nFROM employees \nINNER JOIN shop_employees ON shop_employees.employee_id = employees.Employee_ID \nINNER JOIN shop ON shop_id = shop_employees.shop_id \nINNER JOIN evaluation ON evaluation.shop_id = shop_id AND evaluation.employee_id = employees.Employee_ID \nWHERE \n  evaluation.Employee_ID NOT IN (SELECT  employee_ID  FROM  evaluation \n                                  WHERE  bonus != 0) \nGROUP BY shop_id, \n         shop_name, \n         start_from, \n         is_full_time, \n         bonus \nHAVING \n  COUNT(*) = (SELECT  COUNT(DISTINCT shop_id)  FROM  shop_emp"}
{"question": "What are the names of the employees who never received any evaluation?", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the names of the employees who never received any evaluation?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat are the names of the employees who never received any evaluation?. \nSELECT  SELECT  SELECT  SELECT\nEMPLOYEE_ID,  EMPLOYEE_ID,  EMPLOYEE_ID,  EMPLOYEE_ID\nFROM  FROM  FROM  FROM\nEMPLOYEE_HIRE_EVALUATION  EMPLOYEE_HIRE_EVALUATION  EMPLOYEE_HIRE_EVALUATION  EMPLOYEE_HIRE_EVALUATION\nWHERE  WHERE  WHERE  WHERE\nEMPLOYEE_ID  EMPLOYEE_ID  EMPLOYEE_ID  EMPLOYEE_ID\nNOT  IN  NOT  IN  NOT  IN\n(  SELECT  SELECT  SELECT  SELECT\nFROM  FROM  FROM  FROM\nEMPLOYEE_HIRE_EVALUATION  EMPLOYEE_HIRE_EVALUATION  EMPLOYEE_HIRE_EVALUATION  EMPLOYEE_HIRE_EVALUATION\nWHERE  WHERE  WHERE  WHERE\nBONUS  BONUS  BONUS  BONUS\n< "}
{"question": "What is the name of the shop that is hiring the largest number of employees?", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is the name of the shop that is hiring the largest number of employees?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is the name of the shop that is hiring the largest number of employees?. \nSELECT  SELECT shop_id, COUNT(hiring.shop_id)\nFROM    FROM shop AS shop\n        JOIN hiring AS hiring ON shop.shop_id = hiring.shop_id\nGROUP   GROUP BY shop_id\nORDER BY ORDER BY COUNT(hiring.shop_id) DESC\nLIMIT  LIMIT 1\n"}
{"question": "Which shop has the most employees? Give me the shop name.", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shop has the most employees? Give me the shop name.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shop has the most employees? Give me the shop name.. \nSELECT  SELECT  shop_id, count(*) AS number_of_employees FROM evaluation  GROUP BY shop_id ORDER BY number_of_employees DESC\n\nWhich shop has the oldest employee? Give me the shop name and his age. \nSELECT  shop_id, min(year_awarded) AS year_oldest_employee FROM evaluation  GROUP BY shop_id ORDER BY year_oldest_employee DESC\n\nWhich shop has the most employees under 30 years old? Give me the shop name and the number of employees under 30. \nSELECT  shop_id, count(*) AS number_of_young_employees FROM evaluation  WHERE year_oldest_employee < 30  GROUP BY shop_id \n\n### Your code goes here\n\ndef get_number_of_employees(shop_id):\n  shop_id = int(shop_id)\n  cursor.execute(\"SELECT count(*) FROM evaluation WHERE shop_id = %s\", [shop_id])\n  number_of_employees = cursor.fetchone()\n  return number_of_employees[0]\n\n"}
{"question": "Find the name of the shops that do not hire any employee.", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the name of the shops that do not hire any employee.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the name of the shops that do not hire any employee.. \nSELECT  SELECT shop.name\nFROM    shop JOIN hiring USING (shop_id)\nWHERE   shop_id IS NULL\n\nFind the number of employees of the shops that has more than 10 employees..\nSELECT  SELECT COUNT(employee_id)\nFROM    shop JOIN hiring USING (shop_id)\nGROUP BY shop.shop_id\nHAVING COUNT(employee_id) > 10\n\nFind the average number of employees for the last three years..\nSELECT  SELECT AVG(evaluation.bonus)\nFROM    shop JOIN hiring USING (shop_id) JOIN evaluation USING (shop_id, year_awarded)\nWHERE   shop.shop_id IS NOT NULL\nAND     evaluation.year_awarded BETWEEN 2005 AND 2007\nGROUP BY shop.shop_id\n\nFind the shop which has the highest number of products in 2006..\nSELECT  SELECT shop.shop_id\nFROM    shop JOIN hiring USING (shop_id) JOIN evaluation USING (shop_id, year_awarded)\nWHERE   shop.shop_id"}
{"question": "Which shops run with no employees? Find the shop names", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shops run with no employees? Find the shop names. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich shops run with no employees? Find the shop names. \nSELECT  SELECT shop_name FROM shop WHERE shop_name IS NULL;\n\nWhich shops have the most employees? Find the shop name and number of employees. \nSELECT  SELECT shop_name, COUNT(*) AS total_number_of_employees FROM employee GROUP BY shop_name ORDER BY total_number_of_employees DESC;\n\nWhich shops hired the most employees over the last year? Find the shop name and the number of employees. \nSELECT  SELECT shop_name, COUNT(*) AS total_number_of_hired FROM hiring GROUP BY shop_name ORDER BY total_number_of_hired DESC;\n\n## Use a subquery to find shops that had no hires over the last year. \nSELECT  SELECT shop_name FROM shop WHERE shop_name NOT IN (SELECT shop_name FROM hiring);\n\n## Use a subquery to find shops with the most hired over the last year. \nSELECT  SELECT shop_name FROM shop WHERE shop_name IN (SELECT shop_name FROM hiring GROUP BY shop_name ORDER BY total_number_of_hired DESC);\n\n## Use a subquery to find employees"}
{"question": "Find the number of employees hired in each shop; show the shop name as well.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the number of employees hired in each shop; show the shop name as well.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the number of employees hired in each shop; show the shop name as well.. \nSELECT  SELECT Shop_ID, count(hiring.Employee_ID) FROM hiring GROUP BY Shop_ID\n\n# Find the top 3 oldest employees (in terms of age) in each shop. \nSELECT  SELECT Shop_ID, employee.Age FROM employee WHERE Age = (SELECT MAX(Age) FROM employee WHERE Age < 50 AND Shop_ID = 1)\nSELECT  SELECT Shop_ID, employee.Age FROM employee WHERE Age = (SELECT MAX(Age) FROM employee WHERE Age < 50 AND Shop_ID = 2)\nSELECT  SELECT Shop_ID, employee.Age FROM employee WHERE Age = (SELECT MAX(Age) FROM employee WHERE Age < 50 AND Shop_ID = 3)\n"}
{"question": "For each shop, return the number of employees working there and the name of the shop.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFor each shop, return the number of employees working there and the name of the shop.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFor each shop, return the number of employees working there and the name of the shop.. \nSELECT  SELECT shop.shop_id, COUNT(shop.shop_id) AS no_employee\nFROM employee\nJOIN hiring ON shop.shop_id = hiring.shop_id\nGROUP BY shop.shop_id;\n# show only the top 10 shops that have at least 10 employees.\nORDER BY no_employee DESC\nLIMIT 10;\n\n#Show the names of the managers in the top 10 shops with most employees.\nSELECT name FROM shop JOIN shop.manager_name AS m1;\n\n#Show the 10 managers with the highest bonus.\nSELECT shop.name, MAX(bonus) AS bonus FROM evaluation\nGROUP BY shop.shop_id;\n\n# Show the 10 shops with the highest bonus, with their managers\nSELECT shop.name, shop.name AS shop_name, shop.manager_name AS manager_name, MAX(bonus) AS bonus\nFROM evaluation\nGROUP BY shop.shop_id;\n\n# Show the shop with the highest bonus and the manager's name.\nSELECT shop.name, shop.manager_name, MAX(bonus) AS bonus"}
{"question": "What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is total bonus given in all evaluations?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is total bonus given in all evaluations?. \nSELECT  SELECT COUNT(bonus) FROM evaluation WHERE  bonus IS NOT NULL;\nWhat is the employee id of the employee who gets the highest bonus?.\nSELECT  SELECT employee_id FROM evaluation WHERE  bonus = (SELECT MAX(bonus) FROM evaluation);\nWhat is the name of the employee with the highest bonus?.\nSELECT  SELECT name FROM employee WHERE  Employee_ID = (SELECT employee_id FROM evaluation WHERE  bonus = (SELECT MAX(bonus) FROM evaluation));\nWhat is the total number of employees?.\nSELECT  SELECT COUNT(employee_id) FROM employee;\nWhat is the name of the employee who is awarded a bonus in the most recent evaluation year?.\nSELECT  SELECT name FROM employee WHERE  Year_awarded = (SELECT MAX(Year_awarded) FROM evaluation);\nWhat is the age of the employee who is awarded a bonus in the most recent evaluation year?.\nSELECT  SELECT age FROM employee WHERE  Year_awarded = (SELECT MAX(Year_awarded) FROM evaluation);\nWhat is the sum of bonuses given to all employees in the most recent evaluation year?.\nSELECT  SELECT SUM(bonus) FROM evaluation WHERE  Year_awarded = ("}
{"question": "Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the total amount of bonus given in all the evaluations.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the total amount of bonus given in all the evaluations.. \nSELECT  SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as total_bonus\nFROM    SELECT count(*) as"}
{"question": "Give me all the information about hiring.", "sql": "SELECT * FROM hiring", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nGive me all the information about hiring.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nGive me all the information about hiring.. \nSELECT  SELECT * FROM hiring WHERE Shop_ID = '1' \nGive me all the information about hiring.. \nSELECT  SELECT * FROM hiring WHERE Shop_ID = '1' \nGive me all the information about hiring.. \nSELECT  SELECT * FROM hiring WHERE Shop_ID = '1' \nGive me all the information about hiring.. \nSELECT  SELECT * FROM hiring WHERE Shop_ID = '1' \nGive me all the information about hiring.. \nSELECT  SELECT * FROM hiring WHERE Shop_ID = '1' \nGive me all the information about hiring.. \nSELECT  SELECT * FROM hiring WHERE Shop_ID = '1' \nGive me all the information about hiring.. \nSELECT  SELECT * FROM hiring WHERE Shop_ID = '1' \nGive me all the information about hiring.. \nSELECT  SELECT * FROM hiring WHERE Shop_ID = '1' \nGive me all the information about hiring.. \nSELECT  SELECT * FROM hiring WHERE Shop_ID = '1' \nG"}
{"question": "What is all the information about hiring?", "sql": "SELECT * FROM hiring", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is all the information about hiring?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhat is all the information about hiring?. \nSELECT  SELECT * FROM evaluation e LEFT OUTER JOIN hiring h ON e.Employee_ID = h.Employee_ID AND e.Year_awarded = h.Start_from WHERE e.Employee_ID = '110' AND e.Year_awarded = '2017'\n\nSELECT  SELECT * FROM evaluation e LEFT OUTER JOIN hiring h ON e.Employee_ID = h.Employee_ID AND e.Year_awarded = h.Start_from WHERE e.Employee_ID = '110' AND e.Year_awarded = '2017'\nSELECT  SELECT * FROM evaluation e LEFT OUTER JOIN hiring h ON e.Employee_ID = h.Employee_ID AND e.Year_awarded = h.Start_from WHERE e.Employee_ID = '110' AND e.Year_awarded = '2017'\nSELECT  SELECT * FROM evaluation e LEFT OUTER JOIN hiring h ON e.Employee_ID = h.Employee_ID AND e.Year_awarded = h.Start_from WHERE e.Employee_ID = '110' AND e"}
{"question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich district has both stores with less than 3000 products and stores with more than 10000 products?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nWhich district has both stores with less than 3000 products and stores with more than 10000 products?. \nSELECT  SELECT shop_id\n    FROM   shop\n    WHERE  shop_id IN\n    (\n        SELECT shop_id\n            FROM shop\n            WHERE Number_products <= 3000\n        UNION ALL\n        SELECT shop_id\n            FROM shop\n            WHERE Number_products >= 10000\n    )\n    AND district = 'Zizhuyuan'\n\n"}
{"question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nFind the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.. \nSELECT  SELECT shop.district\nFROM    shop\nWHERE   shop.number_products < 3000 AND shop.number_products > 10000\nGROUP   BY shop.district\nHAVING  COUNT(*) = 2"}
{"question": "How many different store locations are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many different store locations are there?. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nHow many different store locations are there?. \nSELECT  SELECT shop_id, count(*)\nFROM    SELECT shop_id\nFROM    hiring\nGROUP BY shop_id\nHAVING  HAVING count(*) > 1;\n\n# How many different cities do the employees live in?.\nSELECT  SELECT employee_id, count(*)\nFROM    SELECT employee_id\nFROM    evaluation\nGROUP BY employee_id\nHAVING  HAVING count(*) > 1;\n\n# How many different age groups are represented?.\nSELECT  SELECT min(age), max(age)\nFROM    SELECT age\nFROM    employee\nGROUP BY employee_id;\n\n# How many different store locations do the employees work at?.\nSELECT  SELECT shop_id, count(*)\nFROM    SELECT shop_id\nFROM    evaluation\nWHERE   WHERE employee_id = 1\nGROUP BY shop_id\nHAVING  HAVING count(*) > 1;\n\n# How many different store locations do the employees work at?.\nSELECT  SELECT shop_id, count(*)\nFROM    SELECT shop_id\nFROM    evaluation\nWHERE   WHERE employee_id IN (1,2)\nGROUP BY shop_id\nHAVING  H"}
{"question": "Count the number of distinct store locations.", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "prompt": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of distinct store locations.. \nSELECT ", "response": "### SQLite SQL employee_hire_evaluation database, with their properties:\n#employee('Employee_ID', 'Name', 'Age', 'City')\n#shop('Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name')\n#hiring('Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time')\n#evaluation('Employee_ID', 'Year_awarded', 'Bonus')\nCount the number of distinct store locations.. \nSELECT  SELECT DISTINCT store_location FROM shop \n\n#Count the number of distinct employees working in the stores.. \nSELECT  SELECT DISTINCT employee_id FROM shop_employee \n\n#Count the number of distinct employees who have been hired.. \nSELECT  SELECT DISTINCT employee_id FROM hiring \n\n#Count the number of employees who have been hired in this year.. \nSELECT  SELECT DISTINCT hiring.employee_id FROM hiring WHERE 2002 < \n           year_awarded AND 2003 > year_awarded \n\n#Count the number of employees who have been awarded a bonus in this year.. \nSELECT  SELECT DISTINCT hiring.employee_id FROM evaluation WHERE\n           year_awarded = 2003 \n\n#Count the number of employees who have been awarded a bonus in this year.. \nSELECT  SELECT COUNT(*) FROM hiring GROUP BY shop_id, employee_id \n\n#Count the number of employees who have been awarded a bonus in this year.. \nSELECT  SELECT COUNT(*) FROM evaluation GROUP BY shop_id, employee_id \n"}
{"question": "How many documents do we have?", "sql": "SELECT count(*) FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many documents do we have?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many documents do we have?. \nSELECT  SELECT COUNT(*) AS Document_Count FROM Documents;\n\n\n#How many template types do we have?\nSELECT  SELECT COUNT(*) AS Template_Type_Count FROM Templates;\n\n\n#How many documents do we have?. \nSELECT  SELECT COUNT(*) AS Document_Count FROM Documents;\n\n\n\n#How many template types do we have?\nSELECT  SELECT COUNT(*) AS Template_Type_Count FROM Templates;\n\n\n\n#How many paragraphs do we have?. \nSELECT  SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs;\n\n\n\n#How many paragraphs do we have?. \nSELECT  SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs;\n\n\n\n#How many paragraphs do we have?. \nSELECT  SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs;\n\n\n\n\n\n\n"}
{"question": "Count the number of documents.", "sql": "SELECT count(*) FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of documents.. \nSELECT  SELECT COUNT(Document_ID) FROM Documents\n\n\n#List all the template_types..\nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;\n\n\n#List all the templates..\nSELECT  SELECT Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details FROM Templates;\n\n\n#List all the documents..\nSELECT  SELECT Document_ID, Template_ID, Document_Name, Document_Description, Other_Details FROM Documents;\n\n\n#List all the paragraphs..\nSELECT  SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs;\n\n"}
{"question": "List document IDs, document names, and document descriptions for all documents.", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nList document IDs, document names, and document descriptions for all documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nList document IDs, document names, and document descriptions for all documents.. \nSELECT  SELECT  Document_ID, Document_Name, Document_Description FROM Documents\n#List paragraph IDs, paragraph text, and other details for all paragraphs of all documents..\nSELECT  SELECT  Paragraph_ID, Paragraph_Text, Other_Details FROM Paragraphs\n\n#List all documents in database, with their properties:\nSELECT  SELECT  Document_ID, Document_Name, Document_Description, Template_ID FROM Documents\n\n#List all templates in database, with their properties:\nSELECT  SELECT  Template_ID, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details FROM Templates\n\n#List all references in database, with their properties:\nSELECT  SELECT  Reference_ID, Reference_Text FROM References\n\n#List all template types in database, with their properties:\nSELECT  SELECT  Template_Type_Code, Template_Type_Description FROM Ref_Template_Types\n\n#Query all documents in database, which matches a specified search string\n#The search string is a regular expression, for example, to search for all documents which include the word \"financial\" in the document name, the search string would be"}
{"question": "What are the ids, names, and descriptions for all documents?", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids, names, and descriptions for all documents?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids, names, and descriptions for all documents?. \nSELECT  SELECT DISTINCT\n\t\t\tDocument_ID,\n\t\t\tDocument_Name,\n\t\t\tDocument_Description,\n\t\t\tDocument_Other_Details\nFROM\t\tTemplates\n\n\nWhat are the ids, names, and descriptions for all templates?. \nSELECT  SELECT DISTINCT\n\t\t\tTemplate_ID,\n\t\t\tTemplate_Type_Code,\n\t\t\tTemplate_Type_Description\nFROM\t\tTemplates\n\n\nWhat are the ids, names, and descriptions for all paragraphs?. \nSELECT  SELECT DISTINCT\n\t\t\tParagraph_ID,\n\t\t\tParagraph_Text,\n\t\t\tParagraph_Other_Details\nFROM\t\tDocuments\n\n\nWhat are the ids, names, and descriptions for all documents?. \nSELECT  SELECT DISTINCT\n\t\t\tDocument_ID,\n\t\t\tDocument_Name,\n\t\t\tDocument_Description,\n\t\t\tDocument_Other_Details\nFROM\t\tDocuments\n\n\nWhat are the ids, names, and descriptions for all templates?. \nSELECT  SELECT DISTINCT\n\t\t\tTemplate_ID,\n"}
{"question": "What is the document name and template id for document with description with the letter 'w' in it?", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document name and template id for document with description with the letter 'w' in it?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document name and template id for document with description with the letter 'w' in it?. \nSELECT  SELECT Paragraphs.Paragraph_ID, Templates.Template_ID, Documents.Document_Name, Documents.Template_ID\nFROM  FROM Paragraphs INNER JOIN Templates ON Paragraphs.Template_ID = Templates.Template_ID\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE  WHERE Templates.Template_ID = '0000015662'\nAND    AND Paragraphs.Document_ID = '0000000000002'\nAND    AND Paragraphs.Paragraph_Text LIKE 'w%'\nORDER  ORDER BY Paragraphs.Paragraph_ID, Templates.Template_ID\n"}
{"question": "Return the names and template ids for documents that contain the letter w in their description.", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the names and template ids for documents that contain the letter w in their description.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the names and template ids for documents that contain the letter w in their description.. \nSELECT  SELECT DISTINCT\n        DISTINCT Document_ID,\n        Document_Name,\n        Document_Description\nFROM      Documents\nWHERE     Template_ID IN (\n                SELECT  Template_ID\n                FROM    Templates\n                WHERE   Template_Type_Code IN ('COM','REF')\n                AND     Template_Details LIKE 'T4%'\n                AND     Documents.Template_ID = Templates.Template_ID\n                )\nAND       Document_Description LIKE 'w%'\nAND       Document_ID NOT IN (\n                SELECT  Document_ID\n                FROM    Document_Paragraphs\n                )\nAND       Paragraph_ID IS NULL\nAND       Date_Effective_From IS NULL\nAND       Date_Effective_To IS NULL\nAND       Date_Effective_From <= GETDATE()\nAND       Date_Effective_To >= GETDATE()\nAND       Document_ID IS NOT NULL\nORDER BY  Document_ID\n\n\"\"\"\n"}
{"question": "What is the document id, template id and description for document named \"Robbin CV\"?", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id, template id and description for document named \"Robbin CV\"?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id, template id and description for document named \"Robbin CV\"?. \nSELECT  SELECT Template_ID, Document_ID, Document_Details FROM Documents WHERE Document_Name = 'Robbin CV';\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id, template id and description for document named \"Robbin CV\"?. \nSELECT  SELECT Document_ID, Document_Details FROM Documents WHERE Document_Name = 'Robbin CV';\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_"}
{"question": "Return the document id, template id, and description for the document with the name Robbin CV.", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the document id, template id, and description for the document with the name Robbin CV.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the document id, template id, and description for the document with the name Robbin CV.. \nSELECT  SELECT  Document_ID, Template_ID, Description FROM  Templates  WHERE  Document_Name = 'Robbin CV';\n"}
{"question": "How many different templates do all document use?", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many different templates do all document use?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many different templates do all document use?. \nSELECT  SELECT COUNT(*)\nFROM    Templates\nWHERE   Template_ID in (\n            SELECT Template_ID\n            FROM   Templates\n            WHERE  Template_Type_Code = 'Template_Type_Code'\n        )\nAND (\n        Template_Type_Code = 'Template_Type_Code'\n    )\n"}
{"question": "Count the number of different templates used for documents.", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of different templates used for documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of different templates used for documents.. \nSELECT  SELECT  'Template_ID', COUNT('Template_ID') FROM 'Templates'  GROUP BY 'Template_ID';\n\nCount the number of different documents used for a particular template.  \nSELECT  SELECT  'Document_ID', COUNT('Document_ID') FROM 'Documents'  WHERE 'Template_ID'='TEMPLATE_ID' AND 'Document_ID'='DOCUMENT_ID' GROUP BY 'Document_ID';\n\nCount the number of paragraphs in a particular document. \nSELECT  SELECT  'Paragraph_ID', COUNT('Paragraph_ID') FROM 'Paragraphs'  WHERE 'Document_ID'='DOCUMENT_ID' GROUP BY 'Paragraph_ID';\n\n#References\nCount the number of references in a particular document. \nSELECT  SELECT  'Reference_ID', COUNT('Reference_ID') FROM 'References'  WHERE 'Document_ID'='DOCUMENT_ID' GROUP BY 'Reference_ID';\n\n#Revision_History\nCount the number of revisions in a particular document. \nSELECT  SELECT  'Revision_ID', COUNT('Revision_ID') FROM 'Revision"}
{"question": "How many documents are using the template with type code 'PPT'?", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many documents are using the template with type code 'PPT'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many documents are using the template with type code 'PPT'?. \nSELECT  SELECT COUNT(D.Document_ID) FROM Documents D \n    JOIN Document_Templates DT ON DT.Document_ID = D.Document_ID \n    JOIN Template_Types TT ON TT.Template_Type_Code = DT.Template_Type_Code\nWHERE DT.Template_Type_Code = 'PPT'\n    AND D.Date_Effective_To IS NOT NULL \n    AND D.Date_Effective_To < CURRENT_DATE\n    AND D.Date_Effective_From < CURRENT_DATE\n    AND DT.Date_Effective_From < CURRENT_DATE\n    AND DT.Date_Effective_To < CURRENT_DATE\n#SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID"}
{"question": "Count the number of documents that use the PPT template type.", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of documents that use the PPT template type.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of documents that use the PPT template type.. \nSELECT  SELECT COUNT(*) AS [Total_Doc_Count]\nFROM    Documents\nWHERE   (SELECT TOP 1 Template_ID\n                   FROM    Templates\n                   WHERE   Template_Type_Code = 'PPT')\n                   = Documents.Template_ID\nAND      (SELECT TOP 1 Template_Type_Code\n                   FROM    Templates\n                   WHERE   Template_Type_Code = 'PPT')\n                   = Documents.Template_Type_Code\n\n"}
{"question": "Show all template ids and number of documents using each template.", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template ids and number of documents using each template.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template ids and number of documents using each template.. \nSELECT  SELECT COUNT(*)  FROM  Documents  WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Idea_Template');\n\n#SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document names using each template.. \nSELECT  SELECT Template_ID, Template_Name  FROM  Templates  WHERE Template_Type_Code = 'Idea_Template';\n\n#SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n"}
{"question": "What are all different template ids used for documents, and how many times were each of them used?", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are all different template ids used for documents, and how many times were each of them used?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are all different template ids used for documents, and how many times were each of them used?. \nSELECT  SELECT Template_Type_Code, COUNT(Template_ID)\nFROM    Templates\nGROUP BY Template_Type_Code\nORDER BY Template_Type_Code\n\n\n"}
{"question": "What is the id and type code for the template used by the most documents?", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the id and type code for the template used by the most documents?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the id and type code for the template used by the most documents?. \nSELECT  SELECT  Templates.Template_ID,\n        Templates.Version_Number,\n        Templates.Template_Type_Code,\n        Min(Templates.Date_Effective_From) AS Date_Effective_From,\n        Max(Templates.Date_Effective_To) AS Date_Effective_To,\n        CASE WHEN Templates.Template_Type_Code <> '00000000' THEN Templates.Template_Details ELSE '' END AS Template_Details,\n        COUNT(Templates.Template_ID) AS Documents_Count,\n        Documents.Document_ID,\n        Documents.Document_Name,\n        Documents.Document_Description,\n        Documents.Date_Issued,\n        Documents.Date_Updated,\n        COUNT(Paragraphs.Paragraph_ID) AS Paragraphs_Count,\n        Paragraphs.Paragraph_ID,\n        Paragraphs.Paragraph_Text,\n        Paragraphs.Date_Issued,\n        Paragraphs.Date_Updated\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Document"}
{"question": "Return the id and type code of the template that is used for the greatest number of documents.", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id and type code of the template that is used for the greatest number of documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id and type code of the template that is used for the greatest number of documents.. \nSELECT  SELECT Template_Type_Code, COUNT(*) AS CNT FROM Documents INNER JOIN Templates ON Documents.Template_ID=Templates.Template_ID GROUP BY Template_Type_Code ORDER BY CNT DESC\n\n\n\n\n\n\n\n\n\n"}
{"question": "Show ids for all templates that are used by more than one document.", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow ids for all templates that are used by more than one document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow ids for all templates that are used by more than one document.. \nSELECT  SELECT  Document_ID,  COUNT(Document_ID)\nFROM     Paragraphs\nGROUP BY  Document_ID\nHAVING   COUNT(Document_ID) > 1;\n\n\n\n"}
{"question": "What are the template ids of any templates used in more than a single document?", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the template ids of any templates used in more than a single document?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the template ids of any templates used in more than a single document?. \nSELECT  SELECT Template_ID, COUNT(Template_ID)\nFROM    Templates\nWHERE   (Template_ID IN (SELECT Template_ID FROM Templates WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description IN ('%s')), 1))\n )) AND (COUNT(Template_ID) > 1);\n\nWhat are the id of documents using a template with the given id? \nSELECT  SELECT Document_ID\nFROM    Documents\nWHERE   (Document_ID IN (SELECT Document_ID FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description IN ('%s')), 1))\n  ) AND (Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description"}
{"question": "Show ids for all templates not used by any document.", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow ids for all templates not used by any document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow ids for all templates not used by any document.. \nSELECT  SELECT Template_ID, Template_Type_Code, Template_Type_Description FROM   Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Document_Templates WHERE Template_ID IS NULL);\n \n# Copy to output.txt\n"}
{"question": "What are the ids for templates that are not used in any documents?", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids for templates that are not used in any documents?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids for templates that are not used in any documents?. \nSELECT  SELECT  Template_ID, Template_Type_Code, Template_Type_Description\nFROM  Ref_Template_Types\nWHERE Template_Type_Code NOT IN (\n    SELECT Template_Type_Code\n    FROM  Templates\n    WHERE Template_ID = '41994621-6435-410C-A01E-238634227D84'\n)\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\n#References('References_ID', 'References_Type',"}
{"question": "How many templates do we have?", "sql": "SELECT count(*) FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many templates do we have?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many templates do we have?. \nSELECT  SELECT COUNT(*) FROM Templates\nHow many templates are active?. \nSELECT  SELECT COUNT(*) FROM Templates \n    WHERE Template_Date_Effective_From IS NOT NULL AND\n          Template_Date_Effective_To IS NULL \nHow many templates are inactive?. \nSELECT  SELECT COUNT(*) FROM Templates \n    WHERE Template_Date_Effective_From IS NULL AND\n          Template_Date_Effective_To IS NOT NULL \nHow many templates have been updated?. \nSELECT  SELECT COUNT(*) FROM Templates \n    WHERE Template_Date_Effective_From IS NOT NULL AND\n          Template_Date_Effective_To IS NOT NULL \nHow many templates have not been updated?. \nSELECT  SELECT COUNT(*) FROM Templates \n    WHERE Template_Date_Effective_From IS NULL AND\n          Template_Date_Effective_To IS NULL \nHow many templates have the same name?. \nSELECT  SELECT COUNT(*) FROM Templates \n    WHERE Template_Description = \n            (\n                SELECT  Template_Description\n                FROM    Templates\n                WHERE   Template_ID <> Template_ID \n            ) \nHow many"}
{"question": "Count the number of templates.", "sql": "SELECT count(*) FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of templates.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of templates.. \nSELECT  SELECT COUNT(*) FROM Templates\n\n#Add the next 5 templates \ninsert into Templates values (1, 0, 'PROJECT', '1-SEP-18', '1-APR-19', 'This is a project');\ninsert into Templates values (2, 0, 'PROJECT', '1-SEP-18', '1-JUN-19', 'This is a project');\ninsert into Templates values (3, 0, 'PROJECT', '1-SEP-18', '1-MAY-19', 'This is a project');\ninsert into Templates values (4, 0, 'PROJECT', '1-JAN-18', '1-JUN-18', 'This is a project');\ninsert into Templates values (5, 0, 'PROJECT', '1-JUL-18', '1-SEP-18', 'This is a project');\n\n#Add the next 5 documents.. \ninsert into Documents values (1, 1, 'New Doc', 'This is a new doc');\ninsert into Documents values ("}
{"question": "Show template ids, version numbers, and template type codes for all templates.", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow template ids, version numbers, and template type codes for all templates.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow template ids, version numbers, and template type codes for all templates.. \nSELECT  SELECT Template_ID, Template_Version, Template_Type_Code\nFROM    Templates\n\nShow template IDs, version numbers, and template type codes for all templates, including their names.. \nSELECT Template_ID, Template_Version, Template_Type_Code\nFROM Templates\nWHERE Template_Version > 0\nORDER BY Template_ID\n\nShow templates and all versions for which a document has been created.. \nSELECT  Template_ID, Template_Version, Template_Type_Code\nFROM    Templates\nWHERE EXISTS\n    (SELECT 1\n     FROM Documents\n     WHERE Template_ID = Templates.Template_ID AND Document_ID IS NOT NULL)\n\nShow templates, version numbers, and template type codes for all templates, including their names, for which a document has been created.. \nSELECT Template_ID, Template_Version, Template_Type_Code\nFROM Templates\nWHERE EXISTS\n    (SELECT 1\n     FROM Documents\n     WHERE Template_ID = Templates.Template_ID AND Document_ID IS NOT NULL)\nORDER BY Template_ID\n\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')"}
{"question": "What are the ids, version numbers, and type codes for each template?", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids, version numbers, and type codes for each template?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids, version numbers, and type codes for each template?. \nSELECT  SELECT_SQL = 'SELECT Template_ID, Template_Version_Number, Template_Type_Code FROM Template_Types WHERE Template_Type_Description = :1'\n, Params = ( 'Pick_Type', Template_Type_Description ),\n        SHOW_SQL = 'SELECT Template_ID, Template_Version_Number, Template_Type_Code FROM Template_Types WHERE Template_Type_Description = :1'\n        , Params = ( 'Pick_Type', Template_Type_Description ),\n\nWhat are the ids, versions, and type codes for each template?. \nSELECT  SELECT_SQL = 'SELECT Template_ID, Template_Version_Number, Template_Type_Code FROM Template_Types WHERE Template_Type_Description = :1'\n, Params = ( 'Pick_Type', Template_Type_Description ),\n        SHOW_SQL = 'SELECT Template_ID, Template_Version_Number, Template_Type_Code FROM Template_Types WHERE Template_Type_Description = :1'\n        , Params = ( 'Pick_Type', Template_Type_Description )\n        , WHERE_SQL = 'AND Template_Type_Description ="}
{"question": "Show all distinct template type codes for all templates.", "sql": "SELECT DISTINCT template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all distinct template type codes for all templates.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all distinct template type codes for all templates.. \nSELECT  SELECT DISTINCT Template_Type_Code FROM Templates ORDER BY Template_Type_Code;\n\n\n\n"}
{"question": "What are the different template type codes?", "sql": "SELECT DISTINCT template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes?. \nSELECT  SELECT_KEYWORD\nFROM    SQL_DB.dbo.Ref_Template_Types\nWHERE   Ref_Template_Types.Template_Type_Code = 'FIN'\n\"\"\"\n\n\"\"\"\nFIN = 1\nMIS = 2\nOTH = 3\n\"\"\"\n\n\"\"\"\nList all templates.\nSELECT  Template_Type_Code, Template_Type_Description, Version_Number, Date_Effective_From, Date_Effective_To, Template_Details\nFROM    SQL_DB.dbo.Templates\n\"\"\"\n\n\"\"\"\nList all documents.\nSELECT  Document_ID, Template_ID, Document_Name, Document_Description, Other_Details\nFROM    SQL_DB.dbo.Documents\n\"\"\"\n\n\"\"\"\nList all paragraphs.\nSELECT  Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\nFROM    SQL_DB.dbo.Paragraphs\n\"\"\""}
{"question": "What are the ids of templates with template type code PP or PPT?", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of templates with template type code PP or PPT?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of templates with template type code PP or PPT?. \nSELECT  SELECT Template_ID, Version_Number FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Return the ids of templates that have the code PP or PPT.", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the ids of templates that have the code PP or PPT.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the ids of templates that have the code PP or PPT.. \nSELECT  SELECT 'document_id' AS column_name,\n       Document_ID\nFROM   Documents\nWHERE  Document_Type_Code = 'PP'\nOR Document_Type_Code = 'PPT';\n\n\n"}
{"question": "How many templates have template type code CV?", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many templates have template type code CV?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many templates have template type code CV?. \nSELECT  SELECT  'Templates', COUNT(*) AS 'Number_of_Templates', 'CV' AS 'Template_Type_Code' \nFROM    'Template_Type_Code'\nWHERE   'Template_Type_Description' = 'CV'\n\nHow many templates have version number 1?\nSELECT  'Templates', COUNT(*) AS 'Number_of_Templates', 'Version_Number' \nFROM    'Templates'\nWHERE   'Version_Number' = 1\n\nHow many templates have template type code CV and version number 1?\nSELECT  'Templates', COUNT(*) AS 'Number_of_Templates', 'CV', 1 \nFROM    'Templates'\nWHERE   'Template_Type_Code' = 'CV'\nAND     'Version_Number' = 1\n\nHow many documents have template id 13?\nSELECT  'Documents', COUNT(*) AS 'Number_of_Documents', 'Template_ID' \nFROM    'Documents'\nWHERE   'Template_ID' = 13\n\nHow many documents have template id 13 and have document name Abc?\nSELECT  'Documents', COUNT(*) AS"}
{"question": "Count the number of templates of the type CV.", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of templates of the type CV.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of templates of the type CV.. \nSELECT  SELECT COUNT(*)  FROM  'Templates' WHERE  'Template_Type_Code'  = 'CV' AND 'Version_Number' = '1.0'\n"}
{"question": "What is the version number and template type code for the template with version number later than 5?", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the version number and template type code for the template with version number later than 5?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the version number and template type code for the template with version number later than 5?. \nSELECT  SELECT \n\t\t\t Template_Type_Code, \n\t\t\t Date_Effective_From, \n\t\t\t Date_Effective_To, \n\t\t\t Version_Number\n\t\tFROM \n\t\t\tTemplates \n\t\tWHERE \n\t\t\tVersion_Number > 5\n```\n\nWhat is the version number and template type code for the template with version number earlier than 5?.\n```\nSELECT  SELECT \n\t\t\t Template_Type_Code, \n\t\t\t Date_Effective_From, \n\t\t\t Date_Effective_To, \n\t\t\t Version_Number\n\t\tFROM \n\t\t\tTemplates \n\t\tWHERE \n\t\t\tVersion_Number < 5\n```\n\nWhat is the Template_ID for the template with Version_Number later than 5?. \n```\nSELECT  SELECT \n\t\t\t Template_ID, \n\t\t\t Template_Type_Code, \n\t\t\t Date_Effective_From, \n\t\t\t Date_Effective_To, \n\t\t\t Version_Number\n\t\tFROM "}
{"question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the version numbers and template type codes of templates with a version number greater than 5.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the version numbers and template type codes of templates with a version number greater than 5.. \nSELECT  SELECT Template_Type_Code,\n                MAX(Version_Number) AS Version_Number,\n                Template_Type_Code,\n                MAX(Date_Effective_From) AS Date_Effective_From,\n                MAX(Date_Effective_To) AS Date_Effective_To,\n                Template_Details\nFROM    Templates\nWHERE   Version_Number > 5\nGROUP BY Template_Type_Code,\n         Template_Type_Code,\n         Template_Details\n\n"}
{"question": "Show all template type codes and number of templates for each.", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and number of templates for each.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and number of templates for each.. \nSELECT  SELECT\n       Template_Type_Code, \n       COUNT(*) AS Template_Count\nFROM    Templates\nGROUP BY  Template_Type_Code\nORDER BY Template_Type_Code;\n\n\nShow all template type codes and number of templates for each.. \nSELECT  SELECT\n       Template_Type_Code, \n       COUNT(*) AS Template_Count\nFROM    Templates\nGROUP BY  Template_Type_Code\nORDER BY Template_Type_Code;\n"}
{"question": "What are the different template type codes, and how many templates correspond to each?", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes, and how many templates correspond to each?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes, and how many templates correspond to each?. \nSELECT  SELECT  Template_Type_Code FROM Ref_Template_Types;\nSELECT  SELECT  Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different document type codes, and how many documents correspond to each?. \nSELECT  SELECT  Document_Type_Code FROM Ref_Document_Types;\nSELECT  SELECT  Document_Type_Code, COUNT(*) FROM Documents GROUP BY Document_Type_Code;\n#Ref_Document_Types('Document_Type_Code', 'Document_Type_Description')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_"}
{"question": "Which template type code has most number of templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhich template type code has most number of templates?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhich template type code has most number of templates?. \nSELECT  SELECT SQLITE_TEMPLATE_TYPE_CODE AS `sql_template_type_code`, COUNT(SQLITE_TEMPLATE_TYPE_CODE) AS `sql_count`\nFROM  `SQLite_Template_Type`\nGROUP BY SQLITE_TEMPLATE_TYPE_CODE\nORDER BY `sql_count` DESC;\n#Ref_Template_Types\nSELECT SQLITE_TEMPLATE_TYPE_CODE, SQLITE_TEMPLATE_TYPE_DESCRIPTION FROM `Ref_Template_Types` WHERE `SQLite_Template_Type_Code` IS NOT NULL;\n\n#Templates\nSELECT SQLITE_TEMPLATE_ID, SQLITE_VERSION_NUMBER, SQLITE_TEMPLATE_TYPE_CODE, `SQLite_Date_Effective_From`, `SQLite_Date_Effective_To`, `SQLite_Template_Details` FROM `SQLite_Template_Details` WHERE `SQLite_Template_ID` IS NOT NULL ORDER BY `SQLite_Date_Effective_From`;\n\n#Documents\nSELECT SQLITE_DOCUMENT_ID, SQLITE_TEMPLATE"}
{"question": "Return the type code of the template type that the most templates belong to.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the type code of the template type that the most templates belong to.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the type code of the template type that the most templates belong to.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    'Templates'::regclass, 'template_type_code' AS column_name, 'template_type_code' AS data_type, 'template_type_code'::raw AS default_value, 'template_type_code'::text AS table_name, 'template_type_code'::text AS schema_name\nFROM\n    information_schema.columns WHERE table_name = 'Templates' AND table_schema = 'SQLite' AND column_name = 'template_type_code'\nUNION ALL\n    SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    'Templates'::regclass, 'template_type_description' AS column_name, 'template_type_description' AS data_type, 'template_type_description'::raw AS default_value, 'template_type_description'::text AS table_name, 'template_type_description'::text AS schema_name\nFROM\n    information_schema.columns WHERE table_name = 'Templates' AND table_schema = 'SQLite' AND column_name = 'template_type_description'\nUNION"}
{"question": "Show all template type codes with less than three templates.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes with less than three templates.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes with less than three templates.. \nSELECT  SELECT  Template_Type_Code, Template_Type_Description, COUNT(*) AS Count_Of_Templates FROM  Template_Types  GROUP BY Template_Type_Code, Template_Type_Description  HAVING COUNT(*) < 3;\n\n#Show all template type codes with more than three templates.. \nSELECT  SELECT  Template_Type_Code, Template_Type_Description, COUNT(*) AS Count_Of_Templates FROM  Template_Types  GROUP BY Template_Type_Code, Template_Type_Description  HAVING COUNT(*) >= 3;\n\n#Show templates with more than 3 paragraphs.. \nSELECT  SELECT  Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details, COUNT(*) AS Count_Of_Paragraphs FROM  Templates  GROUP BY Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details  HAVING COUNT(*) >= 3;\n\n#Show documents with more than 3 paragraphs.. \nSELECT  SELECT  Document_ID, Template_ID"}
{"question": "What are the codes of template types that have fewer than 3 templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the codes of template types that have fewer than 3 templates?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the codes of template types that have fewer than 3 templates?. \nSELECT  SELECT Template_Type_Code FROM  Templates WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM  Templates GROUP BY Template_Type_Code HAVING COUNT(*)>=3)\n"}
{"question": "What the smallest version number and its template type code?", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat the smallest version number and its template type code?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat the smallest version number and its template type code?. \nSELECT  SELECT Version_Number,\n        SELECT Template_Type_Code,\n        SELECT Date_Effective_From,\n        SELECT Date_Effective_To,\n        SELECT Template_Details,\n        FROM  FROM Templates\n        WHERE  WHERE Template_ID = ?\n        ORDER  ORDER BY  BY Template_ID\n        LIMIT  1\n        ;\n"}
{"question": "Return the lowest version number, along with its corresponding template type code.", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the lowest version number, along with its corresponding template type code.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the lowest version number, along with its corresponding template type code.. \nSELECT  SELECT  Template_Type_Code,\n    (SELECT MIN(Version_Number) FROM Templates WHERE Template_Type_Code=t.Template_Type_Code) AS Lowest_Version\n    FROM Templates t\n    GROUP BY Template_Type_Code\n    ORDER BY Template_Type_Code ASC\n##########################\n\n\n\n"}
{"question": "What is the template type code of the template used by document with the name \"Data base\"?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type code of the template used by document with the name \"Data base\"?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type code of the template used by document with the name \"Data base\"?. \nSELECT  SELECT Template_Type_Code\n        FROM   Templates\n        WHERE  Template_ID = 'DB'\n        AND    Template_Type_Code LIKE 'DB%'\n\"\"\"\n        self.assertEqual(res, 'DB')\n\n    def test_select_template_type_code(self):\n        \"\"\"\n        Test the SQL statement:\n        \"\"\"\n        db = self.db\n        res = db.sql_select_template_type_code('Data base')\n        self.assertEqual(res, 'DB')\n\n    def test_select_documents(self):\n        \"\"\"\n        Test the SQL statement:\n        \"\"\"\n        db = self.db\n        res = db.sql_select_documents('Name')\n        self.assertEqual(res, '1')\n\n    def test_select_documents_in_template_list(self):\n        \"\"\"\n        Test the SQL statement:\n        \"\"\"\n        db = self.db\n        res = db.sql_select_documents_in_template_list('Name')\n        self.assertEqual(res, '1')\n\n    def test_select"}
{"question": "Return the template type code of the template that is used by a document named Data base.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the template type code of the template that is used by a document named Data base.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the template type code of the template that is used by a document named Data base.. \nSELECT  SELECT Template_Type_Code FROM Document_Details  WHERE  Document_Name = 'Data base.' \n"}
{"question": "Show all document names using templates with template type code BK.", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document names using templates with template type code BK.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document names using templates with template type code BK.. \nSELECT  SELECT DISTINCT Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code IN ('BK','BK1','BK2','BK3','BK4','BK5','BK6','BK7')\n"}
{"question": "What are the names of documents that use templates with the code BK?", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the names of documents that use templates with the code BK?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the names of documents that use templates with the code BK?. \nSELECT  SELECT DISTINCT Document_Name FROM Documents INNER JOIN Paragraphs ON Paragraph_ID = Document_ID  INNER JOIN Templates ON Template_ID = Paragraph_ID WHERE Template_ID IN ('BK001','BK002')\nHow many paragraphs are there in a document with the name 'New Payroll Document'?. \nSELECT  SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = 'New Payroll Document'\nHow many rows are there in the Paragraphs table?\nSELECT  SELECT COUNT(*) FROM Paragraphs\nHow many rows are there in the Documents table?\nSELECT  SELECT COUNT(*) FROM Documents\nHow many rows are there in the Templates table?\nSELECT  SELECT COUNT(*) FROM Templates\nHow many rows are there in the Templates_Types table?\nSELECT  SELECT COUNT(*) FROM Templates_Types\nHow many rows are there in the Ref_Template_Types table?\nSELECT  SELECT COUNT(*) FROM Ref_Template_Types\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Show all template type codes and the number of documents using each type.", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and the number of documents using each type.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and the number of documents using each type.. \nSELECT  SELECT  'Template_Type_Code', COUNT(1) AS '#_Template_Type_Code' FROM Templates GROUP BY 'Template_Type_Code'\nSELECT  SELECT  'Version_Number', COUNT(1) AS '#_Version_Number' FROM Templates GROUP BY 'Version_Number'\nSELECT  SELECT  'Template_Details', COUNT(1) AS '#_Template_Details' FROM Templates GROUP BY 'Template_Details'\nSELECT  SELECT  'Date_Effective_From', COUNT(1) AS '#_Date_Effective_From' FROM Templates GROUP BY 'Date_Effective_From'\nSELECT  SELECT  'Date_Effective_To', COUNT(1) AS '#_Date_Effective_To' FROM Templates GROUP BY 'Date_Effective_To'\nSELECT  SELECT  'Document_Name', COUNT(1) AS '#_Document_Name' FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY 'Document_Name'\nSELECT  SELECT  'Document_Description', COUNT(1) AS '#_Document_Description' FROM Templates JOIN Documents ON Templates.Template_"}
{"question": "What are the different template type codes, and how many documents use each type?", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes, and how many documents use each type?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the different template type codes, and how many documents use each type?. \nSELECT  SELECT  Template_Type_Code, COUNT(*) AS Template_Count\nFROM    Templates\nGROUP BY\n        Template_Type_Code\nORDER BY\n        Template_Count DESC\n#\nWhat are the different document types, and how many templates use each type?. \nSELECT  Template_Type_Code, COUNT(*) AS Template_Count\nFROM    Templates\nGROUP BY\n        Template_Type_Code\nORDER BY\n        Template_Count DESC\n#\nWhat are the different document names? \nSELECT  Document_Name\nFROM    Documents\n#\nWhat are the different document descriptions? \nSELECT  Document_Description\nFROM    Documents\n#\nWhat are the different document types, and how many templates use each type?. \nSELECT  Template_Type_Code, COUNT(*) AS Template_Count\nFROM    Templates\nGROUP BY\n        Template_Type_Code\nORDER BY\n        Template_Count DESC\n#\nWhat are the different document types, and how many templates use each type?. \nSELECT  Document_Name, COUNT(*) AS Template_Count\nFROM    Documents\nGROUP BY\n        Document_Name\nORDER BY\n        Template_Count DESC\n#\nWhat"}
{"question": "Which template type code is used by most number of documents?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhich template type code is used by most number of documents?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhich template type code is used by most number of documents?. \nSELECT  SELECT Template_ID,  COUNT(Template_ID) AS Count \nFROM Document_Paragraphs\nJOIN Documents \nON Documents.Document_ID = Document_Paragraphs.Document_ID\nJOIN Templates\nON Templates.Template_ID = Documents.Template_ID\nWHERE Document_Paragraphs.Paragraph_Text = '1011'\nGROUP BY Template_ID\nHAVING Count = (SELECT MAX(Count) \nFROM (SELECT Template_ID, COUNT(Template_ID) AS Count \nFROM Document_Paragraphs\nJOIN Documents \nON Documents.Document_ID = Document_Paragraphs.Document_ID\nJOIN Templates\nON Templates.Template_ID = Documents.Template_ID\nWHERE Document_Paragraphs.Paragraph_Text = '1011'\nGROUP BY Template_ID) AS Results) AS Results \n#Reports('Report_ID', 'Template_ID', 'Report_Name', 'Report_Description', 'Report_Type', 'Report_Date_Effective_From', 'Report_Date_Effective_To', 'Report_Com"}
{"question": "Return the code of the template type that is most commonly used in documents.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the code of the template type that is most commonly used in documents.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the code of the template type that is most commonly used in documents.. \nSELECT  SELECT  COUNT(DISTINCT Document_ID) AS 'Count', \n        Template_Type_Code \nFROM    Document_Templates \nGROUP BY Template_Type_Code \nHAVING  COUNT(DISTINCT Document_ID) > COUNT(DISTINCT Template_Type_Code)\n"}
{"question": "Show all template type codes that are not used by any document.", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes that are not used by any document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes that are not used by any document.. \nSELECT  SELECT `Template_Type_Code` \n  FROM  `Templates` \n WHERE  NOT EXISTS \n         (SELECT `Template_ID` \n          FROM  `Templates` \n          WHERE  `Template_ID` \n          =  `Templates`.`Template_ID`)\n     AND `Template_Type_Code` \n       NOT IN  (SELECT `Template_ID` \n                FROM  `Templates` \n               )\n  ;\n--13:00:59.182002\n--template \n--template_type_code\n--template_type_description\n--13:00:59.288006\n--1\n--13:00:59.302001\n--3\n--13:00:59.302001\n--13:00:59.302001\n--13:00:59.302001\n--13:00:59.302001\n--13:00:59"}
{"question": "What are the codes of template types that are not used for any document?", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the codes of template types that are not used for any document?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the codes of template types that are not used for any document?. \nSELECT  SELECT  Template_Type_Code \nFROM    Templates\nWHERE   Template_Type_Code NOT IN (SELECT  Template_Type_Code \n                                      FROM    Documents)\n\n"}
{"question": "Show all template type codes and descriptions.", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and descriptions.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all template type codes and descriptions.. \nSELECT  SELECT  Template_Type_Code, Template_Type_Description\nFROM Template_Type\n\tORDER BY Template_Type_Code\n\t;\n\nShow all templates (documents). \nSELECT  SELECT  Template_ID, Version_Number, Template_Type_Code, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDate_Effective_From, Date_Effective_To, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTemplate_Details \nFROM Templates \n\tORDER BY Template_ID \n\t;\n\nShow all documents. \nSELECT  SELECT  Document_ID, Template_ID, Document_Name, Document_Description, Other_Details\nFROM Documents \n\tORDER BY Document_ID \n\t;\n\nShow all paragraphs. \nSELECT  SELECT  Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\nFROM Paragraphs \n\tORDER BY Paragraph_ID \n\t;\n"}
{"question": "What are the type codes and descriptions for all template types?", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the type codes and descriptions for all template types?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the type codes and descriptions for all template types?. \nSELECT  SELECT  Template_Type_Code, Template_Type_Description FROM Template_Type\n\n\n\n\nWhat is the minimum version number for a document?. \nSELECT  MIN(Version_Number) AS Min_Version FROM Document\n\n\n\nWhat are the templates currently in the system?. \nSELECT  Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details FROM Template\n\n\n\nWhat are the documents in the system?. \nSELECT  Document_ID, Template_ID, Document_Name, Document_Description, Other_Details FROM Document\n\n\n\nWhat are the paragraphs in the system?. \nSELECT  Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraph\n\n\n\n#Format of the output\n##Creating the output file\n#output_file = \"Doc_Template_Mgt_table_type_codes_and_descriptions.xlsx\"\n\n#Opening the output file for writing\noutput_file = open(\"Doc_Template_Mgt_table_type_codes_and_descriptions.xlsx\","}
{"question": "What is the template type descriptions for template type code \"AD\".", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type descriptions for template type code \"AD\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type descriptions for template type code \"AD\".. \nSELECT  SELECT Template_Type_Code, Template_Type_Description\nFROM    Ref_Template_Types\nWHERE   Template_Type_Code = 'AD'\n\nTemplate_Type_Code Template_Type_Description\nAD             Administrative Directive\n\nWhat is the first template for template type code \"AD\".. \nSELECT  SELECT Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details\nFROM    Templates\nWHERE   Template_Type_Code = 'AD'\nAND     Template_ID = 'AD1001'\nAND     Version_Number = '1'\nAND     Date_Effective_From >= '01/01/2011'\nAND     Date_Effective_From <= '01/01/2020'\nAND     Date_Effective_To >= '01/01/2011'\nAND     Date_Effective_To <= '01/01/2020'\nAND     Template_Details IS NOT NULL\n\nTemplate_ID Version_Number Template_Type_Code Date_Effective"}
{"question": "Return the template type description of the template type with the code AD.", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the template type description of the template type with the code AD.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the template type description of the template type with the code AD.. \nSELECT  SELECT Template_Type_Code,\n        (SELECT Template_Type_Description\n         FROM    Ref_Template_Types \n         WHERE   Template_Type_Code = Template_Type_Code)\nFROM    Templates\nWHERE   Template_Type_Code = 'AD'\n\"\"\"\n"}
{"question": "What is the template type code for template type description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type code for template type description \"Book\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the template type code for template type description \"Book\".. \nSELECT  SELECT  Template_Type_Code,\n    Template_Type_Description\nFROM    Ref_Template_Types\n    INNER JOIN \n        Ref_Template_Types\n    ON Template_Type_Code = Template_Type_Code\nWHERE  Template_Type_Code =  'Book'\n\nWhat is the description for template type code 'Book'.. \nSELECT  Template_Type_Description\nFROM    Ref_Template_Types\nWHERE  Template_Type_Code =  'Book'\n\n#Create a template\nSELECT  SELECT  Template_ID,\n    Template_Type_Code,\n    Date_Effective_From,\n    Date_Effective_To,\n    Template_Details\nFROM    Ref_Template_Types\n    INNER JOIN\n        Templates\n    ON Template_ID = Template_ID\nWHERE  Template_Type_Code =  'Book'\nAND    Date_Effective_From >  '2013-01-01'\n\nSELECT  Template_ID,\n    Template_Type_Code,\n    Template_Details\nFROM    Templates\n    INNER JOIN\n        Ref_Template_Types\n    ON Template_Type"}
{"question": "Return the type code of the template type with the description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the type code of the template type with the description \"Book\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the type code of the template type with the description \"Book\".. \nSELECT  SELECT Template_Type_Code  FROM  Ref_Template_Types WHERE Template_Type_Description = 'Book'\n\nReturn the type code of the template type with the description \"Book\".. \nSELECT  Template_Type_Code  FROM  Ref_Template_Types WHERE Template_Type_Description = 'Book'\n\nReturn the type code of the template type with the description \"Book\".. \nSELECT  Template_Type_Code  FROM  Ref_Template_Types WHERE Template_Type_Description = 'Book'\n"}
{"question": "What are the distinct template type descriptions for the templates ever used by any document?", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the distinct template type descriptions for the templates ever used by any document?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the distinct template type descriptions for the templates ever used by any document?. \nSELECT  SELECT DISTINCT `Template_Type_Description` FROM `Template` AS `T`\n    LEFT JOIN `Templates` AS `T2` ON (`T`.`Template_ID` = `T2`.`Template_ID`)\n    LEFT JOIN `Documents` AS `D` ON (`T2`.`Template_ID` = `D`.`Template_ID`)\nWHERE (`D`.`Document_ID` != '');\n\n#What is the count of distinct template type codes for the templates ever used by any document?. \nSELECT  SELECT COUNT(`Template_Type_Code`) FROM `Template` AS `T`\n    LEFT JOIN `Templates` AS `T2` ON (`T`.`Template_ID` = `T2`.`Template_ID`)\n    LEFT JOIN `Documents` AS `D` ON (`T2`.`Template_ID` = `D`.`Template_ID`)\nWHERE (`D`.`Document_ID` != '');\n\n#What is the count of distinct templates for the templates ever used by any document?. \nSELECT  SELECT COUNT(`Template_ID`) FROM `Template` AS `T`\n    LEFT JOIN `Templates` AS `T2` ON (`T`.`Template"}
{"question": "Return the different descriptions for templates that have been used in a document.", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the different descriptions for templates that have been used in a document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the different descriptions for templates that have been used in a document.. \nSELECT  SELECT 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, "}
{"question": "What are the template ids with template type description \"Presentation\".", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the template ids with template type description \"Presentation\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the template ids with template type description \"Presentation\".. \nSELECT  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;\nSELECT  SELECT Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details FROM Templates;\nSELECT  SELECT Document_ID, Template_ID, Document_Name, Document_Description, Other_Details FROM Documents;\nSELECT  SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs;\n\n#Create your own template if you know its id\n\nCREATE_DOCUMENT_TEMPLATE_MGT_SQL = \"INSERT INTO Documents(Template_ID, Document_Name, Document_Description, Other_Details) VALUES (?,?,?,?);\"\nCREATE_DOCUMENT_TEMPLATE_MGT_SQL = CREATE_DOCUMENT_TEMPLATE_MGT_SQL + \"UPDATE Documents SET Date_Effective_From = ?, Date_Effective_To = ? WHERE Template_ID = ?;\"\nCREATE_DOCUMENT_TEMPLATE_MGT_SQL = CREATE_DOCUMENT_TE"}
{"question": "Return the ids corresponding to templates with the description 'Presentation'.", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the ids corresponding to templates with the description 'Presentation'.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the ids corresponding to templates with the description 'Presentation'.. \nSELECT  SELECT Template_ID\nFROM    SELECT Template_Type_Code, Template_Type_Description\nFROM    Ref_Template_Types;\n\nReturn the ids corresponding to templates with the description 'Presentation'.. \nSELECT  SELECT Template_ID\nFROM    SELECT Template_Type_Code, Template_Type_Description\nFROM    Ref_Template_Types;\n\nReturn the ids corresponding to templates with the description 'Presentation'.. \nSELECT  SELECT Template_ID\nFROM    SELECT Template_Type_Code, Template_Type_Description\nFROM    Ref_Template_Types;\n\n### print the template ids found\nprint '\\n\\nFound Template_IDs: ', Template_IDs;\n\nReturn the ids corresponding to templates with the description 'Presentation'.. \nSELECT  SELECT Template_ID\nFROM    SELECT Template_Type_Code, Template_Type_Description\nFROM    Ref_Template_Types;\n\nReturn the ids corresponding to templates with the description 'Presentation'.. \nSELECT  SELECT Template_ID\nFROM    SELECT Template_Type_Code, Template_Type_Description\nFROM    Ref_Template_Types;\n\nReturn the ids corresponding to templates with the"}
{"question": "How many paragraphs in total?", "sql": "SELECT count(*) FROM Paragraphs", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many paragraphs in total?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many paragraphs in total?. \nSELECT  SELECT  COUNT(DISTINCT PARAGRAPH_ID) FROM DOCUMENTS;\nHow many paragraphs in the specified template?. \nSELECT  SELECT  COUNT(DISTINCT PARAGRAPH_ID) FROM DOCUMENTS WHERE TEMPLATE_ID = '1';\nWhat is the Paragraph with the highest Paragraph_ID?. \nSELECT  SELECT  PARAGRAPH_ID, PARAGRAPH_TEXT, OTHER_DETAILS FROM DOCUMENTS ORDER BY PARAGRAPH_ID DESC;\nWhat is the Paragraph with the lowest Paragraph_ID?. \nSELECT  SELECT  PARAGRAPH_ID, PARAGRAPH_TEXT, OTHER_DETAILS FROM DOCUMENTS ORDER BY PARAGRAPH_ID;\n\n### Module 3: SQL Queries\n### What is the name of the Template that has the highest number?. \nSELECT  SELECT  TEMPLATE_TYPE_CODE, TEMPLATE_TYPE_DESCRIPTION FROM REF_TEMPL"}
{"question": "Count the number of paragraphs.", "sql": "SELECT count(*) FROM Paragraphs", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of paragraphs.. \nSELECT  SELECT COUNT(*) AS paraCount FROM  Count the number of documents.. \nSELECT  SELECT COUNT(*) AS docCount FROM  Count the number of templates.. \nSELECT  SELECT COUNT(*) AS temCount FROM \n"}
{"question": "How many paragraphs for the document with name 'Summer Show'?", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many paragraphs for the document with name 'Summer Show'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nHow many paragraphs for the document with name 'Summer Show'?. \nSELECT  SELECT Count(*) AS 'Count'  FROM   Paragraphs  WHERE   Document_ID = '2800000000000017'\n\"\"\"\n\nresult = database.sqlQueryRaw(sql)\nfor record in result:\n    print (\"Count: \" + record[0])\n"}
{"question": "Count the number of paragraphs in the document named 'Summer Show'.", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of paragraphs in the document named 'Summer Show'.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nCount the number of paragraphs in the document named 'Summer Show'.. \nSELECT  SELECT COUNT(*)  FROM  FROM Documents\nWHERE  WHERE Template_ID = '1'  AND  AND Document_Name = 'Summer Show'\n#Print the number of paragraphs in the document named 'Summer Show'.\nPRINT COUNT(*)\n#Print the number of documents in the database.\nSELECT  SELECT COUNT(*)  FROM  FROM Documents\n#Print the number of references in the database.\nSELECT  SELECT COUNT(*)  FROM  FROM References\n#Print the number of templates in the database.\nSELECT  SELECT COUNT(*)  FROM  FROM Templates\n\n##\n#Ref_Templates is not valid.\n\n##\n#Ref_Templates is not valid.\n\n##\n#Ref_Templates is not valid.\n\n##\n#Ref_Templates is not valid.\n\n##\n#Ref_Templates is not valid.\n\n##\n#Ref_Templates is not valid.\n\n##\n#Ref_Templates is not valid.\n\n##\n#Ref_Templates is not valid.\n\n##\n#Ref_Templates is not valid.\n\n##\n#Ref_Templates is not valid.\n\n##\n"}
{"question": "Show paragraph details for paragraph with text 'Korea ' .", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow paragraph details for paragraph with text 'Korea ' .. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow paragraph details for paragraph with text 'Korea ' .. \nSELECT  SELECT 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details' FROM  Paragraphs WHERE Paragraph_Text = 'Korea '\n\n\n\n\n"}
{"question": "What are the details for the paragraph that includes the text 'Korea ' ?", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the details for the paragraph that includes the text 'Korea ' ?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the details for the paragraph that includes the text 'Korea ' ?. \nSELECT  SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text LIKE 'Korea '\norder by Paragraph_ID\n#SELECT * FROM Paragraphs where Paragraph_Text like 'Korea '\n"}
{"question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all paragraph ids and texts for the document with name 'Welcome to NY'.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all paragraph ids and texts for the document with name 'Welcome to NY'.. \nSELECT  SELECT  PARAGRAPH_ID,  PARAGRAPH_TEXT FROM  PARAGRAPHS  WHERE  DOCUMENT_ID = '2001'\n\n"}
{"question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids and texts of paragraphs in the document titled 'Welcome to NY'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids and texts of paragraphs in the document titled 'Welcome to NY'?. \nSELECT  SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = 5 AND Paragraph_ID = 1; \nSELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = 5 AND Paragraph_ID = 3;\n\"\"\"\n\n\ndef test_sql_for_inserting_records():\n    \"\"\"\n    This is a basic test of inserting a record into a single table.\n    \"\"\"\n    d = {\"Paragraph_ID\": 5, \"Document_ID\": 5, \"Paragraph_Text\": \"This is a test\"}\n\n    sql_insert_query = \"\"\"INSERT INTO Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text) VALUES (%s, %s, %s)\"\"\"\n\n    with sql_connect() as sql_db:\n        # Ensure the table exists\n        with sql_cursor(sql_db) as cursor:\n            sql_cursor.execute(\"SELECT COUNT(*) FROM Paragraphs\")\n            count = sql_cursor.fetchone()[0]\n            if count == 0:\n                print(\"Paragraphs table does not exist\")\n                sql"}
{"question": "Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all paragraph texts for the document \"Customer reviews\".. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all paragraph texts for the document \"Customer reviews\".. \nSELECT  SELECT Paragraph_ID, \n         Paragraph_Text, \n         Other_Details \nFROM Paragraphs \nWHERE Document_ID = 'Customer reviews' \n"}
{"question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the paragraph texts for the document with the name 'Customer reviews'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the paragraph texts for the document with the name 'Customer reviews'?. \nSELECT  SELECT Paragraph_Text FROM Document_Paragraphs WHERE Document_ID = '5'\n\n## Q. 1: What are the Template IDs for the 2nd most recent template with a Name of \"Blog\"?. \nSELECT  SELECT Template_ID FROM Templates ORDER BY Template_ID DESC LIMIT 2\n\n## Q. 2: What are the Document IDs for the 4th most recent document with a Name of \"Social media guidelines\"?. \nSELECT  SELECT Document_ID FROM Documents ORDER BY Document_ID DESC LIMIT 3\n\n## Q. 3: What are the Template IDs for the 4th most recent template with a Name of \"Social media guidelines\"?. \nSELECT  SELECT Template_ID FROM Templates ORDER BY Template_ID DESC LIMIT 3\n\n## Q. 4: What are the Document IDs for the 10th most recent document with a Name of \"Social media guidelines\"?. \nSELECT  SELECT Document_ID FROM Documents ORDER BY Document_ID DESC LIMIT 9\n\n## Q. 5: What are the Template IDs for the 10th most recent template with a Name"}
{"question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document ids and the number of paragraphs in each document. Order by document id.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document ids and the number of paragraphs in each document. Order by document id.. \nSELECT  SELECT\n    d.Document_ID,\n    COUNT(d.Paragraph_ID) AS 'NumberOfParagraphs'\nFROM  FROM\n    Documents AS d\nGROUP BY  GROUP BY\n    d.Document_ID\nORDER BY  ORDER BY\n    d.Document_ID\n;\n\n"}
{"question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the different document ids along with the number of paragraphs corresponding to each, ordered by id.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the different document ids along with the number of paragraphs corresponding to each, ordered by id.. \nSELECT  SELECT  Document_ID, COUNT(*) AS No_Of_Paragraphs FROM   Paragraphs  GROUP BY  Document_ID ORDER BY  Document_ID;\n\n\n######################################################################\n#/******************************************************************\n#\n# This script can be used to create the SQL table and its\n# associated tables from the CSV file 'data/sql/cre_Doc_Template_Mgt.csv'\n#\n#\n######################################################################\n######################################################################\n\n#Set the date format (e.g. yyyy-mm-dd) \nDATE_FORMAT='%Y-%m-%d'\n\n#Set the file path and filename \npath=r'c:\\Program Files\\PostgreSQL\\9.6\\data\\sql\\cre_Doc_Template_Mgt.csv'\n\n#Set the delimiter used to split the line \ndelimiter=','\n\n#Import the data into SQLite \nimport sqlite3 as sql\nimport csv\nimport os\nimport sys\nimport datetime\n\ndb = sql.connect(\"c:\\\\Program Files\\\\PostgreSQL\\\\9.6\\\\data\\\\sqlite\\\\doc"}
{"question": "Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document ids, names and the number of paragraphs in each document.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow all document ids, names and the number of paragraphs in each document.. \nSELECT  SELECT\n        Document_ID\n        ,Document_Name\n        ,COUNT(Paragraph_ID)\nFROM Paragraphs\nGROUP BY Document_ID\n\n*/\n\n"}
{"question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids and names of each document, as well as the number of paragraphs in each?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids and names of each document, as well as the number of paragraphs in each?. \nSELECT  SELECT 'Document_ID' AS 'Key',\n           COUNT(*) AS 'Count'\n           FROM Documents\n           WHERE Template_ID = 'a9321267-76c8-421d-93d0-f2563e548d4e'\n            GROUP BY 'Document_ID'\n            ORDER BY 'Count'\n\nWhat are the ids and names of each template, as well as the number of documents and paragraphs in each?. \nSELECT  SELECT 'Template_ID' AS 'Key',\n           COUNT(*) AS 'Count'\n           FROM Templates\n           WHERE Template_ID = 'a9321267-76c8-421d-93d0-f2563e548d4e'\n            GROUP BY 'Template_ID'\n            ORDER BY 'Count'\n\nWhat is the number of paragraphs in each document?. \nSELECT  SELECT 'Paragraph_ID' AS 'Key',\n           COUNT(*) AS 'Count'\n           FROM Paragraphs\n           WHERE Document_ID = 'a9321267-7"}
{"question": "List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nList all document ids with at least two paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nList all document ids with at least two paragraphs.. \nSELECT  SELECT Document_ID \nFROM    Documents INNER JOIN DocumentParagraphs\nON      Documents.Document_ID = DocumentParagraphs.Document_ID\nWHERE   DocumentParagraphs.Paragraph_ID != 0\nGROUP BY  Document_ID;\n\n### A recursive query\n### SELECT Document_ID FROM Documents\n### WHERE Document_ID IN\n### (\n### SELECT Template_ID FROM Templates\n### WHERE Template_Type_Code = 'Document')\n\nList all templates:\nSELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code = 'Document';\n\nList documents:\nSELECT Document_ID\nFROM Documents\nWHERE Document_ID IN\n(\nSELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code = 'Document');\n\nList templates\nSELECT Document_ID\nFROM Documents\nWHERE Document_ID IN\n(\nSELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code = 'Document');\n\nList documents\nSELECT Document_ID\nFROM Documents\nWHERE Document_ID IN\n(\nSELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code = '"}
{"question": "What are the ids of documents that have 2 or more paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of documents that have 2 or more paragraphs?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of documents that have 2 or more paragraphs?. \nSELECT  SELECT  Document_ID\nFROM    Documents\nWHERE Document_ID IN  (SELECT Paragraph_ID\n                     FROM Paragraphs\n                     GROUP BY Paragraph_ID\n                     HAVING COUNT(Paragraph_ID) > 1);\n\nWhat is the number of documents that have 2 or more paragraphs?.\nSELECT COUNT(*)\nFROM   Documents\nWHERE Document_ID IN  (SELECT Paragraph_ID\n                     FROM Paragraphs\n                     GROUP BY Paragraph_ID\n                     HAVING COUNT(Paragraph_ID) > 1);\n\nWhat is the number of documents that have no paragraphs?. \nSELECT COUNT(*)\nFROM   Documents\nWHERE Document_ID NOT IN  (SELECT Paragraph_ID\n                         FROM Paragraphs\n                         GROUP BY Paragraph_ID\n                         HAVING COUNT(Paragraph_ID) = 0);\n\nWhat is the number of documents that have 2 or more paragraphs?.\nSELECT COUNT(*)\nFROM   Documents\nWHERE Document_ID IN  (SELECT Paragraph_ID\n                     FROM Paragraphs\n                     GROUP BY Paragraph_ID\n                    "}
{"question": "What is the document id and name with greatest number of paragraphs?", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id and name with greatest number of paragraphs?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id and name with greatest number of paragraphs?. \nSELECT  SELECT  Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count\nFROM    Documents  INNER JOIN Paragraphs  ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Document_ID  ORDER BY Paragraph_Count DESC \nLIMIT 1;\n#-> 80101106364303155770, 103473\n\nWhat is the document id with the highest number of paragraphs? \nSELECT  Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count\nFROM    Documents  INNER JOIN Paragraphs  ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Document_ID  ORDER BY Paragraph_Count DESC \nLIMIT 1;\n#-> 80101106364303155770, 103473\n\nWhat is the paragraph id with the highest number of paragraphs? \nSELECT  Paragraph_ID, COUNT(Paragraph_ID) AS Paragraph_Count\nFROM    Paragraphs  GROUP"}
{"question": "Return the id and name of the document with the most paragraphs.", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id and name of the document with the most paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id and name of the document with the most paragraphs.. \nSELECT  SELECT COUNT(*) AS 'count' \nFROM    Documents\nWHERE   Documents.Template_ID = $1\nGROUP BY  Documents.Template_ID\nHAVING  COUNT(*) = (\n                SELECT   COUNT(*)\n                FROM     Paragraphs\n                WHERE    Paragraphs.Document_ID = Documents.Document_ID\n                )\n"}
{"question": "What is the document id with least number of paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id with least number of paragraphs?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id with least number of paragraphs?. \nSELECT  SELECT ID, COUNT(id) FROM paragraphs GROUP BY ID HAVING COUNT(id) = 1;\n\n##SQLite DB: #Select all docs that contains more than 1 paragraph\nSELECT id,template_id,version_number,template_type_code,date_effective_from,date_effective_to,document_id,document_name,document_description,other_details FROM documents WHERE version_number > 1;\n\n##SQLite DB: #Select all templates that have more than 1 doc\nSELECT template_id,template_type_code,date_effective_from,date_effective_to,document_count FROM templates WHERE document_count > 1;\n\n##SQLite DB: #Select all docs that contains only 1 paragraph\nSELECT id,template_id,version_number,template_type_code,date_effective_from,date_effective_to,document_id,document_name,document_description,other_details FROM documents WHERE version_number = 1;\n\n##SQLite DB: #Select all templates that have only 1 doc\nSELECT template_id,template_type_"}
{"question": "Return the id of the document with the fewest paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id of the document with the fewest paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nReturn the id of the document with the fewest paragraphs.. \nSELECT  SELECT MAX(p.Paragraph_ID) AS MAX_P_ID  FROM  Document_Templates_Paragraphs p \nWHERE  Template_ID = 1\n"}
{"question": "What is the document id with 1 to 2 paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id with 1 to 2 paragraphs?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat is the document id with 1 to 2 paragraphs?. \nSELECT  SELECT * FROM Documents WHERE Document_ID = 2 AND Paragraphs.Count = 2\n\nWhat is the name of the template with ID=1?\nSELECT Template_Name FROM Templates WHERE Template_ID = 1\n\nHow many templates do you have?\nSELECT COUNT(*) FROM Templates\n\nWhat is the name of the template with ID=1?\nSELECT Template_Name FROM Templates WHERE Template_ID = 2\n\nHow many templates do you have?\nSELECT COUNT(*) FROM Templates\n\nWhat is the name of the template with ID=1?\nSELECT Template_Name FROM Templates WHERE Template_ID = 3\n\nHow many templates do you have?\nSELECT COUNT(*) FROM Templates\n\nWhat is the name of the template with ID=1?\nSELECT Template_Name FROM Templates WHERE Template_ID = 4\n\nHow many templates do you have?\nSELECT COUNT(*) FROM Templates\n\nWhat is the name of the template with ID=1?\nSELECT Template_Name FROM Templates WHERE Template_ID = 5\n\nHow many templates do you have?\nSELECT COUNT(*) FROM Templates\n\nWhat is the name of the template with ID"}
{"question": "Give the ids of documents that have between one and two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nGive the ids of documents that have between one and two paragraphs.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nGive the ids of documents that have between one and two paragraphs.. \nSELECT  SELECT * FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Template_Types WHERE Template_Type_Code = '01') AND Version_Number = 2 AND Template_ID IN (SELECT Template_ID FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Template_Types WHERE Template_Type_Code = '01'))\n                                                          AND Count(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;\n"}
{"question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow the document id with paragraph text 'Brazil' and 'Ireland'.. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nShow the document id with paragraph text 'Brazil' and 'Ireland'.. \nSELECT  SELECT Document_ID, Document_Name, Document_Description, Template_ID, Document_Paragraphs.Paragraph_ID, Document_Paragraphs.Paragraph_Text\nFROM    (SELECT  Document_ID, MAX(Paragraph_ID) AS Paragraph_ID, Document_Paragraphs.Paragraph_Text FROM Document_Paragraphs GROUP BY Document_ID) AS Document_Paragraphs\n    INNER JOIN Documents ON Document_ID = Documents.Document_ID\n    INNER JOIN Templates ON Template_ID = Templates.Template_ID\nWHERE Document_Paragraphs.Paragraph_ID = 6\n    AND Documents.Date_Effective_From >= '2013-01-01 00:00:00'\n    AND Documents.Date_Effective_From <= '2013-12-31 00:00:00'\n    AND Documents.Date_Effective_To >= '2013-01-01 00:00:00'\n    AND Documents.Date_Effective_To <= '201"}
{"question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "prompt": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?. \nSELECT ", "response": "### SQLite SQL cre_Doc_Template_Mgt database, with their properties:\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?. \nSELECT  SELECT\nDocument_ID\nFROM Documents\nWHERE Document_Name = 'My Paragraph Document';\n#Ref_Template_Types('Template_Type_Code', 'Template_Type_Description')\n#Templates('Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details')\n#Documents('Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details')\n#Paragraphs('Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details')\nWhat are the ids of the documents that were created before 2010? \nSELECT  SELECT\nDocument_ID\nFROM Documents\nWHERE Document_Name = 'My Paragraph Document'\nAND Document_Details = 'Created_Before_2010';\n\nWhat are the ids of the documents that were created after 2010? \nSELECT  SELECT\nDocument_ID\nFROM Documents\nWHERE Document_Name = 'My Paragraph Document'\nAND Document_Details = 'Created_After_2010"}
{"question": "How many teachers are there?", "sql": "SELECT count(*) FROM teacher", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nHow many teachers are there?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nHow many teachers are there?. \nSELECT  SELECT COUNT(teacher_id) AS \"num\", \n        teacher_id\n    FROM   teacher\n    GROUP BY teacher_id\n\n### Add another record into the \"course\" table:\nINSERT INTO course \n    (course_id, staring_date, course) \nVALUES \n    (20100814, '2010-08-14', 'Data Mining'),\n    (20100907, '2010-09-07', 'Mobile Networks'),\n    (20101005, '2010-10-05', 'Multimedia Networks')\n\n### Show the records in the \"course\" table\nSELECT \n        course_id AS \"id\",\n        staring_date AS \"start\",\n        course AS \"name\"\n    FROM   course\n    ORDER BY staring_date DESC\n\n### \nSELECT \n        c1.course_id,\n        c1.staring_date,\n        c1.course,\n        c2.course_id AS \"Teach"}
{"question": "What is the total count of teachers?", "sql": "SELECT count(*) FROM teacher", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the total count of teachers?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the total count of teachers?. \nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nWhat is the name of the youngest teacher? \nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\nSELECT  SELECT  SELECT\n#Hint: The keyword ORDER BY must be used if you want to display the data in order.\n\n"}
{"question": "List the names of teachers in ascending order of age.", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the names of teachers in ascending order of age.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the names of teachers in ascending order of age.. \nSELECT  SELECT  SELECT  SELECT\n        teacher.Name,\n        teacher.Age,\n        teacher.Hometown,\n        teacher.Order_Age\nFROM    teacher\nORDER BY\n        teacher.Age\n\n### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\n\nList the names of teachers in descending order of age.. \nSELECT  SELECT  SELECT  SELECT\n        teacher.Name,\n        teacher.Age,\n        teacher.Hometown,\n        teacher.Order_Age\nFROM    teacher\nORDER BY\n        teacher.Age DESC\n\n### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', '"}
{"question": "What are the names of the teachers ordered by ascending age?", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers ordered by ascending age?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers ordered by ascending age?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nNAME       NAME       NAME       NAME       NAME       NAME       NAME\nFROM       FROM       FROM       FROM       FROM       FROM       FROM\nteacher    teacher    teacher    teacher    teacher    teacher    teacher\nWHERE      WHERE      WHERE      WHERE      WHERE      WHERE      WHERE\nAge < 25    Age < 25    Age < 25    Age < 25    Age < 25    Age < 25    Age < 25\nORDER BY   ORDER BY   ORDER BY   ORDER BY   ORDER BY   ORDER BY   ORDER BY\nAge ASC     Age ASC     Age ASC     Age ASC     Age ASC     Age ASC     Age ASC\n\"\"\"\n\n# What happens if we try to order a table that is not in ascending order?\n# SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nNAME       NAME       NAME       NAME       NAME       NAME       NAME\nFROM       FROM       FROM       FROM       FROM       FROM       FROM\nteacher    teacher    teacher    teacher    teacher    teacher    teacher\nWHERE      WHERE      WHERE      WHERE      WHERE      WHERE      WHERE\nAge < 25"}
{"question": "What are the age and hometown of teachers?", "sql": "SELECT Age ,  Hometown FROM teacher", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the age and hometown of teachers?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the age and hometown of teachers?. \n}
{"question": "What is the age and hometown of every teacher?", "sql": "SELECT Age ,  Hometown FROM teacher", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the age and hometown of every teacher?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the age and hometown of every teacher?. \nSELECT  SELECT COUNT(1) FROM teachers\n(where Age is not NULL) (where Age is not NULL)\nORDER BY Age ORDER BY Age\n# 25 25\n#What is the age of the teacher with teacher id 2?. \nSELECT  SELECT teacher.Age FROM teachers\n(where Teacher_ID = 2) (where Teacher_ID = 2)\n# 25\n#What is the age of the teacher who has grade 5?. \nSELECT  SELECT teacher.Age FROM course_arrange\n(WHERE Grade = 5) (WHERE Grade = 5)\n# 25\n#What is the age of the oldest teacher in the database?. \nSELECT  SELECT teacher.Age FROM teachers\n(WHERE Age > (SELECT MAX(Age) FROM teachers) (WHERE Age > (SELECT MAX(Age) FROM teachers))\n# 25\n#What is the name of the youngest teacher in the database?. \nSELECT  SELECT teachers.Name FROM teachers\n(WHERE Age = (SELECT MIN(Age) FROM teachers) (WHERE Age = (SELECT MIN(Age) FROM teachers))\n# Margaret\n#What is the name"}
{"question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "sql": "select name from teacher where hometown != \"little lever urban district\"", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the name of teachers whose hometown is not `` Little Lever Urban District '' .. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the name of teachers whose hometown is not `` Little Lever Urban District '' .. \nSELECT  SELECT  Name FROM Teacher WHERE Name LIKE '%Little Lever Urban District%'\n\"\"\"\n\nimport sqlite3\nimport random\n\ndb = sqlite3.connect('course_teach.db')\ncursor = db.cursor()\n\n# create a table\ncursor.execute(\"CREATE TABLE Course(Course_ID INTEGER PRIMARY KEY, Staring_Date TEXT, Course TEXT)\")\n\n# create another table\ncursor.execute(\"CREATE TABLE Teacher(Teacher_ID INTEGER PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT)\")\n\n# create another table\ncursor.execute(\"CREATE TABLE Course_arrange(Course_ID INTEGER, Teacher_ID INTEGER, Grade TEXT)\")\n\ncursor.execute(\"\"\"\nCREATE TABLE Exam(Exam_ID INTEGER PRIMARY KEY, Course_ID INTEGER, Teacher_ID INTEGER, Marks TEXT)\"\"\")\n\n\n\n# insert a row into the table\n#cursor.execute('INSERT INTO Course(Staring_Date, Course) VALUES(\"05/05/201"}
{"question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "sql": "select name from teacher where hometown != \"little lever urban district\"", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    teacher.Name,\n    teacher.Age,\n    teacher.Hometown\nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\n    teacher\nWHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE\n    teacher.Hometown != 'Little Lever Urban District'\n"}
{"question": "Show the name of teachers aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the name of teachers aged either 32 or 33?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the name of teachers aged either 32 or 33?. \nSELECT  SELECT Teacher_ID, Name, Age, Hometown\nFROM    FROM Teacher\nWHERE   WHERE (Age = 32)\nOR       OR (Age = 33)\n# [solution]\nSELECT Teacher_ID, Name, Age, Hometown\nFROM Teacher\nWHERE Age = 32\nUNION ALL\nSELECT Teacher_ID, Name, Age, Hometown\nFROM Teacher\nWHERE Age = 33;\n# [question]\nUsing a UNION ALL query, show the names of teachers aged 32 or 33, and\nalso the sum of their ages.\nSELECT Teacher_ID, Name, Age, Hometown\nFROM Teacher\nWHERE Age = 32\nUNION ALL\nSELECT Teacher_ID, Name, Age, Hometown\nFROM Teacher\nWHERE Age = 33\nUNION ALL\nSELECT Teacher_ID, SUM(Age), Hometown\nFROM Teacher\nWHERE Age = 32\nOR Age = 33;\n# [solution]\nSELECT Teacher_ID, Name, Age, Hometown\nFROM Teacher\nWHERE Age = "}
{"question": "What are the names of the teachers who are aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers who are aged either 32 or 33?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers who are aged either 32 or 33?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nFROM    FROM    FROM    FROM    FROM   \nteacher  teacher  teacher  teacher  teacher \nWHERE   WHERE   WHERE   WHERE   WHERE \nAge    == 32  ||  Age    == 33  ||  Age    == 34 \nORDER BY  ORDER BY  ORDER BY  ORDER BY  ORDER BY\nAge     Age     Age     Age\nLIMIT   LIMIT   LIMIT   LIMIT \n10    10    10    10\n### SQL query to list out the 10 oldest teachers\nSELECT  Name, Age \nFROM    teacher \nWHERE   Age    == 32  ||  Age    == 33  ||  Age    == 34 \nORDER BY  Age \nLIMIT   10 \n\n### SQL query to list out the 10 teachers who are from 'Toronto'.\nSELECT  Name \nFROM    teacher \nWHERE   Name    == 'Toronto' \nLIMIT   10 \n\n### SQL query to list out the 10 teachers who are from 'Toronto' \n###"}
{"question": "What is the hometown of the youngest teacher?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the hometown of the youngest teacher?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the hometown of the youngest teacher?. \nSELECT  SELECT  SELECT  SELECT\nteacher.age FROM teacher, course_arrange WHERE course_arrange.teacher_id = teacher.teacher_id AND \ncourse_arrange.course_id = course.course_id AND course.starting_date = '2013-09-01' AND course.course_id = '1'\n# the hometown of the youngest teacher.\n#course_arrange.teacher_id = teacher.teacher_id AND\n#course_arrange.course_id = course.course_id AND course.starting_date = '2013-09-01' AND course.course_id = '1'\n"}
{"question": "Where is the youngest teacher from?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhere is the youngest teacher from?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhere is the youngest teacher from?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM\ncourses courses teachers teachers courses\nWHERE  WHERE  WHERE  WHERE  WHERE\nCourse_ID = 1 AND Course_ID = 1 AND Teacher_ID = 1 AND Course_ID = 1\nAND    Teacher_ID = 1 AND Grade = 1 AND Course_ID = 1\n#Query the youngest teacher from the course_teach database,\n#and print the result.\n"}
{"question": "Show different hometown of teachers and the number of teachers from each hometown.", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow different hometown of teachers and the number of teachers from each hometown.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow different hometown of teachers and the number of teachers from each hometown.. \nSELECT  SELECT teachers.Name as 'Teacher Name', \n        COUNT(course_arrange.Teacher_ID) as 'Number of Courses',\n        COUNT(DISTINCT course_arrange.Grade) as 'Total Different Grades'\nFROM course_teach course_teach\nINNER JOIN course_arrange course_arrange ON course_arrange.Course_ID = course_teach.Course_ID\nINNER JOIN teachers teachers ON teachers.Teacher_ID = course_arrange.Teacher_ID\nGROUP BY teachers.Name\nORDER BY 'Number of Courses' ASC, 'Total Different Grades' DESC;\n\n#Select all teachers' hometowns that has at least 2 teachers..\nSELECT teachers.Name, teachers.Age, teachers.Hometown\nFROM course_teach course_teach\nINNER JOIN course_arrange course_arrange ON course_arrange.Course_ID = course_teach.Course_ID\nINNER JOIN teachers teachers ON teachers.Teacher_ID = course_arrange.Teacher_ID\nWHERE teachers.Homet"}
{"question": "For each hometown, how many teachers are there?", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nFor each hometown, how many teachers are there?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nFor each hometown, how many teachers are there?. \nSELECT  SELECT * FROM teacher WHERE hometown = 'Paris'\n\n# For each course, how many teachers do we have?\nSELECT  SELECT * FROM course_teach WHERE Course_ID = 1\n\n# For each course and teacher, how many courses are there?\nSELECT  SELECT * FROM course_arrange WHERE Course_ID = 1 AND Teacher_ID = 2\n\n# For each course and teacher, how many grade are there?\nSELECT  SELECT * FROM course_arrange WHERE Course_ID = 2 AND Teacher_ID = 1\n\n# For each course and teacher, how many students are there?\nSELECT  SELECT * FROM course_arrange WHERE Course_ID = 2 AND Teacher_ID = 3\n\n# For each course and teacher, how many students are there?\nSELECT  SELECT * FROM course_arrange WHERE Course_ID = 1 AND Teacher_ID = 2\n\n# For each course and teacher, how many students are there?\nSELECT  SELECT * FROM course_arrange WHERE Course_ID = 1 AND Teacher_ID = 3\n\n# For each course and"}
{"question": "List the most common hometown of teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the most common hometown of teachers.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the most common hometown of teachers.. \nSELECT  SELECT  DISTINCT  teacher.hometown  FROM  course \n            INNER JOIN course_arrange  ON  course_arrange.course_id = course.id \n            INNER JOIN teacher  ON  course_arrange.teacher_id = teacher.id \n        WHERE  course.id = 1 \n#    SELECT  SELECT  DISTINCT  teacher.hometown  FROM  course \n            INNER JOIN course_arrange  ON  course_arrange.course_id = course.id \n            INNER JOIN teacher  ON  course_arrange.teacher_id = teacher.id \n        WHERE  course.id = 1 \n#    SELECT  SELECT  DISTINCT  teacher.hometown  FROM  course \n            INNER JOIN course_arrange  ON  course_arrange.course_id = course.id \n            INNER JOIN teacher  ON  course_arrange.teacher_id = teacher.id \n        WHERE  course.id = 1 \n#    SELECT  SELECT  DISTINCT  teacher.hometown  FROM  course \n            INNER JOIN course_ar"}
{"question": "What is the most commmon hometowns for teachers?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the most commmon hometowns for teachers?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the most commmon hometowns for teachers?. \nSELECT  SELECT *  FROM  SELECT course.course_ID, \n    COUNT(course.course_ID) AS course_arrange,\n    course.course_name, \n    teacher.teacher_ID,\n    teacher.teacher_name,\n    teacher.teacher_age, \n    teacher.teacher_hometown \nFROM  course_arrange \nJOIN course \nON course_arrange.course_ID = course.course_ID \nJOIN teacher \nON course_arrange.teacher_ID = teacher.teacher_ID \nGROUP BY  course_arrange.course_ID, \n    course.course_name, \n    teacher.teacher_ID,\n    teacher.teacher_name,\n    teacher.teacher_age, \n    teacher.teacher_hometown \nORDER BY  course_arrange.course_ID, \n    course.course_name\n\nWhat is the most commmon age for teachers?. \nSELECT  SELECT *  FROM  SELECT course.course_ID, \n    COUNT(course.course_ID) AS course_ar"}
{"question": "Show the hometowns shared by at least two teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the hometowns shared by at least two teachers.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the hometowns shared by at least two teachers.. \nSELECT  SELECT  DISTINCT  FROM  WHERE  ;\n"}
{"question": "What are the towns from which at least two teachers come from?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the towns from which at least two teachers come from?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the towns from which at least two teachers come from?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    course_teach.Course_ID,\n    teacher.Name,\n    teacher.Age,\n    teacher.Hometown\nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\n    course_teach\n    LEFT JOIN teacher ON teacher.Teacher_ID = course_teach.Teacher_ID\nWHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE\n    course_teach.Course_ID = 5\n    AND  AND  AND  AND  AND  AND  AND  AND  AND\n    (SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n        COUNT(teacher.Teacher_ID)\n    FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\n        course_teach\n        LEFT JOIN teacher ON teacher.Teacher_ID = course_teach.Teacher_ID\n    WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE\n        course"}
{"question": "Show names of teachers and the courses they are arranged to teach.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the courses they are arranged to teach.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the courses they are arranged to teach.. \nSELECT  SELECT\nFROM    FROM\nCourse_teach\nJOIN    JOIN\nteacher ON teacher.Teacher_ID = Course_teach.Course_ID\nWHERE WHERE\nCourse_teach.Staring_Date >=  '2000-01-01'\nAND     AND\nteacher.Teacher_ID != 0\nORDER   ORDER\nBY    BY\nCourse_ID   Course_ID\nASC      ASC\n;\n#\n\n"}
{"question": "What is the name of each teacher and what course they teach?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the name of each teacher and what course they teach?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the name of each teacher and what course they teach?. \nSELECT  SELECT\nteacher.name,\ncourse.name\nFROM teacher,\ncourse\nWHERE teacher.teacher_id = course.teacher_id\nORDER BY teacher.teacher_id\n\n### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat is the name of each teacher and what course they teach?. \nSELECT  SELECT\nteacher.name,\ncourse.name\nFROM teacher,\ncourse\nWHERE teacher.teacher_id = course.teacher_id\nORDER BY teacher.teacher_id\n\n\n\n"}
{"question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.. \nSELECT  SELECT \nCourse_ID,  Teacher_ID, Teacher_Name, \nFROM    course_arrange, \nJOIN    course,\nON      course.Course_ID=course_arrange.Course_ID, \nJOIN    teacher,\nON      teacher.Teacher_ID=course_arrange.Teacher_ID\nORDER BY Teacher_Name ASC\n"}
{"question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?. \nSELECT  SELECT teacher.Name  ,  SELECT teacher.Age  ,  SELECT course.Course \nFROM course  INNER JOIN course_teach ON course.Course_ID = course_teach.Course_ID \nINNER JOIN teacher  ON course_teach.Teacher_ID = teacher.Teacher_ID \nORDER BY teacher.Name ASC \n\n\n\n"}
{"question": "Show the name of the teacher for the math course.", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the name of the teacher for the math course.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow the name of the teacher for the math course.. \nSELECT  SELECT \nFROM    FROM   \nteacher teacher JOIN course_arrange course_arrange ON \n    teacher.Teacher_ID = course_arrange.Teacher_ID AND \n    course_arrange.Course_ID = 'Math' AND \n    course_arrange.Teacher_ID = '2'\nWHERE   WHERE  \n    teacher.Teacher_ID = '1' \nORDER BY  ORDER BY \n    teacher.Age ASC"}
{"question": "What are the names of the people who teach math courses?", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the people who teach math courses?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the people who teach math courses?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the number of courses they teach.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers and the number of courses they teach.. \nSELECT  SELECT 'Teacher_Name', COUNT('Course_ID')\nFROM course_teach \nWHERE course_teach.Teacher_ID = course_teach.Teacher_ID\nGROUP BY course_teach.Teacher_ID \nHAVING COUNT('Course_ID') > 1 \nORDER BY COUNT('Course_ID');\n"}
{"question": "What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers and how many courses do they teach?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers and how many courses do they teach?. \nSELECT  SELECT  FROM  FROM  course_teach  JOIN  course  ON  course_id  =  course.course_id  JOIN  teacher  ON  teacher.teacher_id  =  course_teach.teacher_id  ORDER  BY  teacher_id \n\n# Course \ncourse_id:   1\nstaring_date: 1988-03-04\ncourse:      CIS\n# Teacher \nteacher_id:   1\nname:        Bill Gates\nage:        52\nhometown:    Seattle\n# Course arrange \ncourse_id:   1\nteacher_id:   1\ngrade:       4\n\n1. What was the first course that Bill taught? \nSELECT  FROM  course_teach  WHERE  teacher_id  =  1\n\n2. What was the first course that Bill taught? \nSELECT  FROM  course_teach  WHERE  teacher_id  =  1  ORDER  BY  course_id  DESC \n\n3. Who is the teacher who started to teach before Bill? \nSELECT  FROM  course"}
{"question": "Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers that teach at least two courses.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nShow names of teachers that teach at least two courses.. \nSELECT  SELECT  SELECT\n    Name\n    FROM\n    teacher\n    WHERE\n        COUNT(*) > 1\n    GROUP BY\n        Name\n    ;\n## Fill out the code below to display the names of teachers that teach at least two courses.\n##\n# # First of all, we need to change the code to match the SQLite database structure, and to use the functions we have learned so far. \n# # In order to teach multiple courses, the teacher must have a corresponding entry in the course_teach table.\n# # We can access this table by calling course_teach.select(). Then we can get all the columns in the table using the * symbol, and we don't need the .select() function.\n# # This code doesn't use the count() function, it uses the COUNT() function to count the number of rows in the result. We can then use the WHERE clause to filter the result.\n# # As we have learned, COUNT() function will return a number and the WHERE clause will only evaluate the result when the number is greater than 1.\n# # Finally, we can use the GROUP BY clause to group the result by the Name column.\n# # The result"}
{"question": "What are the names of the teachers who teach at least two courses?", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers who teach at least two courses?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers who teach at least two courses?. \nSELECT  SELECT \n      FROM  FROM \n      teacher  teacher \n    WHERE  WHERE \n      teacher_id IN (SELECT  IN (\n      teacher_id FROM  FROM \n      course_arrange  course_arrange\n    WHERE  WHERE \n      course_arrange.course_id IN (SELECT  IN (\n      course_id FROM  FROM \n      course  course\n    WHERE  WHERE \n      course.starting_date <= '2000-01-01')\n    AND  AND \n      course.starting_date >= '1990-01-01')\n    AND  AND \n      course_arrange.teacher_id = teacher_id))\n\n\n# Mimic what the interpreter does in the shell\n# You should see 3 rows of output\n"}
{"question": "List the names of teachers who have not been arranged to teach courses.", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the names of teachers who have not been arranged to teach courses.. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nList the names of teachers who have not been arranged to teach courses.. \nSELECT  SELECT  SELECT\nteachers.Name,\ncourse_arrange.Grade,\ncourse_arrange.Teacher_ID\nFROM    teachers,\n        course_arrange\nWHERE   teachers.Name\n        NOT IN (\n                SELECT  SELECT  SELECT\n                course_arrange.Teacher_ID\n                FROM    course_arrange\n                )\nORDER BY course_arrange.Teacher_ID,\n        course_arrange.Grade;\n\"\"\"\n\n\ndef test_2():\n    \"\"\"\n    ### SQLite SQL course_teach database, with their properties:\n    #course('Course_ID', 'Staring_Date', 'Course')\n    #teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n    #course_arrange('Course_ID', 'Teacher_ID', 'Grade')\n    #List the names of teachers who have not been arranged to teach courses.. \n    SELECT  SELECT  SELECT\n    teachers.Name,\n    course_arrange.Grade,\n    course_arrange.Teacher_ID\n   "}
{"question": "What are the names of the teachers whose courses have not been arranged?", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "prompt": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers whose courses have not been arranged?. \nSELECT ", "response": "### SQLite SQL course_teach database, with their properties:\n#course('Course_ID', 'Staring_Date', 'Course')\n#teacher('Teacher_ID', 'Name', 'Age', 'Hometown')\n#course_arrange('Course_ID', 'Teacher_ID', 'Grade')\nWhat are the names of the teachers whose courses have not been arranged?. \nSELECT  SELECT DISTINCT teacher.name  FROM course_teach  INNER JOIN course_arrange ON course.id = course_arrange.course_id  WHERE NOT EXISTS(  SELECT teacher.id  FROM course_teach  INNER JOIN course_arrange ON course_teach.teacher_id = course_arrange.teacher_id  WHERE teacher_id = ? )\n\nWhat are the names of the courses whose teachers' ages are less than 30?.\nSELECT  SELECT DISTINCT course.name  FROM course_teach  INNER JOIN course_arrange ON course_teach.id = course_arrange.course_id  WHERE NOT EXISTS(  SELECT teacher.name  FROM course_teach  INNER JOIN course_arrange ON course_teach.teacher_id = course_arrange.teacher_id  WHERE teacher.age < 30 )\n\nWhat are the names of the teachers whose ages are greater than 40?.\nSELECT  SELECT DISTINCT teacher.name  FROM course_teach  INNER JOIN course_arrange ON course_teach.id = course_arrange.course_id  WHERE NOT EXISTS"}
{"question": "How many visitors below age 30 are there?", "sql": "SELECT count(*) FROM visitor WHERE age  <  30", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nHow many visitors below age 30 are there?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nHow many visitors below age 30 are there?. \nSELECT  SELECT COUNT(visitor_ID)  FROM  FROM visit visit, museum museum\nWHERE visit.museum_ID=museum.Museum_ID AND visit.visitor_ID < 30\n##\n## Create a new database\n\n\n\nimport sqlite3\nconn= sqlite3.connect('museum_visit.db')\nc= conn.cursor()\nc.execute(\"CREATE TABLE IF NOT EXISTS museum (Museum_ID INTEGER PRIMARY KEY, Name TEXT, Num_of_Staff INTEGER, Open_Year INTEGER)\")\nc.execute(\"CREATE TABLE IF NOT EXISTS visitor (ID INTEGER PRIMARY KEY, Name TEXT, Level_of_membership INTEGER, Age INTEGER)\")\nc.execute(\"CREATE TABLE IF NOT EXISTS visit (Museum_ID INTEGER, visit_ID INTEGER, Num_of_Ticket INTEGER, Total_spent INTEGER)\")\n\n## Insert 5 museums and 15 visitors to the database\nc.execute(\"INSERT INTO museum VALUES (?,?,?,?)\", ('1','Museum 1','3','2010'))\nc.execute(\""}
{"question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.. \nSELECT  SELECT museum_visit.visitor_ID AS visitor_ID, museum_visit.Name AS Name, visitor.Level_of_membership AS Level_of_membership\nFROM    museum_visit, visitor\nWHERE    museum_visit.visitor_ID = visitor.ID\nGROUP BY museum_visit.visitor_ID, museum_visit.Name, visitor.Level_of_membership\nORDER BY Level_of_membership, Name"}
{"question": "What is the average age of the visitors whose membership level is not higher than 4?", "sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the average age of the visitors whose membership level is not higher than 4?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the average age of the visitors whose membership level is not higher than 4?. \nSELECT  SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;\nWhat is the name of the most visited museum?. \nSELECT  SELECT museum_id, name FROM museum, visitor, visit \nWHERE museum.museum_id = visit.museum_id AND visit.visitor_id = visitor.visitor_id \nGROUP BY museum.museum_id ORDER BY museum.name DESC;\n#My answer was:\n#Museum with more visits:\n#SELECT museum.name FROM museum, visitor, visit \n#WHERE museum.museum_id = visit.museum_id AND visit.visitor_id = visitor.visitor_id \n#GROUP BY museum.museum_id ORDER BY museum.name DESC;\n#My answer: 'National Gallery'\n#Average age of visitor with level_of_membership <= 4:\n#SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;\n#My answer: '41'\n\n\n\n### Your solution to the FizzBuzz challenge:\ndef fizzbuzz(i)\n  if i % 15 =="}
{"question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.. \nSELECT  SELECT * FROM visit AS v\nWHERE v.level_of_membership > 4\nORDER BY v.age ASC\n\nFind the name and membership level of the visitors whose membership level is lower than 2, and sort by their age from young to old.. \nSELECT  SELECT * FROM visit AS v\nWHERE v.level_of_membership <= 2\nORDER BY v.age DESC\n\nFind the names of the museums that have the highest number of visitors with membership level 3, and sort by their name from old to young.. \nSELECT  SELECT * FROM museum AS m\nWHERE m.num_of_staff > 25\nORDER BY m.name ASC\n\nFind the names of the museums that have the lowest number of visitors with membership level 3, and sort by their name from young to old.. \nSELECT  SELECT * FROM museum AS m\nWHERE m.num_of_staff <= 10\nORDER BY m.name DESC\n\nFind the names of the museums with the highest number of visitors with membership level 3, and sort by their name from old to young.. \nSELECT  SELECT * FROM museum AS m\nWHERE"}
{"question": "Find the id and name of the museum that has the most staff members?", "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the id and name of the museum that has the most staff members?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the id and name of the museum that has the most staff members?. \nSELECT  SELECT museum_visit.Museum_ID, museum_visit.Name FROM museum_visit \n        JOIN museum ON museum.ID = museum_visit.Museum_ID \n        JOIN visitor ON visitor.ID = museum_visit.visitor_ID \n        GROUP BY museum_visit.Museum_ID, museum_visit.Name \n        ORDER BY museum_visit.Num_of_Staff DESC\n\n### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the id and name of the most visited museum in 2014.\nSELECT  SELECT museum_visit.Museum_ID, museum_visit.Name FROM museum_visit \n        JOIN museum ON museum.ID = museum_visit.Museum_ID \n        JOIN"}
{"question": "Find the average number of staff working for the museums that were open before 2009.", "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the average number of staff working for the museums that were open before 2009.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the average number of staff working for the museums that were open before 2009.. \nSELECT  SELECT MIN( museum_visit.Num_of_Staff ) AS Num_of_Staff  FROM museum  INNER JOIN museum_visit ON museum.Museum_ID = museum_visit.Museum_ID  WHERE museum_visit.Visit_Date > \"2008-01-01\"  AND museum_visit.Visit_Date < \"2009-01-01\"  GROUP BY museum.Museum_ID;\n\n#NOTE: 2009-01-01 is a string, and so the comparison should be between strings.\n#That is, '> \"2008-01-01\"' is true if '2008-01-01' is greater than '2008-01-01'\n"}
{"question": "What are the opening year and staff number of the museum named Plaza Museum?", "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the opening year and staff number of the museum named Plaza Museum?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the opening year and staff number of the museum named Plaza Museum?. \nSELECT  SELECT museum_visit.Num_of_Staff, museum.Open_Year FROM museum  WHERE museum.Name = 'Plaza Museum'\nWhat is the most visited museum in the database? (Hint: use a SELECT query)\nSELECT  SELECT COUNT(visit_ID) FROM visit  WHERE visit.Num_of_Ticket > 10000\nWhat is the total revenue for ticket sales made by the Plaza Museum in the year 2012? \nSELECT  SELECT museum.Num_of_Staff, SUM(visit.Total_spent) FROM museum  INNER JOIN visit ON visit.Museum_ID = museum.Museum_ID  WHERE museum.Name = 'Plaza Museum' AND visit.Open_Year = 2012\nWhat is the difference between the total revenue for ticket sales in the year 2012 and the total revenue for ticket sales made by the Plaza Museum in the year 2014? \nSELECT  SELECT museum.Num_of_Staff, SUM(visit.Total_spent) - SUM(visit.Total_spent) AS Difference FROM"}
{"question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nfind the names of museums which have more staff than the minimum staff number of all museums opened after 2010.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nfind the names of museums which have more staff than the minimum staff number of all museums opened after 2010.. \nSELECT  SELECT\n       museum.Name\n     , museum.Num_of_Staff\n     , MIN(visit.Total_spent) AS min_total_spent\n  FROM museum\n  JOIN visit\n    ON museum.Museum_ID = visit.Museum_ID\n GROUP BY  museum.Name, museum.Num_of_Staff\nHAVING  HAVING\n       MIN(visit.Total_spent) > 50000\n  ORDER  ORDER\n       museum.Name\n     , MIN(visit.Total_spent)\n\n"}
{"question": "find the id, name and age for visitors who visited some museums more than once.", "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nfind the id, name and age for visitors who visited some museums more than once.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nfind the id, name and age for visitors who visited some museums more than once.. \nSELECT  SELECT * FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Name = 'Red Fort')\n#The WHERE clause is used to find certain data. The IN clause is used to search for more than one condition.\n#IN this case, it is used to find museum_id's that meet the condition that their name is Red Fort.\n#finding more than one condition, we use the IN clause\n\nfind all the cities that have at least 3 museums with names starting with 'm'\n#SELECT * FROM museum WHERE Name LIKE 'm%')\n#The LIKE clause is used to search for data. In this case, the LIKE clause is used to search for all museums whose names start with 'm'. The LIKE clause is used with wildcards. '%' is a wildcard, and the 'm%' statement means that we are searching for all 'm' characters.\n\nfind the city in New York, where the Museum of Natural History is located\n#SELECT * FROM museum WHERE City = 'New York' AND Name = 'Museum of Natural History'\n#The AND clause is used to search for more than one condition, in this case, the city is New York, and"}
{"question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?. \nSELECT  SELECT id, name, level_of_membership, SUM(total_spent) AS total_spent \nFROM visit \nWHERE total_spent > 5000 \nGROUP BY id \nORDER BY total_spent DESC \n\n#== Day 18 ==#\n#1. Create a new SQLite database file, called `museum_visit.db`\n#2. Insert one row into the table `museum`, called `Museum_ID`, `Name`, `Num_of_Staff`, `Open_Year`\n#3. Insert one row into the table `visitor`, called `ID`, `Name`, `Level_of_membership`, `Age`\n#4. Insert one row into the table `visit`, called `Museum_ID`, `visitor_ID`, `Num_of_Ticket`, `Total_spent`\n#5. Query `SELECT id, name, level_of_membership, SUM(total_spent) AS total_spent \n#FROM visit \n#WHERE total_spent > 5000 \n#GROUP BY id \n#ORDER"}
{"question": "What are the id and name of the museum visited most times?", "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the id and name of the museum visited most times?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the id and name of the museum visited most times?. \nSELECT  SELECT  SELECT\nvisitor.Name,\nvisit.Num_of_Ticket,\ncount(*)\nFROM\nvisit\njoin museum\non museum.ID = visit.Museum_ID\ngroup by\nvisit.Num_of_Ticket,\nvisitor.Name\nORDER BY\ncount(*) DESC,\nvisit.Num_of_Ticket DESC,\nvisitor.Name;\n\n\n\n\n"}
{"question": "What is the name of the museum that had no visitor yet?", "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the name of the museum that had no visitor yet?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the name of the museum that had no visitor yet?. \nSELECT  SELECT name FROM museum WHERE id = 3\n\n### SQL query (SQL_Statements.py)\nSQL = \"SELECT name FROM museum WHERE id = 3\"\n\n### Execute query in database (SQL_Statements.py)\nresult = db_session.execute(SQL)\n\n### Print the results (SQL_Statements.py)\nprint(result.fetchall())\n\n### Check result (SQL_Statements.py)\nassert len(result.fetchall()) == 1\nassert result.fetchall()[0][0] == 'Canadian_Museum_of_Nature'\n"}
{"question": "Find the name and age of the visitor who bought the most tickets at once.", "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the name and age of the visitor who bought the most tickets at once.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the name and age of the visitor who bought the most tickets at once.. \nSELECT  SELECT name,\n        (SELECT MAX(total_spent)\n         FROM visit\n         WHERE visit.museum_id=museum_id) \nFROM museum\nGROUP BY museum.museum_id;\n\"\"\"\n\n\n\n\n"}
{"question": "What are the average and maximum number of tickets bought in all visits?", "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the average and maximum number of tickets bought in all visits?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat are the average and maximum number of tickets bought in all visits?. \nSELECT  SELECT museum_visit.Num_of_Ticket  FROM museum_visit \n    JOIN museum ON museum_visit.Museum_ID = museum.Museum_ID\n    JOIN visitor ON museum_visit.visitor_ID = visitor.ID \nGROUP BY museum.Museum_ID \nORDER BY 2 DESC;\n\"\"\"\n\n"}
{"question": "What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the total ticket expense of the visitors whose membership level is 1?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the total ticket expense of the visitors whose membership level is 1?. \nSELECT  SELECT SUM(visit.Total_spent)\nFROM    FROM visit\nWHERE   WHERE museum.Open_Year = 1999\nAND     AND visitor.Level_of_membership = 1\n# 1500\n# 1200\n# 1500\n# 900\nWhat is the total ticket expense of the visitors who visited the museum in 1998?. \nSELECT  SELECT SUM(visit.Total_spent)\nFROM    FROM visit\nWHERE   WHERE museum.Open_Year = 1998\n# 900\n# 900\n# 1200\n# 900\nWhat is the total ticket expense of the visitors whose age is between 20 and 40?. \nSELECT  SELECT SUM(visit.Total_spent)\nFROM    FROM visit\nWHERE   WHERE museum.Open_Year = 1999\nAND     AND visitor.Age >= 20\nAND     AND visitor.Age <= 40\n# 2200\n# 2200\n# 2400"}
{"question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nWhat is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?. \nSELECT  SELECT  museum_visit.visitor_ID\nFROM    museum_visit\nWHERE    (museum_visit.Museum_ID = 'museum1')\nAND     (museum_visit.Open_Year <= 2009)\nAND     (museum_visit.Museum_ID = 'museum2')\nAND     (museum_visit.Open_Year > 2011)\n\"\"\"\nimport sqlite3\n\nconn = sqlite3.connect('sqlite.db')\n\nconn.execute('''CREATE TABLE IF NOT EXISTS museum (\n\tMuseum_ID INTEGER,\n\tName TEXT,\n\tNum_of_Staff INTEGER,\n\tOpen_Year INTEGER\n)''')\nconn.execute('''CREATE TABLE IF NOT EXISTS visitor (\n\tID INTEGER,\n\tName TEXT,\n\tLevel_of_membership INTEGER,\n\tAge INTEGER\n)''')\nconn.execute('''CREATE TABLE IF NOT EXISTS visit (\n\tMuseum_ID INTEGER,\n\tvisitor_ID INTEGER,\n\tNum_of_Ticket IN"}
{"question": "Find the number of visitors who did not visit any museum opened after 2010.", "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the number of visitors who did not visit any museum opened after 2010.. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nFind the number of visitors who did not visit any museum opened after 2010.. \nSELECT  SELECT COUNT(*) AS Total\nFROM visitor\nWHERE (visit.YearOpen < 2010);\n\n# Find the number of visitors who did not visit any museum opened after 2010.. \nSELECT  SELECT COUNT(*) AS Total\nFROM visitor\nWHERE (visit.YearOpen < 2010);\n\n# Find the number of visitors who did not visit any museum opened after 2010.. \nSELECT  SELECT COUNT(*) AS Total\nFROM visitor\nWHERE (visit.YearOpen < 2010);\n\n\n#find the museum_ID of the museums with most visitors..\nSELECT  SELECT museum.ID AS Museum_ID\nFROM museum JOIN visit ON museum.ID=visit.Museum_ID\nGROUP BY museum.ID\nORDER BY COUNT(*) DESC\n\n\n#find the visitor_ID of the visitors with most visits..\nSELECT  SELECT visitor.ID AS Visitor_ID\nFROM visitor JOIN visit ON visitor.ID=visit.visitor_ID\nGROUP BY visitor.ID\nORDER BY COUNT(*) DESC\n\n\n#find the museum_ID of the museums with most visitors..\nSELECT  SELECT"}
{"question": "How many museums were opened after 2013 or before 2008?", "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "prompt": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nHow many museums were opened after 2013 or before 2008?. \nSELECT ", "response": "### SQLite SQL museum_visit database, with their properties:\n#museum('Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year')\n#visitor('ID', 'Name', 'Level_of_membership', 'Age')\n#visit('Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent')\nHow many museums were opened after 2013 or before 2008?. \nSELECT  SELECT COUNT(*) FROM museum WHERE museum.Open_Year \nBETWEEN 2013 AND 2008\n\n"}
{"question": "Find the total number of players.", "sql": "SELECT count(*) FROM players", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of players.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of players.. \nSELECT  SELECT count(player_id) FROM players WHERE 1\n#res.text = u'267'\n#It has 267 players..\n#How about how many matches..\nSELECT  SELECT count(match_num) FROM matches WHERE 1\n#res.text = u'198'\n#It has 198 matches..\n#Rankings are..\nSELECT  SELECT count(ranking_points) FROM rankings WHERE 1\n#res.text = u'34199'\n#It has 34199 ranking_points..\n#So, we want to find the ranking of the player..\n#We need the player_id and the ranking_date..\n#So we find the top 100 for the player..\n#But we need the first 10 for 2016..\nSELECT  SELECT player_id, ranking_date FROM rankings WHERE 1 AND 2016 ORDER BY ranking_date DESC LIMIT 10\n#res.text = u'[{\"player_id\": \"2\", \"ranking_date\": \"2016-10-0"}
{"question": "How many players are there?", "sql": "SELECT count(*) FROM players", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are there?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are there?. \nSELECT  SELECT COUNT(*) FROM players;\n\nHow many matches have been played? \nSELECT  SELECT COUNT(*) FROM matches;\n\nWhich players won the most matches? \nSELECT  SELECT * FROM matches ORDER BY 1 DESC;\n\nWho won the most recent match? \nSELECT  SELECT * FROM matches ORDER BY 1 DESC LIMIT 1;\n\nHow many matches has the player played?. \nSELECT  SELECT COUNT(*) FROM matches WHERE player_id = '83189216';\n\nHow many matches did the player win?. \nSELECT  SELECT COUNT(*) FROM matches WHERE player_id = '83189216' AND winer_id = '83189216';\n\nHow many matches did the player lose?. \nSELECT  SELECT COUNT(*) FROM matches WHERE player_id = '83189216' AND loser_id = '83189216';\n\nHow many matches did the player draw?. \nSELECT  SELECT COUNT(*) FROM matches WHERE player_id = '83189216' AND result = 'Draw';\n\nHow many matches did the player"}
{"question": "Find the total number of matches.", "sql": "SELECT count(*) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of matches.. \nSELECT  SELECT COUNT(*)\nFROM    matches\n\n#find the min and max year\nSELECT  MIN(tourney_date) AS tourney_date_min, MAX(tourney_date) AS tourney_date_max\nFROM    matches\n\n#find the total number of matches between the min and max year\nSELECT  SELECT COUNT(*)\nFROM    matches\nWHERE tourney_date_min <= tourney_date AND tourney_date <= tourney_date_max\n\n#find the total number of years in the range\nSELECT  SELECT COUNT(distinct tourney_date)\nFROM    matches\nWHERE tourney_date_min <= tourney_date AND tourney_date <= tourney_date_max\n\n#find the total number of players in the range\nSELECT  SELECT COUNT(distinct player_id)\nFROM    matches\nWHERE tourney_date_min <= tourney_date AND tourney_date <= tourney_date_max\n\n#find the total number of players in each year in the range\nSELECT  SELECT COUNT(distinct player_id)\nFROM    matches\nWHERE tourney_date_min <= tourney_date AND"}
{"question": "Count the number of matches.", "sql": "SELECT count(*) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nCount the number of matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nCount the number of matches.. \nSELECT  SELECT COUNT(*) FROM matches WHERE 1\n\nCount the number of players that have played at least one match.. \nSELECT  SELECT COUNT(*) FROM players WHERE 1\n\nCreate a view that combines the matches table with the players table.. \nCREATE VIEW players_matches AS\nSELECT p.player_id, p.first_name, p.last_name, m.score, m.round, m.match_num, m.draw_size, m.minutes, m.surface, m.birth_date, m.country_code, m.loser_age, m.loser_entry, m.loser_hand, m.loser_ht, m.loser_ioc, m.loser_name, m.loser_rank, m.loser_rank_points, m.loser_seed, m.tourney_date, m.tourney_id, m.tourney_level, m.tourney_name, m.winner_age, m.winner_entry, m.winner_hand, m.winner_ht, m.winner_ioc"}
{"question": "List the first name and birth date of all players from the country with code USA.", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first name and birth date of all players from the country with code USA.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first name and birth date of all players from the country with code USA.. \nSELECT  SELECT players.first_name, players.birth_date \nFROM  players\nWHERE players.country_code = 'USA'\nORDER BY players.first_name;\n\"\"\"\n\n\nimport sys\n\n\n\nif __name__ == '__main__':\n\n    #\n    #  Import your working directory\n    #\n    import os.path\n    import os\n\n\n\n    #\n    #  Import your data source\n    #\n    import sqlite3\n\n\n\n    #\n    #  Import your toolkit\n    #\n    import pprint\n    from itertools import groupby\n    from itertools import chain\n    from itertools import filterfalse\n    from itertools import imap\n    from operator import itemgetter\n    import itertools\n\n\n\n    #\n    #  Open the database\n    #\n    c = sqlite3.connect('wta_1.db')\n    c.text_factory = str\n\n\n\n    #\n    #  Get all the players\n    #\n    players = c.execute('SELECT * FROM players;').fetchall()\n\n    #\n    #  Group"}
{"question": "What are the first names and birth dates of players from the USA?", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names and birth dates of players from the USA?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names and birth dates of players from the USA?. \nSELECT  SELECT 'USA' AS country_code, \n        players.first_name, players.birth_date\nFROM    players\nWHERE   players.country_code = 'USA'\nORDER BY players.first_name\n# In the table matches, I want to find the matches between players from the USA and from the UK.\n# I don't want to include matches in which the winner is a player from the USA, and I don't want to include\n# matches in which the loser is a player from the UK.\nSELECT  SELECT 'USA' AS country_code, 'UK' AS country_code\nFROM    matches\nWHERE   players.country_code = 'USA'\nAND matches.loser_country_code = 'UK'\n# The code below will give me all the matches between the USA and UK\nSELECT  SELECT 'USA' AS country_code, 'UK' AS country_code\nFROM    matches\nWHERE   players.country_code = 'USA'\nOR (   matches.loser_country_code = 'UK'\nAND players.country_code != 'USA'\nAND players.country_code != 'UK'\nAND matches."}
{"question": "Find the average age of losers and winners of all matches.", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average age of losers and winners of all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average age of losers and winners of all matches.. \nSELECT  SELECT\n    COUNT(match_num) AS num,\n    AVERAGE(minutes) AS average_age\nFROM  SELECT\n    COUNT(match_num) AS num,\n    AVERAGE(minutes) AS average_age\nFROM  matches\nWHERE  best_of = '1'\nGROUP BY\n    best_of\nORDER BY\n    average_age\n\"\"\"\n\nimport sqlite3\nimport sys\nimport datetime\nfrom datetime import timedelta\n\nconn = sqlite3.connect('wtam1.db')\nc = conn.cursor()\n\n#select a list of games played by a player\ndef select_games(player_id):\n    c.execute('SELECT * FROM players WHERE player_id=?', (player_id,))\n    rows = c.fetchall()\n    return rows[0]\n\n#select a list of games for a tourney\ndef select_games_for_tourney(tourney_id):\n    c.execute('SELECT * FROM matches WHERE tourney_id=?', (tourney_id,))\n    rows = c.fetchall()\n    return"}
{"question": "What are the average ages of losers and winners across matches?", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the average ages of losers and winners across matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the average ages of losers and winners across matches?. \nSELECT  SELECT min(loser_age) AS loser_age, min(winner_age) AS winner_age FROM matches WHERE loser_id <> winner_id\n\n#What is the highest number of games lost in one match?\nSELECT  SELECT max(losses) FROM matches WHERE min_games = max_games\n\n#What is the highest number of games won in one match?\nSELECT  SELECT max(games) FROM matches WHERE min_games = max_games\n\n#Who was the winner of the most number of matches during the Grand Slam tournaments (Australian, French, Wimbledon, US Open)?\nSELECT  SELECT winner_name, max(matches) AS matches FROM matches GROUP BY winner_name\n\n#Who has won the most matches against a particular player?\nSELECT  SELECT player_id, wins AS matches FROM matches WHERE player_id = 5 GROUP BY player_id\n\n#Who has the best record against a particular player, by winning percentage?\nSELECT  SELECT player_id, wins / (wins + losses) * 100 AS win_perc FROM matches WHERE player_id = 5 GROUP BY player"}
{"question": "Find the average rank of winners in all matches.", "sql": "SELECT avg(winner_rank) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average rank of winners in all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average rank of winners in all matches.. \n}
{"question": "What is the average rank for winners in all matches?", "sql": "SELECT avg(winner_rank) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the average rank for winners in all matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the average rank for winners in all matches?. \nSELECT  SELECT AVG(loser.ranking) as avg_rank\nFROM wta_1 LEFT JOIN rankings r ON r.player_id = loser.player_id\nWHERE loser.birth_date BETWEEN 1982 AND 1993 AND loser.country_code = 'USA'\nGROUP BY loser.player_id;\n\nWhat is the average rank for losers in all matches?. \nSELECT  SELECT AVG(winner.ranking) as avg_rank\nFROM wta_1 LEFT JOIN rankings r ON r.player_id = winner.player_id\nWHERE winner.birth_date BETWEEN 1982 AND 1993 AND winner.country_code = 'USA'\nGROUP BY winner.player_id;\n\nWhat is the number of matches played by winners in all matches?. \nSELECT  SELECT COUNT(*) as total_matches\nFROM wta_1 LEFT JOIN matches m ON m.loser_id = loser.player_id\nWHERE loser.birth_date BETWEEN 1982 AND 1993"}
{"question": "Find the highest rank of losers in all matches.", "sql": "SELECT min(loser_rank) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the highest rank of losers in all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the highest rank of losers in all matches.. \nSELECT  SELECT loser_id, loser_rank\nFROM matches\nWHERE loser_rank IS NULL\nORDER BY loser_rank DESC;\n\nFind the highest rank of winners in all matches.. \nSELECT  SELECT winner_id, winner_rank\nFROM matches\nWHERE winner_rank IS NULL\nORDER BY winner_rank DESC;\n\nFind the highest rank of losers in all matches.. \nSELECT  SELECT loser_rank\nFROM matches\nWHERE loser_rank IS NULL\nORDER BY loser_rank DESC;\n\nFind the highest rank of winners in all matches.. \nSELECT  SELECT winner_rank\nFROM matches\nWHERE winner_rank IS NULL\nORDER BY winner_rank DESC;\n\nFind the highest rank of losers in all matches.. \nSELECT  SELECT player_id, loser_rank\nFROM matches\nWHERE loser_rank IS NULL\nORDER BY loser_rank DESC;\n\nFind the highest rank of winners in all matches.. \nSELECT  SELECT player_id, winner_rank\nFROM matches\nWHERE winner_rank IS NULL\nORDER BY winner_rank DESC;\n\n#Select all players who have a record as a loser"}
{"question": "What is the best rank of losers across all matches?", "sql": "SELECT min(loser_rank) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the best rank of losers across all matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the best rank of losers across all matches?. \nSELECT  SELECT\n* FROM  players LEFT JOIN\nmatches ON  matches.loser_id = players.player_id AND\nmatches.round <= 1\nGROUP BY  matches.loser_id\nORDER BY  players.first_name\n\"\n\n#WTA_1_RANKINGS_OF_WINNERS_BY_ENTRY_ACROSS_ALL_MATCHES = \"\"\"\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry',"}
{"question": "find the number of distinct country codes of all players.", "sql": "SELECT count(DISTINCT country_code) FROM players", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the number of distinct country codes of all players.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the number of distinct country codes of all players.. \nSELECT  SELECT count(distinct country_code) from players;\nSELECT the countries that have at least 2 players...\nSELECT name from (SELECT country_code, count(distinct country_code) AS player_count from players GROUP BY country_code) as t1 WHERE player_count > 1\n\nfind the number of distinct rankings of all players.. \nSELECT  SELECT count(distinct ranking) from rankings;\nSELECT the rankings that have at least 2 players...\nSELECT name from (SELECT ranking, count(distinct ranking) AS player_count from rankings GROUP BY ranking) as t1 WHERE player_count > 1\n\nfind the number of distinct hand types of all players.. \nSELECT  SELECT count(distinct hand) from players;\nSELECT the hands that have at least 2 players...\nSELECT name from (SELECT hand, count(distinct hand) AS player_count from players GROUP BY hand) as t1 WHERE player_count > 1\n\nfind the number of distinct surfaces of all players.. \nSELECT  SELECT count(distinct surface) from players;\nSELECT the surfaces that have at least 2 players...\nSELECT name from (SELECT"}
{"question": "How many distinct countries do players come from?", "sql": "SELECT count(DISTINCT country_code) FROM players", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many distinct countries do players come from?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many distinct countries do players come from?. \nSELECT  SELECT COUNT(DISTINCT country_code) FROM players GROUP BY country_code;\n\nHow many players are in the database?.\nSELECT  SELECT COUNT(player_id) FROM players;\n\nWhat is the average age of players? \nSELECT  SELECT AVG(age) FROM players WHERE age IS NOT NULL;\n\nThe highest ranked player?. \nSELECT  SELECT player_id, ranking FROM rankings ORDER BY ranking DESC;\n\n* What is the highest tournament level that players have played in?. \nSELECT  SELECT tournament_level FROM rankings ORDER BY tournament_level DESC;\n\n* How many players have played in tournaments at the lowest level?. \nSELECT  SELECT COUNT(player_id) FROM rankings WHERE tournament_level = 1;\n\n* The country with the most players? \nSELECT  SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC;\n\n* The country with the least players?. \nSELECT  SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code ORDER BY COUNT(player_id) ASC;\n\n* How many players are in"}
{"question": "Find the number of distinct name of losers.", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of distinct name of losers.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of distinct name of losers.. \nSELECT  SELECT DISTINCT name FROM matches\nORDER BY name\nLIMIT 0, 50000;\n\nFind the number of distinct name of winners.. \nSELECT  SELECT DISTINCT name FROM matches\nORDER BY name\nLIMIT 50000, 100000;\n\nFind the number of distinct name of all players.. \nSELECT  SELECT DISTINCT name FROM matches\nORDER BY name\nLIMIT 100000, 150000;\n\nFind the number of distinct name of players who have won matches.. \nSELECT  SELECT DISTINCT name FROM matches\nWHERE match_num > 0\nORDER BY name\nLIMIT 150000, 200000;\n\nFind the number of distinct name of players who have lost matches.. \nSELECT  SELECT DISTINCT name FROM matches\nWHERE match_num < 0\nORDER BY name\nLIMIT 200000, 250000;\n\nFind the number of distinct name of losers who have won matches.. \nSELECT  SELECT DISTINCT name FROM matches\n"}
{"question": "How many different loser names are there?", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many different loser names are there?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many different loser names are there?. \nSELECT  SELECT COUNT(DISTINCT loser_name) FROM matches WHERE loser_name IS NOT NULL;\nHow many different winner names are there?. \nSELECT  SELECT COUNT(DISTINCT winner_name) FROM matches WHERE winner_name IS NOT NULL;\nHow many different loser IDs are there?. \nSELECT  SELECT COUNT(DISTINCT loser_id) FROM matches WHERE loser_id IS NOT NULL;\nHow many different winner IDs are there?. \nSELECT  SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_id IS NOT NULL;\nHow many different loser hand numbers are there?. \nSELECT  SELECT COUNT(DISTINCT loser_hand) FROM matches WHERE loser_hand IS NOT NULL;\nHow many different winner hand numbers are there?. \nSELECT  SELECT COUNT(DISTINCT winner_hand) FROM matches WHERE winner_hand IS NOT NULL;\nHow many different loser seed numbers are there?. \nSELECT  SELECT COUNT(DISTINCT loser_seed) FROM matches WHERE loser_seed IS NOT NULL;\nHow many different winner seed numbers are there?. \nSELECT  SELECT COUNT(DISTINCT winner_seed) FROM"}
{"question": "Find the name of tourney that has more than 10 matches.", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name of tourney that has more than 10 matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name of tourney that has more than 10 matches.. \n}
{"question": "What are the names of tournaments that have more than 10 matches?", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of tournaments that have more than 10 matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of tournaments that have more than 10 matches?. \nSELECT  SELECT 10 10 0 t.tourney_id FROM  FROM players JOIN matches \nON  ON player_id = loser_id JOIN \nrankings \nON \nON ranking_id = loser_rank \nJOIN \nON \nON tourney_id = \ntourney_id \nGROUP \nGROUP BY \nGROUP BY \nGROUP BY \nGROUP BY \ngroup_by \ngroup_by \ngroup_by \ngroup_by \nGROUP BY \ngroup_by \nGROUP BY \nGROUP BY \ngroup_by \ngroup_by \ngroup_by \ngroup_by \ngroup_by \nGROUP BY \nGROUP BY \nGROUP BY \ngroup_by \ngroup_by \ngroup_by \ngroup_by \ngroup_by \nGROUP BY \ngroup_by \nGROUP BY \nGROUP BY \ngroup_by \ngroup_by \ngroup_by \ngroup_by \nGROUP BY \ngroup_by \nGROUP BY \nGROUP BY \ngroup_by \ngroup_"}
{"question": "List the names of all winners who played in both 2013 and 2016.", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the names of all winners who played in both 2013 and 2016.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the names of all winners who played in both 2013 and 2016.. \nSELECT  SELECT  FROM  FROM  WHERE  WHERE\n\n\"\"\"\n\ndef all_win_years(tournament_id):\n\n    query = \"SELECT * FROM wta_1 WHERE tournament_id = %s\" % tournament_id\n\n    with sqlite3.connect('wta.db') as db:\n        c = db.cursor()\n        c.execute(query)\n\n        for row in c:\n            print ''.join(row)\n\n\nif __name__ == \"__main__\":\n    print all_win_years(2013)\n"}
{"question": "What are the names of players who won in both 2013 and 2016?", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of players who won in both 2013 and 2016?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of players who won in both 2013 and 2016?. \nSELECT  SELECT players.first_name AS 'first_name',\n       players.last_name AS 'last_name',\n       winners.best_of AS 'best_of',\n       winners.draw_size AS 'draw_size',\n       winners.loser_age AS 'loser_age',\n       winners.loser_entry AS 'loser_entry',\n       winners.loser_hand AS 'loser_hand',\n       winners.loser_ht AS 'loser_ht',\n       winners.loser_id AS 'loser_id',\n       winners.loser_ioc AS 'loser_ioc',\n       winners.loser_name AS 'loser_name',\n       winners.loser_rank AS 'loser_rank',\n       winners.loser_rank_points AS 'loser_rank_points',\n       winners.loser_seed AS 'loser_seed',\n       winners.match_num AS 'match_num',\n       winners.minutes AS 'minutes',\n       winners.round AS 'round',\n      "}
{"question": "List the number of all matches who played in years of 2013 or 2016.", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the number of all matches who played in years of 2013 or 2016.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the number of all matches who played in years of 2013 or 2016.. \nSELECT  SELECT COUNT(t.match_num) \nFROM    matches t\nWHERE   t.year = 2013 OR t.year = 2016\nORDER BY t.year DESC\nLIMIT 20\n\"\"\"\n\ndef get_year_total_matches(year):\n    \"\"\"Return the number of matches played in the specified year\"\"\"\n    query = (db.execute(SELECT_COUNT_MATCHES_YEAR_SQL, year))\n    return query.fetchone()[0]\n\ndef get_year_total_matches_rankings(year):\n    \"\"\"Return the number of matches played in the specified year\"\"\"\n    query = (db.execute(SELECT_COUNT_MATCHES_RANKINGS_YEAR_SQL, year))\n    return query.fetchone()[0]\n"}
{"question": "How many matches were played in 2013 or 2016?", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many matches were played in 2013 or 2016?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many matches were played in 2013 or 2016?. \nSELECT  SELECT count(*) FROM matches WHERE  matches.year BETWEEN 2013 AND 2016;\n\n#How many draws were in 2014 or 2016?. \nSELECT  SELECT count(*) FROM matches WHERE  matches.year BETWEEN 2014 AND 2016;\n\nHow many matches were played in 2013 or 2016?. \nSELECT  SELECT count(*) FROM matches WHERE  matches.year BETWEEN 2013 AND 2016;\n\nHow many draws were in 2014 or 2016?. \nSELECT  SELECT count(*) FROM matches WHERE  matches.year BETWEEN 2014 AND 2016;\n\nHow many matches were played in 2013 or 2016?. \nSELECT  SELECT count(*) FROM matches WHERE  matches.year BETWEEN 2013 AND 2016;\n\nHow many draws were in 2014 or 2016?. \nSELECT  SELECT count(*) FROM matches WHERE"}
{"question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?. \nSELECT  SELECT player_id, first_name, country_code FROM players\nWHERE\n(SELECT round FROM matches WHERE player_id = players.player_id AND tourney_id = '1' AND tourney_level = 'Y')\nAND (SELECT round FROM matches WHERE player_id = players.player_id AND tourney_id = '2' AND tourney_level = 'Y')\nAND first_name = 'Serena'\nGROUP BY player_id, first_name ORDER BY country_code;\n"}
{"question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names and country codes for players who won both the WTA Championships and the Australian Open?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names and country codes for players who won both the WTA Championships and the Australian Open?. \nSELECT  SELECT\nplayer_id,\nfirst_name,\ncountry_code,\nFROM   players\nWHERE  player_id IN  (\nSELECT  SELECT\nplayer_id,\nFROM   matches\nWHERE  (  SELECT  SELECT\nmatch_num\nFROM   rankings\nWHERE  ranking_date BETWEEN tourney_date AND tourney_date + 10000\nORDER  BY tourney_date DESC\nLIMIT  1\n) > 1\n)\nORDER  BY tourney_date DESC\nLIMIT  1;\n\n159  48  2012  2013  Andreja Klepa\u010d\n\n# What is the name and country code for the 2013 WTA champion?. \nSELECT  SELECT\nplayer_id,\nfirst_name,\ncountry_code,\nFROM   players\nWHERE  player_id IN  (\nSELECT  SELECT\nplayer_id,\nFROM   matches\nWHERE  (  SELECT  SELECT\nmatch_num\nFROM   rankings\nWHERE  ranking_date BETWEEN tourney_date AND tourney_date + 10000\nORDER"}
{"question": "Find the first name and country code of the oldest player.", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name and country code of the oldest player.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name and country code of the oldest player.. \n}
{"question": "What is the first name and country code of the oldest player?", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name and country code of the oldest player?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name and country code of the oldest player?. \n}
{"question": "List the first and last name of all players in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first and last name of all players in the order of birth date.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first and last name of all players in the order of birth date.. \nSELECT  SELECT * \nFROM    players; \nORDER BY birth_date; \n'''\n\n\n\n"}
{"question": "What are the full names of all players, sorted by birth date?", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the full names of all players, sorted by birth date?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the full names of all players, sorted by birth date?. \nSELECT  SELECT  * FROM  PLAYERS p  WHERE p.birth_date  DESC;\n\nGive the first names of all players, sorted by the number of\nplayers whose last names start with that first name (case insensitive).\nSELECT  SELECT  * FROM  PLAYERS p  WHERE  LOWER(p.first_name)  ORDER BY  COUNT(p.first_name) DESC;\n\nWhat are the ages of all players, sorted by the number of players\nwhose first names are the same (case insensitive)?\nSELECT  SELECT  * FROM  PLAYERS p  WHERE  LOWER(p.first_name)  ORDER BY  COUNT(p.first_name) DESC;\n\nFind the best rankings, for players whose birth dates are between 1970 and 1990\nSELECT  SELECT  * FROM  RANKINGS  WHERE  DATE(ranking_date)  BETWEEN 1970  AND 1990;\n\nFind the best rankings, for players whose names start with \n'f', sorted by the number of players whose rankings have"}
{"question": "List the first and last name of all players who are left / L hand in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first and last name of all players who are left / L hand in the order of birth date.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nList the first and last name of all players who are left / L hand in the order of birth date.. \nSELECT  SELECT player_id, last_name, first_name FROM players WHERE hand='L' ORDER BY birth_date;\n'''\n\n#select the matches that are best of 5 and the last match that is played was in 2011...\nSELECT  SELECT match_num, best_of, round, tourney_id, tourney_level FROM matches WHERE best_of='5' AND tourney_date>20110101 AND tourney_date<20111231\n\n#select all matches that were played on the surface clay and the winner was righthanded\nSELECT  SELECT match_num, best_of, round, tourney_id, tourney_level, surface, winner_hand, winner_id FROM matches WHERE surface='clay' AND winner_hand='R' ORDER BY tourney_date DESC;\n\n#select all matches that were played on the surface clay and the winner was right handed...\nSELECT  SELECT match_num, best_of, round, tourney_id, tourney_level, surface, winner_hand, winner_id, winner_rank FROM matches WHERE surface='clay"}
{"question": "What are the full names of all left handed players, in order of birth date?", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the full names of all left handed players, in order of birth date?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the full names of all left handed players, in order of birth date?. \n}
{"question": "Find the first name and country code of the player who did the most number of tours.", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name and country code of the player who did the most number of tours.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name and country code of the player who did the most number of tours.. \n}
{"question": "What is the first name and country code of the player with the most tours?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name and country code of the player with the most tours?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name and country code of the player with the most tours?. \nSELECT  SELECT players.first_name, players.country_code FROM players WHERE rankings.ranking_points = ( SELECT MAX(rankings.ranking_points) FROM rankings GROUP BY rankings.ranking );\n\n#What is the first name and country code of the player who has played the most matches?.\nSELECT  SELECT players.first_name, players.country_code FROM players WHERE matches.tourney_level = 3  GROUP BY players.first_name, players.country_code ORDER BY players.first_name, players.country_code DESC;\n\n#What is the first name and country code of the player who has played the most tournaments?.\nSELECT  SELECT players.first_name, players.country_code FROM players WHERE rankings.ranking_points = ( SELECT MAX(rankings.ranking_points) FROM rankings GROUP BY players.first_name, players.country_code );\n\n#What is the first name and country code of the player with the highest rank?.\nSELECT  SELECT players.first_name, players.country_code FROM players WHERE rankings.ranking_points = ( SELECT MAX(rankings.ranking_points"}
{"question": "Find the year that has the most number of matches.", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the year that has the most number of matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the year that has the most number of matches.. \nSELECT  SELECT count(*) as matches_count, year FROM wta_1 WHERE \nyear >= '1970' AND year <= '1979';\n1976\nFind the year that has the least number of matches..\nSELECT  SELECT count(*) as matches_count, year FROM wta_1 WHERE \nyear >= '1970' AND year <= '1979';\n1977\nFind the year that has the highest number of matches..\nSELECT  SELECT count(*) as matches_count, year FROM wta_1 WHERE \nyear >= '1970' AND year <= '1979';\n1979\nFind the year that has the least number of matches..\nSELECT  SELECT count(*) as matches_count, year FROM wta_1 WHERE \nyear >= '1970' AND year <= '1979';\n1978\nFind the year that has the highest number of matches..\nSELECT  SELECT count(*) as matches_count, year FROM wta_1 WHERE \nyear >= '1970' AND year <= '1979';\n1979\nFind"}
{"question": "Which year had the most matches?", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhich year had the most matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhich year had the most matches?. \n}
{"question": "Find the name and rank points of the winner who won the most times.", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name and rank points of the winner who won the most times.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name and rank points of the winner who won the most times.. \nSELECT  SELECT player_id,\n        (SELECT name\n        FROM   players\n        WHERE  rank_points = (\n                        SELECT MAX(rank_points)\n                        FROM   rankings\n                        WHERE  player_id = p.player_id\n                           AND ranking_date = (\n                                             SELECT MAX(ranking_date)\n                                             FROM   rankings\n                                             WHERE  player_id = p.player_id\n                                             )\n                        )\n                   ) AS winner_name,\n        MAX(winner_ranking_points) AS winner_ranking_points\nFROM    players\n        JOIN rankings ON players.player_id = rankings.player_id\nWHERE   rankings.ranking_date = (\n                SELECT MAX(ranking_date)\n                FROM   rankings\n                WHERE  player_id = players.player_id\n            )\n        AND players.birth_date <= 2000\n        AND players.birth_date >= 1992\n        AND players.country_code = 'DE'\nGROUP BY  players.player_id, players.first"}
{"question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the name of the winner who has won the most matches, and how many rank points does this player have?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the name of the winner who has won the most matches, and how many rank points does this player have?. \nSELECT  SELECT best_of,\n        draw_size,\n        loser_age,\n        loser_entry,\n        loser_hand,\n        loser_ht,\n        loser_id,\n        loser_ioc,\n        loser_name,\n        loser_rank,\n        loser_rank_points,\n        loser_seed,\n        match_num,\n        minutes,\n        round,\n        score,\n        surface,\n        tourney_date,\n        tourney_id,\n        tourney_level,\n        tourney_name,\n        winner_age,\n        winner_entry,\n        winner_hand,\n        winner_ht,\n        winner_id,\n        winner_ioc,\n        winner_name,\n        winner_rank,\n        winner_rank_points,\n        winner_seed,\n        year\n  FROM matches\n  WHERE loser_id = 1234567890\n  AND winner_id = 1234567890\n  ORDER BY winner_rank, loser_rank\n  LIMIT "}
{"question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name of the winner who has the highest rank points and participated in the Australian Open tourney.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name of the winner who has the highest rank points and participated in the Australian Open tourney.. \n}
{"question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the name of the winner with the most rank points who participated in the Australian Open tournament?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the name of the winner with the most rank points who participated in the Australian Open tournament?. \nSELECT  SELECT  player_id FROM rankings  WHERE tournament_id = '1'  ORDER BY ranking_points DESC  LIMIT 1\n\n\nWhat is the average ranking points earned by a winner of the Australian Open tournament?. \nSELECT  SELECT  avg(ranking_points) FROM rankings  WHERE tournament_id = '1'\n\n\n\n\n# SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_"}
{"question": "find the names of loser and winner who played in the match with greatest number of minutes.", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the names of loser and winner who played in the match with greatest number of minutes.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the names of loser and winner who played in the match with greatest number of minutes.. \nSELECT  SELECT loser.player_id, loser.first_name, loser.last_name, loser.hand, loser.birth_date, loser.country_code \n        ,  winner.player_id, winner.first_name, winner.last_name, winner.hand, winner.birth_date, winner.country_code \nFROM    matches \nJOIN    rankings \nON      rankings.player_id = matches.loser_id \nAND     rankings.tourney_level = 'YOUNG_TENNIS'\nAND     rankings.tourney_level = matches.loser_id \nJOIN    players \nON      players.player_id = rankings.player_id\nJOIN    players \nON      players.player_id = matches.winner_id\nWHERE   matches.score = 6 \nAND     matches.best_of = '3' \nAND     matches.draw_size = '6' \nAND     matches.loser_age <= 18 \nAND     matches.winner_age <= 18"}
{"question": "What are the names of the winner and loser who played in the longest match?", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of the winner and loser who played in the longest match?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names of the winner and loser who played in the longest match?. \nSELECT  SELECT winner_name, loser_name FROM matches  WHERE draw_size = 10 AND round = 3;\n\n#What are the names of the winners of all matches in the 2014 Wimbledon tournament? \nSELECT  SELECT winner_name FROM matches  WHERE tourney_id = 2014 AND round = 1;\n\n#Show the 2013 rankings of the top 20 male tennis players. \nSELECT  SELECT ranking, player_id FROM rankings  WHERE ranking_date BETWEEN '2013-01-01' AND '2013-12-31' AND tourney_level = 1 AND player_id IN (SELECT player_id FROM players WHERE last_name LIKE 'Federer');\n\n#Show the 2013 rankings of the top 15 female tennis players. \nSELECT  SELECT ranking, player_id FROM rankings  WHERE ranking_date BETWEEN '2013-01-01' AND '2013-12-31' AND tourney_level = 1"}
{"question": "Find the average ranking for each player and their first name.", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average ranking for each player and their first name.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the average ranking for each player and their first name.. \nSELECT  SELECT AVG(ranking_points) AS Avg_Ranking_Points,\n        player_id,\n        first_name\n        FROM rankings GROUP BY player_id, first_name;\n#Name Player Ranking\nSrinivas Gokulnath 700\nLayne Sweeris 500\nJeremy Zitzewitz 370\nEric Tran 330\nDave Kerr 270\n\n#Their birthdates...\nSELECT  SELECT birth_date FROM players;\n#1973-01-28\n#1983-02-22\n#1981-01-19\n#1987-04-14\n#1978-03-08\n\n#Surfaces they played on...\nSELECT  SELECT surface FROM matches;\n#clay\n#hard\n#grass\n#clay\n#grass\n\n#Best of format\nSELECT  SELECT best_of FROM matches;\n#2\n#3\n\n#First names and player_id\nSELECT  SELECT player_"}
{"question": "What are the first names of all players, and their average rankings?", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names of all players, and their average rankings?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names of all players, and their average rankings?. \nSELECT  SELECT players.first_name,\n\t\t\tGROUP_CONCAT(rankings.ranking SEPARATOR ' ') ranking\n\tFROM players\n\tJOIN rankings ON players.player_id = rankings.player_id\n\tGROUP BY players.first_name\n\tORDER BY players.first_name\n\tDESC\n\n#SELECT  SELECT players.first_name,\n\t\t\tGROUP_CONCAT(rankings.ranking SEPARATOR ' ') ranking\n\tFROM players\n\tJOIN rankings ON players.player_id = rankings.player_id\n\tWHERE players.first_name != \"Yo\"\n\tORDER BY players.first_name\n\tDESC\n\n#What are the last names of all players, and their average rankings?.\nSELECT  SELECT players.last_name,\n\t\t\tGROUP_CONCAT(rankings.ranking SEPARATOR ' ') ranking\n\tFROM players\n\tJOIN rankings ON players.player_id = rankings.player_id\n\tGROUP BY players.last_name\n\tORDER BY players.last_name\n\tDESC\n\n#What is the first and"}
{"question": "Find the total ranking points for each player and their first name.", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total ranking points for each player and their first name.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total ranking points for each player and their first name.. \nSELECT  SELECT  COUNT(player_id) AS total_ranking_points, \n                    players.first_name\nFROM    rankings INNER JOIN players\nON      rankings.player_id = players.player_id\nGROUP BY players.first_name;\n#Find the total ranking points for each player and their last name.. \nSELECT  SELECT  COUNT(player_id) AS total_ranking_points, \n                    players.last_name\nFROM    rankings INNER JOIN players\nON      rankings.player_id = players.player_id\nGROUP BY players.last_name;\n#Find the total ranking points for each player and their total ranking points.. \nSELECT  SELECT  COUNT(player_id) AS total_ranking_points,\n                    players.total_ranking_points\nFROM    rankings INNER JOIN players\nON      rankings.player_id = players.player_id\nGROUP BY players.total_ranking_points;\n"}
{"question": "What are the first names of all players, and their total ranking points?", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names of all players, and their total ranking points?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the first names of all players, and their total ranking points?. \nSELECT  SELECT first_name, SUM(ranking_points) AS total_ranking_points\nFROM players\nGROUP BY 1\nORDER BY 1\n\n\nWhat are the first names of all players, and the year of their birth?. \nSELECT  SELECT first_name, birth_date AS birth_year\nFROM players\nORDER BY 1\n\n\nWhat are the last names of all players, and their total ranking points?. \nSELECT  SELECT last_name, SUM(ranking_points) AS total_ranking_points\nFROM players\nGROUP BY 1\nORDER BY 1\n\n\nWhat are the last names of all players, and the year of their birth?. \nSELECT  SELECT last_name, birth_date AS birth_year\nFROM players\nORDER BY 1\n\n\nWhat are the ranks and rank_points of all players?. \nSELECT  SELECT player_id, ranking AS rank, ranking_points AS rank_points\nFROM rankings\nORDER BY 1\n\n\nWhat are the ranks and rank_points of all players?. \nSELECT  SELECT player_id, ranking AS rank, ranking_points AS rank_points\nFROM rankings\nORDER"}
{"question": "find the number of players for each country.", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the number of players for each country.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the number of players for each country.. \nSELECT  SELECT MAX(hand), COUNT(player_id)\n  FROM   matches, players, rankings\n  WHERE  players.player_id = matches.loser_id\n  AND    rankings.player_id = players.player_id\n  AND    rankings.ranking_date <= players.birth_date\n  AND    players.country_code = 'US'\n  AND    players.country_code != 'US'\n  AND    matches.draw_size = 'best_of'\n  AND    players.rank_points < 10000000\n  AND    players.rank_points > 100000\n  GROUP BY players.country_code\n  HAVING MAX(hand) >= 400\n  ORDER BY MAX(hand) DESC;\n\n#find the number of matches with best of 3.. \nSELECT  SELECT COUNT(draw_size), COUNT(player_id)\n  FROM   matches, players, rankings\n  WHERE  players.player_id = matches.loser_id\n  AND    rankings.player_id = players.player_id\n  AND"}
{"question": "How many players are from each country?", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are from each country?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are from each country?. \nSELECT  SELECT  SELECT COUNT(p.player_id) FROM players p WHERE p.country_code LIKE '[CH]' AS CountCH, \nSELECT  SELECT COUNT(p.player_id) FROM players p WHERE p.country_code LIKE '[CA]' AS CountCA, \nSELECT  SELECT COUNT(p.player_id) FROM players p WHERE p.country_code LIKE '[ES]' AS CountES, \nSELECT  SELECT COUNT(p.player_id) FROM players p WHERE p.country_code LIKE '[FR]' AS CountFR, \nSELECT  SELECT COUNT(p.player_id) FROM players p WHERE p.country_code LIKE '[IT]' AS CountIT, \nSELECT  SELECT COUNT(p.player_id) FROM players p WHERE p.country_code LIKE '[RU]' AS CountRU, \nSELECT  SELECT COUNT(p.player_id) FROM players p WHERE p.country_code LIKE '[US]' AS CountUS\n"}
{"question": "find the code of the country where has the greatest number of players.", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the code of the country where has the greatest number of players.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nfind the code of the country where has the greatest number of players.. \nSELECT  SELECT country_code AS \"Country_Code\", COUNT(player_id) AS \"Number of Players\"\nFROM players\nGROUP BY country_code;\n\n#find the code of the country where has the greatest number of matches.. \nSELECT  SELECT country_code AS \"Country_Code\", COUNT(match_num) AS \"Number of Matches\"\nFROM matches\nGROUP BY country_code;\n\n#find the code of the country where has the greatest number of matches.. \nSELECT  SELECT country_code AS \"Country_Code\", COUNT(tourney_id) AS \"Number of Tournaments\"\nFROM matches\nGROUP BY country_code;\n\n#find the code of the country where has the greatest number of matches.. \nSELECT  SELECT country_code AS \"Country_Code\", COUNT(tourney_id) AS \"Number of Tournaments\"\nFROM matches\nGROUP BY country_code;\n\n#find the code of the country where has the greatest number of matches.. \nSELECT  SELECT country_code AS \"Country_Code\", COUNT(tourney_id) AS \"Number of Tournaments\"\nFROM matches\nGROUP BY country_code;\n\n"}
{"question": "What is the code of the country with the most players?", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the code of the country with the most players?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the code of the country with the most players?. \nSELECT  SELECT player_id, COUNT(player_id) FROM players GROUP BY player_id ORDER BY COUNT(player_id) DESC;\n\nWhat is the average age of the oldest player?. \nSELECT  SELECT AVG(age) FROM players WHERE age > 30;\n\nWhat is the country with the most players?. \nSELECT  SELECT player_id, COUNT(player_id) FROM players GROUP BY player_id ORDER BY COUNT(player_id) DESC;\n\nWhat is the rank of the player with id 100?. \nSELECT  SELECT player_id, \n  (SELECT IFNULL(MAX(rank),0) FROM rankings WHERE rankings.player_id = players.player_id) AS rank FROM players WHERE player_id = 100;\n\nWhat is the average age of the youngest player?. \nSELECT  SELECT AVG(age) FROM players WHERE age < 20;\n\nWhat is the rank of the player with id 100?. \nSELECT  SELECT player_id, \n  (SELECT IFNULL(MAX(rank),0) FROM rankings WHERE rankings.player_id = players.player"}
{"question": "Find the codes of countries that have more than 50 players.", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the codes of countries that have more than 50 players.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the codes of countries that have more than 50 players.. \nSELECT  SELECT  DISTINCT 'country_code', count(*) AS \"players_count\" FROM players WHERE first_name LIKE '%' OR last_name LIKE '%'\n\n#print all players_count, sorted by players_count in descending order\nSELECT  SELECT  DISTINCT \"country_code\", COUNT(*) AS \"players_count\" FROM players WHERE first_name LIKE '%' OR last_name LIKE '%'\n\n"}
{"question": "What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the codes of countries with more than 50 players?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the codes of countries with more than 50 players?. \nSELECT  SELECT country_code, count(player_id) FROM players  GROUP BY country_code  HAVING count(player_id) > 50;\nHint: Selecting one of the columns of the query above will give you the code. \nSELECT country_code FROM (SELECT country_code, count(player_id) FROM players  GROUP BY country_code  HAVING count(player_id) > 50);\nWhat are the 10 countries with most players?.\nSELECT  SELECT country_code, count(player_id) FROM players  GROUP BY country_code  ORDER BY count(player_id) DESC  LIMIT 10;\nWhat are the 10 most populated countries in the world?.\nSELECT  SELECT country_code, count(player_id) FROM players  GROUP BY country_code  ORDER BY count(player_id) DESC  LIMIT 10;\nWhat are the 10 countries with most Grand Slams?.\nSELECT  SELECT country_code, count(player_id) FROM players  GROUP BY country_code  ORDER BY count(player_id) DESC  LIMIT 10;\nWhat is the 50th"}
{"question": "Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of tours for each ranking date.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the total number of tours for each ranking date.. \nSELECT  SELECT ranking_date, COUNT(*)\nFROM    rankings\nWHERE   ranking_date >= 20150101\nAND     ranking_date <= 20151231\nGROUP BY ranking_date\nORDER BY ranking_date ASC\n\nFind the average number of tournaments played by each player, and rank it:\n\nSELECT  SELECT player_id, COUNT(*)/6 AS no_tournaments\nFROM    players\nWHERE   player_id in (\n            SELECT  SELECT player_id FROM rankings\n            WHERE   ranking <= 500\n            AND     ranking_date = 20151231\n            ORDER BY ranking ASC\n            LIMIT  1\n            )\nGROUP BY player_id\nORDER BY COUNT(*) DESC\n\nFind the number of tournaments in which each player was able to win at least one match, and rank it:\n\nSELECT  SELECT player_id, COUNT(match_num)\nFROM    players\nWHERE   player_id in (\n            SELECT  SELECT player_id FROM rankings\n            WHERE   ranking <= 500\n            AND     ranking_date = 20151"}
{"question": "How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many total tours were there for each ranking date?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many total tours were there for each ranking date?. \nSELECT  SELECT sum(tourney_id)\nFROM    FROM rankings, tourney_levels, tourney_level_names, tours, tourney_dates, rankings\nWHERE    WHERE ranking_date = tourney_date\nAND      AND ranking_date = tourney_date\nAND      AND ranking_date = tourney_date\nAND      AND ranking_date = tourney_date\nAND      AND ranking_date = tourney_date\nAND      AND tourney_level_id = tourney_level_id\nAND      AND tourney_level_id = tourney_level_id\nAND      AND tourney_level_id = tourney_level_id\nAND      AND tourney_level_id = tourney_level_id\nAND      AND tourney_level_id = tourney_level_id\nAND      AND ranking_points >= 0\nGROUP    BY  BY tourney_level_id, tourney_level_name, tourney_date, tourney_id, ranking_points\nORDER BY ORDER BY tourney_date\n\nAns: 1417\n\n# How many total tours were there for"}
{"question": "Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of matches happened in each year.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of matches happened in each year.. \nSELECT  SELECT COUNT(match_num)  AS total_matches\n\t\t, YEAR(match_date)  AS year\n\t\tFROM matches\n\t\tGROUP BY year\n \tORDER BY year DESC\n###print the results\n\t\t\n###Group all the matches played by each player\n\t\t\n\n\t\t\n#Print the number of matches played by each player in each year\nSELECT  SELECT player_id, COUNT(match_num)  AS total_matches\n\t\t, YEAR(match_date)  AS year\n\t\tFROM matches\n\t\tGROUP BY player_id, year\n\t\tORDER BY year DESC\n\n\n\n#Get the winning percentage of each player\nSELECT  SELECT winning_player, COUNT(match_num)  AS total_matches\n\t\t, COUNT(match_num)  * 100  / COUNT(match_num)  AS winning_percentage\n\t\tFROM matches\n\t\tGROUP BY winning_player\n\t\tORDER BY winning_player DESC\n\n\n\n#Select the players who played the most matches in each year\nSELECT  SELECT player_id\n\t\t, COUNT(match_num) "}
{"question": "How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many matches were played in each year?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many matches were played in each year?. \nSELECT  SELECT count(match_num)\nFROM    matches \nWHERE   tourney_date BETWEEN '1990-01-01' AND '2016-12-31';\n\nThe first record of the results:\n[['961', '2000', 2572]]\n\nThe last record of the results:\n[['0', '2016', 0]]\n"}
{"question": "Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name and rank of the 3 youngest winners across all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the name and rank of the 3 youngest winners across all matches.. \nSELECT  SELECT 'player_id', 'first_name', 'last_name', 'birth_date', 'country_code', 'hand',\n        'tourney_level', 'tourney_name', 'draw_size', 'round', 'score', 'surface', 'tourney_date',\n        'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name',\n        'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nFROM    wta_1\nWHERE   birth_date < 2000\nORDER BY birth_date\nLIMIT 100;\n\nFind the name and rank of the 3 youngest losers across all matches.. \nSELECT  SELECT 'player_id', 'first_name', 'last_name', 'birth_date', 'country_code', 'hand',\n        'tourney_level', 'tourney_name', 'draw_size', 'round', 'score', 'surface', 't"}
{"question": "What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names and ranks of the three youngest winners across all matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat are the names and ranks of the three youngest winners across all matches?. \nSELECT  SELECT \n      AS winner_first_name,\n      AS winner_last_name,\n      AS winner_age\nFROM  FROM \n      matches\nWHERE  WHERE \n      age > 30\nORDER  ORDER \n      BY  BY \n          winner_id\nLIMIT  LIMIT \n      3;\n\nWhat are the names and ranks of the three youngest losers across all matches?. \nSELECT  SELECT \n      AS loser_first_name,\n      AS loser_last_name,\n      AS loser_age\nFROM  FROM \n      matches\nWHERE  WHERE \n      age > 30\nORDER  ORDER \n      BY  BY \n          loser_id\nLIMIT  LIMIT \n      3;"}
{"question": "How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many different winners both participated in the WTA Championships and were left handed?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many different winners both participated in the WTA Championships and were left handed?. \nSELECT  SELECT COUNT(*)\nFROM  wta_1\nWHERE  first_name LIKE 'V'\nAND   hand='LEFT'\nAND   birth_date <= '1999-08-01'\nAND   birth_date >= '1997-08-01'\nAND   tourney_id = 4\nAND   round in ('QF', 'SF', 'F')\nGROUP  BY player_id\nHAVING COUNT(*) > 1\n\nHow many different players played in the WTA Championships, were born before 1997 and used both hands? \nSELECT COUNT(*)\nFROM  wta_1\nWHERE  birth_date <= '1997-08-01'\nAND   first_name LIKE 'V'\nAND   hand LIKE 'LEFT|RIGHT'\nAND   tourney_id = 4\nGROUP  BY player_id\nHAVING COUNT(*) > 1\n\nWhich 20 players had their birthday in 1997? \nSELECT player_id\nFROM  wta_1\nWHERE  birth_date = '1997-08"}
{"question": "Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of left handed winners who participated in the WTA Championships.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of left handed winners who participated in the WTA Championships.. \nSELECT  SELECT COUNT(*) FROM matches WHERE left_handed = TRUE AND (best_of = 1 OR best_of = 2) AND winner_age >= 18 \n\nFind the number of left handed players who lost a match in the WTA Championships.. \nSELECT  SELECT COUNT(*) FROM matches WHERE left_handed = TRUE AND (best_of = 1 OR best_of = 2) AND winner_id IS NOT NULL \n\nFind the number of left handed players who were entered in the WTA Championships.. \nSELECT  SELECT COUNT(*) FROM matches WHERE left_handed = TRUE AND (best_of = 1 OR best_of = 2) AND winner_id IS NOT NULL AND winner_entry IS NOT NULL \n\nFind the number of left handed players who lost a match in the WTA Championships that did not have a double bagel score.. \nSELECT  SELECT COUNT(*) FROM matches WHERE left_handed = TRUE AND (best_of = 1 OR best_of = 2) AND winner_id IS NOT NULL AND winner_ioc IS NOT NULL AND winner_rank > 0 AND winner_rank < 50 AND score < 0 "}
{"question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name, country code and birth date of the winner who has the highest rank points in all matches.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the first name, country code and birth date of the winner who has the highest rank points in all matches.. \nSELECT  SELECT\nplayer_id, first_name, last_name, birth_date, country_code\nFROM players\nORDER BY first_name, last_name\nLIMIT 10;\n#*SELECT  SELECT\nplayer_id, first_name, last_name, birth_date, country_code\nFROM players\nORDER BY first_name, last_name\nLIMIT 20;\n#*SELECT  SELECT\nplayer_id, first_name, last_name, birth_date, country_code\nFROM players\nORDER BY first_name, last_name\nLIMIT 100;\n#*SELECT  SELECT\nplayer_id, first_name, last_name, birth_date, country_code\nFROM players\nORDER BY first_name, last_name\nLIMIT 1000;\n#*SELECT  SELECT\nplayer_id, first_name, last_name, birth_date, country_code\nFROM players\nORDER BY first_name, last_name\nLIMIT 2000;\n\n"}
{"question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name, country code, and birth date of the player with the most winner rank points across all matches?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nWhat is the first name, country code, and birth date of the player with the most winner rank points across all matches?. \nSELECT  SELECT * FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players) AND country_code = 'DEU'\n\n#How many matches were played by players from Germany?. \nSELECT COUNT(*) FROM matches WHERE country_code = 'DEU'\n\n#How many matches were played by players from United States?. \nSELECT COUNT(*) FROM matches WHERE country_code = 'USA'\n\n#What is the most common birth date for players?. \nSELECT birth_date, COUNT(*) FROM players GROUP BY birth_date ORDER BY 2 DESC\n\n#How many matches did the player with ID 3 play?. \nSELECT COUNT(*) FROM matches WHERE loser_id = 3\n\n#How many matches did the player with ID 1 play?. \nSELECT COUNT(*) FROM matches WHERE loser_id = 1\n\n#How many matches did the player with ID 3 have at least one match win in?. \nSELECT COUNT(*) FROM matches WHERE winners_id = 3\n\n#How many matches did the player with ID 1 have at least one match win in?. \nSELECT COUNT(*) FROM matches WHERE winners_id = 1\n\n#"}
{"question": "Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of players for each hand type.. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nFind the number of players for each hand type.. \nSELECT  SELECT COUNT(DISTINCT player_id) FROM players WHERE hand='L';\nSELECT  SELECT COUNT(DISTINCT player_id) FROM players WHERE hand='R';\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "How many players are there for each hand type?", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "prompt": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are there for each hand type?. \nSELECT ", "response": "### SQLite SQL wta_1 database, with their properties:\n#players('player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code')\n#matches('best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year')\n#rankings('ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours')\nHow many players are there for each hand type?. \nSELECT  SELECT count(player_id), hand FROM players GROUP BY hand ORDER BY hand\nHow many players play in each hand type?. \nSELECT  SELECT count(player_id), hand FROM players GROUP BY hand ORDER BY hand\nHow many players play in each country?. \nSELECT  SELECT count(player_id), country_code FROM players GROUP BY country_code ORDER BY country_code\nHow many players play in each age group?. \nSELECT  SELECT count(player_id), age FROM players GROUP BY age ORDER BY age\nHow many players are there in each hand?. \nSELECT  SELECT count(player_id), hand FROM players GROUP BY hand ORDER BY hand\nHow many players are there in each country?. \nSELECT  SELECT count(player_id), country_code FROM players GROUP BY country_code ORDER BY country_code\nHow many players are there in each age group?. \nSELECT  SELECT count(player_id), age FROM players GROUP BY age ORDER BY age\nHow many players are there in each gender?. \nSELECT  SELECT count(player_id), gender FROM players GROUP BY gender ORDER BY gender\nHow many players are there in each birth date?. \nSELECT  SELECT count(player"}
{"question": "How many ships ended up being 'Captured'?", "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many ships ended up being 'Captured'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many ships ended up being 'Captured'?. \nSELECT  SELECT COUNT(s.id) AS ship_captured\nFROM    ship_lost_in_battle s\nWHERE   s.disposition_of_ship = 'captured'\n\nHow many ships ended up being 'Damaged'?. \nSELECT  SELECT COUNT(s.id) AS ship_damaged\nFROM    ship_lost_in_battle s\nWHERE   s.disposition_of_ship = 'damaged'\n\nHow many ships ended up being 'Destroyed'?. \nSELECT  SELECT COUNT(s.id) AS ship_destroyed\nFROM    ship_lost_in_battle s\nWHERE   s.disposition_of_ship = 'destroyed'\n\nHow many ships ended up being 'Sunk'?. \nSELECT  SELECT COUNT(s.id) AS ship_sunk\nFROM    ship_lost_in_battle s\nWHERE   s.disposition_of_ship = 'sunk'\n\nHow many ships ended up being 'Scuttled'?. \nSELECT  SELECT COUNT(s.id) AS ship_scuttled\nFROM    ship_lost_in_battle s\n"}
{"question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name and tonnage ordered by in descending alphaetical order for the names.. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name and tonnage ordered by in descending alphaetical order for the names.. \nSELECT  SELECT  name, tonnage FROM ship ORDER BY name DESC\n\t\n\t# ship_type\n\t#Note the order of the values in the ship_type column when ordering by ship_type ASC\n\tSELECT  SELECT  name, tonnage FROM ship ORDER BY ship_type ASC\n\t\n\t# Disposition of ships\n\t#Select the disposition of ships for the lost_in_battle field. \n\t#Note the order of the values in the disposition_of_ship field when ordering by disposition_of_ship ASC\n\tSELECT  SELECT  name, tonnage FROM ship ORDER BY disposition_of_ship ASC\n\t\n\t# Location\n\t#Note the order of the values in the location field when ordering by location ASC\n\tSELECT  SELECT  name, tonnage FROM ship ORDER BY location ASC\n\t\n\t# Killed in battle\n\t#Note the order of the values in the killed field when ordering by killed ASC\n\tSELECT  SELECT  name, tonnage FROM ship ORDER BY killed DESC\n\t\n\t# Injured in battle\n\t#Note the order of the values in the injured field when ordering by injured ASC\n\tSELECT  SELECT  name"}
{"question": "List the name, date and result of each battle.", "sql": "SELECT name ,  date FROM battle", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name, date and result of each battle.. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name, date and result of each battle.. \nSELECT  SELECT battle.name, battle.date, battle.result FROM battle \n    UNION SELECT ship.name, ship.location, ship.disposition_of_ship FROM ship\n    WHERE ship.id IN (SELECT ship_id FROM death WHERE killed_by_ship_id IS NOT NULL)\n    ORDER BY ship.name ASC\n###########################################################################\n\nimport sqlite3\n\ndef get_db():\n    return sqlite3.connect('battle_death.db')\n\ndef get_battle_db():\n    return get_db().cursor()\n\ndef get_ship_db():\n    return get_db().cursor()\n\ndef get_death_db():\n    return get_db().cursor()\n\ndef insert_battle(battle):\n    print \"inserting battle...\"\n    battle_db = get_battle_db()\n    battle_db.execute('INSERT INTO battle(name, date, result) VALUES (?,?,?)', (battle.name, battle.date, battle.result))\n    print \"inserted battle...\"\n\ndef get_battle_name(battle_id):"}
{"question": "What is maximum and minimum death toll caused each time?", "sql": "SELECT max(killed) ,  min(killed) FROM death", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is maximum and minimum death toll caused each time?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is maximum and minimum death toll caused each time?. \nSELECT  SELECT battle_id, COUNT(*) AS death_count\nFROM    battle_death \nWHERE  battle_id = 165\nGROUP BY  battle_id\nORDER BY  death_count DESC\nLIMIT 10\n-- [{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": 500000},{\"death_count\": "}
{"question": "What is the average number of injuries caused each time?", "sql": "SELECT avg(injured) FROM death", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is the average number of injuries caused each time?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is the average number of injuries caused each time?. \nSELECT  SELECT AVG(injured) FROM death WHERE battle_id = 160 \n \n# What is the average number of losses caused each time?. \nSELECT  SELECT AVG(ship_id) FROM lost_in_battle WHERE battle_id = 160 \n\n\n# What is the average of the tonnage of ships lost each time?. \nSELECT  SELECT AVG(tonnage) FROM lost_in_battle WHERE battle_id = 160 \n\n# What is the average of the tonnage of ships lost each time?. \nSELECT  SELECT AVG(ship_type) FROM lost_in_battle WHERE battle_id = 160 \n\n\n# What is the average number of deaths caused each time?. \nSELECT  SELECT AVG(killed) FROM death WHERE battle_id = 160 \n\n\n\n# What is the average number of deaths caused each time?. \nSELECT  SELECT AVG(note) FROM death WHERE battle_id = 160 \n\n\n\n# What is the average number of deaths caused each time?. \nSELECT"}
{"question": "What are the death and injury situations caused by the ship with tonnage 't'?", "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the death and injury situations caused by the ship with tonnage 't'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the death and injury situations caused by the ship with tonnage 't'?. \nSELECT  SELECT  death('caused_by_ship_id', 'id', 'note', 'killed', 'injured').\nFROM    death JOIN battle ON battle.id = death.caused_by_ship_id JOIN ship ON ship.id = death.caused_by_ship_id.\nWHERE  ship.tonnage = 't'.\nORDER  BY battle.date\nLIMIT  10;\n\n"}
{"question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the name and results of the battles when the bulgarian commander is not 'Boril'. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the name and results of the battles when the bulgarian commander is not 'Boril'. \n}
{"question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the different ids and names of the battles that lost any 'Brig' type shipes?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the different ids and names of the battles that lost any 'Brig' type shipes?. \nSELECT  SELECT 'Brig' AS ship_type\nFROM ship\nWHERE ship_type = 'Brig'\nAND LOST_IN_BATTLE = true\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nWhat are the different ids and names of the battles that lost any 'Brig' type shipes?. \nSELECT  SELECT 'Brig' AS ship_type\nFROM ship\nWHERE ship_type = 'Brig'\nAND LOST_IN_BATTLE = true\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# SELECT * FROM death\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n### What are the different ids and names of the battles that lost any 'Brig' type shipes?. \nSELECT  SELECT 'Brig' AS ship_type\nFROM ship\nWHERE ship_type = 'Brig'\nAND LOST_IN_BATTLE = true\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nWhat are the different ids and names of the battles that lost any 'Brig' type shipes?. \nSELECT  SELECT 'Brig' AS ship"}
{"question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the ids and names of the battles that led to more than 10 people killed in total.. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the ids and names of the battles that led to more than 10 people killed in total.. \nSELECT  SELECT battle_id, COUNT(DISTINCT name) \nFROM death\nGROUP BY battle_id \nHAVING COUNT(DISTINCT name) > 10;\n\nWhat are the ids and names of the battles that led to more than 10 people killed in total.. \nSELECT  SELECT battle_id, COUNT(DISTINCT name) \nFROM death\nGROUP BY battle_id \nHAVING COUNT(DISTINCT name) > 10;\n\n# GROUP BY battle_id HAVING COUNT(DISTINCT name) > 10;\n\n"}
{"question": "What is the ship id and name that caused most total injuries?", "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is the ship id and name that caused most total injuries?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat is the ship id and name that caused most total injuries?. \nSELECT  SELECT ship_id, ship_name, SUM(casualties.killed+casualties.injured) FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN ship_type ON ship.ship_type_id = ship_type.id JOIN battle ON battle.id = ship.battle_id JOIN death ON death.id = battle.death_id WHERE death.caused_by_ship_id IS NOT NULL AND death.note IS NOT NULL GROUP BY ship_id, ship_name ORDER BY SUM(casualties.killed+casualties.injured) DESC LIMIT 0, 1\n\n\n# What is the ship id and name that caused most total injuries?.\n\n# Find the one that is missing\n\n# What is the ship id and name that caused most total injuries?.\n\n# What is the ship id and name that caused most total injuries?.\n\n# What is the ship id and name that caused most total injuries?.\n\n# What is the ship id and name that caused most total injuries?.\n\n# What is the ship id and name that caused most total injuries?."}
{"question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?. \nSELECT  SELECT  DISTINCT battle.name  FROM  battle  WHERE  battle.date >= '27-07-1119' AND battle.date < '05-08-1119' \nAND  battle.bulgarian_commander = 'Kaloyan' AND  battle.latin_commander = 'Baldwin I' \nORDER BY  battle.date \nASC;\n\n# What are the distinct battle names which are between bulgarian commander 'Ivan Asen' and latin commander 'Henry V'?. \nSELECT  SELECT  DISTINCT battle.name  FROM  battle  WHERE  battle.date >= '05-07-1230' AND battle.date < '24-07-1230' \nAND  battle.bulgarian_commander = 'Ivan Asen' AND  battle.latin_commander = 'Henry V' \nORDER BY  battle.date \nASC;\n\n# What are the distinct battle names which are between bulgarian commander 'Ivan Asen' and latin commander 'Henry V'?. \nSELECT"}
{"question": "How many different results are there for the battles?", "sql": "SELECT count(DISTINCT RESULT) FROM battle", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many different results are there for the battles?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many different results are there for the battles?. \n}
{"question": "How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many battles did not lose any ship with tonnage '225'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nHow many battles did not lose any ship with tonnage '225'?. \nSELECT  SELECT COUNT(*) FROM ship WHERE tonnage = 225 AND lost_in_battle = 0;\nHow many ships did the Bulgarians and the Latins lose in the battle of Adrianople?.\nSELECT  SELECT COUNT(*) FROM ship WHERE tonnage <> 0 AND (bulgarian_commander = '' OR latin_commander = '' OR result = 'Loss') AND lost_in_battle = 1;\nWhich battles did not lose any ships?.\nSELECT  SELECT id, name, date FROM battle WHERE (bulgarian_commander = '' OR latin_commander = '' OR result = 'No battle') AND lost_in_battle = 0;\nHow many ships of the Bulgarians and the Latins were lost in the battle of Adrianople?.\nSELECT  SELECT COUNT(*) FROM ship WHERE tonnage <> 0 AND (bulgarian_commander = '' OR latin_commander = '' OR result = 'Loss') AND lost_in_battle = 1;\nWhich ships were lost in the battle of Adrianople?.\nSELECT  SELECT id, name, tonnage, ship_type,"}
{"question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nList the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'. \nSELECT  SELECT battle.name AS battle_name, battle.date AS battle_date\nFROM    battle\nJOIN    ship ON ship.id = battle.ship_id\nWHERE   battle.date >= 1850010000000 AND ship.name = 'Lettice'\nORDER BY battle.date ASC\nLIMIT 10;\n#select_for_update(limit 1)\n###\n\n\n\n\n\n"}
{"question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nShow names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nShow names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.. \nSELECT  SELECT battle.name, battle.date, bulgarian_commander, latin_commander, result\nFROM    battle\nWHERE   battle.id IN (\n        SELECT id \n        FROM ship\n        WHERE ship_type = 'Boat' \n        AND name <> 'Battleboat' \n        AND location = 'English Channel'\n        AND lost_in_battle IS NULL \n)\nORDER BY battle.date DESC\n"}
{"question": "What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'", "prompt": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the notes of the death events which has substring 'East'?. \nSELECT ", "response": "### SQLite SQL battle_death database, with their properties:\n#battle('id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result')\n#ship('lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship')\n#death('caused_by_ship_id', 'id', 'note', 'killed', 'injured')\nWhat are the notes of the death events which has substring 'East'?. \nSELECT  SELECT  FROM   FROM  FROM   WHERE WHERE  WHERE  ORDER  ORDER  BY  BY  BY  LIMIT  LIMIT  LIMIT\n\"\"\"\n\n\ndef battles(source, target):\n    from django.db import connection\n    source = connection.ops.quote_name(source)\n    target = connection.ops.quote_name(target)\n\n    if source == target:\n        return [], []\n    else:\n        query = \"\"\"SELECT * FROM battle WHERE name LIKE %s ORDER BY name\"\"\" % (source,)\n        qry = connection.execute(query)\n        results = []\n        for row in qry.fetchall():\n            results.append(row)\n\n        return results, results\n\n\ndef ships(source, target):\n    from django.db import connection\n    source = connection.ops.quote_name(source)\n    target = connection.ops.quote_name(target)\n\n    if source == target:\n        return [], []\n    else:\n        query = \"\"\"SELECT * FROM ship_lost_in_battle WHERE ship LIKE %s ORDER BY date\"\"\" % (source,)\n       "}
{"question": "what are all the addresses including line 1 and line 2?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nwhat are all the addresses including line 1 and line 2?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nwhat are all the addresses including line 1 and line 2?. \nSELECT  SELECT  address_id,  address_line_1,  address_line_2,  address_line_3,  city,  state_province_county,  country,  other_address_details  FROM  student_transcripts_tracking.addresses\n#what are all the courses?. \nSELECT  SELECT  course_id,  course_name,  course_description,  other_details  FROM  student_transcripts_tracking.courses\n#what are all the departments?. \nSELECT  SELECT  department_id,  department_name,  department_description,  other_details  FROM  student_transcripts_tracking.departments\n#what are all the degree programs?. \nSELECT  SELECT  degree_program_id,  department_id,  degree_summary_name,  degree_summary_description,  other_details  FROM  student_transcripts_tracking.degree_programs\n#what are all the sections?. \nSELECT  SELECT  section_id,  course_id,  section_name,  section_description,  other_details  FROM "}
{"question": "What is the first and second line for all addresses?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first and second line for all addresses?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first and second line for all addresses?. \nSELECT  SELECT 1, LINE_1 FROM addresses;\nWhat is the last line for all addresses?. \nSELECT  SELECT 2, LINE_3 FROM addresses;\nWhat is the average number of lines for addresses?. \nSELECT  SELECT AVG(LINE_2) FROM addresses;\nWhat is the first and second line for all addresses in a specific state? (Use the \"state\" address column in the student_transcripts_tracking table to filter for the addresses with the state code for New York, which is 10.) \nSELECT  SELECT 1, LINE_1 FROM addresses WHERE state = 10;\nWhat is the last line for all addresses in a specific state? \nSELECT  SELECT 2, LINE_3 FROM addresses WHERE state = 10;\nWhat is the average number of lines for addresses in a specific state?. \nSELECT  SELECT AVG(LINE_2) FROM addresses WHERE state = 10;\nWhat is the first and second line for all addresses in a specific department?. \nSELECT  SELECT 1, LINE_1 FROM addresses WHERE department_id = 100;\nWhat is the last line for all addresses"}
{"question": "How many courses in total are listed?", "sql": "SELECT count(*) FROM Courses", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many courses in total are listed?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many courses in total are listed?. \nSELECT  SELECT count(*) FROM courses;\n\nWhat is the total number of rows in the courses table?. \nSELECT  SELECT count(*) FROM courses;\n\nHow many courses are listed in your favourite department?. \nSELECT  SELECT count(*) FROM courses WHERE department_id = 1;\n\nWhat is the name of your favourite department?. \nSELECT  SELECT department_name FROM departments WHERE department_id = 1;\n\nWhat is the name of the course you are enrolled in?. \nSELECT  SELECT course_name FROM courses WHERE student_course_id = 1;\n\nHow many semesters are there?. \nSELECT  SELECT count(*) FROM semesters;\n\nWhat is the name of the current semester?. \nSELECT  SELECT semester_name FROM semesters WHERE semester_id = 1;\n\nWhat is the name of the previous semester?. \nSELECT  SELECT semester_name FROM semesters WHERE semester_id = 2;\n\nHow many sections are listed for the current semester of your favourite department?. \nSELECT  SELECT count(*) FROM sections WHERE semester_id = 1 AND department_id = 1;\n\n"}
{"question": "How many courses are there?", "sql": "SELECT count(*) FROM Courses", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many courses are there?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many courses are there?. \nSELECT  SELECT COUNT(*)\nFROM    courses \nORDER BY 2 \n# There are 2 courses. \nHow many semesters are there?. \nSELECT  SELECT COUNT(*)\nFROM    semesters \nORDER BY 2 \n# There are 2 semesters. \nHow many students are there?. \nSELECT  SELECT COUNT(*)\nFROM    students \nORDER BY 2 \n# There are 3 students. \nHow many student_enrolments are there?. \nSELECT  SELECT COUNT(*)\nFROM    student_enrolments \nORDER BY 2 \n# There are 2 student_enrolments. \nHow many student_enrolment_courses are there?. \nSELECT  SELECT COUNT(*)\nFROM    student_enrolment_courses \nORDER BY 2 \n# There are 3 student_enrolment_courses. \nHow many transcripts are there?. \nSELECT  SELECT COUNT(*)\nFROM    transcripts \nORDER BY 2 \n# There are 4 transcripts. \nHow many transcript_contents are there?. \nSELECT  SELECT COUNT(*)\nFROM    transcript"}
{"question": "How is the math course described?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow is the math course described?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow is the math course described?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT \n    (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT \n      (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT \n        (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT \n          (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT \n            (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT \n          (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT \n            (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT \n          (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT \n            (SELECT  (SELECT  (SELECT  (SELECT  (SELECT  (SELECT "}
{"question": "What are the descriptions for all the math courses?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the descriptions for all the math courses?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the descriptions for all the math courses?. \n}
{"question": "What is the zip code of the address in the city Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the zip code of the address in the city Port Chelsea?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the zip code of the address in the city Port Chelsea?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM\naddresses  addresses  addresses  addresses  addresses  addresses  addresses  addresses\nWHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE\naddress_id = '123';\n\nWhat is the zip code of the address in the city Elk Rapids?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM\naddresses  addresses  addresses  addresses  addresses  addresses  addresses  addresses\nWHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE\naddress_id = '345';\n\nWhat is the zip code of the address in the city Chelsea?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM\naddresses  addresses  addresses  addresses  addresses  addresses  addresses  addresses\nWHERE"}
{"question": "What is the zip code for Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the zip code for Port Chelsea?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the zip code for Port Chelsea?. \nSELECT  SELECT country, state_province_county FROM Addresses WHERE country = 'United States'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Which department offers the most number of degrees? List department name and id.", "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich department offers the most number of degrees? List department name and id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich department offers the most number of degrees? List department name and id.. \nSELECT  SELECT department_id, COUNT(*) AS number_of_degrees\nFROM    student_enrolment_degrees\nGROUP BY department_id; \n#E.g. Computer Science department offers the most number of degrees with 23\n#    Engineering offers the second highest number of degrees with 12\n#    Psychology offers the lowest number of degrees with 1\n#----------------------------------------------------------------------------------------------------------\nWhich degree program offers the most number of sections? List degree_program_id, number_of_sections, and name\nSELECT  SELECT course_id, COUNT(*) AS number_of_sections\nFROM    student_enrolment_courses\nGROUP BY course_id; \n#E.g. BSE 212 - Introduction to C++ offers the highest number of sections with 7\n#    BSE 125 - Algorithms and Data Structures offers the second highest number of sections with 6\n#    BSE 202 - Introduction to Java offers the lowest number of sections with 1\n#----------------------------------------------------------------------------------------------------------\nWhich student has taken the most number of courses? List student_id and name. "}
{"question": "What is the name and id of the department with the most number of degrees ?", "sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name and id of the department with the most number of degrees ?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name and id of the department with the most number of degrees ?. \nSELECT  SELECT DISTINCT department_id, count(department_id)\nFROM departments\nWHERE (degree_program_id IS NOT NULL AND degree_program_id != 'NULL')\nGROUP BY department_id;\n\n\n# How many courses do you have ?. \nSELECT  SELECT count(course_id)\nFROM courses\nWHERE (course_id != 'NULL')\n;\n\n# How many departments do you have ?. \nSELECT  SELECT count(department_id)\nFROM departments\nWHERE (department_id != 'NULL')\n;\n\n# How many students do you have ?. \nSELECT  SELECT count(student_id)\nFROM students\nWHERE (student_id != 'NULL')\n;\n\n# How many degrees do you have ?. \nSELECT  SELECT count(degree_program_id)\nFROM departments\nWHERE (degree_program_id != 'NULL')\n;\n\n# How many sections do you have ?. \nSELECT  SELECT count(section_id)\nFROM sections\nWHERE (section_id != 'NULL')\n;\n\n# How many semesters do you have ?."}
{"question": "How many departments offer any degree?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many departments offer any degree?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many departments offer any degree?. \nSELECT  SELECT DISTINCT COUNT(*) AS distinct_departments_count\n  FROM (SELECT distinct(department_id) AS department_id\n          FROM departments)\n;\n\n\n\n"}
{"question": "How many different departments offer degrees?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different departments offer degrees?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different departments offer degrees?. \nSELECT  SELECT COUNT(DISTINCT department_id) FROM degree_programs\nHow many different degree programs are offered?. \nSELECT  SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs\nHow many students are currently enrolled?. \nSELECT  SELECT COUNT(*) FROM student_enrolment_courses\nHow many students are enrolled in each program?. \nSELECT  SELECT COUNT(student_course_id) FROM student_enrolment_courses\nHow many students have graduated?. \nSELECT  SELECT COUNT(*) FROM graduation\nHow many courses are offered?. \nSELECT  SELECT COUNT(*) FROM courses\nHow many degrees have been awarded?. \nSELECT  SELECT COUNT(*) FROM degrees\nHow many courses have been taught?. \nSELECT  SELECT COUNT(*) FROM sections\nHow many sections are offered?. \nSELECT  SELECT COUNT(*) FROM sections\nHow many students have taken each course?. \nSELECT  SELECT COUNT(student_id) FROM student_transcripts_tracking \nHow many student_transcripts_tracking records are there?. \nSELECT  SELECT COUNT(*) FROM student_transcripts_tracking \nHow many students have been enrolled?."}
{"question": "How many different degree names are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different degree names are offered?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different degree names are offered?. \nSELECT  SELECT COUNT(degree_program_id) FROM degree_programs;\n\nWhat is the minimum grade required to pass a course?. \nSELECT  SELECT MIN(grade_type) FROM grades WHERE course_id=1;\n\nWhat is the maximum number of attempts allowed for a course?. \nSELECT  SELECT MAX(grade_type) FROM grades WHERE course_id=1;\n\nWhat is the minimum grade required for a passing grade in a course?. \nSELECT  SELECT MIN(grade_type) FROM grades WHERE course_id=1;\n\nWhat is the maximum number of courses students can take in a semester?. \nSELECT  SELECT MAX(enrolment) FROM student_enrolment WHERE semester_id=1;\n\nWhat is the minimum number of courses students can take in a semester?. \nSELECT  SELECT MIN(enrolment) FROM student_enrolment WHERE semester_id=1;\n\nWhat is the minimum number of courses required to complete a degree?. \nSELECT  SELECT COUNT(degree_program_id) FROM degree_programs;\n\nHow many students are currently enrolled in the database?."}
{"question": "How many different degrees are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different degrees are offered?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different degrees are offered?. \nSELECT  SELECT COUNT(*) FROM Degree_Programs;\nWhat is the most popular major? \nSELECT  SELECT Degree_Programs.department_id, COUNT(Student_Enrolment.student_id)\nFROM    Student_Enrolment, Degree_Programs\nWHERE   Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nGROUP BY\nDegree_Programs.department_id\nORDER BY\nCOUNT(Student_Enrolment.student_id) DESC;\nWhat is the most popular minor?. \nSELECT  SELECT Degree_Programs.department_id, COUNT(Student_Enrolment.student_id)\nFROM    Student_Enrolment, Degree_Programs\nWHERE   Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nAND     Student_Enrolment.degree_program_id != '0'\nGROUP BY\nDegree_Programs.department_id\nORDER BY\nCOUNT(Student_Enrolment.student_id) DESC"}
{"question": "How many degrees does the engineering department offer?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many degrees does the engineering department offer?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many degrees does the engineering department offer?. \nSELECT  SELECT COUNT(*) FROM Degree_Programs;\nHow many students have enrolled in the Engineering department?. \nSELECT  SELECT COUNT(*) FROM Student_Enrolment WHERE Degree_Program_ID = 1;\nThe number of students enrolled in each degree program.\nSELECT  SELECT COUNT(*) FROM Student_Enrolment;\n\nHow many courses does the engineering department offer?. \nSELECT  SELECT COUNT(*) FROM Courses;\nHow many courses are enrolled in the engineering department?. \nSELECT  SELECT COUNT(*) FROM Student_Enrolment_Courses WHERE Degree_Program_ID = 1;\nThe number of courses enrolled in each degree program.\nSELECT  SELECT COUNT(*) FROM Student_Enrolment_Courses;\n\nHow many students have been enrolled in the course 400-210-60?. \nSELECT  SELECT COUNT(*) FROM Student_Enrolment_Courses WHERE Course_ID = 400-210-60;\nThe number of students enrolled in course 400-210-60.\nSELECT  SELECT COUNT(*) FROM Student_Enrolment_Courses"}
{"question": "How many degrees does the engineering department have?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many degrees does the engineering department have?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many degrees does the engineering department have?. \nSELECT  SELECT  SELECT  SELECT\ndepartments.department_name department_name, \ndegrees.degree_summary_name summary_name,\ndegrees.degree_summary_description summary_description,\ndegrees.degree_summary_level degree_level\nFROM degrees JOIN departments\nON departments.department_id = degrees.department_id\nWHERE departments.department_name = 'Engineering'\nGROUP BY degree_level\nORDER BY degree_level\n\n1.  How many students are currently enrolled in courses from the engineering department?.\nSELECT  SELECT  SELECT  SELECT\nstudent_enrolment_courses.student_course_id student_course_id,\nstudent_enrolment_courses.course_id course_id,\nstudent_enrolment_courses.student_enrolment_id student_enrolment_id,\nstudent_enrolment_courses.student_id student_id\nFROM student_enrolment_courses JOIN students\nON students.student_id = student_enrolment_courses.student_id\nWHERE students.department_id"}
{"question": "What are the names and descriptions of all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and descriptions of all the sections?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and descriptions of all the sections?. \n}
{"question": "What are the names and descriptions for all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and descriptions for all the sections?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and descriptions for all the sections?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n           c.course_name,\n           c.course_description,\n           c.course_id,\n           e.section_name,\n           e.section_description,\n           e.section_id,\n           d.department_name,\n           d.department_description,\n           d.department_id,\n           d.other_details,\n           s.semester_name,\n           s.semester_description,\n           s.semester_id,\n           p.address_id,\n           p.line_1,\n           p.line_2,\n           p.line_3,\n           p.city,\n           p.zip_postcode,\n           p.state_province_county,\n           p.country,\n           p.other_address_details,\n           p.other_details\n  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\n          courses c\n    JOIN  JOIN  JOIN  JOIN  JOIN  JOIN  JOIN  JOIN\n          enrolment_"}
{"question": "What are the names and id of courses having at most 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and id of courses having at most 2 sections?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and id of courses having at most 2 sections?. \nSELECT  SELECT  SELECT  SELECT\n    course_id\n    FROM    courses\n    GROUP BY course_id\n    HAVING  HAVING  HAVING  HAVING\n    COUNT(distinct course_id) <= 2\n    \n#What are the names and id of sections of those courses?. \nSELECT  SELECT  SELECT  SELECT\n    course_id\n    FROM    courses\n    WHERE  WHERE  WHERE  WHERE\n    (SELECT  SELECT  SELECT  SELECT\n        COUNT(distinct course_id)\n        FROM    courses\n        WHERE  WHERE  WHERE  WHERE\n        (SELECT  SELECT  SELECT  SELECT\n            COUNT(distinct course_id)\n            FROM    courses\n            WHERE  WHERE  WHERE  WHERE\n            (SELECT  SELECT  SELECT  SELECT\n                COUNT(distinct course_id)\n                FROM    courses\n                WHERE  WHERE  WHERE  WHERE\n                (SELECT  SELECT  SELECT  SELECT\n                    COUNT(distinct course_id)\n                    FROM    courses\n                    WHERE  WHERE  WHERE  WHERE\n                    (SELECT  SELECT  SELECT  SELECT\n                        COUNT(distinct course_id)"}
{"question": "What are the names and ids of every course with less than 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and ids of every course with less than 2 sections?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names and ids of every course with less than 2 sections?. \nSELECT  SELECT  c.course_id, c.course_name, c.other_details FROM student_transcripts_tracking.courses c WHERE c.course_id NOT IN (SELECT course_id FROM student_transcripts_tracking.student_course_enrolments WHERE enrolments = 2)\n\n###########################################################\n\n\n\n\n"}
{"question": "List the section_name in reversed lexicographical order.", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nList the section_name in reversed lexicographical order.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nList the section_name in reversed lexicographical order.. \nSELECT  SELECT section_name FROM sections WHERE section_id=? ORDER BY section_id DESC;\n\n#List the semester_id in reversed lexicographical order...\nSELECT  SELECT semester_id FROM semesters WHERE semester_id=? ORDER BY semester_id DESC;\n\n#List the student_id in reversed lexicographical order...\nSELECT  SELECT student_id FROM students WHERE student_id=? ORDER BY student_id DESC;\n\n#List the course_id in reversed lexicographical order...\nSELECT  SELECT course_id FROM courses WHERE course_id=? ORDER BY course_id DESC;\n\n#List the department_id in reversed lexicographical order...\nSELECT  SELECT department_id FROM departments WHERE department_id=? ORDER BY department_id DESC;\n\n#List the degree_program_id in reversed lexicographical order...\nSELECT  SELECT degree_program_id FROM degree_programs WHERE degree_program_id=? ORDER BY degree_program_id DESC;\n\n#List the student_course_id in reversed lexicographical order...\nSELECT  SELECT student_course_id FROM student_en"}
{"question": "What are the names of the sections in reverse alphabetical order?", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names of the sections in reverse alphabetical order?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names of the sections in reverse alphabetical order?. \n}
{"question": "What is the semester which most student registered in? Show both the name and the id.", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the semester which most student registered in? Show both the name and the id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the semester which most student registered in? Show both the name and the id.. \nSELECT  SELECT semesters.semester_name\n        , semesters.semester_id\n    FROM    semesters\n    ORDER BY semesters.semester_id DESC;\n\n\nWhat is the degree_program which most students registered for? Show both the name and the id. \nSELECT  SELECT degree_programs.degree_program_name\n        , degree_programs.degree_program_id\n    FROM    degree_programs\n    ORDER BY degree_programs.degree_program_id DESC;\n\n\nWhat is the department where most students registered for? Show both the name and the id. \nSELECT  SELECT departments.department_name\n        , departments.department_id\n    FROM    departments\n    ORDER BY departments.department_id DESC;\n\n\nWhich address is most used by the students? \nSELECT  SELECT addresses.address_id\n        , addresses.line_1\n        , addresses.line_2\n        , addresses.line_3\n        , addresses.city\n        , addresses.zip_postcode\n        , addresses.state_province_county\n        , addresses.country"}
{"question": "For each semester, what is the name and id of the one with the most students registered?", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFor each semester, what is the name and id of the one with the most students registered?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFor each semester, what is the name and id of the one with the most students registered?. \nSELECT  SELECT MAX(semester_id), semester_name FROM semesters \n  \nFor each course, what is the name of the course with the most students registered?.\nSELECT  SELECT MAX(course_id), course_name FROM courses \n \nFor each department, what is the name of the department with the most students registered?.\nSELECT  SELECT MAX(department_id), department_name FROM departments \n\nFor each degree_program, what is the name of the degree_program with the most students registered?.\nSELECT  SELECT MAX(degree_program_id), degree_summary_name FROM degree_programs \n\nFor each student, what is the name of the student with the most students registered?.\nSELECT  SELECT MAX(student_id), first_name, last_name, email_address FROM students \n\nFor each course, what is the name of the course with the most students registered?.\nSELECT  SELECT MAX(course_id), course_name FROM courses WHERE course_id IN (\nSELECT student_course_id FROM student_enrolment_courses \n) \n\nFor each student, what is the id of the course with the most students"}
{"question": "What is the description of the department whose name has the substring the computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the description of the department whose name has the substring the computer?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the description of the department whose name has the substring the computer?. \nSELECT  SELECT  department_description\nFROM     department_details\nWHERE  department_name LIKE the_computer;\n\nWhat is the description of the course whose name has the substring the computer?. \nSELECT  SELECT  course_description\nFROM     course_details\nWHERE  course_name LIKE the_computer;\n\nWhat is the name of the department whose name has the substring the computer?\nSELECT  department_name\nFROM     department_details\nWHERE  department_name LIKE the_computer;\n\nWhat is the name of the course whose name has the substring the computer?\nSELECT  course_name\nFROM     course_details\nWHERE  course_name LIKE the_computer;\n\nWhat is the name of the department whose name has the substring the computer?\nSELECT  department_name\nFROM     department_details\nWHERE  department_name LIKE the_computer;\n\nWhat is the name of the course whose name has the substring the computer?\nSELECT  course_name\nFROM     course_details\nWHERE  course_name LIKE the_computer;\n\nWhat is the name of the department whose name has the substring the computer?\nSELECT  department_name\nFROM    "}
{"question": "What is the department description for the one whose name has the word computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the department description for the one whose name has the word computer?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the department description for the one whose name has the word computer?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  department_id,\n  department_name,\n  department_description\nFROM\n  departments\nWHERE\n  department_name LIKE '%computer%'\nLIMIT 1\n#12:39:49 - C:\\Documents and Settings\\Administrator\\My Documents\\My Python Code\\sqlite-simple.py - line 169\n\n\n#SELECT *\n# FROM (\n# SELECT * FROM student_enrolment\n# ) t\n# LEFT JOIN transcripts t1 ON t.transcript_id = t1.transcript_id\n# WHERE student_enrolment.degree_program_id = 4 AND t1.transcript_date > '2005-08-01'\n\n#SELECT * FROM student_enrolment\n# LEFT JOIN transcripts t1 ON student_enrolment.transcript_id = t1.transcript_id\n# LEFT JOIN student_enrolment_courses t2 ON t2.student_course_id = t1.trans"}
{"question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.. \nSELECT  SELECT * FROM student_transcripts_tracking WHERE student_course_id IN ( SELECT student_course_id FROM student_course_transcripts_tracking WHERE course_id IN ( SELECT course_id FROM courses WHERE department_id = 1001 ) AND semester_id IN ( SELECT semester_id FROM semesters WHERE department_id = 1001 ) ) AND semester_id IN ( SELECT semester_id FROM semesters WHERE department_id = 1001 ) ORDER BY student_enrolment_id;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nc.first_name, c.middle_name, c.last_name, c.student_id,\ns1.degree_program_id, s1.semester_id,\ns2.degree_program_id, s2.semester_id\nFROM Student_Enrolment s1\nJOIN Student s2\nON s1.student_id = s2.student_id\nAND s1.degree_program_id != s2.degree_program_id\nAND s1.semester_id != s2.semester_id\nWHERE s1.degree_program_id = 1\nAND s1.semester_id = 1;\n\nWhat are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nc.first_name, c.middle_name, c.last_name, c.student_id,\ns1.degree_program_id, s1.sem"}
{"question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is enrolled in a Bachelor degree program? List the first name, middle name, last name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is enrolled in a Bachelor degree program? List the first name, middle name, last name.. \n}
{"question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first, middle, and last names for everybody enrolled in a Bachelors program?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first, middle, and last names for everybody enrolled in a Bachelors program?. \nSELECT  SELECT * FROM Students WHERE \n(Select Course_Name FROM Courses WHERE \n(Select Department_Name FROM Departments WHERE Course_Id = \nCourses.Course_Id) = 'Bachelors Program')\nAND \n(Select Department_Name FROM Departments WHERE Course_Id = \nCourses.Course_Id) = 'Bachelors Program' \nORDER BY First_Name;\n\n#What is the most popular course for the Department of Physics? \nSELECT Course_Name FROM Courses \nWHERE \n(Select Department_Name FROM Departments WHERE Course_Id = \nCourses.Course_Id) = 'Department of Physics' \nORDER BY Number_Enrolled DESC;\n\n#How many students are enrolled in Bachelors Programs in the Department of Physics? \nSELECT  COUNT(*) AS Number_Enrolled FROM Student_Enrolment \nWHERE \n(Select Department_Name FROM Departments WHERE Student_Enrolment.Degree_Program_Id = \nStudent_Enrolment.Degree_Program_Id) = 'Department of Physics"}
{"question": "Find the kind of program which most number of students are enrolled in?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the kind of program which most number of students are enrolled in?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the kind of program which most number of students are enrolled in?. \nSELECT  SELECT department_name, COUNT(*) AS total_students FROM student_enrolment_degree_programs JOIN student_enrolment ON student_enrolment_degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE student_enrolment.degree_program_id = 'LANGUAGE_ID_ENG' GROUP BY department_name ORDER BY total_students DESC;\n#Hint: Be careful with the language that you are using, as most of the above listed SQL statements will not work if you are not using the language specified. \n#Hint: Be careful with the language that you are using, as most of the above listed SQL statements will not work if you are not using the language specified. \n#Hint: To learn more about SQL, and how it works, and what it's capable of, we recommend you to read any good SQL book, or take any good SQL tutorial. \n#Hint: To learn more about SQL, and how it works, and what it's capable of, we recommend you to read any good SQL book, or take any good SQL tutorial. \n#Hint: To"}
{"question": "What is the degree summary name that has the most number of students enrolled?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the degree summary name that has the most number of students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the degree summary name that has the most number of students enrolled?. \nSELECT  SELECT dept.department_id, count(distinct student.student_id)  FROM  FROM transcripts, student_enrolment, student, students, student_enrolment_courses,  WHERE  WHERE student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id AND student_enrolment.student_enrolment_id = transcripts.student_enrolment_id AND student_enrolment.student_enrolment_id = student.student_id AND students.student_id = student.student_id AND students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = departments.department_id AND departments.department_name = dept.department_name\nSELECT  SELECT dept.department_id, count(distinct student.student_id)  FROM  FROM transcripts, student_enrolment, student, students, student_enrolment_courses,  WHERE  WHERE student_enrolment.student_enrolment_id"}
{"question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the program which most number of students are enrolled in. List both the id and the summary.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the program which most number of students are enrolled in. List both the id and the summary.. \nSELECT  SELECT  'Total students',  SUM(t.student_id_count) \nFROM    student_enrolment_courses AS t \nGROUP BY t.semester_id, t.degree_program_id \nORDER BY t.degree_program_id, t.student_id_count DESC \n\nFind the number of courses which have no students enrolled. \nSELECT  SELECT  COUNT(c.course_id) \nFROM    student_enrolment_courses AS t \nWHERE   t.course_id IS NULL \nGROUP BY t.degree_program_id \nORDER BY t.degree_program_id\n\nFind the number of students in the program with the most students. \nSELECT  SELECT  'Most students',  SUM(t.student_id_count) \nFROM    student_enrolment_courses AS t \nGROUP BY t.degree_program_id \nORDER BY t.degree_program_id, t.student_id_count DESC \n\nFind the percentage of students enrolled in each program \nSELECT  SELECT  'Percent of students',"}
{"question": "What is the program id and the summary of the degree that has the most students enrolled?", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the program id and the summary of the degree that has the most students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the program id and the summary of the degree that has the most students enrolled?. \nSELECT  SELECT * FROM student_enrolment_courses WHERE student_enrolment_id = (SELECT \nMAX(student_enrolment_id) FROM student_enrolment_courses);\n#find the degree program id and the summary of the degree that has the most students enrolled?. \nSELECT  SELECT * FROM student_enrolment_courses WHERE student_enrolment_id = (SELECT \nMAX(student_enrolment_id) FROM student_enrolment_courses);\n\nWhat is the most common first name of students enrolled in a particular course?. \nSELECT  SELECT first_name FROM student_enrolment_courses WHERE student_course_id = 1;\n#What is the most common first name of students enrolled in a particular course?. \nSELECT  SELECT first_name FROM student_enrolment_courses WHERE student_course_id = 1;\n\nWhat is the first name of a student enrolled in a particular course?. \nSELECT  SELECT first_name FROM student_enrolment_courses WHERE student_course_id = 1;\n#What is the first name of a student"}
{"question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.. \nSELECT  SELECT c.first_name||'.'||c.last_name as student_name, enr.student_id, COUNT(trans.transcript_id)\nFROM enrolment_student enr, student_enrolment_courses se_courses, student_enrolment enr, enrolment_transcript trans, course_student_enrolment se_enrolment\nWHERE enr.student_enrolment_id = enr.student_enrolment_id\nAND se_courses.course_id = enr.course_id\nAND enr.student_course_id = se_courses.student_course_id\nAND enr.student_enrolment_id = se_enrolment.student_enrolment_id\nAND enr.student_enrolment_id = trans.student_enrolment_id\nGROUP BY enr.student_enrolment_id\nHAVING COUNT(trans.transcript_id) = (SELECT MAX(COUNT(trans.transcript_id)) FROM enrolment_transcript trans)\n\n"}
{"question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?. \nSELECT  SELECT  COUNT(*), s.student_id\nFROM    student_transcripts_tracking t, student_transcripts_tracking_courses tc,\n        student_enrolment_courses se, student_enrolment_courses_student secs, student_enrolment_courses_transcripts sec, student_enrolment_courses_transcripts_contents sec, student_transcripts_tracking_semesters sts, student_transcripts_tracking_semesters_transcripts stt, student_transcripts_tracking_semesters_transcripts_contents sttc,\n        student_transcripts_tracking_semesters_transcripts_contents_contents sttcic, student_transcripts_tracking_courses_semesters stcs, student_transcripts_tracking_courses_semesters_transcripts stcts, student_transcripts_tracking_courses_semesters_transcripts_contents stctsic,\n        student_transcripts_tracking_courses_semesters_transcripts_contents_contents"}
{"question": "Which semesters do not have any student enrolled? List the semester name.", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich semesters do not have any student enrolled? List the semester name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich semesters do not have any student enrolled? List the semester name.. \nSELECT  SELECT *\nFROM    Student_Enrolment \nWHERE   NOT EXISTS (SELECT * FROM Student_Enrolment_Courses \n                    WHERE Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id)\n\n\n"}
{"question": "What is the name of the semester with no students enrolled?", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name of the semester with no students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name of the semester with no students enrolled?. \nSELECT  SELECT 'Semester_' ||\n        (SELECT COUNT(*) FROM student_enrolment s WHERE s.semester_id = e.semester_id) || '_'\nFROM    enrolment_details e;\n"}
{"question": "What are all the course names of the courses which ever have students enrolled in?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are all the course names of the courses which ever have students enrolled in?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are all the course names of the courses which ever have students enrolled in?. \nSELECT  SELECT  select * from Student_Enrolment_Courses \nWHERE Student_Enrolment_Courses.student_course_id IN (SELECT course_id FROM Student_Enrolment where degree_program_id = 1);\nSELECT  SELECT  select * from Student_Enrolment_Courses \nWHERE Student_Enrolment_Courses.student_course_id IN (SELECT course_id FROM Student_Enrolment where degree_program_id = 1);\nHow many students have ever enrolled in the course \"Computer Programming\". \nSELECT count(*) from Student_Enrolment where Student_Enrolment.degree_program_id = 1 and Student_Enrolment.course_id in (SELECT course_id FROM Student_Enrolment where degree_program_id = 1 and course_name = 'Computer Programming');\n"}
{"question": "What are the names of all courses that have some students enrolled?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names of all courses that have some students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the names of all courses that have some students enrolled?. \nSELECT  SELECT  COUNT(student_id)\nFROM    FROM    Student_Enrolment_Courses\nWHERE   WHERE   course_id = ?\nGROUP BY GROUP BY\nORDER BY ORDER BY\n#Course_names\n#Course_names\n\n#What are the names of all students that have some courses enrolled?. \nSELECT  SELECT  COUNT(student_id)\nFROM    FROM    Student_Enrolment\nWHERE   WHERE   course_id = ?\nGROUP BY GROUP BY\nORDER BY ORDER BY\n#Students\n#Students\n\n#What is the name of the student that has the most courses enrolled?. \nSELECT  SELECT  student_id\nFROM    FROM    Student_Enrolment\nWHERE   WHERE   course_id IN (SELECT    SELECT    course_id\nFROM      FROM      Student_Enrolment_Courses\nGROUP     GROUP     BY      course_id\nHAVING    HAVING    COUNT(student_id) = (SELECT    SELECT    COUNT(student_id)\nFROM      FROM      Student_Enrolment_Courses\nGROUP     GROUP     BY      course_id)\nORDER BY  ORDER BY "}
{"question": "What's the name of the course with most number of enrollments?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat's the name of the course with most number of enrollments?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat's the name of the course with most number of enrollments?. \nSELECT  SELECT * FROM courses WHERE count(*) > (SELECT count(*) FROM student_enrolment WHERE degree_program_id = 'CS')\n\nWhat's the name of the course with least number of enrollments?. \nSELECT  SELECT * FROM courses WHERE count(*) = (SELECT count(*) FROM student_enrolment WHERE degree_program_id = 'CS')\n\nWhat's the name of the course with most number of enrollments?. \nSELECT  SELECT * FROM courses WHERE count(*) > (SELECT count(*) FROM student_enrolment WHERE degree_program_id = 'ACC')\n\nWhat's the name of the course with least number of enrollments?. \nSELECT  SELECT * FROM courses WHERE count(*) = (SELECT count(*) FROM student_enrolment WHERE degree_program_id = 'ACC')\n\nWhat's the name of the course with most number of enrollments?. \nSELECT  SELECT * FROM courses WHERE count(*) > (SELECT count(*) FROM student_enrolment WHERE degree_program_id = 'ECE')\n\nWhat's the name of the course with least number of enrollments?. \nSELECT  SELECT * FROM courses"}
{"question": "What is the name of the course with the most students enrolled?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name of the course with the most students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the name of the course with the most students enrolled?. \nSELECT  SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)\nFROM    SELECT course_id, count(*)"}
{"question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nstudent_id, last_name, state_province_county, address_id\nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\naddresses, student_enrolment_courses\nWHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE\nstudent_enrolment_courses.student_id = addresses.address_id\nAND  AND  AND  AND  AND  AND  AND  AND  AND  AND\naddresses.state_province_county = 'NC'\nAND  AND  AND  AND  AND  AND  AND  AND  AND  AND\naddresses.line_3 IS NULL\nAND  AND  AND  AND  AND  AND  AND  AND  AND  AND\nstudent_enrolment_courses.student_course_id IN  (\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nstudent_course_id\nFROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM "}
{"question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the last name of the students who live in North Carolina but have not registered in any degree programs?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the last name of the students who live in North Carolina but have not registered in any degree programs?. \nSELECT  SELECT last_name FROM students WHERE (state_province_county='NC') AND (registered_for_degree_program=NULL)\n\"\"\"\n\n##############################################################################\n#\n# test_sqlite_student_transcripts_tracking_in_practice_1()\n#\n# This example demonstrates the use of the sample tables in the SQLite database\n# student_transcripts_tracking.sqlite\n#\n# (This test is adapted from the example in the SQLite 3.8.3 documentation,\n#  http://www.sqlite.org/lang_select.html\n#\n#  For more information on SQLite, see\n#  http://www.sqlite.org/\n#\n##############################################################################\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine('sqlite:///student_transcripts_tracking.sqlite', echo=True)\n\n# create tables, if needed\ntry:\n    engine.execute(\"CREATE TABLE student_transcripts_tracking.addresses (address_id INTEGER PRIMARY KEY AUTOINCREMENT, line_1 TEXT"}
{"question": "Show the date and id of the transcript with at least 2 course results.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nShow the date and id of the transcript with at least 2 course results.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nShow the date and id of the transcript with at least 2 course results.. \nSELECT  SELECT SQLITE_HIGH_PRIORITY\nTRANSCRIPT_ID, TRANSCRIPT_DATE\nFROM   TRANSCRIPTS\nWHERE  (SELECT COUNT(*)\n        FROM   TRANSCRIPT_CONTENTS\n        WHERE  TRANSCRIPT_ID = TRANSCRIPT_ID\n        AND    COURSE_ID IN (SELECT COURSE_ID\n                             FROM   STUDENT_ENROLMENT_COURSES\n                             WHERE  STUDENT_ENROLMENT_ID = ?\n                             AND    SEMESTER_ID = ?)) >= 2;\n\"\"\".strip().format(student_enrolment_id=student_enrolment_id, semester_id=semester_id)\n                                \n\ndef get_transcript_id_list(student_enrolment_id, semester_id, transcript_file_path):\n    ### We need a list of transcript ids, because we need to get the courses for those transcripts in order to determine which student id's to print.\n    ### We use this file as a temporary store of transcript ids"}
{"question": "What is the date and id of the transcript with at least 2 courses listed?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the date and id of the transcript with at least 2 courses listed?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the date and id of the transcript with at least 2 courses listed?. \n}
{"question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the phone number of the man with the first name Timmothy and the last name Ward?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the phone number of the man with the first name Timmothy and the last name Ward?. \nSELECT  SELECT DISTINCT * FROM  SELECT * FROM student_transcripts_tracking WHERE first_name = 'Timmothy' AND last_name = 'Ward'. \n}
{"question": "What is the mobile phone number of the student named Timmothy Ward ?", "sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the mobile phone number of the student named Timmothy Ward ?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the mobile phone number of the student named Timmothy Ward ?. \nSELECT  SELECT * FROM student_enrolment_courses WHERE student_id = 1000000001 AND course_id = 1000000005;\n## Question 1 - Students\n1. What is the mobile phone number of the student named Timmothy Ward ?.\n2. What is the cell_mobile_number of the student named Timmothy Ward ?.\n3. What is the mobile phone number of the student named Timmothy Ward ?.\n4. What is the cell_mobile_number of the student named Timmothy Ward ?.\n5. What is the mobile phone number of the student named Timmothy Ward ?.\n6. What is the cell_mobile_number of the student named Timmothy Ward ?.\n7. What is the mobile phone number of the student named Timmothy Ward ?.\n8. What is the cell_mobile_number of the student named Timmothy Ward ?.\n9. What is the mobile phone number of the student named Timmothy Ward ?.\n10. What is the cell_mobile_number of the student named Timmothy Ward ?.\n11."}
{"question": "Who is the first student to register? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is the first student to register? List the first name, middle name and last name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is the first student to register? List the first name, middle name and last name.. \nSELECT  SELECT STUDENT_ID,\n          (SELECT STUDENT_FIRST_NAME\n            FROM STUDENT_IDENTIFICATION\n             WHERE STUDENT_IDENTIFICATION_ID = STUDENT_ID) AS \"First_Name\",\n          (SELECT STUDENT_MIDDLE_NAME\n            FROM STUDENT_IDENTIFICATION\n             WHERE STUDENT_IDENTIFICATION_ID = STUDENT_ID) AS \"Middle_Name\",\n          (SELECT STUDENT_LAST_NAME\n            FROM STUDENT_IDENTIFICATION\n             WHERE STUDENT_IDENTIFICATION_ID = STUDENT_ID) AS \"Last_Name\",\n       FROM STUDENT_IDENTIFICATION\n        ORDER BY STUDENT_ID DESC\n        LIMIT 1\n\n\nWho is the first student to register? List the first name, middle name and last name.. \nSELECT  SELECT STUDENT_ID,\n          (SELECT STUDENT_FIRST_NAME\n            FROM STUDENT_IDENTIFICATION\n             WHERE STUDENT_IDENTIFICATION_ID = STUDENT"}
{"question": "What is the first, middle, and last name of the first student to register?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name of the first student to register?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name of the first student to register?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    students.first_name || ' ' || students.middle_name || ' ' || students.last_name AS name,\n    students.permanent_address_id || ' ' || students.current_address_id AS address_id,\n    students.permanent_address_id || ' ' || students.current_address_id || ' ' ||\n    students.city || ', ' || students.state_province_county || ', ' || students.country AS address,\n    students.cell_mobile_number AS phone,\n    students.email_address AS email,\n    students.ssn AS ssn,\n    semesters.semester_name AS semester,\n    semesters.semester_description AS semester_description,\n    semesters.date_first AS first_registered,\n    semesters.date_last AS last_registered,\n    students.first_name || ' ' || students.last_name AS name2\nFROM    students,\n    semesters\nWHERE   students.current_address_id ="}
{"question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is the earliest graduate of the school? List the first name, middle name and last name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWho is the earliest graduate of the school? List the first name, middle name and last name.. \n}
{"question": "What is the first, middle, and last name of the earliest school graduate?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name of the earliest school graduate?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first, middle, and last name of the earliest school graduate?. \nSELECT  SELECT  SELECT\n    FROM  FROM  FROM\n    WHERE  WHERE  WHERE\n    GROUP  GROUP  GROUP\n    HAVING HAVING HAVING\n    ORDER  ORDER  ORDER\n    LIMIT  LIMIT  LIMIT\n    OFFSET OFFSET OFFSET\n    \n#What is the first, middle, and last name of the earliest school graduate?. \nSELECT  SELECT  SELECT\n    FROM  FROM  FROM\n    WHERE  WHERE  WHERE\n    GROUP  GROUP  GROUP\n    HAVING HAVING HAVING\n    ORDER  ORDER  ORDER\n    LIMIT  LIMIT  LIMIT\n    OFFSET OFFSET OFFSET\n\n#What is the first, middle, and last name of the earliest school graduate?. \nSELECT  SELECT  SELECT\n    FROM  FROM  FROM\n    WHERE  WHERE  WHERE\n    GROUP  GROUP  GROUP\n    HAVING HAVING HAVING\n    ORDER  ORDER  ORDER\n    LIMIT  LIMIT  LIMIT\n    OFFSET OFFSET OFFSET\n    \n#What is the first, middle, and last name of the earliest school graduate?. \nSELECT  SELECT  SELECT"}
{"question": "Whose permanent address is different from his or her current address? List his or her first name.", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhose permanent address is different from his or her current address? List his or her first name.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhose permanent address is different from his or her current address? List his or her first name.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    student_transcripts_tracking\nWHERE   current_address_id <> permanent_address_id\nAND     student_id = (\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    student_transcripts_tracking\nWHERE   permanent_address_id = (\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    student_transcripts_tracking\nWHERE   current_address_id = (\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    student_transcripts_tracking\nWHERE   current_address_id = (\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    student_transcripts_tracking\nWHERE   current_address_id = (\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    student_transcripts_tracking\nWHERE   permanent_address_id = (\nSELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "What is the first name of the student whose permanent address is different from his or her current one?", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first name of the student whose permanent address is different from his or her current one?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the first name of the student whose permanent address is different from his or her current one?. \nSELECT  SELECT student_first_name\nFROM    student_transcripts_tracking\nWHERE   student_current_address_id != student_permanent_address_id\nAND     student_current_address_id IS NOT NULL\nAND     student_permanent_address_id IS NOT NULL\nAND     student_current_address_id IS NOT NULL\nAND     student_permanent_address_id IS NOT NULL\nORDER BY student_first_name\nLIMIT 1\n\nStudent_First_Name.\n\n* What is the last name of the student whose permanent address is different from his or her current one?.\nSELECT student_last_name FROM student_transcripts_tracking WHERE student_current_address_id != student_permanent_address_id AND student_current_address_id IS NOT NULL AND student_permanent_address_id IS NOT NULL AND student_current_address_id IS NOT NULL AND student_permanent_address_id IS NOT NULL ORDER BY student_last_name LIMIT 1\n\n* What is the address of the student whose permanent address is different from his or her current one?.\nSELECT student_current_"}
{"question": "Which address holds the most number of students currently? List the address id and all lines.", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich address holds the most number of students currently? List the address id and all lines.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhich address holds the most number of students currently? List the address id and all lines.. \nSELECT  SELECT COUNT(*) AS total, lines, id FROM address GROUP BY id ORDER BY total DESC\nWhich address holds the most number of students enrolled in the Fall semester? List the address id and all lines. \nSELECT  SELECT COUNT(*) AS total, lines, id FROM address WHERE semester='Fall' GROUP BY id ORDER BY total DESC\nWhat is the total number of students enrolled in the Fall semester? \nSELECT COUNT(*) AS total FROM student_enrolment WHERE semester='Fall'\nWhat is the total number of courses taught in the Fall semester? \nSELECT COUNT(*) AS total FROM course WHERE semester='Fall'\nWhat is the total number of sections taught in the Fall semester? \nSELECT COUNT(*) AS total FROM section WHERE semester='Fall'\nWhich department holds the most number of sections taught in the Fall semester? \nSELECT COUNT(*) AS total, department_name FROM section WHERE semester='Fall' GROUP BY department_id ORDER BY total DESC\nHow many sections are taught in Computer Science in the Fall semester? \nSELECT COUNT(*) AS total FROM section WHERE semester='Fall' AND department_id=1\nHow many"}
{"question": "What is the id, line 1, and line 2 of the address with the most students?", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the id, line 1, and line 2 of the address with the most students?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the id, line 1, and line 2 of the address with the most students?. \nSELECT  SELECT address_id,\n        line_1,\n        line_2,\n        city,\n        zip_postcode,\n        state_province_county,\n        country,\n        other_address_details\nFROM    student_transcripts_tracking\nWHERE   COUNT(student_id) = (\n        SELECT  COUNT(student_id)\n        FROM    student_transcripts_tracking\n        WHERE   address_id = 1);\n\nHow many students have an address in the San Jose, CA area?. \nSELECT  SELECT COUNT(student_id)\nFROM    student_transcripts_tracking\nWHERE   line_1 LIKE 'San Jose';\n\nWhat is the total number of courses taken by students?. \nSELECT  SELECT COUNT(student_course_id)\nFROM    student_transcripts_tracking\nWHERE   COUNT(student_id) > 0;\n\nHow many students have an address in the San Jose, CA area? How many of those students have a permanent address in the San Jose, CA area?. \nSELECT  SELECT COUNT(student_id),\n        COUNT(student_id)\nFROM"}
{"question": "On average, when were the transcripts printed?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nOn average, when were the transcripts printed?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nOn average, when were the transcripts printed?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n          students.last_name || ', ' || students.first_name as student_name, \n          dates.date_first_registered, \n          dates.date_left, \n          student_enrolment.degree_program_id, \n          student_enrolment.semester_id, \n          transcripts.transcript_date, \n          other_details \n          FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\n          students, \n          student_enrolment, \n          dates, \n          course_sections, \n          courses, \n          departments, \n          student_transcripts_tracking, \n          semesters, \n          sections, \n          degree_programs, \n          transcripts \n          WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE\n          students"}
{"question": "What is the average transcript date?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the average transcript date?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the average transcript date?. \nSELECT  SELECT  AVG(transcript_date) AS average FROM student_transcripts;\nWhat is the average number of courses in a transcript?. \nSELECT  SELECT  AVG(COUNT(student_course_id)) AS average FROM student_transcripts_tracking;\nHow many students are enrolled in a degree program?. \nSELECT  SELECT  COUNT(student_enrolment_id) AS number_enrolled FROM student_enrolment_degree_programs;\nHow many courses are enrolled in a program?. \nSELECT  SELECT  COUNT(student_course_id) AS number_enrolled FROM student_enrolment_courses;\nWhat is the average number of courses per degree program?. \nSELECT  SELECT  AVG(number_enrolled) AS average FROM student_enrolment_degree_programs;\nWhat is the average number of courses per student?. \nSELECT  SELECT  AVG(number_enrolled) AS average FROM student_enrolment_courses;\nWhat is the most popular degree program?. \nSELECT  SELECT  COUNT(student_enrolment_degree_program_id) AS number"}
{"question": "When is the first transcript released? List the date and details.", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhen is the first transcript released? List the date and details.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhen is the first transcript released? List the date and details.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n\t\t\t\t\t\t\t\t\t\tSELECT  SELECT\n\t\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t\t\t\t\t\t\t\t\tFROM\t\t"}
{"question": "What is the earliest date of a transcript release, and what details can you tell me?", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the earliest date of a transcript release, and what details can you tell me?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the earliest date of a transcript release, and what details can you tell me?. \nSELECT  SELECT transcript_date,\n        MAX(CASE WHEN transcript_date < '2007-10-01' THEN 0 ELSE 1 END) AS is_pre_2007\nFROM    transcript_contents\nGROUP BY transcript_date\n\nHow many students were enrolled in 2007? \nSELECT COUNT(student_id) FROM student_enrolment WHERE \n        student_enrolment.semester_id = '2007-FALL'\n\nHow many courses were taken in 2007? \nSELECT COUNT(student_enrolment_course.course_id) FROM student_enrolment_course WHERE\n        student_enrolment_course.student_enrolment_id = '2007-FALL'\n\nHow many transcripts have been released by the student registrar? \nSELECT COUNT(transcript_id) FROM transcript\n\n\n### When is the start of the 2007-2008 academic year?. \nSELECT student_registration.start_date FROM student_registration WHERE \n        student_reg"}
{"question": "How many transcripts are released?", "sql": "SELECT count(*) FROM Transcripts", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many transcripts are released?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many transcripts are released?. \nSELECT  SELECT COUNT(*)\nFROM  FROM student_transcripts_tracking\nWHERE  WHERE \ntranscript_id != 0;\nHow many students are in the database?. \nSELECT  SELECT COUNT(*)\nFROM  FROM student_transcripts_tracking\nWHERE  WHERE \nstudent_id != 0;\nHow many courses are in the database?. \nSELECT  SELECT COUNT(*)\nFROM  FROM course\nWHERE  WHERE \ncourse_id != 0;\nHow many addresses are in the database?. \nSELECT  SELECT COUNT(*)\nFROM  FROM address\nWHERE  WHERE \naddress_id != 0;\nHow many departments are in the database?. \nSELECT  SELECT COUNT(*)\nFROM  FROM department\nWHERE  WHERE \ndepartment_id != 0;\nHow many degree_programs are in the database?. \nSELECT  SELECT COUNT(*)\nFROM  FROM degree_program\nWHERE  WHERE \ndegree_program_id != 0;\nHow many semesters are in the database?. \nSELECT  SELECT COUNT(*)\nFROM  FROM semester\nWHERE  WHERE \nsemester_id != 0;\nHow many student"}
{"question": "How many transcripts are listed?", "sql": "SELECT count(*) FROM Transcripts", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many transcripts are listed?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many transcripts are listed?. \nSELECT  SELECT COUNT(*)  FROM  transcripts;\n\nHow many of the transcripts have 'Student Name' in the contents?\nSELECT SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents LIKE '%Student Name%';\n\nHow many of the transcripts have 'Class Name' in the contents?\nSELECT SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents LIKE '%Class Name%';\n\nHow many of the transcripts have 'Class Name' in the contents?\nSELECT SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents LIKE '%Class Name%';\n\nHow many of the transcripts have 'Class Name' in the contents?\nSELECT SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents LIKE '%Class Name%';\n\nHow many of the transcripts have 'Class Name' in the contents?\nSELECT SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents LIKE '%Class Name%';\n\nHow many of the transcripts have 'Class Name' in the contents?\nSELECT SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents LIKE '%Class Name%';\n\nHow many of the transcripts have 'Class Name"}
{"question": "What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the last transcript release date?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the last transcript release date?. \nSELECT  SELECT * FROM Transcript_Contents WHERE Transcript_Contents.Transcript_ID = (SELECT MAX(Transcript_Contents.Transcript_ID) FROM Transcript_Contents)\n\nWhat is the sum of all cumulative GPA?. \nSELECT  SELECT SUM(Transcript_Contents.Grade_Point_Average) FROM Transcript_Contents;\n\nWhat is the average GPA of all students?. \nSELECT  SELECT AVG(Transcript_Contents.Grade_Point_Average) FROM Transcript_Contents;\n\nWhat is the average GPA of students who live in Indiana?. \nSELECT  SELECT AVG(Transcript_Contents.Grade_Point_Average) FROM Transcript_Contents WHERE Transcript_Contents.Current_Address_ID = (SELECT MAX(Transcript_Contents.Current_Address_ID) FROM Transcript_Contents WHERE Transcript_Contents.Current_Address_ID IS NOT NULL AND Transcript_Contents.Current_Address_ID IN (SELECT Current_Address_ID FROM Addresses WHERE State_Province_County = 'IN'));\n\nWhat is the average GPA of students who live in California?. \nSELECT "}
{"question": "When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhen was the last transcript released?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhen was the last transcript released?. \nSELECT  SELECT  * \nFROM    STUDENT_TRANSCRIPTS\nWHERE (transcript_date >= '2017-06-26'\nAND transcript_date <= '2017-06-26')\n#What is the range of dates of the released transcript?.\n#What is the range of dates of the released transcript?.\nWhat is the range of dates of the released transcript?.\nSELECT  SELECT  * \nFROM    STUDENT_TRANSCRIPTS\nWHERE (transcript_date >= '2017-06-26'\nAND transcript_date <= '2017-06-26')\n#How many transcripts have been released for the student?.\nSELECT  SELECT  COUNT(*) \nFROM    STUDENT_TRANSCRIPTS \nWHERE student_id = '11112222333'\n#What is the range of dates of the released transcript?.\n#What is the range of dates of the released transcript?.\n#How many transcripts have been released for the student?.\nSELECT  SELECT  COUNT(*) \nFROM"}
{"question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  COUNT(DISTINCT * FROM student_enrolment_courses) AS numOfEnrollmentsInTranscript,\n  COUNT(DISTINCT * FROM student_enrolment_courses) * COUNT(DISTINCT * FROM courses) AS numOfTranscripts\nFROM student_enrolment_courses, courses\nWHERE student_enrolment_courses.course_id = courses.course_id\nGROUP BY courses.course_id\nORDER BY courses.course_id\n##\u00a0How many courses do students take on average in each degree program?\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  SELECT  COUNT(DISTINCT student_enrolment_id)\nFROM student_enrolment_courses\nWHERE student_enrolment_courses.degree_program_id IS NOT NULL\nGROUP BY degree_program_id\nORDER BY"}
{"question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?. \nSELECT  SELECT COUNT(*) AS num_transcripts_that_course_shows_up_in, count(distinct t.transcript_id) as transcript_course_enrollment_id\n    FROM (SELECT distinct course_id FROM student_enrolment_courses) a\n    JOIN (SELECT distinct course_id FROM student_enrolment_courses) b\n    ON a.course_id = b.course_id\n    JOIN student_transcripts_tracking t\n    ON t.course_id = a.course_id\n    GROUP BY t.course_id\n    HAVING COUNT(*) > 1;\n\nWhat is the maximum number of times that a student shows up in different transcripts and what is that student's enrollment id?\nSELECT  SELECT COUNT(*) AS num_transcripts_student_shows_up_in, count(distinct t.transcript_id) as transcript_student_enrollment_id\n    FROM (SELECT distinct student_id FROM student_enrolment_courses) a\n    JOIN (SELECT distinct student_id FROM student_enrolment_courses)"}
{"question": "Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nShow the date of the transcript which shows the least number of results, also list the id.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nShow the date of the transcript which shows the least number of results, also list the id.. \nSELECT  SELECT FROM   SELECT FROM\nFROM    (SELECT * FROM  FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM   FROM\nFROM    (SELECT * FROM   FROM  "}
{"question": "What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the date and id of the transcript with the least number of results?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the date and id of the transcript with the least number of results?. \nSELECT  SELECT * FROM transcript_contents WHERE transcript_id = (SELECT  SELECT MIN(transcript_id) FROM transcript_contents);\n#define a procedure to create a transcript\nCREATE OR REPLACE PROCEDURE create_transcript (IN transcript_id INT, IN transcript_date VARCHAR, IN transcript_contents VARCHAR)\nBEGIN\nINSERT INTO transcript_contents (transcript_id, transcript_date, transcript_contents) VALUES (transcript_id, transcript_date, transcript_contents);\nEND;\n#define a procedure to create a course\nCREATE OR REPLACE PROCEDURE create_course (IN course_id INT, IN course_name VARCHAR, IN course_description VARCHAR, IN department_id INT, IN other_details VARCHAR)\nBEGIN\nINSERT INTO courses (course_id, course_name, course_description, department_id, other_details) VALUES (course_id, course_name, course_description, department_id, other_details);\nEND;\n#define a procedure to create a department\nCREATE OR REPLACE PROCEDURE create_department (IN department_id"}
{"question": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the semester when both Master students and Bachelor students got enrolled in.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the semester when both Master students and Bachelor students got enrolled in.. \nSELECT  SELECT semester_id \n        FROM Student_Enrolment\n        WHERE\n        (degree_program_id = 4 AND\n        semester_id IN (SELECT\n                         semester_id\n                     FROM Student_Enrolment \n                     WHERE degree_program_id = 4) OR\n        degree_program_id = 3 AND\n        semester_id IN (SELECT \n                         semester_id \n                     FROM Student_Enrolment \n                     WHERE degree_program_id = 3))\n        AND student_enrolment_id NOT IN (SELECT\n                                          student_enrolment_id\n                                        FROM Student_Enrolment_Courses\n                                        WHERE course_id = 2122)\n        AND student_enrolment_id NOT IN (SELECT\n                                          student_enrolment_id\n                                        FROM Student_Enrolment_Courses\n                                        WHERE course_id = 2136)\n        AND student_enrolment_id NOT IN (SELECT\n                                          student_enrolment_id\n                                       "}
{"question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the id of the semester that had both Masters and Bachelors students enrolled?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the id of the semester that had both Masters and Bachelors students enrolled?. \nSELECT  SELECT  student_course_id,\n            student_enrolment_id,\n            student_enrolment_semester_id\nFROM  FROM  student_enrolment\nJOIN  JOIN  student_course\nON  ON  student_course_id = student_enrolment_course_id\nWHERE  WHERE  semester_id = '2014-10-01'\nGROUP  GROUP  BY  student_enrolment_semester_id\nHAVING HAVING COUNT(student_course_id) > 1;\n"}
{"question": "How many different addresses do the students currently live?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different addresses do the students currently live?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nHow many different addresses do the students currently live?. \nSELECT  SELECT COUNT(DISTINCT current_address_id)\nFROM    student_transcripts_tracking.student_addresses\nWHERE   current_address_id IS NOT NULL\n  AND   current_address_id <> 0;\n# => 1\nHow many different address do students live in since they started at the university?. \nSELECT  SELECT COUNT(DISTINCT permanent_address_id)\nFROM    student_transcripts_tracking.student_addresses\nWHERE   permanent_address_id IS NOT NULL\n  AND   permanent_address_id <> 0;\n# => 1\nHow many different departments exist?. \nSELECT  SELECT COUNT(DISTINCT department_id)\nFROM    student_transcripts_tracking.departments;\n# => 4\nHow many different degree programs exist?. \nSELECT  SELECT COUNT(DISTINCT degree_program_id)\nFROM    student_transcripts_tracking.degree_programs;\n# => 3\nHow many different courses exist?. \nSELECT  SELECT COUNT(DISTINCT course_id)\nFROM    student_transcripts_tracking."}
{"question": "What are the different addresses that have students living there?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the different addresses that have students living there?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the different addresses that have students living there?. \nSELECT  SELECT 'Addresses' AS name, address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM address WHERE student_id = 1;\n\nWhat are the courses that students are taking?. \nSELECT  SELECT 'Courses' AS name, course_id, course_name, course_description, other_details FROM course WHERE student_enrolment_id = 1;\n\nWhat are the departments that have students?. \nSELECT  SELECT 'Departments' AS name, department_id, department_name, department_description, other_details FROM department WHERE student_id = 1;\n\nWhat are the degree_programs that have students?. \nSELECT  SELECT 'Degree_Programs' AS name, degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details FROM degree_program WHERE student_id = 1;\n\nWhat are the sections that students are taking?. \nSELECT  SELECT 'Sections' AS name, section_id, course_id, section_name"}
{"question": "List all the student details in reversed lexicographical order.", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nList all the student details in reversed lexicographical order.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nList all the student details in reversed lexicographical order.. \nSELECT  SELECT DISTINCT t1.student_id,\nt1.first_name,\nt1.last_name,\nt1.ssn,\nt1.date_first_registered,\nt1.date_left,\nt1.current_address_id,\nt1.permanent_address_id,\nt1.cell_mobile_number,\nt1.email_address,\nt1.student_enrolment_id,\nt1.degree_program_id,\nt1.semester_id,\n(CASE WHEN t1.current_address_id IS NULL THEN NULL ELSE t1.current_address_line_1 END) || \n(CASE WHEN t1.current_address_id IS NULL THEN NULL ELSE t1.current_address_line_2 END) ||\n(CASE WHEN t1.current_address_id IS NULL THEN NULL ELSE t1.current_address_line_3 END) ||\n(CASE WHEN t1.current_address_id IS NULL THEN NULL ELSE t1.current_address_city END) ||\n(CASE WHEN t1.current_address_id IS"}
{"question": "What other details can you tell me about students in reverse alphabetical order?", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat other details can you tell me about students in reverse alphabetical order?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat other details can you tell me about students in reverse alphabetical order?. \nSELECT  SELECT * FROM student_enrolment_courses\n     , student_enrolment \nWHERE student_enrolment.student_id = student_enrolment_courses.student_enrolment_id\n   AND student_enrolment.student_id = 1221\n   AND student_enrolment.degree_program_id = 2016\n   AND student_enrolment.semester_id = 2012\nORDER BY student_enrolment.student_id, student_enrolment_courses.student_course_id\n\n\n\n\n\n"}
{"question": "Describe the section h.", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nDescribe the section h.. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nDescribe the section h.. \nSELECT  SELECT * FROM  h.;\n\n--Time--\n--Begin--\nSELECT  SELECT * FROM  h. \n--Begin--\n\n--Intermediate--\nSELECT  SELECT * FROM  h. \n--Intermediate--\n\n--End--\nSELECT  SELECT * FROM  h. \n--End--\n\n--End--\nSELECT  SELECT * FROM  h. \n--End--\n"}
{"question": "What is the description for the section named h?", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the description for the section named h?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat is the description for the section named h?. \nSELECT  SELECT  department_id, department_name\nFROM    departments\nWHERE   department_id = h; \nWhat is the description for the student_course_id that appears in the table named Student_Enrolment_Courses?. \nSELECT  SELECT  student_course_id, course_id, student_enrolment_id\nFROM    student_enrolment_courses\nWHERE   student_enrolment_id = x; \nWhat is the description for the student_enrolment_id that appears in the table named Student_Enrolment_Courses?. \nSELECT  SELECT  student_id, student_course_id, course_id, student_enrolment_id\nFROM    student_enrolment_courses\nWHERE   student_enrolment_id = x; \nWhat is the description for the student_enrolment_id that appears in the table named Student_Enrolment_Courses?. \nSELECT  SELECT  student_id, student_course_id, course_id, student_enrolment_id\nFROM    student_enrolment_courses\nWHERE   student_enrolment_id"}
{"question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nFind the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .. \nSELECT  SELECT  students.first_name\nFROM    students, student_enrolment, student_enrolment_courses, \n        student_transcripts_tracking, departments, courses\nWHERE   (students.student_id = student_enrolment.student_id) AND\n        (student_enrolment.semester_id = student_enrolment_courses.semester_id) AND\n        (student_enrolment_courses.course_id = courses.course_id) AND\n        (student_enrolment_courses.student_course_id = student_transcripts_tracking.student_course_id) AND\n        (student_transcripts_tracking.student_id = students.student_id) AND\n        (departments.department_id = students.current_address_id) AND\n        (students.current_address_id = students.permanent_address_id) AND\n        (departments.department_name LIKE 'Haiti') AND\n        (students.cell_mobile_number = 09700166"}
{"question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "prompt": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?. \nSELECT ", "response": "### SQLite SQL student_transcripts_tracking database, with their properties:\n#Addresses('address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details')\n#Courses('course_id', 'course_name', 'course_description', 'other_details')\n#Departments('department_id', 'department_name', 'department_description', 'other_details')\n#Degree_Programs('degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details')\n#Sections('section_id', 'course_id', 'section_name', 'section_description', 'other_details')\n#Semesters('semester_id', 'semester_name', 'semester_description', 'other_details')\n#Students('student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details')\n#Student_Enrolment('student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details')\n#Student_Enrolment_Courses('student_course_id', 'course_id', 'student_enrolment_id')\n#Transcripts('transcript_id', 'transcript_date', 'other_details')\n#Transcript_Contents('student_course_id', 'transcript_id')\nWhat are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?. \nSELECT  SELECT 'Haiti' AS country, s.last_name, s.first_name, s.middle_name, s.cell_mobile_number FROM student s WHERE (s.current_address.line_3 LIKE '%Haiti%') OR (s.permanent_address.line_3 LIKE '%Haiti%') OR (s.cell_mobile_number LIKE '%09700166582%')\n\n# What are the students in the Engineering Department? \nSELECT  SELECT s.first_name, s.last_name, s.middle_name, d.department_name FROM student s INNER JOIN department d ON (s.department_id = d.department_id) WHERE d.department_name LIKE '%Engineering%'\n\n# What are the first names of the students who do not live in the US? \nSELECT  SELECT 'United States' AS country, s.last_name, s.first_name, s.middle_name, s.current_address.line_3, s.permanent_address.line_3 FROM student s WHERE country NOT IN ('United States"}
{"question": "List the title of all cartoons in alphabetical order.", "sql": "SELECT Title FROM Cartoon ORDER BY title", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all cartoons in alphabetical order.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all cartoons in alphabetical order.. \nSELECT  SELECT  title FROM cartoon WHERE channel = 'ABC' \n\"\"\"\n\nimport sqlite3\nimport sys\nimport os\n\n#Create table\ndef create_tables(db_file):\n\tdatabase = sqlite3.connect(db_file)\n\ttry:\n\t\tdatabase.execute(\"CREATE TABLE TV_CHANNEL (id INTEGER PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_PAR TEXT, hight_definition_TV TEXT, pay_per_view_PPV TEXT, package_option TEXT)\")\n\t\tdatabase.execute(\"CREATE TABLE TV_SERIES (id INTEGER PRIMARY KEY, episode INTEGER, air_date TEXT, rating TEXT, share TEXT, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank TEXT, channel TEXT)\")\n\t\tdatabase.execute(\"CREATE TABLE CARTOON (id INTEGER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code"}
{"question": "What are the titles of the cartoons sorted alphabetically?", "sql": "SELECT Title FROM Cartoon ORDER BY title", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the titles of the cartoons sorted alphabetically?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the titles of the cartoons sorted alphabetically?. \nSELECT  SELECT  id, title FROM cartoon;\n#What is the rating of the cartoon with the highest rating?. \nSELECT  SELECT  id, rating FROM cartoon ORDER BY rating DESC;\n#What is the rating of the cartoon with the lowest rating?. \nSELECT  SELECT  id, rating FROM cartoon ORDER BY rating ASC;\n#What are the titles of the series sorted by their air dates?.\nSELECT  SELECT  id, episode FROM tv_series;\n#What is the title of the series with the highest rating?. \nSELECT  SELECT  id, episode FROM tv_series ORDER BY rating DESC;\n#What is the title of the series with the lowest rating?. \nSELECT  SELECT  id, episode FROM tv_series ORDER BY rating ASC;\n#What is the name of the first episode of The Big Bang Theory?.\nSELECT  SELECT  id, episode FROM tv_series WHERE series_name = 'The Big Bang Theory';\n#What is the name of the most watched episode of The Big Bang Theory?.\nSELECT  SELECT  id, episode FROM tv_series WHERE series_name = 'The Big Bang Theory' ORDER BY viewers_m DESC;\n#What is the"}
{"question": "List all cartoon directed by \"Ben Jones\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList all cartoon directed by \"Ben Jones\".. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList all cartoon directed by \"Ben Jones\".. \nSELECT  SELECT cartoons.title, cartoons.directed_by\n    FROM   cartoons JOIN cartoons.directed_by = directed_by\n    WHERE   directed_by = 'Ben Jones'\n\"\"\"\n\n# def find_movies_directed_by_ben_jones(cursor):\n#     # SELECT cartoons.title, cartoons.directed_by\n#     # WHERE cartoons.directed_by = 'Ben Jones'\n#     cursor.execute(\"SELECT cartoons.title, cartoons.directed_by FROM cartoons JOIN cartoons.directed_by = directed_by WHERE directed_by = 'Ben Jones'\")\n#     movies = cursor.fetchall()\n#     return movies\n\n# def find_movies_directed_by_james_bond(cursor):\n#     # SELECT cartoons.title, cartoons.directed_by\n#     # WHERE cartoons.directed_by = 'Ben Jones'\n#     cursor.execute(\"SELECT cartoons.title, cartoons.directed_by FROM cart"}
{"question": "What are the names of all cartoons directed by Ben Jones?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the names of all cartoons directed by Ben Jones?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the names of all cartoons directed by Ben Jones?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT"}
{"question": "How many cartoons were written by \"Joseph Kuhr\"?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many cartoons were written by \"Joseph Kuhr\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many cartoons were written by \"Joseph Kuhr\"?. \nSELECT  SELECT COUNT(*)  FROM  FROM Cartoon  WHERE Written_by = \"Joseph Kuhr\";\nHow many cartoons were directed by \"Joseph Kuhr\"?. \nSELECT  SELECT COUNT(*)  FROM  FROM Cartoon  WHERE Directed_by = \"Joseph Kuhr\";\nHow many cartoons were written by \"Joseph Kuhr\" and directed by \"Joseph Kuhr\"?. \nSELECT  SELECT COUNT(*)  FROM  FROM Cartoon  WHERE (Written_by = \"Joseph Kuhr\" AND Directed_by = \"Joseph Kuhr\");\nHow many cartoons were directed by \"J. J. Sedelmaier\"?. \nSELECT  SELECT COUNT(*)  FROM  FROM Cartoon  WHERE Directed_by = \"J. J. Sedelmaier\";\nHow many cartoons were directed by \"J. J. Sedelmaier\" and written by \"Joseph Kuhr\"?. \nSELECT  SELECT COUNT(*)  FROM  FROM Cartoon  WHERE (Directed_by = \"J. J. Sedelmaier\" AND Written_by = \"Joseph Kuhr\");\n#How many cartoons"}
{"question": "What is the number of cartoones written by Joseph Kuhr?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the number of cartoones written by Joseph Kuhr?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the number of cartoones written by Joseph Kuhr?. \nSELECT  SELECT COUNT(id) AS number_of_cartoons\nFROM Cartoon\nWHERE written_by = \"Joseph Kuhr\"\n\"\"\"\n\n\nfrom decimal import Decimal\nfrom unittest import main, skipUnless\n\nfrom django.contrib.gis.geos import Point\nfrom django.db.backends.util import CursorWrapper\nfrom django.utils import six\nfrom django.utils.functional import curry\nfrom django.utils.safestring import mark_safe\nfrom django.utils.six.moves.urllib.parse import urlencode\nfrom django.utils.timezone import now\n\nfrom ..models import TvChannel, TVSeries, Cartoon\n\n\n@skipUnless(six.PY2, 'py2 only')\ndef test_basic():\n    \"\"\"\n    Basic test for currying in an SQL Query\n    \"\"\"\n    tvchannel_id = 1\n    tvseries_id = 2\n    cartoon_id = 3\n\n    # Currying\n    def get_curry(curry_function, *args, **kwargs):\n        return curry_function(*args"}
{"question": "list all cartoon titles and their directors ordered by their air date", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nlist all cartoon titles and their directors ordered by their air date. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nlist all cartoon titles and their directors ordered by their air date. \nSELECT  SELECT title, directed_by, original_air_date\nFROM     CARTOON\nORDER BY original_air_date\n\"\"\"\n\n\nimport sqlite3\n\ndb = sqlite3.connect('cartoon_db.db')\nc = db.cursor()\nc.execute(\"SELECT title, directed_by, original_air_date FROM CARTOON ORDER BY original_air_date\")\nfor row in c:\n    print row\ndb.commit()\ndb.close()"}
{"question": "What is the name and directors of all the cartoons that are ordered by air date?", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the name and directors of all the cartoons that are ordered by air date?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the name and directors of all the cartoons that are ordered by air date?. \nSELECT  SELECT_SQL.id, SELECT_SQL.series_name, SELECT_SQL.Country, SELECT_SQL.Language, SELECT_SQL.Content, SELECT_SQL.Pixel_aspect_ratio_PAR, SELECT_SQL.Hight_definition_TV, SELECT_SQL.Pay_per_view_PPV, SELECT_SQL.Package_Option, SELECT_TV.id, SELECT_TV.Episode, SELECT_TV.Air_Date, SELECT_TV.Rating, SELECT_TV.Share, SELECT_TV.18_49_Rating_Share, SELECT_TV.Viewers_m, SELECT_TV.Weekly_Rank, SELECT_TV.Channel, SELECT_CAR.id, SELECT_CAR.Title, SELECT_CAR.Directed_by, SELECT_CAR.Written_by, SELECT_CAR.Original_air_date, SELECT_CAR.Production_code, SELECT_CAR.Channel\nFROM SELECT_SQL, SELECT_TV, SELECT_CAR\nWHERE SELECT_TV.id = SELECT_SQL.id\nAND SELECT_TV.Channel = SELECT_CAR.id"}
{"question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".. \nSELECT  SELECT  Cartoon.title,  Cartoon.directed_by,  Cartoon.written_by,  Cartoon.original_air_date,  Cartoon.production_code,  Cartoon.channel \nFROM    Cartoon \nWHERE   Cartoon.directed_by = \"Ben Jones\" OR Cartoon.written_by = \"Brandon Vietti\"\nORDER   BY Cartoon.title \nLIMIT   20;\n\n\n"}
{"question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the titles of all cartoons directed by Ben Jones or Brandon Vietti?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the titles of all cartoons directed by Ben Jones or Brandon Vietti?. \nSELECT  SELECT DISTINCT title FROM cartoon WHERE Title LIKE \"%Ben%Jones%\" OR Title LIKE \"%Brandon%Vietti%\"\nWhat are the names of all the episodes of South Park?. \nSELECT  SELECT DISTINCT Episode FROM tv_series WHERE Series LIKE \"%South%Park%\"\n\n### SQLite #All MySQL queries above, with their properties:\n#cartoon('id', 'title')\n#tv_series('id', 'series_name', 'country', 'language', 'content', 'pixel_aspect_ratio_PAR', 'hight_definition_TV', 'pay_per_view_PPV', 'package_option')\n#tv_channel('id', 'series_name', 'country', 'language', 'content', 'pixel_aspect_ratio_PAR', 'hight_definition_TV', 'pay_per_view_PPV', 'package_option')\n### MySQL #All MySQL queries above, with their properties:\n#cartoon('id', 'title')\n#tv_series('id', 'series_name', 'country', 'language', 'content', 'pixel_aspect_"}
{"question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhich country has the most of TV Channels? List the country and number of TV Channels it has.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhich country has the most of TV Channels? List the country and number of TV Channels it has.. \nSELECT  SELECT Country, COUNT(*) AS Number_of_channels  FROM TV_channel GROUP BY Country ORDER BY Number_of_channels DESC\n\nWhich country has the most of TV series? List the country and number of TV series it has.. \nSELECT  SELECT Country, COUNT(*) AS Number_of_series  FROM TV_series GROUP BY Country ORDER BY Number_of_series DESC\n\nWhich cartoon has been released in the most number of years? List the cartoon and number of years it was released.. \nSELECT  SELECT Title, DATEDIFF(YEAR, min(Original_air_date), MAX(Original_air_date)) AS Number_of_years  FROM Cartoon GROUP BY Title ORDER BY Number_of_years DESC"}
{"question": "What is the country with the most number of TV Channels and how many does it have?", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the country with the most number of TV Channels and how many does it have?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the country with the most number of TV Channels and how many does it have?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    COUNT(country)  COUNT(country)  COUNT(channel)  COUNT(country)  COUNT(channel)  COUNT(country)\nFROM    TV_CHANNEL  FROM    TV_CHANNEL  FROM    TV_CHANNEL  FROM    TV_CHANNEL  FROM    TV_CHANNEL\nWHERE   country = \"England\";\n\nWhat is the country with the most number of TV Channels and how many does it have?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    COUNT(country)  COUNT(country)  COUNT(channel)  COUNT(country)  COUNT(channel)  COUNT(country)\nFROM    TV_CHANNEL  FROM    TV_CHANNEL  FROM    TV_CHANNEL  FROM    TV_CHANNEL  FROM    TV_CHANNEL\nWHERE   country = \"China\";\n\nWhat is the country with the most number of TV Channels and how many does it have?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    COUNT(country)  COUNT(country"}
{"question": "List the number of different series names and contents in the TV Channel table.", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the number of different series names and contents in the TV Channel table.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the number of different series names and contents in the TV Channel table.. \nSELECT  SELECT COUNT(*) FROM TV_Channel;\n\nList the number of different series names and contents in the TV_series table..\nSELECT  SELECT COUNT(*) FROM TV_series;\n\nList the number of different series names in the Cartoon table..\nSELECT  SELECT COUNT(*) FROM Cartoon;\n\nList the number of episodes in the TV_series table..\nSELECT  SELECT COUNT(*) FROM TV_series;\n\nList the number of different series names and contents in the TV_Channel table..\nSELECT  SELECT COUNT(*) FROM TV_Channel;\n"}
{"question": "How many different series and contents are listed in the TV Channel table?", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many different series and contents are listed in the TV Channel table?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many different series and contents are listed in the TV Channel table?. \nSELECT  SELECT COUNT(id)\nFROM TV_Channel\nGROUP BY 1;\nHow many different series and contents are listed in the TV series table?. \nSELECT  SELECT COUNT(id)\nFROM TV_series\nGROUP BY 1;\nHow many different series and contents are listed in the Cartoon table?. \nSELECT  SELECT COUNT(id)\nFROM Cartoon\nGROUP BY 1;\nHow many different series and contents are listed in the Cartoon table?. \nSELECT  SELECT COUNT(id)\nFROM TV_series\nGROUP BY 1;\n"}
{"question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the content of TV Channel with serial name \"Sky Radio\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the content of TV Channel with serial name \"Sky Radio\"?. \nSELECT  SELECT Channel.series_name, Channel.Country, Channel.Language, Channel.Content, Channel.Pixel_aspect_ratio_PAR, Channel.Hight_definition_TV, Channel.Pay_per_view_PPV, Channel.Package_Option FROM TV_Channel WHERE Channel.id='1'\n```\n\n### Python\n\n```\nfrom tvshowdb import TV_Channel, TV_series, Cartoon\n\n#create object and retrieve data\nCh = TV_Channel.objects.get(id='1')\nCh.content\n```\n\n## External links\n\n* Official website"}
{"question": "What is the content of the series Sky Radio?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the content of the series Sky Radio?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the content of the series Sky Radio?. \nSELECT  SELECT * FROM TV_Channel\n\nWhat is the content of the channel Sky Radio?. \nSELECT  SELECT * FROM TV_Channel WHERE channel = 'Sky Radio'\n\nWhat is the content of the TV_series Futurama?. \nSELECT  SELECT * FROM TV_Series WHERE series = 'Futurama'\n\nWhat is the content of the Episode Bender's Big Score?. \nSELECT  SELECT * FROM TV_Episode WHERE episode = 'Bender's Big Score'\n\nWhat is the content of the Air_Date 2008-02-01?. \nSELECT  SELECT * FROM TV_Episode WHERE air_date = '2008-02-01'\n\nWhat is the rating of the Episode Bender's Big Score?. \nSELECT  SELECT * FROM TV_Episode WHERE episode = 'Bender's Big Score'\n\nWhat is the share of the Episode Bender's Big Score?. \nSELECT  SELECT * FROM TV_Episode WHERE episode = 'Bender's Big Score'\n\nWhat is the content of the series Futurama?."}
{"question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the Package Option of TV Channel with serial name \"Sky Radio\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the Package Option of TV Channel with serial name \"Sky Radio\"?. \nSELECT  SELECT_NEXT();\n# \"6\"\nWhat is the serial number of the TV show \"The Bold and the Beautiful\" at TV_channel(\"11\")?\nSELECT_NEXT();\n# \"11\"\nWhat is the serial number of the TV show \"Riverdale\" at TV_channel(\"2\")?\nSELECT_NEXT();\n# \"14\"\nWhat is the serial number of the TV show \"The Good Wife\" at TV_channel(\"6\")?\nSELECT_NEXT();\n# \"12\"\nWhat is the serial number of the TV show \"The Good Wife\" at TV_channel(\"13\")?\nSELECT_NEXT();\n# \"13\"\nWhat is the serial number of the TV show \"The Good Wife\" at TV_channel(\"15\")?\nSELECT_NEXT();\n# \"15\"\nWhat is the serial number of the TV show \"The Good Wife\" at TV_channel(\"18\")?\nSELECT_NEXT();\n# \"16\"\n\n\nWhat is the serial number of the TV show \"The Bold and the Beautiful\" at TV_channel(\"2"}
{"question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the Package Options of the TV Channels whose series names are Sky Radio?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the Package Options of the TV Channels whose series names are Sky Radio?. \nSELECT  SELECT DISTINCT tvshow.id, tvshow.series_name, tvshow.Country, tvshow.Language, tvshow.Content, tvshow.Pixel_aspect_ratio_PAR, tvshow.Hight_definition_TV, tvshow.Pay_per_view_PPV, tvshow.Package_Option FROM tvshow WHERE tvshow.series_name LIKE '%Sky Radio%' AND tvshow.Country IN ('UK', 'US') GROUP BY tvshow.Series_name;\n\nHow many TV series from the USA are there?. \nSELECT COUNT(*) FROM tvshow WHERE tvshow.Country='US';\n\nHow many TV series are there?. \nSELECT COUNT(*) FROM tvshow;\n\nHow many episodes does the TV series Friends have?. \nSELECT COUNT(*) FROM TV_series WHERE TV_series.Series_name='Friends';\n\nHow many episodes does the TV series Seinfeld have?. \nSELECT COUNT(*) FROM TV_series WHERE TV_series.Series_name='Seinfeld';\n\nHow many TV series do you have that starts with letter a to z (case insensitive)?. \nSELECT TV_series.Series_"}
{"question": "How many TV Channel using language English?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many TV Channel using language English?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many TV Channel using language English?. \nSELECT  SELECT  COUNT(language) AS langs FROM tvshow WHERE language = 'English';\n\"\"\"\n\nHow many TV Channel using language Spanish?. \nSELECT  SELECT  COUNT(language) AS langs FROM tvshow WHERE language = 'Spanish';\n\"\"\"\n\nHow many TV Channel using language Italian?. \nSELECT  SELECT  COUNT(language) AS langs FROM tvshow WHERE language = 'Italian';\n\"\"\"\n\nHow many TV Channel using language Portugese?. \nSELECT  SELECT  COUNT(language) AS langs FROM tvshow WHERE language = 'Portugese';\n\"\"\"\n\nHow many TV Channel using language French?. \nSELECT  SELECT  COUNT(language) AS langs FROM tvshow WHERE language = 'French';\n\"\"\"\n\nHow many TV Channel using language Russian?. \nSELECT  SELECT  COUNT(language) AS langs FROM tvshow WHERE language = 'Russian';\n\"\"\"\n\nHow many TV Channel using language German?. \nSELECT  SELECT  COUNT(language) AS langs FROM tvshow WHERE language = 'German';\n\"\"\"\n\nHow many TV Channel using language Japanese?. \nSELECT  SELECT  COUNT("}
{"question": "How many TV Channels use the English language?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many TV Channels use the English language?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many TV Channels use the English language?. \nSELECT  SELECT COUNT(Channel) FROM TV_Channel WHERE Country = \"United States\";\n# How many TV Channels use the English language?.\n# SELECT COUNT(Channel) FROM TV_Channel WHERE Country = \"United States\";\nHow many TV Channels use the English language?. \nSELECT  SELECT COUNT(Channel) FROM TV_Channel WHERE Country = \"United Kingdom\";\n# How many TV Channels use the English language?.\n# SELECT COUNT(Channel) FROM TV_Channel WHERE Country = \"United Kingdom\";\nHow many TV Channels use the English language?. \nSELECT  SELECT COUNT(Channel) FROM TV_Channel WHERE Country = \"Canada\";\n# How many TV Channels use the English language?.\n# SELECT COUNT(Channel) FROM TV_Channel WHERE Country = \"Canada\";\nHow many TV Channels use the English language?. \nSELECT  SELECT COUNT(Channel) FROM TV_Channel WHERE Country = \"Australia\";\n# How many TV Channels use the English language?.\n# SELECT COUNT(Channel) FROM TV_Channel WHERE Country = \"Australia\";\nHow many TV Channels use the English language?. \nSELECT  SELECT COUNT(Channel) FROM TV_Channel"}
{"question": "List the language used least number of TV Channel. List language and number of TV Channel.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the language used least number of TV Channel. List language and number of TV Channel.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the language used least number of TV Channel. List language and number of TV Channel.. \nSELECT  SELECT TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option') FROM TV_Channel \n\n\n# List all tv shows\nSELECT  SELECT TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel') FROM TV_series \n\n\n# List Cartoon episodes\nSELECT  SELECT Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel') FROM Cartoon \n\n# Delete a TV channel by id\nDELETE TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option') WHERE id = 1\n# Delete a"}
{"question": "What are the languages used by the least number of TV Channels and how many channels use it?", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the languages used by the least number of TV Channels and how many channels use it?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the languages used by the least number of TV Channels and how many channels use it?. \nSELECT  SELECT TV_Channel.Content, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Content ORDER BY COUNT(*) DESC;\n\n#What are the most used languages by TV Channels?\nSELECT TV_Channel.Content FROM TV_Channel GROUP BY TV_Channel.Content ORDER BY COUNT(*) DESC;\n\nWhat are the packages of the most used TV Channels?\nSELECT TV_Channel.Content, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Content ORDER BY COUNT(*) DESC;\n\n#What are the most used types of TV Channels?\nSELECT TV_Channel.Content, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Content ORDER BY COUNT(*) DESC;\n\nWhat are the most used Country of TV Channels?\nSELECT TV_Channel.Country, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC;\n\nWhat are the most used Country of TV Channels in the least watched TV Channels?\nSELECT TV_Channel.Country, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC;\n\nWhat are the most used Country of TV Channels in the most watched TV Channels?\nSELECT TV_"}
{"question": "List each language and the number of TV Channels using it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList each language and the number of TV Channels using it.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList each language and the number of TV Channels using it.. \nSELECT  SELECT LANGUAGE, COUNT(tv_channel_id) AS COUNT\n\tFROM  tv_channel\n\tGROUP BY LANGUAGE;\n\t\n\t\t\t\n\t\t\t\n\t\t\t\n\nList all the TV Channels in alphabetical order. \nSELECT tv_channel_id, tv_channel.channel_name FROM tv_channel\n\tORDER BY tv_channel.channel_name;\n\t\n\t\n\t\n\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t"}
{"question": "For each language, list the number of TV Channels that use it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFor each language, list the number of TV Channels that use it.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFor each language, list the number of TV Channels that use it.. \nSELECT  SELECT  Language, COUNT(*) FROM  FROM  SQL_TABLE_TV_channel\n\nFor each country, list the number of TV channels that use it.. \nSELECT  SELECT  Country, COUNT(*) FROM  FROM  SQL_TABLE_TV_channel\n\n\nFor each language, list the number of TV series that use it.. \nSELECT  SELECT  Language, COUNT(*) FROM  FROM  SQL_TABLE_TV_series\n\nFor each country, list the number of TV series that use it.. \nSELECT  SELECT  Country, COUNT(*) FROM  FROM  SQL_TABLE_TV_series\n\nFor each country, list the number of cartoons that use it.. \nSELECT  SELECT  Country, COUNT(*) FROM  FROM  SQL_TABLE_CARTOONS\n\n\n"}
{"question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.. \nSELECT  SELECT  Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option, Channel\nFROM    Cartoon, TV_Channel, TV_series\nWHERE   Cartoon.Channel = TV_Channel.Channel\nAND     TV_series.Channel = TV_Channel.Channel\nAND     TV_series.Episode = 'The Rise of the Blue Beetle!'\nAND     TV_series.Air_Date = '2014-08-23'\nORDER BY  Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option, Channel\n#What is the Cartoon's title?\n#What is the Cartoon's directed_by value?\n#What is the Cartoon's written_by value?\n#What is the Cartoon's production_code value?\n#What is the Cartoon's original_air_date value?\n#What is the Cartoon's series_name value?\n#What is the Cartoon"}
{"question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?. \nSELECT  SELECT TV_channel.series_name \nFROM  FROM TV_channel \nWHERE  WHERE TV_channel.content='Cartoon'\nAND     AND TV_channel.series_name LIKE 'The Rise of the Blue Beetle'\nLIMIT  LIMIT 1\n\nWhat is the number of episodes of the TV series 'Game of Thrones'? \nSELECT  SELECT TV_series.episode \nFROM  FROM TV_series \nWHERE  WHERE TV_series.series_name LIKE 'Game of Thrones'\nLIMIT  LIMIT 1\n\nWhat is the number of episodes of the TV series 'The Big Bang Theory'? \nSELECT  SELECT TV_series.episode \nFROM  FROM TV_series \nWHERE  WHERE TV_series.series_name LIKE 'The Big Bang Theory'\nLIMIT  LIMIT 1\n\nWhat is the rating of the episode 17 of the TV series 'The Big Bang Theory'? \nSELECT  SELECT TV_series.rating \nFROM  FROM TV_series \nWHERE  WHERE TV_series.series_name LIKE 'The Big Bang Theory' \nAND     AND"}
{"question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".. \nSELECT  SELECT id,Series_name, Country, Language, Content,Pixel_aspect_ratio_PAR, Hight_definition_TV,Pay_per_view_PPV,Package_Option,Rank, Channel FROM TV_Channel WHERE Series_name = 'Sky Radio' \n\nList the title of all  TV_series showed on TV Channel with series name \"Sky Radio\".. \nSELECT  SELECT id,Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel FROM TV_series WHERE Series_name = 'Sky Radio'\n\nList the title of all  Cartoon showed on TV Channel with series name \"Sky Radio\".. \nSELECT  SELECT id,Title, Directed_by, Written_by, Original_air_date, Production_code, Channel FROM Cartoon WHERE Channel = 'Sky Radio'\n\n###### CREATE SCHEMA ###\nCREATE TABLE TV_channel (\nid INTEGER PRIMARY KEY,\nseries_name TEXT,\ncountry TEXT,\nlanguage TEXT,\ncontent TEXT,\npixel"}
{"question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?. \nSELECT  SELECT TV_Series.series_name AS series_name, Cartoon.title AS title\nFROM  FROM TV_Channel INNER JOIN TV_Series ON TV_Channel.id = TV_Series.channel_id INNER JOIN Cartoon ON TV_Series.id = Cartoon.series_id WHERE TV_Channel.country = 'Spain' AND TV_Series.series_name = 'Sky Radio'\n#   id | series_name | country | language | content | pAR | hd | ppv | package_option |\n#----------------+------------+----------+----------+---------+-----+-----+--------+----------------\n#   57 | Sky Radio  | Spain  | Spanish | Audiovisual | 16 | 0 | 0 | 1            |\n#   44 | Sky Radio  | Spain  | Spanish | Audiovisual | 16 | 0 | 0 | 1            |\n#   48 | Sky Radio  | Spain  | Spanish | Audiovisual | 16 | 0 | 0 | 1            |\n#   55 | Sky Radio  | Spain  | Spanish | Audiovisual | 1"}
{"question": "List the Episode of all TV series sorted by rating.", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the Episode of all TV series sorted by rating.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the Episode of all TV series sorted by rating.. \nSELECT  SELECT  SELECT\n\nSeries.Rating AS rating,\n\nSeries.Episode,\n\nSeries.Air_Date,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.Episode,\n\nSeries.E"}
{"question": "What are all of the episodes ordered by ratings?", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are all of the episodes ordered by ratings?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are all of the episodes ordered by ratings?. \nSELECT  SELECT_DISTINCT \n        FROM    (SELECT  COUNT(*) AS _COUNT_ \n                    FROM    (SELECT  TV_SHOW_ID AS _ID_, \n                                    TV_SHOW_ID AS _REFERENCE_ID_, \n                                    (SELECT  COUNT(*) AS _COUNT_ \n                                        FROM    (SELECT  * \n                                                    FROM    EPISODE_TABLE \n                                                    WHERE   TV_SHOW_ID = ? \n                                                    ORDER BY  RATING ASC \n                                                    ) \n                                        GROUP BY  TV_SHOW_ID) AS _TV_SHOW_RANK_ \n                            FROM    (SELECT  * \n                                        FROM    TV_SHOW_TABLE \n                                        WHERE   NAME = ?) \n                            WHERE   EPISODE_TABLE.TV_SHOW_ID = TV_SHOW_TABLE.ID) \n                    ORDER BY  _TV_SHOW_RANK_ DESC \n                    ) \n            ) \n            ORDER BY  _COUNT"}
{"question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList top 3 highest Rating  TV series. List the TV series's Episode and Rating.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList top 3 highest Rating  TV series. List the TV series's Episode and Rating.. \nSELECT  SELECT * FROM TV_series ORDER BY Rating ASC;\n\n#List top 3 highest Average Rating  TV series. List the TV series's Episode and Rating.. \nSELECT  SELECT * FROM TV_series ORDER BY Rating DESC;\n\n#List top 3 highest Average Rating  TV series. List the TV series's Episode and Rating.. \nSELECT  SELECT * FROM TV_series ORDER BY Rating DESC;\n\n#Find all TV shows with rating > 3.4 and Country='France' \nSELECT  SELECT * FROM TV_series WHERE Rating > 3.4 AND Country = 'France' ORDER BY Rating ASC;\n\n#Find all TV shows with rating < 0.8 and Country='France' \nSELECT  SELECT * FROM TV_series WHERE Rating < 0.8 AND Country = 'France' ORDER BY Rating DESC;\n\n#Find all TV shows with rating > 0.8 and Country='France' \nSELECT  SELECT * FROM TV_series WHERE Rating > 0.8 AND Country = 'France' ORDER BY Rating DESC;\n\n#Find all TV shows with rating <"}
{"question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are 3 most highly rated episodes in the TV series table and what were those ratings?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are 3 most highly rated episodes in the TV series table and what were those ratings?. \nSELECT  SELECT TV.id, tv.Series_name, tv.Channel, tv.Country, tv.Language, tv.Content, tv.Pixel_aspect_ratio_PAR, tv.Hight_definition_TV, tv.Pay_per_view_PPV, tv.Package_Option,\n            tv.Episodes.Air_Date, tv.Episodes.Rating, tv.Episodes.Share, tv.Episodes.18_49_Rating_Share, tv.Episodes.Viewers_m, tv.Episodes.Weekly_Rank, tv.Episodes.Channel, \n            tv.Episodes.Directed_by, tv.Episodes.Written_by, tv.Episodes.Original_air_date, tv.Episodes.Production_code\nFROM    tv\nINNER JOIN tv_series ON tv.id=tv_series.tv_series_id\nINNER JOIN tv_episodes ON tv_series.id=tv_episodes.tv_series_id\nWHERE    tv.Language='English'\n        AND tv"}
{"question": "What is minimum and maximum share of TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is minimum and maximum share of TV series?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is minimum and maximum share of TV series?. \nSELECT  SELECT COUNT(id) AS num_TV, \n        SELECT SUM(Rating) AS sum_TV,\n        SELECT COUNT(*) AS num_Episodes,\n        SELECT SUM(Episode) AS sum_Episodes,\n        SELECT COUNT(*) AS num_Shows,\n        SELECT SUM(Content) AS sum_Content,\n        SELECT COUNT(*) AS num_Shows2,\n        SELECT SUM(Content) AS sum_Content2,\n        SELECT COUNT(*) AS num_Channels,\n        SELECT COUNT(*) AS num_Shows3,\n        SELECT COUNT(*) AS num_Shows4,\n        SELECT COUNT(*) AS num_Shows5,\n        SELECT COUNT(*) AS num_Shows6,\n        SELECT COUNT(*) AS num_Shows7,\n        SELECT COUNT(*) AS num_Shows8,\n        SELECT COUNT(*) AS num_Shows9,\n        SELECT COUNT(*) AS num_Shows10,\n        SELECT COUNT(*) AS num_Shows11,\n        SELECT COUNT(*) AS num_Shows12,\n        SELECT COUNT(*) AS num_Shows13,\n        SELECT COUNT(*) AS num_Shows1"}
{"question": "What is the maximum and minimum share for the TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the maximum and minimum share for the TV series?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the maximum and minimum share for the TV series?. \nSELECT  SELECT MAX(Share), MIN(Share) FROM tv_series WHERE Channel = 'CBS';\nSELECT MAX(Share), MIN(Share)\nFROM tv_series\nWHERE Channel = 'CBS';\n#cartoons \nSelect the cartoons that are based on comics or graphic novels. \nSELECT Title FROM cartoon WHERE Directed_by = 'Scott M. Gimple'\nSELECT Title FROM cartoon WHERE Written_by = 'Robert Kirkman'\n#Channels\nSelect the channels that air the show 'The Big Bang Theory'.\nSELECT Channel FROM tv_series WHERE Title = 'The Big Bang Theory';\n#TV_Shows\nSelect the TV shows that have more than 200 episodes.\nSELECT Title FROM tv_series WHERE Episode > 200;\n#Weekly_Rank\nSelect the TV shows that have a weekly rank of 5.\nSELECT Title FROM tv_series WHERE Weekly_Rank = 5;\n#Package_Option\nSelect the TV shows that have a package option of 'Double_Upgrade'.\nSELECT Title FROM tv_series WHERE Package_Option ="}
{"question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the air date of TV series with Episode \"A Love of a Lifetime\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the air date of TV series with Episode \"A Love of a Lifetime\"?. \nSELECT  SELECT  a.Episode,\n                  b.id,\n                  a.Air_Date\nFROM    TV_series a,\n        TV_Channel b\nWHERE   b.id = a.Channel\nAND     b.Country = 'United States'\nAND     b.Language = 'en'\nAND     b.Content = 'TV'\nAND     b.Pixel_aspect_ratio_PAR = '16:9'\nAND     b.Hight_definition_TV = '1'\nAND     b.Pay_per_view_PPV = '0'\nAND     b.Package_Option = 'Free'\nAND     a.Rating = 9\nAND     a.Share = 0.9\nAND     a.18_49_Rating_Share = 0.9\nAND     a.Viewers_m = 4.5\nAND     a.Weekly_Rank = 1\nAND     a.Episode = 'A Love of a Lifetime'\nORDER BY a.Air_Date\n"}
{"question": "When did the episode \"A Love of a Lifetime\" air?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhen did the episode \"A Love of a Lifetime\" air?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhen did the episode \"A Love of a Lifetime\" air?. \nSELECT  SELECT air_date\nFROM    tv_series\nWHERE   tv_series.id = 143\n        AND episode = 'A Love of a Lifetime';\n\n#Cartoon \"A Nice Rainy Day\" directed by Tom Raye?\nSELECT  SELECT directed_by\nFROM    cartoon\nWHERE   cartoon.id = 123\n        AND episode = 'A Nice Rainy Day';\n\n#Episode \"The First Temptation of Christ\"\nSELECT  SELECT season, episode, title, air_date\nFROM    tv_series\nWHERE   tv_series.id = 143\n        AND episode = 'The First Temptation of Christ';\n\n#All series in which Alfred Molina appeared in\nSELECT  SELECT actor\nFROM    tv_series\nWHERE   tv_series.id IN (\n        SELECT series_id\n        FROM    tv_show\n        WHERE   tv_show.actor_id = 2\n        );\n\n#Cartoon \"Little Gift Shop\"\nSELECT  SELECT title, written_by\nFROM    cartoon\nWHERE   cartoon.id = 123\n        AND episode"}
{"question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?. \nSELECT  SELECT TV_Series.id, AVG(TV_Series.Rating) AS Average_Rating \nFROM  FROM TV_series \nWHERE TV_Series.Rating != NULL AND TV_Series.Episode = 'A Love of a Lifetime' \nGROUP BY TV_Series.id \nHAVING (SELECT AVG(Rating) FROM TV_series WHERE id = TV_Series.id) > 3.5;\nWhat is the most popular TV series among users with preference for Action/Thriller genre? \nSELECT  SELECT TV_series.id, TV_Channel.Country, AVG(Rating) AS Average_Rating \nFROM  FROM TV_series, TV_Channel \nWHERE TV_series.Channel = TV_Channel.id \nAND TV_Channel.Genre = 'Action/Thriller' \nAND TV_series.Rating != NULL \nGROUP BY TV_series.id, TV_Channel.Country \nORDER BY Average_Rating DESC;"}
{"question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the weekly rank for the episode \"A Love of a Lifetime\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the weekly rank for the episode \"A Love of a Lifetime\"?. \nSELECT  SELECT  'A Love of a Lifetime',\n(SELECT  RANK()\nOVER (\n    PARTITION BY 1\n    ORDER BY 2 DESC\n)\n) AS Rank\nFROM tv_series\nWHERE  Episode = 'A Love of a Lifetime'\nORDER BY Rank\n"}
{"question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.. \nSELECT  SELECT TV_Channel.series_name FROM TV_Channel, TV_series WHERE TV_Channel.id = TV_series.tv_channel AND TV_series.episode = 'A Love of a Lifetime' \n\nWhat is the TV Channel of TV series with highest rating? List the TV Channel's series name.. \nSELECT  SELECT TV_Channel.series_name FROM TV_Channel, TV_series WHERE TV_Channel.id = TV_series.tv_channel AND TV_series.rating = (SELECT MAX(rating) FROM TV_series) \n\nWhat is the TV Channel of TV series with most episodes? List the TV Channel's series name.. \nSELECT  SELECT TV_Channel.series_name FROM TV_Channel, TV_series WHERE TV_Channel.id = TV_series.tv_channel AND TV_series.episode_count = (SELECT MAX(episode_count) FROM TV_series) \n\n\nWhat is the TV Channel of TV series with highest rating? List the TV Channel's series name.. \nSELECT  SELECT TV_Channel.series_name FROM TV_Channel, TV_series WHERE TV_Channel"}
{"question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the name of the series that has the episode \"A Love of a Lifetime\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the name of the series that has the episode \"A Love of a Lifetime\"?. \nSELECT  SELECT  `series_name`, `Episode` FROM `TV_Series`  WHERE `series_name`  =  'A Love of a Lifetime'\nWhat is the name of the movie that has the actor Robert De Niro? \nSELECT  `Directed_by`, `Written_by`, `Original_air_date`, `Production_code`,  `Channel` FROM `Cartoon` WHERE  `Directed_by`  =  'Robert De Niro'\nSELECT  `id`, `series_name`, `Country`, `Language`,  `Content`,  `Pixel_aspect_ratio_PAR`, `Hight_definition_TV`, `Pay_per_view_PPV`, `Package_Option` FROM `TV_Channel` WHERE  `Series_name`  =  'A Love of a Lifetime'\n"}
{"question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nList the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".. \n}
{"question": "What is the episode for the TV series named \"Sky Radio\"?", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the episode for the TV series named \"Sky Radio\"?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the episode for the TV series named \"Sky Radio\"?. \nSELECT  SELECT  id, \n\t\t\t\t\t title,\n\t\t\t\t\t CONCAT(CITY, ', ', STATE) AS city,\n\t\t\t\t\t country,\n\t\t\t\t\t language,\n\t\t\t\t\t rating,\n\t\t\t\t\t share,\n\t\t\t\t\t 18_49_rating_share,\n\t\t\t\t\t viewers_m,\n\t\t\t\t\t weekly_rank,\n\t\t\t\t\t package_option,\n\t\t\t\t\t show_name,\n\t\t\t\t\t episode_name,\n\t\t\t\t\t director,\n\t\t\t\t\t writer,\n\t\t\t\t\t original_air_date,\n\t\t\t\t\t production_code,\n\t\t\t\t\t channel\nFROM  TABLE_1\nWHERE  table_1.title = 'Sky Radio'\n\nWhat is the episode for the TV series named \"Sky Radio\"?. \n\n"}
{"question": "Find the number of cartoons directed by each of the listed directors.", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the number of cartoons directed by each of the listed directors.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the number of cartoons directed by each of the listed directors.. \nSELECT  SELECT COUNT(DISTINCT Directed_by) AS Directed_by_count,\n                  Directed_by\n        FROM Cartoon\n        GROUP BY Directed_by\n        ORDER BY Directed_by_count DESC\n"}
{"question": "How many cartoons did each director create?", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many cartoons did each director create?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nHow many cartoons did each director create?. \nSELECT  SELECT count(series_name) AS serie FROM TV_Channel\nSELECT  SELECT count(series_name) AS serie FROM TV_series\nSELECT  SELECT count(serie) AS cartoon FROM Cartoon\nSELECT  SELECT count(cartoon) AS director FROM Directors\nSELECT  SELECT count(director) AS cartoon FROM Cartoon\nSELECT  SELECT count(serie) AS cartoon FROM Cartoon\nSELECT  SELECT count(serie) AS cartoon FROM TV_series\nSELECT  SELECT count(serie) AS cartoon FROM TV_Channel\nSELECT  SELECT count(serie) AS cartoon FROM TV_series\nSELECT  SELECT count(serie) AS cartoon FROM TV_Channel\nSELECT  SELECT count(serie) AS cartoon FROM TV_Channel\nSELECT  SELECT count(serie) AS cartoon FROM TV_Channel\nSELECT  SELECT count(serie) AS cartoon FROM TV_Channel\nSELECT  SELECT count(serie) AS cartoon FROM TV_Channel\nSELECT  SELECT count(serie) AS cartoon FROM TV_Channel\nSELECT  SELECT count(serie) AS cartoon FROM TV_Channel\nSELECT  SELECT count(serie) AS cartoon FROM TV_Channel\nSELECT  SELECT count("}
{"question": "Find the production code and channel of the most recently aired cartoon .", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the production code and channel of the most recently aired cartoon .. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the production code and channel of the most recently aired cartoon .. \nSELECT  SELECT production_code, channel FROM Cartoon WHERE air_date = (SELECT MAX(air_date) FROM Cartoon);\n\n\n\n\n\n\n\n\n\n"}
{"question": "What is the produdction code and channel of the most recent cartoon ?", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the produdction code and channel of the most recent cartoon ?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the produdction code and channel of the most recent cartoon ?. \nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT"}
{"question": "Find the package choice and series name of the TV channel that has high definition TV.", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the package choice and series name of the TV channel that has high definition TV.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the package choice and series name of the TV channel that has high definition TV.. \nSELECT  SELECT 18_49_Rating_Share, Episode, 1, Air_Date, Shares FROM TV_series  WHERE Channel = \"TV1\" and Episode >= 1000 ORDER BY Shares DESC LIMIT 1;\n\nFind the package choice and series name of the TV channel that has high definition TV.. \nSELECT  SELECT 18_49_Rating_Share, Episode, 1, Air_Date, Shares FROM TV_series  WHERE Channel = \"TV1\" and Episode >= 1000 ORDER BY Shares DESC LIMIT 1;\n\nFind the number of episodes for each tvshow. \nSELECT  SELECT 1, Episode FROM TV_series  WHERE Episode >= 1000 AND Episode <= 3000 ORDER BY Episode DESC;\n\nFind the number of episodes for each cartoon. \nSELECT  SELECT 1, Episode FROM Cartoon  WHERE Episode >= 1000 AND Episode <= 3000 ORDER BY Episode DESC;\n\nFind the number of episodes for each cartoon. \nSELECT  SELECT 1, E"}
{"question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the package options and the name of the series for the TV Channel that supports high definition TV?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the package options and the name of the series for the TV Channel that supports high definition TV?. \nSELECT  SELECT_option,\n        SELECT_series_name\nFROM    SELECT_table\nWHERE   SELECT_id = 1234\nLIMIT 1\n;\n"}
{"question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nwhich countries' tv channels are playing some cartoon written by Todd Casey?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nwhich countries' tv channels are playing some cartoon written by Todd Casey?. \nSELECT  SELECT CASE WHEN COUNT(*) > 1 THEN COUNT(*) ELSE '0' END \"Total\",\n        SELECT COUNT(DISTINCT(Country)) \"Unique\",\n        SELECT Country\n        FROM Cartoon\n        WHERE Country NOT IN (\n                SELECT Country\n                FROM Cartoon\n                WHERE Country NOT IN (\n                        SELECT Country\n                        FROM Cartoon\n                        WHERE Country NOT IN (\n                                SELECT Country\n                                FROM Cartoon\n                                WHERE Country NOT IN (\n                                        SELECT Country\n                                        FROM Cartoon\n                                        WHERE Country NOT IN (\n                                                SELECT Country\n                                                FROM Cartoon\n                                                WHERE Country NOT IN (\n                                                        SELECT Country\n                                                        FROM Cartoon\n                                                        WHERE Country NOT IN (\n                                                                SELECT Country\n                                                                FROM Cartoon\n                                                                WHERE Country NOT IN (\n                                                                        SELECT Country\n                                                                        FROM Cartoon\n                                                                        WHERE Country NOT IN (\n                                                                                SELECT Country\n                                                                                FROM Cartoon\n                                                                                WHERE Country NOT IN (\n                                "}
{"question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the countries that have cartoons on TV that were written by Todd Casey?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the countries that have cartoons on TV that were written by Todd Casey?. \nSELECT  SELECT * FROM TV_series\nWHERE  WHERE (((Channel)='[Cartoon Network]'))\nAND    AND (((Content)='Cartoon')))\nORDER BY  ORDER BY (((Rating) DESC))\n\n#If we replace the content in the query with a list of content, we will get the following result:\n#Country  Language  Content\n#United States English  Cartoon\n#United States English  Animation\n#United States English  Comedy\n#United States English  Drama\n#United States English  Game\n#United States English  Reality\n#United States English  Talk_show\n#United States English  Documentary\n#United States English  Musical\n#United States English  News\n#United States English  Movie\n#United States English  Music\n#United States English  Children's\n#United States English  Sports\n#United States English  Romance\n#United States English  Horror\n#United States English  Suspense\n#United States English  Science_fiction\n#United States English  War\n#United States English  Adventure"}
{"question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nwhich countries' tv channels are not playing any cartoon written by Todd Casey?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nwhich countries' tv channels are not playing any cartoon written by Todd Casey?. \nSELECT  SELECT 1;\nSELECT Country\nFROM TV_Channel\nWHERE Channel NOT IN (\n  SELECT Channel\n  FROM Cartoon\n  WHERE Written_by = 'Todd Casey'\n)\n\n\n\n"}
{"question": "What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the countries that are not playing cartoons written by Todd Casey?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the countries that are not playing cartoons written by Todd Casey?. \nSELECT  SELECT Cartoon.Country, \n    COUNT(Cartoon.Country) as Total_Count_Cartoons,\n    SUM(CASE WHEN Cartoon.Country IN ( 'Germany' , 'France' , 'Italy' , 'Spain' , 'Portugal' , 'United_Kingdom' , 'Ireland' , 'Poland' , 'Sweden' , 'Finland' , 'Norway' , 'Denmark' ) THEN 1 ELSE 0 END) as Count_Played_Cartoons_Casey,\n    SUM(CASE WHEN Cartoon.Country IN ( 'Germany' , 'France' , 'Italy' , 'Spain' , 'Portugal' , 'United_Kingdom' , 'Ireland' , 'Poland' , 'Sweden' , 'Finland' , 'Norway' , 'Denmark' ) THEN 1 ELSE 0 END) as Count_Not_Played_Cartoons_Casey\nFROM TV_Channel,\n    Cartoon,\n    TV_series\nWHERE Cartoon.Country != 'United_States' AND\n   "}
{"question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nFind the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?. \nSELECT  SELECT tvshow.country, tvshow.series_name FROM tvshow \nWHERE (tvshow.series_name = \"South Park\" AND tvshow.country = \"US\") OR \n(tvshow.series_name = \"The Simpsons\" AND tvshow.country = \"US\") OR \n(tvshow.series_name = \"The King of Queens\" AND tvshow.country = \"US\") OR\n(tvshow.series_name = \"The Big Bang Theory\" AND tvshow.country = \"US\") OR \n(tvshow.series_name = \"Family Guy\" AND tvshow.country = \"US\") OR \n(tvshow.series_name = \"Futurama\" AND tvshow.country = \"US\") OR \n(tvshow.series_name = \"Robot Chicken\" AND tvshow.country = \"US\") OR\n(tvshow.series_name = \"American Dad!\" AND tvshow.country = \"US\") OR \n(tvshow.series_name = \"American Dad!\" AND tvshow.country = \"US\") OR \n(tvshow.series_name = \"American Dad"}
{"question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?. \nSELECT  SELECT TV_Channel.series_name, \n  Country  FROM TV_Channel  JOIN TV_series \n  ON TV_Channel.id = TV_series.channel_id \n  JOIN Cartoon  ON TV_series.id = Cartoon.tv_series_id \n  WHERE ((((Country)='US') AND ((Directed_by)='Ben Jones')) OR ((Country)='US') AND ((Written_by)='Michael Chang'))\n\n##Television DataBase: Cartoon network schedule for today\n##In this example, we are querying the cartoons that are playing today.\n#Cartoon_Network('Time', 'Day', 'Program_Name', 'Show_Type', 'Channel_ID', 'Episode')\nWhat is the channel ID and air_date of all cartoons that are playing at 7:00 AM? \nSELECT  SELECT Cartoon_Network.Time, \n  Day  FROM Cartoon_Network  JOIN TV_series \n  ON Cartoon_Network.Program_Name = TV_series.title \n  JOIN Cartoon  ON TV_series.id = Cartoon."}
{"question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the pixel aspect ratio and nation of the tv channels that do not use English.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the pixel aspect ratio and nation of the tv channels that do not use English.. \nSELECT  SELECT id, series_name, country, language, content, pixel_aspect_ratio_PAR, hight_definition_TV, pay_per_view_PPV, package_option\n    FROM tv_channel\n    WHERE language <> 'ENGLISH';\n#pixar_arr = [x for x in Pixar_arr if x not in Pixar_arr]\n"}
{"question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the pixel aspect ratio and country of origin for all TV channels that do not use English?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat is the pixel aspect ratio and country of origin for all TV channels that do not use English?. \nSELECT  SELECT channel.country AS country,\n            channel.pixel_aspect_ratio AS pixel_aspect_ratio,\n            COUNT(DISTINCT channel.country) AS nb_channels\nFROM    TV_Channel AS channel\nWHERE   language = 'FR'\nAND     NOT EXISTS(\n                SELECT 1\n                FROM TV_Series AS serie\n                WHERE serie.channel = channel.id\n                )\nGROUP BY channel.country\nORDER BY country ASC;\n\nWhat is the highest rated TV channel?\nSELECT  TV_Channel.id,\n            TV_Channel.country,\n            TV_Channel.pixel_aspect_ratio,\n            TV_Series.rating,\n            TV_Series.season,\n            TV_Series.episode\nFROM    TV_Series\nJOIN    TV_Channel\nON      TV_Channel.id = TV_Series.channel\nWHERE   TV_Channel.rating > 10\nORDER BY rating DESC;\n"}
{"question": "find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind id of the tv channels that from the countries where have more than two tv channels.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind id of the tv channels that from the countries where have more than two tv channels.. \nSELECT  SELECT  'id', 'Series Name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option' FROM TV_Channel GROUP BY Country, Language;\n\n\n#get a list of the series that we'll use to compare\n#find id of the tv series that from the countries where have more than two tv series.. \nSELECT  'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel' FROM TV_series;\n\n#find id of the cartoons that from the countries where have more than two cartoons.. \nSELECT  'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel' FROM Cartoon;\n\n#match the tv series with their names to the cartoons\nmatch_cartoons = []\nfind_id_cartoons = []\n"}
{"question": "What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the ids of all tv channels that have more than 2 TV channels?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the ids of all tv channels that have more than 2 TV channels?. \nSELECT  SELECT * FROM TV_Channel WHERE id>2\n###########################################################################\n\n##SQLite SQL\n#select the first five records from the TV_Channels table, ordered by id descending.\nSELECT  SELECT * FROM TV_Channel ORDER BY id DESC LIMIT 5\n\n\n#how many tv shows are there in the table?\nSELECT  SELECT * FROM TV_series WHERE Episode>1;\n\n\n\n#find the tv shows that have aired from 2000 to 2005. \nSELECT  SELECT * FROM TV_Series WHERE Episode>1 AND Air_Date>2000 AND Air_Date<2006\n\n\n\n#show the number of episodes in each tv show. \n#There are 2 tv shows that have 5 episodes, 2 have 8, 1 has 10, and 1 has 12.\nSELECT  SELECT * FROM TV_Series WHERE Episode>1 AND Episode<20 ORDER BY Episode;\n\n\n\n#find all cartoons that aired on channel X. \n#Note that all the cartoons that aired on channel"}
{"question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the id of tv channels that do not play any cartoon directed by Ben Jones.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the id of tv channels that do not play any cartoon directed by Ben Jones.. \nSELECT  SELECT  *\nFROM    TV_Channel,\n        TV_series\nWHERE   TV_Channel.id = TV_series.channel_id\n        AND id NOT IN\n        (\n        SELECT  SELECT  channel_id\n        FROM    TV_series\n        WHERE   TV_series.id IN\n        (\n        SELECT  SELECT  id\n        FROM    TV_series\n        WHERE   TV_series.channel_id IN\n        (\n        SELECT  SELECT  id\n        FROM    TV_Channel\n        WHERE   TV_Channel.id IN\n        (\n        SELECT  SELECT  channel_id\n        FROM    TV_series\n        WHERE   TV_series.id IN\n        (\n        SELECT  SELECT  id\n        FROM    TV_Channel\n        WHERE   TV_Channel.id IN\n        (\n        SELECT  SELECT  channel_id\n        FROM    TV_series\n        WHERE   TV_series.id IN\n        (\n        SELECT  SELECT  id\n        FROM    TV_series\n        WHERE   TV_series.id = 1234)\n        )\n        )\n        )\n        )\n        )\n       "}
{"question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the ids of the TV channels that do not have any cartoons directed by Ben Jones?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the ids of the TV channels that do not have any cartoons directed by Ben Jones?. \nSELECT  SELECT tv.id, tv.series_name\nFROM TV_Channel tv, TV_series ts\nWHERE tv.id = ts.channel_id\nAND NOT EXISTS (SELECT *\n\t\tFROM Cartoon ct\n\t\tWHERE ct.channel_id = tv.id\n\t\tAND ct.directed_by = 'Ben Jones')\nLIMIT 1;\n\n### SQLite\nTV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\nTV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\nCartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the ids of the TV channels that do not have any cartoons directed by Ben Jones?.\n"}
{"question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the package option of the tv channel that do not have any cartoon directed by Ben Jones.. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nfind the package option of the tv channel that do not have any cartoon directed by Ben Jones.. \nSELECT  SELECT tv_channel.id, tv_channel.country, tv_channel.language, tv_channel.content, tv_channel.pixel_aspect_ratio_par, tv_channel.high_definition_tv, tv_channel.pay_per_view_ppv, tv_channel.package_option FROM tv_channel \nWHERE tv_channel.id NOT IN (SELECT cartoon.package_option FROM cartoon WHERE cartoon.director = 'Ben Jones')\n\n#SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air"}
{"question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "prompt": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?. \nSELECT ", "response": "### SQLite SQL tvshow database, with their properties:\n#TV_Channel('id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option')\n#TV_series('id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel')\n#Cartoon('id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel')\nWhat are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?. \nSELECT  SELECT * FROM TV_Channel WHERE Country IN ('IT','ES','FR','UK','RU','US','GB','JP','DE','NL','AT','SE','PL','TR','CA','KR') AND Hight_definition_TV = 'NO' AND Pay_per_view_PPV = 'NO' AND Package_Option IN ('Free','Flat','Fixed','Vod') AND NOT EXISTS (SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones' AND Channel = Channel_id) ORDER BY Channel_id;\n\n#Tell me about tv channels that are not playing any cartoons directed by Ben Jones and are not playing any cartoons in Spanish, or directed by Ben Jones and are not playing any cartoons in English. \nSELECT  SELECT * FROM TV_Channel WHERE Country IN ('IT','ES','FR','UK','RU','US','GB','JP','DE','NL','AT','SE','PL','TR','CA','KR') AND Hight_definition_TV = 'NO' AND Pay_per_view_PPV = 'NO' AND Package_Option IN ('Free','Flat','Fixed','Vod') AND NOT EXISTS (SELECT"}
{"question": "How many poker players are there?", "sql": "SELECT count(*) FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many poker players are there?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many poker players are there?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nFROM    poker_player\nWHERE  1 = 1\nORDER BY People_ID\nLIMIT 1\n\nHow many people are there?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nFROM    people\nWHERE  1 = 1\nORDER BY People_ID\nLIMIT 1\n\n### SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many poker players are there?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nFROM    poker_player\nWHERE  1 = 1\nORDER BY People_ID\nLIMIT 1\n\nHow many people are there?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nFROM    people\nWHERE  1 = 1\nORDER BY People_ID\nLIMIT 1\n\n### SQL poker_player database, with"}
{"question": "Count the number of poker players.", "sql": "SELECT count(*) FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nCount the number of poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nCount the number of poker players.. \nSELECT  SELECT COUNT(ID) FROM poker_player;\n\n# Now, get the poker player with the highest earnings..\nSELECT  SELECT MAX(Earnings) FROM poker_player;\n\n# Find the most active players, based on the number of final tables made..\nSELECT  SELECT COUNT(People_ID) FROM poker_player WHERE Final_Table_Made = '1';\n\n# Find the players with the highest number of final tables made..\nSELECT  SELECT MAX(Final_Table_Made) FROM poker_player;\n\n# Find the players with the highest number of in-the-money finishes..\nSELECT  SELECT MAX(Best_Finish) FROM poker_player;\n\n# Find the players with the highest money rank..\nSELECT  SELECT MAX(Money_Rank) FROM poker_player;\n\n# Find the players with the highest earnings..\nSELECT  SELECT MAX(Earnings) FROM poker_player;\n\n# Now, add the People_ID to the poker player table.\nINSERT INTO poker_player VALUES (1, 'P-1', '1', '1', '"}
{"question": "List the earnings of poker players in descending order.", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the earnings of poker players in descending order.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the earnings of poker players in descending order.. \nSELECT  SELECT Poker_Player_ID FROM people WHERE Poker_Player_ID = 1 ORDER BY Earnings DESC\n\nSQLite select poker player with the highest earnings\nSELECT  SELECT Poker_Player_ID FROM people WHERE Poker_Player_ID = 1 ORDER BY Earnings DESC\n\nSQLite select the poker player with the highest earnings\nSELECT  SELECT Poker_Player_ID FROM people WHERE Poker_Player_ID = 1 ORDER BY Earnings DESC\n\nSQLite select the poker player with the highest earnings\nSELECT  SELECT Poker_Player_ID FROM people WHERE Poker_Player_ID = 1 ORDER BY Earnings DESC\n\nSQLite select the poker player with the highest earnings\nSELECT  SELECT Poker_Player_ID FROM people WHERE Poker_Player_ID = 1 ORDER BY Earnings DESC\n\nSQLite select the poker player with the highest earnings\nSELECT  SELECT Poker_Player_ID FROM people WHERE Poker_Player_ID = 1 ORDER BY Earnings DESC\n\nSQLite select the poker player with the highest earnings\nSELECT  SELECT Poker_Player_"}
{"question": "What are the earnings of poker players, ordered descending by value?", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the earnings of poker players, ordered descending by value?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the earnings of poker players, ordered descending by value?. \nSELECT  SELECT people.People_ID, people.Nationality, people.Name, people.Birth_Date, SUM(poker_player.Earnings) AS Earnings\nFROM    people\n        LEFT JOIN poker_player\n            ON people.People_ID = poker_player.People_ID\nGROUP BY people.People_ID, people.Nationality, people.Name, people.Birth_Date\nORDER BY Earnings DESC;"}
{"question": "List the final tables made and the best finishes of poker players.", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the final tables made and the best finishes of poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the final tables made and the best finishes of poker players.. \nSELECT  SELECT  SELECT  SELECT\n\t\t\t   SELECT  SELECT  SELECT  SELECT\n\t\t\t   COUNT(People_ID) AS \"People_ID\",\n\t\t\t   COUNT(People_ID) AS \"Final_Table_Made\",\n\t\t\t   COUNT(People_ID) AS \"Best_Finish\",\n\t\t\t   COUNT(People_ID) AS \"Money_Rank\",\n\t\t\t   SUM(Earnings) AS \"Earnings\"\n\t\t\tFROM poker_player\n\t\t\tGROUP BY People_ID\n\t\t\tORDER BY SUM(Earnings) DESC\n\n\t\t\t\nList the final tables made and the best finishes of people.. \nSELECT  SELECT  SELECT  SELECT\n\t\t\t   SELECT  SELECT  SELECT  SELECT\n\t\t\t   COUNT(People_ID) AS \"People_ID\",\n\t\t\t   COUNT(People_ID) AS \"Final_Table_Made\",\n\t\t\t   COUNT(People_ID) AS \"Best_Finish\",\n\t\t\t   COUNT(People_ID) AS \""}
{"question": "What are the final tables made and best finishes for all poker players?", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the final tables made and best finishes for all poker players?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the final tables made and best finishes for all poker players?. \nSELECT  SELECT  poker_player.People_ID,\n                poker_player.Final_Table_Made,\n                poker_player.Best_Finish,\n                money_rank.Money_Rank,\n                poker_player.Earnings\nFROM    poker_player\nLEFT JOIN    money_rank ON poker_player.Money_Rank = money_rank.Money_Rank\nWHERE   poker_player.People_ID = people.People_ID;\n\nWhat is the current balance of each poker player?. \nSELECT  poker_player.People_ID,\n                money_rank.Balance\nFROM    poker_player\nLEFT JOIN    money_rank ON poker_player.People_ID = money_rank.People_ID\nWHERE   poker_player.People_ID = people.People_ID;\n\nCreate a table to keep track of the number of people who have visited your website. \nCREATE TABLE Pages_Visited (\n    Visitor_ID INTEGER NOT NULL,\n    Pages_Visited_ID INTEGER NOT"}
{"question": "What is the average earnings of poker players?", "sql": "SELECT avg(Earnings) FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the average earnings of poker players?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the average earnings of poker players?. \n}
{"question": "Return the average earnings across all poker players.", "sql": "SELECT avg(Earnings) FROM poker_player", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the average earnings across all poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the average earnings across all poker players.. \nSELECT  SELECT AVG (Earnings) FROM Poker_Player WHERE People_ID = people ('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\n\"\"\"\n\n### Use the ____ function to modify the query for average earnings in a poker_player database, with their properties:\n### Poker_Player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n### people (People_ID, Nationality, Name, Birth_Date, Height)\n#average_earnings_in_the_database = ___(SELECT AVG (Earnings) FROM Poker_Player WHERE People_ID = people ('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'))\n\n### Use the ____ function to modify the query for average earnings in a poker_player database, with their properties:\n### Poker_Player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_R"}
{"question": "What is the money rank of the poker player with the highest earnings?", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the money rank of the poker player with the highest earnings?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the money rank of the poker player with the highest earnings?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM\npoker_player INNER JOIN people ON poker_player.people_id = people.people_id\nWHERE   WHERE   WHERE   WHERE   WHERE\nPeople_ID = (\n    SELECT  SELECT  SELECT  SELECT  SELECT\n    MAX(Earnings) AS Earnings FROM\n    poker_player WHERE\n    Final_Table_Made = True\n)\nAND    AND    AND    AND\nPeople_ID = (\n    SELECT  SELECT  SELECT  SELECT  SELECT\n    MAX(Earnings) AS Earnings FROM\n    people WHERE\n    Height > 180\n)"}
{"question": "Return the money rank of the player with the greatest earnings.", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the money rank of the player with the greatest earnings.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the money rank of the player with the greatest earnings.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    Best_Finish,\n    Money_Rank,\n    FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\n    p.People_ID,\n    p.Nationality,\n    p.Name,\n    p.Birth_Date,\n    p.Height,\n    p.People_ID,\n    f.Poker_Player_ID,\n    f.Final_Table_Made,\n    f.Best_Finish,\n    f.Money_Rank,\n    f.Earnings\n    FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM  FROM\n    poker_player AS f,\n    people AS p\n    WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE  WHERE\n    f.People_ID = p.People_ID\n    GROUP BY  GROUP BY  GROUP BY  GROUP BY  GROUP BY  GROUP BY  GROUP BY  GROUP BY  GROUP BY\n    Best_Finish,\n    Money_Rank\n"}
{"question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the maximum number of final tables made among poker players with earnings less than 200000?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the maximum number of final tables made among poker players with earnings less than 200000?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  poker_player.Poker_Player_ID,\n  poker_player.People_ID,\n  poker_player.Final_Table_Made,\n  poker_player.Best_Finish,\n  poker_player.Money_Rank,\n  poker_player.Earnings\nFROM poker_player\nWHERE poker_player.Earnings < 200000;\n\"\"\"\n\nclass Solution(object):\n    def __init__(self):\n        self.db = Database('poker_player')\n    def max_money(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        player_id_pairs = self.get_player_id_pairs(target)\n        player_id_pairs.sort(key=lambda x: x[0], reverse=True)\n        return player_id_pairs[-1][1]\n        \n    def get_player_id_pairs(self, target):\n        \"\"\""}
{"question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the maximum final tables made across all poker players who have earnings below 200000.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the maximum final tables made across all poker players who have earnings below 200000.. \n}
{"question": "What are the names of poker players?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players?. \n}
{"question": "Return the names of all the poker players.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the names of all the poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the names of all the poker players.. \nSELECT  SELECT  SELECT  SELECT  SELECT\n         (SELECT  SELECT  SELECT  SELECT\n            poker_player.People_ID\n          FROM    poker_player\n                  JOIN people\n                    ON poker_player.People_ID = people.People_ID\n             WHERE  poker_player.People_ID = 1)\n\n  AS \"People_ID\",\n       (SELECT  SELECT  SELECT  SELECT\n            people.Name\n          FROM    people\n             WHERE  people.People_ID = 1)\n\n  AS \"Name\",\n       (SELECT  SELECT  SELECT  SELECT\n            people.Nationality\n          FROM    people\n             WHERE  people.People_ID = 1)\n\n  AS \"Nationality\",\n       (SELECT  SELECT  SELECT  SELECT\n            people.Birth_Date\n          FROM    people\n             WHERE  people.People_ID = 1)\n\n  AS \"Birth_Date\",\n       (SELECT  SELECT  SELECT  SELECT\n            people.Height\n          FROM    people\n             WHERE  people.People_ID = 1)\n\n  AS"}
{"question": "What are the names of poker players whose earnings is higher than 300000?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players whose earnings is higher than 300000?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players whose earnings is higher than 300000?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM\npeople people people people people\nWHERE   WHERE   WHERE   WHERE   WHERE\nPeople_ID >= 465;\n"}
{"question": "Give the names of poker players who have earnings above 300000.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive the names of poker players who have earnings above 300000.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive the names of poker players who have earnings above 300000.. \nSELECT  SELECT_LIST\nFROM  PEOPLE, POKER_PLAYER \nWHERE  POKER_PLAYER.People_ID = PEOPLE.People_ID\nAND  POKER_PLAYER.Best_Finish >= 300000\nORDER  BY  POKER_PLAYER.Best_Finish DESC\nLIMIT 10\n"}
{"question": "List the names of poker players ordered by the final tables made in ascending order.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names of poker players ordered by the final tables made in ascending order.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names of poker players ordered by the final tables made in ascending order.. \nSELECT  SELECT people.name,\n         COUNT(people.id) AS total_final_table,\n         poker_player.final_table_made\n  FROM   people\n         JOIN poker_player\n               ON people.id = poker_player.people_id\n  GROUP BY people.name, poker_player.final_table_made\n  ORDER  BY people.name, poker_player.final_table_made\n\"\"\"\n\nimport sqlite3 as sql\n\n# Create the SQLITE database file.\nwith sql.connect('sqlite3.db') as connection:\n    connection.execute('''\n        CREATE TABLE IF NOT EXISTS poker_player (\n            poker_player_id INTEGER PRIMARY KEY,\n            people_id INTEGER,\n            final_table_made INTEGER,\n            best_finish INTEGER,\n            money_rank INTEGER,\n            earnings INTEGER\n        )\n    ''')\n    connection.execute('''\n        CREATE TABLE IF NOT EXISTS people (\n            people_id INTEGER PRIMARY KEY,\n            nationality VARCHAR,\n            name VARCHAR,\n            birth"}
{"question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players, ordered ascending by the number of final tables they have made?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players, ordered ascending by the number of final tables they have made?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\np.People_ID,\np.Name,\ns.Nationality,\ns.Name,\ns.Nationality\nFROM poker_player p\nJOIN people s\nON p.People_ID = s.People_ID\nORDER BY p.Final_Table_Made DESC\nLIMIT 3;\n\n\nWhat are the names of poker players, ordered descending by their best finish?.\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\np.People_ID,\np.Name,\ns.Nationality,\ns.Name,\ns.Nationality\nFROM poker_player p\nJOIN people s\nON p.People_ID = s.People_ID\nORDER BY p.Best_Finish DESC\nLIMIT 3;\n\n\nWhat are the names of poker players, ordered by the number of final tables they have made, then by their best finish?.\nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\np.People_ID,\np.Name,\ns.Nationality,\ns.Name"}
{"question": "What is the birth date of the poker player with the lowest earnings?", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the birth date of the poker player with the lowest earnings?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the birth date of the poker player with the lowest earnings?. \nSELECT  SELECT 'People_ID' AS column_name,\n    'People_ID' AS table_name,\n    CAST('2002-01-01 00:00:00' AS date) AS column_value\nFROM poker_player\nWHERE earnings < (SELECT MIN(earnings) FROM poker_player);\n\n#What is the birth date of the person who did not make it to the final table?.\nSELECT  SELECT 'People_ID' AS column_name,\n    'People_ID' AS table_name,\n    CAST('2001-01-01 00:00:00' AS date) AS column_value\nFROM people\nWHERE not exists (SELECT * FROM poker_player WHERE people_id = people_id);\n\n#Find the name of the poker player who did not make it to the final table but has the most money earned.\nSELECT  SELECT 'People_ID' AS column_name,\n    'People_ID' AS table_name,\n    CAST('2002-01-01"}
{"question": "Return the birth date of the poker player with the lowest earnings.", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the birth date of the poker player with the lowest earnings.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the birth date of the poker player with the lowest earnings.. \nSELECT  SELECT MAX(Earnings) FROM poker_player\nWHERE  WHERE People_ID = people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')"}
{"question": "What is the money rank of the tallest poker player?", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the money rank of the tallest poker player?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the money rank of the tallest poker player?. \nSELECT  SELECT  FROM  FROM  FROM  FROM \npoker_player  people  people  people  people \nWHERE  WHERE  WHERE  WHERE  WHERE \npoker_player.People_ID = people.People_ID \nAND  AND  AND  AND  AND \npoker_player.Best_Finish = 1 AND \npoker_player.Final_Table_Made = 1 AND \npoker_player.Earnings >= 10000000 AND \npoker_player.Height >= 180; \n"}
{"question": "Return the money rank of the poker player with the greatest height.", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the money rank of the poker player with the greatest height.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the money rank of the poker player with the greatest height.. \nSELECT  SELECT PLAYER_ID, PLAYER_NAME, PLAYER_HEIGHT, PLAYER_MONEY_RANK, EARNS FROM PLAYER WHERE PLAYER_HEIGHT > ALL (SELECT PLAYER_HEIGHT FROM PLAYER)\n\n"}
{"question": "What is the average earnings of poker players with height higher than 200?", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the average earnings of poker players with height higher than 200?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the average earnings of poker players with height higher than 200?. \nSELECT  SELECT  SELECT  SELECT  SELECT \np.Earnings\nFROM  poker_player p\nJOIN  people p ON p.People_ID = p.People_ID\nWHERE  p.Height > 200\nGROUP  BY  Earnings\nHAVING  COUNT(p.Height > 200) > 0;\n\n"}
{"question": "Give average earnings of poker players who are taller than 200.", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive average earnings of poker players who are taller than 200.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive average earnings of poker players who are taller than 200.. \nSELECT  SELECT FLOOR(AVG(earnings))\nFROM    (SELECT  SELECT e.Earnings FROM poker_player AS e, people AS p WHERE \np.People_ID=e.People_ID AND p.Nationality='Japan') WHERE p.Height > 200;\n\n"}
{"question": "What are the names of poker players in descending order of earnings?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players in descending order of earnings?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of poker players in descending order of earnings?. \n}
{"question": "Return the names of poker players sorted by their earnings descending.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the names of poker players sorted by their earnings descending.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the names of poker players sorted by their earnings descending.. \nSELECT  SELECT  Select the columns you need.\nFROM     FROM     The poker_player table.\nWHERE    WHERE    Use the WHERE clause to filter the result.\nORDER BY ORDER BY Sort the result.\n\n\n\"\"\"\nimport sqlite3\nimport numpy as np\nimport pandas as pd\nimport os\n\n#Database\n\nsqlite_file = 'pokerstars.db'\n\n#Open database\ndb = sqlite3.connect(sqlite_file)\n\n#Add player table\nsql = \"\"\"\nCREATE TABLE poker_player (\nPoker_Player_ID INTEGER PRIMARY KEY AUTOINCREMENT,\nPeople_ID INTEGER NOT NULL,\nFinal_Table_Made INTEGER NOT NULL,\nBest_Finish INTEGER NOT NULL,\nMoney_Rank INTEGER NOT NULL,\nEarnings REAL NOT NULL,\n);\n\"\"\"\ndb.execute(sql)\n\n#Add people table\nsql = \"\"\"\nCREATE TABLE people (\nPeople_ID INTEGER PRIMARY KEY AUTOINCREMENT,\nNationality VARCHAR(10),\nName VARCHAR(100),\nBirth_Date DATE,\n"}
{"question": "What are different nationalities of people and the corresponding number of people from each nation?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are different nationalities of people and the corresponding number of people from each nation?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are different nationalities of people and the corresponding number of people from each nation?. \nSELECT  SELECT COUNT(*) AS count\nFROM    people  WHERE  Nationality = 'usa'\n\nWhat is the average height for all people in the database?\nSELECT  SELECT AVG(Height) AS avg\nFROM    people\n\nWhat is the minimum number of votes that a movie needs to be ranked?\nSELECT  SELECT MIN(Votes) AS min\nFROM    movies  WHERE  Rank < 10\n\nHow much money did the top 5 grossing movies make?\nSELECT  SELECT SUM(Gross) AS sum\nFROM    movies  WHERE  Rank <= 5\n\n## How can you improve the above queries?\n#dbfetch(poker_player, 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n\n#dbfetch(people, 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\n\n#dbfetch(movies, 'Movies_ID', 'Movie_Title', 'Gross')\n"}
{"question": "How many people are there of each nationality?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many people are there of each nationality?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many people are there of each nationality?. \nSELECT  SELECT COUNT(nationality)\nFROM    poker_player, people\nWHERE   poker_player.People_ID = people.People_ID\nGROUP   BY nationality\nORDER   BY COUNT(nationality) DESC\nLIMIT   1\n#How many people are there of each nationality?\n#SELECT COUNT(nationality)\n#FROM poker_player, people\n#WHERE poker_player.People_ID = people.People_ID\n#GROUP BY nationality\n#ORDER BY COUNT(nationality) DESC\n#LIMIT 1\n\n#How many poker players are there from Germany?\n#SELECT COUNT(nationality)\n#FROM poker_player, people\n#WHERE poker_player.People_ID = people.People_ID\n#AND nationality = 'Germany'\n#GROUP BY nationality\n#ORDER BY COUNT(nationality) DESC\n#LIMIT 1\n\n#How many poker players are there from Italy?\n#SELECT COUNT(nationality)\n#FROM poker_player, people\n#WHERE poker_player.People_ID ="}
{"question": "What is the most common nationality of people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the most common nationality of people?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat is the most common nationality of people?. \nSELECT  SELECT People_ID, COUNT(*) AS count_people_ID\nFROM people\nGROUP BY People_ID;\n\n# What is the name of the person who has played the most poker in a final table?.\nSELECT people.Name\nFROM poker_player, people\nWHERE poker_player.People_ID = people.People_ID\nGROUP BY people.Name\nORDER BY count_people_ID DESC\nLIMIT 1;\n\n# What is the person's rank by number of final tables played?.\nSELECT people.Name\nFROM poker_player, people\nWHERE poker_player.People_ID = people.People_ID\nGROUP BY people.Name\nORDER BY count_people_ID DESC\nLIMIT 2;\n\n# What is the person's rank by earnings?.\nSELECT people.Name\nFROM poker_player, people\nWHERE poker_player.People_ID = people.People_ID\nGROUP BY people.Name\nORDER BY earnings DESC\nLIMIT 2;\n\n\n"}
{"question": "Give the nationality that is most common across all people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive the nationality that is most common across all people.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nGive the nationality that is most common across all people.. \nSELECT  SELECT nationality FROM people GROUP BY nationality\n  \n# Additional questions that will help you out.\n# Calculate the overall rank of the poker players in the database, based on their best finishes in tournaments.\n# Calculate the total amount of money the people in the database have won in all tournaments.\n# Calculate the average amount of money that the people in the database have won in all tournaments.\n# Calculate the amount of money the people in the database have won in all tournaments, and sort it from lowest to highest.\n# Give the rank of each person in the database, based on their total earnings in all tournaments.\n# Give the average height of the people in the database.\n# Give the number of people in the database who have a height greater than 5'10.\n# Give the number of people in the database who have a height less than 5'10.\n# Give the number of people in the database who have a height between 5'10 and 6'0.\n# Give the number of people in the database who have a height between 6'0 and 6'5.\n# Give the number of people"}
{"question": "What are the nationalities that are shared by at least two people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the nationalities that are shared by at least two people?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the nationalities that are shared by at least two people?. \nSELECT  SELECT nationality\nFROM    people,\n        poker_player\nWHERE   poker_player.People_ID = people.People_ID\nAND     poker_player.Final_Table_Made IS TRUE;\n# SELECT people.nationality\n# FROM people, poker_player\n# WHERE poker_player.People_ID = people.People_ID\n# AND poker_player.Final_Table_Made IS TRUE\n"}
{"question": "Return the nationalities for which there are two or more people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the nationalities for which there are two or more people.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nReturn the nationalities for which there are two or more people.. \nSELECT  SELECT people.nationality FROM people\nWHERE (SELECT COUNT(people.people_id) FROM poker_player WHERE people.people_id=poker_player.people_id) > 1;\n"}
{"question": "List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names and birth dates of people in ascending alphabetical order of name.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names and birth dates of people in ascending alphabetical order of name.. \nSELECT  SELECT  name, birth_date FROM people ORDER BY name ASC;\n"}
{"question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names and birth dates of people, ordered by their names in alphabetical order?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names and birth dates of people, ordered by their names in alphabetical order?. \nSELECT  SELECT  people.name, people.birth_date, people.height FROM people ORDER BY name\n\nWhat are the names and birth dates of people, ordered by their birth dates in ascending order?. \nSELECT  SELECT  people.name, people.birth_date, people.height FROM people ORDER BY birth_date\n\nWhat is the name and birth date of the person who has the highest birth_date?. \nSELECT  SELECT  people.name, people.birth_date, people.height FROM people ORDER BY birth_date DESC LIMIT 1\n\nWhat is the number of poker players who have a given birth date?. \nSELECT  SELECT  COUNT(*) FROM people WHERE birth_date = '1989-04-14'\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nShow names of people whose nationality is not \"Russia\".. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nShow names of people whose nationality is not \"Russia\".. \nSELECT  SELECT DISTINCT people.name\nFROM    poker_player\nINNER JOIN people\nON people.people_id = poker_player.people_id\nWHERE  people.nationality != 'Russia'\nORDER BY people.name ASC\n\n\nShow how many people in the database:\nSELECT  COUNT(*)\nFROM    poker_player\nJOIN    people\nON     people.people_id = poker_player.people_id\n\nShow the number of people who are in the database and made the final table, ordered by their finish:\nSELECT  COUNT(*)\nFROM    poker_player\nJOIN    people\nON     people.people_id = poker_player.people_id\nWHERE  poker_player.final_table_made\nORDER BY poker_player.best_finish\n\nShow the number of people who are in the database and made the final table, ordered by their earnings:\nSELECT  COUNT(*)\nFROM    poker_player\nJOIN    people\nON     people.people_id = poker_player.people_id\nWHERE  poker_player.earnings\nORDER BY poker_player"}
{"question": "What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of people who are not from Russia?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of people who are not from Russia?. \nSELECT  SELECT  DISTINCT(name) FROM people WHERE nationality != 'Russian';\nWhat is the total amount of money won by all the players from the Russian Federation at the final table?. \nSELECT sum(earnings) FROM people WHERE nationality = 'Russian';\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\n#What is the number of players who were born in the 80s?. \nSELECT count(people.People_ID) FROM people WHERE birth_date >= '1980-01-01';\n#What is the number of players who were born in the 90s?. \nSELECT count(people.People_ID) FROM people WHERE birth_date >= '1990-01-01';\n#What is the number of players who were born in the 70s?. \nSELECT count(people.People_ID)"}
{"question": "List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names of people that are not poker players.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nList the names of people that are not poker players.. \nSELECT  SELECT DISTINCT people.name FROM people WHERE  people.people_id != poker_player.people_id\n# Show the people with their best finishes in final tables..\nSELECT  SELECT people.name, MAX(poker_player.final_table_made) AS final_table_made FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id GROUP BY people.people_id\n# Show all the players in the top 10..\nSELECT  SELECT people.name, poker_player.best_finish, poker_player.final_table_made, poker_player.money_rank FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id GROUP BY people.people_id ORDER BY poker_player.final_table_made DESC\n"}
{"question": "What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of people who do not play poker?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nWhat are the names of people who do not play poker?. \nSELECT  SELECT P.People_ID, P.Name, P.Nationality, P.Birth_Date, P.Height\nFROM    people AS P \nWHERE   NOT EXISTS (SELECT * FROM poker_player \n                    WHERE poker_player.People_ID = P.People_ID);\n## Order of execution for the two queries:\n## 1. SQL Server: 1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38.39.40.41.42.43.44.45.46.47.48.49.50.51.52.53.54.55.56.57.58.59"}
{"question": "How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many distinct nationalities are there?. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nHow many distinct nationalities are there?. \nSELECT  SELECT DISTINCT p.Nationality, p.People_ID FROM poker_player p\n\nHow many poker players are American?. \nSELECT  SELECT p.Nationality, COUNT(p.People_ID) FROM poker_player p WHERE p.Nationality = 'American' GROUP BY p.Nationality\n\nHow many players with a birthdate in 1985 made it to the final table?. \nSELECT  SELECT COUNT(p.People_ID) FROM poker_player p WHERE p.Birth_Date = 1985 GROUP BY p.Birth_Date\n\nHow many players have made a final table?. \nSELECT  SELECT COUNT(p.People_ID) FROM poker_player p GROUP BY p.People_ID\n\nHow many players have made a final table, have an American nationality, and were born in 1985?. \nSELECT  SELECT COUNT(p.People_ID) FROM poker_player p WHERE p.Nationality = 'American' AND p.Birth_Date = 1985 GROUP BY p.People_ID\n\nHow many players made a"}
{"question": "Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people", "prompt": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nCount the number of different nationalities.. \nSELECT ", "response": "### SQLite SQL poker_player database, with their properties:\n#poker_player('Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings')\n#people('People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height')\nCount the number of different nationalities.. \nSELECT  SELECT count(DISTINCT(nationality)) FROM people\n\n### SQL GROUP BY, count and minimum functions\nSELECT  SELECT count(DISTINCT(nationality)) AS nationalities_count FROM people\n\n### SQL GROUP BY, count and min functions\nSELECT  SELECT min(height) AS min_height FROM people\n\n### SQL GROUP BY, count and max functions\nSELECT  SELECT max(height) AS max_height FROM people\n\n### SQL GROUP BY, count and avg functions\nSELECT  SELECT avg(height) AS avg_height FROM people\n\n### SQL GROUP BY, count and sum functions\nSELECT  SELECT sum(money_earned) AS sum_money_earned FROM poker_players\n\n### SQL GROUP BY, count and sum functions\nSELECT  SELECT sum(money_earned) AS sum_money_earned FROM poker_players WHERE final_table_made = TRUE\n\n### SQL GROUP BY, count and sum functions\nSELECT  SELECT sum(money_earned) AS sum_money_earned FROM poker_players WHERE final_table_made = FALSE"}
{"question": "How many states are there?", "sql": "SELECT count(*) FROM area_code_state", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nHow many states are there?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nHow many states are there?. \nSELECT  SELECT  COUNT(state),  COUNT(state) FROM  CONTESTANTS;\n"}
{"question": "List the contestant numbers and names, ordered by contestant name descending.", "sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the contestant numbers and names, ordered by contestant name descending.. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the contestant numbers and names, ordered by contestant name descending.. \nSELECT  SELECT  SELECT  SELECT  SELECT\n    contestant_name,\n    contestant_number,\n    COUNT(vote_id) AS VOTES,\n    vote_id\nFROM  FROM  FROM  FROM  FROM\n    VOTES, CONTESTANTS\nWHERE  WHERE  WHERE  WHERE\n    CONTESTANTS.contestant_number = VOTES.contestant_number\nGROUP BY  GROUP BY  GROUP BY  GROUP BY\n    contestant_name,\n    contestant_number\nORDER BY  ORDER BY  ORDER BY  ORDER BY\n    contestant_name DESC;\n\"\"\"\n\nimport sqlite3\n\n\ndef area_code_state(area_code, state):\n    with sqlite3.connect('sqlite-voter_1.db') as conn:\n        c = conn.cursor()\n        c.execute('SELECT * FROM AREA_CODE_STATE WHERE AREA_CODE = ? AND STATE = ?', (area_code, state))\n        state = c.fetchone()\n        area_code_state = [area_code, state]\n    return area_code_state\n\n"}
{"question": "List the vote ids, phone numbers and states of all votes.", "sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the vote ids, phone numbers and states of all votes.. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the vote ids, phone numbers and states of all votes.. \nSELECT  SELECT vote_id, phone_number, state\nFROM voter_1\nWHERE contestant_number = 40044;\n\"\"\"\nimport sqlite3\nfrom datetime import date, datetime\nimport sys\n\ndef make_db_connection():\n    return sqlite3.connect('voter_1.db')\n\ndef create_table(db):\n    db.execute('CREATE TABLE IF NOT EXISTS voter_1 (contestant_number INTEGER PRIMARY KEY, contestant_name TEXT, phone_number INTEGER)')\n    db.execute('CREATE TABLE IF NOT EXISTS voter_1_history (vote_id INTEGER PRIMARY KEY, phone_number INTEGER, state INTEGER, contestant_number INTEGER, created TEXT)')\n\ndef drop_table(db):\n    db.execute('DROP TABLE IF EXISTS voter_1')\n    db.execute('DROP TABLE IF EXISTS voter_1_history')\n\ndef test_1():\n    db = make_db_connection()\n    create_table(db)\n    db.execute('INSERT INTO voter_1 (contest"}
{"question": "What are the maximum and minimum values of area codes?", "sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the maximum and minimum values of area codes?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the maximum and minimum values of area codes?. \nSELECT  SELECT  max(length(AREA_CODE_STATE)) FROM AREA_CODE_STATE\nSELECT  SELECT  min(length(AREA_CODE_STATE)) FROM AREA_CODE_STATE\n\nWhat is the minimum value of a phone number?\nSELECT  SELECT  min(length(phone_number)) FROM VOTES\n\nWhat is the maximum value of a phone number?\nSELECT  SELECT  max(length(phone_number)) FROM VOTES\n\nWhat is the minimum value of the area code?\nSELECT  SELECT  min(length(AREA_CODE_STATE)) FROM AREA_CODE_STATE\n\nWhat is the maximum value of the area code?\nSELECT  SELECT  max(length(AREA_CODE_STATE)) FROM AREA_CODE_STATE\n\nWhat is the minimum value of the state?\nSELECT  SELECT  min(length(AREA_CODE_STATE)) FROM AREA_CODE_STATE\n\nWhat is the maximum value of the state?\nSELECT  SELECT  max(length(AREA_CODE_STATE)) FROM AREA_CODE_STATE\n\n### SELECT V"}
{"question": "What is last date created of votes from the state 'CA'?", "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat is last date created of votes from the state 'CA'?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat is last date created of votes from the state 'CA'?. \n}
{"question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the names of the contestants whose names are not 'Jessie Alloway'. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the names of the contestants whose names are not 'Jessie Alloway'. \nSELECT  SELECT contestant_name\nFROM    voters\nWHERE   contestant_name <> 'Jessie Alloway'\nORDER   ORDER BY contestant_name\n"}
{"question": "What are the distinct states and create time of all votes?", "sql": "SELECT DISTINCT state ,  created FROM votes", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the distinct states and create time of all votes?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the distinct states and create time of all votes?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n(SELECT area_code) AS area_code,\n(SELECT state) AS state,\n(SELECT created) AS created\nFROM VOTES\nGROUP BY area_code, state, created;\n'''\n\n\n###################\n\n# AREA_CODE_STATE('area_code', 'state')\n\n\ndef AREA_CODE_STATE(area_code, state):\n    \"\"\"Creates an AREA_CODE_STATE-tuple from the given arguments.\n    The area_code should be a string and the state a string too.\n\n    >>> AREA_CODE_STATE('area_code', 'state')\n    ('area_code', 'state')\n    >>> AREA_CODE_STATE('area_code1', 'state1')\n    ('area_code1', 'state1')\n    >>> AREA_CODE_STATE('area_code2', 'state2')\n    ('area_code2', 'state2')\n    >>> AREA_CODE_STATE('area_code3"}
{"question": "What are the contestant numbers and names of the contestants who had at least two votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the contestant numbers and names of the contestants who had at least two votes?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the contestant numbers and names of the contestants who had at least two votes?. \nSELECT  SELECT contestant_number AS contestant_number, contestant_name AS contestant_name, COUNT(vote_id) AS votes\n        FROM votes\n        WHERE COUNT(vote_id) >= 2\n        GROUP BY contestant_number, contestant_name\n        ORDER BY votes DESC;\n\n#What are the phone numbers of the contestants who had at least two votes?. \nSELECT  SELECT phone_number AS phone_number, COUNT(vote_id) AS votes\n        FROM votes\n        WHERE COUNT(vote_id) >= 2\n        GROUP BY phone_number\n        ORDER BY votes DESC;\n\n#What are the states of the voters who voted for at least one contestant?. \nSELECT  SELECT state AS state, COUNT(vote_id) AS votes\n        FROM votes\n        WHERE COUNT(vote_id) >= 1\n        GROUP BY state\n        ORDER BY votes DESC;\n\n#What is the total number of votes that were cast?. \nSELECT  SELECT COUNT(vote_id) AS votes\n        FROM votes\n        WHERE COUNT(vote_id) >= 1\n        GROUP BY area_code, state;\n\n#Wh"}
{"question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nOf all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nOf all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?. \nSELECT  SELECT contestant_name FROM contestants\nWHERE contestant_number < (SELECT min(contestant_number) FROM contestants);\n#sorting by min value of contestant_number\n\nOf all the contestants who got voted, what is the contestant number and name of the contestant who got most votes?. \nSELECT  SELECT contestant_name FROM contestants\nWHERE contestant_number > (SELECT max(contestant_number) FROM contestants);\n#sorting by max value of contestant_number\n\nOf all the contestants who got voted, what is the contestant number and name of the contestant who got exactly 50% of the votes?. \nSELECT  SELECT contestant_name FROM contestants\nWHERE contestant_number = (SELECT count(contestant_number) FROM votes\nWHERE votes.created > (SELECT max(created) FROM votes)\nAND votes.created < (SELECT min(created) FROM votes));\n#sorting by count of votes\n\nOf all the contestants who got voted, what is the contestant number and name of the contestant who got the most votes from the state of California?. \nSELECT  SELECT contest"}
{"question": "What are the number of votes from state 'NY' or 'CA'?", "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the number of votes from state 'NY' or 'CA'?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the number of votes from state 'NY' or 'CA'?. \nSELECT  SELECT area_code, state, COUNT(vote_id) FROM votes WHERE state IN ('NY','CA') GROUP BY area_code, state\n#What is the # of votes from 867-5309?\nSELECT  SELECT area_code, COUNT(vote_id) FROM votes WHERE phone_number = '867-5309'\n#What is the # of votes from each contestant?\nSELECT  SELECT contestant_number, COUNT(vote_id) FROM votes GROUP BY contestant_number\n#What is the # of votes from each state?\nSELECT  SELECT state, COUNT(vote_id) FROM votes GROUP BY state\n#What is the # of votes from each contestant in each state?\nSELECT  SELECT contestant_number, state, COUNT(vote_id) FROM votes GROUP BY contestant_number, state\n#What are the top 5 contestants by total votes in each state?\nSELECT  SELECT state, area_code, contestant_number, COUNT(vote_id) FROM votes GROUP BY state, area_code, contestant_number ORDER BY 4 DESC\n#What are the top 5 contestants by"}
{"question": "How many contestants did not get voted?", "sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nHow many contestants did not get voted?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nHow many contestants did not get voted?. \nSELECT  SELECT count(*) FROM VOTES WHERE VOTE_ID NOT IN (SELECT vote_id FROM VOTES WHERE CONTESTANT_NUMBER IN (SELECT contestant_number FROM CONTESTANTS WHERE STATE = 'Bihar') AND CREATED = (SELECT max(created) FROM VOTES WHERE CONTESTANT_NUMBER IN (SELECT contestant_number FROM CONTESTANTS WHERE STATE = 'Bihar') AND CREATED = (SELECT max(created) FROM VOTES WHERE CONTESTANT_NUMBER IN (SELECT contestant_number FROM CONTESTANTS WHERE STATE = 'Bihar') AND CREATED = (SELECT max(created) FROM VOTES WHERE CONTESTANT_NUMBER IN (SELECT contestant_number FROM CONTESTANTS WHERE STATE = 'Bihar') AND CREATED = (SELECT max(created) FROM VOTES WHERE CONTESTANT_NUMBER IN (SELECT contestant_number FROM CONTESTANTS WHERE STATE = 'Bihar')))) AND CREATED = (SELECT max(created) FROM VOTES WHERE CONTESTANT_NUMBER IN (SELECT contestant_number FROM CONTESTANTS WHERE STATE = 'Bihar')"}
{"question": "What is the area code in which the most voters voted?", "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat is the area code in which the most voters voted?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat is the area code in which the most voters voted?. \nSELECT  SELECT 'area_code' as 'area_code',\n            (SELECT COUNT(vote_id) FROM votes WHERE state=1)\n            AS 'num_votes'\n        FROM area_code\n        WHERE area_code = '206';\nWhat is the contestant number for the contestant who received the most votes?. \nSELECT  SELECT 'contestant_number' as 'contestant_number',\n            (SELECT contestant_number\n            FROM contestants\n            WHERE contestant_number = (SELECT contestant_number\n            FROM contestants\n            WHERE contestant_number =\n            (SELECT contestant_number\n            FROM votes\n            WHERE state = 1\n            GROUP BY contestant_number\n            ORDER BY votes DESC\n            LIMIT 1)))\n            AS 'most_votes'\n        FROM area_code\n        WHERE area_code = '206';\nHow many votes did the contestant receiving the most votes get?. \nSELECT  SELECT 'num_votes' AS 'num_votes',\n            (SELECT COUNT(vote_id)\n            FROM votes\n            WHERE state=1 AND contestant_number ="}
{"question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nWhat are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?. \nSELECT  SELECT  state, phone_number, created  FROM  VOTES, CONTESTANTS, AREA_CODE_STATE\nWHERE VOTES.contestant_number = CONTESTANTS.contestant_number\nAND VOTES.area_code = CONTESTANTS.area_code\nAND VOTES.created BETWEEN '2013-08-18 00:00:00' AND '2013-08-20 23:59:59'\nAND CONTESTANTS.area_code = '563'\nAND CONTESTANTS.state IN ('AK', 'HI', 'WY', 'ID', 'CA')\nAND VOTES.contestant_number IN ('440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '4"}
{"question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nList the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.. \nSELECT  SELECT_AREA_CODE(contestant_number, 'Tabatha Gehling'),\n            SELECT_AREA_CODE(contestant_number, 'Kelly Clauss')\nFROM    VOTES\nWHERE   vote_id = (SELECT MIN(vote_id) \n                   FROM VOTES \n                   WHERE state = 'Illinois' \n                   GROUP BY contestant_number);\n\nList the state in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.. \nSELECT  SELECT_AREA_CODE(contestant_number, 'Tabatha Gehling'),\n            SELECT_AREA_CODE(contestant_number, 'Kelly Clauss')\nFROM    VOTES\nWHERE   vote_id = (SELECT MIN(vote_id) \n                   FROM VOTES \n                   WHERE state = 'Illinois' \n                   GROUP BY contestant_number);\n\nList the state in which voters voted both for the contestant 'Tabatha Gehling' and the contestant"}
{"question": "Return the names of the contestants whose names contain the substring 'Al' .", "sql": "select contestant_name from contestants where contestant_name like \"%al%\"", "prompt": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nReturn the names of the contestants whose names contain the substring 'Al' .. \nSELECT ", "response": "### SQLite SQL voter_1 database, with their properties:\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nReturn the names of the contestants whose names contain the substring 'Al' .. \nSELECT  SELECT contestant_name\n        FROM  VOTES\n        WHERE  state = 'Florida'\n        AND  CONTAINS(contestant_name, 'Al')\n\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nReturn the names of the contestants whose names contain the substring 'Flo' .. \nSELECT  SELECT contestant_name\n        FROM  VOTES\n        WHERE  state = 'Florida'\n        AND  CONTAINS(contestant_name, 'Flo')\n\n#AREA_CODE_STATE('area_code', 'state')\n#CONTESTANTS('contestant_number', 'contestant_name')\n#VOTES('vote_id', 'phone_number', 'state', 'contestant_number', 'created')\nReturn the names of the contestants whose names contain the substring 'Al' or 'Flo"}
{"question": "What are the names of all the countries that became independent after 1950?", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of all the countries that became independent after 1950?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of all the countries that became independent after 1950?. \nSELECT  SELECT * FROM country WHERE (IndepYear > 1950 AND IndepeYear < 1955)\n\nWhat is the total area (in sq km) of all the countries of the world?. \nSELECT SUM(SurfaceArea) AS SumOfAllCountriesAreas FROM country\n\nWhat is the total population of all the countries of the world?. \nSELECT SUM(Population) AS SumOfAllCountriesPopulation FROM country\n\nWhat is the average life expectancy of all the countries of the world?. \nSELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country\n\nWhat is the total GDP of all the countries of the world?. \nSELECT SUM(GNP) AS TotalGNP FROM country\n\nWhat is the total GDP of all the countries of the world as it was in 1975?. \nSELECT SUM(GNPOld) AS TotalGNPOld FROM country\n\nWhat are the languages that are officially spoken in the country with the code 'AD'?. \nSELECT LocalName, IsOfficial FROM countrylanguage WHERE CountryCode = 'AD'\n\nWhat is the current head of state of the"}
{"question": "Give the names of the nations that were founded after 1950.", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of the nations that were founded after 1950.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of the nations that were founded after 1950.. \nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT  SELECT  SELECT\nSELECT  SELECT"}
{"question": "How many countries have a republic as their form of government?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries have a republic as their form of government?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries have a republic as their form of government?. \nSELECT  SELECT COUNT(name) FROM country WHERE governmentForm=\"republic\"\n\n# Which countries have the Spanish language as official?.\nSELECT  SELECT COUNT(language) FROM countrylanguage WHERE percentage > 0.8 AND language=\"spanish\"\n\n# Which country has the most inhabitants?.\nSELECT  SELECT name FROM country WHERE population > (SELECT MAX(population) FROM country)\n\n# Which countries have a capital that starts with \"Z\" (i.e. \"Zamboanga\", \"Zagreb\", ...)?\nSELECT  SELECT COUNT(name) FROM country WHERE name LIKE \"Z%\";\n\n# Which countries start with the letter \"a\", but not \"Argentina\"?\nSELECT  SELECT COUNT(name) FROM country WHERE name LIKE \"a%\" AND name != \"Argentina\"\n\n# Which countries have a capital with a population higher than 1,000,000?\nSELECT  SELECT COUNT(name) FROM country WHERE name LIKE \"a%\" AND capital LIKE \"1,000,000\"\n\n# Which countries' names have three or more syllables?.\nSELECT  SELECT COUNT(name) FROM country WHERE length(name) >"}
{"question": "How many countries have governments that are republics?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries have governments that are republics?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries have governments that are republics?. \nSELECT  SELECT country.name AS country, count(*) AS population  FROM city \nJOIN country  ON city.countrycode = country.code  GROUP BY country.name \nORDER BY population DESC\n\nHow many cities are in the world?. \nSELECT  SELECT city.name AS city, count(*) AS population  FROM city \nGROUP BY city.name\n\nHow many cities are in the UK?. \nSELECT  SELECT city.name AS city, count(*) AS population  FROM city \nWHERE city.countrycode = 'UK'  GROUP BY city.name \nORDER BY population DESC\n\nHow many cities are in the UK?. \nSELECT  SELECT city.name AS city, count(*) AS population  FROM city \nWHERE city.countrycode = 'UK'  GROUP BY city.name \nORDER BY population DESC\n\nWhat is the name of the most populated city?. \nSELECT  SELECT city.name AS city, city.population AS population  FROM city \nORDER BY city.population DESC\n\nWhat is the name of the least populated city?. \nSELECT  SELECT city.name AS city, city.population AS population  FROM city \nWHERE city.pop"}
{"question": "What is the total surface area of the countries in the Caribbean region?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total surface area of the countries in the Caribbean region?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total surface area of the countries in the Caribbean region?. \n}
{"question": "How much surface area do the countires in the Carribean cover together?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow much surface area do the countires in the Carribean cover together?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow much surface area do the countires in the Carribean cover together?. \nSELECT  SELECT country('Caribbean', 'Country', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'),sum(surfaceArea) FROM country group by country;\nWhat is the average life expectancy in the Americas?.\nSELECT  SELECT country('America', 'Country', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'),avg(lifeExpectancy) FROM country group by country;\nHow much percentage of the population is English as a first language in the Americas?.\nSELECT  SELECT country('America', 'Country', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState"}
{"question": "Which continent is Anguilla in?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent is Anguilla in?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent is Anguilla in?. \nSELECT  SELECT id AS id, country_code AS code, name AS name, continent_code AS continent, region_code AS region, surface_area AS surface_area, independence_year AS independence_year, population AS population, life_expectancy AS life_expectancy, gnp AS gnp, gnpo AS gnpo, local_name AS local_name, government_form AS government_form, head_of_state AS head_of_state, capital AS capital, country_language_code AS country_language_code, percentage AS percentage FROM country WHERE country_code = 'AI' AND continent_code = 'NA'\n31\nWhich continent is Italy in?.\nSELECT id AS id, country_code AS code, name AS name, continent_code AS continent, region_code AS region, surface_area AS surface_area, independence_year AS independence_year, population AS population, life_expectancy AS life_expectancy, gnp AS gnp, gnpo AS gnpo, local_name AS local_name, government_form AS government_form, head_of_state AS head_of_state, capital AS capital, country_language_code AS"}
{"question": "What is the continent name which Anguilla belongs to?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the continent name which Anguilla belongs to?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the continent name which Anguilla belongs to?. \nSELECT  SELECT name FROM country WHERE Code = 'AIA'\nWhat is the code of the country where the capital of Anguilla is?\nSELECT  SELECT Code FROM country WHERE name = 'Anguilla'\nWhat is the continent name which Anguilla belongs to?. \nSELECT  SELECT name FROM country WHERE Code = 'AIA'\nWhat is the code of the country where the capital of Anguilla is?\nSELECT  SELECT Code FROM country WHERE name = 'Anguilla'\nWhat is the continent name which Antarctica belongs to?. \nSELECT  SELECT name FROM country WHERE Code = 'ATA'\nWhat is the code of the country where the capital of Antarctica is?.\nSELECT  SELECT Code FROM country WHERE name = 'Antarctica'\nWhat is the continent name which Antarctica belongs to?. \nSELECT  SELECT name FROM country WHERE Code = 'ATA'\nWhat is the code of the country where the capital of Antarctica is?.\nSELECT  SELECT Code FROM country WHERE name = 'Antarctica'\nWhat is the continent name which Anguilla belongs to?. \nSELECT  SELECT name FROM country WHERE Code = 'AIA'\nWhat is the code of the country"}
{"question": "Which region is the city Kabul located in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich region is the city Kabul located in?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich region is the city Kabul located in?. \nSELECT  SELECT  city('Kabul', 'Afghanistan', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'Kabul', '', 'District}
{"question": "What region is Kabul in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat region is Kabul in?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat region is Kabul in?. \nSELECT  SELECT city_name, district, country, population \nFROM    city, country, world_1\nWHERE\ncity_code = country_code\nAND\ncity_district = district\nAND\ncity_population > 1000000\nORDER  ORDER BY population DESC\n\n\n\n"}
{"question": "Which language is the most popular in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is the most popular in Aruba?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is the most popular in Aruba?. \nSELECT  SELECT c.Code AS CountryCode,\n    SUM(case when c.Continent = 'Europe' then c.Population else 0 end) AS PopulationEurope,\n    SUM(case when c.Continent = 'Asia' then c.Population else 0 end) AS PopulationAsia,\n    SUM(case when c.Continent = 'Africa' then c.Population else 0 end) AS PopulationAfrica,\n    SUM(case when c.Continent = 'North America' then c.Population else 0 end) AS PopulationNorthAmerica,\n    SUM(case when c.Continent = 'South America' then c.Population else 0 end) AS PopulationSouthAmerica,\n    SUM(case when c.Continent = 'Antarctica' then c.Population else 0 end) AS PopulationAntarctica,\n    SUM(case when c.Continent = 'Australia' then c.Population else 0 end) AS PopulationAustralia,\n    SUM(case when c.Continent = 'Oceania' then c.Population else 0 end) AS PopulationOceania,\n    SUM"}
{"question": "What language is predominantly spoken in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat language is predominantly spoken in Aruba?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat language is predominantly spoken in Aruba?. \nSELECT  SELECT 'Aruba', 'Aruba', 1 \nFROM  (SELECT CountryCode, Language, IsOfficial, Percentage \n      FROM countrylanguage\n      WHERE CountryCode = 'AW')\n\nWhat country's citizens are the most likely to speak French? \nSELECT  SELECT 'France', 'France', 1 \nFROM  (SELECT CountryCode, Language, IsOfficial, Percentage \n      FROM countrylanguage\n      WHERE CountryCode = 'FR')\n\nWhat is the capital city of France? \nSELECT  SELECT 'Paris', 'Paris', 1 \nFROM  (SELECT CountryCode, Name, Continent, Region, SurfaceArea, IndepearYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2 \n      FROM country)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "What are the population and life expectancies in Brazil?", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the population and life expectancies in Brazil?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the population and life expectancies in Brazil?. \n}
{"question": "Give me Brazil\u2019s population and life expectancies.", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive me Brazil\u2019s population and life expectancies.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive me Brazil\u2019s population and life expectancies.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\ncity.*,\ncountry.*,\ncountry.region AS region_code,\ncountry.continent AS continent_code,\ncountry.surfacearea AS surfacearea_km2,\ncountry.indepyear AS indepyear,\ncountry.gdppc AS gdppc,\ncountry.gdpoold AS gdpoold,\ncountry.localname AS localname,\ncountry.governmentform AS governmentform,\ncountry.headofstate AS headofstate,\ncountry.capital AS capital,\ncountry.code2 AS code2\nFROM city\nJOIN country ON city.country = country.code\nWHERE city.name = 'Brazil'\n\ngive me top 10 countries by population\nSELECT country.name,\ncountry.gdppc,\ncountry.gdpoold\nFROM country\nWHERE country.code LIKE '%[0-9][0-9]%_%[0-9][0-9]'\nORDER BY country.population DESC\nLIMIT 10\n\n#give me brazil's population\nSELECT"}
{"question": "What are the region and population of Angola?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the region and population of Angola?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the region and population of Angola?. \nSELECT  SELECT city.name AS city_name,\n    city.district AS city_district,\n    city.countrycode AS city_countrycode,\n    city.population AS city_population\n    FROM city \n    WHERE city.countrycode='AGO'\n    ORDER BY city.population DESC;\n\n# what are the region, population, continent, and surface area of the country with the highest population?\n#SELECT city.name,\n#    city.district,\n#    city.countrycode,\n#    city.population,\n#    city.continent,\n#    city.surfacearea,\n#    city.indypear,\n#    city.population,\n#    city.lifeexpectancy,\n#    city.grossnationalproduct,\n#    city.grossnationalproductold,\n#    city.localname,\n#    city.governmentform,\n#    city.headofstate,\n#    city.capital,\n#    city.code2\n#FROM city\n#WHERE city.population > city.population\n#ORDER BY city.population DESC"}
{"question": "What region does Angola belong to and what is its population?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat region does Angola belong to and what is its population?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat region does Angola belong to and what is its population?. \nSELECT  SELECT COUNT(*), name, district, country_code, population\nFROM    city, country, country_language, world_1\nWHERE  country_code = country_code\nAND    city_id = country_id\nAND    country_id = country_language_country_code\nAND    city_district = district\nAND    city_id = country_language_city_id\nAND    country_language_id = country_language_id\nAND    country_id = world_1_country_id\nAND    country_id = world_1_region_id\nAND    world_1_region_name = 'Africa'\nAND    world_1_region_id = world_1_region_id\nAND    world_1_region_name <> 'World'\nORDER BY 1\n\n#\n\nSELECT  city_id, city_name, city_district, country_code, country_name, population\nFROM    city, country, country_language, world_1\nWHERE  country_code = country_code\nAND    city_id = country_id\nAND    country_id = country_language_country_code\nAND"}
{"question": "What is the average expected life expectancy for countries in the region of Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average expected life expectancy for countries in the region of Central Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average expected life expectancy for countries in the region of Central Africa?. \nSELECT  SELECT AVG(lifeexpectancy) FROM country WHERE country.region = \"Central Africa\"\n\nHow many continents are there?. \nSELECT  SELECT COUNT(country.continent) FROM country GROUP BY country.continent\n\nWhat is the continent of the country with the highest life expectancy?. \nSELECT  SELECT country.continent FROM country ORDER BY lifeexpectancy DESC LIMIT 1"}
{"question": "How long is the people\u2019s average life expectancy in Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow long is the people\u2019s average life expectancy in Central Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow long is the people\u2019s average life expectancy in Central Africa?. \nSELECT  SELECT  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people,  people,  country,  people, "}
{"question": "What is the name of country that has the shortest life expectancy in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the name of country that has the shortest life expectancy in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the name of country that has the shortest life expectancy in Asia?. \n}
{"question": "Give the name of the country in Asia with the lowest life expectancy.", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the country in Asia with the lowest life expectancy.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the country in Asia with the lowest life expectancy.. \nSELECT  SELECT  CountryCode, \n    Name, \n    SurfaceArea, \n    IndePendenceYear, \n    LocalName, \n    GovernmentForm, \n    HeadOfState, \n    Capital, \n    Continent, \n    Region, \n    LifeExpectancy, \n    GNP, \n    GNPOld, \n    Percentage \nFROM country \nWHERE CountryCode LIKE '%asia%'\nAND CountryCode LIKE '%lowest%'\nORDER BY LifeExpectancy ASC\nLIMIT 1;\n"}
{"question": "What is the total population and maximum GNP in Asia?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population and maximum GNP in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population and maximum GNP in Asia?. \nSELECT  SELECT COUNT(ID) AS Population, MAX(GNP) AS MaxGNP FROM city, country WHERE city.CountryCode = country.Code AND country.Continent = 'Asia';\n\n\n\n\n"}
{"question": "How many people live in Asia, and what is the largest GNP among them?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in Asia, and what is the largest GNP among them?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in Asia, and what is the largest GNP among them?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n  city.Name,\n  country.Name,\n  country.Population,\n  sum(countrylanguage.Percentage) as percentage\nFROM city\nINNER JOIN country\n  ON country.ID = city.CountryCode\nINNER JOIN countrylanguage\n  ON countrylanguage.CountryCode = country.Code\nWHERE country.Continent = 'Asia'\nGROUP BY city.Name,\n  country.Name,\n  country.Population,\n  countrylanguage.Percentage\nORDER BY city.Name,\n  country.Name,\n  country.Population\n\n"}
{"question": "What is the average life expectancy in African countries that are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average life expectancy in African countries that are republics?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average life expectancy in African countries that are republics?. \n}
{"question": "Give the average life expectancy for countries in Africa which are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the average life expectancy for countries in Africa which are republics?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the average life expectancy for countries in Africa which are republics?. \nSELECT  SELECT\nAVG(lifeexpectancy) \nFROM    country \nWHERE countrycode = 'Af' \nAND     Continent = 'Africa' \nAND     GovernmentForm = 'Republic' \nORDER BY countrycode;\n\n\n"}
{"question": "What is the total surface area of the continents Asia and Europe?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total surface area of the continents Asia and Europe?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total surface area of the continents Asia and Europe?. \n}
{"question": "Give the total surface area covered by countries in Asia or Europe.", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the total surface area covered by countries in Asia or Europe.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the total surface area covered by countries in Asia or Europe.. \nSELECT  SELECT country('Europe', 'Asia', 'Earth', 'Europe', 'Europe', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '2009', '200"}
{"question": "How many people live in Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in Gelderland district?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in Gelderland district?. \nSELECT  SELECT city.id, city.name, city.countrycode, city.district, city.population\nFROM    city\nJOIN    country ON country.id = city.countrycode\nJOIN    countrylanguage ON city.countrycode = countrylanguage.countrycode\nJOIN    language ON countrylanguage.language = language.id\nWHERE   city.name LIKE '%Gelderland%' AND country.continent = 'Europe'\nGROUP   BY city.name\nORDER BY city.name\nLIMIT  10;\n"}
{"question": "What is the total population of Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population of Gelderland district?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population of Gelderland district?. \nSELECT  SELECT SUM(Population) FROM city WHERE city.District=\"Gelderland\"\nWhat is the total population of the Netherlands?. \nSELECT  SELECT SUM(Population) FROM city\nWhat is the total population of Paris?. \nSELECT  SELECT SUM(Population) FROM city WHERE city.CountryCode=\"FR\" AND city.District=\"Paris\"\nWhat is the total population of the Netherlands?. \nSELECT  SELECT SUM(Population) FROM city\nWhat is the total population of Berlin?. \nSELECT  SELECT SUM(Population) FROM city WHERE city.CountryCode=\"DE\" AND city.District=\"Berlin\"\nWhat is the total population of Brandenburg?. \nSELECT  SELECT SUM(Population) FROM city WHERE city.CountryCode=\"DE\" AND city.District=\"Brandenburg\"\nWhat is the total population of Westfalen?. \nSELECT  SELECT SUM(Population) FROM city WHERE city.CountryCode=\"DE\" AND city.District=\"Westfalen\"\nWhat is the total population of South Tyrol?. \nSELECT  SELECT SUM(Population) FROM city WHERE city.CountryCode=\"IT\" AND city.District=\"South"}
{"question": "What is the average GNP and total population in all nations whose government is US territory?", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average GNP and total population in all nations whose government is US territory?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the average GNP and total population in all nations whose government is US territory?. \nSELECT  SELECT COUNTRY.Code, SUM(COUNTRY.GNP) / SUM(COUNTRY.Population)\nFROM COUNTRY, CITY \nWHERE CITY.CountryCode=COUNTRY.Code\nAND CITY.Population IS NOT NULL\nGROUP BY COUNTRY.Code\nORDER BY COUNTRY.Code;\n"}
{"question": "Give the mean GNP and total population of nations which are considered US territory.", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the mean GNP and total population of nations which are considered US territory.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the mean GNP and total population of nations which are considered US territory.. \nSELECT  SELECT name, (select sum(gnp) from country c2 where c2.continent = c.continent and c2.region = c.region and c2.countrycode = c.countrycode and c2.localname = 'United States'), (select sum(population) from country c2 where c2.continent = c.continent and c2.region = c.region and c2.countrycode = c.countrycode and c2.localname = 'United States')\nFROM country c where c.code in (select countrycode from countrylanguage where localname = 'English');\n\"\"\"\n\ndef main(argv):\n    pass\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n"}
{"question": "How many unique languages are spoken in the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many unique languages are spoken in the world?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many unique languages are spoken in the world?. \nSELECT  SELECT  SELECT  SELECT\nFROM    country\nJOIN    countrylanguage\nON      country.Code = countrylanguage.CountryCode\nGROUP BY country.Code\nHAVING  COUNT(countrylanguage.Language) > 1;\n"}
{"question": "What is the number of distinct languages used around the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of distinct languages used around the world?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of distinct languages used around the world?. \n}
{"question": "How many type of governments are in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many type of governments are in Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many type of governments are in Africa?. \nSELECT  SELECT  *\nFROM    FROM    world_1\nWHERE    WHERE    CountryCode='Africa'\nAND      AND      CountryCode='Africa'\nAND      AND      CountryCode='Africa'\nAND      AND      CountryCode='Africa'\nGROUP    GROUP    BY    BY    CountryCode\nORDER    ORDER    BY    BY    CountryCode\n;\n"}
{"question": "How many different forms of governments are there in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many different forms of governments are there in Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many different forms of governments are there in Africa?. \nSELECT  SELECT  COUNT(*) FROM country WHERE country.continent = \"Africa\" AND country.governmentform IN ('Democracy', 'Monarchy', 'Republic', 'Dictatorship', 'Fascism', 'Authoritarianism', 'Socialism', 'Communism', 'Autocracy', 'Anarchy', 'Theocracy')\n\n\nA sample sentence in French:\n\n\u00c9quipe de France de football = l'\u00e9quipe nationale de football de la France\n\n\nSELECT  SELECT  name FROM country WHERE name.localname = \"l'\u00e9quipe nationale de football de la France\"\n\n\n\nA city with 200000 inhabitants:\n\nSELECT  SELECT  city.population FROM city WHERE city.population > 200000\n\n\n\nA country with 13500000 inhabitants:\n\nSELECT  SELECT  country.population FROM country WHERE country.population > 135000000\n\n\nA country with 135000 inhabitants:\n\nSELECT  SELECT  country.population FROM country WHERE country.population > 135000\n"}
{"question": "What is the total number of languages used in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of languages used in Aruba?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of languages used in Aruba?. \nSELECT  SELECT  countrylanguage('ARU') as CountryCode, \n         SUM(Percentage) as TotalLanguagePercentage\nFROM    countrylanguage\nGROUP BY CountryCode\n\n# What is the total number of languages used in China?. \nSELECT  SELECT  countrylanguage('CHN') as CountryCode, \n         SUM(Percentage) as TotalLanguagePercentage\nFROM    countrylanguage\nGROUP BY CountryCode\n\n# What is the total number of languages used in Vietnam?. \nSELECT  SELECT  countrylanguage('VNM') as CountryCode, \n         SUM(Percentage) as TotalLanguagePercentage\nFROM    countrylanguage\nGROUP BY CountryCode\n\n# What is the total number of languages used in Japan?. \nSELECT  SELECT  countrylanguage('JPN') as CountryCode, \n         SUM(Percentage) as TotalLanguagePercentage\nFROM    countrylanguage\nGROUP BY CountryCode\n\n# What is the total number of languages used in Mexico?. \nSELECT  SELECT  countrylanguage('MEX') as CountryCode, \n         SUM(Percentage) as TotalLanguagePercentage\nFROM    countrylanguage\nGROUP BY CountryCode\n\n# What is the total number of"}
{"question": "How many languages are spoken in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many languages are spoken in Aruba?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many languages are spoken in Aruba?. \nSELECT  SELECT count(*) FROM countrylanguage WHERE CountryCode=101;\n\n#country_code_list('CountryCode', 'Code')\nHow many languages are spoken in Aruba?. \nSELECT  SELECT count(*) FROM country_code_list WHERE CountryCode=101;\n\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\nHow many languages are spoken in Aruba?. \nSELECT  SELECT * FROM country WHERE CountryCode=101;\n\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\nHow many languages are spoken in Aruba?. \nSELECT  SELECT * FROM country;\n\n#country('Code', 'Name', 'Continent',"}
{"question": "How many official languages does Afghanistan have?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many official languages does Afghanistan have?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many official languages does Afghanistan have?. \nSELECT  SELECT id, language FROM countrylanguage WHERE country = 'Af'\n\n"}
{"question": "How many official languages are spoken in Afghanistan?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many official languages are spoken in Afghanistan?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many official languages are spoken in Afghanistan?. \nSELECT  SELECT name, COUNT(countrycode)\nFROM countrylanguage, country, city WHERE countrycode = city.countrycode AND countrycode = country.code AND country.localname = 'Afghanistan' AND name = 'Afghanistan';\n\n# How many cities with a population over 1000000 are there in the world?. \nSELECT city.name, COUNT(city.id) FROM city WHERE city.id = city.id GROUP BY city.name;\n\n\n# Which is the most populated country?. \nSELECT name, COUNT(countrycode) FROM countrylanguage, country WHERE countrycode = country.code GROUP BY name ORDER BY COUNT(countrycode) DESC;\n"}
{"question": "What is name of the country that speaks the largest number of languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is name of the country that speaks the largest number of languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is name of the country that speaks the largest number of languages?. \nSELECT  SELECT *\nFROM    FROM countrylanguage\nWHERE   WHERE CountryCode = \"EN\"\nLIMIT    LIMIT 1\n\n\n\n### SQL query with wildcard\nSELECT  *\nFROM    FROM world_1\nWHERE   WHERE CountryCode like \"%EN%\"\nLIMIT    LIMIT 1\n"}
{"question": "Give the name of the nation that uses the greatest amount of languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the nation that uses the greatest amount of languages.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the nation that uses the greatest amount of languages.. \nSELECT  SELECT * FROM countrylanguage WHERE CountryCode = 'GER';\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the nation that has the largest surface area... \nSELECT  SELECT * FROM country WHERE SurfaceArea > 1000000;\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name of the nation that has the largest population... \nSELECT  SELECT * FROM country WHERE Population > 10000000;\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n"}
{"question": "Which continent has the most diverse languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent has the most diverse languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent has the most diverse languages?. \nSELECT  SELECT country.Name AS CountryName, \n        country.Population AS CountryPopulation,\n        SELECT COUNT(*) AS Count, \n        language.CountryCode AS LanguageCountryCode, \n        language.Language AS LanguageLanguage,\n        language.IsOfficial AS LanguageIsOfficial,\n        language.Percentage AS LanguagePercentage\nFROM country JOIN countrylanguage\nON country.Code = countrylanguage.CountryCode\nWHERE CountryLanguage IS NOT NULL\nGROUP BY CountryLanguage\nORDER BY 2\nUNION ALL \nSELECT COUNT(*) AS Count, country.CountryCode, country.Name, 0, 0, 0, 0, 0\nFROM country\nGROUP BY 1\nUNION ALL \nSELECT COUNT(*) AS Count, country.Code2, country.Name, 0, 0, 0, 0, 0\nFROM country\nWHERE Code2 IS NOT NULL\nGROUP BY 1\nORDER BY 2\nORDER BY Count\n"}
{"question": "Which continent speaks the most languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent speaks the most languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich continent speaks the most languages?. \nSELECT  SELECT city.ID as ID, city.Name as Name,\ncountry.Code as CountryCode,\ncountry.Name as Name,\ncountry.Continent as Continent,\ncountry.Region as Region,\ncountry.SurfaceArea as SurfaceArea,\ncountry.IndepYear as IndepYear,\ncountry.Population as Population,\ncountry.LifeExpectancy as LifeExpectancy,\ncountry.GNP as GNP,\ncountry.GNPOld as GNPOld,\ncountry.LocalName as LocalName,\ncountry.GovernmentForm as GovernmentForm,\ncountry.HeadOfState as HeadOfState,\ncountry.Capital as Capital,\ncountry.Code2 as Code2\nFROM city, country\nWHERE city.CountryCode = country.Code\nGROUP BY city.ID, country.Code\nORDER BY city.ID, country.Code\n#\n\n\n\n\n"}
{"question": "How many countries speak both English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries speak both English and Dutch?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many countries speak both English and Dutch?. \nSELECT  SELECT name, SUM(percentage) AS Percentage\nFROM    countrylanguage\nWHERE   language = 'en' AND countrycode = 'NL';\n\n#countries_by_continent('CountryCode', 'Continent', 'Region', 'Name')\n#countries_by_continent('CountryCode', 'Continent', 'Region', 'Name', 'Population')\n#countries_by_continent('CountryCode', 'Continent', 'Region', 'Name', 'Population', 'Area')\n#countries_by_continent('CountryCode', 'Continent', 'Region', 'Name', 'Population', 'Area', 'Capital')\n#countries_by_continent('CountryCode', 'Continent', 'Region', 'Name', 'Population', 'Area', 'Capital', 'HeadOfState')\n#countries_by_continent('CountryCode', 'Continent', 'Region', 'Name', 'Population', 'Area', 'Capital', 'HeadOfState', 'Districts')\nSELECT  SELECT continent, COUNT(*) AS Population\nFROM    country\nGROUP BY continent\nORDER BY continent ASC;\n\n#"}
{"question": "What is the number of nations that use English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of nations that use English and Dutch?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of nations that use English and Dutch?. \nSELECT  SELECT country_language.Percentage * country.Population\nFROM    country JOIN country_language ON country_language.Code2 = country.Code\nWHERE country_language.Language = 'English'\nOR     country_language.Language = 'Dutch';\n\n\nWhat is the number of cities that have a population between 1000 and 10000?. \nSELECT  SELECT city.Population\nFROM    city JOIN city_district ON city.ID = city_district.CityID\nWHERE city_district.District = '5';\n\n\nWhat is the number of districts that have between 2 and 6 cities?. \nSELECT  SELECT city_district.District\nFROM    city_district JOIN city ON city.ID = city_district.CityID\nWHERE  city_district.District BETWEEN 2 AND 6;\n\n\nWhat is the number of districts that have between 3 and 6 cities?. \nSELECT  SELECT city_district.District\nFROM    city_district JOIN city ON city.ID = city_district.CityID\nWHERE  city_district."}
{"question": "What are the names of nations speak both English and French?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of nations speak both English and French?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of nations speak both English and French?. \nSELECT  SELECT name FROM countrylanguage WHERE language = 'English' AND language = 'French'\n\n## Hackerrank SQL Problems\n## SQL Data Type\n##\n## The SQLite data types are as follows:\n##\n##\n##  * INTEGER - An integer data type.\n##  * REAL - A floating point data type.\n##  * TEXT - A text data type.\n##  * NUMERIC - A numeric data type.\n##  * VARCHAR - A character data type.\n##  * BLOB - A binary large object data type.\n##  * BOOLEAN - A boolean data type.\n##  * DATE - A date data type.\n##\n##\n##  * What is the data type of 'Hello'?\n##\n##  * What is the data type of 5.5?\n##\n##\n##  * What is the data type of 2.45E+10?\n##\n##  * What is the data type of 12/10/2013?\n##\n##  * What is the data type of 'Hello'?\n##\n##\n##  * What"}
{"question": "Give the names of nations that speak both English and French.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of nations that speak both English and French.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of nations that speak both English and French.. \nSELECT  SELECT country.name, language.language\nFROM    country\nJOIN    language\nON      country.code = language.country\nWHERE   language.language = 'en'\n        AND language.language = 'fr'\n\nSELECT  \n    country.id,\n    country.name,\n    country.continent,\n    country.region,\n    country.surfacearea,\n    country.indepyear,\n    country.population,\n    country.lifespan,\n    country.gnp,\n    country.gnpo,\n    country.localname,\n    country.governmentform,\n    country.headofstate,\n    country.capital,\n    country.code2,\n    language.name language,\n    language.is_official,\n    language.percentage\nFROM    country\nJOIN    language\nON      country.code = language.country\nWHERE   language.language = 'en'\n        AND language.language = 'fr'\nORDER BY country.name\n\n"}
{"question": "What are the names of nations where both English and French are official languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of nations where both English and French are official languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of nations where both English and French are official languages?. \nSELECT  SELECT  city.name,\n          language.name\n    FROM    city\n    INNER JOIN country ON city.countrycode = country.code\n    INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode\n    INNER JOIN language ON language.code = countrylanguage.languagecode\n    WHERE   country.countrycode LIKE 'CA'\n            AND city.name NOT IN ('United States', 'CANADA', 'United Kingdom', 'United States of America', 'USA', 'United States of America', 'Canada', 'Canada', 'England', 'England', 'Britain', 'Britain')\n            AND city.name NOT IN ('Quebec')\n            AND language.name NOT IN ('English', 'English', 'English', 'English', 'French', 'French', 'French', 'Fran\u00e7ais', 'Fran\u00e7ais', 'Fran\u00e7ais', 'Gaelic')\n            AND language.name NOT IN ('Cree', 'Cree', 'Dene Suline', 'Dene Suline', 'Inuktitut', 'Inuktitut', 'Inuktitut', 'Ojibwe', 'Ojib"}
{"question": "Give the names of countries with English and French as official languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of countries with English and French as official languages.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of countries with English and French as official languages.. \nSELECT  SELECT CountryCode FROM CountryLanguage WHERE Language='English' AND IsOfficial=1 ORDER BY CountryCode ASC\nSELECT  SELECT CountryCode FROM CountryLanguage WHERE Language='French' AND IsOfficial=1 ORDER BY CountryCode ASC\n\n#give the country's name, code and continent, for the country whose code is 108\nSELECT  SELECT Name, Code, Continent FROM Country WHERE Code=108 ORDER BY Code ASC\n\n#give the population of the city for which the code is 25\nSELECT  SELECT Population FROM City WHERE Code='25' ORDER BY Population ASC\n\n#give the district code for which the district is 'London'\nSELECT  SELECT District FROM City WHERE Name='London' ORDER BY District ASC\n\n#give the country for which the code is 'FRA'\nSELECT  SELECT CountryCode FROM Country WHERE Code='FRA' ORDER BY CountryCode ASC\n\n#give the country for which the name is 'Brazil'\nSELECT  SELECT Name FROM Country WHERE LocalName='Brazil' ORDER BY Name ASC\n\n#give the 100 most populous cities in the world\nSELECT  SELECT Code"}
{"question": "What is the number of distinct continents where Chinese is spoken?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of distinct continents where Chinese is spoken?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the number of distinct continents where Chinese is spoken?. \nSELECT  SELECT  COUNT(DISTINCT Language) FROM countrylanguage WHERE Language = 'Chinese';\n#SELECT  SELECT  COUNT(DISTINCT Language) FROM countrylanguage WHERE Language = 'Chinese';\nSELECT  SELECT  COUNT(DISTINCT CountryCode) FROM country WHERE CountryCode IN ('CHN', 'TWN');\n#SELECT  SELECT  COUNT(DISTINCT CountryCode) FROM country WHERE CountryCode IN ('CHN', 'TWN');\nSELECT  SELECT  COUNT(DISTINCT CountryCode) FROM country WHERE CountryCode IN ('CHN', 'TWN');\n#SELECT  SELECT  COUNT(DISTINCT CountryCode) FROM country WHERE CountryCode IN ('CHN', 'TWN');\nSELECT  SELECT  COUNT(DISTINCT CountryCode) FROM country WHERE CountryCode IN ('CHN', 'TWN');\n#SELECT  SELECT  COUNT(DISTINCT CountryCode) FROM country WHERE CountryCode IN ('CHN', 'TWN');\nSELECT  SELECT  COUNT(DISTINCT CountryCode) FROM country WHERE CountryCode IN ('CHN', 'TWN');\n#SELECT  SELECT  COUNT(DISTINCT CountryCode) FROM country WHERE CountryCode IN ('CHN"}
{"question": "How many continents speak Chinese?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many continents speak Chinese?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many continents speak Chinese?. \nSELECT  SELECT CountryCode,\n        COUNT(*) AS population,\n        SUM(Percentage) AS percentage\nFROM CountryLanguage\nWHERE IsOfficial = 1\nGROUP BY CountryCode\nORDER BY 2\n```\n\n### Oracle PL/SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many continents speak Chinese?. \nSELECT CountryCode,\n       COUNT(*) AS population,\n       SUM(Percentage) AS percentage\nFROM   countrylanguage\nWHERE  isofficial = 1\nGROUP BY countrycode\nORDER BY 2;\n```\n\n### PostgreSQL PL/pgSQL world_1 database, with their properties"}
{"question": "What are the regions that use English or Dutch?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the regions that use English or Dutch?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the regions that use English or Dutch?. \nSELECT  SELECT c.Code, c.Name, c.Region, SUM(c.Population) AS Population\nFROM    world_1 c\nWHERE   c.Language IN ('English', 'Dutch')\nGROUP   BY c.Code, c.Name, c.Region\nORDER   BY c.Population DESC\nLIMIT 10\n#\n\n# What is the smallest region (by population) that has a different language?\nSELECT  SELECT c.Code, c.Name, c.Region, c.Population\nFROM    world_1 c\nWHERE   c.Language != 'English'\nLIMIT 10\n#\n\n# What is the country with the most speakers of English?\nSELECT  SELECT c.Code, c.Name, c.Region, SUM(c.Population) AS Population\nFROM    world_1 c\nWHERE   c.Language = 'English'\nGROUP   BY c.Code, c.Name, c.Region\nORDER   BY c.Population DESC\nLIMIT 10\n#\n\n# What is the smallest country (by population) that has a different language?\nSELECT  SELECT c.Code, c.Name,"}
{"question": "Which regions speak Dutch or English?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich regions speak Dutch or English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich regions speak Dutch or English?. \nSELECT  SELECT * FROM world_1 WHERE country.Code IN ('NL', 'BE')\nSELECT  SELECT * FROM world_1 WHERE country.Code IN ('NL', 'BE')"}
{"question": "What are the countries where either English or Dutch is the official language ?", "sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the countries where either English or Dutch is the official language ?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the countries where either English or Dutch is the official language ?. \nSELECT  SELECT CountryCode, Language, IsOfficial, Percentage\nFROM    CountryLanguage\nWHERE   IsOfficial = 1\nOR      IsOfficial = 2\nAND    CountryCode IN (SELECT CountryCode FROM Country WHERE Code = 'USA' OR Code = 'GBR' OR Code = 'CAN' OR Code = 'AUS' OR Code = 'NZL' OR Code = 'NOR' OR Code = 'DEN' OR Code = 'SWE' OR Code = 'SWI' OR Code = 'NED' OR Code = 'SEN' OR Code = 'NLD' OR Code = 'DEU' OR Code = 'FRA' OR Code = 'PRT' OR Code = 'ESP' OR Code = 'FIN' OR Code = 'FRA' OR Code = 'IRE' OR Code = 'IRL' OR Code = 'ISL' OR Code = 'ISL' OR Code = 'ISV' OR Code = 'ISV' OR Code = 'NOR' OR Code = 'NOR' OR Code = 'ISL' OR Code = 'ISL' OR Code = 'NZL' OR Code = 'N"}
{"question": "Which countries have either English or Dutch as an official language?", "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich countries have either English or Dutch as an official language?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich countries have either English or Dutch as an official language?. \nSELECT  SELECT CountryCode, \n        COUNT(CountryCode) cnt\nFROM    world_1\nWHERE   Language IN ('English', 'Dutch')\nGROUP BY  CountryCode\nHAVING  cnt > 0\nORDER BY  cnt DESC\nLIMIT   10\n\nselect * from language order by language\n\nSELECT * FROM world_1\nWHERE CountryCode IN ('China','Korea','Vietnam')\nAND (CountryCode NOT IN (SELECT CountryCode FROM world_1 WHERE CountryCode IN ('China','Korea','Vietnam'))\nOR ID NOT IN (SELECT ID FROM world_1 WHERE CountryCode IN ('China','Korea','Vietnam'))\nOR District NOT IN (SELECT District FROM world_1 WHERE CountryCode IN ('China','Korea','Vietnam'))\nOR Language NOT IN (SELECT Language FROM world_1 WHERE CountryCode IN ('China','Korea','Vietnam'))\nOR Continent NOT IN (SELECT Continent FROM world_1 WHERE CountryCode IN ('China','Korea','Vietnam'))\nOR Region NOT IN (SELECT Region FROM world_1 WHERE CountryCode IN ('China','Korea"}
{"question": "Which language is the most popular on the Asian continent?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is the most popular on the Asian continent?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is the most popular on the Asian continent?. \nSELECT  SELECT DISTINCT CountryCode, \n  CountryLanguage\nFROM  countrylanguage\nWHERE  CountryLanguage.Continent='Asia'\nORDER  BY CountryCode;\n"}
{"question": "What is the language that is used by the largest number of Asian nations?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the language that is used by the largest number of Asian nations?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the language that is used by the largest number of Asian nations?. \n}
{"question": "Which languages are spoken by only one country in republic governments?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich languages are spoken by only one country in republic governments?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich languages are spoken by only one country in republic governments?. \nSELECT  SELECT distinct country.Code, language.Name, language.Percentage\n    FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\n    WHERE CountryCode in (\n        SELECT countrycode\n        FROM country\n        WHERE Type = 'Republic'\n    ) AND country.Code NOT IN (\n        SELECT CountryCode\n        FROM country\n        WHERE Type = 'Kingdom'\n    )\n    GROUP BY country.Code, language.Name;\n"}
{"question": "What languages are only used by a single country with a republic government?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat languages are only used by a single country with a republic government?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat languages are only used by a single country with a republic government?. \nSELECT  SELECT name FROM country WHERE Code = '1234' AND Continent = 'Europe' AND Region = 'West' AND GovernmentForm = 'Republic';\nSELECT  SELECT name FROM country WHERE Code = '1234' AND Continent = 'Europe' AND Region = 'West' AND GovernmentForm = 'Republic';\n# EXIT\n# SELECT  SELECT name FROM city WHERE CountryCode = '1234';\n# SELECT  SELECT name FROM city WHERE CountryCode = '1234';\nWhat languages are only used by a single country?. \nSELECT  SELECT country FROM countrylanguage WHERE Code2 = '1234';\nSELECT  SELECT country FROM countrylanguage WHERE Code2 = '1234';\n# EXIT\n# SELECT  SELECT name FROM country WHERE Name = 'France';\n# SELECT  SELECT name FROM country WHERE Name = 'France';\nWhat is the country code of the country with the largest population?. \nSELECT  SELECT Code FROM country ORDER BY Population DESC LIMIT 1;\nSELECT  SELECT Code FROM country ORDER BY Population DESC LIMIT 1;\n# EXIT\n# SELECT  SELECT name FROM country WHERE Name = 'United States';\n"}
{"question": "Find the city with the largest population that uses English.", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the city with the largest population that uses English.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the city with the largest population that uses English.. \nSELECT  SELECT name, population FROM city WHERE language = 'en';\nFind the city with the largest population that uses Dutch..\nSELECT  SELECT name, population FROM city WHERE language = 'nl';\nFind the largest city..\nSELECT  SELECT id FROM city ORDER BY population DESC;\nFind the country with the largest population that uses English..\nSELECT  SELECT name FROM country WHERE language = 'en';\nFind the country with the largest population that uses Dutch..\nSELECT  SELECT name FROM country WHERE language = 'nl';\nFind the largest country..\nSELECT  SELECT name FROM country ORDER BY population DESC;\nFind the country with the largest population that uses English..\nSELECT  SELECT name FROM country WHERE language = 'en';\nFind the country with the largest population that uses Dutch..\nSELECT  SELECT name FROM country WHERE language = 'nl';\nFind the largest country..\nSELECT  SELECT name FROM country ORDER BY population DESC;\nFind the country with the largest population that uses English..\nSELECT  SELECT name FROM country WHERE language = 'en';\nFind the country with the largest population that uses Dutch..\nSELECT  SELECT name FROM country WHERE language = 'nl';\nFind the largest country..\nSELECT  SELECT name FROM country ORDER"}
{"question": "What is the most populace city that speaks English?", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the most populace city that speaks English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the most populace city that speaks English?. \nSELECT  SELECT city.ID, city.Name, city.CountryCode, city.Population\nFROM    city\nWHERE   city.Population > 1000000\nAND     city.CountryCode = 'EN'\nORDER BY city.Population DESC\nLIMIT  1\n\nWhat is the most populace city that speaks English?. \nSELECT  SELECT city.ID, city.Name, city.CountryCode, city.Population\nFROM    city\nWHERE   city.Population > 1000000\nAND     city.CountryCode = 'EN'\nORDER BY city.Population DESC\nLIMIT  1\n\nWhat is the most populace country that speaks English?. \nSELECT  SELECT country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2\nFROM    country\nWHERE   country.Population > 1000"}
{"question": "Find the name, population and expected life length of asian country with the largest area?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the name, population and expected life length of asian country with the largest area?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the name, population and expected life length of asian country with the largest area?. \nSELECT  SELECT name,  population,  Length(GeometryFromText('POLYGON((100 100, 100 90, 90 90, 90 100, 100 100))')) as length from country where countryCode = 'AS';\n\n#what is the most populous country in the world (in 2016)? \nSELECT  SELECT name,  population from country where Length(GeometryFromText('POLYGON((100 100, 100 90, 90 90, 90 100, 100 100))')) = (SELECT max(Length(GeometryFromText('POLYGON((100 100, 100 90, 90 90, 90 100, 100 100))'))) FROM country);\n\n#what is the country with the largest area (in sq. km)? \nSELECT  SELECT name,  Length(GeometryFromText('"}
{"question": "What are the name, population, and life expectancy of the largest Asian country by land?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the name, population, and life expectancy of the largest Asian country by land?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the name, population, and life expectancy of the largest Asian country by land?. \nSELECT  SELECT name, population, life_expectancy FROM country WHERE continent='Asia'  ORDER BY population DESC LIMIT 1\n\nWhat is the 20th largest country in the world by land area?. \nSELECT  SELECT countryCode FROM country WHERE surfaceArea > 2000000  ORDER BY surfaceArea DESC LIMIT 1\n\nWhat is the continent that the country is in?. \nSELECT  SELECT continent FROM country WHERE countryCode = 'RUS'  ORDER BY population DESC LIMIT 1\n\nWhat is the name of the first country that comes when you sort the countries by their capital?. \nSELECT  SELECT name FROM country WHERE capital = 'Abu Dhabi'  ORDER BY name LIMIT 1\n\nWhat is the most populous country in the world?. \nSELECT  SELECT countryCode FROM country WHERE population > 100000000  ORDER BY population DESC LIMIT 1\n\nWhat is the continent that the country is in?. \nSELECT  SELECT continent FROM country WHERE countryCode = 'CHN'  ORDER BY population DESC LIMIT 1\n\nWhat is the capital of the largest country in the world?. \nSELECT  SELECT capital FROM country WHERE"}
{"question": "What is average life expectancy in the countries where English is not the official language?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is average life expectancy in the countries where English is not the official language?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is average life expectancy in the countries where English is not the official language?. \n}
{"question": "Give the mean life expectancy of countries in which English is not the official language.", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the mean life expectancy of countries in which English is not the official language.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the mean life expectancy of countries in which English is not the official language.. \nSELECT  SELECT COUNT(*) AS cnt,  country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2') FROM country WHERE Name IN ('United States', 'United Kingdom', 'Australia', 'Canada') AND LifeExpectancy > 65  FROM country WHERE  Name IN ('United States', 'United Kingdom', 'Australia', 'Canada') AND LifeExpectancy > 65 AND CountryCode != 'en' AND CountryCode != 'en-US' \n\n\n\n\n\n\n\n"}
{"question": "What is the total number of people living in the nations that do not use English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of people living in the nations that do not use English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of people living in the nations that do not use English?. \nSELECT  SELECT COUNT(*) AS total_people\nFROM    FROM sqlite_master\nWHERE    WHERE name='country'\n          AND type='table'\n          AND not regexp_replace(name,'[^[:upper:]]','')=''\n          AND not regexp_replace(type,'[^[:upper:]]','')='';\n\n#select the value of the seq column, from the world_1 table.\n#what is the name of the first district in Madrid?\nSELECT    SELECT name\nFROM      FROM sqlite_master\nWHERE     WHERE name='city'\n            AND type='table'\n            AND not regexp_replace(name,'[^[:upper:]]','')=''\n            AND not regexp_replace(type,'[^[:upper:]]','')='';\n\n#in the City table, how many districts does Madrid have?\nSELECT    SELECT COUNT(*)\nFROM      FROM sqlite_master\nWHERE     WHERE name='city'\n            AND type='table'\n            AND not regexp_replace(name,'[^[:upper:]]','')=''\n            AND not regexp_replace(type,'[^[:upper:]]','')='';\n\n#select the name of"}
{"question": "How many people live in countries that do not speak English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in countries that do not speak English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many people live in countries that do not speak English?. \nSELECT  SELECT\n    city.name,\n    city.id AS cityId,\n    city.population\nFROM city\nINNER JOIN\n(\n    SELECT countrycode,\n    SUM(percentage) AS percentage,\n    COALESCE(LCASE(LOCALNAME), countrycode) AS localname\n    FROM countrylanguage\n    GROUP BY countrycode, localname\n)\n    ON city.district = country.name\nINNER JOIN country ON country.name = city.country\nWHERE country.continent = 'Europe'\nORDER BY city.name\nLIMIT 10\nOFFSET 0\n"}
{"question": "What is the official language spoken in the country whose head of state is Beatrix?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the official language spoken in the country whose head of state is Beatrix?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the official language spoken in the country whose head of state is Beatrix?. \nSELECT  SELECT  country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\nFROM    country\nWHERE   country.HeadOfState = 'Beatrix'\nAND     country.Name = 'Netherlands'\nAND     country.Code = 'NL'\nAND     country.IndepYear = 1945\n\nWhat is the number of people who live in the Netherlands?. \nSELECT  SELECT  city('ID', 'Name', 'CountryCode', 'District', 'Population')\nFROM    city\nWHERE   city.CountryCode = 'NL'\nAND     city.District = 1\n\n\nWhat is the total surface area of the Netherlands?. \nSELECT  SELECT  country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm"}
{"question": "What is the official language used in the country the name of whose head of state is Beatrix.", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the official language used in the country the name of whose head of state is Beatrix.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the official language used in the country the name of whose head of state is Beatrix.. \nSELECT  SELECT 'The Head of State of ' || name || ' is ' || headOfState || '.'\nFROM    city JOIN country ON (city.countryCode = country.Code)\nWHERE   name LIKE 'Beatrix%'\nORDER BY name\n\n# What is the country with the highest population? \nSELECT  SELECT 'The country with the highest population is ' || name || ' with a population of ' || population || ' million people.'\nFROM    city JOIN country ON (city.countryCode = country.Code)\nORDER BY population DESC\n\n# What is the country with the highest population?\nSELECT  SELECT 'The country with the highest population is ' || name || ' with a population of ' || population || ' million people.'\nFROM    country JOIN countrylanguage ON (country.Code = countrylanguage.CountryCode)\nORDER BY population DESC\n\n# What is the country with the highest population?\nSELECT  SELECT 'The country with the highest population is ' || name || ' with a population of ' || population || ' million people.'\nFROM    country JOIN countrylanguage ON (country.Code = countrylanguage.CountryCode)\nWHERE   countrylanguage.Language LIKE 'en%'\nORDER BY population DESC"}
{"question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of unique official languages spoken in the countries that are founded before 1930?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of unique official languages spoken in the countries that are founded before 1930?. \nSELECT  SELECT CountryCode, COUNT(CountryCode) FROM countrylanguage GROUP BY CountryCode HAVING COUNT(CountryCode) > 1\nThe query above doesn't work! What is the problem?\n"}
{"question": "For the countries founded before 1930, what is the total number of distinct official languages?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFor the countries founded before 1930, what is the total number of distinct official languages?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFor the countries founded before 1930, what is the total number of distinct official languages?. \nSELECT  SELECT city.name, city.CountryCode, city.District FROM city\n\tJOIN country ON city.CountryCode = country.Code\n\tJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE city.Population > 1000000\n\tAND city.District = \"Old Dhaka\"\n\tAND countrylanguage.Language IS NOT NULL\n\tAND countrylanguage.Language IN ('en','bn')\nGROUP BY city.CountryCode\nHAVING COUNT(DISTINCT countrylanguage.Language) = 0\n"}
{"question": "What are the countries that have greater surface area than any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the countries that have greater surface area than any country in Europe?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the countries that have greater surface area than any country in Europe?. \nSELECT  SELECT  'Country' as Country, CountryCode as Code, \n                  (SELECT SUM(SurfaceArea) FROM country WHERE CountryCode = Country) as SurfaceArea, \n                  CountryName as Name \nFROM country \nORDER BY SurfaceArea DESC \nLIMIT 10000\n\n\n# What are the 10 countries with the highest population?. \nSELECT Country, Name, \n                     (SELECT COUNT(*) FROM city WHERE CountryCode = Country) as Population \nFROM country \nGROUP BY Country, Name \nORDER BY Population DESC \nLIMIT 10000\n\n# What is the population of the country with the highest population?. \nSELECT (SELECT COUNT(*) FROM city WHERE CountryCode = Country) as Population \nFROM country \nWHERE CountryCode = (SELECT CountryCode FROM country WHERE CountryCode = (SELECT CountryCode FROM country WHERE CountryCode = (SELECT CountryCode FROM country WHERE CountryCode = (SELECT CountryCode FROM country WHERE CountryCode = (SELECT CountryCode FROM country WHERE CountryCode = (SELECT CountryCode FROM country WHERE CountryCode = (SELECT CountryCode FROM country WHERE CountryCode = (SELECT CountryCode FROM country WHERE CountryCode"}
{"question": "Which countries have greater area than that of any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich countries have greater area than that of any country in Europe?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich countries have greater area than that of any country in Europe?. \nSELECT  SELECT country('ID', 'Name', 'CountryCode', 'District', 'Population') FROM world_1 WHERE Population IS NULL AND CountryCode IS NOT NULL;\nSELECT  SELECT country('ID', 'Name', 'CountryCode', 'District', 'Population') FROM world_1 WHERE Population IS NULL AND CountryCode IS NOT NULL;\nSELECT  SELECT country('ID', 'Name', 'CountryCode', 'District', 'Population') FROM world_1 WHERE Population IS NULL AND CountryCode IS NOT NULL;\nSELECT  SELECT country('ID', 'Name', 'CountryCode', 'District', 'Population') FROM world_1 WHERE Population IS NULL AND CountryCode IS NOT NULL;\nSELECT  SELECT country('ID', 'Name', 'CountryCode', 'District', 'Population') FROM world_1 WHERE Population IS NULL AND CountryCode IS NOT NULL;\nSELECT  SELECT country('ID', 'Name', 'CountryCode', 'District', 'Population') FROM world_1 WHERE Population IS NULL AND CountryCode IS NOT NULL;\nSELECT  SELECT country('ID', 'Name', 'CountryCode', 'District', 'Population') FROM world_1 WHERE Population IS NULL AND"}
{"question": "What are the African countries that have a  population less than any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the African countries that have a  population less than any country in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the African countries that have a  population less than any country in Asia?. \nSELECT  SELECT country.code, \ncountry.name, \nCONCAT(\"http://en.wikipedia.org/wiki/\",country.name) AS url, \ncountry.code AS linkcode,\ncountry.region, \ncountry.surfacearea,\ncountry.indepyear,\ncountry.population,\ncountry.lifeexpectancy,\ncountry.gnp,\ncountry.gnpo,\ncountry.localname,\ncountry.governmentform,\ncountry.headofstate,\ncountry.capital,\ncountry.continent,\ncountry.code2\nFROM country\nWHERE country.continent = \"AFRICA\"\nAND (SELECT population FROM country\nWHERE population < 150000000)\nLIMIT 1;\n\nWhat are the African countries that have a  population less than any country in Asia?. \nSELECT  SELECT country.code, \ncountry.name, \nCONCAT(\"http://en.wikipedia.org/wiki/\",country.name) AS url, \ncountry.code AS linkcode,\ncountry.region, \ncountry.surfacearea,\ncountry.indepyear,\n"}
{"question": "Which African countries have a smaller population than that of any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich African countries have a smaller population than that of any country in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich African countries have a smaller population than that of any country in Asia?. \nSELECT  SELECT COUNT(DISTINCT country.country_code) \nFROM    (\n        SELECT   country.country_code \n        FROM      world_1 \n        WHERE     country.country_name IN \n                    (\n                        'Djibouti'\n                    ) \n        ) country_countries \nWHERE    country_countries.country_code NOT IN \n                    (\n                        SELECT    country.country_code \n                        FROM      world_1 \n                        WHERE     country.country_name IN \n                                    (\n                                        'China',\n                                        'India',\n                                        'Bangladesh',\n                                        'Nigeria',\n                                        'Pakistan',\n                                        'Brazil',\n                                        'USA',\n                                        'Indonesia',\n                                        'Russia',\n                                        'Brazil',\n                                        'Brazil',\n                                        'India',\n                                        'China',\n                                        'China',\n                                        'India',\n                "}
{"question": "Which Asian countries have a population that is larger than any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich Asian countries have a population that is larger than any country in Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich Asian countries have a population that is larger than any country in Africa?. \nSELECT  SELECT CountryCode, CountryName, SurfaceArea, Population\nFROM Country\nWHERE SurfaceArea > 1000000;\nSELECT  SELECT *\nFROM city\nWHERE District in ('Borough of Manhattan', 'Borough of Brooklyn', 'Borough of Queens', 'Borough of Staten Island');\nSELECT  SELECT CityID, CityName, District\nFROM city\nWHERE District = 'Borough of Manhattan';\nSELECT  SELECT CountryCode, CountryName, Language, IsOfficial, Percentage\nFROM countrylanguage\nWHERE CountryCode = 'CN' AND IsOfficial = 1;\nSELECT  SELECT CountryCode, CountryName, Region, SurfaceArea, Population\nFROM country\nWHERE SurfaceArea > 1000000\nAND Continent = 'Asia';\nSELECT  SELECT CityID, CityName\nFROM city\nWHERE District in ('Borough of Manhattan', 'Borough of Brooklyn', 'Borough of Queens', 'Borough of Staten Island');\nSELECT  SELECT CountryCode, CountryName, Continent, Region, SurfaceArea, Population\nFROM country\nWHERE Continent"}
{"question": "What are the Asian countries which have a population larger than that of any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the Asian countries which have a population larger than that of any country in Africa?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the Asian countries which have a population larger than that of any country in Africa?. \nSELECT  SELECT name FROM city WHERE id = 5796 LIMIT 1;\nSELECT  SELECT name FROM city WHERE id = 5798 LIMIT 1;\n\n\n# What are the names of the three countries that have a  population larger than 50,000,000?. \nSELECT  SELECT name FROM city WHERE id IN (14004,14008,14012) LIMIT 1;\n\n# What is the country with the highest population?. \nSELECT  SELECT country.name FROM city, country WHERE city.countrycode = country.code LIMIT 1;\n\n\n# How many German cities are there?. \nSELECT  SELECT city.name FROM city WHERE city.language = 'de' LIMIT 1;\n\n\n# What is the country that has the highest life expectancy?. \nSELECT  SELECT country.name FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'en' LIMIT 1;\n\n\n\n# What is the country that has the highest gross national product?. \nSELECT  SELECT country.name FROM country, countrylanguage WHERE country.code ="}
{"question": "What are the country codes for countries that do not speak English?", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes for countries that do not speak English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes for countries that do not speak English?. \nSELECT  SELECT  countrylanguage.CountryCode, country.Name\nFROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode\nWHERE country.Language = \"notenglish\"\nORDER BY country.Name\nORDER BY country.Name\n"}
{"question": "Return the country codes for countries that do not speak English.", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the country codes for countries that do not speak English.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the country codes for countries that do not speak English.. \n}
{"question": "What are the country codes of countries where people use languages other than English?", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes of countries where people use languages other than English?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes of countries where people use languages other than English?. \nSELECT  SELECT language,\n       SELECT 'Total' AS CountryCode\n       FROM countrylanguage\n       WHERE percentage IS NOT NULL\n       ORDER BY percentage DESC\n       LIMIT 10;\n\nSELECT  SELECT language,\n       SELECT 'Total' AS CountryCode\n       FROM countrylanguage\n       WHERE percentage IS NOT NULL\n       ORDER BY percentage DESC\n       LIMIT 10;\n\n#table('name', 'seq')\nSELECT  SELECT 'Total' AS Name,\n       SELECT 'Total' AS seq\n       FROM sqlite_sequence\n       ORDER BY seq DESC\n       LIMIT 10;\n\n#table('name', 'seq')\nSELECT  SELECT 'Total' AS Name,\n       SELECT 'Total' AS seq\n       FROM sqlite_sequence\n       ORDER BY seq DESC\n       LIMIT 10;\n\n#table('name', 'seq')\nSELECT  SELECT 'Total' AS Name,\n       SELECT 'Total' AS seq\n       FROM sqlite_sequence\n       ORDER BY seq DESC\n       LIMIT 10;\n\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\nSELECT  SELECT 'Total' AS ID,\n       SELECT 'Total'"}
{"question": "Give the country codes for countries in which people speak langauges that are not English.", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the country codes for countries in which people speak langauges that are not English.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the country codes for countries in which people speak langauges that are not English.. \nSELECT  SELECT CountryCode, Language FROM countrylanguage WHERE Code2 = 'US'\n### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the country codes for countries in which people speak langauges that are not English.. \nSELECT  SELECT CountryCode, Language FROM countrylanguage WHERE Code2 = 'ES'\n### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'Ind"}
{"question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the codes of the countries that do not speak English and whose government forms are not Republic?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the codes of the countries that do not speak English and whose government forms are not Republic?. \nSELECT  SELECT city.name as \"City\", city.countrycode as \"CountryCode\", country.name as \"Country\", city.district as \"District\", population.population as \"Population\"\nFROM    city\nJOIN    country\nON      city.countrycode = country.code\nJOIN    population\nON      city.id = population.cityid\nWHERE   city.name = 'Tokyo'\nJOIN    language\nON      country.code = language.countrycode\nWHERE   language.name not in ('English', 'Republic')\nORDER BY city.name ASC\n\n### ANSWER\n\nTokyo,Japan,Japan,Tokyo,13340000\n\n"}
{"question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the codes of countries that do not speak English and do not have Republics for governments.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the codes of countries that do not speak English and do not have Republics for governments.. \nSELECT  SELECT  country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\nFROM world_1\nWHERE NOT countrylanguage('Code', 'Language', 'IsOfficial', 'Percentage') IS NULL\nAND  country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2') IS NOT NULL\nAND country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2') NOT LIKE 'British%'\nAND country('Code', 'Name', 'Continent', 'Region"}
{"question": "Which cities are in European countries where English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich cities are in European countries where English is not the official language?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich cities are in European countries where English is not the official language?. \nSELECT  SELECT  SELECT  country.Code country.Name country.Continent country.Region country.SurfaceArea country.IndepYear country.Population country.LifeExpectancy country.GNP country.GNPOld country.LocalName country.GovernmentForm country.HeadOfState country.Capital country.Code2 city.Name city.District city.Population\nFROM    country\nJOIN    city\nON      city.CountryCode = country.Code\nWHERE   country.Continent = 'Europe'\nAND     country.IndepYear <= 2010\nAND     country.Population > 100000\nAND     country.Continent != 'United Kingdom'\nAND     country.Language IS NULL\nAND     country.Language NOT IN (SELECT Language FROM countrylanguage WHERE Language IS NOT NULL)\nAND     country.Code NOT IN (SELECT CountryCode FROM city WHERE District != 'Central')\nAND     country.CountryCode NOT IN (SELECT CountryCode FROM city)\nORDER BY country.Population DESC\n"}
{"question": "What are the names of cities in Europe for which English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of cities in Europe for which English is not the official language?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of cities in Europe for which English is not the official language?. \nSELECT  SELECT * FROM city WHERE Name LIKE 'W%' AND id >= 100 ORDER BY id;\nSELECT  SELECT * FROM city WHERE Name LIKE 'W%' AND id >= 100 ORDER BY id;"}
{"question": "Which unique cities are in Asian countries where Chinese is the official language ?", "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich unique cities are in Asian countries where Chinese is the official language ?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich unique cities are in Asian countries where Chinese is the official language ?. \nSELECT  SELECT *\nFROM world_1.city, world_1.country, world_1.countrylanguage\nWHERE country.Code = countrylanguage.CountryCode AND country.Name = countrylanguage.Language AND country.Code LIKE '%China%' AND countrylanguage.IsOfficial = 1\nGROUP BY city.Name, city.District, city.Population\nHAVING COUNT(*) = 1\nORDER BY city.Name\n"}
{"question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the different names of cities that are in Asia and for which Chinese is the official language.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the different names of cities that are in Asia and for which Chinese is the official language.. \nSELECT  SELECT city.name FROM city \n\t\tWHERE city.country.name = 'China' AND city.language.name = 'Chinese'\n\t\tORDER BY city.name ASC;\n\nSELECT  SELECT city.name FROM city\n\t\tWHERE city.country.name = 'China' AND city.language.name = 'Chinese'\n\t\tORDER BY city.name ASC;\n\nSELECT  SELECT city.name FROM city \n\t\tWHERE city.country.name = 'China' AND city.language.name = 'Chinese'\n\t\tORDER BY city.name ASC;\n\nSELECT  SELECT city.name FROM city \n\t\tWHERE city.country.name = 'China' AND city.language.name = 'Chinese'\n\t\tORDER BY city.name ASC;\n\nSELECT  SELECT city.name FROM city \n\t\tWHERE city.country.name = 'China' AND city.language.name = 'Chinese'\n\t\tORDER BY city.name ASC;\n\nSELECT  SELECT city.name FROM city \n\t\tWHERE city.country.name = 'China' AND city.language.name ="}
{"question": "What are the name, independence year, and surface area of the country with the smallest population?", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the name, independence year, and surface area of the country with the smallest population?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the name, independence year, and surface area of the country with the smallest population?. \nSELECT  SELECT city.name,\ncountry.independence_year,\ncountry.surface_area\nFROM city JOIN country\nON city.country_code = country.code\nWHERE city.country_code = 'AM'\nORDER BY city.name;\n\n## What is the distance between Boulder City and Boston city?.\n## If you want to know the distance between two cities,\n## you can use the following command.\n## SELECT ST_Distance(geography_point(latitude, longitude, 4326), geography_point(latitude, longitude, 4326));\nSELECT ST_Distance(geography_point(latitude, longitude, 4326), geography_point(latitude, longitude, 4326));\n\n# How many cities are there in the world?.\n# There is no way to know the exact number. \n# Try to get the number of cities using the following command.\n# SELECT COUNT(DISTINCT city.name);\nSELECT COUNT(DISTINCT city.name);\n\n# How many countries are there in the world?.\n# There is no way to know the exact number."}
{"question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name, year of independence, and surface area of the country that has the lowest population.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name, year of independence, and surface area of the country that has the lowest population.. \nSELECT  SELECT * FROM country,  SELECT 2000 FROM countrylanguage WHERE countrycode = SELECT 'Belgium' FROM city WHERE cityid = SELECT countrycode FROM country WHERE countryid = SELECT CountryCode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE CountryCode = SELECT countrycode FROM country WHERE countryid = SELECT countrycode FROM countrylanguage WHERE Country"}
{"question": "What are the population, name and leader of the country with the largest area?", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the population, name and leader of the country with the largest area?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the population, name and leader of the country with the largest area?. \nSELECT  SELECT country.id, country.name, country.population, leader.name \nFROM    country INNER JOIN leader ON leader.country = country.id\nORDER BY country.surfacearea DESC \nLIMIT 1;\n\n# What is the 2nd smallest country in the world by population?. \nSELECT  SELECT country.id, country.name, country.population \nFROM    country \nWHERE   country.surfacearea < 200 \nORDER BY country.population ASC \nLIMIT 1;\n\n# What is the country that has the most inhabitants in Africa?. \nSELECT  SELECT country.id, country.name, country.population \nFROM    country \nWHERE   country.continent = 'Africa' \nORDER BY country.population DESC \nLIMIT 1;\n\n# What is the 2nd most populated country in South America?. \nSELECT  SELECT country.id, country.name, country.population \nFROM    country \nWHERE   country.continent = 'South America' \nAND     country.population > 11000000 \nORDER"}
{"question": "Give the name, population, and head of state for the country that has the largest area.", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name, population, and head of state for the country that has the largest area.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the name, population, and head of state for the country that has the largest area.. \nSELECT  SELECT  'country','name', 'population','head_of_state', 'surface_area', 'name', 'continent', 'region', 'surface_area', 'gnp', 'gnp_old', 'local_name', 'government_form', 'capital', 'country_code', 'language' FROM   country,  SELECT  'country','name', 'population','head_of_state', 'surface_area', 'name', 'continent', 'region', 'surface_area', 'gnp', 'gnp_old', 'local_name', 'government_form', 'capital', 'country_code', 'language' FROM   country,  countrylanguage,  city,   countrylanguage,   city,   city,   country,   country,   city WHERE country.country_code=countrylanguage.country_code AND countrylanguage.city_code=city.ID AND city.country_code=country.country_code  AND country.country_code='GBR' AND country.name='United Kingdom' AND country.population>3592071 ORDER BY surface_area DESC \n"}
{"question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the country name and the numbers of languages spoken for each country that speaks at least 3 languages.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the country name and the numbers of languages spoken for each country that speaks at least 3 languages.. \nSELECT  SELECT country.code  AS country,\n        SELECT sum(county.percentage) AS languages_spoken,\n        FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode\n        GROUP BY country.code\nORDER BY country.name\n\"\"\"\n\n#import sqlite3\nimport pandas as pd\nimport numpy as np\n#from sqlalchemy import create_engine\nfrom sqlalchemy import text\nfrom pandas.io.sql import read_sql\nfrom pandas.core.groupby import GroupBy\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nimport time\nimport timeit\nimport numpy as np\nimport re\nfrom collections import defaultdict\n\n\ndef world_1_sql():\n    with open('world_1.sql') as f:\n        return text(f.read())\n\ndef get_all_countries(conn):\n    engine = create_engine('sqlite:///world_1.db')\n    df = pd.read_sql(world_1_sql(), engine)\n    return df\n\ndef get_languages_spoken(conn):\n    engine"}
{"question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of countries that speak more than 2 languages, as well as how many languages they speak?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of countries that speak more than 2 languages, as well as how many languages they speak?. \nSELECT  SELECT CountryCode, COUNT(*) AS NbLanguages FROM country WHERE NbLanguages > 2 GROUP BY CountryCode ORDER BY NbLanguages DESC\n#SELECT CountryCode, COUNT(*) AS NbLanguages FROM country WHERE NbLanguages > 2 GROUP BY CountryCode ORDER BY NbLanguages DESC\n\nWhat is the country with the lowest life expectancy?\nSELECT CountryName FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country)\n\nWhat is the name of the country with the highest GNP?\nSELECT CountryName FROM country WHERE GNP = (SELECT MAX(GNP) FROM country)\n\n#SELECT CountryCode, SUM(Population) FROM city GROUP BY CountryCode ORDER BY SUM(Population) DESC\n\n#SELECT CountryCode, SUM(Population) FROM city GROUP BY CountryCode ORDER BY SUM(Population) DESC\n#SELECT CountryCode, SUM(Population) FROM city GROUP BY CountryCode ORDER BY SUM(Population) DESC\n\n#SELECT CountryCode, SUM(Population) FROM city GROUP BY CountryCode ORDER BY SUM(Population) DESC\n\n#SELECT CountryCode, SUM(Population) FROM city GROUP"}
{"question": "Find the number of cities in each district whose population is greater than the average population of cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the number of cities in each district whose population is greater than the average population of cities?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the number of cities in each district whose population is greater than the average population of cities?. \nSELECT  SELECT name,\n        COUNT(\n            name\n        )\nFROM city\nWHERE  SELECT name,\n        AVG(\n            population\n        )\nFROM city\nGROUP BY 1\nHAVING COUNT(*) > 0\nGROUP BY 1;\n# SELECT name,\n# COUNT(\n#     name\n# )\n# FROM city\n# WHERE AVG(\n#     population\n# )\n# GROUP BY 1\n# HAVING COUNT(*) > 0\n# GROUP BY 1;\n# SELECT name,\n# COUNT(\n#     name\n# )\n# FROM city\n# GROUP BY 1\n# HAVING AVG(\n#     population\n# )\n# HAVING COUNT(*) > 0\n# GROUP BY 1;\n# SELECT name,\n# COUNT(\n#     name\n# )\n# FROM city\n# GROUP BY 1\n# HAVING AVG(\n#     population\n# )\n# HAVING COUNT(*) > 0\n# GROUP BY 1;\n\n## How to find the district number, whose population is greater than the average population of districts?\nSELECT  SELECT district,\n       "}
{"question": "How many cities in each district have a population that is above the average population across all cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many cities in each district have a population that is above the average population across all cities?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nHow many cities in each district have a population that is above the average population across all cities?. \nSELECT  SELECT name,  AVG(population) AS average\nFROM city  JOIN district  ON city.district = district.id\nGROUP BY name  ORDER BY name\n*\n\n### Compute the average income per person (without the first line, as it is calculated by the CLAUSE)\nSELECT  SELECT name,  AVG(population) AS average\nFROM city  JOIN country  ON city.country = country.id\nGROUP BY name  ORDER BY name\n*\n\n### Use the SQLite Sequence feature to retrieve a list of all the countries in the world\nSELECT  SELECT *\nFROM sqlite_sequence  ORDER BY name\n*\n\n### Let's say that you want to compute the average life expectancy per country\nSELECT  SELECT name,  AVG(lifeExpectancy) AS average\nFROM country  GROUP BY name  ORDER BY name\n*\n"}
{"question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the government form name and total population for each government form whose average life expectancy is longer than 72.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the government form name and total population for each government form whose average life expectancy is longer than 72.. \nSELECT  SELECT  governmentform.Name,  SUM(SELECT  population.Population  FROM  world_1  WHERE  country.CountryCode = governmentform.CountryCode  AND  lifeexpectancy > 72) AS TotalPopulation  FROM  governmentform  JOIN  country  ON  country.Continent = governmentform.Continent  JOIN  countrylanguage  ON  country.CountryCode = countrylanguage.CountryCode  JOIN  population  ON  country.CountryCode = population.CountryCode  GROUP BY governmentform.Name  ORDER BY governmentform.Name\n\n"}
{"question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?. \nSELECT  SELECT\n        Name,  Name,  CountryCode,  District,  Population\nFROM    City c, Country c2, CountryLanguage cl\nWHERE   CountryCode = c2.Code\nAND     cl.CountryCode = c2.Code\nAND     cl.Language = 'English'\nAND     c.District <> 'none'\nAND     cl.Percentage < 0.5\nGROUP   BY  c.Name,  cl.CountryCode,  District,  Population;\n"}
{"question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?. \nSELECT  SELECT country('Continent'), AVG(country('LifeExpectancy')), population(country('Name')) FROM countrygroup where country('LifeExpectancy') < 72 \n\n\n\n### H2 MySQL world_2 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nFind the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?. \nSELECT  SELECT country('Continent'), AVG(country('LifeExpectancy')), population(country('Name')) FROM countrygroup where country('LifeExpectancy') < 72 \n\n\n\n### Oracle Oracle world_3"}
{"question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?. \nSELECT  SELECT DISTINCT CountryCode FROM country WHERE Continent = 'America' AND LifeExpectancy > 72;\n\n\nWhat is the number of world currencies, countries, and languages?\nSELECT  SELECT count(distinct CountryCode) FROM country, language WHERE CountryCode = language.CountryCode;\n\n"}
{"question": "What are the names and areas of countries with the top 5 largest area?", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names and areas of countries with the top 5 largest area?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names and areas of countries with the top 5 largest area?. \nSELECT  SELECT top 5 country.Name AS countryName, \n                                                         (SELECT  SUM(world.SurfaceArea) FROM  world WHERE country.Code = world.CountryCode) AS countryArea,\n                                                         country.Code\nFROM  country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nINNER JOIN countrylanguage.Language AS l\nWHERE  l.Code = 'en' \nORDER  BY  countryArea DESC\n\n#What are the names and areas of countries with the top 5 largest population?. \nSELECT  SELECT top 5 country.Name AS countryName, \n                                                         (SELECT  SUM(world.Population) FROM  world WHERE country.Code = world.CountryCode) AS countryPopulation,\n                                                         country.Code\nFROM  country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nINNER JOIN countrylanguage.Language AS l\nWHERE  l.Code = 'en' \nORDER  BY  countryPopulation DESC\n\n#What is the country with the highest population in the world?. \nSELECT  country.Name AS countryName, country"}
{"question": "Return the names and surface areas of the 5 largest countries.", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names and surface areas of the 5 largest countries.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names and surface areas of the 5 largest countries.. \nSELECT  SELECT_SQLITE_SEQUENCE('name');\nSELECT  SELECT_SQLITE_TABLE('country', 'CountryCode', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2');\nSELECT  SELECT_SQLITE_TABLE('countrylanguage', 'CountryCode', 'Language', 'IsOfficial', 'Percentage');\nSELECT  SELECT_SQLITE_TABLE('city', 'ID', 'Name', 'CountryCode', 'District', 'Population');\n"}
{"question": "What are names of countries with the top 3 largest population?", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are names of countries with the top 3 largest population?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are names of countries with the top 3 largest population?. \nSELECT  SELECT \"country\".\"Code\", \"country\".\"Name\", \"country\".\"Continent\", \"country\".\"Region\", \"country\".\"SurfaceArea\", \"country\".\"IndepYear\", \"country\".\"Population\", \"country\".\"LifeExpectancy\", \"country\".\"GNP\", \"country\".\"GNPOld\", \"country\".\"LocalName\", \"country\".\"GovernmentForm\", \"country\".\"HeadOfState\", \"country\".\"Capital\", \"country\".\"Code2\" FROM \"country\" WHERE \"country\".\"Population\" BETWEEN 1000000 AND 40000000 ORDER BY \"country\".\"Population\" DESC\nWhat are names of countries with the top 3 largest population?. \nSELECT  SELECT \"country\".\"Code\", \"country\".\"Name\", \"country\".\"Continent\", \"country\".\"Region\", \"country\".\"SurfaceArea\", \"country\".\"IndepYear\", \"country\".\"Population\", \"country\".\"LifeExpectancy\", \"country\".\"GNP\", \"country\".\"GNPOld\", \"country\".\"LocalName\", \"country\".\""}
{"question": "Return the names of the 3 most populated countries.", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of the 3 most populated countries.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of the 3 most populated countries.. \nSELECT  SELECT country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2').Name\nFROM country\nWHERE country('Population', CountryCode).Population = 3\nORDER BY country('Population', CountryCode).Population DESC\n\"\n\nReturns the countries with more than 3000000 inhabitants.\n\"\"\"\n\nReturns the countries with more than 3000000 inhabitants.\n\"\"\"\n\nSELECT city('Name', CountryCode) FROM country WHERE country('Population', CountryCode).Population > 3000000 ORDER BY country('Population', CountryCode).Population DESC\n\nReturns the countries with more than 3000000 inhabitants.\n\"\"\"\n\nSELECT country('Name', CountryCode) FROM country WHERE country('Population', CountryCode).Population > 3000000 ORDER BY country('Population', CountryCode).Population"}
{"question": "What are the names of the nations with the 3 lowest populations?", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of the nations with the 3 lowest populations?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of the nations with the 3 lowest populations?. \nSELECT  SELECT Name  FROM  \"world_1\".\"country\"  WHERE  CountryCode IN ('AU', 'KN', 'MP')\nOrder the countries by their total surface area. \nSELECT  SELECT CountryCode, SurfaceArea  FROM  \"world_1\".\"country\"  ORDER BY SurfaceArea DESC\n#>\n#> | CountryCode | SurfaceArea |\n#> |-----------:|------------:|\n#> | 010 | 136,444 km\u00b2 |\n#> | 001 | 9,750,900 km\u00b2 |\n#> | 250 | 8,550 km\u00b2 |\n#> |\n#> [3 rows x 2 columns]\n#>\n#> Relative importance of a country's population is based on how many people in a country represent the total world population. \n#> Find the country with the lowest relative population (percentage) and show its name and population in millions. \n#>\n#> SELECT  SELECT CountryCode, Percentage  FROM  \"world_1\".\"countrylanguage\"  ORDER BY Percentage"}
{"question": "Return the names of the 3 countries with the fewest people.", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of the 3 countries with the fewest people.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of the 3 countries with the fewest people.. \nSELECT  SELECT name FROM city\nWHERE ID IN (\n  SELECT CITY FROM country\nWHERE POPULATION < 2000000\n  )\nORDER BY POPULATION DESC\nLIMIT 3;\n\nReturn the names of the 3 countries with the highest life expectancy. \nSELECT  SELECT name FROM city\nWHERE ID IN (\n  SELECT CITY FROM country\nWHERE LIFEEXPECTANCY > 74\n  )\nORDER BY LIFEEXPECTANCY DESC\nLIMIT 3;\n\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\nSELECT  SELECT name FROM city\nWHERE ID IN (\n  SELECT CITY FROM country\nWHERE LIFEEXPECTANCY > 74\n  )\nORDER BY LIFEEXPE"}
{"question": "how many countries are in Asia?", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nhow many countries are in Asia?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nhow many countries are in Asia?. \nSELECT  SELECT  COUNT(*) AS total FROM country WHERE country.continent = 'asia'\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###"}
{"question": "Count the number of countries in Asia.", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nCount the number of countries in Asia.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nCount the number of countries in Asia.. \nSELECT  SELECT count(*) FROM country WHERE country.continent = 'Asia'\n"}
{"question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of the countries that are in the continent of Europe and have a population of 80000?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the names of the countries that are in the continent of Europe and have a population of 80000?. \nSELECT  SELECT DISTINCT(s.seq) AS name  FROM  FROM sqlite_master s  WHERE  WHERE s.type = 'table'  AND s.name = 'country'  AND\n\n"}
{"question": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of countries that are in Europe and have a population equal to 80000.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the names of countries that are in Europe and have a population equal to 80000.. \nSELECT  SELECT country('Name','Code', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'),\n         county_seq.nextval AS CountryCode,\n         'en' AS Language\nFROM    county_seq\nWHERE   country('Name','Code', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2') = 'EUROPE'\nAND     country('Name','Code', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2') > 80000\nORDER BY country('Name','Code', 'Continent', 'Region',"}
{"question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?. \nSELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\nFROM    SELECT  SELECT  COUNT(*)\n"}
{"question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .. \nSELECT  SELECT name, COUNT(name) AS population, AVG(surfaceArea) AS surfaceArea FROM world_1 WHERE surfaceArea > 3000;\nSELECT  SELECT CountryCode, COUNT(CountryCode) AS population, AVG(surfaceArea) AS surfaceArea FROM country WHERE surfaceArea > 3000;\nSELECT  SELECT CountryCode, COUNT(CountryCode) AS population, AVG(surfaceArea) AS surfaceArea FROM country_language WHERE surfaceArea > 3000;\nSELECT  SELECT CountryCode, COUNT(CountryCode) AS population, AVG(surfaceArea) AS surfaceArea FROM country_language WHERE surfaceArea > 3000 AND IsOfficial = 1;\nSELECT  SELECT CountryCode, COUNT(CountryCode) AS population, AVG(surfaceArea) AS surfaceArea FROM country_language WHERE surfaceArea > 3000 AND IsOfficial = 0;\nSELECT  SELECT CountryCode, COUNT(CountryCode) AS population, AVG(surfaceArea) AS surfaceArea FROM country_language WHERE surfaceArea > 3000 AND IsOfficial = 1 AND Language = 'eng';\nSELECT  SELECT"}
{"question": "What are the cities whose population is between 160000 and 900000?", "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the cities whose population is between 160000 and 900000?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the cities whose population is between 160000 and 900000?. \nSELECT  SELECT city.id, city.name, city.countrycode, city.district, city.population FROM city \nWHERE (city.population > 160000 AND city.population < 900000) \nAND country.countrycode = city.countrycode\norder by city.population asc;\n\n### SQLite SQL world_1 database, with their properties:\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the countries whose population is between 160000 and 900000?. \nSELECT  SELECT country.id, country.name, country.countrycode, country.continent, country.region, country.surfacearea, country.indepyear, country.population, country.lifeexpectancy, country.gn"}
{"question": "Return the names of cities that have a population between 160000 and 900000 .", "sql": "select name from city where population between 160000 and 900000", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of cities that have a population between 160000 and 900000 .. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the names of cities that have a population between 160000 and 900000 .. \nSELECT  SELECT \"name\", \"Population\" FROM \"city\" WHERE (\"Population\" BETWEEN 160000 AND 900000)\n# All the cities in the world\nSELECT  SELECT * FROM \"city\" ORDER BY \"Population\"\n# A list of all countries by population\nSELECT  SELECT \"CountryCode\", \"Population\" FROM \"country\" ORDER BY \"Population\"\n# Show all countries, their population and their local name\nSELECT  SELECT \"CountryCode\", \"Name\", \"LocalName\" FROM \"country\" ORDER BY \"CountryCode\"\n# Show all countries in Europe with their population and local name\nSELECT  SELECT \"CountryCode\", \"Name\", \"LocalName\" FROM \"country\" WHERE (\"Continent\" IN ('Europe', 'Asia')) ORDER BY \"CountryCode\"\n# Countries of the world\nSELECT  SELECT \"CountryCode\", \"Name\", \"Continent\" FROM \"country\" ORDER BY \"CountryCode\"\n# Name of all cities in alphabetical order\nSELECT  SELECT \"name\" FROM \"city\" ORDER BY \"name\"\n# Countries by continent\nSELECT  SELECT \"Continent\", \"Region\" FROM \"country"}
{"question": "Which language is spoken by the largest number of countries?", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is spoken by the largest number of countries?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhich language is spoken by the largest number of countries?. \nSELECT  SELECT name AS language, COUNT(*) AS count\nFROM countrylanguage\nGROUP BY language\nORDER BY count DESC\nLIMIT 1;\n#4.32458\n\nWhich country has the largest number of countries speaking its official language?. \nSELECT  SELECT countrycode AS name, COUNT(*) AS count\nFROM countrylanguage\nWHERE iso2 = 'US'\nGROUP BY countrycode\nORDER BY count DESC\nLIMIT 1;\n#US\n\nHow many countries are there in the world?. \nSELECT  SELECT name AS country, COUNT(*) AS count\nFROM city\nGROUP BY name\nORDER BY count DESC\nLIMIT 1;\n#522\n\nHow many countries have a population greater than 100,000,000?. \nSELECT  SELECT name, population > 100000000 AS qualifier\nFROM city\nGROUP BY name\nHAVING COUNT(*) > 1\nORDER BY name;\n#5\n\nWhich city has the largest population in the world?. \nSELECT  SELECT name, population\nFROM city\nORDER BY population DESC\nLIMIT 1;\n#01100"}
{"question": "Give the language that is spoken in the most countries.", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the language that is spoken in the most countries.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nGive the language that is spoken in the most countries.. \n}
{"question": "What is the language spoken by the largest percentage of people in each country?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the language spoken by the largest percentage of people in each country?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the language spoken by the largest percentage of people in each country?. \nSELECT  SELECT COUNT(*) FROM countrylanguage, country, city\nWHERE country.Code = countrylanguage.CountryCode\nAND city.District = country.Region\nAND city.Name = countrylanguage.Language\nGROUP BY country.CountryCode\nORDER BY COUNT(*) DESC\n\n# city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n# country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n# countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\n# what is the largest country in the world?. \nSELECT  SELECT CountryCode FROM country ORDER BY SurfaceArea DESC \n\n# city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n# country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', '"}
{"question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?. \nSELECT  SELECT COUNT(*), CountryCode FROM country, city WHERE CountryCode = 'US';\nSELECT  SELECT CountryCode, Language, Percentage FROM countrylanguage WHERE CountryCode = 'US';\n\n#retrieve all countries of the world:\nSELECT * FROM country;\n\n#find all the codes of the countries where the population is higher than 200000000\nSELECT CountryCode FROM country WHERE Population > 200000000;\n\n#find all the codes of the countries where the population is lower than 100000000\nSELECT CountryCode FROM country WHERE Population < 100000000;\n\n#find all the codes of the countries where the population is equal to 100000000\nSELECT CountryCode FROM country WHERE Population = 100000000;\n\n#find all the codes of the countries where the population is equal to 100000000 and the country code is a latin character\nSELECT CountryCode FROM country WHERE Population = 100000000 AND CountryCode NOT LIKE '[A-"}
{"question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of countries where Spanish is spoken by the largest percentage of people?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat is the total number of countries where Spanish is spoken by the largest percentage of people?. \nSELECT  SELECT  city.Name,country.Code\n                    FROM city \n                    INNER JOIN country \n                    ON city.CountryCode=country.Code\n                    WHERE city.Population > 500000\n                    GROUP BY city.Name, country.Code \n                    HAVING country.Language = 'Spanish'\n                    ORDER BY city.Name \n"}
{"question": "Count the number of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nCount the number of countries for which Spanish is the predominantly spoken language.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nCount the number of countries for which Spanish is the predominantly spoken language.. \nSELECT  SELECT * FROM countrylanguage WHERE Language = 'spanish' AND is_official = 'true' \n\n\n\"\"\"\n\nimport sys\nimport sqlite3\nfrom Classes import Country\n\n\ndef main():\n    db = Country().world_1_database()\n\n    c_query = \"SELECT * FROM country WHERE CountryCode = 'es'\"\n    c = db.cursor()\n    c.execute(c_query)\n    print \"Number of countries: %d\" % c.fetchone()[0]\n    c.close()\n\n    c_query = \"SELECT * FROM countrylanguage WHERE Language = 'spanish' AND is_official = 'true'\"\n    c = db.cursor()\n    c.execute(c_query)\n    print \"Number of countries: %d\" % c.fetchone()[0]\n    c.close()\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the codes of countries where Spanish is spoken by the largest percentage of people?. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nWhat are the codes of countries where Spanish is spoken by the largest percentage of people?. \nSELECT  SELECT  FROM  FROM  FROM  world_1.country c,  world_1.countrylanguage cl,  world_1.language l WHERE  c.Code = cl.Code AND  c.Code = l.Code AND  l.Name = 'Spanish' AND  cl.Percentage > 40%\n\"\"\"\n\nfrom __future__ import print_function\nimport sqlite3\nfrom collections import defaultdict\n\n\ndef find_matches(item1, item2, list1, list2, out=None):\n    # This function is for checking if two lists share a common element\n    if list1 == list2:\n        return True\n    elif list1 == [] or list2 == []:\n        return False\n    elif list1[0] == list2[0]:\n        return find_matches(item1, list2[1:], list1[1:], list2, out=out)\n    elif list1[0] != list2[0]:\n        return False\n    else:\n        return find_matches(item1, list2[1:], list1[1:], list2, out=out)"}
{"question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the codes of countries for which Spanish is the predominantly spoken language.. \nSELECT ", "response": "### SQLite SQL world_1 database, with their properties:\n#city('ID', 'Name', 'CountryCode', 'District', 'Population')\n#sqlite_sequence('name', 'seq')\n#country('Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2')\n#countrylanguage('CountryCode', 'Language', 'IsOfficial', 'Percentage')\nReturn the codes of countries for which Spanish is the predominantly spoken language.. \nSELECT  SELECT city.id, city.name, city.countryCode, city.district, city.population FROM city \nWHERE city.countryCode = ? AND city.name IN (SELECT name FROM citylanguage WHERE language = 'es' AND percent < 0.05) AND city.population > ? \nORDER BY city.population DESC \nLIMIT 250\n\"\"\"\n\ndef __init__(self):\n    self.database = DB()\n    self.city_table = self.database.get_table('city')\n    self.country_table = self.database.get_table('country')\n    self.citylanguage_table = self.database.get_table('citylanguage')\n\n    self.city_table_id = self.city_table.primary_key\n    self.city_table_name = self.city_table.name\n    self.city_table_countryCode = self.city_table.countryCode\n    self.city_table_district = self.city_table.district\n    self.city_table_population = self.city_table.population\n\n    self"}
{"question": "How many conductors are there?", "sql": "SELECT count(*) FROM conductor", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many conductors are there?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many conductors are there?. \nSELECT  SELECT  SELECT  COUNT(DISTINCT conductor_id)  FROM orchestra\nWrite the results to a file named conductors.csv\nHow many orchestras are there?. \nSELECT  SELECT  SELECT  COUNT(DISTINCT orchestra_id)  FROM orchestra\nWrite the results to a file named orchestras.csv\nHow many performances are there?. \nSELECT  SELECT  SELECT  COUNT(DISTINCT performance_id)  FROM performance\nWrite the results to a file named performances.csv\nHow many shows are there?. \nSELECT  SELECT  SELECT  COUNT(DISTINCT show_id)  FROM show\nWrite the results to a file named shows.csv\nHow many first shows are there?. \nSELECT  SELECT  SELECT  COUNT(DISTINCT if_first_show)  FROM show\nWrite the results to a file named first_shows.csv\nHow many shows are there that are not first shows?. \nSELECT  SELECT  SELECT  COUNT(DISTINCT if_first_show)  != 1  FROM show\nWrite the results to a file named not_first_shows.csv\nHow many shows have less than 1"}
{"question": "Count the number of conductors.", "sql": "SELECT count(*) FROM conductor", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of conductors.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of conductors.. \nSELECT  SELECT  COUNT(*) AS conductor_count FROM conductor;\n\nCount the number of orchestras.. \nSELECT  SELECT  COUNT(*) AS orchestra_count FROM orchestra;\n\nCount the number of performances.. \nSELECT  SELECT  COUNT(*) AS performance_count FROM performance;\n\nCount the number of shows.. \nSELECT  SELECT  COUNT(*) AS show_count FROM show;\n\nAdd the following line to the code below to extract the data from the database.\n\npython manage.py dbshell\n\n#Dump the database to a file\npython manage.py dumpdata conductor orchestra performance\n\n#Set the CONNECT string to the database connection\n#  (an sqlite file)\nCONNECT=\"sqlite:///db.sqlite\"\n\n#Create the database connection\ndb_connection = connect(db_engine='django.db.backends.sqlite3', CONN_MAX_AGE=0, CONNECT='CONNECT',)\n\n#Create the database engine\ndb_engine = create_engine(CONNECT)\n\n#Create a table with the conductor info\ntable_conductor = Table(\n    'con"}
{"question": "List the names of conductors in ascending order of age.", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the names of conductors in ascending order of age.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the names of conductors in ascending order of age.. \nSELECT  SELECT conductor(CONductor_ID, Name, Age, Nationality, Year_of_Work)\n          FROM   conductor\n          ORDER  BY Age ASC\n\nList the names of conductors in descending order of age.. \nSELECT  SELECT conductor(CONductor_ID, Name, Age, Nationality, Year_of_Work)\n          FROM   conductor\n          ORDER  BY Age DESC\n\nList the names of conductors without the year of work.. \nSELECT  SELECT conductor(CONductor_ID, Name, Age, Nationality)\n          FROM   conductor\n          ORDER  BY Age ASC\n\nList the names of conductors with the year of work.. \nSELECT  SELECT conductor(CONductor_ID, Name, Age, Nationality, Year_of_Work)\n          FROM   conductor\n          ORDER  BY Age ASC\n\nList the names of the orchestra in ascending order of age.. \nSELECT  SELECT orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n          FROM   orchestra\n          ORDER "}
{"question": "What are the names of conductors, ordered by age?", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors, ordered by age?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors, ordered by age?. \nSELECT  SELECT conductor.Name, conductor.Age \nFROM    conductor\nORDER BY Age \nLIMIT 30 \n"}
{"question": "What are the names of conductors whose nationalities are not \"USA\"?", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors whose nationalities are not \"USA\"?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors whose nationalities are not \"USA\"?. \nSELECT  SELECT Conductor_ID, Name\nFROM    performance, conductor\nWHERE   performance.Conductor_ID = conductor.Conductor_ID\nAND     Name NOT IN ('Bernstein', 'Davis', 'Gardiner', 'Levine', 'Rattle', 'Rozhdestvensky')\nORDER BY 2 DESC\n\nWhat is the name of the conductor with the most performances?\nSELECT  SELECT Name\nFROM    performance, conductor\nWHERE   performance.Conductor_ID = conductor.Conductor_ID\nORDER BY 2 DESC\n\nWhat is the name of the conductor with the least performances?\nSELECT  SELECT Name\nFROM    performance, conductor\nWHERE   performance.Conductor_ID = conductor.Conductor_ID\nORDER BY 2 ASC\n\nHow many shows has Leonard Bernstein conducted?\nSELECT  SELECT COUNT(Show_ID)\nFROM    performance\nWHERE   performance.Conductor_ID = 'Bernstein'\n\nHow many shows has Vladimir Ashkenazy conducted?\nSELECT  SELECT COUNT(Show_ID)\nFROM    performance\nWHERE   performance.Conductor"}
{"question": "Return the names of conductors that do not have the nationality \"USA\".", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the names of conductors that do not have the nationality \"USA\".. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the names of conductors that do not have the nationality \"USA\".. \nSELECT  SELECT conductor_name FROM conductor WHERE conductor_nationality != 'USA'\n\"\"\"\n\n# This example uses the SQLite database to demonstrate how to:\n# 1. create a database\n# 2. select from it\n\nimport sqlite3\n\n### 1. create a database, with it's name in a variable:\nconn = sqlite3.connect('orchestra.db')\nc = conn.cursor()\n\n### 2. select from it\nc.execute(\"\"\"SELECT  conductor_name FROM conductor WHERE conductor_nationality != 'USA'\"\"\")\n\n### print the result\nprint c.fetchall()\n\n### close connection\nconn.close()\n"}
{"question": "What are the record companies of orchestras in descending order of years in which they were founded?", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the record companies of orchestras in descending order of years in which they were founded?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the record companies of orchestras in descending order of years in which they were founded?. \nSELECT  SELECT orchestra.Record_Company, \n        COUNT(*) as n\nFROM    performance, orchestra\nWHERE   performance.Orchestra_ID = orchestra.Orchestra_ID\nGROUP   BY orchestra.Record_Company\nORDER BY n DESC\n\n\nWhat are the orchestra's majors record formats in descending order of years in which they were founded?. \nSELECT  SELECT orchestra.Major_Record_Format, \n        COUNT(*) as n\nFROM    performance, orchestra\nWHERE   performance.Orchestra_ID = orchestra.Orchestra_ID\nGROUP   BY orchestra.Major_Record_Format\nORDER BY n DESC\n\n\nWhat are the types of performances in descending order of years in which they were first performed?. \nSELECT  SELECT performance.Type, \n        COUNT(*) as n\nFROM    performance, orchestra\nWHERE   performance.Orchestra_ID = orchestra.Orchestra_ID\nGROUP   BY performance.Type\nORDER BY n DESC\n\n\nWhat are the results of performances in descending order of years in which they were first performed?. \nSELECT  SELECT performance.Result, \n        COUNT(*) as"}
{"question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the record companies of orchestras, sorted descending by the years in which they were founded.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the record companies of orchestras, sorted descending by the years in which they were founded.. \nSELECT  SELECT orchestra.conductor_id, orchestra.name, orchestra.age, orchestra.nationality, orchestra.year_of_work, orchestra.record_company, orchestra.year_of_founded, orchestra.major_record_format\nFROM    orchestra\nORDER BY orchestra.year_of_founded DESC\nLIMIT 10\n\nReturn the most successful performances of the year 1966 (second highest attended performance and highest rated performance). \nSELECT  SELECT performance.performance_id, performance.orchestra_id, performance.type, performance.date, performance.official_ratings_millions, performance.weekly_rank, performance.share\nFROM    performance\nWHERE   performance.year = 1966\nORDER BY performance.weekly_rank DESC, performance.share DESC\nLIMIT 2\n\nReturn the record companies and performances of the top 10 orchestras. \nSELECT  SELECT orchestra.conductor_id, orchestra.name, orchestra.age, orchestra.nationality, orchestra.year_of_work, orchestra.record"}
{"question": "What is the average attendance of shows?", "sql": "SELECT avg(Attendance) FROM SHOW", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the average attendance of shows?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the average attendance of shows?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nconductor.Name AS conductor_name,\nCOUNT(performance.Show_ID) AS shows_count\nFROM performance\nJOIN conductor\nON performance.Conductor_ID = conductor.Conductor_ID\nGROUP BY conductor.Name\nORDER BY conductor_name\n### SELECT is used to filter records, and to select a single column \n#(ie, in this case only the count of shows by conductor). \n#GROUP BY is used to group the records by the column conductor.Name. \n#ORDER BY is used to sort the records by the column conductor_name. \n### The following result is the average attendance of shows per conductor: \n#+---+--------------+----------------+\n#| ID| conductor_name| shows_count    |\n#+---+--------------+----------------+\n#| 1 | Simon Rattle | 1700000000     |\n#| 2 | Daniel Barenboim| 520000000      |\n#| 3 | Valery Gergiev  | 2"}
{"question": "Return the average attendance across all shows.", "sql": "SELECT avg(Attendance) FROM SHOW", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the average attendance across all shows.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the average attendance across all shows.. \nSELECT  SELECT  SELECT  SELECT  SELECT\n(\n SELECT\n(SELECT AVG(Ticket_Sales) FROM show)\nFROM show\nGROUP BY Show_ID) AS Total_Sales,\n(SELECT AVG(Ticket_Sales) FROM show)\nFROM performance\nGROUP BY Performance_ID\n\n\n#SELECT\n#(SELECT AVG(Ticket_Sales) FROM show) AS Total_Sales,\n#(SELECT AVG(Ticket_Sales) FROM show)\n#FROM performance\n#GROUP BY Performance_ID"}
{"question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the maximum and minimum share of performances whose type is not \"Live final\".. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the maximum and minimum share of performances whose type is not \"Live final\".. \nSELECT  SELECT_SUBQUERY.PERFORMANCE_ID\nFROM    SELECT_SUBQUERY\nWHERE   SELECT_SUBQUERY.ORCHESTRA_ID = 20\nAND     SELECT_SUBQUERY.TYPE <> \"Live final\"\nAND     SELECT_SUBQUERY.DATE_TIME >= 20110101000000\nAND     SELECT_SUBQUERY.DATE_TIME < 20120101000000\nAND     (SELECT_SUBQUERY.RESULT <> \"Y\"\nOR     SELECT_SUBQUERY.ATTENDANCE <> 100)\nGROUP BY SELECT_SUBQUERY.PERFORMANCE_ID\nHAVING  HAVING_SUBQUERY.COUNT(SELECT_SUBQUERY.TYPE) = 0\nAND     (SELECT_SUBQUERY.RESULT <> \"Y\"\nOR     SELECT_SUBQUERY.ATTENDANCE <> 100)\n;\n\nWhat is the most popular type of performance with Orchestra 20, between 2011 and 2012.. \nSELECT "}
{"question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the maximum and minimum shares for performances that do not have the type \"Live final\".. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nReturn the maximum and minimum shares for performances that do not have the type \"Live final\".. \nSELECT  SELECT Conductor_ID AS \"Conductor\",\n        MAX(CASE WHEN Type <> 'Live final' THEN Share END) AS 'Maximum',\n        MIN(CASE WHEN Type <> 'Live final' THEN Share END) AS 'Minimum'\nFROM performance\nGROUP BY Conductor_ID\nORDER BY Conductor_ID;\n"}
{"question": "How many different nationalities do conductors have?", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many different nationalities do conductors have?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many different nationalities do conductors have?. \nSELECT  SELECT conductor.Name, COUNT(DISTINCT conductor.Name) AS Count\nFROM conductor\nGROUP BY conductor.Name;\n\n#How many different orchestras do conductors have?. \nSELECT  SELECT conductor.Orchestra, COUNT(DISTINCT conductor.Orchestra) AS Count\nFROM conductor\nGROUP BY conductor.Orchestra;\n\n#How many different conductors do orchestras have?. \nSELECT  SELECT conductor.Conductor_ID, COUNT(DISTINCT conductor.Conductor_ID) AS Count\nFROM conductor\nGROUP BY conductor.Conductor_ID;\n\n#Which orchestras have the most conductors?. \nSELECT  SELECT conductor.Orchestra, COUNT(DISTINCT conductor.Orchestra) AS Count\nFROM conductor\nGROUP BY conductor.Orchestra\nORDER BY Count DESC;\n\n#Which conductors have the most orchestras?. \nSELECT  SELECT conductor.Conductor_ID, COUNT(DISTINCT conductor.Conductor_ID) AS Count\nFROM conductor\nGROUP BY conductor.Conductor_ID\n"}
{"question": "Count the number of different nationalities of conductors.", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of different nationalities of conductors.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of different nationalities of conductors.. \nSELECT  SELECT  COUNT(DISTINCT conductor.nationality) AS num_conductors FROM performance, conductor WHERE performance.conductor_id = conductor.id\n\t"}
{"question": "List names of conductors in descending order of years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList names of conductors in descending order of years of work.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList names of conductors in descending order of years of work.. \nSELECT  SELECT  SELECT  SELECT  SELECT\n    Conductor.Name\nFROM    conductor\n    INNER JOIN \n    performance \n        ON performance.Conductor_ID = conductor.Conductor_ID\n    INNER JOIN \n    orchestra  \n        ON orchestra.Orchestra_ID = performance.Orchestra_ID\nWHERE   Conductor.Age > 0\n    AND Conductor.Name IS NOT NULL\nORDER BY \n    Conductor.Year_of_Work DESC\n"}
{"question": "What are the names of conductors, sorted descending by the number of years they have worked?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors, sorted descending by the number of years they have worked?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors, sorted descending by the number of years they have worked?. \nSELECT  SELECT conductor_id, name, age, nationality, year_of_work  FROM conductor  ORDER BY year_of_work DESC \nWhat are the names of orchestras, sorted ascending by the year of the orchestra's foundation?. \nSELECT  SELECT orchestra_id, orchestra, conductor_id, record_company, year_of_founded  FROM orchestra  ORDER BY year_of_founded ASC\n\n#What are the names of performances sorted descending by the number of major record formats (LP, Cassette, CD)?. \nSELECT  SELECT performance_id, orchestra_id, type, date, official_ratings_millions, weekly_rank, share  FROM performance  ORDER BY weekly_rank DESC\n\n#What are the names of shows, sorted descending by the number of official ratings? \nSELECT  SELECT show_id, performance_id, if_first_show, result, attendance  FROM show  ORDER BY attendance DESC\n\n#What are the names of conductors, sorted descending by the number of years they have worked?. \nSELECT  SELECT conductor_id, name, age"}
{"question": "List the name of the conductor with the most years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the name of the conductor with the most years of work.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the name of the conductor with the most years of work.. \nSELECT  SELECT conductor_name, max(years_of_work) FROM conductors GROUP BY conductor_name;\n--------------------------------------------------------------------------------------------------------------------------------\n\nList the conductors with their years of work.. \nSELECT  SELECT conductor_name, years_of_work FROM conductors;\n--------------------------------------------------------------------------------------------------------------------------------\n\nList the orchestra with the oldest year of founded.. \nSELECT  SELECT orchestra_name, min(year_of_founded) FROM orchestra GROUP BY orchestra_name;\n--------------------------------------------------------------------------------------------------------------------------------\n\nList the orchestra with the highest record sales.. \nSELECT  SELECT orchestra_name, sum(record_sales) FROM orchestra GROUP BY orchestra_name;\n--------------------------------------------------------------------------------------------------------------------------------\n\nList the orchestra with the most recent year.. \nSELECT  SELECT orchestra_name, max(year_of_founded) FROM orchestra GROUP BY orchestra_name;\n--------------------------------------------------------------------------------------------------------------------------------\n\nList the orchestra with the highest sales.. \nSELECT  SELECT orchestra_name, sum(record_sales) FROM orchestra GROUP BY or"}
{"question": "What is the name of the conductor who has worked the greatest number of years?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the name of the conductor who has worked the greatest number of years?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the name of the conductor who has worked the greatest number of years?. \n}
{"question": "Show the names of conductors and the orchestras they have conducted.", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the names of conductors and the orchestras they have conducted.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the names of conductors and the orchestras they have conducted.. \nSELECT  SELECT  SELECT  SELECT\n    Name,\n    Age,\n    Nationality,\n    Year_of_Work\nFROM\n    Conductor\nORDER\n    BY\n        Name\n#    LIMIT\n        Name\n##ORDER BY\n#    NAME\n##ORDER BY\n#    NAME\n\n\n"}
{"question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors as well as the corresonding orchestras that they have conducted?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors as well as the corresonding orchestras that they have conducted?. \nSELECT  SELECT conductor.Conductor_ID, \n                        conductor.Name,\n                        conductor.Age,\n                        conductor.Nationality,\n                        conductor.Year_of_Work\nFROM conductor JOIN  orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\n\nSELECT  SELECT orchestra.Orchestra_ID, \n                        orchestra.Orchestra,\n                        conductor.Conductor_ID,\n                        orchestra.Record_Company,\n                        orchestra.Year_of_Founded,\n                        orchestra.Major_Record_Format\nFROM conductor JOIN  orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\n\nSELECT  SELECT performance.Performance_ID, \n                        orchestra.Orchestra_ID,\n                        performance.Type,\n                        performance.Date,\n                        performance.Official_ratings_(millions),\n                        performance.Weekly_rank,\n                        performance.Share\nFROM performance JOIN  orchestra ON performance.Orchestra_ID = orchestra."}
{"question": "Show the names of conductors that have conducted more than one orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the names of conductors that have conducted more than one orchestras.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the names of conductors that have conducted more than one orchestras.. \nSELECT  SELECT \"Name\", COUNT(\"Orchestra_ID\") as \"Conductor_Orchestras\", \nFROM Conductor, Orchestra\nWHERE Conductor.Conductor_ID = Orchestra.Conductor_ID\nGROUP BY \"Name\"\nORDER BY \"Conductor_Orchestras\" DESC;\n\n"}
{"question": "What are the names of conductors who have conducted at more than one orchestra?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors who have conducted at more than one orchestra?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors who have conducted at more than one orchestra?. \nSELECT  SELECT_COLUMN_0, conductor.Name AS SELECT_COLUMN_1\nFROM    conductor\nWHERE   EXISTS (SELECT 1\n               FROM orchestra\n               WHERE orchestra.Conductor_ID = conductor.Conductor_ID\n               AND   orchestra.Orchestra_ID IN ('DSO', 'NHK', 'LSO', 'ECO', 'LPO', 'TSO', 'BBCO', 'RPO', 'RTEO'))\nORDER BY\n        Name\n\n\n"}
{"question": "Show the name of the conductor that has conducted the most number of orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the name of the conductor that has conducted the most number of orchestras.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the name of the conductor that has conducted the most number of orchestras.. \nSELECT  SELECT * FROM conductor WHERE conductor_id = (SELECT conductor_id FROM performance WHERE performance_id = (SELECT performance_id FROM orchestra WHERE orchestra_id = (SELECT orchestra_id FROM performance WHERE performance_id = (SELECT performance_id FROM show WHERE show_id = (SELECT show_id FROM performance WHERE performance_id = (SELECT performance_id FROM orchestra WHERE orchestra_id = (SELECT orchestra_id FROM performance WHERE performance_id = (SELECT performance_id FROM show WHERE show_id = (SELECT show_id FROM performance WHERE performance_id = (SELECT performance_id FROM orchestra WHERE orchestra_id = (SELECT orchestra_id FROM performance WHERE performance_id = (SELECT performance_id FROM show WHERE show_id = (SELECT show_id FROM performance WHERE performance_id = (SELECT performance_id FROM orchestra WHERE orchestra_id = (SELECT orchestra_id FROM performance WHERE performance_id = (SELECT performance_id FROM show WHERE show_id = (SELECT show_id FROM performance WHERE performance_id = (SELECT performance_id FROM orchestra WHERE orchestra_id = (SELECT orchestra_id FROM performance WHERE performance_id = (SELECT"}
{"question": "What is the name of the conductor who has conducted the most orchestras?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the name of the conductor who has conducted the most orchestras?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the name of the conductor who has conducted the most orchestras?. \nSELECT  SELECT conductor_id, name, COUNT(*)\nFROM    performance\nJOIN    orchestra\nON      orchestra.orchestra_id = performance.orchestra_id\nJOIN    conductor\nON      conductor.conductor_id = orchestra.conductor_id\nGROUP BY conductor_id, name\nHAVING  COUNT(*) > 1\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n"}
{"question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the name of the conductor that has conducted orchestras founded after 2008.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the name of the conductor that has conducted orchestras founded after 2008.. \nSELECT  SELECT conductor.Name AS ConductorName,\n         COUNT(show.Performance_ID) AS NumberOfShows\nFROM    show\nJOIN    performance\nON      performance.Performance_ID = show.Performance_ID\nJOIN    conductor\nON      conductor.Conductor_ID = performance.Conductor_ID\nWHERE   performance.Orchestra_ID IN (\n                SELECT  Orchestra_ID\n                FROM    orchestra\n                WHERE   Year_of_Founded >= 2008\n                )\nGROUP   BY  conductor.Name\nHAVING  COUNT(show.Performance_ID) >= 1\nORDER   BY  ConductorName ASC;\n#This query requires to join the tables show and performance with the \n#table conductor. We can't use a simple select since the result is not\n#useful without joining those tables. \n#We can't use a simple select since we need to JOIN 3 tables to get the\n#results.\n"}
{"question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors who have conducted orchestras founded after the year 2008?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the names of conductors who have conducted orchestras founded after the year 2008?. \n}
{"question": "Please show the different record companies and the corresponding number of orchestras.", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the different record companies and the corresponding number of orchestras.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the different record companies and the corresponding number of orchestras.. \nSELECT  SELECT  Select orchestra FROM orchestra GROUP BY Record_Company \n\n# You can use 2 tables to make a many to many relationship between them. \n#e.g. \n#user('User_ID', 'Username', 'Password', 'Favorite_Fruit', 'Age', 'User_Level') \n#favorite_fruit('Fruit_ID', 'Name', 'Favorite_Fruit') \n#user_favorite('User_ID', 'Favorite_Fruit_ID')\n\n# Please show the different users and their favorite fruits. \nSELECT  SELECT  Select user, favorite_fruit FROM user, favorite_fruit, user_favorite \n          WHERE user.user_id=user_favorite.user_id \n          AND favorite_fruit.fruit_id=user_favorite.favorite_fruit_id \n          GROUP BY user, favorite_fruit \n\n\n##Show the different record companies and the corresponding number of orchestras. \n#SELECT  SELECT  Select orchestra FROM orchestra GROUP BY Record_Company \n"}
{"question": "How many orchestras does each record company manage?", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many orchestras does each record company manage?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nHow many orchestras does each record company manage?. \nSELECT  SELECT COUNT(*) AS n, \n        COUNT(DISTINCT Conductor_ID) AS c, \n        COUNT(DISTINCT Orchestra_ID) AS o, \n        COUNT(DISTINCT Performance_ID) AS p,\n        COUNT(DISTINCT Show_ID) AS s,\n        COUNT(DISTINCT Result) AS r,\n        COUNT(DISTINCT Attendance) AS a\nFROM     Performance \nGROUP BY Record_Company\n\n# Evaluation of record companies with their number of orchestras, performances, shows and their mean scores\nSELECT   CONCAT(\"Record_Company: \", Record_Company) AS label,\n         COUNT(DISTINCT Conductor_ID) AS c,\n         COUNT(DISTINCT Orchestra_ID) AS o,\n         COUNT(DISTINCT Performance_ID) AS p,\n         COUNT(DISTINCT Show_ID) AS s,\n         AVG(Result) AS score\nFROM     Performance\nGROUP BY Record_Company\n\n# Evaluation of record companies with their number of orchestras, performances, shows and their mean scores\nSELECT   CONCAT(\"Record_Company: \", Record"}
{"question": "Please show the record formats of orchestras in ascending order of count.", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the record formats of orchestras in ascending order of count.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nPlease show the record formats of orchestras in ascending order of count.. \nSELECT  SELECT_column FROM  table_name  WHERE  keyword \nLIMIT 10\n\"\"\"\n\n\nimport sqlite3 as lite\nimport sys\n\n#load database connection information\nconn = lite.connect('SQLLite.db')\n\n\ndef get_record_count_by_field(query, field):\n    \"\"\"Return the number of records according to the given field\n\n    :param query:\n    :param field:\n    :return:\n    \"\"\"\n    return conn.execute(\"SELECT COUNT(*) FROM \" + query).fetchall()[0][0]\n\n\ndef get_records_by_field(query, field):\n    \"\"\"Return the records according to the given field\n\n    :param query:\n    :param field:\n    :return:\n    \"\"\"\n    return conn.execute(\"SELECT * FROM \" + query).fetchall()\n\n\ndef get_first_record(query):\n    \"\"\"Return the first record of the table\n\n    :param query:\n    :return:\n    \"\"\"\n    return conn.execute(\"SELECT * FROM \" + query).fetchone()\n\n\ndef get_"}
{"question": "What are the major record formats of orchestras, sorted by their frequency?", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the major record formats of orchestras, sorted by their frequency?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the major record formats of orchestras, sorted by their frequency?. \nSELECT  SELECT  orchestra.orchestra\n        ,count(show.show) frequency\nFROM    performance, orchestra\nWHERE  performance.performance_id = orchestra.orchestra_id\nGROUP   BY orchestra.orchestra\nORDER   BY frequency DESC\n# SELECT orchestra.orchestra, count(performance.performance_id) AS frequency FROM orchestra INNER JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.orchestra ORDER BY frequency DESC\n\nwhat are the types of shows?\nSELECT  SELECT  show.show\n        ,count(performance.performance_id) AS frequency\nFROM    performance, show\nWHERE  performance.performance_id = show.show\nGROUP   BY show.show\nORDER   BY frequency DESC\n# SELECT show.show, count(performance.performance_id) AS frequency FROM performance INNER JOIN show ON performance.performance_id = show.show GROUP BY show.show ORDER BY frequency DESC\n\n\n\n"}
{"question": "List the record company shared by the most number of orchestras.", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the record company shared by the most number of orchestras.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the record company shared by the most number of orchestras.. \nSELECT  SELECT *  FROM conductor  JOIN orchestra \nON orchestra.conductor_id = conductor.id \nGROUP BY conductor.id \nORDER BY COUNT(*) DESC;\n"}
{"question": "What is the record company used by the greatest number of orchestras?", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the record company used by the greatest number of orchestras?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat is the record company used by the greatest number of orchestras?. \nSELECT  SELECT orchestra.Record_Company FROM orchestra INNER JOIN conductor ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY Record_Company ORDER BY COUNT(Record_Company) DESC;\n\n\n\n"}
{"question": "List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the names of orchestras that have no performance.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nList the names of orchestras that have no performance.. \nSELECT  SELECT  DISTINCT Orchestra FROM Performance\n    WHERE  WHERE  Performance.Date IS NULL\n    OR     OR     Performance.Result IS NULL\n    OR     OR     Performance.Attendance IS NULL\n    OR     OR     Performance.Share IS NULL;\n#Print the concert dates and orchestra names.\nSELECT  DISTINCT  Performance.Date,\n    Orchestra.Orchestra,\n    Conductor.Name,\n    Conductor.Age,\n    Conductor.Nationality,\n    Conductor.Year_of_Work\nFROM    Performance\n    INNER  INNER  JOIN Orchestra\n        ON Performance.Orchestra_ID = Orchestra.Orchestra_ID\n    INNER  INNER  JOIN Conductor\n        ON Orchestra.Conductor_ID = Conductor.Conductor_ID\n    ORDER BY Performance.Date;\n#Retrieve all performances for Beethoven 9th (Symphony No. 9)\nSELECT  Performance.Date,\n    Orchestra.Orchestra,\n    Conductor.Name,\n    Conductor.Age,\n    Conductor.Nationality,\n    Conductor.Year_of_"}
{"question": "What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the orchestras that do not have any performances?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the orchestras that do not have any performances?. \nSELECT  SELECT COUNT(*) FROM performance WHERE orchestra_id IS NULL\nHow many performances have been conducted by Conductor_ID in the last 2 years?. \nSELECT  SELECT COUNT(*) FROM performance WHERE performance_id IN (SELECT performance_id FROM performance WHERE conductor_id = 'Conductor_ID' AND date >= '2013-01-01' AND date <= '2015-01-01')\nHow many shows has Conductor_ID performed during the last 2 years?. \nSELECT  SELECT COUNT(*) FROM performance WHERE performance_id IN (SELECT performance_id FROM performance WHERE conductor_id = 'Conductor_ID' AND date >= '2013-01-01' AND date <= '2015-01-01')"}
{"question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the record companies shared by orchestras founded before 2003 and after 2003.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the record companies shared by orchestras founded before 2003 and after 2003.. \nSELECT  SELECT * FROM orchestra  WHERE Year_of_Founded<2003\nUNION\nSELECT  SELECT * FROM orchestra  WHERE Year_of_Founded>=2003\nORDER BY Show_ID, Date\n"}
{"question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?. \n}
{"question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nFind the number of orchestras whose record format is \"CD\" or \"DVD\".. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nFind the number of orchestras whose record format is \"CD\" or \"DVD\".. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM\nconductor  orchestra  performance  show  show  show  show  show  show  show  show  show  show  show  show  show  show\nWHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE    WHERE\n(Type = 'CD' OR Type = 'DVD')\nAND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND\n(Orchestra = 1 OR Orchestra = 2 OR Orchestra = 3)\nAND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND     AND\n(Date <= '2003-11-01' AND Date >= '2"}
{"question": "Count the number of orchestras that have CD or DVD as their record format.", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of orchestras that have CD or DVD as their record format.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nCount the number of orchestras that have CD or DVD as their record format.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT"}
{"question": "Show the years in which orchestras that have given more than one performance are founded.", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the years in which orchestras that have given more than one performance are founded.. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nShow the years in which orchestras that have given more than one performance are founded.. \nSELECT  SELECT orchestra.orchestra_id,\n            count(performance.performance_id) as No_performances,\n            year(performance.date) as Year_of_Founded\nFROM    performance\n            LEFT JOIN orchestra ON orchestra.orchestra_id = performance.orchestra_id\nGROUP BY\n            year(performance.date),\n            orchestra.orchestra_id\nORDER BY\n            Year_of_Founded DESC\nLIMIT   10\n"}
{"question": "What are years of founding for orchestras that have had more than a single performance?", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are years of founding for orchestras that have had more than a single performance?. \nSELECT ", "response": "### SQLite SQL orchestra database, with their properties:\n#conductor('Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work')\n#orchestra('Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format')\n#performance('Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share')\n#show('Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance')\nWhat are years of founding for orchestras that have had more than a single performance?. \nSELECT  SELECT  DISTINCT \n                orchestra.orchestra\n             , \n                orchestra.year_of_founded\n             , \n                performance.date\n             , \n                performance.weekly_rank\n             , \n                performance.share\n             , \n                performance.result\n             , \n                performance.attendance\n             , \n                performance.performance_id\n             , \n                performance.orchestra_id\n             , \n                performance.type\n             , \n                performance.rating\n             , \n                performance.show_id\n             , \n                performance.if_first_show\n             , \n                performance.official_ratings\nFROM \n    performance\n        INNER JOIN \n    orchestra ON \n        performance.orchestra_id = orchestra.orchestra_id\n        AND performance.orchestra_id IS NOT NULL \nWHERE \n    orchestra.year_of_founded IS NOT NULL \n    AND orchestra.year_of_founded >= 2001 \n    AND orchestra.year_of_founded <= 2017"}
{"question": "How many high schoolers are there?", "sql": "SELECT count(*) FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are there?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are there?. \nSELECT  SELECT count(*) FROM highschooler;\n#> 10\n\nHow many high schoolers in the 10th grade?. \nSELECT  SELECT count(*) FROM highschooler WHERE grade = 10;\n#> 2\n\nHow many high schoolers are there that like 2016?. \nSELECT  SELECT count(*) FROM highschooler JOIN likes ON likes.student_id = highschooler.ID WHERE likes.liked_id = 2016;\n#> 2\n\nHow many high schoolers are there that like both 2016 and 2017?. \nSELECT  SELECT count(*) FROM highschooler JOIN likes ON likes.student_id = highschooler.ID WHERE likes.liked_id = 2016 AND likes.liked_id = 2017;\n#> 1\n\nHow many high schoolers are there that like both 2016 and 2017?. \nSELECT  SELECT count(*) FROM highschooler JOIN likes ON likes.student_id = highschooler.ID WHERE likes.lik"}
{"question": "Count the number of high schoolers.", "sql": "SELECT count(*) FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of high schoolers.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of high schoolers.. \nSELECT  SELECT count(ID)\nFROM Highschooler \n;\nHighschooler \n# ID \n# 1 \n# 2 \n# 3 \n# 4 \n# 5 \n# 6 \n# 7 \n# 8 \n# 9 \n# 10\n\nCount the number of friends.. \nSELECT  SELECT count(student_id)\nFROM Friend\n;\nFriend \n# student_id \n# 1 \n# 2 \n# 3 \n# 4 \n# 5 \n# 6 \n# 7 \n# 8 \n# 9 \n# 10\n\nCount the number of like records.. \nSELECT  SELECT count(liked_id)\nFROM Likes\n;\nLikes \n# liked_id \n# 1 \n# 2 \n# 3 \n# 4 \n# 5 \n# 6 \n# 7 \n# 8 \n# 9 \n# 10\n\n# 0.5\n# CREATE TABLE Highschooler"}
{"question": "Show the names and grades of each high schooler.", "sql": "SELECT name ,  grade FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names and grades of each high schooler.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names and grades of each high schooler.. \nSELECT  SELECT  'Highschooler', hs.ID, hs.name, hs.grade  FROM  Highschooler hs \n\nShow the student_id, friend_id of each pair of friends.. \nSELECT  SELECT  'Friend', fr.student_id, fr.friend_id  FROM  Friend fr \n\nShow the student_id, liked_id of each pair of liking.. \nSELECT  SELECT  'Likes', ls.student_id, ls.liked_id  FROM  Likes ls \n\nShow the student_id, friend_id of each pair of friends, and the student_id, liked_id of each pair of liking.. \nSELECT  SELECT  'Friend' AS student_id, fr.friend_id \nUNION  SELECT  SELECT  'Likes', ls.liked_id \nFROM  Friend fr \nJOIN  Likes ls \nON  fr.student_id = ls.liked_id \n\n\"\"\"\n\n__author__ = \"Alex Raghavan\"\n\n\nfrom sqlalchemy import *\nfrom sqlalchemy"}
{"question": "What are the names and grades for each high schooler?", "sql": "SELECT name ,  grade FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names and grades for each high schooler?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names and grades for each high schooler?. \nSELECT  SELECT  FROM  FROM  FROM  HIGHSCHOOLER\n#return student_id, name, grade\n#return grade, student_id, name\n#return name, student_id, grade\n#return student_id, grade, name\n\nWhat is the name of the friend of the highschooler with id 1?. \nSELECT  SELECT  FROM  FROM  FROM  FRIEND\n#return student_id, friend_id\n#return friend_id, student_id\n#return student_id, friend_id, friend_id\n#return friend_id, friend_id, student_id\n\nWhat is the name of the friend of the highschooler with id 2?. \nSELECT  SELECT  FROM  FROM  FROM  FRIEND\n#return student_id, friend_id\n#return friend_id, student_id\n#return student_id, friend_id, friend_id\n#return friend_id, friend_id, student_id\n\nWhat is the name of the friend of the highschooler with id 3?. \nSELECT  SELECT  FROM  FROM  FROM  FRIEND\n#return"}
{"question": "Show all the grades of the high schoolers.", "sql": "SELECT grade FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow all the grades of the high schoolers.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow all the grades of the high schoolers.. \nSELECT  SELECT COUNT(*) AS n FROM Highschooler WHERE grade IS NOT NULL;\n#This gives the total number of highschoolers, so we can tell if there are any missing grades.\n#We can then show the missing grades, or show the grades of all highschoolers.\nHighschooler.find_all(where: 'grade IS NULL')\nHighschooler.find_all(order: 'grade DESC')\n#Find the highschoolers who have at least a B average (GPA of 3.0 or higher)\nHighschooler.find_all(where: 'grade > 3.0')\n#Find the highschoolers who have a GPA lower than 2.0.\nHighschooler.find_all(where: 'grade < 2.0')\n#Find the highschoolers who have at least a B average (GPA of 3.0 or higher).\nHighschooler.find_all(where: 'grade >= 3.0')\n#Find all highschoolers who have a GPA higher than 2.5.\nHighschooler.find_all(where: 'grade > 2.5')\n"}
{"question": "What is the grade of each high schooler?", "sql": "SELECT grade FROM Highschooler", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the grade of each high schooler?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the grade of each high schooler?. \nSELECT  SELECT  SELECT  SELECT  SELECT \nFROM    FROM    FROM    FROM    FROM   \nHighschooler JOIN Likes\n        ON  Likes.student_id = Highschooler.ID\n        AND Likes.liked_id = 1\n        AND Highschooler.grade = 99\n        AND Likes.liked_id = 2\n        AND Likes.liked_id = 3\n        AND Likes.liked_id = 4\n        AND Highschooler.grade = 100\n        AND Likes.liked_id = 1\n        AND Likes.liked_id = 2\n        AND Likes.liked_id = 3\n        AND Highschooler.grade = 77;\n\"\"\"\n\n\n# --- Day 4: Unordered Join ---\n\n# Task description\n# Each of the \"Highschooler\" records has a 1-to-many relationship with the \"Likes\" table.\n# If the \"Highschooler\" table is unordered, we can't just join them together:\n# If you think about it, there are two possible ways"}
{"question": "What grade is Kyle in?", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat grade is Kyle in?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat grade is Kyle in?. \nSELECT  SELECT  student_id, name FROM  Highschooler  WHERE  grade=3;\n\nWhat grade is Tony in?. \nSELECT  SELECT  student_id, name FROM  Highschooler  WHERE  grade<3;\n\nWhat is the last name of a student with a grade of 4?. \nSELECT  SELECT  name FROM  Highschooler  WHERE  grade=4;\n\nWhat is the name of a student with a grade of 2?. \nSELECT  SELECT  name FROM  Highschooler  WHERE  grade=2;\n\nHow many students have a grade of 3? \nSELECT  SELECT  COUNT(grade) FROM  Highschooler;\n\n\n"}
{"question": "Return the grade for the high schooler named Kyle.", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the grade for the high schooler named Kyle.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the grade for the high schooler named Kyle.. \nSELECT  SELECT('name','name') FROM 'Student' WHERE 'name' = 'Kyle';\n\nReturn the name for the high schooler with id 1.. \nSELECT  SELECT('name','name') FROM 'Student' WHERE 'ID' = '1';\n\nReturn the names for all high schoolers.. \nSELECT  SELECT('name','name') FROM 'Student';\n\nReturn the grades for all high schoolers.. \nSELECT  SELECT('grade','name') FROM 'Student';\n\nReturn the names for all high schoolers.. \nSELECT  SELECT('name','name') FROM 'Student';\n\nReturn the grades for all high schoolers.. \nSELECT  SELECT('grade','name') FROM 'Student';\n\nReturn the names and grades for all high schoolers.. \nSELECT  SELECT('name','name') FROM 'Student';\n\nReturn the names and grades for all high schoolers.. \nSELECT  SELECT('grade','name') FROM 'Student';\n\nReturn the names for all high schoolers.. \nSELECT  SELECT('name','name') FROM 'Student';\n\nReturn the grades for all high schoolers.. \nSELECT  SELECT('"}
{"question": "Show the names of all high schoolers in grade 10.", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of all high schoolers in grade 10.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of all high schoolers in grade 10.. \nSELECT  SELECT  Highschooler.name\nFROM    Highschooler \nWHERE   Highschooler.grade BETWEEN 10 AND 12\n#Show the names of all students who are friends with the student with ID 77.\nSELECT  SELECT  Friend.friend_id AS friend_name\nFROM    Friend\nWHERE   Friend.student_id = 77\n#Show all students who like the student with ID 77.\nSELECT  SELECT  Likes.liked_id AS liked_name\nFROM    Likes\nWHERE   Likes.student_id = 77\n\n\n\n"}
{"question": "What are the names of all high schoolers in grade 10?", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of all high schoolers in grade 10?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of all high schoolers in grade 10?. \n}
{"question": "Show the ID of the high schooler named Kyle.", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the ID of the high schooler named Kyle.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the ID of the high schooler named Kyle.. \nSELECT  SELECT 'student_id' AS id, 'Kyle' AS name, 100 AS grade \nFROM    Highschooler WHERE grade >= 100;\n\n# Show the ID of the person who likes Kyle..\nSELECT  SELECT id, name FROM Likes WHERE liked_id = 'Kyle';\n\n# Show the ID of the high schooler who likes Kyle..\nSELECT  SELECT student_id FROM Likes WHERE liked_id = 'Kyle';\n\n# Show the ID of the student who has grade less than 100..\nSELECT  SELECT 'student_id' AS id FROM Highschooler\nWHERE grade < 100;\n\n# Show the name of the person who likes Kyle..\nSELECT  SELECT name FROM Likes WHERE liked_id = 'Kyle';\n\n# Show the student who has grade less than 100..\nSELECT  SELECT 'student_id' AS id, 'name' AS name, grade AS grade\nFROM    Highschooler\nWHERE   grade < 100;\n\n# Show the name of the high schooler who likes Kyle..\nSELECT  SELECT name"}
{"question": "What is Kyle's id?", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is Kyle's id?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is Kyle's id?. \n}
{"question": "How many high schoolers are there in grade 9 or 10?", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are there in grade 9 or 10?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are there in grade 9 or 10?. \nSELECT  SELECT COUNT(*) FROM Highschooler WHERE grade in (9, 10)\n\nHighschooler('ID', 'name', 'grade')\nHighschooler('1', 'Joe', '10')\nHighschooler('2', 'Mark', '10')\nHighschooler('3', 'Peter', '10')\nHighschooler('4', 'Max', '9')\nHighschooler('5', 'Peter', '9')\nHighschooler('6', 'Joe', '9')\nHighschooler('7', 'Tom', '9')\nHighschooler('8', 'Peter', '9')\nHighschooler('9', 'Mary', '9')\nHighschooler('10', 'Tom', '9')\nHighschooler('11', 'Peter', '9')\nHighschooler('12', 'Joe', '9')\nHighschooler('13', 'Mary', '9')\nHighschooler('14', 'Joe', '9')\nHighschooler('15', 'Tom', '9')\nHighschooler('16', 'Max', '9')\nHigh"}
{"question": "Count the number of high schoolers in grades 9 or 10.", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of high schoolers in grades 9 or 10.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of high schoolers in grades 9 or 10.. \nSELECT  SELECT \nFROM    FROM   \nWHERE   WHERE  \n\n\n"}
{"question": "Show the number of high schoolers for each grade.", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the number of high schoolers for each grade.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the number of high schoolers for each grade.. \nSELECT  SELECT  COUNT(name) as numStudents,\n          name  name\nFROM    FROM    Highschooler  Highschooler\nGROUP   GROUP   BY    BY    grade\nORDER   ORDER   BY    BY    descending\n\n-- Highschooler('ID', 'name', 'grade')\n-- Friend('student_id', 'friend_id')\n-- Likes('student_id', 'liked_id')\nShow the number of students in each grade that have at least one friend.. \nSELECT  SELECT  COUNT(name) as numFriends,\n          name  name\nFROM    FROM    Highschooler  Highschooler\nJOIN    JOIN    Friend  Friend\nON      ON      Highschooler.student_id  Friend.student_id\nGROUP   GROUP   BY    BY    grade\nORDER   ORDER   BY    BY    descending\n\n\nShow the number of students in each grade that have no friends.. \nSELECT  SELECT  COUNT(name) as numLoners,\n          name  name\nFROM    FROM    Highschooler  Highschooler\nJOIN    JOIN    Friend  Friend\nON      ON      Highschooler.student"}
{"question": "How many high schoolers are in each grade?", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are in each grade?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are in each grade?. \nSELECT  SELECT  name, COUNT(name) FROM  'network_1'.highschooler\nGROUP BY name HAVING COUNT(name) > 1\nORDER BY name;\n\nHow many high schoolers are there in all?. \nSELECT  SELECT  COUNT(name) FROM  'network_1'.highschooler\nGROUP BY name;\n\nHow many students are there?. \nSELECT  SELECT  COUNT(student_id) FROM  'network_1'.Friend\nORDER BY student_id;\n\nHow many students like each of the high schoolers?. \nSELECT  SELECT  COUNT(liked_id) FROM  'network_1'.Likes\nWHERE  student_id = 'network_1'.highschooler.name;\n\n# SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many high schoolers are in each grade?. \nSELECT  SELECT  name, COUNT(name) FROM  'network_1'.highschooler\nGROUP BY name H"}
{"question": "Which grade has the most high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhich grade has the most high schoolers?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhich grade has the most high schoolers?. \nSELECT  SELECT\n    highschooler_grade.grade \nFROM    highschooler_grade\n    JOIN highschooler ON highschooler_grade.grade_id = highschooler.grade_id\nWHERE   COUNT(*) >= ALL (\n    SELECT  COUNT(*)\n    FROM    highschooler\n    WHERE   highschooler.grade_id = highschooler_grade.grade_id\n);\n\n\n### MySQL 0.1 database, with their properties:\n#Highschooler('id', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhich grade has the most high schoolers?. \nSELECT  SELECT\n    highschooler_grade.grade \nFROM    highschooler_grade\n    JOIN highschooler ON highschooler_grade.grade_id = highschooler.grade_id\nWHERE   COUNT(*) >= ALL (\n    SELECT  COUNT(*)\n    FROM    highschooler\n    WHERE   highschooler.grade_id = highschooler_grade.grade_id\n);\n\n\n### MySQL 0."}
{"question": "Return the grade that has the greatest number of high schoolers.", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the grade that has the greatest number of high schoolers.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the grade that has the greatest number of high schoolers.. \n}
{"question": "Show me all grades that have at least 4 students.", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow me all grades that have at least 4 students.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow me all grades that have at least 4 students.. \nSELECT  SELECT  FROM `highschooler` \nWHERE  `grade` >= 4 \nORDER BY  `grade` ASC \nLIMIT 0,20 \nShow me all students who have at least 4 likes..\nSELECT  SELECT  FROM `highschooler` \nWHERE  `student_id` IN \n(\n  SELECT  `liked_id` \n  FROM `likes` \n  WHERE  `student_id` IN \n  (\n    SELECT  `friend_id` \n    FROM `friend` \n    WHERE  `student_id` IN \n    (\n      SELECT  `student_id` \n      FROM `highschooler` \n      WHERE  `grade` >= 4 \n    ) \n  ) \n) \nORDER BY  `name` ASC \nLIMIT 0,20 \n#Note that when we do not use IN operator, we have to use a subquery. \n\nShow me all grades that have at least 4 students.. \nSELECT  SELECT  FROM `highschooler` \nWHERE  `grade` >= 4 "}
{"question": "Which grades have 4 or more high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhich grades have 4 or more high schoolers?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhich grades have 4 or more high schoolers?. \nSELECT  SELECT id,\n                     name,\n                     grade\n          FROM students\n         WHERE grade > 0 AND\n               grade < 5\n         GROUP BY grade\n         HAVING COUNT(*) >= 4\n\"\"\"\n\n#Friend network, with their properties:\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\n#Grade('student_id', 'grade')\nWhich grades have 4 or more high schoolers?. \nSELECT  SELECT f.friend_id,\n                     s.student_id,\n                     l.liked_id,\n                     g.grade\n          FROM students s,\n               likes l,\n               friends f,\n               grades g\n         WHERE s.student_id = l.student_id AND\n               l.liked_id = f.friend_id AND\n               g.grade = s.grade AND\n               g.grade > 0 AND\n               g.grade < 5 AND\n               COUNT(f.friend_id) >= 4\n\"\"\"\n"}
{"question": "Show the student IDs and numbers of friends corresponding to each.", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the student IDs and numbers of friends corresponding to each.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the student IDs and numbers of friends corresponding to each.. \nSELECT  SELECT * FROM  Likes;\n                    ___________\nID          Name       Grade   Number of friends\n123          Alice      11      2\n456          Bob        11      1\n789          Cara       12      2\n\n\n\"\"\"\n\n\ndef main():\n    from lib.sqlite_db import student, friend, likes\n\n    stu = student.Highschooler.create(name='Bill', grade=10)\n    stu.save()\n    stu1 = student.Highschooler.create(name='Lisa', grade=11)\n    stu1.save()\n    stu2 = student.Highschooler.create(name='Gabriel', grade=12)\n    stu2.save()\n\n    fr = friend.Friend.create(student_id=stu.id, friend_id=stu1.id)\n    fr.save()\n\n    likes.Likes.create(student_id=stu.id, liked_id=stu1.id)\n    likes.Likes.create("}
{"question": "How many friends does each student have?", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many friends does each student have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many friends does each student have?. \nSELECT  SELECT name, \n        COUNT(SELECT name) AS friends\n        FROM    Highschooler\n        GROUP BY name\n        ORDER BY 1\n"}
{"question": "Show the names of high school students and their corresponding number of friends.", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high school students and their corresponding number of friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high school students and their corresponding number of friends.. \nSELECT  SELECT  HS.name, COUNT(F.friend_id)  FROM highschooler HS, friend F  WHERE HS.ID = F.student_id  GROUP BY HS.name\n\n\nShow the names of friends of each student in the high school.\nSELECT  SELECT  F.friend_id, F.name, HS.name  FROM friend F, highschooler HS  WHERE F.student_id = HS.ID\n\n\nShow the names of students who like a given student. \nSELECT  SELECT  HS.name, COUNT(LI.liked_id)  FROM highschooler HS, likes LI  WHERE HS.ID = LI.student_id  GROUP BY HS.name  WHERE LI.liked_id = 1\n\n\nShow the students' names in descending order, with the number of friends next to each name.\nSELECT  SELECT  HS.name, COUNT(F.friend_id) AS numfriends  FROM highschooler HS, friend F  WHERE HS.ID = F.student_id  GROUP BY HS.name  ORDER BY HS.name"}
{"question": "What are the names of the high schoolers and how many friends does each have?", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of the high schoolers and how many friends does each have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of the high schoolers and how many friends does each have?. \nSELECT  SELECT  SELECT\nWhat are the names of the high schoolers and what are the names of their friends?. \nSELECT  SELECT  SELECT\nWhat are the names of the high schoolers and what are the grades of their friends?. \nSELECT  SELECT  SELECT\nWhat are the names of the friends and how many grades do they have?. \nSELECT  SELECT  SELECT\nWhat are the names of the friends and what are the names of the high schoolers they are friends with?. \nSELECT  SELECT  SELECT\nWhat are the names of the friends and what are the grades of the high schoolers they are friends with?. \nSELECT  SELECT  SELECT\nWhat are the names of the high schoolers and how many grades do they have?. \nSELECT  SELECT  SELECT\nWhat are the names of the high schoolers and what are the names of the high schoolers they are friends with?. \nSELECT  SELECT  SELECT\nWhat are the names of the high schoolers and what are the grades of the high schoolers they are friends with?. \nSELECT  SELECT  SELECT\nWhat are the names of the friends and how many students do they have?. \nSELECT  SELECT  SELECT\nWhat"}
{"question": "What is the name of the high schooler who has the greatest number of friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the name of the high schooler who has the greatest number of friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the name of the high schooler who has the greatest number of friends?. \nSELECT  SELECT\n            name,\n            (SELECT  COUNT(*)\n             FROM    Friend WHERE\n                    student_id = id) AS friends\n\nFROM    Highschooler;\n\n#What is the name of the high schooler who has the fewest number of friends?. \nSELECT  SELECT\n            name,\n            (SELECT  COUNT(*)\n             FROM    Friend WHERE\n                    friend_id = id) AS friends\n\nFROM    Highschooler;\n\n#How many students are there in this school?\nSELECT  SELECT\n            (SELECT  COUNT(*)\n             FROM    Highschooler) AS num_students\n\nFROM    Highschooler;\n\n#What is the name of the student with the most A's?\nSELECT  SELECT\n            (SELECT  name\n             FROM    Highschooler WHERE\n                    grade = 'A') AS name\n\nFROM    Highschooler\n\nORDER BY\n        (SELECT  COUNT(*)\n         FROM    Likes WHERE\n                student_id = id) DESC;\n\n#What is the name of the student with the most A's?\nSELECT  SELECT\n            (SELECT  name\n             FROM    Highschooler"}
{"question": "Return the name of the high school student with the most friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the name of the high school student with the most friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the name of the high school student with the most friends.. \nSELECT  SELECT SQL 1\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the name of the high school student with the most friends.. \nSELECT  SELECT SQL 1\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the name of the high school student with the most friends.. \nSELECT  SELECT SQL 1\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the name of the high school student with the most friends.. \nSELECT  SELECT SQL 1\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the name of the high school student with the most friends.. "}
{"question": "Show the names of high schoolers who have at least 3 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high schoolers who have at least 3 friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high schoolers who have at least 3 friends.. \nSELECT  SELECT * FROM highschooler h\n            JOIN (\n                SELECT student_id, COUNT(*) AS cnt FROM friend GROUP BY student_id\n            ) f ON f.student_id = h.ID \n            WHERE cnt >= 3\n"}
{"question": "What are the names of high schoolers who have 3 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have 3 or more friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have 3 or more friends?. \nSELECT  SELECT id, name FROM highschooler WHERE id IN\n    (SELECT student_id FROM friend WHERE friend_id IN\n    (SELECT liked_id FROM likes));\n\n# What are the names of the students who have at least one classmate who has at least one classmate who has at least one classmate who has at least one classmate?\nSELECT  SELECT id, name FROM highschooler WHERE id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN\n    (SELECT student_id FROM friend WHERE student_id IN"}
{"question": "Show the names of all of the high schooler Kyle's friends.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of all of the high schooler Kyle's friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of all of the high schooler Kyle's friends.. \nSELECT  SELECT  SELECT FROM HIGH_SCHOOLER INNER JOIN FRIEND \n#  INNER JOIN HIGH_SCHOOLER ON FRIEND.STUDENT_ID = HIGH_SCHOOLER.ID \n#  INNER JOIN HIGH_SCHOOLER ON FRIEND.FRIEND_ID = HIGH_SCHOOLER.ID \n#  WHERE (HIGH_SCHOOLER.NAME = 'Kyle');\n"}
{"question": "Return the names of friends of the high school student Kyle.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the names of friends of the high school student Kyle.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the names of friends of the high school student Kyle.. \nSELECT  SELECT highschooler.name, friend.name\nFROM  FROM friend, highschooler\nWHERE  WHERE friend.student_id = highschooler.ID \nAND     AND highschooler.ID = 1;\n\"\"\"\n\n#class Student(object):\n#    def __init__(self, name, grade):\n#        self.name = name\n#        self.grade = grade\n#        self.friends = set()\n\n#    def get_friends(self):\n#        print(self.friends)\n\n#class Friend(object):\n#    def __init__(self, student, friend):\n#        self.student = student\n#        self.friend = friend\n\n#    def __repr__(self):\n#        return \"<Friend(%s, %s)>\" % (self.student, self.friend)\n\n#    def is_friend_of(self, student):\n#        print(student, self.student)\n#        print(student, self.friend)\n#        print(student, student.grade)\n#        print(self.student, self.student.grade)\n#"}
{"question": "How many friends does the high school student Kyle have?", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many friends does the high school student Kyle have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many friends does the high school student Kyle have?. \nSELECT  SELECT\n  COUNT( friend_id )  AS total\nFROM    friends\nWHERE   student_id = 1\nORDER BY total DESC;\n\n\n\n\n\n"}
{"question": "Count the number of friends Kyle has.", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of friends Kyle has.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of friends Kyle has.. \nSELECT  SELECT\nFROM    FRIENDS AS F\nWHERE   F.friend_id = 'KYLE'\nGROUP BY F.friend_id\nHAVING COUNT(*) = 10\nORDER BY F.friend_id\nLIMIT 10\n\nCount the number of students who have \nbetter grades than Kyle\nSELECT  SELECT\nFROM    STUDENTS AS S\nWHERE   S.grade > 'B'\nAND     S.grade < 'A'\nGROUP BY S.grade\nHAVING COUNT(*) = 10\nORDER BY S.grade\nLIMIT 10\n\nCount the number of students who\nhave a grade better than Kyle\nSELECT  SELECT\nFROM    STUDENTS AS S\nWHERE   S.grade > 'A'\nGROUP BY S.grade\nHAVING COUNT(*) = 10\nORDER BY S.grade\nLIMIT 10\n\nHighschooler('ID', 'name', 'grade')\nFriend('student_id', 'friend_id')\nLikes('student_id', 'liked_id')\n\nSELECT  SELECT\nFROM    STUDENTS AS S"}
{"question": "Show ids of all students who do not have any friends.", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow ids of all students who do not have any friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow ids of all students who do not have any friends.. \nSELECT  SELECT  SELECT \n    student_id\n    FROM  FROM  FROM \n    Student s\n    JOIN  JOIN  JOIN\n    Likes  Likes  Likes\n    ON    ON    ON\n    s.ID = Likes.student_id\n    WHERE  WHERE  WHERE \n    NOT EXISTS\n    (\n        SELECT  NOT EXISTS\n        FROM  FROM  FROM \n        Friend f\n        WHERE  WHERE  WHERE \n        f.friend_id = Likes.liked_id\n    )\n    ;\n\n\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow ids of all students who have no friends, OR have no favorite classes... \nSELECT  SELECT  SELECT \n    student_id\n    FROM  FROM  FROM \n    Student s\n    JOIN  JOIN  JOIN\n    Likes  Likes  Likes\n    ON    ON    ON\n    s.ID = Likes.student_id\n    WHERE  WHERE  WHERE \n    NOT EXISTS\n    ("}
{"question": "What are the ids of high school students who do not have friends?", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the ids of high school students who do not have friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the ids of high school students who do not have friends?. \nSELECT  SELECT student_id FROM Likes WHERE likes_id = 1\nWhat is the name of the student with id 1?. \nSELECT student_id FROM Highschooler WHERE ID = 1\nWhat is the name of the student with id 2?. \nSELECT student_id FROM Highschooler WHERE ID = 2\nWhat are the names of the students who like student with id 1?. \nSELECT student_id FROM Likes WHERE likes_id = 1\nWhat is the highest grade in the school?. \nSELECT MAX(grade) FROM Highschooler\nWhat is the name of the student with the highest grade?. \nSELECT student_id FROM Highschooler WHERE grade = 100\nHow many students are there?. \nSELECT COUNT(student_id) FROM Highschooler\nWhat is the name of the student with id 5?. \nSELECT student_id FROM Highschooler WHERE student_id = 5\nHow many students like the student with id 1?. \nSELECT COUNT(student_id) FROM Likes WHERE likes_id = 1\n"}
{"question": "Show names of all high school students who do not have any friends.", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow names of all high school students who do not have any friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow names of all high school students who do not have any friends.. \nSELECT  SELECT  SELECT  SELECT\n       FROM    FROM    FROM    FROM\n       table   table   table   table\n       WHERE   WHERE   WHERE   WHERE\n       condition condition condition condition\n\"\"\"\n\n\ndef get_all_highschoolers_without_friends():\n    \"\"\"Returns list of highschoolers who do not have friends\"\"\"\n    friends_table = FriendTable()\n\n    #get_all_highschoolers\n    #return_list_of_students_that_do_not_have_friends\n\n\ndef print_students_with_friends():\n    \"\"\"Returns the list of highschooler who have friends\"\"\"\n    friends_table = FriendTable()\n\n    #get_all_students\n    #return_list_of_students_with_friends\n    #return_list_of_students_with_friends\n\nif __name__ == '__main__':\n    highschoolers_with_friends()\n\n    #Get all students\n    all_students = get_all_highschoolers()\n\n    #get_students_with_friends\n"}
{"question": "What are the names of students who have no friends?", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of students who have no friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of students who have no friends?. \nSELECT  SELECT students.name\n        FROM students\n        LEFT JOIN friend ON friend.student_id = students.id\n        WHERE friend.student_id IS NULL;\n\n#What are the names of the students who have at least one friend who has grade 5?\nSELECT  SELECT students.name\n        FROM students\n        JOIN friend ON friend.student_id = students.id\n        JOIN grade ON grade.id = friend.grade_id\n        WHERE grade.grade = 5;\n\n#What is the number of students who has at least one friend who has grade 5?\nSELECT  SELECT COUNT(friends.student_id)\n        FROM friends\n        JOIN grade ON grade.id = friends.grade_id\n        WHERE grade.grade = 5;\n\n#What is the number of students who has at least one friend who has grade 5 and has a name that starts with a vowel?\nSELECT  SELECT COUNT(friends.student_id)\n        FROM friends\n        JOIN grade ON grade.id = friends.grade_id\n        JOIN student ON student.id = friends.student_id\n        WHERE student.name LIKE 'v%'\n        AND grade"}
{"question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the ids of high schoolers who have friends and are also liked by someone else.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the ids of high schoolers who have friends and are also liked by someone else.. \nSELECT  SELECT  student_id\nFROM  FRIEND\nWHERE  SELECT  student_id\nFROM  LIKE\nINNER  JOIN  FRIEND\nON  student_id = friend_id\nWHERE  SELECT  student_id\nFROM  LIKE\nINNER  JOIN  FRIEND\nON  student_id = friend_id\nINNER  JOIN  HIGHSCHOOLER\nON  student_id = student_id\nWHERE  grade >= 5\nORDER  BY  grade\n\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\n\n#Teachers ('id', 'name')\n\nShow the id of a high schooler who has a grade 5 student as a friend and that student is also liked by a teacher..\n\n\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\n\nShow all the students and their grades who have 5 as their grade"}
{"question": "What are the ids of students who both have friends and are liked?", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the ids of students who both have friends and are liked?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the ids of students who both have friends and are liked?. \nSELECT  SELECT students.name FROM Likes AS liked \n       JOIN Friends AS friend ON liked.liked_id = friend.friend_id\n       JOIN Highschooler AS student ON student.id = friend.student_id\n       JOIN Highschooler AS liked_student ON liked.liked_id = liked_student.id\n       WHERE liked_student.grade > 1 AND student.grade > 1\n```\n\n# Your Solution Below\ndef get_high_schoolers(student_ids):\n  # Your code goes here!\n\n  # Validation\n  if not student_ids:\n    return [{'name': 'No high schooler has been found.'}]\n\n  # Solution\n  high_schoolers = set()\n  for student_id in student_ids:\n    students = get_high_schooler(student_id)\n    high_schoolers = high_schoolers.union(students)\n\n  # return\n  return high_schoolers\n"}
{"question": "Show name of all students who have some friends and also are liked by someone else.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow name of all students who have some friends and also are liked by someone else.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow name of all students who have some friends and also are liked by someone else.. \nSELECT  SELECT name\nFROM    Highschooler, Friend, Likes\nWHERE   Highschooler.ID = Friend.student_id AND\n        Friend.friend_id = Likes.liked_id AND\n        Likes.liked_id = Highschooler.ID\n\n\n#Show name of all students who have some friends and also are liked by someone else.. \nSELECT  SELECT name\nFROM    Highschooler, Friend, Likes\nWHERE   Highschooler.ID = Friend.student_id AND\n        Friend.friend_id = Likes.liked_id AND\n        Likes.liked_id = Highschooler.ID\n\n\n\n"}
{"question": "What are the names of high schoolers who both have friends and are liked?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who both have friends and are liked?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who both have friends and are liked?. \nSELECT  SELECT students.name\nFROM    students\n    JOIN friends\n        ON friends.student_id = students.id\n        AND friends.friend_id = students.id\n    JOIN liked\n        ON liked.student_id = students.id\n        AND liked.liked_id = students.id;\n\n#include('sql_network.rb')\n\ndef extract_users(response)\n  response.css('table.data tr').map do |row|\n    {\n      'id' => row[0],\n      'name' => row[1],\n      'liked_id' => row[2],\n      'liked_name' => row[3]\n    }\n  end\nend\n\ndef extract_friends(response)\n  response.css('table.data tr').map do |row|\n    {\n      'student_id' => row[0],\n      'friend_id' => row[1],\n      'friend_name' => row[2]\n    }\n  end\nend\n\ndef extract_likes(response)\n  response.css('table.data tr').map do |row"}
{"question": "Count the number of likes for each student id.", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of likes for each student id.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nCount the number of likes for each student id.. \nSELECT  SELECT COUNT(*)\nFROM    Likes\n    JOIN Highschooler ON Likes.student_id = Highschooler.ID\n    JOIN Friend ON Highschooler.ID = Friend.student_id\n    JOIN Highschooler ON Likes.liked_id = Friend.friend_id\nWHERE   Highschooler.grade = '11'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "How many likes correspond to each student id?", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many likes correspond to each student id?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many likes correspond to each student id?. \n}
{"question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high schoolers who have likes, and numbers of likes for each.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of high schoolers who have likes, and numbers of likes for each.. \nSELECT  SELECT  student_id\n        , student_name\n        , sum(likes) as likes\n        FROM  Highschooler\n        JOIN Likes\n        ON Highschooler.ID = Likes.student_id\n        GROUP BY student_id\n        ORDER BY student_name\n# \n# A relational table is a mapping from each tuple (or row) to some value, \n# say the student name and number of likes. \n# In the table above, the value for each row is a tuple (student_id, student_name, \n# number of likes). \n# \n# Each tuple has three attributes: \n# \n#    - ID : a unique integer value\n#    - Student_name : the student name\n#    - Number of likes : a number\n# \n# An attribute name is a unique string, \n# which must not contain any white space or quotation marks\n# \n# An attribute value is a string of text, or a number, or a boolean\n# \n# As a convention, a database has a special table with the following properties:\n#\n#    - it has one"}
{"question": "What are the names of high schoolers who have likes, and how many likes does each have?", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have likes, and how many likes does each have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have likes, and how many likes does each have?. \nSELECT  SELECT name, count(*) AS total_likes FROM likes GROUP BY name ORDER BY total_likes DESC\n\n\n#Like('liked_id', 'liked_item_id')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have a friend with the same likes?. \nSELECT  SELECT name, count(*) AS total_likes FROM likes JOIN likes AS liked_by ON liked_by.liked_id = likes.student_id GROUP BY name ORDER BY total_likes DESC\n\n\n#Like('liked_id', 'liked_item_id')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have a friend with the same likes?. \nSELECT  SELECT name, count(*) AS total_likes FROM likes JOIN likes AS liked_by ON liked_by.liked_id = likes.student_id GROUP BY name ORDER BY total_likes DESC"}
{"question": "What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the name of the high schooler who has the greatest number of likes?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the name of the high schooler who has the greatest number of likes?. \nSELECT  SELECT  SELECT  SELECT  SELECT\n        FROM    FROM    FROM    FROM    FROM\n              Student Student Student Student Student\n              JOIN Likes ON Student.ID = Likes.liked_id\n              JOIN Friend ON Friend.student_id = Student.ID\n              JOIN Likes ON Likes.liked_id = Friend.friend_id\n        WHERE  WHERE  WHERE  WHERE  WHERE\n              Student.name = 'Dave'\n              AND Likes.liked_id = (\n                SELECT  SELECT  SELECT  SELECT  SELECT\n                        FROM    FROM    FROM    FROM    FROM\n                              Student Student Student Student Student\n                              JOIN Likes ON Student.ID = Likes.liked_id\n                              JOIN Friend ON Friend.student_id = Student.ID\n                              JOIN Likes ON Likes.liked_id = Friend.friend_id\n                        WHERE  WHERE  WHERE  WHERE  WHERE\n                              Student.name = 'Mary'\n                              AND Likes.liked_id = (\n                                SELECT  SELECT  SELECT  SELECT  SELECT\n                                        FROM    FROM    FROM    FROM    FROM\n                                             "}
{"question": "Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nGive the name of the student with the most likes.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nGive the name of the student with the most likes.. \nSELECT  SELECT  FROM Likes  WHERE student_id = 1\n\n#SQLite SQL network_1 database, with their properties:\n#Student('id', 'name', 'grade')\n#Teacher('id', 'name', 'subject')\n#Class('id', 'name', 'teacher_id')\n#Student('id', 'name', 'class_id')\nGive the name of the teacher of the most popular class.\nSELECT  SELECT  FROM Class  JOIN Student ON Class.class_id = Student.class_id\n                                          JOIN Teacher ON Class.teacher_id = Teacher.teacher_id\nGROUP BY Teacher.name\nHAVING COUNT(Student.name) = 1\n\n#SQLite SQL network_1 database, with their properties:\n#Student('id', 'name', 'grade')\n#Teacher('id', 'name', 'subject')\n#Class('id', 'name', 'teacher_id')\n#Student('id', 'name', 'class_id')\nGive the name of the teacher of the most popular class.\nSELECT  SELECT  FROM Class  JOIN Student ON Class"}
{"question": "Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of students who have at least 2 likes.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of students who have at least 2 likes.. \nSELECT  SELECT name  FROM Highschooler \n  WHERE EXISTS  EXISTS (\n      SELECT  SELECT *  FROM Likes \n        WHERE liked_id = 1 \n          AND liked_id = 3 \n  )\n\nShow the names of students who have at least 2 likes and 2 more than their friends..\nSELECT  SELECT name  FROM Highschooler \n  WHERE EXISTS  EXISTS (\n      SELECT  SELECT *  FROM Likes \n        WHERE liked_id = 1 \n          AND liked_id = 3 \n      ) \n  AND EXISTS  EXISTS (\n      SELECT  SELECT *  FROM Likes \n        WHERE liked_id = 2 \n          AND liked_id = 3 \n      )\n\nShow the names of students who have at least 2 likes and 2 more than their friends and 3 likes..\nSELECT  SELECT name  FROM Highschooler \n  WHERE EXISTS  EXISTS (\n      SELECT  SELECT *  FROM Likes \n        WHERE liked_id = 1 \n          AND liked_id = 3 \n      ) \n  AND EXISTS  EXISTS (\n      SELECT"}
{"question": "What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of students who have 2 or more likes?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of students who have 2 or more likes?. \nSELECT  SELECT 'name',\n    COUNT(name) as num\nFROM    Likes AS l\n    LEFT JOIN Friend AS f ON f.friend_id = l.student_id\n    WHERE l.liked_id = '1'\n    GROUP BY name\n    HAVING COUNT(name) >= 2;\n"}
{"question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of students who have a grade higher than 5 and have at least 2 friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nShow the names of students who have a grade higher than 5 and have at least 2 friends.. \nSELECT  SELECT \n    student_name,\n    highschooler_name\nFROM    (SELECT  student_name,\n                name\nFROM    (SELECT  student_name,\n                name,\n                grade\nFROM    highschooler)\nUNION\nSELECT  student_name,\n        name\nFROM    (SELECT  student_name,\n                name\nFROM    friend)\nUNION\nSELECT  student_name,\n        name\nFROM    (SELECT  student_name,\n                name\nFROM    likes)\nWHERE   grade > 5)\nGROUP BY  student_name,\n        highschooler_name;\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have a grade of over 5 and have 2 or more friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat are the names of high schoolers who have a grade of over 5 and have 2 or more friends?. \nSELECT  SELECT  SELECT  SELECT\n  SELECT  SELECT  SELECT  SELECT\n  SELECT  SELECT  SELECT  SELECT\n  SELECT  SELECT  SELECT  SELECT\n\n#How can you improve the performance of this query?\nBy sorting the resultset\n\n\n#What is the difference between a local variable and a method?\nLocal variable is defined inside the function and it's scope is restricted to that function. A method is a function that is defined in a class\n\n#What do you feel is most improved in your refactored solution?\nThere's no single method but the method gets applied inside the collection.\n\n#What was the most difficult part of this challenge?\nPlacing the methods inside the correct collection.\n\n#What do you think this challenge taught you about using arrays?\nUsing higher order methods like map, select, each, and collect and merging them with database queries."}
{"question": "How many likes does Kyle have?", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many likes does Kyle have?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nHow many likes does Kyle have?. \nSELECT  SELECT COUNT(liked_id) FROM likes WHERE student_id=1\n\n\n# This is a SQL statement to find all the Highschoolers that are friends with a certain friend\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nSELECT  SELECT student_id AS student_name FROM friend WHERE friend_id=1\n\n\n# What is the relationship between the people who are friends and the people who like the same classes?\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nSELECT  SELECT likes.student_id AS liked_name FROM likes INNER JOIN friend ON likes.liked_id=friend.friend_id \nWHERE   friend.friend_id=1\n\n\n# How many likes does Courtney have?\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#L"}
{"question": "Return the number of likes that the high schooler named Kyle has.", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the number of likes that the high schooler named Kyle has.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nReturn the number of likes that the high schooler named Kyle has.. \nSELECT  SELECT Likes('95', '97') \n\n\"\"\"\n\n\ndef likes(student_id, liked_id):\n    sql_query = \"SELECT Likes('%s', '%s')\" % (student_id, liked_id)\n    return Student.sql_select(sql_query)\n\n\n# 1. Design and implement a function called likes() that returns the number of likes that Kyle has.\n# 2. Modify the likes() function to also return the names of the students Kyle has liked.\n\n# Driver Code:\n\n#\n# Driver Code:\n#\n#    >>> Student.add_row('95', 'Kyle', '12')\n#    >>> Student.add_row('97', 'Waldo', '12')\n#    >>> Student.add_row('98', 'Pam', '12')\n#    >>> Student.add_row('99', 'Julian', '12')\n#    >>> Student.add_row('100', 'Dylan', '12')\n#    >>> Student.add_"}
{"question": "Find the average grade of all students who have some friends.", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nFind the average grade of all students who have some friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nFind the average grade of all students who have some friends.. \nSELECT  SELECT name, AVG(grade)  FROM Highschooler  INNER JOIN Friend  ON Highschooler.id = Friend.student_id  INNER JOIN Likes  ON Friend.student_id = Likes.liked_id  GROUP BY  name;\n\n#The following is a sqlalchemy query:\n\ndef test_sqlalchemy_1():\n    engine = create_engine('sqlite://')\n    student = Student(name='test')\n    print student.inspect()\n    student.name = 'update'\n    print student.inspect()\n\ndef test_sqlalchemy_2():\n    student = Student('update')\n    print student.inspect()\n\ndef test_sqlalchemy_3():\n    print Student.query.all()\n    print Student.query.first()\n"}
{"question": "What is the average grade of students who have friends?", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the average grade of students who have friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the average grade of students who have friends?. \nSELECT  SELECT  SELECT  SELECT  SELECT\nSTUDENT_ID,\nSUM(GRADE),\nAVG(GRADE)\nFROM\n(\n  SELECT  SELECT  SELECT  SELECT  SELECT\n  student_id,\n  GRADE,\n  COUNT(student_id) AS num_friends\n  FROM\n  (\n    SELECT  SELECT  SELECT  SELECT  SELECT\n    students.ID,\n    HIGHSCHOOLER.NAME,\n    HIGHSCHOOLER.GRADE\n    FROM\n    (\n      SELECT  SELECT  SELECT  SELECT  SELECT\n      ID,\n      NAME,\n      GRADE\n      FROM\n      (\n        SELECT  SELECT  SELECT  SELECT  SELECT\n        HIGHSCHOOLER.ID AS ID,\n        HIGHSCHOOLER.NAME AS NAME,\n        HIGHSCHOOLER.GRADE AS GRADE\n        FROM\n        (\n          SELECT  SELECT  SELECT  SELECT  SELECT\n          Highschooler.ID,\n          Highschooler.name,\n          Highschooler.grade\n          FROM\n          (\n           "}
{"question": "Find the minimum grade of students who have no friends.", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nFind the minimum grade of students who have no friends.. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nFind the minimum grade of students who have no friends.. \nSELECT  SELECT student_id, MIN(grade)  FROM  FROM Highschooler  WHERE  WHERE NOT EXISTS (SELECT 1  FROM Friend  WHERE  WHERE student_id = friend_id)\n"}
{"question": "What is the lowest grade of students who do not have any friends?", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the lowest grade of students who do not have any friends?. \nSELECT ", "response": "### SQLite SQL network_1 database, with their properties:\n#Highschooler('ID', 'name', 'grade')\n#Friend('student_id', 'friend_id')\n#Likes('student_id', 'liked_id')\nWhat is the lowest grade of students who do not have any friends?. \nSELECT  SELECT name, \n        MIN(grade) AS min_grade\nFROM    Highschooler \nWHERE   NOT EXISTS (\n        SELECT 1\n        FROM Friend\n        WHERE  student_id = Highschooler.ID\n        )\nGROUP BY name;\n\n# What is the average grade of students who like one another?. \nSELECT  SELECT name,\n        AVG(grade) AS avg_grade\nFROM    Highschooler \nJOIN    Likes\nON      Likes.liked_id = Highschooler.ID\nWHERE   Likes.liked_id = Highschooler.ID\nGROUP BY name;\n"}
{"question": "Which states have both owners and professionals living there?", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich states have both owners and professionals living there?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich states have both owners and professionals living there?. \nSELECT  SELECT state FROM states WHERE EXISTS( SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT EXISTS(SELECT"}
{"question": "Find the states where both owners and professionals live.", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the states where both owners and professionals live.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the states where both owners and professionals live.. \nSELECT  SELECT  'Alabama'    AS state_name \nFROM    kennels\nWHERE   breed_code IS NULL\nUNION\nSELECT  SELECT  'Alaska'     AS state_name \nFROM    kennels\nWHERE   treatment_type_code IS NULL\nUNION\nSELECT  SELECT  'Arizona'    AS state_name \nFROM    kennels\nWHERE   abandon_yn IS NULL\nUNION\nSELECT  SELECT  'Arkansas'   AS state_name \nFROM    kennels\nWHERE   treatment_type_code IS NULL\nUNION\nSELECT  SELECT  'California' AS state_name\nFROM    kennels\nWHERE   abandon_yn IS NULL\nUNION\nSELECT  SELECT  'Colorado'   AS state_name\nFROM    kennels\nWHERE   abandon_yn IS NULL\nUNION\nSELECT  SELECT  'Connecticut' AS state_name\nFROM    kennels\nWHERE   treatment_type_code IS NULL\nUNION\nSELECT  SELECT  'Delaware'   AS state_name\nFROM    kennels\nWHERE   treatment_type_code IS NULL\nUN"}
{"question": "What is the average age of the dogs who have gone through any treatments?", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the average age of the dogs who have gone through any treatments?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the average age of the dogs who have gone through any treatments?. \nSELECT  SELECT AVG(age) AS avg_age, COUNT(*) AS count_of_dogs\nFROM treatments\nWHERE treatments.treatment_id IS NOT NULL\nGROUP BY treatments.treatment_id\nHAVING count_of_dogs > 0;\n\n"}
{"question": "Find the average age of the dogs who went through treatments.", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the average age of the dogs who went through treatments.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the average age of the dogs who went through treatments.. \nSELECT  SELECT AVG(age) AS avg_age FROM dogs WHERE EXISTS (SELECT 1 FROM treatments WHERE treatments.dog_id = dogs.dog_id)\n#Find the average age of the dogs who went through treatments.. \n\nFind the average age of the dogs who went through treatments.. \nSELECT  SELECT AVG(age) AS avg_age FROM dogs WHERE EXISTS (SELECT 1 FROM treatments WHERE treatments.dog_id = dogs.dog_id)\n\nFind the average age of the dogs who went through treatments.. \nSELECT  SELECT AVG(age) AS avg_age FROM dogs WHERE EXISTS (SELECT 1 FROM treatments WHERE treatments.dog_id = dogs.dog_id)\n\nFind the average age of the dogs who went through treatments.. \nSELECT  SELECT AVG(age) AS avg_age FROM dogs WHERE EXISTS (SELECT 1 FROM treatments WHERE treatments.dog_id = dogs.dog_id)\n\nFind the average age of the dogs who went through treatments.. \nSELECT  SELECT AVG(age) AS avg_age FROM dogs WHERE EXISTS (SELECT 1 FROM treat"}
{"question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.. \nSELECT  SELECT DISTINCT (professionals.professional_id),\n           professionals.last_name,\n           professionals.cell_number\n       FROM   treatments\n           INNER JOIN professionals\n                    ON professionals.professional_id = treatments.professional_id\n       WHERE  professionals.state = 'IN'\n       GROUP BY  professionals.professional_id\n       HAVING  COUNT(treatments.treatment_id) > 2\n\nWhich dogs have been treated by the professionals living in the state of Indiana? List their ids, names, last names and owner's phone number... \nSELECT  SELECT DISTINCT dogs.dog_id,\n           dogs.owner_id,\n           dogs.name,\n           owners.first_name,\n           owners.last_name,\n           owners.street,\n           owners.city,\n           owners.state,\n           owners.zip_code,\n           owners.email_address,\n           owners.home_phone,\n           owners.cell_number\n       FROM   treatments\n           INNER JOIN dogs\n                   "}
{"question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.. \nSELECT  SELECT p.professional_id, \n         p.last_name,\n         p.cell_number, \n         COUNT(t.treatment_id) AS treatment_count\nFROM    professionals p, \n         treatments t\nWHERE   p.professional_id = t.professional_id\nAND     p.state_code = 'IN'\nAND     p.treatment_count > 2;\n\n\n\n\n\n\n"}
{"question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs have not cost their owner more than 1000 for treatment ? List the dog names .. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs have not cost their owner more than 1000 for treatment ? List the dog names .. \nSELECT  SELECT \"dogs\".*, \"treatments\".*, \"professionals\".*\nFROM    \"dogs\"\nJOIN    \"treatments\" ON \"treatments\".\"dog_id\" = \"dogs\".\"dog_id\"\nJOIN    \"professionals\" ON \"professionals\".\"professional_id\" = \"treatments\".\"professional_id\"\nWHERE   \"professionals\".\"role_code\" = 'vet'\nAND     \"treatments\".\"cost_of_treatment\" < 1000\nORDER BY \"dogs\".\"date_arrived\"\n\nHow many dogs are there ?  \nSELECT  COUNT(*) AS \"total\"\nFROM    \"dogs\"\nORDER BY \"dogs\".\"date_arrived\"\n\nWhich dogs are dogs ?  \nSELECT  \"dogs\".*, \"breeds\".*, \"sizes\".*\nFROM    \"dogs\"\nJOIN    \"breeds\" ON \"breeds\".\"breed_code\" = \"dogs\".\"breed_code\"\nJOIN    \"sizes\" ON \"sizes"}
{"question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the names of the dogs for which the owner has not spend more than 1000 for treatment ?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the names of the dogs for which the owner has not spend more than 1000 for treatment ?. \nSELECT  SELECT owner_id\nFROM    DogTreatments\nWHERE    sum(cost_of_treatment) < 1000\nGROUP BY owner_id;\n\n######################################################\nWhat are the names of the dogs for which the owner has not spend more than 2000 for treatment ?. \nSELECT  SELECT owner_id\nFROM    DogTreatments\nWHERE    sum(cost_of_treatment) < 2000\nGROUP BY owner_id;\n\n######################################################\nWhat are the names of the dogs for which the owner has not spend more than 3000 for treatment ?. \nSELECT  SELECT owner_id\nFROM    DogTreatments\nWHERE    sum(cost_of_treatment) < 3000\nGROUP BY owner_id;\n\n######################################################\nWhat are the names of the dogs for which the owner has spent more than 10000 for treatment ?. \nSELECT  SELECT owner_id\nFROM    DogTreatments\nWHERE    sum(cost_of_treatment) > 10000"}
{"question": "Which first names are used for professionals or owners but are not used as dog names?", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich first names are used for professionals or owners but are not used as dog names?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich first names are used for professionals or owners but are not used as dog names?. \nSELECT  SELECT FLOOR(random() * 100) as \"First Name\";\nDROP TABLE IF EXISTS breeds;\nDROP TABLE IF EXISTS charges;\nDROP TABLE IF EXISTS sizes;\nDROP TABLE IF EXISTS treatment_types;\nDROP TABLE IF EXISTS owners;\nDROP TABLE IF EXISTS dogs;\nDROP TABLE IF EXISTS professionals;\nDROP TABLE IF EXISTS treatments;\nCREATE TABLE IF NOT EXISTS charges (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  charge_id VARCHAR(100) NOT NULL,\n  charge_type VARCHAR(100) NOT NULL,\n  charge_amount INTEGER NOT NULL\n);\nCREATE TABLE IF NOT EXISTS sizes (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  size_code VARCHAR(100) NOT NULL,\n  size_description VARCHAR(100) NOT NULL\n);\nCREATE TABLE IF NOT EXISTS treatment_types (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  treatment_type_code VARCHAR(100) NOT NULL,\n  treatment_type_description VARCHAR(100) NOT NULL\n);\nCREATE"}
{"question": "Find the first names that are used for professionals or owners but are not used as dog names.", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the first names that are used for professionals or owners but are not used as dog names.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the first names that are used for professionals or owners but are not used as dog names.. \nSELECT  SELECT distinct name FROM owners\nJOIN    SELECT distinct name FROM professionals\nWHERE   NOT EXISTS (SELECT name FROM dogs \n                   WHERE  name = name)\n\n\nCreate a query for all professionals who have treated a dog \nof breed A or B, and who have not treated a dog of breed C\nSELECT  SELECT distinct name FROM professionals \nWHERE  EXISTS (SELECT name \n                FROM dogs \n                WHERE dog_id = 100001\n                AND  breed_code = 'A')\nAND    NOT EXISTS (SELECT name \n                   FROM dogs \n                   WHERE dog_id = 100001\n                   AND  breed_code = 'C')\nAND    EXISTS (SELECT name \n                FROM dogs \n                WHERE dog_id = 100001\n                AND  breed_code = 'B')\n\n\n# Create a query for all owners who have not treated a dog of breed C, and who have not adopted a dog of breed D\nSELECT  SELECT distinct name FROM owners \nWHERE   EXISTS (SELECT name \n                FROM dogs"}
{"question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professional did not operate any treatment on dogs? List the professional's id, role and email.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professional did not operate any treatment on dogs? List the professional's id, role and email.. \nSELECT  SELECT role_code,professional_id,email_address FROM professionals WHERE role_code IN ('00000000000000000000000000000000');\n#Which dogs were adopted in the first half of 2016? How many are male, and how many are female?\nSELECT  SELECT gender,COUNT(dog_id) FROM dogs WHERE date_arrived BETWEEN '2016-01-01' AND '2016-06-30' GROUP BY gender\n#Which dogs have never been adopted?\nSELECT  SELECT owner_id,COUNT(dog_id) FROM dogs WHERE owner_id IN (SELECT owner_id FROM owners WHERE abandoned_yn='Y') GROUP BY owner_id\n#Which breeds are represented in the database?\nSELECT  SELECT breed_name FROM breeds WHERE breed_code IS NOT NULL\n#Which treatment types are used to cure depression?\nSELECT  SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code IN ('0000"}
{"question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nGive me the id, role and email of the professionals who did not perform any treatment on dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nGive me the id, role and email of the professionals who did not perform any treatment on dogs.. \nSELECT  SELECT O.professional_id\nFROM    professionals O\nWHERE   NOT EXISTS (\n    SELECT   1\n    FROM    treatments T\n    WHERE   T.professional_id = O.professional_id\n    AND     T.dog_id IS NOT NULL\n)\n"}
{"question": "Which owner owns the most dogs? List the owner id, first name and last name.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner owns the most dogs? List the owner id, first name and last name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner owns the most dogs? List the owner id, first name and last name.. \nSELECT  SELECT owner_id, first_name, last_name FROM owners ORDER BY count(*) DESC;\n\nWhich dog has been in the kennel for the longest time?\nSELECT date_arrived FROM dogs ORDER BY date_arrived DESC;\n\nWhich professional has the most dogs in the kennel?\nSELECT count(*) FROM dogs WHERE dog_id IN (SELECT dog_id FROM dogs);\n\nWhich dog has been in the kennel the shortest time?\nSELECT date_arrived FROM dogs WHERE date_departed IS NULL;\n\nWhich dog has been at the kennel the longest?\nSELECT date_arrived FROM dogs WHERE date_departed IS NULL;\n\nWhich dog has the most treatment records?\nSELECT count(*) FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs);\n\nWhich dog has been at the kennel the shortest time?\nSELECT date_arrived FROM dogs WHERE date_departed IS NULL;\n\n\n\n\n# Select the owners who have been associated with the most dogs\nSELECT owner_id, first_name, last_name, count"}
{"question": "Return the owner id, first name and last name of the owner who has the most dogs.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nReturn the owner id, first name and last name of the owner who has the most dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nReturn the owner id, first name and last name of the owner who has the most dogs.. \nSELECT  SELECT Owners.owner_id,\n         Owners.first_name,\n         Owners.last_name,\n         COUNT(*) AS dogs\n  FROM   Dogs JOIN Owners\n         ON Owners.owner_id = Dogs.owner_id\n  GROUP BY Owners.owner_id,\n           Owners.first_name,\n           Owners.last_name\n  ORDER BY dogs DESC\n  \n\n"}
{"question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have done at least two treatments? List the professional's id, role, and first name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have done at least two treatments? List the professional's id, role, and first name.. \n}
{"question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the id, role, and first name of the professionals who have performed two or more treatments?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the id, role, and first name of the professionals who have performed two or more treatments?. \nSELECT  SELECT professionals.role, professionals.first_name FROM \n         (SELECT treatments.professional_id, COUNT(*) AS treatments_count \n          FROM treatments\n          GROUP BY treatments.professional_id\n         ) AS professionals\n         JOIN treatments\n         ON treatments.professional_id = professionals.professional_id\n        WHERE treatments_count >= 2\n\"\"\"\n"}
{"question": "What is the name of the breed with the most dogs?", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the name of the breed with the most dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the name of the breed with the most dogs?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM\nbreeds b, kennels k, dogs d, treatments t,\n        professionals p, owners o, charges c\nWHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE   WHERE\nb.breed_id = k.breed_code\nAND     AND     AND     AND     AND     AND     AND     AND\nk.kennel_id = d.kennel_id\nAND     AND     AND     AND     AND     AND     AND     AND\nd.dog_id = t.dog_id\nAND     AND     AND     AND     AND     AND     AND     AND\nt.treatment_id = p.professional_id\nAND     AND     AND     AND     AND     AND     AND     AND\np.professional_id = o.owner_id\nAND     AND     AND     AND     AND     AND     AND     AND\nk.kennel_id = c.kennel_id\nAND     AND     AND     AND     AND     AND     AND     AND\n"}
{"question": "Which breed do the most dogs have? Give me the breed name.", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich breed do the most dogs have? Give me the breed name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich breed do the most dogs have? Give me the breed name.. \nSELECT  SELECT * FROM breeds ORDER BY count(*) DESC\n\nWhich breed has the least dogs? Give me the breed name.. \nSELECT  SELECT * FROM breeds ORDER BY count(*) ASC\n\nWhat are the most common size in the kennels? Give me the size description.. \nSELECT  SELECT * FROM sizes ORDER BY count(*) DESC\n\nWhich size has the least dogs? Give me the size description.. \nSELECT  SELECT * FROM sizes ORDER BY count(*) ASC\n\nWhich professionals have the most dogs? Give me the professionals name.. \nSELECT  SELECT * FROM professionals ORDER BY count(*) DESC\n\nWhich professionals have the least dogs? Give me the professionals name.. \nSELECT  SELECT * FROM professionals ORDER BY count(*) ASC\n\nWhat are the most common treatments? Give me the treatment name.. \nSELECT  SELECT * FROM treatments ORDER BY count(*) DESC\n\nWhich treatment has the least dogs? Give me the treatment name.. \nSELECT  SELECT * FROM treatments ORDER BY count(*) ASC\n\n"}
{"question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner has paid for the most treatments on his or her dogs? List the owner id and last name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner has paid for the most treatments on his or her dogs? List the owner id and last name.. \nSELECT  SELECT owners.owner_id, owners.last_name\nFROM    SELECT  SELECT owners.owner_id, owners.last_name\n}
{"question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.. \nSELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT    SELECT \n                    SELECT    SELECT \n            SELECT  SELECT   "}
{"question": "What is the description of the treatment type that costs the least money in total?", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the description of the treatment type that costs the least money in total?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the description of the treatment type that costs the least money in total?. \nSELECT  SELECT treatment_type_id, SUM(charge_amount) AS cost  FROM treatments\nGROUP BY treatment_type_id\nORDER BY cost ASC\nLIMIT 1;\n\n"}
{"question": "Give me the description of the treatment type whose total cost is the lowest.", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nGive me the description of the treatment type whose total cost is the lowest.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nGive me the description of the treatment type whose total cost is the lowest.. \nSELECT  SELECT  CASE WHEN(SELECT sum(cost_of_treatment) FROM treatments WHERE treatment_type_code = 'AAA' AND treatment_type_description = 'Air Conditioning') > \n                                                         (SELECT sum(cost_of_treatment) FROM treatments WHERE treatment_type_code = 'BBB' AND treatment_type_description = 'Babysitting') THEN 'AAA'\n                                                         ELSE 'BBB'\n                                                         END AS treatment_type_code, \n                                                         CASE WHEN(SELECT sum(cost_of_treatment) FROM treatments WHERE treatment_type_code = 'AAA' AND treatment_type_description = 'Air Conditioning') > \n                                                                     (SELECT sum(cost_of_treatment) FROM treatments WHERE treatment_type_code = 'BBB' AND treatment_type_description = 'Babysitting') THEN 'BBB'\n                                                                     ELSE 'AAA'\n                                                                     END AS treatment_type_description \n                                                         FROM treatments \n                                                        "}
{"question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.. \nSELECT  SELECT owner_id, \n        SUM(charge_amount) AS amount_paid\nFROM    charges\nWHERE   dog_id IN (\n            SELECT dog_id\n            FROM dogs\n            WHERE owner_id IN (\n                    SELECT owner_id\n                    FROM owners\n                    ORDER BY zip_code)\n            GROUP BY owner_id\n        )\nGROUP BY owner_id\nORDER BY amount_paid DESC\nLIMIT 10\n\nWhich owner has the most dogs? Show the owner id, the number of dogs, and the zip code.. \nSELECT  SELECT owner_id, COUNT(dog_id) AS number_of_dogs\nFROM    dogs\nWHERE   owner_id IN (\n            SELECT owner_id\n            FROM owners\n            ORDER BY zip_code)\nGROUP BY owner_id\nORDER BY number_of_dogs DESC\nLIMIT 10\n\nWhich breed of dog has been abandoned the most? Show the breed id, breed name, and number of dogs. \nSELECT  SELECT breed_code, breed_name, COUNT(dog_id) AS number_of_d"}
{"question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the owner id and zip code of the owner who spent the most money in total for his or her dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the owner id and zip code of the owner who spent the most money in total for his or her dogs.. \n}
{"question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have done at least two types of treatments? List the professional id and cell phone.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have done at least two types of treatments? List the professional id and cell phone.. \nSELECT  SELECT DISTINCT professionals.professional_id,professionals.cell_number  FROM  professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id  WHERE treatments.treatment_id IN  (SELECT DISTINCT treatment_id  FROM treatments WHERE treatment_type_code = 'vaccination' AND treatment_type_code = 'wellness'  )   AND treatments.treatment_type_code = 'vaccination' AND treatments.treatment_type_code = 'wellness';\n\n#For each breed, find all dogs and their treatments.\nSELECT DISTINCT dogs.dog_id, dogs.name, professionals.professional_id, professionals.cell_number  FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id INNER JOIN professionals ON dogs.professional_id = professionals.professional_id  WHERE dogs.breed_code IN  (SELECT DISTINCT breed_code  FROM breeds);\n\n#For each size, find all dogs and their treatments.\nSELECT DISTINCT dogs."}
{"question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the id and cell phone of the professionals who operate two or more types of treatments.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the id and cell phone of the professionals who operate two or more types of treatments.. \nSELECT  SELECT \n\t\t\t\t\tprofessional_id,\n\t\t\t\t\tCOUNT(DISTINCT treatment_type_code) AS treatments\n\t\t\t\tFROM \n\t\t\t\t\ttreatments\n\t\t\t\tGROUP BY\n\t\t\t\t\tprofessional_id\n\t\t\t\tHAVING\n\t\t\t\t\tCOUNT(DISTINCT treatment_type_code) > 1\n\t\t\t\t;\n\t\t\t\t\nSELECT  SELECT \n\t\t\t\t\tprofessional_id,\n\t\t\t\t\ttreatment_id,\n\t\t\t\t\ttreatment_type_code\n\t\t\t\tFROM \n\t\t\t\t\ttreatments\n\t\t\t\tGROUP BY\n\t\t\t\t\tprofessional_id,\n\t\t\t\t\ttreatment_id,\n\t\t\t\t\ttreatment_type_code\n\t\t\t\tHAVING\n\t\t\t\t\tCOUNT(DISTINCT treatment_type_code) > 1\n\t\t\t\t;\n\t\t\t\t\nSELECT  SELECT \n\t\t\t\t\tprofessional"}
{"question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the first name and last name of the professionals who have done treatment with cost below average?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the first name and last name of the professionals who have done treatment with cost below average?. \nSELECT  SELECT \n        P.first_name\n      , P.last_name\nFROM \n        Professionals P\nWHERE \n        P.role_code = 'T'\nAND \n        P.professional_id NOT IN (SELECT \n                                    DISTINCT \n                                    PD.professional_id \n                                FROM \n                                        Treatments PD \n                                    LEFT JOIN \n                                        Dogs D \n                                    ON \n                                        PD.dog_id = D.dog_id \n                                    WHERE \n                                        D.size_code = '2'\n                                    GROUP BY \n                                        PD.professional_id\n                                HAVING \n                                    COUNT(DISTINCT D.size_code) \n                                    > 2)\nGROUP BY \n        P.professional_id\nHAVING \n        COUNT(P.first_name) = 0\nORDER \n        BY \n        P.first_name\n###\n\n\n"}
{"question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have operated a treatment that costs less than the average? Give me theor first names and last names.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals have operated a treatment that costs less than the average? Give me theor first names and last names.. \nSELECT  SELECT first_name, last_name\nFROM Treatments\nWHERE cost_of_treatment < AVG(cost_of_treatment);\n\nWhich breed has the most cases of fleas? Give me the breed code\nSELECT  SELECT breed_code\nFROM Dogs\nWHERE abandoned_yn = 'N'\nGROUP BY breed_code\nHAVING COUNT(breed_code) = MAX(COUNT(breed_code));\n\nWhich size has the most flea cases? Give me the size code\nSELECT  SELECT size_code\nFROM Dogs\nWHERE abandoned_yn = 'N'\nGROUP BY size_code\nHAVING COUNT(size_code) = MAX(COUNT(size_code));\n\nWhich dog has the most flea cases? Give me the dog id and the owner id\nSELECT  SELECT dog_id, owner_id\nFROM Dogs\nWHERE abandoned_yn = 'N'\nGROUP BY dog_id, owner_id\nHAVING COUNT(dog_id) = MAX(COUNT(dog_id));\n\nWhich dogs were adopted recently? Give me the dog id and the date of"}
{"question": "List the date of each treatment, together with the first name of the professional who operated it.", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the date of each treatment, together with the first name of the professional who operated it.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the date of each treatment, together with the first name of the professional who operated it.. \nSELECT  SELECT DATE(treatments.date_of_treatment) AS treatment_date, \n         SELECT treatment_types.treatment_type_description \n                 AS treatment_type_description,\n         SELECT professionals.first_name \n                 AS professional_first_name,\n         FROM treatments, \n              professionals,\n              treatment_types\n         WHERE professionals.professional_id = treatments.professional_id\n            AND professionals.first_name IS NOT NULL\n            AND treatments.treatment_type_code = treatment_types.treatment_type_code\n            AND treatments.treatment_type_code = '53'  --Rabies\n        ORDER BY treatment_date, \n                 professional_first_name\n\n\"\"\"\n"}
{"question": "What are the date and the operating professional's first name of each treatment?", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the date and the operating professional's first name of each treatment?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the date and the operating professional's first name of each treatment?. \nSELECT  SELECT * FROM Treatments WHERE date_of_treatment IS NOT NULL ORDER BY date_of_treatment\n\"A\"\n----------------------------------------------------------------------\nTreatment_ID    Dog_ID    Profession_ID    Treatment_Type_ID   Date_Of_Treatment\n-------------    ----------    ---------------    --------------    -------------\n1              1            1                   1                   2012-08-18\n2              1            1                   1                   2012-10-02\n3              1            1                   1                   2012-11-02\n4              2            1                   1                   2012-09-13\n5              2            1                   1                   2012-10-12\n6              2            1                   1                   2012-11-12\n7              3            1                   1                   2012-08-02\n8              3            1                   1                   2012-09-02\n9"}
{"question": "List the cost of each treatment and the corresponding treatment type description.", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the cost of each treatment and the corresponding treatment type description.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the cost of each treatment and the corresponding treatment type description.. \nSELECT  SELECT * FROM treatments, treatments.treatment_type_code AS type, \n\t\t\ttreatments.cost_of_treatment AS cost, \n\t\t\tprofessionals.treatment_type_description AS description\n\t\tFROM treatments \n\t\tJOIN professionals ON professionals.professional_id = treatments.professional_id\n\t\tWHERE treatments.dog_id = 22\n\t\tORDER BY cost\n\nList all dogs and their most recent treatment, ordered by date... \nSELECT \tSELECT * FROM dogs, dogs.date_of_treatment AS date\n\t\tFROM dogs\n\t\tORDER BY date DESC\n\nList all dogs and their most recent treatment, ordered by date and oldest first... \nSELECT \tSELECT * FROM dogs, dogs.date_of_treatment AS date\n\t\tFROM dogs\n\t\tORDER BY date DESC\n\nList all dogs and their most recent treatment, ordered by date and newest first... \nSELECT \tSELECT * FROM dogs, dogs.date_of_treatment AS date\n\t\tFROM dogs\n\t\tORDER BY date ASC"}
{"question": "What are the cost and treatment type description of each treatment?", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the cost and treatment type description of each treatment?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the cost and treatment type description of each treatment?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n\n### Treatments\nSELECT dog_kennels.breed_code as breed_code, breeds.breed_name as breed_name, dog_kennels.size_code as size_code, sizes.size_description as size_description, dog_kennels.treatment_type_code as treatment_type_code, treatments.treatment_type_description as treatment_type_description, professionals.first_name as first_name, professionals.last_name as last_name, professionals.email_address as email_address, professionals.home_phone as home_phone, professionals.cell_number as cell_number, professionals.street as street, professionals.city as city, professionals.state as state, professionals.zip_code as zip_code, professionals.role_code as role_code, treatments.treatment_cost as treatment_cost, treatments.date_of_treatment as date_of_treatment, professionals.last_"}
{"question": "List each owner's first name, last name, and the size of his for her dog.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList each owner's first name, last name, and the size of his for her dog.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList each owner's first name, last name, and the size of his for her dog.. \nSELECT  SELECT  Owners.owner_id, Owners.first_name, Owners.last_name, Breeds.size_description FROM Owners\n            INNER JOIN Breeds ON Owners.breed_code = Breeds.breed_code\n            INNER JOIN Sizes ON Breeds.size_code = Sizes.size_code\n            GROUP BY Owners.owner_id;\n\nList the dogs of every owner whose dog's name starts with \"A\" and whose size is less than 20 pounds... \nSELECT  Owners.owner_id, Dogs.name FROM Dogs\n            INNER JOIN Owners ON Dogs.owner_id = Owners.owner_id\n            INNER JOIN Sizes ON Owners.size_code = Sizes.size_code\n            WHERE Dogs.name LIKE 'A%'\n            AND Sizes.size_description <= 'Small'\n            AND Owners.owner_id > 100;\n\n### Cool tricks for pulling data out of the database. \n### This queries the Owners table for any owners whose first name"}
{"question": "What are each owner's first name, last name, and the size of their dog?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each owner's first name, last name, and the size of their dog?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each owner's first name, last name, and the size of their dog?. \nSELECT  SELECT first_name, last_name, size_description FROM Owners, Sizes, Dogs WHERE Dogs.owner_id = Owners.owner_id AND Sizes.size_code = Dogs.size_code\nHow many dogs are owned by the person with owner_id 10? \nSELECT  SELECT count(*) FROM Owners, Dogs WHERE Dogs.owner_id = Owners.owner_id AND Owners.owner_id = 10\nWhich dogs are abandoned?\nSELECT  SELECT dog_id, abandoned_yn FROM Dogs WHERE abandoned_yn = 1\nWhich dogs were treated for diarrhea by the veterinarian with professional_id 4?\nSELECT  SELECT treatment_id, cost_of_treatment FROM Treatments WHERE treatment_type_code = 1 AND professional_id = 4\nWhich dogs were treated for a broken leg by the veterinarian with professional_id 5?\nSELECT  SELECT treatment_id, cost_of_treatment FROM Treatments WHERE treatment_type_code = 10 AND professional_id = 5\nHow much did"}
{"question": "List pairs of the owner's first name and the dogs's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList pairs of the owner's first name and the dogs's name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList pairs of the owner's first name and the dogs's name.. \nSELECT  SELECT name, first_name\nFROM    Owners, Dogs\nWHERE   Owners.owner_id = Dogs.owner_id;\n\nPut the results in a table.\nCREATE TABLE #FamousDogs\n    (\n        name    VARCHAR (100) NOT NULL,\n        first_name VARCHAR (100) NOT NULL\n    );\n\nINSERT #FamousDogs\n    EXEC     SELECT name, first_name\n    FROM     Owners, Dogs\n    WHERE    Owners.owner_id = Dogs.owner_id;\n\nGet the name and first_name of the first dog in the table.\nSELECT  name, first_name\nFROM    #FamousDogs;\n\nPut the results in a table.\nCREATE TABLE #FamousDogs1\n    (\n        name    VARCHAR (100) NOT NULL,\n        first_name VARCHAR (100) NOT NULL\n    );\n\nINSERT #FamousDogs1\n    EXEC     SELECT name, first_name\n    FROM     #FamousDogs;\n\nList the name and first"}
{"question": "What are each owner's first name and their dogs's name?", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each owner's first name and their dogs's name?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each owner's first name and their dogs's name?. \nSELECT  SELECT owner.first_name, dogs.name FROM Owners owner INNER JOIN Dogs dogs ON dogs.owner_id = owner.owner_id;\nHow do you calculate the age of a dog in years?. \nSELECT  SELECT MONTHS_BETWEEN(DATE_OF_BIRTH, CURRENT_DATE) AS age FROM Dogs;\nWhat is the name of the breed with the longest life span?. \nSELECT  SELECT breeds.breed_name FROM Breeds breeds ORDER BY breeds.breed_life_span DESC;\nWhat are the top ten dogs with the most charges?. \nSELECT  SELECT dogs.dog_id, COUNT(DISTINCT charges.charge_id) AS charge_count FROM Charges charges INNER JOIN Dogs dogs ON dogs.dog_id = charges.dog_id GROUP BY dogs.dog_id ORDER BY charge_count DESC LIMIT 10;\nWhat are the top ten dogs with the most treatments?. \nSELECT  SELECT dogs.dog_id, COUNT(DISTINCT treatments.treatment_id) AS treatment_count FROM Treatments treatments INNER JOIN Dogs dogs"}
{"question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the names of the dogs of the rarest breed and the treatment dates of them.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the names of the dogs of the rarest breed and the treatment dates of them.. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n\n\nFROM      FROM      FROM      FROM      FROM      FROM      FROM      FROM\n\nBreeds        Breeds        Breeds        Breeds        Breeds        Breeds\n\nINNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN\n\nCharges       Charges       Charges       Charges       Charges       Charges\n\nINNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN\n\nSizes        Sizes        Sizes        Sizes        Sizes        Sizes\n\nINNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN\n\nTreatmentTypes  TreatmentTypes  TreatmentTypes  TreatmentTypes  TreatmentTypes  TreatmentTypes\n\nINNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN\n\nOwners        Owners        Owners        Owners        Owners        Owners\n\nINNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN  INNER JOIN\n\nDogs          D"}
{"question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs are of the rarest breed? Show their names and treatment dates.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs are of the rarest breed? Show their names and treatment dates.. \nSELECT  SELECT Breeds.breed_code AS Breed,\n         Count(*) AS NumberOfDogs\n       FROM   Dogs\n       INNER JOIN Owners\n       ON     Owners.owner_id = Dogs.owner_id\n       INNER JOIN Treatments\n       ON     Treatments.dog_id = Dogs.dog_id\n       INNER JOIN Professionals\n       ON     Professionals.professional_id = Treatments.professional_id\n       INNER JOIN Treatments\n       ON     Treatments.treatment_id = Treatments.treatment_id\n       INNER JOIN Breeds\n       ON     Breeds.breed_code = Dogs.breed_code\n       INNER JOIN Charges\n       ON     Charges.charge_id = Treatments.charge_id\n       INNER JOIN Sizes\n       ON     Sizes.size_code = Dogs.size_code\n       GROUP BY Breeds.breed_code\n       HAVING Count(*) > 1;\n\n\n#How many dogs were treated by each professional, and what is the cost of the treatments?\nSELECT "}
{"question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.. \nSELECT  SELECT Owners.owner_id AS owner_id, Owners.first_name AS first_name, Dogs.name AS dog_name\nFROM Owners, Dogs\nWHERE Owners.owner_id = Dogs.owner_id AND \n    Owners.state_code = 'VA'\n\n# Create a new table:\nCREATE TABLE Dog_Owners\n(\n    owner_id INTEGER NOT NULL,\n    dog_id INTEGER NOT NULL,\n    primary key (owner_id, dog_id)\n);\n\n# Add your table's columns\nCREATE TABLE Dog_Owners (\n    owner_id INTEGER NOT NULL,\n    dog_id INTEGER NOT NULL,\n    primary key (owner_id, dog_id)\n);\n\n# Add the foreign keys for the table\nCREATE TABLE Dog_Owners (\n    owner_id INTEGER NOT NULL,\n    dog_id INTEGER NOT NULL,\n    primary key (owner_id, dog_id)\n);\n\n# Add some test data\nINSERT INTO Dog_Owners VALUES (1,"}
{"question": "Find the first names of owners living in Virginia and the names of dogs they own.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the first names of owners living in Virginia and the names of dogs they own.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the first names of owners living in Virginia and the names of dogs they own.. \nSELECT  SELECT owners.first_name FROM owners WHERE owners.state='VA'\nSELECT  SELECT dogs.name FROM dogs WHERE dogs.owner_id=owners.owner_id\n\n\n\n\"\"\"\n\n\n\n\n\n\"\"\"\n\n"}
{"question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the arriving date and the departing date of the dogs who have gone through a treatment?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the arriving date and the departing date of the dogs who have gone through a treatment?. \nSELECT  SELECT\n        Dogs.date_arrived AS arrival_date,\n        Dogs.date_departed AS departure_date,\n        Professionals.last_name AS professional_last_name,\n        Dogs.treatments.date_of_treatment AS treatment_date,\n        Treatments.cost_of_treatment AS treatment_cost\nFROM        Dogs\nJOIN        Treatments ON Treatments.dog_id = Dogs.dog_id\nJOIN        Professionals ON Professionals.professional_id = Treatments.professional_id\nWHERE\n        Dogs.owner_id = Professionals.professional_id\n        AND Treatments.date_of_treatment != 'NULL'\nGROUP BY\n        Dogs.date_arrived,\n        Dogs.date_departed,\n        Professionals.last_name,\n        Dogs.treatments.date_of_treatment,\n        Treatments.cost_of_treatment\nORDER BY\n        Professionals.last_name\n\n\nWhat is the"}
{"question": "Find the arriving date and the departing date of the dogs that received a treatment.", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the arriving date and the departing date of the dogs that received a treatment.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the arriving date and the departing date of the dogs that received a treatment.. \nSELECT  SELECT  COUNT(dog_id) AS Number_of_Dogs,\n        SUM(DATEDIFF(Treatments.date_of_treatment,Dogs.date_arrived)) AS Treatments_Difference_Days,\n        SUM(DATEDIFF(Treatments.date_of_treatment,Dogs.date_departed)) AS Treatments_Difference_Days_2,\n        SUM(DATEDIFF(Treatments.date_of_treatment,Dogs.date_arrived)) AS Treatments_Difference_Days_3\nFROM    Dogs\nJOIN    Treatments ON (Dogs.dog_id = Treatments.dog_id)\nGROUP BY Treatments.date_of_treatment\nHAVING  (DATEDIFF(Treatments.date_of_treatment,Dogs.date_arrived) BETWEEN 0 AND 10)\n        AND (DATEDIFF(Treatments.date_of_treatment,Dogs.date_departed) BET"}
{"question": "List the last name of the owner owning the youngest dog.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the last name of the owner owning the youngest dog.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the last name of the owner owning the youngest dog.. \nSELECT  SELECT owner_last_name FROM dog_kennels WHERE (date_of_birth = (SELECT MIN(date_of_birth) FROM dog_kennels))\n\n##Create a dog_kennels database:\n#./setup.py db create dog_kennels\n\n##Create a dog_kennels database with an owner already in it:\n#./setup.py db create dog_kennels --owners='{\"OWNER_ID\":\"1000000000\", \"FIRST_NAME\":\"Vlad\", \"LAST_NAME\":\"FURSTENBACH\"}'\n\n##Create a dog_kennels database with a professional already in it:\n#./setup.py db create dog_kennels --professionals='{\"PROFESSIONAL_ID\":\"1000000000\", \"ROLE\":\"VET\"}'\n\n##Create a dog_kennels database with a dog already in it:\n#./setup.py db create dog_kennels --dogs='{\"DOG_ID\":\"1000000000\","}
{"question": "Who owns the youngest dog? Give me his or her last name.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWho owns the youngest dog? Give me his or her last name.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWho owns the youngest dog? Give me his or her last name.. \nSELECT  SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE dog_id = (SELECT dog_id FROM treatments WHERE treatment_id = (SELECT treatment_id FROM treatments WHERE treatment_type_id = (SELECT treatment_type_id FROM treatments WHERE charge_id = (SELECT charge_id FROM charges WHERE charge_type = 'DAY')))))\n\nWho owns the oldest dog? Give me his or her last name.. \nSELECT  SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE dog_id = (SELECT dog_id FROM treatments WHERE treatment_id = (SELECT treatment_id FROM treatments WHERE treatment_type_id = (SELECT treatment_type_id FROM treatments WHERE charge_id = (SELECT charge_id FROM charges WHERE charge_type = 'YEAR')))))\n\nWho owns the most expensive dog? Give me his or her last name.. \nSELECT  SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE dog_id = (SELECT dog_id FROM treatments WHERE treatment_id = (SELECT treatment_id FROM treatments WHERE treatment"}
{"question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.. \nSELECT  SELECT professionals.email_address FROM professionals WHERE (professionals.email_address LIKE 'h%' OR professionals.email_address LIKE 'wi%') LIMIT 10\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?. \nSELECT  SELECT DISTINCT professionals.email_address  FROM  kennels, breeds, charges, sizes, treatments, owners, dogs, professionals WHERE  kennels.dog_kennels_id = dogs.dog_id AND dogs.owner_id = owners.owner_id AND kennels.kennels_id = kennels.kennels_id AND owners.first_name LIKE \"Ben%\" AND owners.last_name LIKE \"%a%\" AND dogs.date_of_birth < '1998-06-01' AND dogs.date_of_birth > '1990-06-01' AND charges.charge_id = kennels.charges_id AND charges.charge_amount > '0' AND sizes.size_code = kennels.sizes_id AND sizes.size_description = \"Large\" AND professionals.professional_id = kennels.professionals_id AND professionals.role_code = '0' AND treatments.treatment_type_code = '0' AND treatments.treatment_id IS"}
{"question": "What are the arriving date and the departing date of all the dogs?", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the arriving date and the departing date of all the dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the arriving date and the departing date of all the dogs?. \nSELECT  SELECT 'Dog' AS type,\n        SUM(CASE WHEN YEAR(date_of_departed) = 2013 THEN 1 ELSE 0 END) AS 2013,\n        SUM(CASE WHEN YEAR(date_of_departed) = 2014 THEN 1 ELSE 0 END) AS 2014,\n        SUM(CASE WHEN YEAR(date_of_departed) = 2015 THEN 1 ELSE 0 END) AS 2015,\n        SUM(CASE WHEN YEAR(date_of_departed) = 2016 THEN 1 ELSE 0 END) AS 2016,\n        SUM(CASE WHEN YEAR(date_of_departed) = 2017 THEN 1 ELSE 0 END) AS 2017\nFROM kennels.Dogs\nGROUP BY type\n\nHow many dogs were adopted in 2013, 2014, 2015, 2016, and 2017?\nSELECT  COUNT(date_of_"}
{"question": "List the arrival date and the departure date for all the dogs.", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the arrival date and the departure date for all the dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the arrival date and the departure date for all the dogs.. \nSELECT  SELECT (MAX(date_of_arrival) - MIN(date_of_departure)) AS age_of_dog\nFROM  FROM Dog_Kennels;\n\"\"\"\n# select all the dogs in the table\ndef get_all_dogs():\n  pass\n\n# select all the dogs in the table\ndef get_all_professionals():\n  pass\n\n# select all the dogs in the table\ndef get_all_treatments():\n  pass\n\n# select all the dogs in the table\ndef get_all_breeds():\n  pass\n\n# select all the dogs in the table\ndef get_all_sizes():\n  pass\n\n# select all the dogs in the table\ndef get_all_owners():\n  pass\n\n# select all the dogs in the table\ndef get_all_treatment_types():\n  pass\n\n# select all the dogs in the table\ndef get_all_owners():\n  pass\n\n# insert a dog in the table\ndef add_dog(owner_id, name, gender, age, date_of_birth, weight, size"}
{"question": "How many dogs went through any treatments?", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs went through any treatments?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs went through any treatments?. \nSELECT  SELECT treatment_id, SUM(cost_of_treatment)\nFROM    treatments \nWHERE    dog_id = 2 \nAND      owner_id = 12898\nGROUP BY treatment_id;\n0.0436 seconds\n\"\"\"\n\ndef select_cost_treatments_by_dog_id(dog_id):\n    query = \"\"\"SELECT treatment_id, SUM(cost_of_treatment)\n    FROM treatments\n    WHERE dog_id = %s\n    GROUP BY treatment_id;\"\"\"\n\n    #Execute the query.\n    cursor.execute(query, (dog_id,))\n\n    #Return the cursor.\n    return cursor\n\ndef select_cost_treatments_by_owner_id():\n    query = \"\"\"SELECT treatment_id, SUM(cost_of_treatment)\n    FROM treatments\n    WHERE owner_id = 12898\n    GROUP BY treatment_id;\"\"\"\n\n    #Execute the query.\n    cursor.execute(query)\n\n    #Return the cursor.\n    return cursor"}
{"question": "Count the number of dogs that went through a treatment.", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCount the number of dogs that went through a treatment.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCount the number of dogs that went through a treatment.. \nSELECT  SELECT breed_code, size_code, COUNT(*) AS dog_count FROM dogs GROUP BY breed_code, size_code;\nGet a list of all the owners with their properties. \nSELECT  SELECT first_name, last_name, owner_id FROM owners;\nGet a list of all the dogs and their owners. \nSELECT  SELECT dog_id, owner_id, first_name, last_name, size_code, breed_code FROM dogs INNER JOIN owners ON owners.owner_id=dogs.owner_id;\nGet a list of all the professionals and their properties. \nSELECT  SELECT role_code, first_name, last_name, professionals.professional_id, street, city, state, zip_code, email_address, home_phone, cell_number FROM professionals;\nGet a list of all the treatments with their properties. \nSELECT  SELECT treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment FROM treatments;\nGet a list of all the charges with their properties. \n"}
{"question": "How many professionals have performed any treatment to dogs?", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many professionals have performed any treatment to dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many professionals have performed any treatment to dogs?. \nSELECT  SELECT Count(Treatments.treatment_id) AS Number_Of_Professionals_Who_Have_Performed_Any_Treatment\nFROM    Treatments\nGROUP   BY Treatments.professional_id\nORDER   BY Number_Of_Professionals_Who_Have_Performed_Any_Treatment\n##How many professionals have performed any treatment to the dogs with a given owner?. \nSELECT  SELECT Count(Treatments.treatment_id) AS Number_Of_Professionals_Who_Have_Performed_Any_Treatment\nFROM    Treatments\nWHERE   Treatments.owner_id = Owners.owner_id\nGROUP   BY Treatments.professional_id\nORDER   BY Number_Of_Professionals_Who_Have_Performed_Any_Treatment\n##How many professionals have performed any treatment to the dogs with a given breed?. \nSELECT  SELECT Count(Treatments.treatment_id) AS Number_Of_Professionals_Who_Have_Performed_Any"}
{"question": "Find the number of professionals who have ever treated dogs.", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of professionals who have ever treated dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of professionals who have ever treated dogs.. \nSELECT  SELECT COUNT(*) AS \"total_treatment_professionals\"\nFROM treatments\nWHERE EXISTS(\n  SELECT owner_id, treatment_type_code, COUNT(*)\n  FROM treatments\n  GROUP BY owner_id, treatment_type_code\n  HAVING COUNT(*) > 1\n)\n\nFind the number of dogs that have been treated by any professionals \nSELECT  SELECT COUNT(*) AS \"total_dog_treatments\"\nFROM treatments\nWHERE EXISTS(\n  SELECT dog_id, COUNT(*)\n  FROM treatments\n  GROUP BY dog_id\n  HAVING COUNT(*) > 1\n)\n\nFind the number of dogs that have been treated by any professionals, but only once\nSELECT  SELECT COUNT(*) AS \"total_dog_treatments_once\"\nFROM treatments\nWHERE EXISTS(\n  SELECT dog_id, COUNT(*)\n  FROM treatments\n  GROUP BY dog_id\n  HAVING COUNT(*) = 1\n)\n\nFind the number of dogs that have been treated by any professionals, but only once, but not by the same professional\nSELECT  SELECT COUNT(*) AS \"total_dog_"}
{"question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals live in a city containing the substring 'West'? List his or her role, street, city and state.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich professionals live in a city containing the substring 'West'? List his or her role, street, city and state.. \nSELECT  SELECT_STATEMENT\nFROM    SELECT_STATEMENT\nWHERE   SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATEMENT\nLIKE     SELECT_STATE"}
{"question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the role, street, city and state of the professionals living in a city that contains the substring 'West'.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the role, street, city and state of the professionals living in a city that contains the substring 'West'.. \nSELECT  SELECT  DISTINCT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n                        SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\n    \n        TYPE     OWNER_ID  FIRST_NAME  LAST_NAME   STREET     CITY     STATE     ZIP_CODE     EMAIL_ADDRESS     PHONE_NUMBER     CELL_NUMBER     OWNER_TYPE\n        ----     -------   --------   --------   ---------   -------   --------   ----------   ---------------   ---------------   ---------------   -------\n        Dog    789        John       Smith    123 Main St.  Redtown    NY     10011      john.smith@dogcity.com   555-123-1234    555-123-1234     Dog\n        Owner   123        Mary       Jones    456 Main St.  Redtown    NY     10011      mary.jones@dogcity.com   555-12"}
{"question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owners live in the state whose name contains the substring 'North'? List his first name, last name and email.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhich owners live in the state whose name contains the substring 'North'? List his first name, last name and email.. \nSELECT  SELECT owner_id, owner_first_name, owner_last_name, owner_email_address\nFROM  FROM owners\nWHERE  WHERE Owner_state_code IN (SELECT state_code FROM states WHERE state_name LIKE '%North%')\n\"\"\"\n\n\n#Even though we have the same state codes and names,\n#we can't use a LIKE statement. \n#SQLite doesn't allow us to use LIKE when doing JOINs. \n#Instead we need to use a CASE statement.\n\"\"\"\nSELECT  SELECT owner_id, owner_first_name, owner_last_name, owner_email_address\nFROM  FROM owners\nWHERE  WHERE Owner_state_code IN (SELECT CASE WHEN state_name = 'North Carolina' THEN 34107 WHEN state_name = 'North Dakota' THEN 35003 WHEN state_name = 'Ohio' THEN 39001 WHEN state_name = 'Oklahoma' THEN 40001 WHEN state_name = 'Oregon' THEN 41007 WHEN state_name = 'Pennsylvan"}
{"question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nReturn the first name, last name and email of the owners living in a state whose name contains the substring 'North'.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nReturn the first name, last name and email of the owners living in a state whose name contains the substring 'North'.. \nSELECT  SELECT owners.first_name,\n    last_name,\n    email_address \nFROM    owners,\n    states \nWHERE   states.state_name LIKE '%North%'\n    AND states.state_code = owners.state_code;\n#NOTE: The LIKE operator in SQLite is case insensitive\n"}
{"question": "How many dogs have an age below the average?", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs have an age below the average?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs have an age below the average?. \nSELECT  SELECT AVG(age) AS average_age FROM dogs WHERE age < 3\nHow many dogs are 5 years old? \nSELECT  SELECT COUNT(*) AS count_of_dogs_with_age_5 FROM dogs WHERE age = 5\nHow many dogs are 5 years old and have a weight below 25 lbs? \nSELECT  SELECT COUNT(*) AS count_of_dogs_with_age_5_and_weight_below_25 FROM dogs WHERE age = 5 AND weight < 25\nHow many dogs are 5 years old and have a weight above 25 lbs? \nSELECT  SELECT COUNT(*) AS count_of_dogs_with_age_5_and_weight_above_25 FROM dogs WHERE age = 5 AND weight > 25\nHow many dogs are 5 years old and have a weight below 25 lbs? \nSELECT  SELECT COUNT(*) AS count_of_dogs_with_age_5_and_weight_below_25 FROM dogs WHERE age = 5 AND weight < 25\nHow many dogs are 5 years old and have a weight above 25"}
{"question": "Count the number of dogs of an age below the average.", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCount the number of dogs of an age below the average.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCount the number of dogs of an age below the average.. \nSELECT  SELECT COUNT(*) AS \"number_of_dogs\"\n                                    FROM dogs\n                                    WHERE age <= (SELECT AVG(age) FROM dogs)\n                                    GROUP BY age\n                                    ORDER BY age ASC;\n\n"}
{"question": "How much does the most recent treatment cost?", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does the most recent treatment cost?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does the most recent treatment cost?. \nSELECT  SELECT treatment_id, \n         ( SELECT  SUM(cost_of_treatment) \n           FROM    treatment_types tt INNER JOIN treatments t \n                   ON t.treatment_type_code = tt.treatment_type_code\n           WHERE   t.professional_id = professionals.professional_id\n             AND  t.date_of_treatment = ( SELECT  MAX(date_of_treatment)\n                                         FROM    treatments\n                                         WHERE   date_of_treatment <= @CURRENT_DATE\n                                       )\n         )\nFROM    professionals\nWHERE   professionals.professional_id IN ( SELECT  professionals.professional_id\n                                            FROM    professionals INNER JOIN \n                                                   treatments t \n                                                   ON  professionals.professional_id = t.professional_id\n                                            WHERE   t.dog_id = @DOG_ID\n                                          )\nORDER BY treatment_id DESC\n#Breeds(breed_code, breed_name)\n#Dog_"}
{"question": "Show me the cost of the most recently performed treatment.", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nShow me the cost of the most recently performed treatment.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nShow me the cost of the most recently performed treatment.. \nSELECT  SELECT professionals.first_name AS \"First Name\",\n       treatments.cost_of_treatment AS \"Cost of treatment\" \nFROM    professionals \n       INNER JOIN treatments \n       ON professionals.professional_id = treatments.professional_id \nORDER BY treatments.date_of_treatment DESC \nLIMIT  1;\n \n"}
{"question": "How many dogs have not gone through any treatment?", "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs have not gone through any treatment?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many dogs have not gone through any treatment?. \nSELECT  SELECT COUNT(*) FROM \nDogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id \nWHERE t.treatment_id IS NULL\n\nWhat is the total number of dogs who have been treated?. \nSELECT  SELECT COUNT(*) FROM \nDogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id\n\nWhat is the total number of dogs that have been treated for their fleas?. \nSELECT  SELECT COUNT(*) FROM \nDogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id \nWHERE t.treatment_id = 1 \n\nWhat is the total number of dogs that have been treated for their heartworms?. \nSELECT  SELECT COUNT(*) FROM \nDogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id \nWHERE t.treatment_id = 2 \n\nWhat is the total number of dogs that have been treated for their arthritis?. \nSELECT  SELECT COUNT(*) FROM \nDogs d LEFT JOIN Treatments t ON d.dog_id"}
{"question": "Tell me the number of dogs that have not received any treatment .", "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the number of dogs that have not received any treatment .. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the number of dogs that have not received any treatment .. \nSELECT  SELECT count(*) FROM dog_kennels WHERE\n    abandon_yn = 'N' AND NOT EXISTS (\n    SELECT 1\n        FROM treatments \n        WHERE dog_id = dog_kennels.dog_id \n            AND treatment_id = treatments.treatment_id \n    )\n"}
{"question": "How many owners temporarily do not have any dogs?", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many owners temporarily do not have any dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many owners temporarily do not have any dogs?. \nSELECT  SELECT count(o.owner_id) as No_of_Dogs_Adopted\nFROM  dogs d\nINNER JOIN owners o on d.owner_id = o.owner_id\nWHERE  d.date_of_departed is null\n\nHow many dogs are currently being treated for obesity? \nSELECT  SELECT count(d.dog_id) as Number_of_Obesity_Treatments\nFROM  dogs d\nINNER JOIN treatments t on d.dog_id = t.dog_id\nINNER JOIN treatments_types tt on t.treatment_type_id = tt.treatment_type_id\nINNER JOIN sizes s on tt.size_code = s.size_code\nINNER JOIN charges c on s.size_code = c.size_code\nWHERE  tt.treatment_type_code = '0001' and c.charge_amount < 1000\n\nHow many owners are currently treating their dogs for obesity? \nSELECT  SELECT count(o.owner_id) as Number_of"}
{"question": "Find the number of owners who do not own any dogs at this moment.", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of owners who do not own any dogs at this moment.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of owners who do not own any dogs at this moment.. \nSELECT  SELECT  COUNT(DISTINCT(owner_id)) AS OwnerCount  FROM  Owners  WHERE  owner_id = 1;\n\n\n#Find the name of owners who owns only 1 dog at this moment.. \nSELECT  owner_id  FROM  Owners  WHERE  owner_id = 1; \n\n#Find the name of owners who owns 2 dogs at this moment.. \nSELECT  owner_id  FROM  Owners  WHERE  owner_id = 2; \n\n#Find the name of owners who owns 2 dogs at this moment.. \nSELECT  owner_id  FROM  Owners  WHERE  owner_id = 3; \n\n#Find the name of owners who owns 2 dogs at this moment.. \nSELECT  owner_id  FROM  Owners  WHERE  owner_id = 4; \n\n#Find the name of owners who owns 2 dogs at this moment.. \nSELECT  owner_id  FROM  Owners  WHERE  owner_id = 5; \n\n#Find the name of own"}
{"question": "How many professionals did not operate any treatment on dogs?", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many professionals did not operate any treatment on dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow many professionals did not operate any treatment on dogs?. \nSELECT  SELECT COUNT(*) FROM Professionals WHERE role_code != '8';\nHow many dogs were there in the database?. \nSELECT  SELECT COUNT(*) FROM Dogs;\nWhat was the total amount of charges recorded?. \nSELECT  SELECT SUM(charge_amount) FROM Charges;\nWhat was the total amount of payments recorded?. \nSELECT  SELECT SUM(payment_amount) FROM Payments;\nHow many dogs were there with the code 4? \nSELECT  SELECT COUNT(*) FROM Dogs WHERE breed_code = 4;\nHow many dogs were there in the database and had code 4?. \nSELECT  SELECT COUNT(*) FROM Dogs WHERE breed_code = 4 AND abandoned_yn = 'N';\nHow many dogs were there in the database and had code 4?. \nSELECT  SELECT COUNT(*) FROM Dogs WHERE breed_code = 4 AND abandoned_yn = 'Y';\nHow many dogs were there in the database and had code 4?. \nSELECT  SELECT COUNT(*) FROM Dogs WHERE breed_code = 4 AND abandoned_yn IS NULL;\nHow many dogs were there in the database and had code 4?. "}
{"question": "Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of professionals who have not treated any dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the number of professionals who have not treated any dogs.. \nSELECT  SELECT COUNT(*) FROM (SELECT professional_id FROM professionals GROUP BY professional_id HAVING COUNT(*) = 1) as count \n\nFind the number of dogs that have not been treated by any professionals..\nSELECT  SELECT COUNT(*) FROM (SELECT dog_id FROM dogs GROUP BY dog_id HAVING COUNT(*) = 1) as count \n\nFind the number of professionals who have not treated any dogs..\nSELECT  SELECT COUNT(*) FROM (SELECT professional_id FROM professionals GROUP BY professional_id HAVING COUNT(*) = 0) as count \n\nFind the number of dogs that have not been treated by any professionals..\nSELECT  SELECT COUNT(*) FROM (SELECT dog_id FROM dogs GROUP BY dog_id HAVING COUNT(*) = 0) as count \n\nFind the number of professionals who have not treated any dogs..\nSELECT  SELECT COUNT(*) FROM (SELECT professional_id FROM professionals GROUP BY professional_id HAVING COUNT(*) = 0) as count \n\nFind the number of dogs that have not been treated by any professionals..\nSELECT  SELECT COUNT(*) FROM (SELECT dog_id FROM dogs GROUP BY dog_id HAV"}
{"question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.. \nSELECT  SELECT name,\n        (SELECT COUNT(*) FROM dog_kennels WHERE abandoned_yn = 1) AS abandoned,\n        weight\n    FROM    dogs\n    WHERE   abandoned_yn = 0\n    GROUP BY  name\n    ORDER BY  name ASC\n##    display_results (db)\nList the top 10 professionals based on their highest number of treatments? \nSELECT  SELECT professional_id,\n        treatments_id AS treatment_count\n    FROM    treatments\n    GROUP BY  professional_id\n    ORDER BY  treatment_count DESC\n##    display_results (db)\nList the top 10 treatments based on their highest number of treatments? \nSELECT  SELECT treatment_id,\n        treatments_id AS treatment_count\n    FROM    treatments\n    GROUP BY  treatment_id\n    ORDER BY  treatment_count DESC\n##    display_results (db)\nList the top 10 treatments based on their highest cost? \nSELECT  SELECT treatment_id,\n        treatments_id AS treatment_count\n    FROM    treatments\n    GROUP BY  treatment_id\n    ORDER BY "}
{"question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.. \nSELECT  SELECT  Dogs.abandoned_yn,  Dogs.age,  Dogs.weight\nFROM    Dog_Kennels\n    JOIN  Dogs\n    ON    Dog_Kennels.dog_id = Dogs.dog_id\nWHERE   Dog_Kennels.abandoned_yn = 1\nORDER BY Dog_Kennels.dog_id,  Dogs.age,  Dogs.weight\n"}
{"question": "What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the average age of all the dogs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the average age of all the dogs?. \nSELECT  SELECT COUNT(*) AS number_of_dogs\n        , AVG(age) AS age\nFROM    dogs\nWHERE   abandon_yn = 'N'\nAND     age IS NOT NULL\nORDER BY breed_code, size_code, name\n\"\"\"\n\ndef _print_rows(rows):\n    print \"\\n\"\n    for row in rows:\n        print row\n\ndef read_rows(db, table_name):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM \" + table_name)\n    rows = cursor.fetchall()\n    _print_rows(rows)\n    cursor.close()\n\ndef read_table_rows(db, table_name):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM \" + table_name)\n    rows = cursor.fetchall()\n    for row in rows:\n        yield row\n    cursor.close()\n\ndef read_all_rows(db):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM dog_kennels\")\n    rows = cursor.fetchall()\n    _print_rows"}
{"question": "Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCompute the average age of all the dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nCompute the average age of all the dogs.. \nSELECT  SELECT AVG(age) as age FROM dogs\n\"\"\"\n\nfrom datetime import date\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom datetime import time\n\nimport sqlite3\nimport datetime\nimport time\nimport csv\nimport sys\nimport os\n\n#\n# =============================================================================\n# 3. Implement the Dog class\n#\n# =============================================================================\n# Dog class\n# (see also, http://stackoverflow.com/questions/11828653/python-datetime-timedelta-datetime)\n# 1. What is the dog's name?\n# 2. When is the dog's birthday?\n# 3. How old is the dog?\n# 4. How long has the dog been at the kennel?\n# 5. Has the dog been adopted?\n# 6. How much does it cost to adopt the dog?\n# 7. What does the dog weigh?\n# 8. What breed is the dog?\n# 9. What size is the dog?\n# 10. What gender is the dog?\n# "}
{"question": "What is the age of the oldest dog?", "sql": "SELECT max(age) FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the age of the oldest dog?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the age of the oldest dog?. \nSELECT  SELECT 2 FROM dogs WHERE age = (SELECT MAX(age) FROM dogs)\n#What is the name of the dog whose date of birth is February 3, 2010? \nSELECT  SELECT 3 FROM dogs WHERE date_of_birth = '2010-02-03'\n#What is the number of dogs born in California?. \nSELECT  SELECT 4 FROM dogs WHERE size_code = 'CA'\n#What is the number of dogs that have a size_code of 'CA'?. \nSELECT  SELECT 5 FROM dogs WHERE size_code = 'CA'\n#What is the breed of the dog with id 1?. \nSELECT  SELECT 6 FROM dogs WHERE dog_id = 1\n#What is the number of dogs of breed code 13?. \nSELECT  SELECT 7 FROM dogs WHERE breed_code = '13'\n#What is the name of the dog with id 1?. \nSELECT  SELECT 8 FROM dogs WHERE dog_id = 1\n#What is the size of the dog with id 1?. \nSELECT  SELECT 9 FROM dogs WHERE dog_"}
{"question": "Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the age of the oldest dog.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nTell me the age of the oldest dog.. \nSELECT  SELECT * FROM dogs ORDER BY date_of_birth DESC;\n\nTell me how many dogs were adopted on May 1, 2014.. \nSELECT COUNT(date_of_birth) FROM dogs WHERE date_of_birth = '2014-05-01';\n\nTell me what dogs were adopted on May 1, 2014.. \nSELECT * FROM dogs WHERE date_of_birth = '2014-05-01';\n\nTell me how many dogs are in each size.. \nSELECT size_code, COUNT(*) as count FROM dogs GROUP BY size_code;\n\nTell me which dogs were abandoned and when.. \nSELECT dog_id, abandoned_yn, date_of_birth FROM dogs;\n\nTell me what breeds of dogs are in your facility.. \nSELECT breed_code, breed_name FROM breeds;\n\nTell me which dogs were treated by which professionals.. \nSELECT treatment_id, professional_id, treatment_type_code, date_of_treatment FROM treatments;\n\nTell me"}
{"question": "How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does each charge type costs? List both charge type and amount.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does each charge type costs? List both charge type and amount.. \nSELECT  SELECT 'charge_type' AS name, charge_amount AS value FROM Charges;\n\nWhich dog breeds are available? \nSELECT  SELECT 'breed_name' AS name, breed_code AS value FROM Breeds;\n\nHow many sizes are there? \nSELECT  SELECT 'size_description' AS name, size_code AS value FROM Sizes;\n\nWhich size code is most popular? \nSELECT  SELECT size_code, COUNT(*) AS size_count FROM Dogs GROUP BY size_code;\n\nHow many dogs are there? \nSELECT  SELECT 'dog_id' AS name, COUNT(*) AS value FROM Dogs;\n\nWho is the owner of the most dogs? \nSELECT  SELECT owner_id, COUNT(*) AS value FROM Dogs GROUP BY owner_id;\n\nWhich dogs were abandoned? \nSELECT  SELECT 'abandoned_yn' AS name, COUNT(*) AS value FROM Dogs;\n\nWho owns the oldest dog? \nSELECT  SELECT 'date_of_birth' AS name, MIN(date_of_birth) AS value FROM Dogs;\n\nWho owns the"}
{"question": "List each charge type and its amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList each charge type and its amount.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList each charge type and its amount.. \nSELECT  SELECT charge_type, charge_amount  FROM charges;\nSELECT * FROM charges ORDER BY charge_type ASC, charge_amount DESC;\n\n### Breeds\nSELECT * FROM breeds ORDER BY breed_name;\nSELECT * FROM breeds WHERE breed_id = 1;\n\n### Owners\nSELECT * FROM owners ORDER BY first_name;\nSELECT * FROM owners WHERE first_name = 'Jim';\n\n### Sizes\nSELECT * FROM sizes ORDER BY size_description;\nSELECT * FROM sizes WHERE size_id = 1;\n\n### Treatments\nSELECT * FROM treatments ORDER BY date_of_treatment;\nSELECT * FROM treatments WHERE dog_id = 1;\n\n### Dogs\nSELECT * FROM dogs ORDER BY name;\nSELECT * FROM dogs WHERE dog_id = 1;\nSELECT * FROM dogs WHERE dog_id = 1 AND gender = 'Male';\n\n### Professionals\nSELECT * FROM professionals ORDER BY last_name;\nSELECT * FROM professionals WHERE profession_id = 1;\n\n"}
{"question": "How much does the most expensive charge type costs?", "sql": "SELECT max(charge_amount) FROM Charges", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does the most expensive charge type costs?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nHow much does the most expensive charge type costs?. \nSELECT  SELECT size_code,\n        SUM(charge_amount)\nFROM    Charges INNER JOIN\n        Treatments ON Charges.charge_id = Treatments.charge_id\n        INNER JOIN Breeds ON Breeds.breed_code = Treatments.treatment_type_code\n        INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id\n        INNER JOIN Owners ON Dogs.owner_id = Owners.owner_id\n        INNER JOIN Professionals ON Professionals.professional_id = Dogs.professional_id\nWHERE   Charges.charge_type_code = 'XL'\nGROUP   BY size_code\nORDER   BY size_code, SUM(charge_amount) DESC\nLIMIT 1;\n"}
{"question": "What is the charge amount of the most expensive charge type?", "sql": "SELECT max(charge_amount) FROM Charges", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the charge amount of the most expensive charge type?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat is the charge amount of the most expensive charge type?. \nSELECT  SELECT charge_amount\n        FROM    Charges\n        ORDER BY charge_amount DESC\n        LIMIT 1\n\n#What are the first names of all the Dog Kennel employees who are Professionals?. \nSELECT  SELECT first_name\n        FROM    Professionals\n        WHERE   role_code = 'Kennel Owner'\n        ORDER BY first_name ASC\n\n#What are the first and last names of the owner of the dog named 'Patches'. \nSELECT  SELECT owner_first_name, owner_last_name\n        FROM    Owners\n        WHERE   name = 'Patches'\n\n#What is the owner_id of the owner of the dog named 'Patches'?. \nSELECT  SELECT owner_id\n        FROM    Owners\n        WHERE   name = 'Patches'\n\n#What is the date of birth of the dog named 'Patches'. \nSELECT  SELECT date_of_birth\n        FROM    Dogs\n        WHERE   name = 'Patches'\n\n#What is the date_of_birth of the dog named 'Patches' formatted as \""}
{"question": "List the email, cell phone and home phone of all the professionals.", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the email, cell phone and home phone of all the professionals.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the email, cell phone and home phone of all the professionals.. \nSELECT  SELECT last_name || ', ' || first_name AS name,\n        street,\n        city,\n        state,\n        zip_code\nFROM    professionals\nORDER BY\n        last_name,\n        first_name\nLIMIT 5\n\n\n"}
{"question": "What are the email, cell phone and home phone of each professional?", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the email, cell phone and home phone of each professional?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are the email, cell phone and home phone of each professional?. \nSELECT  SELECT 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number' FROM Professionals WHERE EXISTS (SELECT * FROM Treatments WHERE dog_id = 0 AND treatment_id = 0 AND professional_id = 1);\nWhat is the name of the dog that was abandoned by its owner? \nSELECT name FROM Dogs WHERE abandoned_yn = 1;\nWhat is the name of the oldest dog in the database?. \nSELECT name FROM Dogs WHERE age = (SELECT MAX(age) FROM Dogs);\nHow many dogs were abandoned?. \nSELECT count(*) FROM Dogs WHERE abandoned_yn = 1;\nHow many dogs are owned by the owner with the owner_id 100?. \nSELECT count(*) FROM Dogs WHERE owner_id = 100;\nHow many dogs are owned by the owner with the owner_id 100 and are not abandoned?. \nSELECT count(*) FROM Dogs WHERE owner_id = 100 AND abandoned_yn = 0;"}
{"question": "What are all the possible breed type and size type combinations?", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are all the possible breed type and size type combinations?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are all the possible breed type and size type combinations?. \nSELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT  SELECT\nFROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM    FROM\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTIES\nPROPERTI"}
{"question": "Find the distinct breed type and size type combinations for dogs.", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the distinct breed type and size type combinations for dogs.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nFind the distinct breed type and size type combinations for dogs.. \nSELECT  SELECT \n        breed_code,\n        breed_name,\n        size_code,\n        size_description\nFROM    dogs\nWHERE   abandoned_yn = 'N'\nORDER BY 1, 2, 3, 4\nLIMIT   5\n\n## select the first 10 dogs\nSELECT  breed_code,\n        breed_name,\n        size_code,\n        size_description\nFROM    dogs\nWHERE   abandoned_yn = 'N'\nORDER BY 1, 2, 3, 4\nLIMIT   10"}
{"question": "List the first name of all the professionals along with the description of the treatment they have done.", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the first name of all the professionals along with the description of the treatment they have done.. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nList the first name of all the professionals along with the description of the treatment they have done.. \nSELECT  SELECT\n(SELECT FIRST_NAME FROM OWNERS WHERE OWNER_ID=professionals.owner_id) AS 'First Name',\n(SELECT TREATMENT_TYPE_DESCRIPTION FROM TREATMENT_TYPES WHERE TREATMENT_TYPE_CODE=treatments.treatment_type_code) AS 'Treatment Type',\n(SELECT TREATMENT_ID FROM TREATMENTS WHERE TREATMENT_ID=treatments.treatment_id) AS 'Treatment Number',\n(SELECT DATE_OF_TREATMENT FROM TREATMENTS WHERE TREATMENT_ID=treatments.treatment_id) AS 'Date Of Treatment',\n(SELECT COST_OF_TREATMENT FROM TREATMENTS WHERE TREATMENT_ID=treatments.treatment_id) AS 'Cost Of Treatment'\nFROM TREATMENTS\nJOIN PROFESSIONALS ON PROFESSIONALS.PROFESSIONAL_ID=TREATMENTS.PROFESSIONAL_ID\n"}
{"question": "What are each professional's first name and description of the treatment they have performed?", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "prompt": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each professional's first name and description of the treatment they have performed?. \nSELECT ", "response": "### SQLite SQL dog_kennels database, with their properties:\n#Breeds('breed_code', 'breed_name')\n#Charges('charge_id', 'charge_type', 'charge_amount')\n#Sizes('size_code', 'size_description')\n#Treatment_Types('treatment_type_code', 'treatment_type_description')\n#Owners('owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number')\n#Dogs('dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed')\n#Professionals('professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number')\n#Treatments('treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment')\nWhat are each professional's first name and description of the treatment they have performed?. \nSELECT  SELECT first_name, treatment_type_description FROM Treatments WHERE owner_id = 1 AND treatment_id = 1\n\n\n# TODO: Write a method called `check_board` with a boolean return value. \n# The method takes a board state as input. \n# If the board state is valid, the method should return `True`. \n# If the board state is not valid, the method should return `False`.\n\ndef check_board(board):\n    # Your code here\n    if not isinstance(board, str):\n        return False\n    if len(board) == 0:\n        return False\n    if ' ' not in board:\n        return False\n    return True\n\n# Your code here\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n        self.age = 0\n\nclass Kennel:\n    def __init__(self, name, address):\n        self.name = name\n        self.address = address\n        self.dogs = []\n        self.charges = []\n        self.professionals = []\n        self.treatments"}
{"question": "How many singers are there?", "sql": "SELECT count(*) FROM singer", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nHow many singers are there?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nHow many singers are there?. \nSELECT  SELECT COUNT(*)\nFROM    \"singer\"\nWhere was singer 1 born?. \nSELECT  WHERE \"birth_year\" = 1984\nSELECT  SELECT COUNT(*)\nFROM    \"song\"\nWHERE song_id = 101\nSELECT  WHERE \"song_id\" = 101\nSELECT  SELECT COUNT(*)\nFROM    \"song\"\nWHERE \"sales\" > 10000000\nSELECT  WHERE \"sales\" > 10000000\nSELECT  SELECT COUNT(*)\nFROM    \"song\"\nWHERE \"sales\" > 10000000 AND \"highest_position\" = 1\nSELECT  WHERE \"sales\" > 10000000 AND \"highest_position\" = 1\n#Select all the singers:\n#SELECT *\n#FROM singer\n#Select the first 3 singers by sales:\n#SELECT *\n#FROM song\n#WHERE sales > 10000000 AND highest_position < 1000\n#WHERE sales > 10000000"}
{"question": "What is the count of singers?", "sql": "SELECT count(*) FROM singer", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the count of singers?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the count of singers?. \nSELECT  SELECT COUNT(Singer_ID) FROM singer;\n\nWhat are the 10 top singers ordered by popularity?. \nSELECT  SELECT Singer_ID, Name,  Birth_Year, Net_Worth_Millions, Citizenship FROM singer ORDER BY popularity DESC LIMIT 10;\n\nWhat is the sum of Singer_ID for all Italian singers?. \nSELECT  SELECT SUM(Singer_ID) AS SumOfSinger_ID FROM singer WHERE Citizenship = 'Italy';\n\nWhat is the average of Singer_ID for all singers where the name is \"Elvis Presley\"?. \nSELECT  SELECT AVG(Singer_ID) AS AvgOfSinger_ID FROM singer WHERE Name = 'Elvis Presley';\n\nHow many singers are there with the first name \"Dean\" and birth year before 1975?. \nSELECT  SELECT COUNT(Singer_ID) FROM singer WHERE \n    (Singer_ID IN\n        (SELECT  SELECT Singer_ID FROM singer WHERE \n            (Name LIKE 'Dean' AND  Birth_Year < 1"}
{"question": "List the name of singers in ascending order of net worth.", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers in ascending order of net worth.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers in ascending order of net worth.. \nSELECT  SELECT  FROM  FROM\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"question": "What are the names of singers ordered by ascending net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of singers ordered by ascending net worth?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of singers ordered by ascending net worth?. \nSELECT  SELECT DISTINCT  SELECT DISTINCT\n    Singer_ID,\n    Name,\n    Birth_Year,\n    Net_Worth_Millions,\n    Citizenship,\n    Singer_ID\nFROM Singer\nORDER BY Net_Worth_Millions\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers who have sold at least 10 million copies of their songs?. \nSELECT Singer_ID\nFROM song\nJOIN singer ON Singer_ID = Singer_ID\nWHERE Sales >= 100000000\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the name of the most popular song, according to the database?. \nSELECT Song_ID,\n    Title,\n    Singer_ID,\n    Sales,\n    Highest_Position\nFROM song\nORDER BY Sales DESC\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'High"}
{"question": "What are the birth year and citizenship of singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the birth year and citizenship of singers?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the birth year and citizenship of singers?. \nSELECT  SELECT  SELECT  SELECT \n        Singer_ID,  Name,  Birth_Year,  Citizenship \n        FROM    singer \n        GROUP BY Singer_ID, Name, Birth_Year, Citizenship\n\nWhat was the best selling song in 2000?. \nSELECT  Song_ID,  Title,  Singer_ID,  Sales \n        FROM    song \n        WHERE   Sales = (SELECT  MAX(Sales) \n                        FROM    song \n                        WHERE   Year = 2000 \n                        GROUP BY Song_ID)\n\n# Be careful about using SELECT inside a SELECT. \n# Which singer do you think is the richest?. \nSELECT  Singer_ID,  Name,  Net_Worth_Millions \n        FROM    singer \n        ORDER BY Net_Worth_Millions DESC\n\n# Which singer had the most songs in the top-ten best sellers in 1990?. \nSELECT  Singer_ID,  Name,  Song_ID \n        FROM    song \n        WHERE   Year ="}
{"question": "What are the birth years and citizenships of the singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the birth years and citizenships of the singers?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the birth years and citizenships of the singers?. \nSELECT  SELECT singer.Birth_Year, \n        GROUP_CONCAT(DISTINCT singer.Citizenship) AS Citizenships, \n        COUNT(singer.Birth_Year) AS Num_Singers \nFROM singer \nGROUP BY singer.Birth_Year \nHAVING COUNT(singer.Birth_Year) > 1 \nORDER BY singer.Birth_Year \n\nHow many songs did Bob Dylan write?. \nSELECT  COUNT(song.Singer_ID) \nFROM song \nWHERE song.Singer_ID = 'Bob Dylan'\n\nHow many songs have been written?. \nSELECT  COUNT(song.Song_ID) \nFROM song\n\nWhat are the songs that were written by a specific singer?. \nSELECT song.Song_ID \nFROM song \nJOIN singer \nON song.Singer_ID = singer.Singer_ID \nWHERE singer.Name = 'Beyonce' \n\nWhat are the songs that were written by a specific singer and have sold at least 5 million copies?. \nSELECT song.Song_"}
{"question": "List the name of singers whose citizenship is not \"France\".", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers whose citizenship is not \"France\".. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers whose citizenship is not \"France\".. \nSELECT  SELECT DISTINCT name FROM singer WHERE citizenship != 'France'\n\nSelect the name of all singers from the singer database:\nSELECT * FROM singer\n\nSelect all singers who have sales greater than 20:\nSELECT * FROM singer WHERE sales > 20\n\nSelect the singer with the highest sales. If there are ties, then select the one with the lowest sales_year:\nSELECT DISTINCT ON(name) name, sales_year, sales FROM singer ORDER BY sales DESC, sales_year ASC\n\nSelect all songs by the singer with the highest sales:\nSELECT * FROM song WHERE singer_id = (SELECT DISTINCT ON(name) name FROM singer ORDER BY sales DESC, sales_year ASC LIMIT 1)\n\nSelect the songs with sales less than 100000:\nSELECT * FROM song WHERE sales < 100000\n\nSelect the song with the highest sales:\nSELECT DISTINCT ON(title) title, sales FROM song ORDER BY sales DESC\n\nSelect all songs by the singer with the highest sales:\nSELECT * FROM song WHERE singer_id = (SELECT DISTINCT ON(name) name FROM singer ORDER"}
{"question": "What are the names of the singers who are not French citizens?", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers who are not French citizens?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers who are not French citizens?. \nSELECT  SELECT name FROM singer WHERE (Citizenship != 'France')\nAlice Cooper, Michael Jackson, Yves Montand, Lady Gaga, Elton John, Tom Jones, Georges Moustaki, Enrico Macias, Johnny Hallyday, Charles Aznavour, Daft Punk, Mireille Mathieu, Edith Piaf, Mika, Joe Dassin, M. Pokora, Jean-Jacques Goldman, Zazie, Barbara, Jean-Louis Aubert, Jean-Jacques Goldman, Michel Fugain, Michel Polnareff, Eddy Mitchell, Sylvie Vartan, Florent Pagny, Barbara, Fran\u00e7oise Hardy, Patrick Bruel, C\u00e9line Dion, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles Aznavour, Charles"}
{"question": "Show the name of singers whose birth year is either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the name of singers whose birth year is either 1948 or 1949?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the name of singers whose birth year is either 1948 or 1949?. \nSELECT  SELECT Singer_ID, Name FROM Singer WHERE Singer_ID IN (SELECT Singer_ID FROM Singer WHERE (Birth_Year = 1948) OR (Birth_Year = 1949))\n\"\"\"\n\n\n# with \"IN\" it is easier to select multiple rows \n# but it is slower. \n# the use of \"OR\" is very common \n# it is more powerful than \"AND\"\n# it can select more rows \n# but it is slower.\n\n\n#IN & OR\n\n\n# Test 1 \n#SELECT  SELECT Singer_ID, Name FROM Singer WHERE Singer_ID IN (SELECT Singer_ID FROM Singer WHERE (Birth_Year = 1948) OR (Birth_Year = 1949))\n\n# Test 2 \n#SELECT  SELECT Singer_ID, Name FROM Singer WHERE Singer_ID IN (1948, 1949)\n\n# Test 3 \n#SELECT  SELECT Singer_ID, Name FROM Singer WHERE Singer_ID IN (1948 OR"}
{"question": "What are the names of the singers whose birth years are either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers whose birth years are either 1948 or 1949?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers whose birth years are either 1948 or 1949?. \nSELECT  SELECT  Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship FROM singers WHERE Birth_Year IN (1948, 1949) \n# SELECT Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship FROM singers WHERE Birth_Year IN (1948, 1949)\n\n\n# What are the names of the singers who have a birth year of 1945?.\n# SELECT Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship FROM singers WHERE Birth_Year = 1945\n\n# What are the names of the singers who have a net worth of at least 50 million?.\n# SELECT Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship FROM singers WHERE Net_Worth_Millions >= 50\n\n# What are the names of the singers who have a net worth of at least 50 million and a birth year of 1"}
{"question": "What is the name of the singer with the largest net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the name of the singer with the largest net worth?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the name of the singer with the largest net worth?. \nSELECT  SELECT_DISTINCT(Singer_ID) FROM singer WHERE \n            Singer_ID IN (SELECT Singer_ID FROM singer WHERE \n                           Net_Worth_Millions=\n                           (SELECT Max(Net_Worth_Millions) \n                           FROM singer));\n\n# What is the total net worth of the 50 singers with the largest net worth?. \nSELECT  SELECT_DISTINCT(Sum(Net_Worth_Millions)) FROM singer WHERE \n            Singer_ID IN (SELECT Singer_ID FROM singer WHERE \n                           Net_Worth_Millions=\n                           (SELECT Max(Net_Worth_Millions) \n                           FROM singer));\n\n# What was the first hit for singer 'Madonna'?. \nSELECT  SELECT_DISTINCT(First_Hit_Year) FROM singer WHERE \n            Singer_ID=\n            (SELECT Singer_ID FROM singer WHERE \n                    Singer_ID=\n                    (SELECT Singer_ID FROM singer WHERE \n                            Name='Madonna'));\n\n# What were the top 5 songs for singer"}
{"question": "What is the name of the singer who is worth the most?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the name of the singer who is worth the most?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the name of the singer who is worth the most?. \nSELECT  SELECT Singer_ID, MAX(Net_Worth_Millions)\nFROM song \nGROUP BY Singer_ID\nORDER BY Singer_ID \n\nWhat is the name of the song with the most sales?. \nSELECT Song_ID, MAX(Sales)\nFROM song \nGROUP BY Song_ID\nORDER BY Song_ID\n\n#What was the first album of the singer who has sold the most albums?. \n#Hint: use the ROWID function. \n# 2012\n#SELECT Singer_ID, Album_ID, YEAR(Release_Date) \n#FROM song \n#WHERE Sales = (\n#    SELECT MAX(Sales)\n#    FROM song \n#    GROUP BY Singer_ID\n#)\n#GROUP BY Singer_ID, Album_ID\n\n#What is the name of the singer with the most number one songs?. \n#SELECT Singer_ID, COUNT(Singer_ID)\n#FROM song \n#WHERE Highest_Position = '1'\n#GROUP BY Singer_ID\n\n#What is the name of the song with the most number one"}
{"question": "Show different citizenship of singers and the number of singers of each citizenship.", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow different citizenship of singers and the number of singers of each citizenship.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow different citizenship of singers and the number of singers of each citizenship.. \nSELECT  SELECT Singer_ID, Name, Birth_Year, Net_Worth_Millions,\n         COUNT(Singer_ID) AS Number_Of_Singers\nFROM singer\nGROUP BY Singer_ID\nHAVING COUNT(Singer_ID) > 1;\n\n# Show the highest position of a specific song\nSELECT song.Song_ID, song.Title, singer.Singer_ID,\n       MAX(song.Sales) AS Sales_Max,\n       song.Highest_Position\nFROM song\nJOIN singer ON singer.Singer_ID = song.Singer_ID\nGROUP BY song.Song_ID, singer.Singer_ID,\n         song.Title, song.Highest_Position\nORDER BY song.Sales_Max DESC, song.Highest_Position DESC;\n\n# Show the total net worth of all the singers in the database\nSELECT Singer_ID, SUM(Net_Worth_Millions) AS Net_Worth\nFROM singer\nGROUP BY Singer_ID;\n\n# Filter the database to show all the singers with a net worth of more than $10 million\n"}
{"question": "For each citizenship, how many singers are from that country?", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each citizenship, how many singers are from that country?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each citizenship, how many singers are from that country?. \nSELECT  SELECT  singer_id, name, COUNT(singer_id)\nFROM    song\nJOIN    singer\nON      singer.singer_id = song.singer_id\nGROUP   BY singer_id, name\nHAVING  COUNT(singer_id) > 1\nLIMIT 100\nORDER BY 2, 1\n\n\n## Generating a query\n\nA query is a statement that is executed against a database to retrieve information from it.\n\nHere are some examples:\n\n    SELECT * FROM table_name\n    INSERT INTO table_name VALUES (1, 'foo')\n    SELECT column_1, column_2 FROM table_name\n    DELETE FROM table_name WHERE column_1 = 1\n    UPDATE table_name SET column_1 = 1 WHERE column_2 = 2\n\n\n## Statements\n\nThe following are the \"statements\" you can use in a query.  They are what you need to think about when formulating your query.\n\n  * SELECT\n\n    The select statement retrieves data from a table or other data source.\n    It is one of the most common query statements."}
{"question": "Please show the most common citizenship of singers.", "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nPlease show the most common citizenship of singers.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nPlease show the most common citizenship of singers.. \nSELECT  SELECT singers.Citizenship\nFROM singers INNER JOIN song\nON singers.Singer_ID = song.Singer_ID\nGROUP BY Citizenship\nHAVING COUNT(Citizenship) > 0\nORDER BY Citizenship DESC\n\"\"\"\n"}
{"question": "What is the most common singer citizenship ?", "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the most common singer citizenship ?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the most common singer citizenship ?. \nSELECT  SELECT 1 FROM song WHERE highest_position = 1 ORDER BY sales DESC LIMIT 1,1;\n\n# What is the most common singer citizenship ?. \nSELECT  SELECT 1 FROM song WHERE highest_position = 1 ORDER BY sales DESC LIMIT 1,1;\n\n# Which singer has the highest net worth ?\nSELECT  SELECT singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id WHERE song.highest_position = 1 ORDER BY sales DESC LIMIT 1,1;\n\n# Which singer has the highest net worth ?\nSELECT  SELECT singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id WHERE song.highest_position = 1 ORDER BY sales DESC LIMIT 1,1;\n\n# Which singer has the lowest net worth ?\nSELECT  SELECT singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id WHERE song.highest_position = 1 ORDER BY sales ASC LIMIT 1,1;\n\n# Which song has the highest sales ?\nSELECT  SELECT song.title FROM song JOIN singer ON song.singer_id"}
{"question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow different citizenships and the maximum net worth of singers of each citizenship.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow different citizenships and the maximum net worth of singers of each citizenship.. \nSELECT  SELECT_CITIZENSHIP, MAX(NET_WORTH) FROM SINGER WHERE CITIZENSHIP IN ('Canada', 'Japan')\n#show the songs and their singers with highest net worth..\nSELECT SONG.Song_ID, Singer.Name, MAX(Singer.NET_WORTH)\nFROM SONG INNER JOIN SINGER ON SONG.Singer_ID = SINGER.Singer_ID\nGROUP BY Song.Song_ID\nORDER BY MAX(Singer.NET_WORTH) DESC\n\n\n#Show the number of times each song was sold\nSELECT Song.Song_ID, COUNT(Song.Song_ID)\nFROM SONG INNER JOIN SONG_PURCHASE ON SONG.Song_ID = SONG_PURCHASE.Song_ID\nGROUP BY Song.Song_ID\n\n#Show the total number of songs sold\nSELECT COUNT(Song.Song_ID)\nFROM SONG\n\n#Show the songs and their sales\nSELECT SONG.Song_ID, COUNT(Song.Song_ID) AS Total_"}
{"question": "For each citizenship, what is the maximum net worth?", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each citizenship, what is the maximum net worth?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each citizenship, what is the maximum net worth?. \nSELECT  SELECT  SELECT  SELECT  SELECT\ncitizenship, max(net_worth_millions), FROM song, singer\nWHERE singer.net_worth_millions >= 10000000\nGROUP BY citizenship\nORDER BY net_worth_millions DESC\n#citizenship, max(net_worth_millions)\n#citizenship, net_worth_millions\n\n\n# Show the Top 10 with the highest Net Worth, as a column-oriented report.\nSELECT  SELECT  SELECT  SELECT  SELECT\nnet_worth_millions,\nname,\nsales,\nhighest_position,\nFROM song, singer\nWHERE singer.net_worth_millions >= 10000000\nGROUP BY net_worth_millions\nORDER BY net_worth_millions DESC\n#net_worth_millions, name, sales, highest_position\n#net_worth_millions, name, sales, highest_position, net_worth_millions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"question": "Show titles of songs and names of singers.", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow titles of songs and names of singers.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow titles of songs and names of singers.. \nSELECT  SELECT  SELECT  SELECT  SELECT\n    title, singer_id, song_id, sales, highest_position\nFROM song, singer, singer_song\nWHERE song.Song_ID = singer.Song_ID \n    AND singer_song.singer_id = singer.Singer_ID\nORDER BY highest_position DESC, sales DESC\n"}
{"question": "What are the song titles and singer names?", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the song titles and singer names?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the song titles and singer names?. \nSELECT  SELECT  SELECT  SELECT  SELECT\n  Title FROM song WHERE Singer_ID = 1;\n  Title FROM song WHERE Singer_ID = 2;\n  Title FROM song WHERE Singer_ID = 3;\n  Title FROM song WHERE Singer_ID = 4;\n  Title FROM song WHERE Singer_ID = 5;\n\nWhat is the name of the singer with the highest net worth?. \nSELECT  SELECT  SELECT  SELECT  SELECT\n  Name FROM singer WHERE Net_Worth_Millions = MAX(Net_Worth_Millions);\n  Name FROM singer WHERE Net_Worth_Millions = MAX(Net_Worth_Millions);\n  Name FROM singer WHERE Net_Worth_Millions = MAX(Net_Worth_Millions);\n  Name FROM singer WHERE Net_Worth_Millions = MAX(Net_Worth_Millions);\n  Name FROM singer WHERE Net_Worth_Millions = MAX(Net_Worth_Millions);\n\nWhat is the title of the song with the most copies sold?. \nSELECT  SELECT  SELECT  SELECT  SELECT\n  Title FROM song WHERE Sales ="}
{"question": "Show distinct names of singers that have songs with sales more than 300000.", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow distinct names of singers that have songs with sales more than 300000.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow distinct names of singers that have songs with sales more than 300000.. \nSELECT  SELECT DISTINCT name FROM singer WHERE net_worth_millions > 10 AND sales > 300000;\n\"\"\"\n"}
{"question": "what are the different names of the singers that have sales more than 300000?", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nwhat are the different names of the singers that have sales more than 300000?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nwhat are the different names of the singers that have sales more than 300000?. \n}
{"question": "Show the names of singers that have more than one song.", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the names of singers that have more than one song.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the names of singers that have more than one song.. \nSELECT  SELECT \n        s.name,\n        s.birth_year,\n        s.net_worth_millions,\n        s.citizenship\nFROM    singer s\nJOIN    song_singer ss\nON      ss.singer_id = s.singer_id\nWHERE   ss.singer_id IN\n        (\n            SELECT  s.singer_id\n            FROM    singer s\n            WHERE   s.singer_id IN\n                    (\n                        SELECT  s.singer_id\n                        FROM    singer s\n                        WHERE   s.singer_id IN\n                                (\n                                    SELECT  s.singer_id\n                                    FROM    singer s\n                                    WHERE   s.singer_id IN\n                                            (\n                                                SELECT  s.singer_id\n                                                FROM    singer s\n                                                WHERE   s.singer_id IN\n                                                        (\n                                                            SELECT  s.singer_id\n                                                            FROM    singer s\n                                                            WHERE   s.singer_id IN"}
{"question": "What are the names of the singers that have more than one songs?", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers that have more than one songs?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the names of the singers that have more than one songs?. \nSELECT  SELECT_SINGER_NAME FROM  SINGER WHERE  SINGER_ID IN ( SELECT  SELECT_SINGER_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  SONG_ID IN ( SELECT  SELECT_SONG_ID FROM  SONG WHERE  S"}
{"question": "Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the names of singers and the total sales of their songs.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the names of singers and the total sales of their songs.. \nSELECT  SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM song AS s INNER JOIN singer AS s  ON s.Singer_ID = s.Singer_ID GROUP BY s.Name\n\n# Show the highest-selling song of each singer..\nSELECT  SELECT s.Name, MAX(s.Sales) AS Highest_Sales FROM song AS s INNER JOIN singer AS s  ON s.Singer_ID = s.Singer_ID GROUP BY s.Name\n\n# Get a list of singers and their top songs, sorted by highest sales..\nSELECT  SELECT s.Singer_ID, s.Name, s.Sales, s.Highest_Sales, s.Total_Sales FROM singer AS s INNER JOIN song AS s  ON s.Singer_ID = s.Singer_ID ORDER BY s.Highest_Sales DESC\n\n# Select all songs that are sung by at least 3 singers..\nSELECT  SELECT s.Title, s.Sales, s.Highest_Position, s.Singer_ID  FROM song AS s INNER JOIN singer AS s  ON s.Singer"}
{"question": "For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each singer name, what is the total sales for their songs?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nFor each singer name, what is the total sales for their songs?. \nSELECT  SELECT singer.Name, \n         SUM(song.Sales) AS Total_Sales\nFROM    singer\n         LEFT JOIN song\n               ON singer.Name = song.Singer_ID\nGROUP BY singer.Name;\n#query = 'SELECT singer.Name, \n#             SUM(song.Sales) AS Total_Sales\n#             FROM singer\n#             LEFT JOIN song\n#                  ON singer.Name = song.Singer_ID\n#             GROUP BY singer.Name;'\n#results =  [{\"name\": \"Billy Joel\", \"total_sales\": 147.5},\n#            {\"name\": \"Beatles\", \"total_sales\": 275},\n#            {\"name\": \"Michael Jackson\", \"total_sales\": 524},\n#            {\"name\": \"Bob Dylan\", \"total_sales\": 482},\n#            {\"name\": \"Elton John\", \"total_sales\": 660},\n#            {\"name\": \"Elvis Presley\", \"total_sales\": 348},\n#            {\"name\": \""}
{"question": "List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers that do not have any song.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nList the name of singers that do not have any song.. \nSELECT  SELECT  DISTINCT Name  FROM Singer  WHERE  NOT EXISTS  (  SELECT 1  FROM Song  WHERE Singer_ID = Singer_ID  )\n\n#Find the highest selling song of a given singer\nSELECT  Song_ID,  Title,  Sales  FROM Song  WHERE  Singer_ID = @Singer  ORDER BY Sales DESC\n#Find the highest position of a given singer\nSELECT  Singer_ID,  Highest_Position  FROM Singer  WHERE  Singer_ID = @Singer\n\n#Create table \nCREATE TABLE Song (\n    Song_ID INTEGER PRIMARY KEY,\n    Title VARCHAR(255),\n    Singer_ID INTEGER,\n    Sales INTEGER,\n    Highest_Position INTEGER\n)\n\nCREATE TABLE Singer (\n    Singer_ID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Birth_Year INTEGER,\n    Citizenship VARCHAR(255),\n    Net_Worth_Millions INTEGER\n)\n\n#Inserting data\nINSERT INTO Song (Title, S"}
{"question": "What is the sname of every sing that does not have any song?", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the sname of every sing that does not have any song?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat is the sname of every sing that does not have any song?. \nSELECT  SELECT s.sname FROM singers s WHERE  s.songs_count = 0\n\"\"\"\n# What is the sname of every sing that does not have any song?. \n\n# Find the song that is sung by the most number of singers.\n# SELECT  SELECT s.sname FROM singers s  JOIN songs ON s.songs_count = songs.songs_count  GROUP BY s.sname  ORDER BY songs.songs_count DESC\n\"\"\"\n# Find the song that is sung by the most number of singers.\n# SELECT  SELECT s.sname FROM singers s  JOIN songs ON s.songs_count = songs.songs_count  GROUP BY s.sname  ORDER BY songs.songs_count DESC\n\"\"\"\n# Find the song that is sung by the least number of singers.\n# SELECT  SELECT s.sname FROM singers s  JOIN songs ON s.songs_count = songs.songs_count  GROUP BY s.sname  ORDER BY songs.songs_count ASC\n\"\"\"\n# Find the song that is sung by the least number of"}
{"question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the citizenship shared by singers with birth year before 1945 and after 1955.. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nShow the citizenship shared by singers with birth year before 1945 and after 1955.. \nSELECT  SELECT name,\n            byear,\n            CASE WHEN byear <= 1945 THEN citizenship\n                 WHEN byear >= 1956 THEN citizenship\n            END\nFROM singers\nWHERE byear BETWEEN 1945 AND 1955;\n\"\"\"\n"}
{"question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "prompt": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the citizenships that are shared by singers with a birth year before 1945 and after 1955?. \nSELECT ", "response": "### SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the citizenships that are shared by singers with a birth year before 1945 and after 1955?. \nSELECT  SELECT DISTINCT(citizenship)  FROM singer\nWHERE  birth_year < 1945 AND birth_year > 1955\nORDER  BY  citizenship\n\n## SQLite SQL singer database, with their properties:\n#singer('Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship')\n#song('Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position')\nWhat are the countries that have been the highest selling country for a singer whose birth year is before 1955 and after 1965?. \nSELECT  SELECT DISTINCT(country)  FROM song\nWHERE  highest_position > 1 AND sales > 2000000000\nAND  song_id IN (SELECT song_id FROM song WHERE singer_id IN (SELECT singer_id FROM singer WHERE birth_year > 1965 AND birth_year < 1955))\nORDER  BY  country\n\n## SQLite SQL singer database, with their properties:\n#singer"}
{"question": "How many available features are there in total?", "sql": "SELECT count(*) FROM Other_Available_Features", "prompt": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nHow many available features are there in total?. \nSELECT ", "response": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nHow many available features are there in total?. \nSELECT  SELECT count(*) \nFROM    Ref_Feature_Types,\n        Ref_Property_Types,\n        Other_Available_Features,\n        Properties,\n        Other_Property_Features\nWHERE   Ref_Feature_Types.feature_type_code = Ref_Property_Types.property_type_code\nAND Ref_Property_Types.property_type_code = Other_Available_Features.feature_type_code\nAND Ref_Property_Types.property_type_code = Properties.property_type_code\nAND Other_Available_Features.feature_id = Properties.feature_id\nAND Ref_Feature_Types.feature_type_code = Properties.feature_id\nAND Other_Property_Features.feature_id = Properties.feature_id\nAND Ref_Feature_Types.feature_type_code = Other_Property_Features.feature_id\nAND Other_Property_Features.property_id = Properties.property_id\nGROUP BY Ref_Feature_Types.feature_type_code;\n\nWhat features are available? \n\nSELECT  Ref_Feature_Types.feature_type_code,\n        Ref_Feature_"}
{"question": "What is the feature type name of feature AirCon?", "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "prompt": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nWhat is the feature type name of feature AirCon?. \nSELECT ", "response": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nWhat is the feature type name of feature AirCon?. \nSELECT  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = 'AirCon';\n\n\n#What is the name of feature type 23?\nSELECT  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = '23';\n\n#What is the description of feature type 17?\nSELECT  SELECT feature_type_description FROM Ref_Feature_Types WHERE feature_type_code = '17';\n\n#Which property type codes have the feature AirCon?. \nSELECT  SELECT feature_type_code FROM Other_Available_Features\nWHERE feature_type_code NOT IN ('11','16','17','18','19','20','21','22','23');\n\n#Which property type codes do NOT have the feature AirCon?. \nSELECT  SELECT feature_type_code FROM Other_Available_Features\nWHERE feature_type_code IN ('11','16','17','18','19','20','21','22','23');\n\n#Which property type code does not have the feature AirCon"}
{"question": "Show the property type descriptions of properties belonging to that code.", "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "prompt": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nShow the property type descriptions of properties belonging to that code.. \nSELECT ", "response": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nShow the property type descriptions of properties belonging to that code.. \nSELECT  SELECT  property_type_code AS property_type_code,  property_type_description AS property_type_description FROM property_types\nWHERE property_type_code = ?;\n\nShow all properties with those details.\nSELECT  SELECT  property_id AS property_id,  property_type_code AS property_type_code,  property_type_description AS property_type_description,  date_on_market AS date_on_market,  date_sold AS date_sold,  property_name AS property_name,  property_address AS property_address,  room_count AS room_count,  vendor_requested_price AS vendor_requested_price,  buyer_offered_price AS buyer_offered_price,  agreed_selling_price AS agreed_selling_price,  apt_feature_1 AS apt_feature_1,  apt_feature_2 AS apt_feature_2,  apt_feature_3 AS apt_feature_3,  fld_feature_1 AS fld_feature_1,  fld_feature_2 AS fld_feature_2,"}
{"question": "What are the names of properties that are either houses or apartments with more than 1 room?", "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "prompt": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nWhat are the names of properties that are either houses or apartments with more than 1 room?. \nSELECT ", "response": "### SQLite SQL real_estate_properties database, with their properties:\n#Ref_Feature_Types('feature_type_code', 'feature_type_name')\n#Ref_Property_Types('property_type_code', 'property_type_description')\n#Other_Available_Features('feature_id', 'feature_type_code', 'feature_name', 'feature_description')\n#Properties('property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details')\n#Other_Property_Features('property_id', 'feature_id', 'property_feature_description')\nWhat are the names of properties that are either houses or apartments with more than 1 room?. \nSELECT  SELECT  'house_apartment' AS  ref_feature_type_code,  'House / Apartment' AS  ref_feature_type_name FROM    Ref_Feature_Types;\n\nWhat is the sum of all features?.\nSELECT  sum(feature_value) AS  sum_feature_value FROM  Other_Available_Features;\n\nWhat are the values of the 'date_on_market' property for properties in the 'house_apartment' category?. \nSELECT  'house_apartment' AS  ref_property_type_code,  'date_on_market' AS  property_name,  sum(feature_value) AS  sum_feature_value FROM    Other_Available_Features WHERE    ref_feature_type_code = 'house_apartment' GROUP BY  feature_value;\n\nWhat are the values of the 'date_sold' property for properties in the 'house_apartment' category?. \nSELECT  'house_apartment' AS  ref_property_type_code,  'date_sold' AS  property_name,  sum(feature_value"}
