{"question": "How many singers do we have?", "sql": "SELECT count(*) FROM singer", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"How many singers do we have?\",\n\"question_toks\": \"['How', 'many', 'singers', 'do', 'we', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"concert_singer\",\n\"query\": \"SELECT COUNT(*) FROM singer\",\n\"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"singer\"],\n\"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"singer\"],\n\"question\": \"How many singers do we have?\",\n\"question_toks\": [\"How\", \"many\", \"singers\", \"do\", \"we\", \"have\", \"?\"]\n}"}
{"question": "What is the total number of singers?", "sql": "SELECT count(*) FROM singer", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the total number of singers?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'number', 'of', 'singers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT COUNT(*) FROM singer\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"singer\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"singer\"],\n    \"question\": \"What is the total number of singers?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"total\", \"number\", \"of\", \"singers\", \"?\"]\n}"}
{"question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show name, country, age for all singers ordered by age from the oldest to the youngest.\",\n\"question_toks\": \"['Show', 'name', ',', 'country', ',', 'age', 'for', 'all', 'singers', 'ordered', 'by', 'age', 'from', 'the', 'oldest', 'to', 'the', 'youngest', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT Name, Country, Age FROM singer ORDER BY Age DESC\",\n    \"query_toks\": \"['SELECT', 'Name', ',', 'Country', ',', 'Age', 'FROM', 'singer', 'ORDER', 'BY', 'Age', 'DESC']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Country', ',', 'Age', 'FROM', 'singer', 'ORDER', 'BY', 'Age', 'DESC']\",\n    \"question\": \"Show name, country, age for all singers ordered by age from the oldest to the youngest.\",\n    \"question_toks\": \"['Show', 'name', ',', 'country', ',', 'age', 'for', 'all', 'singers', 'ordered', 'by', 'age', 'from', 'the', 'oldest', 'to', 'the', 'youngest', '.']\"\n}"}
{"question": "What are the names, countries, and ages for every singer in descending order of age?", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the names, countries, and ages for every singer in descending order of age?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', ',', 'countries', ',', 'and', 'ages', 'for', 'every', 'singer', 'in', 'descending', 'order', 'of', 'age', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"concert_singer\",\n \"query\": \"SELECT Name, Country, Age FROM singer ORDER BY Age DESC\",\n \"query_toks\": \"['SELECT', 'Name', ',', 'Country', ',', 'Age', 'FROM', 'singer', 'ORDER', 'BY', 'Age', 'DESC']\",\n \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Country', ',', 'Age', 'FROM', 'singer', 'ORDER', 'BY']\",\n \"question\": \"What are the names, countries, and ages for every singer in descending order of age?\",\n \"question_toks\": \"['What', 'are', 'the', 'names', ',', 'countries', ',', 'and', 'ages', 'for', 'every', 'singer', 'in', 'descending', 'order', 'of', 'age', '?']}\"\n"}
{"question": "What is the average, minimum, and maximum age of all singers from France?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the average, minimum, and maximum age of all singers from France?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', ',', 'minimum', ',', 'and', 'maximum', 'age', 'of', 'all', 'singers', 'from', 'France', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"concert_singer\",\n\"query\": \"SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'Age', ')', ',', 'MIN', '(', 'Age', ')', ',', 'MAX', '(', 'Age', ')', 'FROM', 'singer', 'WHERE', 'Country', '=', ''France'']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'Age', ')', ',', 'MIN', '(', 'Age', ')', ',', 'MAX', '(', 'Age', ')', 'FROM', 'singer', 'WHERE', 'Country', '=', \"France\"]\",\n\"question\": \"What is the average, minimum, and maximum age of all singers from France?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', ',', 'minimum', ',', 'and', 'maximum', 'age', 'of', 'all', 'singers', 'from', 'France', '?']\"\n}"}
{"question": "What is the average, minimum, and maximum age for all French singers?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the average, minimum, and maximum age for all French singers?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', ',', 'minimum', ',', 'and', 'maximum', 'age', 'for', 'all', 'French', 'singers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age) FROM singer s WHERE s.Country = 'French'\",\n  \"query_toks\": \"['SELECT', 'AVG', '(', 's', '.', 'Age', ')', ',', 'MIN', '(', 's', '.', 'Age', ')', ',', 'MAX', '(', 's', '.', 'Age', ')', 'FROM', 'singer', 's', 'WHERE', 's', '.', 'Country', '=', \\\"'French'\\\"\", \n  \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 's', '.', 'Age', ')', ',', 'MIN', '(', 's', '.', 'Age', ')', ',', 'MAX', '(', 's', '.', 'Age', ')', 'FROM', 'singer', 's', 'WHERE', 's', '.', 'Country', '=', \\\"'French'\\\"']\",\n  \"question\": \"What is the average, minimum, and maximum age for all French singers?\",\n  \"question_toks\": \"['What', 'is', 'the', 'average', ',', 'minimum', ',', 'and', 'maximum', 'age', 'for', 'all', 'French', 'singers', '?']\"\n}"}
{"question": "Show the name and the release year of the song by the youngest singer.", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show the name and the release year of the song by the youngest singer.\",\n\"question_toks\": \"['Show', 'the', 'name', 'and', 'the', 'release', 'year', 'of', 'the', 'song', 'by', 'the', 'youngest', 'singer', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT Song_Name, Song_release_year FROM (SELECT * FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)) AS T1;\",\n  \"query_toks\": [\"SELECT\", \"Song_Name\", \",\", \"Song_release_year\", \"FROM\", \"(\", \"SELECT\", \"*\", \"FROM\", \"singer\", \"WHERE\", \"Age\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Age\", \")\", \"FROM\", \"singer\", \")\", \"AS\", \"T1\", \")\",\";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Song_Name\", \",\", \"Song_release_year\", \"FROM\", \"(\", \"SELECT\", \"*\", \"FROM\", \"singer\", \"WHERE\", \"Age\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Age\", \")\", \"FROM\", \"singer\", \")\", \"AS\", \"T1\", \")\",\";\"],\n  \"question\": \"Show the name and the release year of the song by the youngest singer.\",\n  \"question_toks\": [\"Show\", \"the\", \"name\", \"and\", \"the\", \"release\", \"year\", \"of\", \"the\", \"song\", \"by\", \"the\", \"youngest\", \"singer\", \".\"]\n}"}
{"question": "What are the names and release years for all the songs of the youngest singer?", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the names and release years for all the songs of the youngest singer?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'release', 'years', 'for', 'all', 'the', 'songs', 'of', 'the', 'youngest', 'singer', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)\",\n    \"query_toks\": \"['SELECT', 'Song_Name', ',', 'Song_release_year', 'FROM', 'singer', 'WHERE', 'Age', '=', '(', 'SELECT', 'MIN', '(', 'Age', ')', 'FROM', 'singer', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'Song_Name', ',', 'Song_release_year', 'FROM', 'singer', 'WHERE', 'Age', '=', '(', 'SELECT', 'MIN', '(', 'Age', ')', 'FROM', 'singer', ')']\",\n    \"question\": \"What are the names and release years for all the songs of the youngest singer?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'release', 'years', 'for', 'all', 'the', 'songs', 'of', 'the', 'youngest', 'singer', '?']\"\n}"}
{"question": "What are all distinct countries where singers above age 20 are from?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are all distinct countries where singers above age 20 are from?\",\n\"question_toks\": \"['What', 'are', 'all', 'distinct', 'countries', 'where', 'singers', 'above', 'age', '20', 'are', 'from', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT DISTINCT Country FROM singer WHERE Age > 20\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"singer\", \"WHERE\", \"Age\", \">\", \"20\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"singer\", \"WHERE\", \"Age\", \">\", \"?\"],\n    \"question\": \"What are all distinct countries where singers above age 20 are from?\",\n    \"question_toks\": [\"What\", \"are\", \"all\", \"distinct\", \"countries\", \"where\", \"singers\", \"above\", \"age\", \"20\", \"are\", \"from\", \"?\"]\n}"}
{"question": "What are  the different countries with singers above age 20?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are  the different countries with singers above age 20?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'countries', 'with', 'singers', 'above', 'age', '20', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT DISTINCT Country FROM singer WHERE Age > 20\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"singer\", \"WHERE\", \"Age\", \">\", \"20\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"singer\", \"WHERE\", \"Age\", \">\", \"?\"],\n    \"question\": \"What are the different countries with singers above age 20?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"different\", \"countries\", \"with\", \"singers\", \"above\", \"age\", \"20\", \"?\"]\n}"}
{"question": "Show all countries and the number of singers in each country.", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show all countries and the number of singers in each country.\",\n\"question_toks\": \"['Show', 'all', 'countries', 'and', 'the', 'number', 'of', 'singers', 'in', 'each', 'country', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country;\",\n  \"query_toks\": [\"SELECT\", \"Country\", \",\", \"COUNT\", \"(\", \"Singer_ID\", \")\", \"FROM\", \"singer\", \"GROUP\", \"BY\", \"Country\", \";\" ],\n  \"query_toks_no_value\": [\"SELECT\", \"Country\", \",\", \"COUNT\", \"(\", \"Singer_ID\", \")\", \"FROM\", \"singer\", \"GROUP\", \"BY\", \"Country\", \";\" ],\n  \"question\": \"Show all countries and the number of singers in each country.\",\n  \"question_toks\": [\"Show\", \"all\", \"countries\", \"and\", \"the\", \"number\", \"of\", \"singers\", \"in\", \"each\", \"country\", \".\" ]\n}"}
{"question": "How many singers are from each country?", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"How many singers are from each country?\",\n\"question_toks\": \"['How', 'many', 'singers', 'are', 'from', 'each', 'country', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT country, COUNT(Singer_ID) FROM singer GROUP BY country\",\n    \"query_toks\": [\"SELECT\", \"country\", \",\", \"COUNT\", \"(\", \"Singer_ID\", \")\", \"FROM\", \"singer\", \"GROUP\", \"BY\", \"country\"],\n    \"query_toks_no_value\": [\"SELECT\", \"country\", \",\", \"COUNT\", \"(\", \"Singer_ID\", \")\", \"FROM\", \"singer\", \"GROUP\", \"BY\", \"country\"],\n    \"question\": \"How many singers are from each country?\",\n    \"question_toks\": [\"How\", \"many\", \"singers\", \"are\", \"from\", \"each\", \"country\", \"?\"]\n}"}
{"question": "List all song names by singers above the average age.", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"List all song names by singers above the average age.\",\n\"question_toks\": \"['List', 'all', 'song', 'names', 'by', 'singers', 'above', 'the', 'average', 'age', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"concert_singer\",\n \"query\": \"SELECT Song_Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE Age > (SELECT AVG(Age) FROM singer) GROUP BY Song_Name\",\n \"query_toks\": \"['SELECT', 'Song_Name', 'FROM', 'singer', 'JOIN', 'singer_in_concert', 'ON', 'singer.Singer_ID', '=', 'singer_in_concert.Singer_ID', 'JOIN', 'concert', 'ON', 'concert.concert_ID', '=', 'singer_in_concert.concert_ID', 'WHERE', 'Age', '>', '(', 'SELECT', 'AVG', '(', 'Age', ')', 'FROM', 'singer', ')', 'GROUP', 'BY', 'Song_Name']\",\n \"query_toks_no_value\": \"['SELECT', 'Song_Name', 'FROM', 'singer', 'JOIN', 'singer_in_concert', 'ON', 'singer', '.', 'Singer_ID', '=', 'singer_in_concert', '.', 'Singer_ID', 'JOIN', 'concert', 'ON', 'concert', '.', 'concert_ID', '=', 'singer_in_concert', '.', 'concert_ID', 'WHERE', 'Age', '>', '(', 'SELECT', 'AVG', '(', 'Age', ')', 'FROM', 'singer', ')', 'GROUP', 'BY', 'Song_Name']\",\n \"question\": \"List all song names by singers above the average age.\",\n \"question_toks\": \"['List', 'all', 'song', 'names', 'by', 'singers', 'above', 'the', 'average', 'age', '.']}\"\n"}
{"question": "What are all the song names by singers who are older than average?", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are all the song names by singers who are older than average?\",\n\"question_toks\": \"['What', 'are', 'all', 'the', 'song', 'names', 'by', 'singers', 'who', 'are', 'older', 'than', 'average', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)\",\n    \"query_toks\": \"['SELECT', 'Song_Name', 'FROM', 'singer', 'WHERE', 'Age', '>', '(', 'SELECT', 'AVG', '(', 'Age', ')', 'FROM', 'singer', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'Song_Name', 'FROM', 'singer', 'WHERE', 'Age', '>', '(', 'SELECT', 'AVG', '(', 'Age', ')', 'FROM', 'singer', ')']\",\n    \"question\": \"What are all the song names by singers who are older than average?\",\n    \"question_toks\": \"['What', 'are', 'all', 'the', 'song', 'names', 'by', 'singers', 'who', 'are', 'older', 'than', 'average', '?']\"\n}"}
{"question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show location and name for all stadiums with a capacity between 5000 and 10000.\",\n\"question_toks\": \"['Show', 'location', 'and', 'name', 'for', 'all', 'stadiums', 'with', 'a', 'capacity', 'between', '5000', 'and', '10000', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;\",\n    \"query_toks\": [\"SELECT\", \"Location\", \",\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Capacity\", \"BETWEEN\", \"5000\", \"AND\", \"10000\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Location\", \",\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Capacity\", \"BETWEEN\", \"<number>\", \"AND\", \"<number>\", \";\"],\n    \"question\": \"Show location and name for all stadiums with a capacity between 5000 and 10000.\",\n    \"question_toks\": [\"Show\", \"location\", \"and\", \"name\", \"for\", \"all\", \"stadiums\", \"with\", \"a\", \"capacity\", \"between\", \"5000\", \"and\", \"10000\", \".\"]\n}"}
{"question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the locations and names of all stations with capacity between 5000 and 10000?\",\n\"question_toks\": \"['What', 'are', 'the', 'locations', 'and', 'names', 'of', 'all', 'stations', 'with', 'capacity', 'between', '5000', 'and', '10000', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000\",\n  \"query_toks\": [\"SELECT\", \"Location\", \",\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Capacity\", \"BETWEEN\", \"5000\", \"AND\", \"10000\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Location\", \",\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Capacity\", \"BETWEEN\", \"<NUM>\", \"AND\", \"<NUM>\"],\n  \"question\": \"What are the locations and names of all stations with capacity between 5000 and 10000?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"locations\", \"and\", \"names\", \"of\", \"all\", \"stations\", \"with\", \"capacity\", \"between\", \"5000\", \"and\", \"10000\", \"?\"]\n}"}
{"question": "What is the maximum capacity and the average of all stadiums ?", "sql": "select max(capacity), average from stadium", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the maximum capacity and the average of all stadiums ?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'capacity', 'and', 'the', 'average', 'of', 'all', 'stadiums', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT MAX(Capacity), AVG(Capacity) FROM Stadium\",\n  \"query_toks\": \"['SELECT', 'MAX', '(', 'Capacity', ')', ',', 'AVG', '(', 'Capacity', ')', 'FROM', 'Stadium']\",\n  \"query_toks_no_value\": \"['SELECT', 'MAX', '(', ')', ',', 'AVG', '(', ')', 'FROM', 'Stadium']\",\n  \"question\": \"What is the maximum capacity and the average of all stadiums ?\",\n  \"question_toks\": \"['What', 'is', 'the', 'maximum', 'capacity', 'and', 'the', 'average', 'of', 'all', 'stadiums', '?']\"\n}"}
{"question": "What is the average and maximum capacities for all stadiums ?", "sql": "select avg(capacity) ,  max(capacity) from stadium", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the average and maximum capacities for all stadiums ?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'and', 'maximum', 'capacities', 'for', 'all', 'stadiums', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT AVG(Capacity), MAX(Capacity) FROM Stadium;\",\n    \"query_toks\": \"['SELECT', 'AVG', '(', 'Capacity', ')', ',', 'MAX', '(', 'Capacity', ')', 'FROM', 'Stadium', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'AVG', '(', ')', ',', 'MAX', '(', ')', 'FROM', 'Stadium', ';']\",\n    \"question\": \"What is the average and maximum capacities for all stadiums?\",\n    \"question_toks\": \"['What', 'is', 'the', 'average', 'and', 'maximum', 'capacities', 'for', 'all', 'stadiums', '?']\"\n}"}
{"question": "What is the name and capacity for the stadium with highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the name and capacity for the stadium with highest average attendance?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'capacity', 'for', 'the', 'stadium', 'with', 'highest', 'average', 'attendance', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)\",\n    \"query_toks\": \"['SELECT', 'Name', ',', 'Capacity', 'FROM', 'stadium', 'WHERE', 'Average', '=', '(', 'SELECT', 'MAX', '(', 'Average', ')', 'FROM', 'stadium', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Capacity', 'FROM', 'stadium', 'WHERE', 'Average', '=', 'SELECT', 'MAX', 'Average', 'FROM', 'stadium']\",\n    \"question\": \"What is the name and capacity for the stadium with highest average attendance?\",\n    \"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'capacity', 'for', 'the', 'stadium', 'with', 'highest', 'average', 'attendance', '?']\"\n}"}
{"question": "What is the name and capacity for the stadium with the highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the name and capacity for the stadium with the highest average attendance?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'capacity', 'for', 'the', 'stadium', 'with', 'the', 'highest', 'average', 'attendance', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)\",\n  \"query_toks\": \"['SELECT', 'Name', ',', 'Capacity', 'FROM', 'stadium', 'WHERE', 'Average', '=', '(', 'SELECT', 'MAX', '(', 'Average', ')', 'FROM', 'stadium', ')']\",\n  \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Capacity', 'FROM', 'stadium', 'WHERE', 'Average', '=', '(', 'SELECT', 'MAX', '(', 'Average', ')', 'FROM', 'stadium', ')']\",\n  \"question\": \"What is the name and capacity for the stadium with the highest average attendance?\",\n  \"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'capacity', 'for', 'the', 'stadium', 'with', 'the', 'highest', 'average', 'attendance', '?']\"\n}"}
{"question": "How many concerts are there in year 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"How many concerts are there in year 2014 or 2015?\",\n\"question_toks\": \"['How', 'many', 'concerts', 'are', 'there', 'in', 'year', '2014', 'or', '2015', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"concert\", \"WHERE\", \"Year\", \"=\", \"'2014'\", \"OR\", \"Year\", \"=\", \"'2015'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"concert\", \"WHERE\", \"Year\", \"=\", \"?\", \"OR\", \"Year\", \"=\", \"?\"],\n    \"question\": \"How many concerts are there in year 2014 or 2015?\",\n    \"question_toks\": [\"How\", \"many\", \"concerts\", \"are\", \"there\", \"in\", \"year\", \"2014\", \"or\", \"2015\", \"?\"]\n}"}
{"question": "How many concerts occurred in 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"How many concerts occurred in 2014 or 2015?\",\n\"question_toks\": \"['How', 'many', 'concerts', 'occurred', 'in', '2014', 'or', '2015', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT count(*) FROM concert WHERE Year=2014 OR Year=2015\",\n    \"query_toks\": [\n        \"SELECT\",\n        \"count\",\n        \"(\",\n        \"*\",\n        \")\",\n        \"FROM\",\n        \"concert\",\n        \"WHERE\",\n        \"Year\",\n        \"=\",\n        \"2014\",\n        \"OR\",\n        \"Year\",\n        \"=\",\n        \"2015\"\n    ],\n    \"query_toks_no_value\": [\n        \"SELECT\",\n        \"count\",\n        \"(\",\n        \"*\",\n        \")\",\n        \"FROM\",\n        \"concert\",\n        \"WHERE\",\n        \"Year\",\n        \"=\",\n        \"?\",\n        \"OR\",\n        \"Year\",\n        \"=\",\n        \"?\"\n    ],\n    \"question\": \"How many concerts occurred in 2014 or 2015?\",\n    \"question_toks\": [\n        \"How\",\n        \"many\",\n        \"concerts\",\n        \"occurred\",\n        \"in\",\n        \"2014\",\n        \"or\",\n        \"2015\",\n        \"?\"\n    ]\n}"}
{"question": "Show the stadium name and the number of concerts in each stadium.", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show the stadium name and the number of concerts in each stadium.\",\n\"question_toks\": \"['Show', 'the', 'stadium', 'name', 'and', 'the', 'number', 'of', 'concerts', 'in', 'each', 'stadium', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM singer s, concert c WHERE s.Singer_ID = c.Singer_ID GROUP BY c.Stadium_ID;\",\n  \"query_toks\": \"['SELECT', 's', '.', 'Name', ',', 'COUNT', '(', 'c', '.', 'concert_ID', ')', 'AS', 'num_concerts', 'FROM', 'singer', 's', ',', 'concert', 'c', 'WHERE', 's', '.', 'Singer_ID', '=', 'c', '.', 'Singer_ID', 'GROUP', 'BY', 'c', '.', 'Stadium_ID', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 's', '.', '<column>', ',', 'COUNT', '(', 'c', '.', '<column>', ')', 'AS', '<agg_func>', '<selection>', 'FROM', '<table>', 's', ',', '<table>', 'c', 'WHERE', 's', '.', '<column>', '=', 'c', '.', '<column>', 'GROUP', 'BY', 'c', '.', '<column>', ';']\",\n  \"question\": \"Show the stadium name and the number of concerts in each stadium.\",\n  \"question_toks\": \"['Show', 'the', 'stadium', 'name', 'and', 'the', 'number', 'of', 'concerts', 'in', 'each', 'stadium', '.']\"\n}"}
{"question": "For each stadium, how many concerts play there?", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"For each stadium, how many concerts play there?\",\n\"question_toks\": \"['For', 'each', 'stadium', ',', 'how', 'many', 'concerts', 'play', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT Stadium.Name, COUNT(*)\\nFROM concert\\nJOIN Stadium ON concert.Stadium_ID = Stadium.Stadium_ID\\nGROUP BY Stadium.Stadium_ID\",\n  \"query_toks\": [\"SELECT\", \"Stadium\", \".\", \"Name\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"concert\", \"JOIN\", \"Stadium\", \"ON\", \"concert\", \".\", \"Stadium_ID\", \"=\", \"Stadium\", \".\", \"Stadium_ID\", \"GROUP\", \"BY\", \"Stadium\", \".\", \"Stadium_ID\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Stadium\", \".\", \"Name\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"concert\", \"JOIN\", \"Stadium\", \"ON\", \"concert\", \".\", \"Stadium_ID\", \"=\", \"Stadium\", \".\", \"Stadium_ID\", \"GROUP\", \"BY\", \"Stadium\", \".\", \"Stadium_ID\"],\n  \"question\": \"For each stadium, how many concerts play there?\",\n  \"question_toks\": [\"For\", \"each\", \"stadium\", \",\", \"how\", \"many\", \"concerts\", \"play\", \"there\", \"?\"]\n}"}
{"question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show the stadium name and capacity with most number of concerts in year 2014 or after.\",\n\"question_toks\": \"['Show', 'the', 'stadium', 'name', 'and', 'capacity', 'with', 'most', 'number', 'of', 'concerts', 'in', 'year', '2014', 'or', 'after', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT s.Name, s.Capacity FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Stadium_ID ORDER BY COUNT(DISTINCT c.concert_ID) DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 's.Name', ',', 's.Capacity', 'FROM', 'stadium', 'AS', 's', 'JOIN', 'concert', 'AS', 'c', 'ON', 's.Stadium_ID', '=', 'c.Stadium_ID', 'WHERE', 'c.Year', '>=', ''2014'', 'GROUP', 'BY', 's.Stadium_ID', 'ORDER', 'BY', 'COUNT', '(', 'DISTINCT', 'c.concert_ID', ')', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 's.Name', ',', 's.Capacity', 'FROM', 'stadium', 'AS', 's', 'JOIN', 'concert', 'AS', 'c', 'ON', 's.Stadium_ID', '=', 'c.Stadium_ID', 'WHERE', 'c.Year', '>=', '<value>', 'GROUP', 'BY', 's.Stadium_ID', 'ORDER', 'BY', 'COUNT', '(', 'DISTINCT', 'c.concert_ID', ')', 'DESC', 'LIMIT', '1']\",\n    \"question\": \"Show the stadium name and capacity with most number of concerts in year 2014 or after.\",\n    \"question_toks\": \"['Show', 'the', 'stadium', 'name', 'and', 'capacity', 'with', 'most', 'number', 'of', 'concerts', 'in', 'year', '2014', 'or', 'after', '.']\"\n}"}
{"question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the name and capacity of the stadium with the most concerts after 2013 ?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'capacity', 'of', 'the', 'stadium', 'with', 'the', 'most', 'concerts', 'after', '2013', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT Name, Capacity FROM (SELECT Stadium_ID, COUNT(*) AS concert_count FROM concert WHERE Year > 2013 GROUP BY Stadium_ID ORDER BY concert_count DESC LIMIT 1) AS t1 JOIN stadium ON t1.Stadium_ID = stadium.Stadium_ID\",\n    \"query_toks\": \"['SELECT', 'Name', ',', 'Capacity', 'FROM', '(', 'SELECT', 'Stadium_ID', ',', 'COUNT', '(', '*', ')', 'AS', 'concert_count', 'FROM', 'concert', 'WHERE', 'Year', '>', '2013', 'GROUP', 'BY', 'Stadium_ID', 'ORDER', 'BY', 'concert_count', 'DESC', 'LIMIT', '1', ')', 'AS', 't1', 'JOIN', 'stadium', 'ON', 't1.Stadium_ID', '=', 'stadium.Stadium_ID']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Capacity', 'FROM', '(', 'SELECT', 'Stadium_ID', ',', 'COUNT', '(', '*', ')', 'AS', 'concert_count', 'FROM', 'concert', 'WHERE', 'Year', '>', '?', 'GROUP', 'BY', 'Stadium_ID', 'ORDER', 'BY', 'concert_count', 'DESC', 'LIMIT', '?', ')', 'AS', 't1', 'JOIN', 'stadium', 'ON', 't1.Stadium_ID', '=', 'stadium.Stadium_ID']\",\n    \"question\": \"What is the name and capacity of the stadium with the most concerts after 2013?\",\n    \"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'capacity', 'of', 'the', 'stadium', 'with', 'the', 'most', 'concerts', 'after', '2013', '?']\"\n}"}
{"question": "Which year has most number of concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Which year has most number of concerts?\",\n\"question_toks\": \"['Which', 'year', 'has', 'most', 'number', 'of', 'concerts', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"concert_singer\",\n \"query\": \"SELECT Year, COUNT(concert_ID) \\nFROM concert \\nGROUP BY Year \\nORDER BY COUNT(concert_ID) DESC \\nLIMIT 1\",\n \"query_toks\": \"['SELECT', 'Year', ',', 'COUNT', '(', 'concert_ID', ')', 'FROM', 'concert', 'GROUP', 'BY', 'Year', 'ORDER', 'BY', 'COUNT', '(', 'concert_ID', ')', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Year', ',', 'COUNT', '(', ')', 'FROM', 'concert', 'GROUP', 'BY', 'Year', 'ORDER', 'BY', 'COUNT', '(', ')', 'DESC', 'LIMIT', '1']\",\n \"question\": \"Which year has most number of concerts?\",\n \"question_toks\": \"['Which', 'year', 'has', 'most', 'number', 'of', 'concerts', '?']\"}"}
{"question": "What is the year that had the most concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the year that had the most concerts?\",\n\"question_toks\": \"['What', 'is', 'the', 'year', 'that', 'had', 'the', 'most', 'concerts', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT Year, COUNT(*) AS Concert_Count FROM concert GROUP BY Year ORDER BY Concert_Count DESC LIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"Year\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"Concert_Count\", \"FROM\", \"concert\", \"GROUP\", \"BY\", \"Year\", \"ORDER\", \"BY\", \"Concert_Count\", \"DESC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Year\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"Concert_Count\", \"FROM\", \"concert\", \"GROUP\", \"BY\", \"Year\", \"ORDER\", \"BY\", \"Concert_Count\", \"DESC\", \"LIMIT\", \"1\"],\n  \"question\": \"What is the year that had the most concerts?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"year\", \"that\", \"had\", \"the\", \"most\", \"concerts\", \"?\"]\n}"}
{"question": "Show the stadium names without any concert.", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show the stadium names without any concert.\",\n\"question_toks\": \"['Show', 'the', 'stadium', 'names', 'without', 'any', 'concert', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT DISTINCT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert);\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Stadium_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"Stadium_ID\", \"FROM\", \"concert\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Stadium_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"Stadium_ID\", \"FROM\", \"concert\", \")\", \";\"],\n  \"question\": \"Show the stadium names without any concert.\",\n  \"question_toks\": [\"Show\", \"the\", \"stadium\", \"names\", \"without\", \"any\", \"concert\", \".\"]\n}"}
{"question": "What are the names of the stadiums without any concerts?", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the names of the stadiums without any concerts?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'stadiums', 'without', 'any', 'concerts', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);\",\n  \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Stadium_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Stadium_ID\", \"FROM\", \"concert\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Stadium_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Stadium_ID\", \"FROM\", \"concert\", \")\", \";\"],\n  \"question\": \"What are the names of the stadiums without any concerts?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"the\", \"stadiums\", \"without\", \"any\", \"concerts\", \"?\"]\n}"}
{"question": "Show countries where a singer above age 40 and a singer below 30 are from.", "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show countries where a singer above age 40 and a singer below 30 are from.\",\n\"question_toks\": \"['Show', 'countries', 'where', 'a', 'singer', 'above', 'age', '40', 'and', 'a', 'singer', 'below', '30', 'are', 'from', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n   \"db_id\": \"concert_singer\",\n   \"query\": \"SELECT DISTINCT s1.Country\\nFROM singer s1, singer s2\\nWHERE s1.Age > 40 AND s2.Age < 30\\n  AND s1.Country = s2.Country;\",\n   \"query_toks\": \"[SELECT, DISTINCT, s1.Country, FROM, singer, s1, ,, singer, s2, WHERE, s1.Age, >, 40, AND, s2.Age, <, 30, AND, s1.Country, =, s2.Country, ;]\",\n   \"query_toks_no_value\": \"[SELECT, DISTINCT, s1.Country, FROM, singer, s1, ,, singer, s2, WHERE, s1.Age, >, <number>, AND, s2.Age, <, <number>, AND, s1.Country, =, s2.Country, ;]\",\n   \"question\": \"Show countries where a singer above age 40 and a singer below 30 are from.\",\n   \"question_toks\": \"['Show', 'countries', 'where', 'a', 'singer', 'above', 'age', '40', 'and', 'a', 'singer', 'below', '30', 'are', 'from', '.']\"\n}"}
{"question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show names for all stadiums except for stadiums having a concert in year 2014.\",\n\"question_toks\": \"['Show', 'names', 'for', 'all', 'stadiums', 'except', 'for', 'stadiums', 'having', 'a', 'concert', 'in', 'year', '2014', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT `Name` FROM `stadium` WHERE `Stadium_ID` NOT IN (SELECT `Stadium_ID` FROM `concert` WHERE `Year` = '2014');\",\n  \"query_toks\": \"['SELECT', '`Name`', 'FROM', '`stadium`', 'WHERE', '`Stadium_ID`', 'NOT', 'IN', '(', 'SELECT', '`Stadium_ID`', 'FROM', '`concert`', 'WHERE', '`Year`', '=', ''2014''', ')', ';']\",\n  \"query_toks_no_value\": \"['SELECT', '`Name`', 'FROM', '`stadium`', 'WHERE', '`Stadium_ID`', 'NOT', 'IN', '(', 'SELECT', '`Stadium_ID`', 'FROM', '`concert`', 'WHERE', '`Year`', '=', '', ')', ';']\",\n  \"question\": \"Show names for all stadiums except for stadiums having a concert in year 2014.\",\n  \"question_toks\": \"['Show', 'names', 'for', 'all', 'stadiums', 'except', 'for', 'stadiums', 'having', 'a', 'concert', 'in', 'year', '2014', '.']\"\n}"}
{"question": "What are the names of all stadiums that did not have a concert in 2014?", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the names of all stadiums that did not have a concert in 2014?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'stadiums', 'that', 'did', 'not', 'have', 'a', 'concert', 'in', '2014', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')\",\n  \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Stadium_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Stadium_ID\", \"FROM\", \"concert\", \"WHERE\", \"Year\", \"=\", \"'2014'\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"stadium\", \"WHERE\", \"Stadium_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Stadium_ID\", \"FROM\", \"concert\", \"WHERE\", \"Year\", \"=\", \"?\", \")\", \";\"],\n  \"question\": \"What are the names of all stadiums that did not have a concert in 2014?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"all\", \"stadiums\", \"that\", \"did\", \"not\", \"have\", \"a\", \"concert\", \"in\", \"2014\", \"?\"]\n}"}
{"question": "Show the name and theme for all concerts and the number of singers in each concert.", "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Show the name and theme for all concerts and the number of singers in each concert.\",\n\"question_toks\": \"['Show', 'the', 'name', 'and', 'theme', 'for', 'all', 'concerts', 'and', 'the', 'number', 'of', 'singers', 'in', 'each', 'concert', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme\",\n  \"query_toks\": [\"SELECT\", \"concert\", \".\", \"concert_Name\", \",\", \"concert\", \".\", \"Theme\", \",\", \"COUNT\", \"(\", \"singer_in_concert\", \".\", \"Singer_ID\", \")\", \"FROM\", \"concert\", \"JOIN\", \"singer_in_concert\", \"ON\", \"concert\", \".\", \"concert_ID\", \"=\", \"singer_in_concert\", \".\", \"concert_ID\", \"GROUP\", \"BY\", \"concert\", \".\", \"concert_Name\", \",\", \"concert\", \".\", \"Theme\"],\n  \"query_toks_no_value\": [\"SELECT\", \"concert\", \".\", \"concert_Name\", \",\", \"concert\", \".\", \"Theme\", \",\", \"COUNT\", \"(\", \"singer_in_concert\", \".\", \"Singer_ID\", \")\", \"FROM\", \"concert\", \"JOIN\", \"singer_in_concert\", \"ON\", \"concert\", \".\", \"concert_ID\", \"=\", \"singer_in_concert\", \".\", \"concert_ID\", \"GROUP\", \"BY\", \"concert\", \".\", \"concert_Name\", \",\", \"concert\", \".\", \"Theme\"],\n  \"question\": \"Show the name and theme for all concerts and the number of singers in each concert.\",\n  \"question_toks\": [\"Show\", \"the\", \"name\", \"and\", \"theme\", \"for\", \"all\", \"concerts\", \"and\", \"the\", \"number\", \"of\", \"singers\", \"in\", \"each\", \"concert\", \".\"]\n}"}
{"question": "What are the names , themes , and number of singers for every concert ?", "sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the names , themes , and number of singers for every concert ?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', ',', 'themes', ',', 'and', 'number', 'of', 'singers', 'for', 'every', 'concert', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"concert_singer\",\n \"query\": \"SELECT C.concert_Name, C.Theme, COUNT(SIC.Singer_ID)\\nFROM concert AS C\\nLEFT JOIN singer_in_concert AS SIC\\nON C.concert_ID = SIC.concert_ID\\nGROUP BY C.concert_ID\",\n \"query_toks\": \"['SELECT', 'C', '.', 'concert_Name', ',', 'C', '.', 'Theme', ',', 'COUNT', '(', 'SIC', '.', 'Singer_ID', ')', 'FROM', 'concert', 'AS', 'C', 'LEFT', 'JOIN', 'singer_in_concert', 'AS', 'SIC', 'ON', 'C', '.', 'concert_ID', '=', 'SIC', '.', 'concert_ID', 'GROUP', 'BY', 'C', '.', 'concert_ID']\",\n \"query_toks_no_value\": \"['SELECT', 'C', '.', 'concert_Name', ',', 'C', '.', 'Theme', ',', 'COUNT', '(', 'SIC', '.', 'Singer_ID', ')', 'FROM', 'concert', 'AS', 'C', 'LEFT', 'JOIN', 'singer_in_concert', 'AS', 'SIC', 'ON', 'C', '.', 'concert_ID', '=', 'SIC', '.', 'concert_ID', 'GROUP', 'BY', 'C', '.', 'concert_ID']\",\n \"question\": \"What are the names, themes, and number of singers for every concert?\",\n \"question_toks\": \"['What', 'are', 'the', 'names', ',', 'themes', ',', 'and', 'number', 'of', 'singers', 'for', 'every', 'concert', '?']\"\n}"}
{"question": "List singer names and number of concerts for each singer.", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"List singer names and number of concerts for each singer.\",\n\"question_toks\": \"['List', 'singer', 'names', 'and', 'number', 'of', 'concerts', 'for', 'each', 'singer', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT Singer.Name, COUNT(*) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN Singer ON Singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY Singer.Name\",\n    \"query_toks\": [\"SELECT\", \"Singer\", \".\", \"Name\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"concert\", \"JOIN\", \"singer_in_concert\", \"ON\", \"concert\", \".\", \"concert_ID\", \"=\", \"singer_in_concert\", \".\", \"concert_ID\", \"JOIN\", \"Singer\", \"ON\", \"Singer\", \".\", \"Singer_ID\", \"=\", \"singer_in_concert\", \".\", \"Singer_ID\", \"GROUP\", \"BY\", \"Singer\", \".\", \"Name\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Singer\", \".\", \"Name\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"concert\", \"JOIN\", \"singer_in_concert\", \"ON\", \"concert\", \".\", \"concert_ID\", \"=\", \"singer_in_concert\", \".\", \"concert_ID\", \"JOIN\", \"Singer\", \"ON\", \"Singer\", \".\", \"Singer_ID\", \"=\", \"singer_in_concert\", \".\", \"Singer_ID\", \"GROUP\", \"BY\", \"Singer\", \".\", \"Name\"],\n    \"question\": \"List singer names and number of concerts for each singer.\",\n    \"question_toks\": [\"List\", \"singer\", \"names\", \"and\", \"number\", \"of\", \"concerts\", \"for\", \"each\", \"singer\", \".\"]\n}"}
{"question": "What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the names of the singers and number of concerts for each person?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'and', 'number', 'of', 'concerts', 'for', 'each', 'person', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT s.Name, COUNT(c.concert_ID) \\nFROM singer s, singer_in_concert sc, concert c \\nWHERE s.Singer_ID=sc.Singer_ID AND sc.concert_ID=c.concert_ID \\nGROUP BY s.Singer_ID \\nORDER BY COUNT(c.concert_ID) DESC\",\n  \"query_toks\": \"['SELECT', 's', '.', 'Name', ',', 'COUNT', '(', 'c', '.', 'concert_ID', ')', 'FROM', 'singer', 's', ',', 'singer_in_concert', 'sc', ',', 'concert', 'c', 'WHERE', 's', '.', 'Singer_ID', '=', 'sc', '.', 'Singer_ID', 'AND', 'sc', '.', 'concert_ID', '=', 'c', '.', 'concert_ID', 'GROUP', 'BY', 's', '.', 'Singer_ID', 'ORDER', 'BY', 'COUNT', '(', 'c', '.', 'concert_ID', ')', 'DESC']\",\n  \"query_toks_no_value\": \"['SELECT', 's', '.', 'Name', ',', 'COUNT', '(', 'c', '.', 'concert_ID', ')', 'FROM', 'singer', 's', ',', 'singer_in_concert', 'sc', ',', 'concert', 'c', 'WHERE', 's', '.', 'Singer_ID', '=', 'sc', '.', 'Singer_ID', 'AND', 'sc', '.', 'concert_ID', '=', 'c', '.', 'concert_ID', 'GROUP', 'BY', 's', '.', 'Singer_ID', 'ORDER', 'BY', 'COUNT', '(', 'c', '.', 'concert_ID', ')', 'DESC']\",\n  \"question\": \"What are the names of the singers and number of concerts for each person?\",\n  \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'and', 'number', 'of', 'concerts', 'for', 'each', 'person', '?']\"\n}"}
{"question": "List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"List all singer names in concerts in year 2014.\",\n\"question_toks\": \"['List', 'all', 'singer', 'names', 'in', 'concerts', 'in', 'year', '2014', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT s.Name FROM singer s, concert c, singer_in_concert sc WHERE s.Singer_ID = sc.Singer_ID AND c.concert_ID = sc.concert_ID AND c.Year = '2014'\",\n  \"query_toks\": [\n    \"SELECT\",\n    \"s\",\n    \".\",\n    \"Name\",\n    \"FROM\",\n    \"singer\",\n    \"s\",\n    \",\",\n    \"concert\",\n    \"c\",\n    \",\",\n    \"singer_in_concert\",\n    \"sc\",\n    \"WHERE\",\n    \"s\",\n    \".\",\n    \"Singer_ID\",\n    \"=\",\n    \"sc\",\n    \".\",\n    \"Singer_ID\",\n    \"AND\",\n    \"c\",\n    \".\",\n    \"concert_ID\",\n    \"=\",\n    \"sc\",\n    \".\",\n    \"concert_ID\",\n    \"AND\",\n    \"c\",\n    \".\",\n    \"Year\",\n    \"=\",\n    \"'2014'\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\",\n    \"s\",\n    \".\",\n    \"Name\",\n    \"FROM\",\n    \"singer\",\n    \"s\",\n    \",\",\n    \"concert\",\n    \"c\",\n    \",\",\n    \"singer_in_concert\",\n    \"sc\",\n    \"WHERE\",\n    \"s\",\n    \".\",\n    \"Singer_ID\",\n    \"=\",\n    \"sc\",\n    \".\",\n    \"Singer_ID\",\n    \"AND\",\n    \"c\",\n    \".\",\n    \"concert_ID\",\n    \"=\",\n    \"sc\",\n    \".\",\n    \"concert_ID\",\n    \"AND\",\n    \"c\",\n    \".\",\n    \"Year\",\n    \"=\"\n  ],\n  \"question\": \"List all singer names in concerts in year 2014.\",\n  \"question_toks\": [\n    \"List\",\n    \"all\",\n    \"singer\",\n    \"names\",\n    \"in\",\n    \"concerts\",\n    \"in\",\n    \"year\",\n    \"2014\",\n    \".\"\n  ]\n}"}
{"question": "What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the names of the singers who performed in a concert in 2014?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'who', 'performed', 'in', 'a', 'concert', 'in', '2014', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT s.Name FROM singer_in_concert sc INNER JOIN singer s ON sc.Singer_ID = s.Singer_ID INNER JOIN concert c ON sc.concert_ID = c.concert_ID WHERE c.Year = '2014'\",\n    \"query_toks\": [\n        \"SELECT\",\n        \"s.Name\",\n        \"FROM\",\n        \"singer_in_concert\",\n        \"sc\",\n        \"INNER\",\n        \"JOIN\",\n        \"singer\",\n        \"s\",\n        \"ON\",\n        \"sc.Singer_ID\",\n        \"=\",\n        \"s.Singer_ID\",\n        \"INNER\",\n        \"JOIN\",\n        \"concert\",\n        \"c\",\n        \"ON\",\n        \"sc.concert_ID\",\n        \"=\",\n        \"c.concert_ID\",\n        \"WHERE\",\n        \"c.Year\",\n        \"=\",\n        \"'2014'\"\n    ],\n    \"query_toks_no_value\": [\n        \"SELECT\",\n        \"s.Name\",\n        \"FROM\",\n        \"singer_in_concert\",\n        \"sc\",\n        \"INNER\",\n        \"JOIN\",\n        \"singer\",\n        \"s\",\n        \"ON\",\n        \"sc.Singer_ID\",\n        \"=\",\n        \"s.Singer_ID\",\n        \"INNER\",\n        \"JOIN\",\n        \"concert\",\n        \"c\",\n        \"ON\",\n        \"sc.concert_ID\",\n        \"=\",\n        \"c.concert_ID\",\n        \"WHERE\",\n        \"c.Year\",\n        \"=\"\n    ],\n    \"question\": \"What are the names of the singers who performed in a concert in 2014?\",\n    \"question_toks\": [\n        \"What\",\n        \"are\",\n        \"the\",\n        \"names\",\n        \"of\",\n        \"the\",\n        \"singers\",\n        \"who\",\n        \"performed\",\n        \"in\",\n        \"a\",\n        \"concert\",\n        \"in\",\n        \"2014\",\n        \"?\"\n    ]\n}"}
{"question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"what is the name and nation of the singer who have a song having 'Hey' in its name?\",\n\"question_toks\": \"['what', 'is', 'the', 'name', 'and', 'nation', 'of', 'the', 'singer', 'who', 'have', 'a', 'song', 'having', \"'Hey\", \"'\", 'in', 'its', 'name', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"concert_singer\",\n  \"query\": \"SELECT s.Name, s.Country FROM singer s WHERE s.Song_Name LIKE '%Hey%';\",\n  \"query_toks\": [\"SELECT\", \"s\", \".\", \"Name\", \",\", \"s\", \".\", \"Country\", \"FROM\", \"singer\", \"s\", \"WHERE\", \"s\", \".\", \"Song_Name\", \"LIKE\", \"'\", \"%\", \"Hey\", \"%\", \"'\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"s\", \".\", \"Name\", \",\", \"s\", \".\", \"Country\", \"FROM\", \"singer\", \"s\", \"WHERE\", \"s\", \".\", \"Song_Name\", \"LIKE\", \"'\", \"'\", \";\"],\n  \"question\": \"what is the name and nation of the singer who have a song having 'Hey' in its name?\",\n  \"question_toks\": [\"what\", \"is\", \"the\", \"name\", \"and\", \"nation\", \"of\", \"the\", \"singer\", \"who\", \"have\", \"a\", \"song\", \"having\", \"'Hey\", \"'\", \"in\", \"its\", \"name\", \"?\"]\n}"}
{"question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'country', 'of', 'origin', 'of', 'every', 'singer', 'who', 'has', 'a', 'song', 'with', 'the', 'word', \"'Hey\", \"'\", 'in', 'its', 'title', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"concert_singer\",\n\"query\": \"SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'\",\n\"query_toks\": \"['SELECT', 'Name', ',', 'Country', 'FROM', 'singer', 'WHERE', 'Song_Name', 'LIKE', '\\'%Hey%\\'']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Country', 'FROM', 'singer', 'WHERE', 'Song_Name', 'LIKE', '\\'%', 'Hey', '%\\'']\",\n\"question\": \"What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'country', 'of', 'origin', 'of', 'every', 'singer', 'who', 'has', 'a', 'song', 'with', 'the', 'word', \"'Hey\", \"'\", 'in', 'its', 'title', '?']}\""}
{"question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.\",\n\"question_toks\": \"['Find', 'the', 'name', 'and', 'location', 'of', 'the', 'stadiums', 'which', 'some', 'concerts', 'happened', 'in', 'the', 'years', 'of', 'both', '2014', 'and', '2015', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT DISTINCT stadium.Name, stadium.Location FROM concert, stadium WHERE concert.Year = '2014' AND concert.Stadium_ID = stadium.Stadium_ID AND stadium.Name IN (SELECT stadium.Name FROM concert, stadium WHERE concert.Year = '2015' AND concert.Stadium_ID = stadium.Stadium_ID)\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'stadium', '.', 'Name', ',', 'stadium', '.', 'Location', 'FROM', 'concert', ',', 'stadium', 'WHERE', 'concert', '.', 'Year', '=', \\\"'2014'\\\"', 'AND', 'concert', '.', 'Stadium_ID', '=', 'stadium', '.', 'Stadium_ID', 'AND', 'stadium', '.', 'Name', 'IN', '(', 'SELECT', 'stadium', '.', 'Name', 'FROM', 'concert', ',', 'stadium', 'WHERE', 'concert', '.', 'Year', '=', \\\"'2015'\\\"', 'AND', 'concert', '.', 'Stadium_ID', '=', 'stadium', '.', 'Stadium_ID', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'stadium', '.', 'Name', ',', 'stadium', '.', 'Location', 'FROM', 'concert', ',', 'stadium', 'WHERE', 'concert', '.', 'Year', '=', 'concert', '.', 'Stadium_ID', '=', 'stadium', '.', 'Stadium_ID', 'AND', 'stadium', '.', 'Name', 'IN', '(', 'SELECT', 'stadium', '.', 'Name', 'FROM', 'concert', ',', 'stadium', 'WHERE', 'concert', '.', 'Year', '=', 'concert', '.', 'Stadium_ID', '=', 'stadium', '.', 'Stadium_ID', ')']\",\n    \"question\": \"Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.\",\n    \"question_toks\": \"['Find', 'the', 'name', 'and', 'location', 'of', 'the', 'stadiums', 'which', 'some', 'concerts', 'happened', 'in', 'the', 'years', 'of', 'both', '2014', 'and', '2015', '.']\"\n}"}
{"question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'locations', 'of', 'the', 'stadiums', 'that', 'had', 'concerts', 'that', 'occurred', 'in', 'both', '2014', 'and', '2015', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"concert_singer\",\n    \"query\": \"SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = '2014' INTERSECT SELECT Stadium_ID FROM concert WHERE Year = '2015')\",\n    \"query_toks\": \"['SELECT', 'Name', ',', 'Location', 'FROM', 'stadium', 'WHERE', 'Stadium_ID', 'IN', '(', 'SELECT', 'Stadium_ID', 'FROM', 'concert', 'WHERE', 'Year', '=', ''2014''', 'INTERSECT', 'SELECT', 'Stadium_ID', 'FROM', 'concert', 'WHERE', 'Year', '=', ''2015''', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Location', 'FROM', 'stadium', 'WHERE', 'Stadium_ID', 'IN', '(', 'SELECT', 'Stadium_ID', 'FROM', 'concert', 'WHERE', 'Year', '=', '', 'INTERSECT', 'SELECT', 'Stadium_ID', 'FROM', 'concert', 'WHERE', 'Year', '=', '', ')']\",\n    \"question\": \"What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'locations', 'of', 'the', 'stadiums', 'that', 'had', 'concerts', 'that', 'occurred', 'in', 'both', '2014', 'and', '2015', '?']\"\n}"}
{"question": "Find the number of concerts happened in the stadium with the highest capacity .", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"Find the number of concerts happened in the stadium with the highest capacity .\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'concerts', 'happened', 'in', 'the', 'stadium', 'with', 'the', 'highest', 'capacity', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"concert_singer\",\n\"query\": \"SELECT COUNT(*) FROM concert T1, stadium T2 WHERE T1.Stadium_ID = T2.Stadium_ID AND T2.Capacity = (SELECT MAX(Capacity) FROM stadium)\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'concert', 'T1', ',', 'stadium', 'T2', 'WHERE', 'T1', '.', 'Stadium_ID', '=', 'T2', '.', 'Stadium_ID', 'AND', 'T2', '.', 'Capacity', '=', '(', 'SELECT', 'MAX', '(', 'Capacity', ')', 'FROM', 'stadium', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'concert', 'T1', ',', 'stadium', 'T2', 'WHERE', 'T1', '.', 'Stadium_ID', '=', 'T2', '.', 'Stadium_ID', 'AND', 'T2', '.', 'Capacity', '=', '(', 'SELECT', 'MAX', '(', 'Capacity', ')', 'FROM', 'stadium', ')']\",\n\"question\": \"Find the number of concerts happened in the stadium with the highest capacity .\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'concerts', 'happened', 'in', 'the', 'stadium', 'with', 'the', 'highest', 'capacity', '.']}\"\n"}
{"question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nstadium: 'Stadium_ID', 'Location', 'Name', 'Capacity', 'Highest', 'Lowest', 'Average'\nsinger: 'Singer_ID', 'Name', 'Country', 'Song_Name', 'Song_release_year', 'Age', 'Is_male'\nconcert: 'concert_ID', 'concert_Name', 'Theme', 'Stadium_ID', 'Year'\nsinger_in_concert: 'concert_ID', 'Singer_ID'\n\n{\"db_id\": \"concert_singer\",\n\"question\": \"What are the number of concerts that occurred in the stadium with the largest capacity ?\",\n\"question_toks\": \"['What', 'are', 'the', 'number', 'of', 'concerts', 'that', 'occurred', 'in', 'the', 'stadium', 'with', 'the', 'largest', 'capacity', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"concert_singer\",\n\"query\": \"SELECT COUNT(*) FROM (SELECT T1.concert_Name FROM concert T1 JOIN stadium T2 ON T1.Stadium_ID=T2.Stadium_ID WHERE T2.Capacity=(SELECT MAX(Capacity) FROM stadium)) AS T;\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', 'SELECT', 'T1', '.', 'concert_Name', 'FROM', 'concert', 'T1', 'JOIN', 'stadium', 'T2', 'ON', 'T1', '.', 'Stadium_ID', '=', 'T2', '.', 'Stadium_ID', 'WHERE', 'T2', '.', 'Capacity', '=', '(', 'SELECT', 'MAX', '(', 'Capacity', ')', 'FROM', 'stadium', ')', ')', 'AS', 'T', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', 'SELECT', 'T1', '.', 'concert_Name', 'FROM', 'concert', 'T1', 'JOIN', 'stadium', 'T2', 'ON', 'T1', '.', 'Stadium_ID', '=', 'T2', '.', 'Stadium_ID', 'WHERE', 'T2', '.', 'Capacity', '=', '(', 'SELECT', 'MAX', '(', 'Capacity', ')', 'FROM', 'stadium', ')', ')', 'AS', 'T', ';']\",\n\"question\": \"What are the number of concerts that occurred in the stadium with the largest capacity ?\",\n\"question_toks\": \"['What', 'are', 'the', 'number', 'of', 'concerts', 'that', 'occurred', 'in', 'the', 'stadium', 'with', 'the', 'largest', 'capacity', '?']}\""}
{"question": "Find the number of pets whose weight is heavier than 10.", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the number of pets whose weight is heavier than 10.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'pets', 'whose', 'weight', 'is', 'heavier', 'than', '10', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT COUNT(*) FROM Pets WHERE weight > 10\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Pets\", \"WHERE\", \"weight\", \">\", \"10\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Pets\", \"WHERE\", \"weight\", \">\", \"?\"],\n  \"question\": \"Find the number of pets whose weight is heavier than 10.\",\n  \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"pets\", \"whose\", \"weight\", \"is\", \"heavier\", \"than\", \"10\", \".\"]\n}"}
{"question": "How many pets have a greater weight than 10?", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"How many pets have a greater weight than 10?\",\n\"question_toks\": \"['How', 'many', 'pets', 'have', 'a', 'greater', 'weight', 'than', '10', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT COUNT(*) FROM Pets T1 WHERE T1.weight > 10\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Pets\", \"T1\", \"WHERE\", \"T1\", \".\", \"weight\", \">\", \"10\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Pets\", \"T1\", \"WHERE\", \"T1\", \".\", \"weight\", \">\", \"?\"],\n  \"question\": \"How many pets have a greater weight than 10?\",\n  \"question_toks\": [\"How\", \"many\", \"pets\", \"have\", \"a\", \"greater\", \"weight\", \"than\", \"10\", \"?\"]\n}"}
{"question": "Find the weight of the youngest dog.", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the weight of the youngest dog.\",\n\"question_toks\": \"['Find', 'the', 'weight', 'of', 'the', 'youngest', 'dog', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT MIN(weight) FROM Pets WHERE PetType='dog' AND pet_age=(SELECT MIN(pet_age) FROM Pets WHERE PetType='dog')\",\n    \"query_toks\": [\"SELECT\", \"MIN\", \"(\", \"weight\", \")\", \"FROM\", \"Pets\", \"WHERE\", \"PetType\", \"=\", \"'dog'\", \"AND\", \"pet_age\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"pet_age\", \")\", \"FROM\", \"Pets\", \"WHERE\", \"PetType\", \"=\", \"'dog'\", \")\",],\n    \"query_toks_no_value\": [\"SELECT\", \"MIN\", \"(\", \"weight\", \")\", \"FROM\", \"Pets\", \"WHERE\", \"PetType\", \"=\", \"?\", \"AND\", \"pet_age\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"pet_age\", \")\", \"FROM\", \"Pets\", \"WHERE\", \"PetType\", \"=\", \"?\", \")\",],\n    \"question\": \"Find the weight of the youngest dog.\",\n    \"question_toks\": [\"Find\", \"the\", \"weight\", \"of\", \"the\", \"youngest\", \"dog\", \".\"]\n}"}
{"question": "How much does the youngest dog weigh?", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"How much does the youngest dog weigh?\",\n\"question_toks\": \"['How', 'much', 'does', 'the', 'youngest', 'dog', 'weigh', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT MIN(weight) FROM Pets WHERE PetType = 'Dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'Dog')\",\n    \"query_toks\": \"['SELECT', 'MIN', '(', 'weight', ')', 'FROM', 'Pets', 'WHERE', 'PetType', '=', ''', 'Dog', ''', 'AND', 'pet_age', '=', '(', 'SELECT', 'MIN', '(', 'pet_age', ')', 'FROM', 'Pets', 'WHERE', 'PetType', '=', ''', 'Dog', ''', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'MIN', '(', 'weight', ')', 'FROM', 'Pets', 'WHERE', 'PetType', '=', '', 'Dog', '', 'AND', 'pet_age', '=', '(', 'SELECT', 'MIN', '(', 'pet_age', ')', 'FROM', 'Pets', 'WHERE', 'PetType', '=', '', 'Dog', '', ')']\",\n    \"question\": \"How much does the youngest dog weigh?\",\n    \"question_toks\": \"['How', 'much', 'does', 'the', 'youngest', 'dog', 'weigh', '?']\"\n}"}
{"question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the maximum weight for each type of pet. List the maximum weight and pet type.\",\n\"question_toks\": \"['Find', 'the', 'maximum', 'weight', 'for', 'each', 'type', 'of', 'pet', '.', 'List', 'the', 'maximum', 'weight', 'and', 'pet', 'type', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType\",\n  \"query_toks\": \"['SELECT', 'PetType', ',', 'MAX', '(', 'weight', ')', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n  \"query_toks_no_value\": \"['SELECT', 'PetType', ',', 'MAX', '(', ')', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n  \"question\": \"Find the maximum weight for each type of pet. List the maximum weight and pet type.\",\n  \"question_toks\": \"['Find', 'the', 'maximum', 'weight', 'for', 'each', 'type', 'of', 'pet', '.', 'List', 'the', 'maximum', 'weight', 'and', 'pet', 'type', '.']\"\n}"}
{"question": "List the maximum weight and type for each type of pet.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"List the maximum weight and type for each type of pet.\",\n\"question_toks\": \"['List', 'the', 'maximum', 'weight', 'and', 'type', 'for', 'each', 'type', 'of', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT PetType, MAX(weight) AS max_weight, PetType AS type FROM Pets GROUP BY PetType ORDER BY PetType\",\n    \"query_toks\": [\"SELECT\", \"PetType\", \",\", \"MAX\", \"(\", \"weight\", \")\", \"AS\", \"max_weight\", \",\", \"PetType\", \"AS\", \"type\", \"FROM\", \"Pets\", \"GROUP\", \"BY\", \"PetType\", \"ORDER\", \"BY\", \"PetType\"],\n    \"query_toks_no_value\": [\"SELECT\", \"PetType\", \",\", \"MAX\", \"(\", \"weight\", \")\", \"AS\", \"max_weight\", \",\", \"PetType\", \"AS\", \"type\", \"FROM\", \"Pets\", \"GROUP\", \"BY\", \"PetType\", \"ORDER\", \"BY\", \"PetType\"],\n    \"question\": \"List the maximum weight and type for each type of pet.\",\n    \"question_toks\": [\"List\", \"the\", \"maximum\", \"weight\", \"and\", \"type\", \"for\", \"each\", \"type\", \"of\", \"pet\", \".\"]\n}"}
{"question": "Find number of pets owned by students who are older than 20.", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find number of pets owned by students who are older than 20.\",\n\"question_toks\": \"['Find', 'number', 'of', 'pets', 'owned', 'by', 'students', 'who', 'are', 'older', 'than', '20', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"pets_1\",\n \"query\": \"SELECT COUNT(Pets.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20\",\n \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"Pets\", \".\", \"PetID\", \")\", \"FROM\", \"Student\", \"JOIN\", \"Has_Pet\", \"ON\", \"Student\", \".\", \"StuID\", \"=\", \"Has_Pet\", \".\", \"StuID\", \"JOIN\", \"Pets\", \"ON\", \"Has_Pet\", \".\", \"PetID\", \"=\", \"Pets\", \".\", \"PetID\", \"WHERE\", \"Student\", \".\", \"Age\", \">\", \"20\"],\n \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"Pets\", \".\", \"PetID\", \")\", \"FROM\", \"Student\", \"JOIN\", \"Has_Pet\", \"ON\", \"Student\", \".\", \"StuID\", \"=\", \"Has_Pet\", \".\", \"StuID\", \"JOIN\", \"Pets\", \"ON\", \"Has_Pet\", \".\", \"PetID\", \"=\", \"Pets\", \".\", \"PetID\", \"WHERE\", \"Student\", \".\", \"Age\", \">\", \"?\"],\n \"question\": \"Find number of pets owned by students who are older than 20.\",\n \"question_toks\": [\"Find\", \"number\", \"of\", \"pets\", \"owned\", \"by\", \"students\", \"who\", \"are\", \"older\", \"than\", \"20\", \".\"]\n}"}
{"question": "How many pets are owned by students that have an age greater than 20?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"How many pets are owned by students that have an age greater than 20?\",\n\"question_toks\": \"['How', 'many', 'pets', 'are', 'owned', 'by', 'students', 'that', 'have', 'an', 'age', 'greater', 'than', '20', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT COUNT(*) FROM (SELECT PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID=T2.StuID WHERE T1.Age > 20) AS pets JOIN Pets AS T3 ON pets.PetID=T3.PetID\",\n  \"query_toks\": [\n    \"SELECT\",\n    \"COUNT\",\n    \"(\",\n    \"*\",\n    \")\",\n    \"FROM\",\n    \"(\",\n    \"SELECT\",\n    \"PetID\",\n    \"FROM\",\n    \"Student\",\n    \"AS\",\n    \"T1\",\n    \"JOIN\",\n    \"Has_Pet\",\n    \"AS\",\n    \"T2\",\n    \"ON\",\n    \"T1.StuID=T2.StuID\",\n    \"WHERE\",\n    \"T1.Age\",\n    \">\",\n    \"20\",\n    \")\",\n    \"AS\",\n    \"pets\",\n    \"JOIN\",\n    \"Pets\",\n    \"AS\",\n    \"T3\",\n    \"ON\",\n    \"pets.PetID=T3.PetID\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\",\n    \"COUNT\",\n    \"(\",\n    \"*\",\n    \")\",\n    \"FROM\",\n    \"(\",\n    \"SELECT\",\n    \"PetID\",\n    \"FROM\",\n    \"Student\",\n    \"AS\",\n    \"T1\",\n    \"JOIN\",\n    \"Has_Pet\",\n    \"AS\",\n    \"T2\",\n    \"ON\",\n    \"T1.StuID=T2.StuID\",\n    \"WHERE\",\n    \"T1.Age\",\n    \">\",\n    \"<value>\",\n    \")\",\n    \"AS\",\n    \"pets\",\n    \"JOIN\",\n    \"Pets\",\n    \"AS\",\n    \"T3\",\n    \"ON\",\n    \"pets.PetID=T3.PetID\"\n  ],\n  \"question\": \"How many pets are owned by students that have an age greater than 20?\",\n  \"question_toks\": [\n    \"How\",\n    \"many\",\n    \"pets\",\n    \"are\",\n    \"owned\",\n    \"by\",\n    \"students\",\n    \"that\",\n    \"have\",\n    \"an\",\n    \"age\",\n    \"greater\",\n    \"than\",\n    \"20\",\n    \"?\"\n  ]\n}"}
{"question": "Find the number of dog pets that are raised by female students (with sex F).", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the number of dog pets that are raised by female students (with sex F).\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'dog', 'pets', 'that', 'are', 'raised', 'by', 'female', 'students', '(', 'with', 'sex', 'F', ')', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"pets_1\",\n\"query\": \"SELECT COUNT(*) FROM Students T1 INNER JOIN Has_Pet T2 ON T1.StuID=T2.StuID INNER JOIN Pets T3 ON T2.PetID=T3.PetID WHERE T1.Sex='F' AND T3.PetType='dog'\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Students', 'T1', 'INNER', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'INNER', 'JOIN', 'Pets', 'T3', 'ON', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'WHERE', 'T1', '.', 'Sex', '=', \\\"'F'\\\", 'AND', 'T3', '.', 'PetType', '=', \\\"'dog'\\\"']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Students', 'T1', 'INNER', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'INNER', 'JOIN', 'Pets', 'T3', 'ON', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'WHERE', 'T1', '.', 'Sex', '=', '', 'AND', 'T3', '.', 'PetType', '=', \\\"''\\\"]\",\n\"question\": \"Find the number of dog pets that are raised by female students (with sex F).\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'dog', 'pets', 'that', 'are', 'raised', 'by', 'female', 'students', '(', 'with', 'sex', 'F', ')', '.']\"}"}
{"question": "How many dog pets are raised by female students?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"How many dog pets are raised by female students?\",\n\"question_toks\": \"['How', 'many', 'dog', 'pets', 'are', 'raised', 'by', 'female', 'students', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n   \"db_id\": \"pets_1\",\n   \"query\": \"SELECT COUNT(*) \\nFROM Students T1, Has_Pet T2, Pets T3 \\nWHERE T1.Sex = 'F' \\nAND T1.StuID = T2.StuID \\nAND T2.PetID = T3.PetID \\nAND T3.PetType = 'dog'\",\n   \"query_toks\": [\n      \"SELECT\",\n      \"COUNT\",\n      \"(\",\n      \"*\",\n      \")\",\n      \"FROM\",\n      \"Students\",\n      \"T1\",\n      \",\",\n      \"Has_Pet\",\n      \"T2\",\n      \",\",\n      \"Pets\",\n      \"T3\",\n      \"WHERE\",\n      \"T1\",\n      \".\",\n      \"Sex\",\n      \"=\",\n      \"'F'\",\n      \"AND\",\n      \"T1\",\n      \".\",\n      \"StuID\",\n      \"=\",\n      \"T2\",\n      \".\",\n      \"StuID\",\n      \"AND\",\n      \"T2\",\n      \".\",\n      \"PetID\",\n      \"=\",\n      \"T3\",\n      \".\",\n      \"PetID\",\n      \"AND\",\n      \"T3\",\n      \".\",\n      \"PetType\",\n      \"=\",\n      \"'dog'\"\n   ],\n   \"query_toks_no_value\": [\n      \"SELECT\",\n      \"COUNT\",\n      \"(\",\n      \"*\",\n      \")\",\n      \"FROM\",\n      \"Students\",\n      \"T1\",\n      \",\",\n      \"Has_Pet\",\n      \"T2\",\n      \",\",\n      \"Pets\",\n      \"T3\",\n      \"WHERE\",\n      \"T1\",\n      \".\",\n      \"Sex\",\n      \"=\",\n      \"?\",\n      \"AND\",\n      \"T1\",\n      \".\",\n      \"StuID\",\n      \"=\",\n      \"T2\",\n      \".\",\n      \"StuID\",\n      \"AND\",\n      \"T2\",\n      \".\",\n      \"PetID\",\n      \"=\",\n      \"T3\",\n      \".\",\n      \"PetID\",\n      \"AND\",\n      \"T3\",\n      \".\",\n      \"PetType\",\n      \"=\",\n      \"'dog'\"\n   ],\n   \"question\": \"How many dog pets are raised by female students?\",\n   \"question_toks\": [\n      \"How\",\n      \"many\",\n      \"dog\",\n      \"pets\",\n      \"are\",\n      \"raised\",\n      \"by\",\n      \"female\",\n      \"students\",\n      \"?\"\n   ]\n}"}
{"question": "Find the number of distinct type of pets.", "sql": "SELECT count(DISTINCT pettype) FROM pets", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the number of distinct type of pets.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'distinct', 'type', 'of', 'pets', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT COUNT(DISTINCT PetType) FROM Pets T1\",\n  \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'PetType', ')', 'FROM', 'Pets', 'T1']\",\n  \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'PetType', ')', 'FROM', 'Pets', 'T1']\",\n  \"question\": \"Find the number of distinct type of pets.\",\n  \"question_toks\": \"['Find', 'the', 'number', 'of', 'distinct', 'type', 'of', 'pets', '.']\"\n}"}
{"question": "How many different types of pet are there?", "sql": "SELECT count(DISTINCT pettype) FROM pets", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"How many different types of pet are there?\",\n\"question_toks\": \"['How', 'many', 'different', 'types', 'of', 'pet', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT COUNT(DISTINCT PetType) FROM Pets\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"PetType\", \")\", \"FROM\", \"Pets\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"PetType\", \")\", \"FROM\", \"Pets\"],\n    \"question\": \"How many different types of pet are there?\",\n    \"question_toks\": [\"How\", \"many\", \"different\", \"types\", \"of\", \"pet\", \"are\", \"there\", \"?\"]\n}"}
{"question": "Find the first name of students who have cat or dog pet.", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the first name of students who have cat or dog pet.\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', 'of', 'students', 'who', 'have', 'cat', 'or', 'dog', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT DISTINCT s.Fname\\nFROM Student AS s, Has_Pet AS h, Pets AS p\\nWHERE s.StuID = h.StuID AND h.PetID = p.PetID AND (p.PetType = 'cat' OR p.PetType = 'dog')\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 's', '.', 'Fname', 'FROM', 'Student', 'AS', 's', ',', 'Has_Pet', 'AS', 'h', ',', 'Pets', 'AS', 'p', 'WHERE', 's', '.', 'StuID', '=', 'h', '.', 'StuID', 'AND', 'h', '.', 'PetID', '=', 'p', '.', 'PetID', 'AND', '(', 'p', '.', 'PetType', '=', \\\"'cat'\\\"\", 'OR', 'p', '.', 'PetType', '=', \\\"'dog'\\\"', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 's', '.', 'Fname', 'FROM', 'Student', 'AS', 's', ',', 'Has_Pet', 'AS', 'h', ',', 'Pets', 'AS', 'p', 'WHERE', 's', '.', 'StuID', '=', 'h', '.', 'StuID', 'AND', 'h', '.', 'PetID', '=', 'p', '.', 'PetID', 'AND', '(', 'p', '.', 'PetType', '=', '', 'OR', 'p', '.', 'PetType', '=', '', ')']\",\n    \"question\": \"Find the first name of students who have cat or dog pet.\",\n    \"question_toks\": \"['Find', 'the', 'first', 'name', 'of', 'students', 'who', 'have', 'cat', 'or', 'dog', 'pet', '.']\"\n}"}
{"question": "What are the first names of every student who has a cat or dog as a pet?", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What are the first names of every student who has a cat or dog as a pet?\",\n\"question_toks\": \"['What', 'are', 'the', 'first', 'names', 'of', 'every', 'student', 'who', 'has', 'a', 'cat', 'or', 'dog', 'as', 'a', 'pet', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT DISTINCT T1.Fname FROM Student T1 INNER JOIN Has_Pet T2 ON T1.StuID = T2.StuID INNER JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog'\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Fname\", \"FROM\", \"Student\", \"T1\", \"INNER\", \"JOIN\", \"Has_Pet\", \"T2\", \"ON\", \"T1\", \".\", \"StuID\", \"=\", \"T2\", \".\", \"StuID\", \"INNER\", \"JOIN\", \"Pets\", \"T3\", \"ON\", \"T2\", \".\", \"PetID\", \"=\", \"T3\", \".\", \"PetID\", \"WHERE\", \"T3\", \".\", \"PetType\", \"=\", \"'cat'\", \"OR\", \"T3\", \".\", \"PetType\", \"=\", \"'dog'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Fname\", \"FROM\", \"Student\", \"T1\", \"INNER\", \"JOIN\", \"Has_Pet\", \"T2\", \"ON\", \"T1\", \".\", \"StuID\", \"=\", \"T2\", \".\", \"StuID\", \"INNER\", \"JOIN\", \"Pets\", \"T3\", \"ON\", \"T2\", \".\", \"PetID\", \"=\", \"T3\", \".\", \"PetID\", \"WHERE\", \"T3\", \".\", \"PetType\", \"=\", \"\", \"OR\", \"T3\", \".\", \"PetType\", \"=\", \"\"],\n    \"question\": \"What are the first names of every student who has a cat or dog as a pet?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"first\", \"names\", \"of\", \"every\", \"student\", \"who\", \"has\", \"a\", \"cat\", \"or\", \"dog\", \"as\", \"a\", \"pet\", \"?\"]\n}"}
{"question": "Find the first name of students who have both cat and dog pets .", "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the first name of students who have both cat and dog pets .\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', 'of', 'students', 'who', 'have', 'both', 'cat', 'and', 'dog', 'pets', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT DISTINCT T1.FName FROM Student T1 JOIN Has_Pet T2 ON T1.StuID=T2.StuID JOIN Pets T3 ON T2.PetID=T3.PetID WHERE T3.PetType='cat' AND T1.FName IN (SELECT T1.FName FROM Student T1 JOIN Has_Pet T2 ON T1.StuID=T2.StuID JOIN Pets T3 ON T2.PetID=T3.PetID WHERE T3.PetType='dog')\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'T1', '.', 'FName', 'FROM', 'Student', 'T1', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'JOIN', 'Pets', 'T3', 'ON', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'WHERE', 'T3', '.', 'PetType', '=', '\\\\\\'cat\\\\\\'', 'AND', 'T1', '.', 'FName', 'IN', '(', 'SELECT', 'T1', '.', 'FName', 'FROM', 'Student', 'T1', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'JOIN', 'Pets', 'T3', 'ON', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'WHERE', 'T3', '.', 'PetType', '=', '\\\\\\'dog\\\\\\')']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T1', '.', 'FName', 'FROM', 'Student', 'T1', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'JOIN', 'Pets', 'T3', 'ON', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'WHERE', 'T3', '.', 'PetType', '=', '<string>', 'AND', 'T1', '.', 'FName', 'IN', '(', 'SELECT', 'T1', '.', 'FName', 'FROM', 'Student', 'T1', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'JOIN', 'Pets', 'T3', 'ON', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'WHERE', 'T3', '.', 'PetType', '=', '<string>')']\",\n    \"question\": \"Find the first name of students who have both cat and dog pets.\",\n    \"question_toks\": \"['Find', 'the', 'first', 'name', 'of', 'students', 'who', 'have', 'both', 'cat', 'and', 'dog', 'pets', '.']\"\n}"}
{"question": "What are the students' first names who have both cats and dogs as pets?", "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What are the students' first names who have both cats and dogs as pets?\",\n\"question_toks\": \"['What', 'are', 'the', 'students', \"'\", 'first', 'names', 'who', 'have', 'both', 'cats', 'and', 'dogs', 'as', 'pets', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT DISTINCT T1.FName FROM Student T1, Has_Pet T2, Pets T3, Has_Pet T4, Pets T5 WHERE T1.StuID=T2.StuID AND T2.PetID=T3.PetID AND T1.StuID=T4.StuID AND T4.PetID=T5.PetID AND T3.PetType='cat' AND T5.PetType='dog'\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"FName\", \"FROM\", \"Student\", \"T1\", \",\", \"Has_Pet\", \"T2\", \",\", \"Pets\", \"T3\", \",\", \"Has_Pet\", \"T4\", \",\", \"Pets\", \"T5\", \"WHERE\", \"T1\", \".\", \"StuID\", \"=\", \"T2\", \".\", \"StuID\", \"AND\", \"T2\", \".\", \"PetID\", \"=\", \"T3\", \".\", \"PetID\", \"AND\", \"T1\", \".\", \"StuID\", \"=\", \"T4\", \".\", \"StuID\", \"AND\", \"T4\", \".\", \"PetID\", \"=\", \"T5\", \".\", \"PetID\", \"AND\", \"T3\", \".\", \"PetType\", \"=\", \"'cat'\", \"AND\", \"T5\", \".\", \"PetType\", \"=\", \"'dog''],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"FName\", \"FROM\", \"Student\", \"T1\", \",\", \"Has_Pet\", \"T2\", \",\", \"Pets\", \"T3\", \",\", \"Has_Pet\", \"T4\", \",\", \"Pets\", \"T5\", \"WHERE\", \"T1\", \".\", \"StuID\", \"=\", \"T2\", \".\", \"StuID\", \"AND\", \"T2\", \".\", \"PetID\", \"=\", \"T3\", \".\", \"PetID\", \"AND\", \"T1\", \".\", \"StuID\", \"=\", \"T4\", \".\", \"StuID\", \"AND\", \"T4\", \".\", \"PetID\", \"=\", \"T5\", \".\", \"PetID\", \"AND\", \"T3\", \".\", \"PetType\", \"=\", \"\", \"AND\", \"T5\", \".\", \"PetType\", \"=\", \"\"],\n    \"question\": \"What are the students' first names who have both cats and dogs as pets?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"students\", \"'\", \"first\", \"names\", \"who\", \"have\", \"both\", \"cats\", \"and\", \"dogs\", \"as\", \"pets\", \"?\"]\n}"}
{"question": "Find the major and age of students who do not have a cat pet.", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the major and age of students who do not have a cat pet.\",\n\"question_toks\": \"['Find', 'the', 'major', 'and', 'age', 'of', 'students', 'who', 'do', 'not', 'have', 'a', 'cat', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT Major, Age FROM Students WHERE StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')\",\n  \"query_toks\": \"['SELECT', 'Major', ',', 'Age', 'FROM', 'Students', 'WHERE', 'StuID', 'NOT', 'IN', '(', 'SELECT', 'StuID', 'FROM', 'Has_Pet', 'INNER', 'JOIN', 'Pets', 'ON', 'Has_Pet.PetID', '=', 'Pets.PetID', 'WHERE', 'PetType', '=', \\\"'cat'\\\"', ')']\",\n  \"query_toks_no_value\": \"['SELECT', 'Major', ',', 'Age', 'FROM', 'Students', 'WHERE', 'StuID', 'NOT', 'IN', '(', 'SELECT', 'StuID', 'FROM', 'Has_Pet', 'INNER', 'JOIN', 'Pets', 'ON', 'Has_Pet.PetID', '=', 'Pets.PetID', 'WHERE', 'PetType', '=', \\\"''\\\", ')']\",\n  \"question\": \"Find the major and age of students who do not have a cat pet.\",\n  \"question_toks\": \"['Find', 'the', 'major', 'and', 'age', 'of', 'students', 'who', 'do', 'not', 'have', 'a', 'cat', 'pet', '.']\"\n}"}
{"question": "What major is every student who does not own a cat as a pet, and also how old are they?", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What major is every student who does not own a cat as a pet, and also how old are they?\",\n\"question_toks\": \"['What', 'major', 'is', 'every', 'student', 'who', 'does', 'not', 'own', 'a', 'cat', 'as', 'a', 'pet', ',', 'and', 'also', 'how', 'old', 'are', 'they', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT s.Major, p.pet_age FROM Students T1 \\\n               INNER JOIN Has_Pet T2 ON T1.StuID = T2.StuID \\\n               INNER JOIN Pets T3 ON T2.PetID = T3.PetID \\\n               INNER JOIN Students T4 ON T2.StuID = T4.StuID \\\n               WHERE T3.PetType != 'cat'\",\n    \"query_toks\": \"['SELECT', 's.Major', ',', 'p.pet_age', 'FROM', 'Students', 'T1', 'INNER', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1.StuID', '=', 'T2.StuID', 'INNER', 'JOIN', 'Pets', 'T3', 'ON', 'T2.PetID', '=', 'T3.PetID', 'INNER', 'JOIN', 'Students', 'T4', 'ON', 'T2.StuID', '=', 'T4.StuID', 'WHERE', 'T3.PetType', '!=', \"'cat'']\",\n    \"query_toks_no_value\": \"['SELECT', 's', '.', 'Major', ',', 'p', '.', 'pet_age', 'FROM', 'Students', 'T1', 'INNER', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'INNER', 'JOIN', 'Pets', 'T3', 'ON', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'INNER', 'JOIN', 'Students', 'T4', 'ON', 'T2', '.', 'StuID', '=', 'T4', '.', 'StuID', 'WHERE', 'T3', '.', 'PetType', '!=', 'cat']\",\n    \"question\": \"What major is every student who does not own a cat as a pet, and also how old are they?\",\n    \"question_toks\": \"['What', 'major', 'is', 'every', 'student', 'who', 'does', 'not', 'own', 'a', 'cat', 'as', 'a', 'pet', ',', 'and', 'also', 'how', 'old', 'are', 'they', '?']\"\n}"}
{"question": "Find the id of students who do not have a cat pet.", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the id of students who do not have a cat pet.\",\n\"question_toks\": \"['Find', 'the', 'id', 'of', 'students', 'who', 'do', 'not', 'have', 'a', 'cat', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT StuID FROM Student WHERE NOT EXISTS (SELECT * FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.StuID = Has_Pet.StuID AND Pets.PetType = 'cat')\",\n  \"query_toks\": [\"SELECT\", \"StuID\", \"FROM\", \"Student\", \"WHERE\", \"NOT\", \"EXISTS\", \"(\", \"SELECT\", \"*\", \"FROM\", \"Has_Pet\", \"JOIN\", \"Pets\", \"ON\", \"Has_Pet.PetID\", \"=\", \"Pets.PetID\", \"WHERE\", \"Student.StuID\", \"=\", \"Has_Pet.StuID\", \"AND\", \"Pets.PetType\", \"=\", \"'cat'\", \")\", \"\"],\n  \"query_toks_no_value\": [\"SELECT\", \"StuID\", \"FROM\", \"Student\", \"WHERE\", \"NOT\", \"EXISTS\", \"(\", \"SELECT\", \"*\", \"FROM\", \"Has_Pet\", \"JOIN\", \"Pets\", \"ON\", \"Has_Pet.PetID\", \"=\", \"Pets.PetID\", \"WHERE\", \"Student.StuID\", \"=\", \"Has_Pet.StuID\", \"AND\", \"Pets.PetType\", \"=\", \"\", \")\", \"\"],\n  \"question\": \"Find the id of students who do not have a cat pet.\",\n  \"question_toks\": [\"Find\", \"the\", \"id\", \"of\", \"students\", \"who\", \"do\", \"not\", \"have\", \"a\", \"cat\", \"pet\", \".\"]\n}"}
{"question": "What are the ids of the students who do not own cats as pets?", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What are the ids of the students who do not own cats as pets?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'the', 'students', 'who', 'do', 'not', 'own', 'cats', 'as', 'pets', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT DISTINCT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType != 'cat' OR p.PetType IS NULL\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 's', '.', 'StuID', 'FROM', 'Student', 's', 'LEFT', 'JOIN', 'Has_Pet', 'hp', 'ON', 's', '.', 'StuID', '=', 'hp', '.', 'StuID', 'LEFT', 'JOIN', 'Pets', 'p', 'ON', 'hp', '.', 'PetID', '=', 'p', '.', 'PetID', 'WHERE', 'p', '.', 'PetType', '!=', '``', 'cat', \"''\", 'OR', 'p', '.', 'PetType', 'IS', 'NULL']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 's', '.', 'StuID', 'FROM', 'Student', 's', 'LEFT', 'JOIN', 'Has_Pet', 'hp', 'ON', 's', '.', 'StuID', '=', 'hp', '.', 'StuID', 'LEFT', 'JOIN', 'Pets', 'p', 'ON', 'hp', '.', 'PetID', '=', 'p', '.', 'PetID', 'WHERE', 'p', '.', 'PetType', '!=', 'cat', 'OR', 'p', '.', 'PetType', 'IS', 'NULL']\",\n    \"question\": \"What are the ids of the students who do not own cats as pets?\",\n    \"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'the', 'students', 'who', 'do', 'not', 'own', 'cats', 'as', 'pets', '?']\"\n}"}
{"question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the first name and age of students who have a dog but do not have a cat as a pet.\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', 'and', 'age', 'of', 'students', 'who', 'have', 'a', 'dog', 'but', 'do', 'not', 'have', 'a', 'cat', 'as', 'a', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT s.Fname, s.Age FROM Student T1 JOIN Has_Pet T2 ON T1.StuID = T2.StuID JOIN Pets T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T1.StuID NOT IN (SELECT T4.StuID FROM Has_Pet T5 JOIN Pets T6 ON T5.PetID = T6.PetID WHERE T6.PetType = 'cat')\",\n    \"query_toks\": \"['SELECT', 's', '.', 'Fname', ',', 's', '.', 'Age', 'FROM', 'Student', 'T1', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'JOIN', 'Pets', 'T3', 'ON', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'WHERE', 'T3', '.', 'PetType', '=', ''dog''', 'AND', 'T1', '.', 'StuID', 'NOT', 'IN', '(', 'SELECT', 'T4', '.', 'StuID', 'FROM', 'Has_Pet', 'T5', 'JOIN', 'Pets', 'T6', 'ON', 'T5', '.', 'PetID', '=', 'T6', '.', 'PetID', 'WHERE', 'T6', '.', 'PetType', '=', ''cat''', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 's', '.', 'Fname', ',', 's', '.', 'Age', 'FROM', 'Student', 'T1', 'JOIN', 'Has_Pet', 'T2', 'ON', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'JOIN', 'Pets', 'T3', 'ON', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'WHERE', 'T3', '.', 'PetType', '=', '', 'AND', 'T1', '.', 'StuID', 'NOT', 'IN', '(', 'SELECT', 'T4', '.', 'StuID', 'FROM', 'Has_Pet', 'T5', 'JOIN', 'Pets', 'T6', 'ON', 'T5', '.', 'PetID', '=', 'T6', '.', 'PetID', 'WHERE', 'T6', '.', 'PetType', '=', '', ')']\",\n    \"question\": \"Find the first name and age of students who have a dog but do not have a cat as a pet.\",\n    \"question_toks\": \"['Find', 'the', 'first', 'name', 'and', 'age', 'of', 'students', 'who', 'have', 'a', 'dog', 'but', 'do', 'not', 'have', 'a', 'cat', 'as', 'a', 'pet', '.']\"\n}"}
{"question": "What is the first name of every student who has a dog but does not have a cat?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What is the first name of every student who has a dog but does not have a cat?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', 'name', 'of', 'every', 'student', 'who', 'has', 'a', 'dog', 'but', 'does', 'not', 'have', 'a', 'cat', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT DISTINCT s.Fname\\nFROM Students T1, Has_Pet T2, Pets T3\\nWHERE T1.StuID = T2.StuID AND T2.PetID = T3.PetID AND T1.StuID NOT IN (SELECT DISTINCT x.StuID\\nFROM Students x, Has_Pet y, Pets z\\nWHERE x.StuID = y.StuID AND y.PetID = z.PetID AND z.PetType = 'cat') AND T3.PetType = 'dog';\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 's', '.', 'Fname', 'FROM', 'Students', 'T1', ',', 'Has_Pet', 'T2', ',', 'Pets', 'T3', 'WHERE', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'AND', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'AND', 'T1', '.', 'StuID', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'x', '.', 'StuID', 'FROM', 'Students', 'x', ',', 'Has_Pet', 'y', ',', 'Pets', 'z', 'WHERE', 'x', '.', 'StuID', '=', 'y', '.', 'StuID', 'AND', 'y', '.', 'PetID', '=', 'z', '.', 'PetID', 'AND', 'z', '.', 'PetType', '=', \"'cat'\", ')', 'AND', 'T3', '.', 'PetType', '=', \"'dog'\", ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 's', '.', '<column>', 'FROM', '<table>', 'T1', ',', '<table>', 'T2', ',', '<table>', 'T3', 'WHERE', 'T1', '.', '<column>', '=', 'T2', '.', '<column>', 'AND', 'T2', '.', '<column>', '=', 'T3', '.', '<column>', 'AND', 'T1', '.', '<column>', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'x', '.', '<column>', 'FROM', '<table>', 'x', ',', '<table>', 'y', ',', '<table>', 'z', 'WHERE', 'x', '.', '<column>', '=', 'y', '.', '<column>', 'AND', 'y', '.', '<column>', '=', 'z', '.', '<column>', 'AND', 'z', '.', '<column>', '=', '<value>', ')', 'AND', 'T3', '.', '<column>', '=', '<value>', ';']\",\n  \"question\": \"What is the first name of every student who has a dog but does not have a cat?\",\n  \"question_toks\": \"['What', 'is', 'the', 'first', 'name', 'of', 'every', 'student', 'who', 'has', 'a', 'dog', 'but', 'does', 'not', 'have', 'a', 'cat', '?']\"\n}"}
{"question": "Find the type and weight of the youngest pet.", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the type and weight of the youngest pet.\",\n\"question_toks\": \"['Find', 'the', 'type', 'and', 'weight', 'of', 'the', 'youngest', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT PetType, weight FROM Pets T1 WHERE pet_age = (SELECT MIN(pet_age) FROM Pets T2)\",\n    \"query_toks\": [\"SELECT\", \"PetType\", \",\", \"weight\", \"FROM\", \"Pets\", \"T1\", \"WHERE\", \"pet_age\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"pet_age\", \")\", \"FROM\", \"Pets\", \"T2\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"PetType\", \",\", \"weight\", \"FROM\", \"Pets\", \"T1\", \"WHERE\", \"pet_age\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"pet_age\", \")\", \"FROM\", \"Pets\", \"T2\", \")\"],\n    \"question\": \"Find the type and weight of the youngest pet.\",\n    \"question_toks\": [\"Find\", \"the\", \"type\", \"and\", \"weight\", \"of\", \"the\", \"youngest\", \"pet\", \".\"]\n}"}
{"question": "What type of pet is the youngest animal, and how much does it weigh?", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What type of pet is the youngest animal, and how much does it weigh?\",\n\"question_toks\": \"['What', 'type', 'of', 'pet', 'is', 'the', 'youngest', 'animal', ',', 'and', 'how', 'much', 'does', 'it', 'weigh', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)\",\n    \"query_toks\": \"['SELECT', 'PetType', ',', 'weight', 'FROM', 'Pets', 'WHERE', 'pet_age', '=', '(', 'SELECT', 'MIN', '(', 'pet_age', ')', 'FROM', 'Pets', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'PetType', ',', 'weight', 'FROM', 'Pets', 'WHERE', 'pet_age', '=', '(', 'SELECT', 'MIN', '(', 'pet_age', ')', 'FROM', 'Pets', ')']\",\n    \"question\": \"What type of pet is the youngest animal, and how much does it weigh?\",\n    \"question_toks\": \"['What', 'type', 'of', 'pet', 'is', 'the', 'youngest', 'animal', ',', 'and', 'how', 'much', 'does', 'it', 'weigh', '?']\"\n}"}
{"question": "Find the id and weight of all pets whose age is older than 1.", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the id and weight of all pets whose age is older than 1.\",\n\"question_toks\": \"['Find', 'the', 'id', 'and', 'weight', 'of', 'all', 'pets', 'whose', 'age', 'is', 'older', 'than', '1', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT PetID, weight FROM Pets WHERE pet_age > 1;\",\n    \"query_toks\": \"['SELECT', 'PetID', ',', 'weight', 'FROM', 'Pets', 'WHERE', 'pet_age', '>', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'PetID', ',', 'weight', 'FROM', 'Pets', 'WHERE', 'pet_age', '>', '?', ';']\",\n    \"question\": \"Find the id and weight of all pets whose age is older than 1.\",\n    \"question_toks\": \"['Find', 'the', 'id', 'and', 'weight', 'of', 'all', 'pets', 'whose', 'age', 'is', 'older', 'than', '1', '.']\"\n}"}
{"question": "What is the id and weight of every pet who is older than 1?", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What is the id and weight of every pet who is older than 1?\",\n\"question_toks\": \"['What', 'is', 'the', 'id', 'and', 'weight', 'of', 'every', 'pet', 'who', 'is', 'older', 'than', '1', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"pets_1\",\n\"query\": \"SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1\",\n\"query_toks\": \"['SELECT', 'Pets', '.', 'PetID', ',', 'Pets', '.', 'weight', 'FROM', 'Pets', 'WHERE', 'Pets', '.', 'pet_age', '>', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'Pets', '.', 'PetID', ',', 'Pets', '.', 'weight', 'FROM', 'Pets', 'WHERE', 'Pets', '.', 'pet_age', '>', '?']\",\n\"question\": \"What is the id and weight of every pet who is older than 1?\",\n\"question_toks\": \"['What', 'is', 'the', 'id', 'and', 'weight', 'of', 'every', 'pet', 'who', 'is', 'older', 'than', '1', '?']\"\n}"}
{"question": "Find the average and maximum age for each type of pet.", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the average and maximum age for each type of pet.\",\n\"question_toks\": \"['Find', 'the', 'average', 'and', 'maximum', 'age', 'for', 'each', 'type', 'of', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType\",\n    \"query_toks\": \"['SELECT', 'PetType', ',', 'AVG', '(', 'pet_age', ')', 'AS', 'avg_age', ',', 'MAX', '(', 'pet_age', ')', 'AS', 'max_age', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n    \"query_toks_no_value\": \"['SELECT', 'PetType', ',', 'AVG', '(', ')', 'AS', 'avg_age', ',', 'MAX', '(', ')', 'AS', 'max_age', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n    \"question\": \"Find the average and maximum age for each type of pet.\",\n    \"question_toks\": \"['Find', 'the', 'average', 'and', 'maximum', 'age', 'for', 'each', 'type', 'of', 'pet', '.']\"\n}"}
{"question": "What is the average and maximum age for each pet type?", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What is the average and maximum age for each pet type?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'and', 'maximum', 'age', 'for', 'each', 'pet', 'type', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"pets_1\",\n    \"query\": \"SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType\",\n    \"query_toks\": \"['SELECT', 'PetType', ',', 'AVG', '(', 'pet_age', ')', ',', 'MAX', '(', 'pet_age', ')', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n    \"query_toks_no_value\": \"['SELECT', 'PetType', ',', 'AVG', '(', ')', ',', 'MAX', '(', ')', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n    \"question\": \"What is the average and maximum age for each pet type?\",\n    \"question_toks\": \"['What', 'is', 'the', 'average', 'and', 'maximum', 'age', 'for', 'each', 'pet', 'type', '?']\"\n}"}
{"question": "Find the average weight for each pet type.", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the average weight for each pet type.\",\n\"question_toks\": \"['Find', 'the', 'average', 'weight', 'for', 'each', 'pet', 'type', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType\",\n  \"query_toks\": \"['SELECT', 'PetType', ',', 'AVG', '(', 'weight', ')', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n  \"query_toks_no_value\": \"['SELECT', 'PetType', ',', 'AVG', '(', ')', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n  \"question\": \"Find the average weight for each pet type.\",\n  \"question_toks\": \"['Find', 'the', 'average', 'weight', 'for', 'each', 'pet', 'type', '.']\"\n}"}
{"question": "What is the average weight for each type of pet?", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What is the average weight for each type of pet?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'weight', 'for', 'each', 'type', 'of', 'pet', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"pets_1\",\n \"query\":\"SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType\",\n \"query_toks\": \"['SELECT', 'PetType', ',', 'AVG', '(', 'weight', ')', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n \"query_toks_no_value\": \"['SELECT', 'PetType', ',', 'AVG', '(', ')', 'FROM', 'Pets', 'GROUP', 'BY', 'PetType']\",\n \"question\": \"What is the average weight for each type of pet?\",\n \"question_toks\": \"['What', 'is', 'the', 'average', 'weight', 'for', 'each', 'type', 'of', 'pet', '?']\"\n}"}
{"question": "Find the first name and age of students who have a pet.", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the first name and age of students who have a pet.\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', 'and', 'age', 'of', 'students', 'who', 'have', 'a', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"pets_1\",\n\"query\": \"SELECT DISTINCT T2.Fname, T2.Age FROM Student as T2, Has_Pet as T1, Pets as T3 WHERE T2.StuID=T1.StuID AND T1.PetID=T3.PetID\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'T2', '.', 'Fname', ',', 'T2', '.', 'Age', 'FROM', 'Student', 'as', 'T2', ',', 'Has_Pet', 'as', 'T1', ',', 'Pets', 'as', 'T3', 'WHERE', 'T2', '.', 'StuID', '=', 'T1', '.', 'StuID', 'AND', 'T1', '.', 'PetID', '=', 'T3', '.', 'PetID']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T2', '.', '<column>', ',', 'T2', '.', '<column>', 'FROM', 'Student', 'as', 'T2', ',', 'Has_Pet', 'as', 'T1', ',', 'Pets', 'as', 'T3', 'WHERE', 'T2', '.', '<column>', '=', 'T1', '.', '<column>', 'AND', 'T1', '.', '<column>', '=', 'T3', '.', '<column>']\",\n\"question\": \"Find the first name and age of students who have a pet.\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', 'and', 'age', 'of', 'students', 'who', 'have', 'a', 'pet', '.']}\""}
{"question": "What are the different first names and ages of the students who do have pets?", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What are the different first names and ages of the students who do have pets?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'first', 'names', 'and', 'ages', 'of', 'the', 'students', 'who', 'do', 'have', 'pets', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT DISTINCT T2.FName, T2.Age FROM Student T2, Has_Pet T1, Pets T3 WHERE T1.StuID=T2.StuID AND T1.PetID=T3.PetID\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'T2', '.', 'FName', ',', 'T2', '.', 'Age', 'FROM', 'Student', 'T2', ',', 'Has_Pet', 'T1', ',', 'Pets', 'T3', 'WHERE', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'AND', 'T1', '.', 'PetID', '=', 'T3', '.', 'PetID']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T2', '.', '<column>', ',', 'T2', '.', '<column>', 'FROM', 'Student', 'T2', ',', 'Has_Pet', 'T1', ',', 'Pets', 'T3', 'WHERE', 'T1', '.', '<column>', '=', 'T2', '.', '<column>', 'AND', 'T1', '.', '<column>', '=', 'T3', '.', '<column>']\",\n  \"question\": \"What are the different first names and ages of the students who do have pets?\",\n  \"question_toks\": \"['What', 'are', 'the', 'different', 'first', 'names', 'and', 'ages', 'of', 'the', 'students', 'who', 'do', 'have', 'pets', '?']\"\n}"}
{"question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the id of the pet owned by student whose last name is \u2018Smith\u2019.\",\n\"question_toks\": \"['Find', 'the', 'id', 'of', 'the', 'pet', 'owned', 'by', 'student', 'whose', 'last', 'name', 'is', '\u2018Smith\u2019', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT p.PetID FROM Student AS s, Has_Pet AS hp, Pets AS p WHERE s.LName = 'Smith' AND s.StuID = hp.StuID AND hp.PetID = p.PetID\",\n  \"query_toks\": [\"SELECT\", \"p\", \".\", \"PetID\", \"FROM\", \"Student\", \"AS\", \"s\", \",\", \"Has_Pet\", \"AS\", \"hp\", \",\", \"Pets\", \"AS\", \"p\", \"WHERE\", \"s\", \".\", \"LName\", \"=\", \"'Smith'\", \"AND\", \"s\", \".\", \"StuID\", \"=\", \"hp\", \".\", \"StuID\", \"AND\", \"hp\", \".\", \"PetID\", \"=\", \"p\", \".\", \"PetID\"],\n  \"query_toks_no_value\": [\"SELECT\", \"PetID\", \"FROM\", \"Student\", \"AS\", \"s\", \",\", \"Has_Pet\", \"AS\", \"hp\", \",\", \"Pets\", \"AS\", \"p\", \"WHERE\", \"LName\", \"=\", \"AND\", \"StuID\", \"=\", \"AND\", \"PetID\", \"=\"],\n  \"question\": \"Find the id of the pet owned by student whose last name is \u2018Smith\u2019.\",\n  \"question_toks\": [\"Find\", \"the\", \"id\", \"of\", \"the\", \"pet\", \"owned\", \"by\", \"student\", \"whose\", \"last\", \"name\", \"is\", \"\u2018Smith\u2019\", \".\"]\n}"}
{"question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What is the id of the pet owned by the student whose last name is 'Smith'?\",\n\"question_toks\": \"['What', 'is', 'the', 'id', 'of', 'the', 'pet', 'owned', 'by', 'the', 'student', 'whose', 'last', 'name', 'is', \"'Smith\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"pets_1\",\n\"query\": \"SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID=Has_Pet.StuID JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Student.LName='Smith'\",\n\"query_toks\": \"['SELECT', 'Pets', '.', 'PetID', 'FROM', 'Student', 'JOIN', 'Has_Pet', 'ON', 'Student', '.', 'StuID', '=', 'Has_Pet', '.', 'StuID', 'JOIN', 'Pets', 'ON', 'Has_Pet', '.', 'PetID', '=', 'Pets', '.', 'PetID', 'WHERE', 'Student', '.', 'LName', '=', \"'Smith'\", '']\",\n\"query_toks_no_value\": \"['SELECT', 'Pets', '.', 'PetID', 'FROM', 'Student', 'JOIN', 'Has_Pet', 'ON', 'Student', '.', 'StuID', '=', 'Has_Pet', '.', 'StuID', 'JOIN', 'Pets', 'ON', 'Has_Pet', '.', 'PetID', '=', 'Pets', '.', 'PetID', 'WHERE', 'Student', '.', 'LName', '=', '']\",\n\"question\": \"What is the id of the pet owned by the student whose last name is 'Smith'?\",\n\"question_toks\": \"['What', 'is', 'the', 'id', 'of', 'the', 'pet', 'owned', 'by', 'the', 'student', 'whose', 'last', 'name', 'is', \"'Smith\", \"'\", '?']}\""}
{"question": "Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the number of pets for each student who has any pet and student id.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'pets', 'for', 'each', 'student', 'who', 'has', 'any', 'pet', 'and', 'student', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"pets_1\",\n \"query\": \"SELECT Has_Pet.StuID, COUNT(*) AS num_pets FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID GROUP BY Has_Pet.StuID\",\n \"query_toks\": [\"SELECT\", \"Has_Pet\", \".\", \"StuID\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_pets\", \"FROM\", \"Has_Pet\", \"JOIN\", \"Pets\", \"ON\", \"Has_Pet\", \".\", \"PetID\", \"=\", \"Pets\", \".\", \"PetID\", \"GROUP\", \"BY\", \"Has_Pet\", \".\", \"StuID\"],\n \"query_toks_no_value\": [\"SELECT\", \"Has_Pet\", \".\", \"StuID\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_pets\", \"FROM\", \"Has_Pet\", \"JOIN\", \"Pets\", \"ON\", \"Has_Pet\", \".\", \"PetID\", \"=\", \"Pets\", \".\", \"PetID\", \"GROUP\", \"BY\", \"Has_Pet\", \".\", \"StuID\"],\n \"question\": \"Find the number of pets for each student who has any pet and student id.\",\n \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"pets\", \"for\", \"each\", \"student\", \"who\", \"has\", \"any\", \"pet\", \"and\", \"student\", \"id\", \".\"]\n}"}
{"question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"For students who have pets , how many pets does each student have ? list their ids instead of names .\",\n\"question_toks\": \"['For', 'students', 'who', 'have', 'pets', ',', 'how', 'many', 'pets', 'does', 'each', 'student', 'have', '?', 'list', 'their', 'ids', 'instead', 'of', 'names', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT st.\\\"StuID\\\", COUNT(p.\\\"PetID\\\") AS num_pets \\nFROM Student st\\nJOIN Has_Pet hp\\nON st.\\\"StuID\\\" = hp.\\\"StuID\\\"\\nJOIN Pets p\\nON hp.\\\"PetID\\\" = p.\\\"PetID\\\"\\nGROUP BY st.\\\"StuID\\\"\",\n  \"query_toks\": [\"SELECT\", \"st\", \".\", \"\\\"StuID\\\"\", \",\", \"COUNT\", \"(\", \"p\", \".\", \"\\\"PetID\\\"\", \")\", \"AS\", \"num_pets\", \"FROM\", \"Student\", \"st\", \"JOIN\", \"Has_Pet\", \"hp\", \"ON\", \"st\", \".\", \"\\\"StuID\\\"\", \"=\", \"hp\", \".\", \"\\\"StuID\\\"\", \"JOIN\", \"Pets\", \"p\", \"ON\", \"hp\", \".\", \"\\\"PetID\\\"\", \"=\", \"p\", \".\", \"\\\"PetID\\\"\", \"GROUP\", \"BY\", \"st\", \".\", \"\\\"StuID\\\"\"],\n  \"query_toks_no_value\": [\"SELECT\", \"st\", \".\", \"\\\"StuID\\\"\", \",\", \"COUNT\", \"(\", \"p\", \".\", \"\\\"PetID\\\"\", \")\", \"AS\", \"num_pets\", \"FROM\", \"Student\", \"st\", \"JOIN\", \"Has_Pet\", \"hp\", \"ON\", \"st\", \".\", \"\\\"StuID\\\"\", \"=\", \"hp\", \".\", \"\\\"StuID\\\"\", \"JOIN\", \"Pets\", \"p\", \"ON\", \"hp\", \".\", \"\\\"PetID\\\"\", \"=\", \"p\", \".\", \"\\\"PetID\\\"\", \"GROUP\", \"BY\", \"st\", \".\", \"\\\"StuID\\\"\"],\n  \"question\": \"For students who have pets , how many pets does each student have ? list their ids instead of names .\",\n  \"question_toks\": [\"For\", \"students\", \"who\", \"have\", \"pets\", \",\", \"how\", \"many\", \"pets\", \"does\", \"each\", \"student\", \"have\", \"?\", \"list\", \"their\", \"ids\", \"instead\", \"of\", \"names\", \".\"]\n}"}
{"question": "Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the first name and gender of student who have more than one pet.\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', 'and', 'gender', 'of', 'student', 'who', 'have', 'more', 'than', 'one', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"pets_1\",\n \"query\": \"SELECT DISTINCT T1.Fname, T1.Sex FROM Student T1, Has_Pet T2 WHERE T1.StuID = T2.StuID GROUP BY T1.Fname, T1.Sex HAVING COUNT(T2.PetID) > 1;\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'T1', '.', 'Fname', ',', 'T1', '.', 'Sex', 'FROM', 'Student', 'T1', ',', 'Has_Pet', 'T2', 'WHERE', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'GROUP', 'BY', 'T1', '.', 'Fname', ',', 'T1', '.', 'Sex', 'HAVING', 'COUNT', '(', 'T2', '.', 'PetID', ')', '>', '1', ';']\",\n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T1', '.', 'Fname', ',', 'T1', '.', 'Sex', 'FROM', 'Student', 'T1', ',', 'Has_Pet', 'T2', 'WHERE', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'GROUP', 'BY', 'T1', '.', 'Fname', ',', 'T1', '.', 'Sex', 'HAVING', 'COUNT', '(', 'T2', '.', 'PetID', ')', '>', '1', ';']\",\n \"question\": \"Find the first name and gender of student who have more than one pet.\",\n \"question_toks\": \"['Find', 'the', 'first', 'name', 'and', 'gender', 'of', 'student', 'who', 'have', 'more', 'than', 'one', 'pet', '.']}\""}
{"question": "What is the first name and gender of the all the students who have more than one pet?", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What is the first name and gender of the all the students who have more than one pet?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', 'name', 'and', 'gender', 'of', 'the', 'all', 'the', 'students', 'who', 'have', 'more', 'than', 'one', 'pet', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"pets_1\",\n \"query\": \"SELECT s.Fname, s.Sex FROM Student s, Has_Pet hp WHERE s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > 1\",\n \"query_toks\": \"['SELECT', 's', '.', 'Fname', ',', 's', '.', 'Sex', 'FROM', 'Student', 's', ',', 'Has_Pet', 'hp', 'WHERE', 's', '.', 'StuID', '=', 'hp', '.', 'StuID', 'GROUP', 'BY', 's', '.', 'StuID', 'HAVING', 'COUNT', '(', 'hp', '.', 'PetID', ')', '>', '1']\",\n \"query_toks_no_value\": \"['SELECT', 's', '.', 'Fname', ',', 's', '.', 'Sex', 'FROM', 'Student', 's', ',', 'Has_Pet', 'hp', 'WHERE', 's', '.', 'StuID', '=', 'hp', '.', 'StuID', 'GROUP', 'BY', 's', '.', 'StuID', 'HAVING', 'COUNT', '(', 'hp', '.', 'PetID', ')', '>', '?']\",\n \"question\": \"What is the first name and gender of the all the students who have more than one pet?\",\n \"question_toks\": \"['What', 'is', 'the', 'first', 'name', 'and', 'gender', 'of', 'the', 'all', 'the', 'students', 'who', 'have', 'more', 'than', 'one', 'pet', '?']\"\n}"}
{"question": "Find the last name of the student who has a cat that is age 3.", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the last name of the student who has a cat that is age 3.\",\n\"question_toks\": \"['Find', 'the', 'last', 'name', 'of', 'the', 'student', 'who', 'has', 'a', 'cat', 'that', 'is', 'age', '3', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"pets_1\",\n\"query\": \"SELECT s.LName FROM Student T1, Has_Pet T2, Pets T3 WHERE T1.StuID = T2.StuID AND T2.PetID = T3.PetID AND T3.PetType = 'cat' AND T3.pet_age = 3;\",\n\"query_toks\": \"['SELECT', 's', '.', 'LName', 'FROM', 'Student', 'T1', ',', 'Has_Pet', 'T2', ',', 'Pets', 'T3', 'WHERE', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'AND', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'AND', 'T3', '.', 'PetType', '=', \\\"'cat'\\\", 'AND', 'T3', '.', 'pet_age', '=', '3', ';']\",\n\"query_toks_no_value\": \"['SELECT', 's', '.', 'LName', 'FROM', 'Student', 'T1', ',', 'Has_Pet', 'T2', ',', 'Pets', 'T3', 'WHERE', 'T1', '.', 'StuID', '=', 'T2', '.', 'StuID', 'AND', 'T2', '.', 'PetID', '=', 'T3', '.', 'PetID', 'AND', 'T3', '.', 'PetType', '=', \\\"'cat'\\\", 'AND', 'T3', '.', 'pet_age', '=', '?', ';']\",\n\"question\": \"Find the last name of the student who has a cat that is age 3.\",\n\"question_toks\": \"['Find', 'the', 'last', 'name', 'of', 'the', 'student', 'who', 'has', 'a', 'cat', 'that', 'is', 'age', '3', '.']}\"\n"}
{"question": "What is the last name of the student who has a cat that is 3 years old?", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What is the last name of the student who has a cat that is 3 years old?\",\n\"question_toks\": \"['What', 'is', 'the', 'last', 'name', 'of', 'the', 'student', 'who', 'has', 'a', 'cat', 'that', 'is', '3', 'years', 'old', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT s.LName FROM Student s, Has_Pet hp, Pets p WHERE s.StuID = hp.StuID AND hp.PetID = p.PetID AND p.PetType = 'cat' AND p.pet_age = '3'\",\n  \"query_toks\": \"['SELECT', 's', '.', 'LName', 'FROM', 'Student', 's', ',', 'Has_Pet', 'hp', ',', 'Pets', 'p', 'WHERE', 's', '.', 'StuID', '=', 'hp', '.', 'StuID', 'AND', 'hp', '.', 'PetID', '=', 'p', '.', 'PetID', 'AND', 'p', '.', 'PetType', '=', '\\\"cat\\\"', 'AND', 'p', '.', 'pet_age', '=', '\\\"3\\\"']\",\n  \"query_toks_no_value\": \"['SELECT', 's', '.', 'LName', 'FROM', 'Student', 's', ',', 'Has_Pet', 'hp', ',', 'Pets', 'p', 'WHERE', 's', '.', 'StuID', '=', 'hp', '.', 'StuID', 'AND', 'hp', '.', 'PetID', '=', 'p', '.', 'PetID', 'AND', 'p', '.', 'PetType', '=', 'cat', 'AND', 'p', '.', 'pet_age', '=', '3']\",\n  \"question\": \"What is the last name of the student who has a cat that is 3 years old?\",\n  \"question_toks\": \"['What', 'is', 'the', 'last', 'name', 'of', 'the', 'student', 'who', 'has', 'a', 'cat', 'that', 'is', '3', 'years', 'old', '?']\"\n}"}
{"question": "Find the average age of students who do not have any pet .", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"Find the average age of students who do not have any pet .\",\n\"question_toks\": \"['Find', 'the', 'average', 'age', 'of', 'students', 'who', 'do', 'not', 'have', 'any', 'pet', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)\",\n  \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"Age\", \")\", \"FROM\", \"Student\", \"WHERE\", \"StuID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"StuID\", \"FROM\", \"Has_Pet\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"Age\", \")\", \"FROM\", \"Student\", \"WHERE\", \"StuID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"StuID\", \"FROM\", \"Has_Pet\", \")\"],\n  \"question\": \"Find the average age of students who do not have any pet .\",\n  \"question_toks\": [\"Find\", \"the\", \"average\", \"age\", \"of\", \"students\", \"who\", \"do\", \"not\", \"have\", \"any\", \"pet\", \".\"]\n}"}
{"question": "What is the average age for all students who do not own any pets ?", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nStudent: 'StuID', 'LName', 'Fname', 'Age', 'Sex', 'Major', 'Advisor', 'city_code'\nHas_Pet: 'StuID', 'PetID'\nPets: 'PetID', 'PetType', 'pet_age', 'weight'\n\n{\"db_id\": \"pets_1\",\n\"question\": \"What is the average age for all students who do not own any pets ?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'age', 'for', 'all', 'students', 'who', 'do', 'not', 'own', 'any', 'pets', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"pets_1\",\n  \"query\": \"SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)\",\n  \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"Age\", \")\", \"FROM\", \"Student\", \"WHERE\", \"StuID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"StuID\", \"FROM\", \"Has_Pet\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"Age\", \")\", \"FROM\", \"Student\", \"WHERE\", \"StuID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"StuID\", \"FROM\", \"Has_Pet\", \")\"],\n  \"question\": \"What is the average age for all students who do not own any pets?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"average\", \"age\", \"for\", \"all\", \"students\", \"who\", \"do\", \"not\", \"own\", \"any\", \"pets\", \"?\"]\n}"}
{"question": "How many continents are there?", "sql": "SELECT count(*) FROM CONTINENTS;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many continents are there?\",\n\"question_toks\": \"['How', 'many', 'continents', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT COUNT(*) FROM continents\",\n \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"continents\"],\n \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"continents\"],\n \"question\": \"How many continents are there?\",\n \"question_toks\": [\"How\", \"many\", \"continents\", \"are\", \"there\", \"?\"]\n}"}
{"question": "What is the number of continents?", "sql": "SELECT count(*) FROM CONTINENTS;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of continents?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'continents', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(*) FROM continents\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"continents\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"continents\"],\n    \"question\": \"What is the number of continents?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"number\", \"of\", \"continents\", \"?\"]\n}"}
{"question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many countries does each continent have? List the continent id, continent name and the number of countries.\",\n\"question_toks\": \"['How', 'many', 'countries', 'does', 'each', 'continent', 'have', '?', 'List', 'the', 'continent', 'id', ',', 'continent', 'name', 'and', 'the', 'number', 'of', 'countries', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumCountries\\nFROM continents\\nJOIN countries ON continents.ContId = countries.Continent\\nGROUP BY continents.ContId\",\n  \"query_toks\": [\"SELECT\", \"continents.ContId\", \",\", \"continents.Continent\", \",\", \"COUNT\", \"(\", \"countries.CountryId\", \")\", \"AS\", \"NumCountries\", \"FROM\", \"continents\", \"JOIN\", \"countries\", \"ON\", \"continents.ContId\", \"=\", \"countries.Continent\", \"GROUP\", \"BY\", \"continents.ContId\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Continents.ContId\", \",\", \"Continents.Continent\", \",\", \"COUNT\", \"(\", \"Countries.CountryId\", \")\", \"FROM\", \"Continents\", \"JOIN\", \"Countries\", \"ON\", \"Continents.ContId\", \"=\", \"Countries.Continent\", \"GROUP\", \"BY\", \"Continents.ContId\"],\n  \"question\": \"How many countries does each continent have? List the continent id, continent name and the number of countries.\",\n  \"question_toks\": [\"How\", \"many\", \"countries\", \"does\", \"each\", \"continent\", \"have\", \"?\", \"List\", \"the\", \"continent\", \"id\", \",\", \"continent\", \"name\", \"and\", \"the\", \"number\", \"of\", \"countries\", \".\"]\n}"}
{"question": "For each continent, list its id, name, and how many countries it has?", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"For each continent, list its id, name, and how many countries it has?\",\n\"question_toks\": \"['For', 'each', 'continent', ',', 'list', 'its', 'id', ',', 'name', ',', 'and', 'how', 'many', 'countries', 'it', 'has', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT ContId AS continent_id, Continent AS continent, COUNT(*) AS num_countries FROM countries GROUP BY ContId, Continent\",\n  \"query_toks\": [\"SELECT\", \"ContId\", \"AS\", \"continent_id\", \",\", \"Continent\", \"AS\", \"continent\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_countries\", \"FROM\", \"countries\", \"GROUP\", \"BY\", \"ContId\", \",\", \"Continent\"],\n  \"query_toks_no_value\": [\"SELECT\", \"ContId\", \",\", \"Continent\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"countries\", \"GROUP\", \"BY\", \"ContId\", \",\", \"Continent\"],\n  \"question\": \"For each continent, list its id, name, and how many countries it has?\",\n  \"question_toks\": [\"For\", \"each\", \"continent\", \",\", \"list\", \"its\", \"id\", \",\", \"name\", \",\", \"and\", \"how\", \"many\", \"countries\", \"it\", \"has\", \"?\"]\n}"}
{"question": "How many countries are listed?", "sql": "SELECT count(*) FROM COUNTRIES;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many countries are listed?\",\n\"question_toks\": \"['How', 'many', 'countries', 'are', 'listed', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT COUNT(CountryId) FROM countries\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"CountryId\", \")\", \"FROM\", \"countries\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"countries\"],\n  \"question\": \"How many countries are listed?\",\n  \"question_toks\": [\"How\", \"many\", \"countries\", \"are\", \"listed\", \"?\"]\n}"}
{"question": "How many countries exist?", "sql": "SELECT count(*) FROM COUNTRIES;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many countries exist?\",\n\"question_toks\": \"['How', 'many', 'countries', 'exist', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(*) FROM countries\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"countries\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"countries\"],\n    \"question\": \"How many countries exist?\",\n    \"question_toks\": [\"How\", \"many\", \"countries\", \"exist\", \"?\"]\n}"}
{"question": "How many models does each car maker produce? List maker full name, id and the number.", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many models does each car maker produce? List maker full name, id and the number.\",\n\"question_toks\": \"['How', 'many', 'models', 'does', 'each', 'car', 'maker', 'produce', '?', 'List', 'maker', 'full', 'name', ',', 'id', 'and', 'the', 'number', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT c.Maker, c.Id, COUNT(DISTINCT m.ModelId) as num_models\\nFROM car_makers c\\nJOIN model_list m ON c.Maker = m.Maker\\nGROUP BY c.Maker, c.Id\\nORDER BY num_models DESC\",\n  \"query_toks\": \"['SELECT', 'c', '.', 'Maker', ',', 'c', '.', 'Id', ',', 'COUNT', '(', 'DISTINCT', 'm', '.', 'ModelId', ')', 'as', 'num_models', 'FROM', 'car_makers', 'c', 'JOIN', 'model_list', 'm', 'ON', 'c', '.', 'Maker', '=', 'm', '.', 'Maker', 'GROUP', 'BY', 'c', '.', 'Maker', ',', 'c', '.', 'Id', 'ORDER', 'BY', 'num_models', 'DESC']\",\n  \"query_toks_no_value\": \"['SELECT', 'c', '.', 'Maker', ',', 'c', '.', 'Id', ',', 'COUNT', '(', 'DISTINCT', 'm', '.', 'ModelId', ')', 'as', 'num_models', 'FROM', 'car_makers', 'c', 'JOIN', 'model_list', 'm', 'ON', 'c', '.', 'Maker', '=', 'm', '.', 'Maker', 'GROUP', 'BY', 'c', '.', 'Maker', ',', 'c', '.', 'Id', 'ORDER', 'BY', 'num_models', 'DESC']\",\n  \"question\": \"How many models does each car maker produce? List maker full name, id and the number.\",\n  \"question_toks\": \"['How', 'many', 'models', 'does', 'each', 'car', 'maker', 'produce', '?', 'List', 'maker', 'full', 'name', ',', 'id', 'and', 'the', 'number', '.']\"\n}"}
{"question": "What is the full name of each car maker, along with its id and how many models it produces?", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the full name of each car maker, along with its id and how many models it produces?\",\n\"question_toks\": \"['What', 'is', 'the', 'full', 'name', 'of', 'each', 'car', 'maker', ',', 'along', 'with', 'its', 'id', 'and', 'how', 'many', 'models', 'it', 'produces', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT cm.Id, cm.Maker, cm.FullName, COUNT(ml.ModelId) as num_models FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker GROUP BY cm.Id\",\n    \"query_toks\": [\"SELECT\", \"cm\", \".\", \"Id\", \",\", \"cm\", \".\", \"Maker\", \",\", \"cm\", \".\", \"FullName\", \",\", \"COUNT\", \"(\", \"ml\", \".\", \"ModelId\", \")\", \"as\", \"num_models\", \"FROM\", \"car_makers\", \"cm\", \"JOIN\", \"model_list\", \"ml\", \"ON\", \"cm\", \".\", \"Maker\", \"=\", \"ml\", \".\", \"Maker\", \"GROUP\", \"BY\", \"cm\", \".\", \"Id\"],\n    \"query_toks_no_value\": [\"SELECT\", \"cm\", \".\", \"Id\", \",\", \"cm\", \".\", \"Maker\", \",\", \"cm\", \".\", \"FullName\", \",\", \"COUNT\", \"(\", \"ml\", \".\", \"ModelId\", \")\", \"as\", \"num_models\", \"FROM\", \"car_makers\", \"cm\", \"JOIN\", \"model_list\", \"ml\", \"ON\", \"cm\", \".\", \"Maker\", \"=\", \"ml\", \".\", \"Maker\", \"GROUP\", \"BY\", \"cm\", \".\", \"Id\"],\n    \"question\": \"What is the full name of each car maker, along with its id and how many models it produces?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"full\", \"name\", \"of\", \"each\", \"car\", \"maker\", \",\", \"along\", \"with\", \"its\", \"id\", \"and\", \"how\", \"many\", \"models\", \"it\", \"produces\", \"?\"]\n}"}
{"question": "Which model of the car has the minimum horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which model of the car has the minimum horsepower?\",\n\"question_toks\": \"['Which', 'model', 'of', 'the', 'car', 'has', 'the', 'minimum', 'horsepower', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT Model FROM cars_data T1 WHERE T1.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)\",\n \"query_toks\": \"['SELECT', 'Model', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Horsepower', '=', '(', 'SELECT', 'MIN', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')']\",\n \"query_toks_no_value\": \"['SELECT', 'Model', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Horsepower', '=', '(', 'SELECT', 'MIN', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')']\",\n \"question\": \"Which model of the car has the minimum horsepower?\",\n \"question_toks\": \"['Which', 'model', 'of', 'the', 'car', 'has', 'the', 'minimum', 'horsepower', '?']\"\n}"}
{"question": "What is the model of the car with the smallest amount of horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the model of the car with the smallest amount of horsepower?\",\n\"question_toks\": \"['What', 'is', 'the', 'model', 'of', 'the', 'car', 'with', 'the', 'smallest', 'amount', 'of', 'horsepower', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)\",\n  \"query_toks\": \"['SELECT', 'model_list', '.', 'Model', 'FROM', 'cars_data', 'JOIN', 'model_list', 'ON', 'cars_data', '.', 'Id', '=', 'model_list', '.', 'ModelId', 'WHERE', 'cars_data', '.', 'Horsepower', '=', '(', 'SELECT', 'MIN', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')']\",\n  \"query_toks_no_value\": \"['SELECT', 'model_list', '.', 'Model', 'FROM', 'cars_data', 'JOIN', 'model_list', 'ON', 'cars_data', '.', 'Id', '=', 'model_list', '.', 'ModelId', 'WHERE', 'cars_data', '.', 'Horsepower', '=', '(', 'SELECT', 'MIN', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')']\",\n  \"question\": \"What is the model of the car with the smallest amount of horsepower?\",\n  \"question_toks\": \"['What', 'is', 'the', 'model', 'of', 'the', 'car', 'with', 'the', 'smallest', 'amount', 'of', 'horsepower', '?']\"\n}"}
{"question": "Find the model of the car whose weight is below the average weight.", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Find the model of the car whose weight is below the average weight.\",\n\"question_toks\": \"['Find', 'the', 'model', 'of', 'the', 'car', 'whose', 'weight', 'is', 'below', 'the', 'average', 'weight', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n\"query\": \"SELECT Model FROM model_list WHERE ModelId = (SELECT MakeId FROM car_names WHERE Model = (SELECT Model FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)))\",\n\"query_toks\": \"['SELECT', 'Model', 'FROM', 'model_list', 'WHERE', 'ModelId', '=', '(SELECT', 'MakeId', 'FROM', 'car_names', 'WHERE', 'Model', '=', '(SELECT', 'Model', 'FROM', 'cars_data', 'WHERE', 'Weight', '<', '(SELECT', 'AVG', '(', 'Weight', ')', 'FROM', 'cars_data', '))', ')', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'Model', 'FROM', 'model_list', 'WHERE', 'ModelId', '=', 'SELECT', 'MakeId', 'FROM', 'car_names', 'WHERE', 'Model', '=', 'SELECT', 'Model', 'FROM', 'cars_data', 'WHERE', 'Weight', '<', 'SELECT', 'AVG', '(', 'Weight', ')', 'FROM', 'cars_data', '))', ')', ')']\",\n\"question\": \"Find the model of the car whose weight is below the average weight.\",\n\"question_toks\": \"['Find', 'the', 'model', 'of', 'the', 'car', 'whose', 'weight', 'is', 'below', 'the', 'average', 'weight', '.']}\""}
{"question": "What is the model for the car with a weight smaller than the average?", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the model for the car with a weight smaller than the average?\",\n\"question_toks\": \"['What', 'is', 'the', 'model', 'for', 'the', 'car', 'with', 'a', 'weight', 'smaller', 'than', 'the', 'average', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT Model FROM model_list T1 JOIN cars_data T2 ON T1.ModelId=T2.Id WHERE T2.Weight<(SELECT AVG(Weight) FROM cars_data);\",\n    \"query_toks\": \"['SELECT', 'Model', 'FROM', 'model_list', 'T1', 'JOIN', 'cars_data', 'T2', 'ON', 'T1', '.', 'ModelId', '=', 'T2', '.', 'Id', 'WHERE', 'T2', '.', 'Weight', '<', '(', 'SELECT', 'AVG', '(', 'Weight', ')', 'FROM', 'cars_data', ')', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'Model', 'FROM', 'model_list', 'T1', 'JOIN', 'cars_data', 'T2', 'ON', 'T1', '.', 'ModelId', '=', 'T2', '.', 'Id', 'WHERE', 'T2', '.', 'Weight', '<', '(', 'SELECT', 'AVG', '(', 'Weight', ')', 'FROM', 'cars_data', ')', ';']\",\n    \"question\": \"What is the model for the car with a weight smaller than the average?\",\n    \"question_toks\": \"['What', 'is', 'the', 'model', 'for', 'the', 'car', 'with', 'a', 'weight', 'smaller', 'than', 'the', 'average', '?']\"\n}"}
{"question": "Find the name of the makers that produced some cars in the year of 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Find the name of the makers that produced some cars in the year of 1970?\",\n\"question_toks\": \"['Find', 'the', 'name', 'of', 'the', 'makers', 'that', 'produced', 'some', 'cars', 'in', 'the', 'year', 'of', '1970', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT DISTINCT Maker FROM cars_data T1 WHERE T1.Year = '1970'\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'Maker', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Year', '=', ''', 1970, ''']\",\n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Maker', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Year', '=', '', '']\",\n \"question\": \"Find the name of the makers that produced some cars in the year of 1970?\",\n \"question_toks\": \"['Find', 'the', 'name', 'of', 'the', 'makers', 'that', 'produced', 'some', 'cars', 'in', 'the', 'year', 'of', '1970', '?']\"}"}
{"question": "What is the name of the different car makers who produced a car in 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the name of the different car makers who produced a car in 1970?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'different', 'car', 'makers', 'who', 'produced', 'a', 'car', 'in', '1970', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT DISTINCT cm.Maker FROM car_makers cm INNER JOIN cars_data cd ON cm.Id = cd.Id WHERE cd.Year = '1970'\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'cm', '.', 'Maker', 'FROM', 'car_makers', 'cm', 'INNER', 'JOIN', 'cars_data', 'cd', 'ON', 'cm', '.', 'Id', '=', 'cd', '.', 'Id', 'WHERE', 'cd', '.', 'Year', '=', \\\"'1970'\\\"', '']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'cm', '.', 'Maker', 'FROM', 'car_makers', 'cm', 'INNER', 'JOIN', 'cars_data', 'cd', 'ON', 'cm', '.', 'Id', '=', 'cd', '.', 'Id', 'WHERE', 'cd', '.', 'Year', '=', '\\\"\\\"', '']\",\n  \"question\": \"What is the name of the different car makers who produced a car in 1970?\",\n  \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'different', 'car', 'makers', 'who', 'produced', 'a', 'car', 'in', '1970', '?']\"\n}"}
{"question": "Find the make and production time of the cars that were produced in the earliest year?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Find the make and production time of the cars that were produced in the earliest year?\",\n\"question_toks\": \"['Find', 'the', 'make', 'and', 'production', 'time', 'of', 'the', 'cars', 'that', 'were', 'produced', 'in', 'the', 'earliest', 'year', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n\"query\": \"SELECT car_names.MakeId, model_list.Model, MIN(cars_data.Year) FROM car_names INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.MakeId, model_list.Model ORDER BY MIN(cars_data.Year) LIMIT 1\",\n\"query_toks\": \"['SELECT', 'car_names', '.', 'MakeId', ',', 'model_list', '.', 'Model', ',', 'MIN', '(', 'cars_data', '.', 'Year', ')', 'FROM', 'car_names', 'INNER', 'JOIN', 'model_list', 'ON', 'car_names', '.', 'Model', '=', 'model_list', '.', 'M...ames', '.', 'MakeId', ',', 'model_list', '.', 'Model', 'ORDER', 'BY', 'MIN', '(', 'cars_data', '.', 'Year', ')', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'car_names', '.', 'MakeId', ',', 'model_list', '.', 'Model', ',', 'MIN', '(', 'cars_data', '.', 'Year', ')', 'FROM', 'car_names', 'INNER', 'JOIN', 'model_list', 'ON', 'car_names', '.', 'Model', '=', 'model_list', '....', 'MakeId', ',', 'model_list', '.', 'Model', 'ORDER', 'BY', 'MIN', '(', 'cars_data', '.', 'Year', ')', 'LIMIT', '1']\",\n\"question\": \"Find the make and production time of the cars that were produced in the earliest year?\",\n\"question_toks\": \"['Find', 'the', 'make', 'and', 'production', 'time', 'of', 'the', 'cars', 'that', 'were', 'produced', 'in', 'the', 'earliest', 'year', '?']}\""}
{"question": "What is the maker of the carr produced in the earliest year and what year was it?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the maker of the carr produced in the earliest year and what year was it?\",\n\"question_toks\": \"['What', 'is', 'the', 'maker', 'of', 'the', 'carr', 'produced', 'in', 'the', 'earliest', 'year', 'and', 'what', 'year', 'was', 'it', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT Maker, Year FROM cars_data T1 ORDER BY Year LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'Maker', ',', 'Year', 'FROM', 'cars_data', 'T1', 'ORDER', 'BY', 'Year', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'Maker', ',', 'Year', 'FROM', 'cars_data', 'T1', 'ORDER', 'BY', 'Year', 'LIMIT', '1']\",\n    \"question\": \"What is the maker of the car produced in the earliest year and what year was it?\",\n    \"question_toks\": \"['What', 'is', 'the', 'maker', 'of', 'the', 'car', 'produced', 'in', 'the', 'earliest', 'year', 'and', 'what', 'year', 'was', 'it', '?']\"\n}"}
{"question": "Which distinct car models are the produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which distinct car models are the produced after 1980?\",\n\"question_toks\": \"['Which', 'distinct', 'car', 'models', 'are', 'the', 'produced', 'after', '1980', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT DISTINCT T4.Model FROM cars_data T4 WHERE T4.Year > 1980\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'T4', '.', 'Model', 'FROM', 'cars_data', 'T4', 'WHERE', 'T4', '.', 'Year', '>', '1980']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T4', '.', 'Model', 'FROM', 'cars_data', 'T4', 'WHERE', 'T4', '.', 'Year', '>', '?']\",\n  \"question\": \"Which distinct car models are the produced after 1980?\",\n  \"question_toks\": \"['Which', 'distinct', 'car', 'models', 'are', 'the', 'produced', 'after', '1980', '?']\"\n}"}
{"question": "What are the different models for the cards produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the different models for the cards produced after 1980?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'models', 'for', 'the', 'cards', 'produced', 'after', '1980', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT DISTINCT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id=model_list.ModelId WHERE cars_data.Year>1980\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'model_list', '.', 'Model', 'FROM', 'cars_data', 'JOIN', 'model_list', 'ON', 'cars_data', '.', 'Id', '=', 'model_list', '.', 'ModelId', 'WHERE', 'cars_data', '.', 'Year', '>', '1980']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'model_list', '.', 'Model', 'FROM', 'cars_data', 'JOIN', 'model_list', 'ON', 'cars_data', '.', 'Id', '=', 'model_list', '.', 'ModelId', 'WHERE', 'cars_data', '.', 'Year', '>', '?']\",\n    \"question\": \"What are the different models for the cards produced after 1980?\",\n    \"question_toks\": \"['What', 'are', 'the', 'different', 'models', 'for', 'the', 'cards', 'produced', 'after', '1980', '?']\"\n}"}
{"question": "How many car makers are there in each continents? List the continent name and the count.", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many car makers are there in each continents? List the continent name and the count.\",\n\"question_toks\": \"['How', 'many', 'car', 'makers', 'are', 'there', 'in', 'each', 'continents', '?', 'List', 'the', 'continent', 'name', 'and', 'the', 'count', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) FROM continents JOIN countries ON continents.ContId=countries.Continent JOIN car_makers ON countries.CountryName=car_makers.Country GROUP BY continents.Continent\",\n    \"query_toks\": \"['SELECT', 'continents.Continent', ',', 'COUNT', '(', 'DISTINCT', 'car_makers.Id', ')', 'FROM', 'continents', 'JOIN', 'countries', 'ON', 'continents.ContId', '=', 'countries.Continent', 'JOIN', 'car_makers', 'ON', 'countries.CountryName', '=', 'car_makers.Country', 'GROUP', 'BY', 'continents.Continent']\",\n    \"query_toks_no_value\": \"['SELECT', 'continents', '.', 'Continent', ',', 'COUNT', '(', 'DISTINCT', 'car_makers', '.', 'Id', ')', 'FROM', 'continents', 'JOIN', 'countries', 'ON', 'continents', '.', 'ContId', '=', 'countries', '.', 'Continent', 'JOIN', 'car_makers', 'ON', 'countries', '.', 'CountryName', '=', 'car_makers', '.', 'Country', 'GROUP', 'BY', 'continents', '.', 'Continent']\",\n    \"question\": \"How many car makers are there in each continents? List the continent name and the count.\",\n    \"question_toks\": \"['How', 'many', 'car', 'makers', 'are', 'there', 'in', 'each', 'continents', '?', 'List', 'the', 'continent', 'name', 'and', 'the', 'count', '.']\"\n}"}
{"question": "What is the name of each continent and how many car makers are there in each one?", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the name of each continent and how many car makers are there in each one?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'each', 'continent', 'and', 'how', 'many', 'car', 'makers', 'are', 'there', 'in', 'each', 'one', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT c.Continent AS Continent, COUNT(DISTINCT cm.Maker) AS Num_Makers \\nFROM countries AS c JOIN car_makers AS cm ON c.CountryName=cm.Country \\nGROUP BY c.Continent\",\n    \"query_toks\": \"[SELECT, c.Continent, AS, Continent, ,, COUNT, (, DISTINCT, cm.Maker, ), AS, Num_Makers, FROM, countries, AS, c, JOIN, car_makers, AS, cm, ON, c.CountryName, =, cm.Country, GROUP, BY, c.Continent]\",\n    \"query_toks_no_value\": \"[SELECT, c, ., Continent, ,, COUNT, (, DISTINCT, cm, ., Maker, ), FROM, countries, AS, c, JOIN, car_makers, AS, cm, ON, c, ., CountryName, =, cm, ., Country, GROUP, BY, c, ., Continent]\",\n    \"question\": \"What is the name of each continent and how many car makers are there in each one?\",\n    \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'each', 'continent', 'and', 'how', 'many', 'car', 'makers', 'are', 'there', 'in', 'each', 'one', '?']\"\n}"}
{"question": "Which of the countries has the most car makers? List the country name.", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which of the countries has the most car makers? List the country name.\",\n\"question_toks\": \"['Which', 'of', 'the', 'countries', 'has', 'the', 'most', 'car', 'makers', '?', 'List', 'the', 'country', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY car_makers.Country ORDER BY COUNT(car_makers.Id) DESC LIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"countries.CountryName\", \"FROM\", \"countries\", \"JOIN\", \"car_makers\", \"ON\", \"car_makers.Country\", \"=\", \"countries.CountryId\", \"GROUP\", \"BY\", \"car_makers.Country\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"car_makers.Id\", \")\", \"DESC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"countries\", \".\", \"CountryName\", \"FROM\", \"countries\", \"JOIN\", \"car_makers\", \"ON\", \"car_makers\", \".\", \"Country\", \"=\", \"countries\", \".\", \"CountryId\", \"GROUP\", \"BY\", \"car_makers\", \".\", \"Country\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"car_makers\", \".\", \"Id\", \")\", \"DESC\", \"LIMIT\", \"1\"],\n  \"question\": \"Which of the countries has the most car makers? List the country name.\",\n  \"question_toks\": [\"Which\", \"of\", \"the\", \"countries\", \"has\", \"the\", \"most\", \"car\", \"makers\", \"?\", \"List\", \"the\", \"country\", \"name\", \".\"]\n}"}
{"question": "What is the name of the country with the most car makers?", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the name of the country with the most car makers?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'country', 'with', 'the', 'most', 'car', 'makers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country=countries.CountryId GROUP BY car_makers.Country ORDER BY COUNT(car_makers.Id) DESC LIMIT 1\",\n  \"query_toks\": \"['SELECT', 'countries.CountryName', 'FROM', 'car_makers', 'JOIN', 'countries', 'ON', 'car_makers.Country=countries.CountryId', 'GROUP', 'BY', 'car_makers.Country', 'ORDER', 'BY', 'COUNT(car_makers.Id)', 'DESC', 'LIMIT', '1']\",\n  \"query_toks_no_value\": \"['SELECT', 'countries.CountryName', 'FROM', 'car_makers', 'JOIN', 'countries', 'ON', 'car_makers.Country=', 'countries.CountryId', 'GROUP', 'BY', 'car_makers.Country', 'ORDER', 'BY', 'COUNT(car_makers.Id)', 'DESC', 'LIMIT', '1']\",\n  \"question\": \"What is the name of the country with the most car makers?\",\n  \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'country', 'with', 'the', 'most', 'car', 'makers', '?']\"\n}"}
{"question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many car models are produced by each maker ? Only list the count and the maker full name .\",\n\"question_toks\": \"['How', 'many', 'car', 'models', 'are', 'produced', 'by', 'each', 'maker', '?', 'Only', 'list', 'the', 'count', 'and', 'the', 'maker', 'full', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n\"query\": \"SELECT Maker.FullName, COUNT(ModelList.ModelId) AS Count FROM car_makers AS Maker JOIN model_list AS ModelList ON Maker.Id = ModelList.Maker GROUP BY Maker.FullName\",\n\"query_toks\": \"['SELECT', 'Maker', '.', 'FullName', ',', 'COUNT', '(', 'ModelList', '.', 'ModelId', ')', 'AS', 'Count', 'FROM', 'car_makers', 'AS', 'Maker', 'JOIN', 'model_list', 'AS', 'ModelList', 'ON', 'Maker', '.', 'Id', '=', 'ModelList', '.', 'Maker', 'GROUP BY', 'Maker', '.', 'FullName']\",\n\"query_toks_no_value\": \"['SELECT', 'Maker', '.', 'FullName', ',', 'COUNT', '(', 'ModelList', '.', 'ModelId', ')', 'AS', 'Count', 'FROM', 'car_makers', 'AS', 'Maker', 'JOIN', 'model_list', 'AS', 'ModelList', 'ON', 'Maker', '.', 'Id', '=', 'ModelList', '.', 'Maker', 'GROUP BY', 'Maker', '.', 'FullName']\",\n\"question\": \"How many car models are produced by each maker ? Only list the count and the maker full name .\",\n\"question_toks\": \"['How', 'many', 'car', 'models', 'are', 'produced', 'by', 'each', 'maker', '?', 'Only', 'list', 'the', 'count', 'and', 'the', 'maker', 'full', 'name', '.']}\" \n}"}
{"question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of car models that are produced by each maker and what is the id and full name of each maker?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'car', 'models', 'that', 'are', 'produced', 'by', 'each', 'maker', 'and', 'what', 'is', 'the', 'id', 'and', 'full', 'name', 'of', 'each', 'maker', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT maker.Id AS maker_id, maker.FullName AS maker_name, COUNT(model.ModelId) AS num_models_produced FROM car_makers AS maker JOIN model_list AS model ON maker.Id = model.Maker GROUP BY maker_id, maker_name\",\n    \"query_toks\": \"['SELECT', 'maker', '.', 'Id', 'AS', 'maker_id', ',', 'maker', '.', 'FullName', 'AS', 'maker_name', ',', 'COUNT', '(', 'model', '.', 'ModelId', ')', 'AS', 'num_models_produced', 'FROM', 'car_makers', 'AS', 'maker', 'JOIN', 'model_list', 'AS', 'model', 'ON', 'maker', '.', 'Id', '=', 'model', '.', 'Maker', 'GROUP', 'BY', 'maker_id', ',', 'maker_name']\",\n    \"query_toks_no_value\": \"['SELECT', 'maker', '.', 'Id', 'AS', 'maker_id', ',', 'maker', '.', 'FullName', 'AS', 'maker_name', ',', 'COUNT', '(', 'model', '.', 'ModelId', ')', 'AS', 'num_models_produced', 'FROM', 'car_makers', 'AS', 'maker', 'JOIN', 'model_list', 'AS', 'model', 'ON', 'maker', '.', 'Id', '=', 'model', '.', 'Maker', 'GROUP', 'BY', 'maker_id', ',', 'maker_name']\",\n    \"question\": \"What is the number of car models that are produced by each maker and what is the id and full name of each maker?\",\n    \"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'car', 'models', 'that', 'are', 'produced', 'by', 'each', 'maker', 'and', 'what', 'is', 'the', 'id', 'and', 'full', 'name', 'of', 'each', 'maker', '?']\"\n}"}
{"question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the accelerate of the car make amc hornet sportabout (sw)?\",\n\"question_toks\": \"['What', 'is', 'the', 'accelerate', 'of', 'the', 'car', 'make', 'amc', 'hornet', 'sportabout', '(', 'sw', ')', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n\"query\": \"SELECT Accelerate FROM cars_data T1 JOIN car_names T2 ON T1.Id=T2.MakeId JOIN model_list T3 ON T2.Model=T3.Model AND T2.Maker=T3.Maker WHERE T3.Model='Hornet Sportabout (sw)' AND T2.Maker='AMC'\",\n\"query_toks\": \"['SELECT', 'Accelerate', 'FROM', 'cars_data', 'T1', 'JOIN', 'car_names', 'T2', 'ON', 'T1.Id=T2.MakeId', 'JOIN', 'model_list', 'T3', 'ON', 'T2.Model=T3.Model', 'AND', 'T2.Maker=T3.Maker', 'WHERE', 'T3.Model=\\\\'Hornet Sportabout (sw)\\\\'', 'AND', 'T2.Maker=\\\\'AMC\\\\'']\",\n\"query_toks_no_value\": \"['SELECT', 'Accelerate', 'FROM', 'cars_data', 'T1', 'JOIN', 'car_names', 'T2', 'ON', 'T1.Id=T2.MakeId', 'JOIN', 'model_list', 'T3', 'ON', 'T2.Model=T3.Model', 'AND', 'T2.Maker=T3.Maker', 'WHERE', 'T3.Model', '=', '\\\\'Hornet Sportabout (sw)\\\\'', 'AND', 'T2.Maker', '=', '\\\\'AMC\\\\'']\",\n\"question\": \"What is the accelerate of the car make amc hornet sportabout (sw)?\",\n\"question_toks\": \"['What', 'is', 'the', 'accelerate', 'of', 'the', 'car', 'make', 'amc', 'hornet', 'sportabout', '(', 'sw', ')', '?']}\""}
{"question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How much does the car accelerate that makes amc hornet sportabout (sw)?\",\n\"question_toks\": \"['How', 'much', 'does', 'the', 'car', 'accelerate', 'that', 'makes', 'amc', 'hornet', 'sportabout', '(', 'sw', ')', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT Accelerate FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId JOIN model_list T3 ON T2.Model = T3.Model JOIN car_makers T4 ON T3.Maker = T4.Maker WHERE T4.FullName = 'American Motors Corporation' AND T2.Model = 'Hornet Sportabout (sw)'\",\n  \"query_toks\": \"['SELECT', 'Accelerate', 'FROM', 'cars_data', 'T1', 'JOIN', 'car_names', 'T2', 'ON', 'T1.Id', '=', 'T2.MakeId', 'JOIN', 'model_list', 'T3', 'ON', 'T2.Model', '=', 'T3.Model', 'JOIN', 'car_makers', 'T4', 'ON', 'T3.Maker', '=', 'T4.Maker', 'WHERE', 'T4.FullName', '=', ''American Motors Corporation'', 'AND', 'T2.Model', '=', ''Hornet Sportabout (sw)''']\",\n  \"query_toks_no_value\": \"['SELECT', 'Accelerate', 'FROM', 'cars_data', 'T1', 'JOIN', 'car_names', 'T2', 'ON', 'T1.Id', '=', 'T2.MakeId', 'JOIN', 'model_list', 'T3', 'ON', 'T2.Model', '=', 'T3.Model', 'JOIN', 'car_makers', 'T4', 'ON', 'T3.Maker', '=', 'T4.Maker', 'WHERE', 'T4.FullName', '=', '', 'AND', 'T2.Model', '=', '']\",\n  \"question\": \"How much does the car accelerate that makes amc hornet sportabout (sw)?\",\n  \"question_toks\": \"['How', 'much', 'does', 'the', 'car', 'accelerate', 'that', 'makes', 'amc', 'hornet', 'sportabout', '(', 'sw', ')', '?']\"\n}"}
{"question": "How many car makers are there in france?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many car makers are there in france?\",\n\"question_toks\": \"['How', 'many', 'car', 'makers', 'are', 'there', 'in', 'france', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(*) FROM car_makers WHERE Country = 'France'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"car_makers\", \"WHERE\", \"Country\", \"=\", \"'France'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"car_makers\", \"WHERE\", \"Country\", \"=\", \"??\"],\n    \"question\": \"How many car makers are there in france?\",\n    \"question_toks\": [\"How\", \"many\", \"car\", \"makers\", \"are\", \"there\", \"in\", \"france\", \"?\"]\n}"}
{"question": "What is the number of makers of care in France?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of makers of care in France?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'makers', 'of', 'care', 'in', 'France', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France'\",\n  \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'Maker', ')', 'FROM', 'car_makers', 'WHERE', 'Country', '=', ''''Fr\\u2026\",\n  \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'Maker', ')', 'FROM', 'car_makers', 'WHERE', 'Country', '=', ''\",\n  \"question\": \"What is the number of makers of care in France?\",\n  \"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'makers', 'of', 'care', 'in', 'France', '?']\"\n}"}
{"question": "How many car models are produced in the usa?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many car models are produced in the usa?\",\n\"question_toks\": \"['How', 'many', 'car', 'models', 'are', 'produced', 'in', 'the', 'usa', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(*) FROM model_list T1 JOIN car_makers T2 ON T1.Maker=T2.Maker WHERE T2.Country='usa'\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'model_list', 'T1', 'JOIN', 'car_makers', 'T2', 'ON', 'T1', '.', 'Maker', '=', 'T2', '.', 'Maker', 'WHERE', 'T2', '.', 'Country', '=', '\\\\\\'usa\\\\\\'']\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'model_list', 'T1', 'JOIN', 'car_makers', 'T2', 'ON', 'T1', '.', 'Maker', '=', 'T2', '.', 'Maker', 'WHERE', 'T2', '.', 'Country', '=', '?']\",\n    \"question\": \"How many car models are produced in the usa?\",\n    \"question_toks\": \"['How', 'many', 'car', 'models', 'are', 'produced', 'in', 'the', 'usa', '?']\"\n}"}
{"question": "What is the count of the car models produced in the United States?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the count of the car models produced in the United States?\",\n\"question_toks\": \"['What', 'is', 'the', 'count', 'of', 'the', 'car', 'models', 'produced', 'in', 'the', 'United', 'States', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT COUNT(*) FROM (SELECT DISTINCT Model FROM car_makers AS T1 JOIN cars_data ON T1.Id = cars_data.Id WHERE T1.Country = 'United States') AS T\",\n \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', 'SELECT', 'DISTINCT', 'Model', 'FROM', 'car_makers', 'AS', 'T1', 'JOIN', 'cars_data', 'ON', 'T1', '.', 'Id', '=', 'cars_data', '.', 'Id', 'WHERE', 'T1', '.', 'Country', '=', \\\"'United States'\\\"\", ')', 'AS', 'T']\",\n \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', 'SELECT', 'DISTINCT', 'Model', 'FROM', 'car_makers', 'AS', 'T1', 'JOIN', 'cars_data', 'ON', 'T1', '.', 'Id', '=', 'cars_data', '.', 'Id', 'WHERE', 'T1', '.', 'Country', '=', \\\"'value'\\\"\", ')', 'AS', 'T']\",\n \"question\": \"What is the count of the car models produced in the United States?\",\n \"question_toks\": \"['What', 'is', 'the', 'count', 'of', 'the', 'car', 'models', 'produced', 'in', 'the', 'United', 'States', '?']\"\n}"}
{"question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the average miles per gallon(mpg) of the cars with 4 cylinders?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'miles', 'per', 'gallon', '(', 'mpg', ')', 'of', 'the', 'cars', 'with', '4', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders=4\",\n \"query_toks\": \"['SELECT', 'AVG', '(', 'cars_data', '.', 'MPG', ')', 'FROM', 'cars_data', 'WHERE', 'cars_data', '.', 'Cylinders', '=', '4']\",\n \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'cars_data', '.', 'MPG', ')', 'FROM', 'cars_data', 'WHERE', 'cars_data', '.', 'Cylinders', '=', '<value>']\",\n \"question\": \"What is the average miles per gallon(mpg) of the cars with 4 cylinders?\",\n \"question_toks\": \"['What', 'is', 'the', 'average', 'miles', 'per', 'gallon', '(', 'mpg', ')', 'of', 'the', 'cars', 'with', '4', 'cylinders', '?']\"\n}"}
{"question": "What is the average miles per gallon of all the cards with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the average miles per gallon of all the cards with 4 cylinders?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'miles', 'per', 'gallon', 'of', 'all', 'the', 'cards', 'with', '4', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT AVG(MPG) FROM cars_data T1 WHERE T1.Cylinders = 4\",\n    \"query_toks\": \"['SELECT', 'AVG', '(', 'MPG', ')', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Cylinders', '=', '4']\",\n    \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'MPG', ')', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Cylinders', '=', '<value>']\",\n    \"question\": \"What is the average miles per gallon of all the cards with 4 cylinders?\",\n    \"question_toks\": \"['What', 'is', 'the', 'average', 'miles', 'per', 'gallon', 'of', 'all', 'the', 'cards', 'with', '4', 'cylinders', '?']\"\n}"}
{"question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the smallest weight of the car produced with 8 cylinders on 1974 ?\",\n\"question_toks\": \"['What', 'is', 'the', 'smallest', 'weight', 'of', 'the', 'car', 'produced', 'with', '8', 'cylinders', 'on', '1974', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT MIN(Weight) FROM cars_data T1 WHERE T1.Year=1974 AND T1.Cylinders=8\",\n \"query_toks\": \"['SELECT', 'MIN', '(', 'Weight', ')', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1.Year', '=', '1974', 'AND', 'T1.Cylinders', '=', '8']\",\n \"query_toks_no_value\": \"['SELECT', 'MIN', '(', 'Weight', ')', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1.Year', '=', '<value>', 'AND', 'T1.Cylinders', '=', '<value>']\",\n \"question\": \"What is the smallest weight of the car produced with 8 cylinders on 1974?\",\n \"question_toks\": \"['What', 'is', 'the', 'smallest', 'weight', 'of', 'the', 'car', 'produced', 'with', '8', 'cylinders', 'on', '1974', '?']}\"\n"}
{"question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the minimum weight of the car with 8 cylinders produced in 1974 ?\",\n\"question_toks\": \"['What', 'is', 'the', 'minimum', 'weight', 'of', 'the', 'car', 'with', '8', 'cylinders', 'produced', 'in', '1974', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT MIN(Weight) FROM cars_data T1 WHERE T1.Cylinders=8 AND T1.Year=1974\",\n    \"query_toks\": \"['SELECT', 'MIN', '(', 'Weight', ')', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Cylinders', '=', '8', 'AND', 'T1', '.', 'Year', '=', '1974']\",\n    \"query_toks_no_value\": \"['SELECT', 'MIN', '(', 'Weight', ')', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Cylinders', '=', '<value>', 'AND', 'T1', '.', 'Year', '=', '<value>']\",\n    \"question\": \"What is the minimum weight of the car with 8 cylinders produced in 1974?\",\n    \"question_toks\": \"['What', 'is', 'the', 'minimum', 'weight', 'of', 'the', 'car', 'with', '8', 'cylinders', 'produced', 'in', '1974', '?']\"\n}"}
{"question": "What are all the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are all the makers and models?\",\n\"question_toks\": \"['What', 'are', 'all', 'the', 'makers', 'and', 'models', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT DISTINCT T1.Maker, T3.Model FROM car_makers T1 JOIN model_list T3 ON T1.Maker = T3.Maker JOIN car_names T2 ON T2.Model = T3.Model\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Maker\", \",\", \"T3\", \".\", \"Model\", \"FROM\", \"car_makers\", \"T1\", \"JOIN\", \"model_list\", \"T3\", \"ON\", \"T1\", \".\", \"Maker\", \"=\", \"T3\", \".\", \"Maker\", \"JOIN\", \"car_names\", \"T2\", \"ON\", \"T2\", \".\", \"Model\", \"=\", \"T3\", \".\", \"Model\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Maker\", \",\", \"T3\", \".\", \"Model\", \"FROM\", \"car_makers\", \"T1\", \"JOIN\", \"model_list\", \"T3\", \"ON\", \"T1\", \".\", \"Maker\", \"=\", \"T3\", \".\", \"Maker\", \"JOIN\", \"car_names\", \"T2\", \"ON\", \"T2\", \".\", \"Model\", \"=\", \"T3\", \".\", \"Model\"],\n  \"question\": \"What are all the makers and models?\",\n  \"question_toks\": [\"What\", \"are\", \"all\", \"the\", \"makers\", \"and\", \"models\", \"?\"]\n}"}
{"question": "What are the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the makers and models?\",\n\"question_toks\": \"['What', 'are', 'the', 'makers', 'and', 'models', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT T1.Maker, T3.Model FROM car_makers T1 JOIN model_list T3 ON T1.Id = T3.Maker;\",\n \"query_toks\": \"['SELECT', 'T1', '.', 'Maker', ',', 'T3', '.', 'Model', 'FROM', 'car_makers', 'T1', 'JOIN', 'model_list', 'T3', 'ON', 'T1', '.', 'Id', '=', 'T3', '.', 'Maker', ';']\",\n \"query_toks_no_value\": \"['SELECT', 'T1', '.', 'Maker', ',', 'T3', '.', 'Model', 'FROM', 'car_makers', 'T1', 'JOIN', 'model_list', 'T3', 'ON', 'T1', '.', 'Id', '=', 'T3', '.', 'Maker', ';']\",\n \"question\": \"What are the makers and models?\",\n \"question_toks\": \"['What', 'are', 'the', 'makers', 'and', 'models', '?']\"}"}
{"question": "What are the countries having at least one car maker? List name and id.", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the countries having at least one car maker? List name and id.\",\n\"question_toks\": \"['What', 'are', 'the', 'countries', 'having', 'at', 'least', 'one', 'car', 'maker', '?', 'List', 'name', 'and', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers) ORDER BY CountryId\",\n \"query_toks\": [\"SELECT\", \"CountryId\", \",\", \"CountryName\", \"FROM\", \"countries\", \"WHERE\", \"CountryId\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"car_makers\", \")\", \"ORDER\", \"BY\", \"CountryId\"],\n \"query_toks_no_value\": [\"SELECT\", \"CountryId\", \",\", \"CountryName\", \"FROM\", \"countries\", \"WHERE\", \"CountryId\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"car_makers\", \")\", \"ORDER\", \"BY\", \"CountryId\"],\n \"question\": \"What are the countries having at least one car maker? List name and id.\",\n \"question_toks\": [\"What\", \"are\", \"the\", \"countries\", \"having\", \"at\", \"least\", \"one\", \"car\", \"maker\", \"?\", \"List\", \"name\", \"and\", \"id\", \".\"]\n}"}
{"question": "What are the names and ids of all countries with at least one car maker?", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the names and ids of all countries with at least one car maker?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'ids', 'of', 'all', 'countries', 'with', 'at', 'least', 'one', 'car', 'maker', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryName = car_makers.Country\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'countries.CountryId', ',', 'countries.CountryName', 'FROM', 'countries', 'JOIN', 'car_makers', 'ON', 'countries.CountryName', '=', 'car_makers.Country']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'countries', '.', 'CountryId', ',', 'countries', '.', 'CountryName', 'FROM', 'countries', 'JOIN', 'car_makers', 'ON', 'countries', '.', 'CountryName', '=', 'car_makers', '.', 'Country']\",\n  \"question\": \"What are the names and ids of all countries with at least one car maker?\",\n  \"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'ids', 'of', 'all', 'countries', 'with', 'at', 'least', 'one', 'car', 'maker', '?']\"\n}"}
{"question": "What is the number of the cars with horsepower more than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of the cars with horsepower more than 150?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'the', 'cars', 'with', 'horsepower', 'more', 'than', '150', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT COUNT(*) FROM cars_data T1 WHERE T1.Horsepower > 150\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"T1\", \"WHERE\", \"T1\", \".\", \"Horsepower\", \">\", \"150\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"T1\", \"WHERE\", \"T1\", \".\", \"Horsepower\", \">\", \"?\"],\n  \"question\": \"What is the number of the cars with horsepower more than 150?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"number\", \"of\", \"the\", \"cars\", \"with\", \"horsepower\", \"more\", \"than\", \"150\", \"?\"]\n}"}
{"question": "What is the number of cars with a horsepower greater than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of cars with a horsepower greater than 150?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'cars', 'with', 'a', 'horsepower', 'greater', 'than', '150', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"car_1\",\n\"query\": \"SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150\",\n\"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"WHERE\", \"Horsepower\", \">\", \"150\"],\n\"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"WHERE\", \"Horsepower\", \">\", \"?\"],\n\"question\": \"What is the number of cars with a horsepower greater than 150?\",\n\"question_toks\": [\"What\", \"is\", \"the\", \"number\", \"of\", \"cars\", \"with\", \"a\", \"horsepower\", \"greater\", \"than\", \"150\", \"?\"]\n}"}
{"question": "What is the average weight of cars each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the average weight of cars each year?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'weight', 'of', 'cars', 'each', 'year', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT AVG(Weight) FROM cars_data GROUP BY Year;\",\n  \"query_toks\": \"['SELECT', 'AVG', '(', 'Weight', ')', 'FROM', 'cars_data', 'GROUP', 'BY', 'Year', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'AVG', '(', ')', 'FROM', 'cars_data', 'GROUP', 'BY', 'Year', ';']\",\n  \"question\": \"What is the average weight of cars each year?\",\n  \"question_toks\": \"['What', 'is', 'the', 'average', 'weight', 'of', 'cars', 'each', 'year', '?']\"\n}"}
{"question": "What is the average weight and year for each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the average weight and year for each year?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'weight', 'and', 'year', 'for', 'each', 'year', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT AVG(Weight), Year FROM cars_data GROUP BY Year\",\n    \"query_toks\": \"['SELECT', 'AVG', '(', 'Weight', ')', ',', 'Year', 'FROM', 'cars_data', 'GROUP', 'BY', 'Year']\",\n    \"query_toks_no_value\": \"['SELECT', 'AVG', '(', ')', ',', 'Year', 'FROM', 'cars_data', 'GROUP', 'BY', 'Year']\",\n    \"question\": \"What is the average weight and year for each year?\",\n    \"question_toks\": \"['What', 'is', 'the', 'average', 'weight', 'and', 'year', 'for', 'each', 'year', '?']\"\n}"}
{"question": "Which countries in europe have at least 3 car manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which countries in europe have at least 3 car manufacturers?\",\n\"question_toks\": \"['Which', 'countries', 'in', 'europe', 'have', 'at', 'least', '3', 'car', 'manufacturers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId=car_makers.Country WHERE countries.Continent='Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Maker)>=3\",\n    \"query_toks\": \"['SELECT', 'countries', '.', 'CountryName', 'FROM', 'countries', 'JOIN', 'car_makers', 'ON', 'countries', '.', 'CountryId', '=', 'car_makers', '.', 'Country', 'WHERE', 'countries', '.', 'Continent', '=', \\\"'Europe'\\\"', 'GROUP', 'BY', 'countries', '.', 'CountryName', 'HAVING', 'COUNT', '(', 'DISTINCT', 'car_makers', '.', 'Maker', ')', '>=', '3']\",\n    \"query_toks_no_value\": \"['SELECT', 'countries', '.', 'CountryName', 'FROM', 'countries', 'JOIN', 'car_makers', 'ON', 'countries', '.', 'CountryId', '=', 'car_makers', '.', 'Country', 'WHERE', 'countries', '.', 'Continent', '=', '', 'GROUP', 'BY', 'countries', '.', 'CountryName', 'HAVING', 'COUNT', '(', 'DISTINCT', 'car_makers', '.', 'Maker', ')', '>=', '']\",\n    \"question\": \"Which countries in europe have at least 3 car manufacturers?\",\n    \"question_toks\": \"['Which', 'countries', 'in', 'europe', 'have', 'at', 'least', '3', 'car', 'manufacturers', '?']\"\n}"}
{"question": "What are the names of all European countries with at least 3 manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the names of all European countries with at least 3 manufacturers?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'European', 'countries', 'with', 'at', 'least', '3', 'manufacturers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT DISTINCT countries.CountryName FROM countries JOIN (SELECT COUNT(*) as carMakers, Country FROM (SELECT DISTINCT Maker, Country FROM car_makers) GROUP BY Country) AS carMakersByCountry on carMakersByCountry.Country = countries.CountryName WHERE carMakersByCountry.carMakers >= 3 AND countries.Continent ='Europe'\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'countries.CountryName', 'FROM', 'countries', 'JOIN', '(', 'SELECT', 'COUNT', '(', '*', ')', 'as', 'carMakers', ',', 'Country', 'FROM', '(', 'SELECT', 'DISTINCT', 'Maker', ',', 'Country', 'FROM', 'car_makers', ')', 'GROUP', 'BY', 'Country', ')', 'AS', 'carMakersByCountry', 'on', 'carMakersByCountry.Country', '=', 'countries.CountryName', 'WHERE', 'carMakersByCountry.carMakers', '>=', '3', 'AND', 'countries.Continent', '=', '\\\\\\\"Europe\\\\\\\"'\", \n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'countries.CountryName', 'FROM', 'countries', 'JOIN', '(', 'SELECT', 'COUNT', '(', '*', ')', 'as', 'carMakers', ',', 'Country', 'FROM', '(', 'SELECT', 'DISTINCT', 'Maker', ',', 'Country', 'FROM', 'car_makers', ')', 'GROUP', 'BY', 'Country', ')', 'AS', 'carMakersByCountry', 'on', 'carMakersByCountry.Country', '=', 'countries.CountryName', 'WHERE', 'carMakersByCountry.carMakers', '>=', '3', 'AND', 'countries.Continent', '='\",\n \"question\": \"What are the names of all European countries with at least 3 manufacturers?\",\n \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'European', 'countries', 'with', 'at', 'least', '3', 'manufacturers', '?']\"}"}
{"question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the maximum horsepower and the make of the car models with 3 cylinders?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'horsepower', 'and', 'the', 'make', 'of', 'the', 'car', 'models', 'with', '3', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT MAX(Horsepower), Maker FROM cars_data T1, model_list T2 WHERE T1.Cylinders=3 AND T1.Id=T2.ModelId GROUP BY Maker\",\n \"query_toks\": \"['SELECT', 'MAX', '(', 'Horsepower', ')', ',', 'Maker', 'FROM', 'cars_data', 'T1', ',', 'model_list', 'T2', 'WHERE', 'T1', '.', 'Cylinders', '=', '3', 'AND', 'T1', '.', 'Id', '=', 'T2', '.', 'ModelId', 'GROUP', 'BY', 'Maker']\",\n \"query_toks_no_value\": \"['SELECT', 'MAX', '(', ')', ',', 'Maker', 'FROM', 'cars_data', 'T1', ',', 'model_list', 'T2', 'WHERE', 'T1', '.', 'Cylinders', '=', '3', 'AND', 'T1', '.', 'Id', '=', 'T2', '.', 'ModelId', 'GROUP', 'BY', 'Maker']\",\n \"question\": \"What is the maximum horsepower and the make of the car models with 3 cylinders?\",\n \"question_toks\": \"['What', 'is', 'the', 'maximum', 'horsepower', 'and', 'the', 'make', 'of', 'the', 'car', 'models', 'with', '3', 'cylinders', '?']\"\n}"}
{"question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the largest amount of horsepower for the models with 3 cylinders and what make is it?\",\n\"question_toks\": \"['What', 'is', 'the', 'largest', 'amount', 'of', 'horsepower', 'for', 'the', 'models', 'with', '3', 'cylinders', 'and', 'what', 'make', 'is', 'it', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT MAX(Horsepower), Maker FROM cars_data T1 JOIN model_list T2 ON T1.Id=T2.ModelId WHERE T1.Cylinders=3 GROUP BY Maker\",\n    \"query_toks\": \"['SELECT', 'MAX', '(', 'Horsepower', ')', ',', 'Maker', 'FROM', 'cars_data', 'T1', 'JOIN', 'model_list', 'T2', 'ON', 'T1', '.', 'Id', '=', 'T2', '.', 'ModelId', 'WHERE', 'T1', '.', 'Cylinders', '=', '3', 'GROUP', 'BY', 'Maker']\",\n    \"query_toks_no_value\": \"['SELECT', 'MAX', '(', ')', ',', 'Maker', 'FROM', 'cars_data', 'T1', 'JOIN', 'model_list', 'T2', 'ON', 'T1', '.', 'Id', '=', 'T2', '.', 'ModelId', 'WHERE', 'T1', '.', 'Cylinders', '=', '3', 'GROUP', 'BY', 'Maker']\",\n    \"question\": \"What is the largest amount of horsepower for the models with 3 cylinders and what make is it?\",\n    \"question_toks\": \"['What', 'is', 'the', 'largest', 'amount', 'of', 'horsepower', 'for', 'the', 'models', 'with', '3', 'cylinders', 'and', 'what', 'make', 'is', 'it', '?']\"\n}"}
{"question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.\",\n\"question_toks\": \"['Which', 'model', 'saves', 'the', 'most', 'gasoline', '?', 'That', 'is', 'to', 'say', ',', 'have', 'the', 'maximum', 'miles', 'per', 'gallon', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT model_list.Model FROM model_list INNER JOIN cars_data ON model_list.ModelId=cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'model_list', '.', 'Model', 'FROM', 'model_list', 'INNER', 'JOIN', 'cars_data', 'ON', 'model_list', '.', 'ModelId', '=', 'cars_data', '.', 'Id', 'ORDER', 'BY', 'cars_data', '.', 'MPG', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'model_list', '.', 'Model', 'FROM', 'model_list', 'INNER', 'JOIN', 'cars_data', 'ON', 'model_list', '.', 'ModelId', '=', 'cars_data', '.', 'Id', 'ORDER', 'BY', 'cars_data', '.', 'MPG', 'DESC', 'LIMIT', '1']\",\n    \"question\": \"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.\",\n    \"question_toks\": \"['Which', 'model', 'saves', 'the', 'most', 'gasoline', '?', 'That', 'is', 'to', 'say', ',', 'have', 'the', 'maximum', 'miles', 'per', 'gallon', '.']\"\n}"}
{"question": "What is the car model with the highest mpg ?", "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the car model with the highest mpg ?\",\n\"question_toks\": \"['What', 'is', 'the', 'car', 'model', 'with', 'the', 'highest', 'mpg', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT TOP 1 model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId ORDER BY cars_data.MPG DESC\",\n  \"query_toks\": [\n    \"SELECT\",\n    \"TOP\",\n    \"1\",\n    \"model_list.Model\",\n    \"FROM\",\n    \"cars_data\",\n    \"JOIN\",\n    \"model_list\",\n    \"ON\",\n    \"cars_data.Id\",\n    \"=\",\n    \"model_list.ModelId\",\n    \"ORDER\",\n    \"BY\",\n    \"cars_data.MPG\",\n    \"DESC\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\",\n    \"TOP\",\n    \"1\",\n    \"model_list.Model\",\n    \"FROM\",\n    \"cars_data\",\n    \"JOIN\",\n    \"model_list\",\n    \"ON\",\n    \"cars_data.Id\",\n    \"=\",\n    \"model_list.ModelId\",\n    \"ORDER\",\n    \"BY\",\n    \"cars_data.\",\n    \"MPG\",\n    \"DESC\"\n  ],\n  \"question\": \"What is the car model with the highest mpg ?\",\n  \"question_toks\": [\n    \"What\",\n    \"is\",\n    \"the\",\n    \"car\",\n    \"model\",\n    \"with\",\n    \"the\",\n    \"highest\",\n    \"mpg\",\n    \"?\"\n  ]\n}"}
{"question": "What is the average horsepower of the cars before 1980?", "sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the average horsepower of the cars before 1980?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'horsepower', 'of', 'the', 'cars', 'before', '1980', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980\",\n    \"query_toks\": \"['SELECT', 'AVG', '(', 'Horsepower', ')', 'FROM', 'cars_data', 'WHERE', 'Year', '<', '1980']\",\n    \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'Horsepower', ')', 'FROM', 'cars_data', 'WHERE', 'Year', '<', '<value>']\",\n    \"question\": \"What is the average horsepower of the cars before 1980?\",\n    \"question_toks\": \"['What', 'is', 'the', 'average', 'horsepower', 'of', 'the', 'cars', 'before', '1980', '?']\"\n}"}
{"question": "What is the average horsepower for all cars produced before 1980 ?", "sql": "select avg(horsepower) from cars_data where year  <  1980;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the average horsepower for all cars produced before 1980 ?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'horsepower', 'for', 'all', 'cars', 'produced', 'before', '1980', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980\",\n    \"query_toks\": \"['SELECT', 'AVG', '(', 'Horsepower', ')', 'FROM', 'cars_data', 'WHERE', 'Year', '<', '1980']\",\n    \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'Horsepower', ')', 'FROM', 'cars_data', 'WHERE', 'Year', '<']\",\n    \"question\": \"What is the average horsepower for all cars produced before 1980?\",\n    \"question_toks\": \"['What', 'is', 'the', 'average', 'horsepower', 'for', 'all', 'cars', 'produced', 'before', '1980', '?']\"\n}"}
{"question": "What is the average edispl of the cars of model volvo?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the average edispl of the cars of model volvo?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'edispl', 'of', 'the', 'cars', 'of', 'model', 'volvo', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT AVG(Edispl) FROM model_list T1 JOIN car_data T2 ON T1.ModelId = T2.Id WHERE T1.Maker = 'volvo'\",\n  \"query_toks\": \"['SELECT', 'AVG', '(', 'Edispl', ')', 'FROM', 'model_list', 'T1', 'JOIN', 'car_data', 'T2', 'ON', 'T1.ModelId', '=', 'T2.Id', 'WHERE', 'T1.Maker', '=', \\\"'volvo'\\\"\",\n  \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'Edispl', ')', 'FROM', 'model_list', 'T1', 'JOIN', 'car_data', 'T2', 'ON', 'T1.ModelId', '=', 'T2.Id', 'WHERE', 'T1.Maker', '=', \\\"'VALUE'\\\" ]\",\n  \"question\": \"What is the average edispl of the cars of model volvo?\",\n  \"question_toks\": \"['What', 'is', 'the', 'average', 'edispl', 'of', 'the', 'cars', 'of', 'model', 'volvo', '?']\"\n}"}
{"question": "What is the average edispl for all volvos?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the average edispl for all volvos?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'edispl', 'for', 'all', 'volvos', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT AVG(Edispl) FROM cars_data T1 JOIN car_makers T2 ON T1.Id=T2.Id JOIN model_list T3 ON T2.FullName=T3.Maker JOIN car_names T4 ON T3.Model=T4.Model WHERE T4.MakeId=8\",\n    \"query_toks\": \"['SELECT', 'AVG', '(', 'Edispl', ')', 'FROM', 'cars_data', 'T1', 'JOIN', 'car_makers', 'T2', 'ON', 'T1.Id=T2.Id', 'JOIN', 'model_list', 'T3', 'ON', 'T2.FullName=T3.Maker', 'JOIN', 'car_names', 'T4', 'ON', 'T3.Model=T4.Model', 'WHERE', 'T4.MakeId=8']\",\n    \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'Edispl', ')', 'FROM', 'cars_data', 'T1', 'JOIN', 'car_makers', 'T2', 'ON', 'T1.Id=T2.Id', 'JOIN', 'model_list', 'T3', 'ON', 'T2.FullName=T3.Maker', 'JOIN', 'car_names', 'T4', 'ON', 'T3.Model=T4.Model', 'WHERE', 'T4.', 'MakeId','=']\",\n    \"question\": \"What is the average edispl for all volvos?\",\n    \"question_toks\": \"['What', 'is', 'the', 'average', 'edispl', 'for', 'all', 'volvos', '?']\"\n}"}
{"question": "What is the maximum accelerate for different number of cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the maximum accelerate for different number of cylinders?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'accelerate', 'for', 'different', 'number', 'of', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders\",\n  \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"Accelerate\", \")\", \",\", \"Cylinders\", \"FROM\", \"cars_data\", \"GROUP\", \"BY\", \"Cylinders\"],\n  \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"Accelerate\", \",\", \"Cylinders\", \"FROM\", \"cars_data\", \"GROUP\", \"BY\", \"Cylinders\"],\n  \"question\": \"What is the maximum accelerate for different number of cylinders?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"maximum\", \"accelerate\", \"for\", \"different\", \"number\", \"of\", \"cylinders\", \"?\"]\n}"}
{"question": "What is the maximum accelerate for all the different cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the maximum accelerate for all the different cylinders?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'accelerate', 'for', 'all', 'the', 'different', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n\"query\": \"SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders\",\n\"query_toks\": \"['SELECT', 'MAX', '(', 'Accelerate', ')', 'FROM', 'cars_data', 'GROUP', 'BY', 'Cylinders']\",\n\"query_toks_no_value\": \"['SELECT', 'MAX', '(', ')', 'FROM', 'cars_data', 'GROUP', 'BY', 'Cylinders']\",\n\"question\": \"What is the maximum accelerate for all the different cylinders?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'accelerate', 'for', 'all', 'the', 'different', 'cylinders', '?']}\"\n"}
{"question": "Which model has the most version(make) of cars?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which model has the most version(make) of cars?\",\n\"question_toks\": \"['Which', 'model', 'has', 'the', 'most', 'version', '(', 'make', ')', 'of', 'cars', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT model_list.Model, COUNT(car_names.MakeId) AS 'NumOfCars' FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY NumOfCars DESC LIMIT 1\",\n    \"query_toks\": [\"SELECT\", \"model_list\", \".\", \"Model\", \",\", \"COUNT\", \"(\", \"car_names\", \".\", \"MakeId\", \")\", \"AS\", \"'NumOfCars'\", \"FROM\", \"model_list\", \"JOIN\", \"car_names\", \"ON\", \"model_list\", \".\", \"Model\", \"=\", \"car_names\", \".\", \"Model\", \"GROUP\", \"BY\", \"model_list\", \".\", \"Model\", \"ORDER\", \"BY\", \"NumOfCars\", \"DESC\", \"LIMIT\", \"1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"model_list\", \".\", \"Model\", \",\", \"COUNT\", \"(\", \"car_names\", \".\", \"MakeId\", \")\", \"AS\", \"''\", \"FROM\", \"model_list\", \"JOIN\", \"car_names\", \"ON\", \"model_list\", \".\", \"Model\", \"=\", \"car_names\", \".\", \"Model\", \"GROUP\", \"BY\", \"model_list\", \".\", \"Model\", \"ORDER\", \"BY\", \"\", \"DESC\", \"LIMIT\", \"1\"],\n    \"question\": \"Which model has the most version(make) of cars?\",\n    \"question_toks\": [\"Which\", \"model\", \"has\", \"the\", \"most\", \"version\", \"(\", \"make\", \")\", \"of\", \"cars\", \"?\"]\n}"}
{"question": "What model has the most different versions?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What model has the most different versions?\",\n\"question_toks\": \"['What', 'model', 'has', 'the', 'most', 'different', 'versions', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT Maker, Model \\nFROM model_list AS T1 \\nJOIN (SELECT Make AS make, COUNT(DISTINCT Model) AS cnt FROM car_names GROUP BY Make) AS T2 \\nON T1.Maker = T2.make \\nWHERE T1.Model IN (SELECT Model FROM car_names WHERE Make = T2.make GROUP BY Model HAVING COUNT(Model) = MAX(cnt))\",\n  \"query_toks\": \"['SELECT', 'Maker', ',', 'Model', 'FROM', 'model_list', 'AS', 'T1', 'JOIN', '(', 'SELECT', 'Make', 'AS', 'make', ',', 'COUNT', '(', 'DISTINCT', 'Model', ')', 'AS', 'cnt', 'FROM', 'car_names', 'GROUP', 'BY', 'Make', ')', 'AS', 'T2', 'ON', 'T1', '.', 'Maker', '=', 'T2', '.', 'make', 'WHERE', 'T1', '.', 'Model', 'IN', '(', 'SELECT', 'Model', 'FROM', 'car_names', 'WHERE', 'Make', '=', 'T2', '.', 'make', 'GROUP', 'BY', 'Model', 'HAVING', 'COUNT', '(', 'Model', ')', '=', 'MAX', '(', 'cnt', ')', ')']\",\n  \"query_toks_no_value\": \"['SELECT', 'Maker', ',', 'Model', 'FROM', 'model_list', 'AS', 'T1', 'JOIN', '(', 'SELECT', 'Make', 'AS', 'make', ',', 'COUNT', '(', 'DISTINCT', 'Model', ')', 'AS', 'cnt', 'FROM', 'car_names', 'GROUP', 'BY', 'Make', ')', 'AS', 'T2', 'ON', 'T1', '.', 'Maker', '=', 'T2', '.', 'make', 'WHERE', 'T1', '.', 'Model', 'IN', '(', 'SELECT', 'Model', 'FROM', 'car_names', 'WHERE', 'Make', '=', 'T2', '.', 'make', 'GROUP', 'BY', 'Model', 'HAVING', 'COUNT', '(', 'Model', ')', '=', 'MAX', '(', 'cnt', ')', ')']\",\n  \"question\": \"What model has the most different versions?\",\n  \"question_toks\": \"['What', 'model', 'has', 'the', 'most', 'different', 'versions', '?']\"\n}"}
{"question": "How many cars have more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many cars have more than 4 cylinders?\",\n\"question_toks\": \"['How', 'many', 'cars', 'have', 'more', 'than', '4', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"car_1\",\n\"query\": \"SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'cars_data', 'WHERE', 'Cylinders', '>', '4']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'cars_data', 'WHERE', 'Cylinders', '>', '<value>']\",\n\"question\": \"How many cars have more than 4 cylinders?\",\n\"question_toks\": \"['How', 'many', 'cars', 'have', 'more', 'than', '4', 'cylinders', '?']\"\n}"}
{"question": "What is the number of cars with more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of cars with more than 4 cylinders?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'cars', 'with', 'more', 'than', '4', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4\",\n \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'cars_data', 'WHERE', 'Cylinders', '>', '4']\",\n \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'cars_data', 'WHERE', 'Cylinders', '>', '?']\",\n \"question\": \"What is the number of cars with more than 4 cylinders?\",\n \"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'cars', 'with', 'more', 'than', '4', 'cylinders', '?']\"\n}"}
{"question": "how many cars were produced in 1980?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"how many cars were produced in 1980?\",\n\"question_toks\": \"['how', 'many', 'cars', 'were', 'produced', 'in', '1980', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(*) FROM cars_data WHERE Year='1980'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"WHERE\", \"Year\", \"=\", \"'1980'\", \"\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"WHERE\", \"Year\", \"=\"],\n    \"question\": \"how many cars were produced in 1980?\",\n    \"question_toks\": [\"how\", \"many\", \"cars\", \"were\", \"produced\", \"in\", \"1980\", \"?\"]\n}"}
{"question": "In 1980, how many cars were made?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"In 1980, how many cars were made?\",\n\"question_toks\": \"['In', '1980', ',', 'how', 'many', 'cars', 'were', 'made', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT COUNT(*) FROM cars_data WHERE Year=1980;\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"WHERE\", \"Year\", \"=\", \"1980\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"WHERE\", \"Year\", \"=\", \"<VALUE>\", \";\"],\n  \"question\": \"In 1980, how many cars were made?\",\n  \"question_toks\": [\"In\", \"1980\", \",\", \"how\", \"many\", \"cars\", \"were\", \"made\", \"?\"]\n}"}
{"question": "How many car models were produced by the maker with full name American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many car models were produced by the maker with full name American Motor Company?\",\n\"question_toks\": \"['How', 'many', 'car', 'models', 'were', 'produced', 'by', 'the', 'maker', 'with', 'full', 'name', 'American', 'Motor', 'Company', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT COUNT(*) FROM car_makers T1 JOIN model_list T2 ON T1.FullName = 'American Motor Company' AND T1.Id = T2.Maker;\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"car_makers\", \"T1\", \"JOIN\", \"model_list\", \"T2\", \"ON\", \"T1\", \".\", \"FullName\", \"=\", \"'American\", \"Motor\", \"Company'\", \"AND\", \"T1\", \".\", \"Id\", \"=\", \"T2\", \".\", \"Maker\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"car_makers\", \"T1\", \"JOIN\", \"model_list\", \"T2\", \"ON\", \"T1\", \".\", \"FullName\", \"=\", \"?\", \"AND\", \"T1\", \".\", \"Id\", \"=\", \"T2\", \".\", \"Maker\", \";\"],\n  \"question\": \"How many car models were produced by the maker with full name American Motor Company?\",\n  \"question_toks\": [\"How\", \"many\", \"car\", \"models\", \"were\", \"produced\", \"by\", \"the\", \"maker\", \"with\", \"full\", \"name\", \"American\", \"Motor\", \"Company\", \"?\"]\n}"}
{"question": "What is the number of car models created by the car maker American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of car models created by the car maker American Motor Company?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'car', 'models', 'created', 'by', 'the', 'car', 'maker', 'American', 'Motor', 'Company', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(DISTINCT model_list.ModelId) FROM car_makers AS cm JOIN model_list ON cm.Maker = model_list.Maker WHERE cm.Maker = 'American Motor Company'\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'model_list.ModelId', ')', 'FROM', 'car_makers', 'AS', 'cm', 'JOIN', 'model_list', 'ON', 'cm.Maker', '=', 'model_list.Maker', 'WHERE', 'cm.Maker', '=', \\\"'American Motor Company'\\\" ]\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'model_list', '.', 'ModelId', ')', 'FROM', 'car_makers', 'AS', 'cm', 'JOIN', 'model_list', 'ON', 'cm', '.', 'Maker', '=', 'model_list', '.', 'Maker', 'WHERE', 'cm', '.', 'Maker', '=', \\\"'American Motor Company'\\\" ]\",\n    \"question\": \"What is the number of car models created by the car maker American Motor Company?\",\n    \"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'car', 'models', 'created', 'by', 'the', 'car', 'maker', 'American', 'Motor', 'Company', '?']\"\n}"}
{"question": "Which makers designed more than 3 car models? List full name and the id.", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which makers designed more than 3 car models? List full name and the id.\",\n\"question_toks\": \"['Which', 'makers', 'designed', 'more', 'than', '3', 'car', 'models', '?', 'List', 'full', 'name', 'and', 'the', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list T1 on car_makers.Maker=T1.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(T1.ModelId) > 3\",\n    \"query_toks\": \"['SELECT', 'car_makers', '.', 'FullName', ',', 'car_makers', '.', 'Id', 'FROM', 'car_makers', 'JOIN', 'model_list', 'T1', 'on', 'car_makers', '.', 'Maker', '=', 'T1', '.', 'Maker', 'GROUP', 'BY', 'car_makers', '.', 'FullName', ',', 'car_makers', '.', 'Id', 'HAVING', 'COUNT', '(', 'T1', '.', 'ModelId', ')', '>', '3']\",\n    \"query_toks_no_value\": \"['SELECT', 'car_makers', '.', 'FullName', ',', 'car_makers', '.', 'Id', 'FROM', 'car_makers', 'JOIN', 'model_list', 'T1', 'on', 'car_makers', '.', 'Maker', '=', 'T1', '.', 'Maker', 'GROUP', 'BY', 'car_makers', '.', 'FullName', ',', 'car_makers', '.', 'Id', 'HAVING', 'COUNT', '(', 'T1', '.', 'ModelId', ')', '>', '?']\",\n    \"question\": \"Which makers designed more than 3 car models? List full name and the id.\",\n    \"question_toks\": \"['Which', 'makers', 'designed', 'more', 'than', '3', 'car', 'models', '?', 'List', 'full', 'name', 'and', 'the', 'id', '.']\"\n}"}
{"question": "What are the names and ids of all makers with more than 3 models?", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the names and ids of all makers with more than 3 models?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'ids', 'of', 'all', 'makers', 'with', 'more', 'than', '3', 'models', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT Maker, Id FROM car_makers T1 WHERE (SELECT COUNT(*) FROM model_list T2 WHERE T1.Id = T2.Id) > 3\",\n    \"query_toks\": \"['SELECT', 'Maker', ',', 'Id', 'FROM', 'car_makers', 'T1', 'WHERE', '(', 'SELECT', 'COUNT', '(', '*', ')', 'FROM', 'model_list', 'T2', 'WHERE', 'T1', '.', 'Id', '=', 'T2', '.', 'Id', ')', '>', '3']\",\n    \"query_toks_no_value\": \"['SELECT', 'Maker', ',', 'Id', 'FROM', 'car_makers', 'T1', 'WHERE', '(', 'SELECT', 'COUNT', '(', '*', ')', 'FROM', 'model_list', 'T2', 'WHERE', 'T1', '.', 'Id', '=', 'T2', '.', 'Id', ')', '>', '?']\",\n    \"question\": \"What are the names and ids of all makers with more than 3 models?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'ids', 'of', 'all', 'makers', 'with', 'more', 'than', '3', 'models', '?']\"\n}"}
{"question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?\",\n\"question_toks\": \"['Which', 'distinctive', 'models', 'are', 'produced', 'by', 'maker', 'with', 'the', 'full', 'name', 'General', 'Motors', 'or', 'weighing', 'more', 'than', '3500', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT DISTINCT Model\\nFROM car_makers as T1, model_list as T2, cars_data as T3\\nWHERE (T1.FullName = 'General Motors' OR T3.Weight > 3500) AND T1.Maker = T2.Maker AND T2.ModelId = T3.Id;\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Model', 'FROM', 'car_makers', 'as', 'T1', ',', 'model_list', 'as', 'T2', ',', 'cars_data', 'as', 'T3', 'WHERE', '(', 'T1', '.', 'FullName', '=',\", \"'General', 'Motors', \"'\", 'OR', 'T3', '.', 'Weight', '>', '3500', ')', 'AND', 'T1', '.', 'Maker', '=', 'T2', '.', 'Maker', 'AND', 'T2', '.', 'ModelId', '=', 'T3', '.', 'Id', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Model', 'FROM', 'car_makers', 'as', 'T1', ',', 'model_list', 'as', 'T2', ',', 'cars_data', 'as', 'T3', 'WHERE', '(', 'T1', '.', 'FullName', '=',\", \"'General', 'Motors', \"'\", 'OR', 'T3', '.', 'Weight', '>', '3500', ')', 'AND', 'T1', '.', 'Maker', '=', 'T2', '.', 'Maker', 'AND', 'T2', '.', 'ModelId', '=', 'T3', '.', 'Id', ';']\",\n    \"question\": \"Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?\",\n    \"question_toks\": \"['Which', 'distinctive', 'models', 'are', 'produced', 'by', 'maker', 'with', 'the', 'full', 'name', 'General', 'Motors', 'or', 'weighing', 'more', 'than', '3500', '?']\"\n}"}
{"question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the different models created by either the car maker General Motors or weighed more than 3500?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'models', 'created', 'by', 'either', 'the', 'car', 'maker', 'General', 'Motors', 'or', 'weighed', 'more', 'than', '3500', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT DISTINCT T4.Model FROM car_makers T2, model_list T4, cars_data T6 WHERE ((T2.Maker = 'General Motors' AND T4.Maker = T2.Maker) OR (T6.Weight > 3500 AND T4.ModelId = T6.Id))\",\n \"query_toks\": [\"SELECT\", \"DISTINCT\", \"T4\", \".\", \"Model\", \"FROM\", \"car_makers\", \"T2\", \",\", \"model_list\", \"T4\", \",\", \"cars_data\", \"T6\", \"WHERE\", \"(\", \"(\", \"T2\", \".\", \"Maker\", \"=\", \"'General\", \"Motors'\", \"AND\", \"T4\", \".\", \"Maker\", \"=\", \"T2\", \".\", \"Maker\", \")\", \"OR\", \"(\", \"T6\", \".\", \"Weight\", \">\", \"3500\", \"AND\", \"T4\", \".\", \"ModelId\", \"=\", \"T6\", \".\", \"Id\", \")\", \")\"],\n \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"T4\", \".\", \"Model\", \"FROM\", \"car_makers\", \"T2\", \",\", \"model_list\", \"T4\", \",\", \"cars_data\", \"T6\", \"WHERE\", \"(\", \"(\", \"T2\", \".\", \"Maker\", \"=\", \"'\", \"_\", \"'\", \"AND\", \"T4\", \".\", \"Maker\", \"=\", \"T2\", \".\", \"Maker\", \")\", \"OR\", \"(\", \"T6\", \".\", \"Weight\", \">\", \"_\", \"AND\", \"T4\", \".\", \"ModelId\", \"=\", \"T6\", \".\", \"Id\", \")\", \")\"],\n \"question\": \"What are the different models created by either the car maker General Motors or weighed more than 3500?\",\n \"question_toks\": [\"What\", \"are\", \"the\", \"different\", \"models\", \"created\", \"by\", \"either\", \"the\", \"car\", \"maker\", \"General\", \"Motors\", \"or\", \"weighed\", \"more\", \"than\", \"3500\", \"?\"]\n }"}
{"question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"In which years cars were produced weighing no less than 3000 and no more than 4000 ?\",\n\"question_toks\": \"['In', 'which', 'years', 'cars', 'were', 'produced', 'weighing', 'no', 'less', 'than', '3000', 'and', 'no', 'more', 'than', '4000', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Year', 'FROM', 'cars_data', 'WHERE', 'Weight', '>=', '3000', 'AND', 'Weight', '<=', '4000']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Year', 'FROM', 'cars_data', 'WHERE', 'Weight', '>=', '<number>', 'AND', 'Weight', '<=', '<number>']\",\n    \"question\": \"In which years cars were produced weighing no less than 3000 and no more than 4000?\",\n    \"question_toks\": \"['In', 'which', 'years', 'cars', 'were', 'produced', 'weighing', 'no', 'less', 'than', '3000', 'and', 'no', 'more', 'than', '4000', '?']\"\n}"}
{"question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'years', 'in', 'which', 'there', 'were', 'cars', 'produced', 'that', 'weighed', 'less', 'than', '4000', 'and', 'also', 'cars', 'that', 'weighted', 'more', 'than', '3000', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 AND Id IN (SELECT Id FROM cars_data WHERE Weight > 3000)\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'Year', 'FROM', 'cars_data', 'WHERE', 'Weight', '<', '4000', 'AND', 'Id', 'IN', '(', 'SELECT', 'Id', 'FROM', 'cars_data', 'WHERE', 'Weight', '>', '3000', ')']\",\n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Year', 'FROM', 'cars_data', 'WHERE', 'Weight', '<', '?', 'AND', 'Id', 'IN', '(', 'SELECT', 'Id', 'FROM', 'cars_data', 'WHERE', 'Weight', '>', '?', ')']\",\n \"question\": \"What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?\",\n \"question_toks\": \"['What', 'are', 'the', 'different', 'years', 'in', 'which', 'there', 'were', 'cars', 'produced', 'that', 'weighed', 'less', 'than', '4000', 'and', 'also', 'cars', 'that', 'weighted', 'more', 'than', '3000', '?']\"\n}"}
{"question": "What is the horsepower of the car with the largest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the horsepower of the car with the largest accelerate?\",\n\"question_toks\": \"['What', 'is', 'the', 'horsepower', 'of', 'the', 'car', 'with', 'the', 'largest', 'accelerate', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'Horsepower', 'FROM', 'cars_data', 'ORDER', 'BY', 'Accelerate', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Horsepower', 'FROM', 'cars_data', 'ORDER', 'BY', 'Accelerate', 'DESC', 'LIMIT', '1']\",\n \"question\": \"What is the horsepower of the car with the largest accelerate?\",\n \"question_toks\": \"['What', 'is', 'the', 'horsepower', 'of', 'the', 'car', 'with', 'the', 'largest', 'accelerate', '?']}\"\n"}
{"question": "What is the horsepower of the car with the greatest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the horsepower of the car with the greatest accelerate?\",\n\"question_toks\": \"['What', 'is', 'the', 'horsepower', 'of', 'the', 'car', 'with', 'the', 'greatest', 'accelerate', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"Horsepower\", \"FROM\", \"cars_data\", \"ORDER\", \"BY\", \"Accelerate\", \"DESC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Horsepower\", \"FROM\", \"cars_data\", \"ORDER\", \"BY\", \"Accelerate\", \"DESC\", \"LIMIT\"],\n  \"question\": \"What is the horsepower of the car with the greatest accelerate?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"horsepower\", \"of\", \"the\", \"car\", \"with\", \"the\", \"greatest\", \"accelerate\", \"?\"]\n}"}
{"question": "For model volvo, how many cylinders does the car with the least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"For model volvo, how many cylinders does the car with the least accelerate have?\",\n\"question_toks\": \"['For', 'model', 'volvo', ',', 'how', 'many', 'cylinders', 'does', 'the', 'car', 'with', 'the', 'least', 'accelerate', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT MIN(Cylinders) FROM (SELECT Cylinders, Accelerate FROM model_list JOIN cars_data T1 ON model_list.MakeId=T1.Id WHERE Model='volvo' ORDER BY Accelerate ASC LIMIT 1) as T2\",\n \"query_toks\": \"['SELECT', 'MIN', '(', 'Cylinders', ')', 'FROM', '(', 'SELECT', 'Cylinders', ',', 'Accelerate', 'FROM', 'model_list', 'JOIN', 'cars_data', 'T1', 'ON', 'model_list.MakeId=T1.Id', 'WHERE', 'Model=', '\\\"volvo\\\"', 'ORDER', 'BY', 'Accelerate', 'ASC', 'LIMIT', '1', ')', 'as', 'T2']\",\n \"query_toks_no_value\": \"['SELECT', 'MIN', '(', 'Cylinders', ')', 'FROM', '(', 'SELECT', 'Cylinders', ',', 'Accelerate', 'FROM', 'model_list', 'JOIN', 'cars_data', 'T1', 'ON', 'model_list.MakeId=T1.Id', 'WHERE', 'Model=', '\\\"__VALUE__\\\"', 'ORDER', 'BY', 'Accelerate', 'ASC', 'LIMIT', '1', ')', 'AS', 'T2']\",\n \"question\": \"For model volvo, how many cylinders does the car with the least accelerate have?\",\n \"question_toks\": \"['For', 'model', 'volvo', ',', 'how', 'many', 'cylinders', 'does', 'the', 'car', 'with', 'the', 'least', 'accelerate', 'have', '?']\"\n }"}
{"question": "For a volvo model, how many cylinders does the version with least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"For a volvo model, how many cylinders does the version with least accelerate have?\",\n\"question_toks\": \"['For', 'a', 'volvo', 'model', ',', 'how', 'many', 'cylinders', 'does', 'the', 'version', 'with', 'least', 'accelerate', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT MIN(Cylinders) FROM (SELECT Cylinders, Accelerate FROM model_list T1 JOIN cars_data T2 ON T1.ModelId=T2.Id JOIN car_names T3 ON T1.Maker=T3.Model AND T3.Make='volvo') T4\",\n    \"query_toks\": \"['SELECT', 'MIN', '(', 'Cylinders', ')', 'FROM', '(', 'SELECT', 'Cylinders', ',', 'Accelerate', 'FROM', 'model_list', 'T1', 'JOIN', 'cars_data', 'T2', 'ON', 'T1', '.', 'ModelId', '=', 'T2', '.', 'Id', 'JOIN', 'car_names', 'T3', 'ON', 'T1', '.', 'Maker', '=', 'T3', '.', 'Model', 'AND', 'T3', '.', 'Make', '=', \\\"'volvo'\\\"\", ')', 'T4']\",\n    \"query_toks_no_value\": \"['SELECT', 'MIN', '(', 'Cylinders', ')', 'FROM', '(', 'SELECT', 'Cylinders', ',', 'Accelerate', 'FROM', 'model_list', 'T1', 'JOIN', 'cars_data', 'T2', 'ON', 'T1', '.', 'ModelId', '=', 'T2', '.', 'Id', 'JOIN', 'car_names', 'T3', 'ON', 'T1', '.', 'Maker', '=', 'T3', '.', 'Model', 'AND', 'T3', '.', 'Make', '=', '', ')', 'T4']\",\n    \"question\": \"For a volvo model, how many cylinders does the version with least accelerate have?\",\n    \"question_toks\": \"['For', 'a', 'volvo', 'model', ',', 'how', 'many', 'cylinders', 'does', 'the', 'version', 'with', 'least', 'accelerate', 'have', '?']\"\n}"}
{"question": "How many cars have a larger accelerate than the car with the largest horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many cars have a larger accelerate than the car with the largest horsepower?\",\n\"question_toks\": \"['How', 'many', 'cars', 'have', 'a', 'larger', 'accelerate', 'than', 'the', 'car', 'with', 'the', 'largest', 'horsepower', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(*) FROM cars_data c1 WHERE c1.Accelerate > (SELECT MAX(Horsepower) FROM cars_data)\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'cars_data', 'c1', 'WHERE', 'c1', '.', 'Accelerate', '>', '(', 'SELECT', 'MAX', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'cars_data', 'c1', 'WHERE', 'c1', '.', 'Accelerate', '>', '(', 'SELECT', 'MAX', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')']\",\n    \"question\": \"How many cars have a larger accelerate than the car with the largest horsepower?\",\n    \"question_toks\": \"['How', 'many', 'cars', 'have', 'a', 'larger', 'accelerate', 'than', 'the', 'car', 'with', 'the', 'largest', 'horsepower', '?']\"\n}"}
{"question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of cars with a greater accelerate than the one with the most horsepower?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'cars', 'with', 'a', 'greater', 'accelerate', 'than', 'the', 'one', 'with', 'the', 'most', 'horsepower', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT COUNT(*) FROM cars_data T1 WHERE T1.Accelerate > (SELECT MAX(Horsepower) FROM cars_data)\",\n \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"T1\", \"WHERE\", \"T1\", \".\", \"Accelerate\", \">\", \"(\", \"SELECT\", \"MAX\", \"(\", \"Horsepower\", \")\", \"FROM\", \"cars_data\", \")\"],\n \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"T1\", \"WHERE\", \"T1\", \".\", \"Accelerate\", \">\", \"(\", \"SELECT\", \"MAX\", \"(\", \"Horsepower\", \")\", \"FROM\", \"cars_data\", \")\"],\n \"question\": \"What is the number of cars with a greater accelerate than the one with the most horsepower?\",\n \"question_toks\": [\"What\", \"is\", \"the\", \"number\", \"of\", \"cars\", \"with\", \"a\", \"greater\", \"accelerate\", \"than\", \"the\", \"one\", \"with\", \"the\", \"most\", \"horsepower\", \"?\"]\n }"}
{"question": "How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many countries has more than 2 car makers ?\",\n\"question_toks\": \"['How', 'many', 'countries', 'has', 'more', 'than', '2', 'car', 'makers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(DISTINCT countries.CountryName) FROM countries JOIN (SELECT Country, COUNT(Maker) AS maker_count FROM car_makers GROUP BY Country) AS T1 ON countries.CountryName = T1.Country WHERE T1.maker_count > 2\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'countries', '.', 'CountryName', ')', 'FROM', 'countries', 'JOIN', '(', 'SELECT', 'Country', ',', 'COUNT', '(', 'Maker', ')', 'AS', 'maker_count', 'FROM', 'car_makers', 'GROUP', 'BY', 'Country', ')', 'AS', 'T1', 'ON', 'countries', '.', 'CountryName', '=', 'T1', '.', 'Country', 'WHERE', 'T1', '.', 'maker_count', '>', '2']\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'countries', '.', 'CountryName', ')', 'FROM', 'countries', 'JOIN', '(', 'SELECT', 'Country', ',', 'COUNT', '(', 'Maker', ')', 'AS', 'maker_count', 'FROM', 'car_makers', 'GROUP', 'BY', 'Country', ')', 'AS', 'T1', 'ON', 'countries', '.', 'CountryName', '=', 'T1', '.', 'Country', 'WHERE', 'T1', '.', 'maker_count', '>', '?']\",\n    \"question\": \"How many countries has more than 2 car makers ?\",\n    \"question_toks\": \"['How', 'many', 'countries', 'has', 'more', 'than', '2', 'car', 'makers', '?']\"\n}"}
{"question": "What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of countries with more than 2 car makers ?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'countries', 'with', 'more', 'than', '2', 'car', 'makers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(DISTINCT Country) FROM (SELECT Country, COUNT(DISTINCT Maker) AS MakerCount FROM car_makers GROUP BY Country) t1 WHERE t1.MakerCount > 2\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Country\", \")\", \"FROM\", \"(\", \"SELECT\", \"Country\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"Maker\", \")\", \"AS\", \"MakerCount\", \"FROM\", \"car_makers\", \"GROUP\", \"BY\", \"Country\", \")\", \"t1\", \"WHERE\", \"t1\", \".\", \"MakerCount\", \">\", \"2\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Country\", \")\", \"FROM\", \"(\", \"SELECT\", \"Country\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"Maker\", \")\", \"AS\", \"MakerCount\", \"FROM\", \"car_makers\", \"GROUP\", \"BY\", \"Country\", \")\", \"t1\", \"WHERE\", \"t1\", \".\", \"MakerCount\", \">\", \"?\"],\n    \"question\": \"What is the number of countries with more than 2 car makers ?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"number\", \"of\", \"countries\", \"with\", \"more\", \"than\", \"2\", \"car\", \"makers\", \"?\"]\n}"}
{"question": "How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"How many cars has over 6 cylinders?\",\n\"question_toks\": \"['How', 'many', 'cars', 'has', 'over', '6', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"WHERE\", \"Cylinders\", \">\", \"6\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"WHERE\", \"Cylinders\", \">\", \"?\"],\n    \"question\": \"How many cars has over 6 cylinders?\",\n    \"question_toks\": [\"How\", \"many\", \"cars\", \"has\", \"over\", \"6\", \"cylinders\", \"?\"]\n}"}
{"question": "What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the number of carsw ith over 6 cylinders?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'carsw', 'ith', 'over', '6', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT COUNT(*) FROM cars_data T1 WHERE T1.Cylinders > 6\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"T1\", \"WHERE\", \"T1\", \".\", \"Cylinders\", \">\", \"6\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"cars_data\", \"T1\", \"WHERE\", \"T1\", \".\", \"Cylinders\", \">\", \"?\"],\n    \"question\": \"What is the number of cars with over 6 cylinders?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"number\", \"of\", \"cars\", \"with\", \"over\", \"6\", \"cylinders\", \"?\"]\n}"}
{"question": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"For the cars with 4 cylinders, which model has the largest horsepower?\",\n\"question_toks\": \"['For', 'the', 'cars', 'with', '4', 'cylinders', ',', 'which', 'model', 'has', 'the', 'largest', 'horsepower', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n\"query\": \"SELECT Model FROM cars_data T1 WHERE T1.Cylinders=4 ORDER BY T1.Horsepower DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'Model', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Cylinders', '=', '4', 'ORDER', 'BY', 'T1', '.', 'Horsepower', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'Model', 'FROM', 'cars_data', 'T1', 'WHERE', 'T1', '.', 'Cylinders', '=', '<value>', 'ORDER', 'BY', 'T1', '.', 'Horsepower', 'DESC', 'LIMIT', '1']\",\n\"question\": \"For the cars with 4 cylinders, which model has the largest horsepower?\",\n\"question_toks\": \"['For', 'the', 'cars', 'with', '4', 'cylinders', ',', 'which', 'model', 'has', 'the', 'largest', 'horsepower', '?']\"}"}
{"question": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"For all of the 4 cylinder cars, which model has the most horsepower?\",\n\"question_toks\": \"['For', 'all', 'of', 'the', '4', 'cylinder', 'cars', ',', 'which', 'model', 'has', 'the', 'most', 'horsepower', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT Model, MAX(Horsepower) FROM cars_data T1, model_list T2 WHERE T1.Cylinders = 4 AND T1.ModelId = T2.ModelId GROUP BY T2.Model ORDER BY MAX(Horsepower) DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'Model', ',', 'MAX', '(', 'Horsepower', ')', 'FROM', 'cars_data', 'T1', ',', 'model_list', 'T2', 'WHERE', 'T1', '.', 'Cylinders', '=', '4', 'AND', 'T1', '.', 'ModelId', '=', 'T2', '.', 'ModelId', 'GROUP', 'BY', 'T2', '.', 'Model', 'ORDER', 'BY', 'MAX', '(', 'Horsepower', ')', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'Model', ',', 'MAX', '(', 'Horsepower', ')', 'FROM', 'cars_data', 'T1', ',', 'model_list', 'T2', 'WHERE', 'T1', '.', 'Cylinders', '=', '?', 'AND', 'T1', '.', 'ModelId', '=', 'T2', '.', 'ModelId', 'GROUP', 'BY', 'T2', '.', 'Model', 'ORDER', 'BY', 'MAX', '(', 'Horsepower', ')', 'DESC', 'LIMIT', '?']\",\n    \"question\": \"For all of the 4 cylinder cars, which model has the most horsepower?\",\n    \"question_toks\": \"['For', 'all', 'of', 'the', '4', 'cylinder', 'cars', ',', 'which', 'model', 'has', 'the', 'most', 'horsepower', '?']\"\n}"}
{"question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.\",\n\"question_toks\": \"['Among', 'the', 'cars', 'with', 'more', 'than', 'lowest', 'horsepower', ',', 'which', 'ones', 'do', 'not', 'have', 'more', 'than', '3', 'cylinders', '?', 'List', 'the', 'car', 'makeid', 'and', 'make', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n\"query\": \"SELECT DISTINCT car_names.MakeId, car_names.Make FROM car_names JOIN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data)) AS T1 ON car_names.Model = T1.Id JOIN (SELECT Id FROM cars_data WHERE Cylinders <= 3) AS T2 ON T1.Id = T2.Id\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'car_names.MakeId', ',', 'car_names.Make', 'FROM', 'car_names', 'JOIN', '(', 'SELECT', 'Id', 'FROM', 'cars_data', 'WHERE', 'Horsepower', '>', '(', 'SELECT', 'MIN', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')', ')', 'AS', 'T1', 'ON', 'car_names.Model', '=', 'T1.Id', 'JOIN', '(', 'SELECT', 'Id', 'FROM', 'cars_data', 'WHERE', 'Cylinders', '<=', '3', ')', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Id']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'car_names.MakeId', ',', 'car_names.Make', 'FROM', 'car_names', 'JOIN', '(', 'SELECT', 'Id', 'FROM', 'cars_data', 'WHERE', 'Horsepower', '>', '(', 'SELECT', 'MIN', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')', ')', 'AS', 'T1', 'ON', 'car_names.Model', '=', 'T1.Id', 'JOIN', '(', 'SELECT', 'Id', 'FROM', 'cars_data', 'WHERE', 'Cylinders', '<=', '3', ')', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Id']\",\n\"question\": \"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.\",\n\"question_toks\": \"['Among', 'the', 'cars', 'with', 'more', 'than', 'lowest', 'horsepower', ',', 'which', 'ones', 'do', 'not', 'have', 'more', 'than', '3', 'cylinders', '?', 'List', 'the', 'car', 'makeid', 'and', 'make', 'name', '.']}\""}
{"question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?\",\n\"question_toks\": \"['Among', 'the', 'cars', 'that', 'do', 'not', 'have', 'the', 'minimum', 'horsepower', ',', 'what', 'are', 'the', 'make', 'ids', 'and', 'names', 'of', 'all', 'those', 'with', 'less', 'than', '4', 'cylinders', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT DISTINCT car_names.MakeId, car_makers.Maker FROM car_names, cars_data, car_makers WHERE car_names.ModelId = cars_data.Id AND cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND car_makers.Id = car_names.MakeId;\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'car_names', '.', 'MakeId', ',', 'car_makers', '.', 'Maker', 'FROM', 'car_names', ',', 'cars_data', ',', 'car_makers', 'WHERE', 'car_names', '.', 'ModelId', '=', 'cars_data', '.', 'Id', 'AND', 'cars_data', '.', 'Cylinders', '<', '4', 'AND', 'cars_data', '.', 'Horsepower', '>', '(', 'SELECT', 'MIN', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')', 'AND', 'car_makers', '.', 'Id', '=', 'car_names', '.', 'MakeId', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'car_names', '.', 'MakeId', ',', 'car_makers', '.', 'Maker', 'FROM', 'car_names', ',', 'cars_data', ',', 'car_makers', 'WHERE', 'car_names', '.', 'ModelId', '=', 'cars_data', '.', 'Id', 'AND', 'cars_data', '.', 'Cylinders', '<', '<value>', 'AND', 'cars_data', '.', 'Horsepower', '>', '(', 'SELECT', 'MIN', '(', 'Horsepower', ')', 'FROM', 'cars_data', ')', 'AND', 'car_makers', '.', 'Id', '=', 'car_names', '.', 'MakeId', ';']\",\n    \"question\": \"Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?\",\n    \"question_toks\": \"['Among', 'the', 'cars', 'that', 'do', 'not', 'have', 'the', 'minimum', 'horsepower', ',', 'what', 'are', 'the', 'make', 'ids', 'and', 'names', 'of', 'all', 'those', 'with', 'less', 'than', '4', 'cylinders', '?']\"\n}"}
{"question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'miles', 'per', 'gallon', 'of', 'the', 'car', 'with', '8', 'cylinders', 'or', 'produced', 'before', '1980', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n\"query\": \"SELECT MAX(MPG) FROM cars_data T1 WHERE Cylinders=8 AND Year<1980;\",\n\"query_toks\": \"['SELECT', 'MAX', '(', 'MPG', ')', 'FROM', 'cars_data', 'T1', 'WHERE', 'Cylinders', '=', '8', 'AND', 'Year', '<', '1980', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'MAX', '(', ')', 'FROM', 'cars_data', 'T1', 'WHERE', 'Cylinders', '=', '8', 'AND', 'Year', '<', '1980', ';']\",\n\"question\": \"What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'miles', 'per', 'gallon', 'of', 'the', 'car', 'with', '8', 'cylinders', 'or', 'produced', 'before', '1980', '?']}\""}
{"question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'mpg', 'of', 'the', 'cars', 'that', 'had', '8', 'cylinders', 'or', 'that', 'were', 'produced', 'before', '1980', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT MAX(MPG) FROM cars_data WHERE Cylinders=8 OR Year<1980;\",\n    \"query_toks\": \"['SELECT', 'MAX', '(', 'MPG', ')', 'FROM', 'cars_data', 'WHERE', 'Cylinders', '=', '8', 'OR', 'Year', '<', '1980', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'MAX', '(', ')', 'FROM', 'cars_data', 'WHERE', 'Cylinders', '=', '8', 'OR', 'Year', '<', ';']\",\n    \"question\": \"What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?\",\n    \"question_toks\": \"['What', 'is', 'the', 'maximum', 'mpg', 'of', 'the', 'cars', 'that', 'had', '8', 'cylinders', 'or', 'that', 'were', 'produced', 'before', '1980', '?']\"\n}"}
{"question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?\",\n\"question_toks\": \"['Which', 'models', 'are', 'lighter', 'than', '3500', 'but', 'not', 'built', 'by', 'the', \"'Ford\", 'Motor', 'Company', \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT T4.Model FROM cars_data T4 JOIN model_list T3 ON T3.ModelId=T4.Id JOIN car_names T2 ON T2.MakeId=T3.Maker WHERE T4.Weight<3500 AND T2.Make!='Ford'\",\n \"query_toks\": \"['SELECT', 'T4.Model', 'FROM', 'cars_data', 'T4', 'JOIN', 'model_list', 'T3', 'ON', 'T3.ModelId=T4.Id', 'JOIN', 'car_names', 'T2', 'ON', 'T2.MakeId=T3.Maker', 'WHERE', 'T4.Weight<3500', 'AND', 'T2.Make!=', \"'Ford'\", ']\",\n \"query_toks_no_value\": \"['SELECT', 'T4.Model', 'FROM', 'cars_data', 'T4', 'JOIN', 'model_list', 'T3', 'ON', 'T3.ModelId=T4.Id', 'JOIN', 'car_names', 'T2', 'ON', 'T2.MakeId=T3.Maker', 'WHERE', 'T4.Weight', '<', '3500', 'AND', 'T2.Make', '! =', \"'Ford'\", ']\",\n \"question\": \"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?\",\n \"question_toks\": \"['Which', 'models', 'are', 'lighter', 'than', '3500', 'but', 'not', 'built', 'by', 'the', \"'Ford\", 'Motor', 'Company', \"'\", '?']}\"\n"}
{"question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'models', 'wthat', 'are', 'lighter', 'than', '3500', 'but', 'were', 'not', 'built', 'by', 'the', 'Ford', 'Motor', 'Company', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT Maker, Model\\nFROM model_list AS T1\\nINNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id\\nWHERE Weight < 3500 AND Maker <> 'Ford Motor Company'\",\n  \"query_toks\": \"['SELECT', 'Maker', ',', 'Model', 'FROM', 'model_list', 'AS', 'T1', 'INNER', 'JOIN', 'cars_data', 'AS', 'T2', 'ON', 'T1', '.', 'ModelId', '=', 'T2', '.', 'Id', 'WHERE', 'Weight', '<', '3500', 'AND', 'Maker', '<>', ''Ford', 'Motor', 'Company'']\",\n  \"query_toks_no_value\": \"['SELECT', 'Maker', ',', 'Model', 'FROM', 'model_list', 'AS', 'T1', 'INNER', 'JOIN', 'cars_data', 'AS', 'T2', 'ON', 'T1', '.', 'ModelId', '=', 'T2', '.', 'Id', 'WHERE', 'Weight', '<', '', 'AND', 'Maker', '<>', '']\",\n  \"question\": \"What are the different models that are lighter than 3500 but were not built by the Ford Motor Company?\",\n  \"question_toks\": \"['What', 'are', 'the', 'different', 'models', 'that', 'are', 'lighter', 'than', '3500', 'but', 'were', 'not', 'built', 'by', 'the', 'Ford', 'Motor', 'Company', '?']\"\n}"}
{"question": "What are the name of the countries where there is not a single car maker?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the name of the countries where there is not a single car maker?\",\n\"question_toks\": \"['What', 'are', 'the', 'name', 'of', 'the', 'countries', 'where', 'there', 'is', 'not', 'a', 'single', 'car', 'maker', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"car_1\",\n  \"query\": \"SELECT countries.CountryName\\nFROM countries\\nLEFT OUTER JOIN car_makers ON car_makers.Country = countries.CountryId\\nWHERE car_makers.Id IS NULL;\\n\",\n  \"query_toks\": [\"SELECT\", \"countries.CountryName\", \"FROM\", \"countries\", \"LEFT\", \"OUTER\", \"JOIN\", \"car_makers\", \"ON\", \"car_makers.Country\", \"=\", \"countries.CountryId\", \"WHERE\", \"car_makers.Id\", \"IS\", \"NULL\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"countries\", \".\", \"CountryName\", \"FROM\", \"countries\", \"LEFT\", \"OUTER\", \"JOIN\", \"car_makers\", \"ON\", \"car_makers\", \".\", \"Country\", \"=\", \"countries\", \".\", \"CountryId\", \"WHERE\", \"car_makers\", \".\", \"Id\", \"IS\", \"NULL\", \";\"],\n  \"question\": \"What are the name of the countries where there is not a single car maker?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"name\", \"of\", \"the\", \"countries\", \"where\", \"there\", \"is\", \"not\", \"a\", \"single\", \"car\", \"maker\", \"?\"]\n}"}
{"question": "What are the names of the countries with no car makers?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the names of the countries with no car makers?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'countries', 'with', 'no', 'car', 'makers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)\",\n    \"query_toks\": \"['SELECT', 'CountryName', 'FROM', 'countries', 'WHERE', 'CountryId', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'Country', 'FROM', 'car_makers', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'CountryName', 'FROM', 'countries', 'WHERE', 'CountryId', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'Country', 'FROM', 'car_makers', ')']\",\n    \"question\": \"What are the names of the countries with no car makers?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'countries', 'with', 'no', 'car', 'makers', '?']\"\n}"}
{"question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .\",\n\"question_toks\": \"['Which', 'are', 'the', 'car', 'makers', 'which', 'produce', 'at', 'least', '2', 'models', 'and', 'more', 'than', '3', 'car', 'makers', '?', 'List', 'the', 'id', 'and', 'the', 'maker', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT T1.Id, T1.Maker FROM (SELECT Maker, COUNT(DISTINCT Model) AS ModelCount FROM model_list GROUP BY Maker) AS T1 WHERE T1.ModelCount >= 2 AND T1.Maker IN (SELECT Maker FROM car_makers GROUP BY Maker HAVING COUNT(DISTINCT Country) > 3)\",\n \"query_toks\": [\"SELECT\", \"T1\", \".\", \"Id\", \",\", \"T1\", \".\", \"Maker\", \"FROM\", \"(\", \"SELECT\", \"Maker\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"Model\", \")\", \"AS\", \"ModelCount\", \"FROM\", \"model_list\", \"GROUP\", \"BY\", \"Maker\", \")\", \"AS\", \"T1\", \"WHERE\", \"T1\", \".\", \"ModelCount\", \">=\", \"2\", \"AND\", \"T1\", \".\", \"Maker\", \"IN\", \"(\", \"SELECT\", \"Maker\", \"FROM\", \"car_makers\", \"GROUP\", \"BY\", \"Maker\", \"HAVING\", \"COUNT\", \"(\", \"DISTINCT\", \"Country\", \")\", \">\", \"3\", \")\"],\n \"query_toks_no_value\": [\"SELECT\", \"T1\", \".\", \"Id\", \",\", \"T1\", \".\", \"Maker\", \"FROM\", \"(\", \"SELECT\", \"Maker\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"Model\", \")\", \"AS\", \"ModelCount\", \"FROM\", \"model_list\", \"GROUP\", \"BY\", \"Maker\", \")\", \"AS\", \"T1\", \"WHERE\", \"T1\", \".\", \"ModelCount\", \">=\", \"2\", \"AND\", \"T1\", \".\", \"Maker\", \"IN\", \"(\", \"SELECT\", \"Maker\", \"FROM\", \"car_makers\", \"GROUP\", \"BY\", \"Maker\", \"HAVING\", \"COUNT\", \"(\", \"DISTINCT\", \"Country\", \")\", \">\", \"3\", \")\"],\n \"question\": \"Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .\",\n \"question_toks\": [\"Which\", \"are\", \"the\", \"car\", \"makers\", \"which\", \"produce\", \"at\", \"least\", \"2\", \"models\", \"and\", \"more\", \"than\", \"3\", \"car\", \"makers\", \"?\", \"List\", \"the\", \"id\", \"and\", \"the\", \"maker\", \".\"]\n}"}
{"question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'makers', 'of', 'all', 'car', 'makers', 'that', 'produce', 'at', 'least', '2', 'models', 'and', 'make', 'more', 'than', '3', 'cars', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"car_1\",\n \"query\": \"SELECT T1.Id, T1.Maker FROM car_makers T1 JOIN model_list T2 ON T1.Maker=T2.Maker JOIN car_names T3 ON T2.Model=T3.Model GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.Model) >= 2 AND COUNT(*) > 3\",\n \"query_toks\": \"['SELECT', 'T1', '.', 'Id', ',', 'T1', '.', 'Maker', 'FROM', 'car_makers', 'T1', 'JOIN', 'model_list', 'T2', 'ON', 'T1', '.', 'Maker', '=', 'T2', '.', 'Maker', 'JOIN', 'car_names', 'T3', 'ON', 'T2', '.', 'Model', '=', 'T3', '.'...ORK>', '(', 'DISTINCT', 'T2', '.', 'Model', ')', '>=', '2', 'AND', 'COUNT', '(', '*', ')', '>', '3']\",\n \"query_toks_no_value\": \"['SELECT', 'T1', '.', 'Id', ',', 'T1', '.', 'Maker', 'FROM', 'car_makers', 'T1', 'JOIN', 'model_list', 'T2', 'ON', 'T1', '.', 'Maker', '=', 'T2', '.', 'Maker', 'JOIN', 'car_names', 'T3', 'ON', 'T2', '.', 'Model', '=', 'T3', '.'...\",\n \"question\": \"What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?\",\n \"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'makers', 'of', 'all', 'car', 'makers', 'that', 'produce', 'at', 'least', '2', 'models', 'and', 'make', 'more', 'than', '3', 'cars', '?']\"\n}"}
{"question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?\",\n\"question_toks\": \"['What', 'are', 'the', 'id', 'and', 'names', 'of', 'the', 'countries', 'which', 'have', 'more', 'than', '3', 'car', 'makers', 'or', 'produce', 'the', \"'fiat\", \"'\", 'model', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT countries.CountryId, countries.CountryName FROM countries JOIN (SELECT COUNT(DISTINCT car_makers.Maker) AS maker_count, car_makers.Country AS country FROM car_makers WHERE car_makers.Maker != 'fiat' GROUP BY car_makers.Country HAVING maker_count > 3 UNION SELECT 0 AS maker_count, countries.CountryId AS country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Model = 'fiat' GROUP BY countries.CountryId) AS temp ON countries.CountryId = temp.country;\",\n    \"query_toks\": \"['SELECT', 'countries.CountryId', ',', 'countries.CountryName', 'FROM', 'countries', 'JOIN', '(', 'SELECT', 'COUNT', '(', 'DISTINCT', 'car_makers.Maker', ')', 'AS', 'maker_count', ',', 'car_makers.Country', 'AS', 'country', 'FROM', 'car_makers', 'WHERE', 'car_makers.Maker', '!=', \"'fiat'\", 'GROUP', 'BY', 'car_makers.Country', 'HAVING', 'maker_count', '>', '3', 'UNION', 'SELECT', '0', 'AS', 'maker_count', ',', 'countries.CountryId', 'AS', 'country', 'FROM', 'countries', 'JOIN', 'car_makers', 'ON', 'countries.CountryId', '=', 'car_makers.Country', 'WHERE', 'car_makers.Model', '=', \"'fiat'\", 'GROUP', 'BY', 'countries.CountryId', ')', 'AS', 'temp', 'ON', 'countries.CountryId', '=', 'temp.country', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'countries', '.', 'CountryId', ',', 'countries', '.', 'CountryName', 'FROM', 'countries', 'JOIN', '(', 'SELECT', 'COUNT', '(', 'DISTINCT', 'car_makers', '.', 'Maker', ')', 'AS', 'maker_count', ',', 'car_makers', '.', 'Country', 'AS', 'country', 'FROM', 'car_makers', 'WHERE', 'car_makers', '.', 'Maker', '!=', \"'fiat'\", 'GROUP', 'BY', 'car_makers', '.', 'Country', 'HAVING', 'maker_count', '>', '3', 'UNION', 'SELECT', '0', 'AS', 'maker_count', ',', 'countries', '.', 'CountryId', 'AS', 'country', 'FROM', 'countries', 'JOIN', 'car_makers', 'ON', 'countries', '.', 'CountryId', '=', 'car_makers', '.', 'Country', 'WHERE', 'car_makers', '.', 'Model', '=', \"'fiat'\", 'GROUP', 'BY', 'countries', '.', 'CountryId', ')', 'AS', 'temp', 'ON', 'countries', '.', 'CountryId', '=', 'temp', '.', 'country', ';']\",\n    \"question\": \"What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?\",\n    \"question_toks\": \"['What', 'are', 'the', 'id', 'and', 'names', 'of', 'the', 'countries', 'which', 'have', 'more', 'than', '3', 'car', 'makers', 'or', 'produce', 'the', \\\"'fiat\\\", \\\"'\\\", 'model', '?']\"\n}"}
{"question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncontinents: 'ContId', 'Continent'\ncountries: 'CountryId', 'CountryName', 'Continent'\ncar_makers: 'Id', 'Maker', 'FullName', 'Country'\nmodel_list: 'ModelId', 'Maker', 'Model'\ncar_names: 'MakeId', 'Model', 'Make'\ncars_data: 'Id', 'MPG', 'Cylinders', 'Edispl', 'Horsepower', 'Weight', 'Accelerate', 'Year'\n\n{\"db_id\": \"car_1\",\n\"question\": \"What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'names', 'of', 'all', 'countries', 'that', 'either', 'have', 'more', 'than', '3', 'car', 'makers', 'or', 'produce', 'fiat', 'model', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"car_1\",\n    \"query\": \"SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Maker WHERE car_makers.Country IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3) OR model_list.Model = 'Fiat'\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'countries.CountryId', ',', 'countries.CountryName', 'FROM', 'countries', 'JOIN', 'car_makers', 'ON', 'car_makers.Country', '=', 'countries.CountryId', 'JOIN', 'model_list', 'ON', 'model_list.Maker', '=', 'car_makers.Maker', 'WHERE', 'car_makers.Country', 'IN', '(', 'SELECT', 'Country', 'FROM', 'car_makers', 'GROUP', 'BY', 'Country', 'HAVING', 'COUNT', '(', 'DISTINCT', 'Maker', ')', '>', '3', ')', 'OR', 'model_list.Model', '=', ''Fiat''']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'countries', '.', 'CountryId', ',', 'countries', '.', 'CountryName', 'FROM', 'countries', 'JOIN', 'car_makers', 'ON', 'car_makers', '.', 'Country', '=', 'countries', '.', 'CountryId', 'JOIN', 'model_list', 'ON', 'model_list', '.', 'Maker', '=', 'car_makers', '.', 'Maker', 'WHERE', 'car_makers', '.', 'Country', 'IN', '(', 'SELECT', 'Country', 'FROM', 'car_makers', 'GROUP', 'BY', 'Country', 'HAVING', 'COUNT', '(', 'DISTINCT', 'Maker', ')', '>', '3', ')', 'OR', 'model_list', '.', 'Model', '=', '']\",\n    \"question\": \"What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?\",\n    \"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'names', 'of', 'all', 'countries', 'that', 'either', 'have', 'more', 'than', '3', 'car', 'makers', 'or', 'produce', 'fiat', 'model', '?']\"\n}"}
{"question": "Which country does Airline \"JetBlue Airways\" belong to?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which country does Airline \"JetBlue Airways\" belong to?\",\n\"question_toks\": \"['Which', 'country', 'does', 'Airline', '``', 'JetBlue', 'Airways', \"''\", 'belong', 'to', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"flight_2\",\n \"query\": \"SELECT flights.Airline, flights.SourceAirport, flights.DestAirport, airlines.Country FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE airlines.Airline = 'JetBlue Airways'\",\n \"query_toks\": \"['SELECT', 'flights', '.', 'Airline', ',', 'flights', '.', 'SourceAirport', ',', 'flights', '.', 'DestAirport', ',', 'airlines', '.', 'Country', 'FROM', 'flights', 'JOIN', 'airlines', 'ON', 'flights', '.', 'Airline', '=', 'airlines', '.', 'Airline', 'WHERE', 'airlines', '.', 'Airline', '=', \"'\", 'JetBlue', 'Airways', \"'\", ']\",\n \"query_toks_no_value\": \"['SELECT', 'flights', '.', 'Airline', ',', 'flights', '.', 'SourceAirport', ',', 'flights', '.', 'DestAirport', ',', 'airlines', '.', 'Country', 'FROM', 'flights', 'JOIN', 'airlines', 'ON', 'flights', '.', 'Airline', '=', 'airlines', '.', 'Airline', 'WHERE', 'airlines', '.', 'Airline', '=', \"',\n \"question\": \"Which country does Airline 'JetBlue Airways' belong to?\",\n \"question_toks\": \"['Which', 'country', 'does', 'Airline', '``', 'JetBlue', 'Airways', \"''\", 'belong', 'to', '?']}\"\n"}
{"question": "What country is Jetblue Airways affiliated with?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What country is Jetblue Airways affiliated with?\",\n\"question_toks\": \"['What', 'country', 'is', 'Jetblue', 'Airways', 'affiliated', 'with', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT DISTINCT airlines.Country FROM airlines WHERE airlines.Abbreviation='B6'\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'airlines', '.', 'Country', 'FROM', 'airlines', 'WHERE', 'airlines', '.', 'Abbreviation', '=', \\\"'B6'\\\"],\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'airlines', '.', 'Country', 'FROM', 'airlines', 'WHERE', 'airlines', '.', 'Abbreviation', '=', '\\\"', '\\'', 'B6', '\\'', '\\\"']\",\n    \"question\": \"What country is Jetblue Airways affiliated with?\",\n    \"question_toks\": \"['What', 'country', 'is', 'Jetblue', 'Airways', 'affiliated', 'with', '?']\"\n}"}
{"question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What is the abbreviation of Airline \"JetBlue Airways\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'abbreviation', 'of', 'Airline', '``', 'JetBlue', 'Airways', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"flight_2\",\n \"query\": \"SELECT Abbreviation FROM airlines WHERE Airline='JetBlue Airways';\",\n \"query_toks\": [\"SELECT\", \"Abbreviation\", \"FROM\", \"airlines\", \"WHERE\", \"Airline\", \"=\", \"'JetBlue Airways'\", \";\"],\n \"query_toks_no_value\": [\"SELECT\", \"Abbreviation\", \"FROM\", \"airlines\", \"WHERE\", \"Airline\", \"=\", \"?\", \";\"],\n \"question\": \"What is the abbreviation of Airline 'JetBlue Airways'?\",\n \"question_toks\": [\"What\", \"is\", \"the\", \"abbreviation\", \"of\", \"Airline\", \"``\", \"JetBlue\", \"Airways\", \"''\", \"?\"]\n}"}
{"question": "Which abbreviation corresponds to Jetblue Airways?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which abbreviation corresponds to Jetblue Airways?\",\n\"question_toks\": \"['Which', 'abbreviation', 'corresponds', 'to', 'Jetblue', 'Airways', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT Abbreviation FROM airlines WHERE Airline='Jetblue Airways'\",\n  \"query_toks\": [\"SELECT\", \"Abbreviation\", \"FROM\", \"airlines\", \"WHERE\", \"Airline\", \"=\", \"'Jetblue Airways'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Abbreviation\", \"FROM\", \"airlines\", \"WHERE\", \"Airline\", \"=\", \"?\"],\n  \"question\": \"Which abbreviation corresponds to Jetblue Airways?\",\n  \"question_toks\": [\"Which\", \"abbreviation\", \"corresponds\", \"to\", \"Jetblue\", \"Airways\", \"?\"]\n}"}
{"question": "List all airline names and their abbreviations in \"USA\".", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"List all airline names and their abbreviations in \"USA\".\",\n\"question_toks\": \"['List', 'all', 'airline', 'names', 'and', 'their', 'abbreviations', 'in', '``', 'USA', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'\",\n    \"query_toks\": \"['SELECT', 'Airline', ',', 'Abbreviation', 'FROM', 'airlines', 'WHERE', 'Country', '=', \"'USA'\"]\",\n    \"query_toks_no_value\": \"['SELECT', 'Airline', ',', 'Abbreviation', 'FROM', 'airlines', 'WHERE', 'Country', '=', 'VALUE']\",\n    \"question\": \"List all airline names and their abbreviations in \\\"USA\\\".\",\n    \"question_toks\": \"['List', 'all', 'airline', 'names', 'and', 'their', 'abbreviations', 'in', '``', 'USA', \"''\", '.']\"\n}"}
{"question": "What are the airline names and abbreviations for airlines in the USA?", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are the airline names and abbreviations for airlines in the USA?\",\n\"question_toks\": \"['What', 'are', 'the', 'airline', 'names', 'and', 'abbreviations', 'for', 'airlines', 'in', 'the', 'USA', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT Airline, Abbreviation FROM airlines WHERE Country='USA'\",\n  \"query_toks\": [\"SELECT\", \"Airline\", \",\", \"Abbreviation\", \"FROM\", \"airlines\", \"WHERE\", \"Country\", \"=\", \"'USA'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Airline\", \",\", \"Abbreviation\", \"FROM\", \"airlines\", \"WHERE\", \"Country\", \"=\"],\n  \"question\": \"What are the airline names and abbreviations for airlines in the USA?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"airline\", \"names\", \"and\", \"abbreviations\", \"for\", \"airlines\", \"in\", \"the\", \"USA\", \"?\"]\n}"}
{"question": "List the airport code and name in the city of Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"List the airport code and name in the city of Anthony.\",\n\"question_toks\": \"['List', 'the', 'airport', 'code', 'and', 'name', 'in', 'the', 'city', 'of', 'Anthony', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT AirportCode, AirportName FROM airports T1 WHERE T1.City='Anthony'\",\n  \"query_toks\": \"['SELECT', 'AirportCode', ',', 'AirportName', 'FROM', 'airports', 'T1', 'WHERE', 'T1', '.', 'City', '=', \\\"'Anthony'\\\"', '']\",\n  \"query_toks_no_value\": \"['SELECT', 'AirportCode', ',', 'AirportName', 'FROM', 'airports', 'T1', 'WHERE', 'T1', '.', 'City', '=', \\\"'Anthony'\\\"', '']\",\n  \"question\": \"List the airport code and name in the city of Anthony.\",\n  \"question_toks\": \"['List', 'the', 'airport', 'code', 'and', 'name', 'in', 'the', 'city', 'of', 'Anthony', '.']\"\n}"}
{"question": "Give the airport code and airport name corresonding to the city Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Give the airport code and airport name corresonding to the city Anthony.\",\n\"question_toks\": \"['Give', 'the', 'airport', 'code', 'and', 'airport', 'name', 'corresonding', 'to', 'the', 'city', 'Anthony', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT AirportCode, AirportName FROM airports T1 WHERE T1.City = 'Anthony'\",\n  \"query_toks\": \"['SELECT', 'AirportCode', ',', 'AirportName', 'FROM', 'airports', 'T1', 'WHERE', 'T1', '.', 'City', '=', \\\"'Anthony'\\\"', 'EOS']\",\n  \"query_toks_no_value\": \"['SELECT', 'AirportCode', ',', 'AirportName', 'FROM', 'airports', 'T1', 'WHERE', 'T1', '.', 'City', '=', '\\\"Anthony\\\"', 'EOS']\",\n  \"question\": \"Give the airport code and airport name corresonding to the city Anthony.\",\n  \"question_toks\": \"['Give', 'the', 'airport', 'code', 'and', 'airport', 'name', 'corresonding', 'to', 'the', 'city', 'Anthony', '.']\"\n}"}
{"question": "How many airlines do we have?", "sql": "SELECT count(*) FROM AIRLINES", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many airlines do we have?\",\n\"question_toks\": \"['How', 'many', 'airlines', 'do', 'we', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM airlines\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airlines\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airlines\"],\n    \"question\": \"How many airlines do we have?\",\n    \"question_toks\": [\"How\", \"many\", \"airlines\", \"do\", \"we\", \"have\", \"?\"]\n}"}
{"question": "What is the total number of airlines?", "sql": "SELECT count(*) FROM AIRLINES", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What is the total number of airlines?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'number', 'of', 'airlines', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"flight_2\",\n\"query\": \"SELECT COUNT(*) FROM airlines\",\n\"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airlines\"],\n\"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airlines\"],\n\"question\": \"What is the total number of airlines?\",\n\"question_toks\": [\"What\", \"is\", \"the\", \"total\", \"number\", \"of\", \"airlines\", \"?\"]\n}"}
{"question": "How many airports do we have?", "sql": "SELECT count(*) FROM AIRPORTS", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many airports do we have?\",\n\"question_toks\": \"['How', 'many', 'airports', 'do', 'we', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT COUNT(*) FROM airports\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airports\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airports\"],\n  \"question\": \"How many airports do we have?\",\n  \"question_toks\": [\"How\", \"many\", \"airports\", \"do\", \"we\", \"have\", \"?\"]\n}"}
{"question": "Return the number of  airports.", "sql": "SELECT count(*) FROM AIRPORTS", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Return the number of  airports.\",\n\"question_toks\": \"['Return', 'the', 'number', 'of', 'airports', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"flight_2\",\n \"query\": \"SELECT COUNT(*) FROM airports AS T1\",\n \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'airports', 'AS', 'T1']\",\n \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'airports', 'AS', 'T1']\",\n \"question\": \"Return the number of airports.\",\n \"question_toks\": \"['Return', 'the', 'number', 'of', 'airports', '.']}\"\n"}
{"question": "How many flights do we have?", "sql": "SELECT count(*) FROM FLIGHTS", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many flights do we have?\",\n\"question_toks\": \"['How', 'many', 'flights', 'do', 'we', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights T1\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\"],\n    \"question\": \"How many flights do we have?\",\n    \"question_toks\": [\"How\", \"many\", \"flights\", \"do\", \"we\", \"have\", \"?\"]\n}"}
{"question": "Return the number of flights.", "sql": "SELECT count(*) FROM FLIGHTS", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Return the number of flights.\",\n\"question_toks\": \"['Return', 'the', 'number', 'of', 'flights', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'flights']\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'flights']\",\n    \"question\": \"Return the number of flights.\",\n    \"question_toks\": \"['Return', 'the', 'number', 'of', 'flights', '.']\"\n}"}
{"question": "Which airline has abbreviation 'UAL'?", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which airline has abbreviation 'UAL'?\",\n\"question_toks\": \"['Which', 'airline', 'has', 'abbreviation', \"'UAL\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT Airline FROM airlines WHERE Abbreviation='UAL'\",\n    \"query_toks\": [\"SELECT\", \"Airline\", \"FROM\", \"airlines\", \"WHERE\", \"Abbreviation\", \"=\", \"'UAL'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Airline\", \"FROM\", \"airlines\", \"WHERE\", \"Abbreviation\", \"=\"],\n    \"question\": \"Which airline has abbreviation 'UAL'?\",\n    \"question_toks\": [\"Which\", \"airline\", \"has\", \"abbreviation\", \"'UAL'\", \"?\"]\n}"}
{"question": "Give the airline with abbreviation 'UAL'.", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Give the airline with abbreviation 'UAL'.\",\n\"question_toks\": \"['Give', 'the', 'airline', 'with', 'abbreviation', \"'UAL\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT Airline FROM airlines WHERE Abbreviation='UAL'\",\n    \"query_toks\": [\"SELECT\", \"Airline\", \"FROM\", \"airlines\", \"WHERE\", \"Abbreviation='UAL'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Airline\", \"FROM\", \"airlines\", \"WHERE\", \"Abbreviation\", \"=\", \"'UAL'\"],\n    \"question\": \"Give the airline with abbreviation 'UAL'.\",\n    \"question_toks\": [\"Give\", \"the\", \"airline\", \"with\", \"abbreviation\", \"'UAL'\", \".\"]\n}"}
{"question": "How many airlines are from USA?", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many airlines are from USA?\",\n\"question_toks\": \"['How', 'many', 'airlines', 'are', 'from', 'USA', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM airlines WHERE Country = 'USA'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airlines\", \"WHERE\", \"Country\", \"=\", \"'USA'\", \"\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airlines\", \"WHERE\", \"Country\", \"=\", \"?\"],\n    \"question\": \"How many airlines are from USA?\",\n    \"question_toks\": [\"How\", \"many\", \"airlines\", \"are\", \"from\", \"USA\", \"?\"]\n}"}
{"question": "Return the number of airlines in the USA.", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Return the number of airlines in the USA.\",\n\"question_toks\": \"['Return', 'the', 'number', 'of', 'airlines', 'in', 'the', 'USA', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT COUNT(*) FROM airlines WHERE Country='USA'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airlines\", \"WHERE\", \"Country\", \"=\", \"'USA'\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"airlines\", \"WHERE\", \"Country\", \"=\", \"?\", \";\"],\n  \"question\": \"Return the number of airlines in the USA.\",\n  \"question_toks\": [\"Return\", \"the\", \"number\", \"of\", \"airlines\", \"in\", \"the\", \"USA\", \".\"]\n}"}
{"question": "Which city and country is the Alton airport at?", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which city and country is the Alton airport at?\",\n\"question_toks\": \"['Which', 'city', 'and', 'country', 'is', 'the', 'Alton', 'airport', 'at', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT City, Country FROM airports WHERE AirportName='Alton'\",\n    \"query_toks\": [\"SELECT\", \"City\", \",\", \"Country\", \"FROM\", \"airports\", \"WHERE\", \"AirportName\", \"=\", \"'Alton'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"City\", \",\", \"Country\", \"FROM\", \"airports\", \"WHERE\", \"AirportName\", \"=\", \"?\"],\n    \"question\": \"Which city and country is the Alton airport at?\",\n    \"question_toks\": [\"Which\", \"city\", \"and\", \"country\", \"is\", \"the\", \"Alton\", \"airport\", \"at\", \"?\"]\n}"}
{"question": "Give the city and country for the Alton airport.", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Give the city and country for the Alton airport.\",\n\"question_toks\": \"['Give', 'the', 'city', 'and', 'country', 'for', 'the', 'Alton', 'airport', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT City, Country FROM airports T1 WHERE T1.AirportName='Alton';\",\n    \"query_toks\": \"['SELECT', 'City', ',', 'Country', 'FROM', 'airports', 'T1', 'WHERE', 'T1', '.', 'AirportName', '=', '\\\\''Alton\\\\''', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'City', ',', 'Country', 'FROM', 'airports', 'T1', 'WHERE', 'T1', '.', 'AirportName', '=', 'value', ';']\",\n    \"question\": \"Give the city and country for the Alton airport.\",\n    \"question_toks\": \"['Give', 'the', 'city', 'and', 'country', 'for', 'the', 'Alton', 'airport', '.']\"\n}"}
{"question": "What is the airport name for airport 'AKO'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What is the airport name for airport 'AKO'?\",\n\"question_toks\": \"['What', 'is', 'the', 'airport', 'name', 'for', 'airport', \"'AKO\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT AirportName FROM airports WHERE AirportCode='AKO'\",\n    \"query_toks\": [\"SELECT\", \"AirportName\", \"FROM\", \"airports\", \"WHERE\", \"AirportCode\", \"=\", \"'AKO'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"AirportName\", \"FROM\", \"airports\", \"WHERE\", \"AirportCode\", \"=\"],\n    \"question\": \"What is the airport name for airport 'AKO'?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"airport\", \"name\", \"for\", \"airport\", \"'AKO'\", \"?\"]\n}"}
{"question": "Return the name of the airport with code 'AKO'.", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Return the name of the airport with code 'AKO'.\",\n\"question_toks\": \"['Return', 'the', 'name', 'of', 'the', 'airport', 'with', 'code', \"'AKO\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT AirportName FROM airports WHERE AirportCode='AKO'\",\n    \"query_toks\": [\"SELECT\", \"AirportName\", \"FROM\", \"airports\", \"WHERE\", \"AirportCode\", \"=\", \"'AKO'\", \";\" ],\n    \"query_toks_no_value\": [\"SELECT\", \"AirportName\", \"FROM\", \"airports\", \"WHERE\", \"AirportCode\", \"=\", \"V\", \";\" ],\n    \"question\": \"Return the name of the airport with code 'AKO'.\",\n    \"question_toks\": [\"Return\", \"the\", \"name\", \"of\", \"the\", \"airport\", \"with\", \"code\", \"'AKO\", \"'\", \".\"]\n}"}
{"question": "What are airport names at City 'Aberdeen'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are airport names at City 'Aberdeen'?\",\n\"question_toks\": \"['What', 'are', 'airport', 'names', 'at', 'City', \"'Aberdeen\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT AirportName FROM airports T1 WHERE City = 'Aberdeen'\",\n    \"query_toks\": [\"SELECT\", \"AirportName\", \"FROM\", \"airports\", \"T1\", \"WHERE\", \"City\", \"=\", \"'Aberdeen'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"AirportName\", \"FROM\", \"airports\", \"T1\", \"WHERE\", \"City\", \"=\"],\n    \"question\": \"What are airport names at City 'Aberdeen'?\",\n    \"question_toks\": [\"What\", \"are\", \"airport\", \"names\", \"at\", \"City\", \"'Aberdeen'\", \"?\"]\n}"}
{"question": "What are the names of airports in Aberdeen?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are the names of airports in Aberdeen?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'airports', 'in', 'Aberdeen', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT AirportName FROM airports T1 WHERE City='Aberdeen' OR AirportName LIKE '%Aberdeen%'\",\n    \"query_toks\": \"['SELECT', 'AirportName', 'FROM', 'airports', 'T1', 'WHERE', 'City', '=', '\\\\\\'Aberdeen\\\\\\'', 'OR', 'AirportName', 'LIKE', '\\\\\\'%', 'Aberdeen', '%\\\\\\'']\",\n    \"query_toks_no_value\": \"['SELECT', 'AirportName', 'FROM', 'airports', 'T1', 'WHERE', 'City', '=', '', ' OR', 'AirportName', 'LIKE', '', '%Aberdeen', '%']\",\n    \"question\": \"What are the names of airports in Aberdeen?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'airports', 'in', 'Aberdeen', '?']\"\n}"}
{"question": "How many flights depart from 'APG'?", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many flights depart from 'APG'?\",\n\"question_toks\": \"['How', 'many', 'flights', 'depart', 'from', \"'APG\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights T1 WHERE T1.SourceAirport='APG'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"'APG'\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"?\"],\n    \"question\": \"How many flights depart from 'APG'?\",\n    \"question_toks\": [\"How\", \"many\", \"flights\", \"depart\", \"from\", \"'APG'\", \"?\"],\n}"}
{"question": "Count the number of flights departing from 'APG'.", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Count the number of flights departing from 'APG'.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'flights', 'departing', 'from', \"'APG\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"flight_2\",\n \"query\": \"SELECT count(*) FROM flights T1 WHERE T1.SourceAirport = 'APG'\",\n \"query_toks\": [\"SELECT\", \"count\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"'APG'\",],\n \"query_toks_no_value\": [\"SELECT\", \"count\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"?\"],\n \"question\": \"Count the number of flights departing from 'APG'.\",\n \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"flights\", \"departing\", \"from\", \"'APG\", \"'\", \".\"]\n}"}
{"question": "How many flights have destination ATO?", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many flights have destination ATO?\",\n\"question_toks\": \"['How', 'many', 'flights', 'have', 'destination', 'ATO', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights T1 WHERE T1.DestAirport='ATO'\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'flights', 'T1', 'WHERE', 'T1', '.', 'DestAirport', '=', \\\"'ATO'\\\" ]\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'flights', 'T1', 'WHERE', 'T1', '.', 'DestAirport', '=', '\\\"VALUE\\\"']\",\n    \"question\": \"How many flights have destination ATO?\",\n    \"question_toks\": \"['How', 'many', 'flights', 'have', 'destination', 'ATO', '?']\"\n}"}
{"question": "Count the number of flights into ATO.", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Count the number of flights into ATO.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'flights', 'into', 'ATO', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights T1 WHERE T1.DestAirport = 'ATO'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"DestAirport\", \"=\", \"'ATO'\", \"\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"DestAirport\", \"=\", \"\"],\n    \"question\": \"Count the number of flights into ATO.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"flights\", \"into\", \"ATO\", \".\"]\n}"}
{"question": "How many flights depart from City Aberdeen?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many flights depart from City Aberdeen?\",\n\"question_toks\": \"['How', 'many', 'flights', 'depart', 'from', 'City', 'Aberdeen', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 on T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"AS\", \"T1\", \"JOIN\", \"airports\", \"AS\", \"T2\", \"on\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"WHERE\", \"T2\", \".\", \"City\", \"=\", \"'\", \"Aberdeen\", \"'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"AS\", \"T1\", \"JOIN\", \"airports\", \"AS\", \"T2\", \"on\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"WHERE\", \"T2\", \".\", \"City\", \"=\", \"'Abrdeen\", \"'\"],\n  \"question\": \"How many flights depart from City Aberdeen?\",\n  \"question_toks\": [\"How\", \"many\", \"flights\", \"depart\", \"from\", \"City\", \"Aberdeen\", \"?\"]\n}"}
{"question": "Return the number of flights departing from Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Return the number of flights departing from Aberdeen.\",\n\"question_toks\": \"['Return', 'the', 'number', 'of', 'flights', 'departing', 'from', 'Aberdeen', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen';\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"AS\", \"T1\", \"INNER\", \"JOIN\", \"airports\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"WHERE\", \"T2\", \".\", \"City\", \"=\", \"'\", \"Aberdeen\", \"'\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"AS\", \"T1\", \"INNER\", \"JOIN\", \"airports\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"WHERE\", \"T2\", \".\", \"City\", \"=\", \"'\", \"'\", \";\"],\n    \"question\": \"Return the number of flights departing from Aberdeen.\",\n    \"question_toks\": [\"Return\", \"the\", \"number\", \"of\", \"flights\", \"departing\", \"from\", \"Aberdeen\", \".\"]\n}"}
{"question": "How many flights arriving in Aberdeen city?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many flights arriving in Aberdeen city?\",\n\"question_toks\": \"['How', 'many', 'flights', 'arriving', 'in', 'Aberdeen', 'city', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT count(*) FROM flights T1 WHERE T1.DestAirport IN (SELECT AirportCode FROM airports WHERE airports.City = 'Aberdeen')\",\n    \"query_toks\": [\"SELECT\", \"count\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"DestAirport\", \"IN\", \"(\", \"SELECT\", \"AirportCode\", \"FROM\", \"airports\", \"WHERE\", \"airports\", \".\", \"City\", \"=\", \"'Aberdeen'\", \")\",],\n    \"query_toks_no_value\": [\"SELECT\", \"count\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"DestAirport\", \"IN\", \"(\", \"SELECT\", \"AirportCode\", \"FROM\", \"airports\", \"WHERE\", \"airports\", \".\", \"City\", \"=\", \"?\", \")\",],\n    \"question\": \"How many flights arriving in Aberdeen city?\",\n    \"question_toks\": [\"How\", \"many\", \"flights\", \"arriving\", \"in\", \"Aberdeen\", \"city\", \"?\"]\n}"}
{"question": "Return the number of flights arriving in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Return the number of flights arriving in Aberdeen.\",\n\"question_toks\": \"['Return', 'the', 'number', 'of', 'flights', 'arriving', 'in', 'Aberdeen', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"flight_2\",\n\"query\": \"SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'flights', 'AS', 'T1', 'JOIN', 'airports', 'AS', 'T2', 'ON', 'T1', '.', 'DestAirport', '=', 'T2', '.', 'AirportCode', 'WHERE', 'T2', '.', 'City', '=', '''Aberdeen''']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'flights', 'AS', 'T1', 'JOIN', 'airports', 'AS', 'T2', 'ON', 'T1', '.', 'DestAirport', '=', 'T2', '.', 'AirportCode', 'WHERE', 'T2', '.', 'City', '=', \"',\n\"question\": \"Return the number of flights arriving in Aberdeen.\",\n\"question_toks\": \"['Return', 'the', 'number', 'of', 'flights', 'arriving', 'in', 'Aberdeen', '.']}\""}
{"question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?\",\n\"question_toks\": \"['How', 'many', 'flights', 'depart', 'from', 'City', \"'Aberdeen\", \"'\", 'and', 'have', 'destination', 'City', \"'Ashley\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights T1, airports T2, airports T3 WHERE T1.SourceAirport=T2.AirportCode AND T1.DestAirport=T3.AirportCode AND T2.City='Aberdeen' AND T3.City='Ashley'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \",\", \"airports\", \"T2\", \",\", \"airports\", \"T3\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"AND\", \"T1\", \".\", \"DestAirport\", \"=\", \"T3\", \".\", \"AirportCode\", \"AND\", \"T2\", \".\", \"City\", \"=\", \"'Aberdeen'\", \"AND\", \"T3\", \".\", \"City\", \"=\", \"'Ashley'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \",\", \"airports\", \"T2\", \",\", \"airports\", \"T3\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"AND\", \"T1\", \".\", \"DestAirport\", \"=\", \"T3\", \".\", \"AirportCode\", \"AND\", \"T2\", \".\", \"City\", \"=\", \"\", \"AND\", \"T3\", \".\", \"City\", \"=\", \"\"],\n    \"question\": \"How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?\",\n    \"question_toks\": [\"How\", \"many\", \"flights\", \"depart\", \"from\", \"City\", \"'Aberdeen'\", \"and\", \"have\", \"destination\", \"City\", \"'Ashley'\", \"?\"],\n}"}
{"question": "How many flights fly from Aberdeen to Ashley?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many flights fly from Aberdeen to Ashley?\",\n\"question_toks\": \"['How', 'many', 'flights', 'fly', 'from', 'Aberdeen', 'to', 'Ashley', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT COUNT(*) FROM flights T1 JOIN airports T2 ON T1.SourceAirport = T2.AirportCode JOIN airports T3 ON T1.DestAirport = T3.AirportCode WHERE T2.City = 'Aberdeen' AND T3.City = 'Ashley'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"JOIN\", \"airports\", \"T2\", \"ON\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"JOIN\", \"airports\", \"T3\", \"ON\", \"T1\", \".\", \"DestAirport\", \"=\", \"T3\", \".\", \"AirportCode\", \"WHERE\", \"T2\", \".\", \"City\", \"=\", \"'\", \"Aberdeen\", \"'\", \"AND\", \"T3\", \".\", \"City\", \"=\", \"'\", \"Ashley\", \"'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"JOIN\", \"airports\", \"T2\", \"ON\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"JOIN\", \"airports\", \"T3\", \"ON\", \"T1\", \".\", \"DestAirport\", \"=\", \"T3\", \".\", \"AirportCode\", \"WHERE\", \"T2\", \".\", \"City\", \"=\", \"Aberdeen\", \"AND\", \"T3\", \".\", \"City\", \"=\", \"Ashley\"],\n  \"question\": \"How many flights fly from Aberdeen to Ashley?\",\n  \"question_toks\": [\"How\", \"many\", \"flights\", \"fly\", \"from\", \"Aberdeen\", \"to\", \"Ashley\", \"?\"]\n}"}
{"question": "How many flights does airline 'JetBlue Airways' have?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many flights does airline 'JetBlue Airways' have?\",\n\"question_toks\": \"['How', 'many', 'flights', 'does', 'airline', \"'JetBlue\", 'Airways', \"'\", 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights T1 WHERE T1.Airline='JetBlue Airways'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"Airline\", \"=\", \"'JetBlue Airways'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"Airline\", \"=\"],\n    \"question\": \"How many flights does airline 'JetBlue Airways' have?\",\n    \"question_toks\": [\"How\", \"many\", \"flights\", \"does\", \"airline\", \"'JetBlue\", \"Airways\", \"'\", \"have\", \"?\"]\n}"}
{"question": "Give the number of Jetblue Airways flights.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Give the number of Jetblue Airways flights.\",\n\"question_toks\": \"['Give', 'the', 'number', 'of', 'Jetblue', 'Airways', 'flights', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"WHERE\", \"Airline\", \"=\", \"'Jetblue Airways'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"WHERE\", \"Airline\", \"=\"],\n    \"question\": \"Give the number of Jetblue Airways flights.\",\n    \"question_toks\": [\"Give\", \"the\", \"number\", \"of\", \"Jetblue\", \"Airways\", \"flights\", \".\"]\n}"}
{"question": "How many 'United Airlines' flights go to Airport 'ASY'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many 'United Airlines' flights go to Airport 'ASY'?\",\n\"question_toks\": \"['How', 'many', \"'United\", 'Airlines', \"'\", 'flights', 'go', 'to', 'Airport', \"'ASY\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT COUNT(*) FROM flights T1 WHERE T1.Airline='United Airlines' AND T1.DestAirport='ASY'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"Airline\", \"=\", \"'United Airlines'\", \"AND\", \"T1\", \".\", \"DestAirport\", \"=\", \"'ASY'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"Airline\", \"=\", \"'\", \"Airline\", \"'\", \"AND\", \"T1\", \".\", \"DestAirport\", \"=\", \"'\", \"Airport_Code\", \"'\"],\n  \"question\": \"How many 'United Airlines' flights go to Airport 'ASY'?\",\n  \"question_toks\": [\"How\", \"many\", \"'United\", \"Airlines'\", \"flights\", \"go\", \"to\", \"Airport\", \"'ASY'\", \"?\"]\n}"}
{"question": "Count the number of United Airlines flights arriving in ASY Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Count the number of United Airlines flights arriving in ASY Airport.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'United', 'Airlines', 'flights', 'arriving', 'in', 'ASY', 'Airport', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights T1, airlines T2, airports T3 WHERE T1.Airline=T2.Abbreviation AND T1.DestAirport=T3.AirportCode AND T2.Airline='United Airlines' AND T3.AirportCode='ASY';\",\n    \"query_toks\": [\n        \"SELECT\",\n        \"COUNT\",\n        \"(\",\n        \"*\",\n        \")\",\n        \"FROM\",\n        \"flights\",\n        \"T1\",\n        \",\",\n        \"airlines\",\n        \"T2\",\n        \",\",\n        \"airports\",\n        \"T3\",\n        \"WHERE\",\n        \"T1\",\n        \".\",\n        \"Airline\",\n        \"=\",\n        \"T2\",\n        \".\",\n        \"Abbreviation\",\n        \"AND\",\n        \"T1\",\n        \".\",\n        \"DestAirport\",\n        \"=\",\n        \"T3\",\n        \".\",\n        \"AirportCode\",\n        \"AND\",\n        \"T2\",\n        \".\",\n        \"Airline\",\n        \"=\",\n        \"'United Airlines'\",\n        \"AND\",\n        \"T3\",\n        \".\",\n        \"AirportCode\",\n        \"=\",\n        \"'ASY'\",\n        \";\"\n    ],\n    \"query_toks_no_value\": [\n        \"SELECT\",\n        \"COUNT\",\n        \"(\",\n        \"*\",\n        \")\",\n        \"FROM\",\n        \"flights\",\n        \"T1\",\n        \",\",\n        \"airlines\",\n        \"T2\",\n        \",\",\n        \"airports\",\n        \"T3\",\n        \"WHERE\",\n        \"T1\",\n        \".\",\n        \"Airline\",\n        \"=\",\n        \"T2\",\n        \".\",\n        \"Abbreviation\",\n        \"AND\",\n        \"T1\",\n        \".\",\n        \"DestAirport\",\n        \"=\",\n        \"T3\",\n        \".\",\n        \"AirportCode\",\n        \"AND\",\n        \"T2\",\n        \".\",\n        \"Airline\",\n        \"=\",\n        \"'United Airlines'\",\n        \"AND\",\n        \"T3\",\n        \".\",\n        \"AirportCode\",\n        \"=\",\n        \"'ASY'\",\n        \";\"\n    ],\n    \"question\": \"Count the number of United Airlines flights arriving in ASY Airport.\",\n    \"question_toks\": [\n        \"Count\",\n        \"the\",\n        \"number\",\n        \"of\",\n        \"United\",\n        \"Airlines\",\n        \"flights\",\n        \"arriving\",\n        \"in\",\n        \"ASY\",\n        \"Airport\",\n        \".\"\n    ]\n}"}
{"question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many 'United Airlines' flights depart from Airport 'AHD'?\",\n\"question_toks\": \"['How', 'many', \"'United\", 'Airlines', \"'\", 'flights', 'depart', 'from', 'Airport', \"'AHD\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT COUNT(*) FROM flights T1 JOIN airlines T2 ON T1.Airline = T2.Airline WHERE T1.SourceAirport = 'AHD' AND T2.Airline = 'United Airlines'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"JOIN\", \"airlines\", \"T2\", \"ON\", \"T1\", \".\", \"Airline\", \"=\", \"T2\", \".\", \"Airline\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"'AHD'\", \"AND\", \"T2\", \".\", \"Airline\", \"=\", \"'United Airlines'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"JOIN\", \"airlines\", \"T2\", \"ON\", \"T1\", \".\", \"Airline\", \"=\", \"T2\", \".\", \"Airline\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"\", \"AND\", \"T2\", \".\", \"Airline\", \"=\", \"\"],\n  \"question\": \"How many 'United Airlines' flights depart from Airport 'AHD'?\",\n  \"question_toks\": [\"How\", \"many\", \"'United\", \"Airlines'\", \"flights\", \"depart\", \"from\", \"Airport\", \"'AHD'\", \"?\"],\n}"}
{"question": "Return the number of United Airlines flights leaving from AHD Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Return the number of United Airlines flights leaving from AHD Airport.\",\n\"question_toks\": \"['Return', 'the', 'number', 'of', 'United', 'Airlines', 'flights', 'leaving', 'from', 'AHD', 'Airport', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT COUNT(*) FROM flights T1, airlines T2, airports T3 WHERE T1.Airline = T2.Abbreviation AND T1.SourceAirport = T3.AirportCode AND T2.Airline = 'United Airlines' AND T3.AirportCode = 'AHD'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \",\", \"airlines\", \"T2\", \",\", \"airports\", \"T3\", \"WHERE\", \"T1\", \".\", \"Airline\", \"=\", \"T2\", \".\", \"Abbreviation\", \"AND\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T3\", \".\", \"AirportCode\", \"AND\", \"T2\", \".\", \"Airline\", \"=\", \"'United Airlines'\", \"AND\", \"T3\", \".\", \"AirportCode\", \"=\", \"'AHD'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \",\", \"airlines\", \"T2\", \",\", \"airports\", \"T3\", \"WHERE\", \"T1\", \".\", \"Airline\", \"=\", \"T2\", \".\", \"Abbreviation\", \"AND\", \"T1\", \".\", \"SourceAirport\", \"=\", \"T3\", \".\", \"AirportCode\", \"AND\", \"T2\", \".\", \"Airline\", \"=\", \"\", \"AND\", \"T3\", \".\", \"AirportCode\", \"=\", \"\"],\n  \"question\": \"Return the number of United Airlines flights leaving from AHD Airport.\",\n  \"question_toks\": [\"Return\", \"the\", \"number\", \"of\", \"United\", \"Airlines\", \"flights\", \"leaving\", \"from\", \"AHD\", \"Airport\", \".\"]\n}"}
{"question": "How many United Airlines flights go to City 'Aberdeen'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many United Airlines flights go to City 'Aberdeen'?\",\n\"question_toks\": \"['How', 'many', 'United', 'Airlines', 'flights', 'go', 'to', 'City', \"'Aberdeen\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"flight_2\",\n\"query\": \"SELECT COUNT(*) FROM flights T1 INNER JOIN airlines T2 ON T1.Airline=T2.Abbreviation INNER JOIN airports T3 ON T1.DestAirport=T3.AirportCode WHERE T3.City='Aberdeen' AND T2.Airline='United Airlines'\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'flights', 'T1', 'INNER', 'JOIN', 'airlines', 'T2', 'ON', 'T1', '.', 'Airline', '=', 'T2', '.', 'Abbreviation', 'INNER', 'JOIN', 'airports', 'T3', 'ON', 'T1', '.', 'DestAirport', '=', 'T3', '.', 'AirportCode', 'WHERE', 'T3', '.', 'City', '=', \"'\", 'Aberdeen', \"'\", 'AND', 'T2', '.', 'Airline', '=', \"'\", 'United', 'Airlines', \"'']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'flights', 'T1', 'INNER', 'JOIN', 'airlines', 'T2', 'ON', 'T1', '.', 'Airline', '=', 'T2', '.', 'Abbreviation', 'INNER', 'JOIN', 'airports', 'T3', 'ON', 'T1', '.', 'DestAirport', '=', 'T3', '.', 'AirportCode', 'WHERE', 'T3', '.', 'City', '=', 'Aberdeen', 'AND', 'T2', '.', 'Airline', '=', 'United Airlines']\",\n\"question\": \"How many United Airlines flights go to City 'Aberdeen'?\",\n\"question_toks\": \"['How', 'many', 'United', 'Airlines', 'flights', 'go', 'to', 'City', \"'Aberdeen\", \"'\", '?']}\""}
{"question": "Count the number of United Airlines flights that arrive in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Count the number of United Airlines flights that arrive in Aberdeen.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'United', 'Airlines', 'flights', 'that', 'arrive', 'in', 'Aberdeen', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT COUNT(*) FROM flights T1 JOIN airlines T2 ON T1.Airline=T2.Abbreviation WHERE T2.Airline='United Airlines' AND T1.DestAirport='Aberdeen';\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"JOIN\", \"airlines\", \"T2\", \"ON\", \"T1\", \".\", \"Airline\", \"=\", \"T2\", \".\", \"Abbreviation\", \"WHERE\", \"T2\", \".\", \"Airline\", \"=\", \"'United Airlines'\", \"AND\", \"T1\", \".\", \"DestAirport\", \"=\", \"'Aberdeen'\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"flights\", \"T1\", \"JOIN\", \"airlines\", \"T2\", \"ON\", \"T1\", \".\", \"Airline\", \"=\", \"T2\", \".\", \"Abbreviation\", \"WHERE\", \"T2\", \".\", \"Airline\", \"=\", \"VALUE\", \"AND\", \"T1\", \".\", \"DestAirport\", \"=\", \"VALUE\", \";\"],\n    \"question\": \"Count the number of United Airlines flights that arrive in Aberdeen.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"United\", \"Airlines\", \"flights\", \"that\", \"arrive\", \"in\", \"Aberdeen\", \".\"]\n}"}
{"question": "Which city has most number of arriving flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which city has most number of arriving flights?\",\n\"question_toks\": \"['Which', 'city', 'has', 'most', 'number', 'of', 'arriving', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT DestAirport AS city, COUNT(*) AS num_arrivals FROM flights GROUP BY DestAirport ORDER BY num_arrivals DESC LIMIT 1;\",\n    \"query_toks\": \"['SELECT', 'DestAirport', 'AS', 'city', ',', 'COUNT', '(', '*', ')', 'AS', 'num_arrivals', 'FROM', 'flights', 'GROUP', 'BY', 'DestAirport', 'ORDER', 'BY', 'num_arrivals', 'DESC', 'LIMIT', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DestAirport', 'AS', 'city', ',', 'COUNT', '(', '*', ')', 'AS', 'num_arrivals', 'FROM', 'flights', 'GROUP', 'BY', 'DestAirport', 'ORDER', 'BY', 'num_arrivals', 'DESC', 'LIMIT', '1', ';']\",\n    \"question\": \"Which city has most number of arriving flights?\",\n    \"question_toks\": \"['Which', 'city', 'has', 'most', 'number', 'of', 'arriving', 'flights', '?']\"\n}"}
{"question": "Which city has the most frequent destination airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which city has the most frequent destination airport?\",\n\"question_toks\": \"['Which', 'city', 'has', 'the', 'most', 'frequent', 'destination', 'airport', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT SourceAirport AS city, COUNT(DestAirport) AS freq_destinations FROM flights GROUP BY SourceAirport ORDER BY freq_destinations DESC LIMIT 1\",\n    \"query_toks\": [\"SELECT\", \"SourceAirport\", \"AS\", \"city\", \",\", \"COUNT\", \"(\", \"DestAirport\", \")\", \"AS\", \"freq_destinations\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"SourceAirport\", \"ORDER\", \"BY\", \"freq_destinations\", \"DESC\", \"LIMIT\", \"1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"SourceAirport\", \"AS\", \"city\", \",\", \"COUNT\", \"(\", \"DestAirport\", \")\", \"AS\", \"freq_destinations\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"SourceAirport\", \"ORDER\", \"BY\", \"freq_destinations\", \"DESC\", \"LIMIT\", \"1\"],\n    \"question\": \"Which city has the most frequent destination airport?\",\n    \"question_toks\": [\"Which\", \"city\", \"has\", \"the\", \"most\", \"frequent\", \"destination\", \"airport\", \"?\"]\n}"}
{"question": "Which city has most number of departing flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which city has most number of departing flights?\",\n\"question_toks\": \"['Which', 'city', 'has', 'most', 'number', 'of', 'departing', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT SourceAirport AS City, COUNT(*) AS DepartingFlights FROM flights GROUP BY City ORDER BY DepartingFlights DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'SourceAirport', 'AS', 'City', ',', 'COUNT', '(', '*', ')', 'AS', 'DepartingFlights', 'FROM', 'flights', 'GROUP', 'BY', 'City', 'ORDER', 'BY', 'DepartingFlights', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'SourceAirport', 'AS', 'City', ',', 'COUNT', '(', '*', ')', 'AS', 'DepartingFlights', 'FROM', 'flights', 'GROUP', 'BY', 'City', 'ORDER', 'BY', 'DepartingFlights', 'DESC', 'LIMIT', '1']\",\n    \"question\": \"Which city has most number of departing flights?\",\n    \"question_toks\": \"['Which', 'city', 'has', 'most', 'number', 'of', 'departing', 'flights', '?']\"\n}"}
{"question": "Which city is the most frequent source airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which city is the most frequent source airport?\",\n\"question_toks\": \"['Which', 'city', 'is', 'the', 'most', 'frequent', 'source', 'airport', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT SourceAirport AS 'most_frequent_source_airport', COUNT(*) AS 'num_flights' FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'SourceAirport', 'AS', ''most_frequent_source_airport'', ',', 'COUNT', '(', '*', ')', 'AS', ''num_flights'', 'FROM', 'flights', 'GROUP', 'BY', 'SourceAirport', 'ORDER', 'BY', 'num_flights', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'SourceAirport', 'AS', '', ',', 'COUNT', '(', '*', ')', 'AS', '', 'FROM', 'flights', 'GROUP', 'BY', 'SourceAirport', 'ORDER', 'BY', '', 'DESC', 'LIMIT', '1']\",\n    \"question\": \"Which city is the most frequent source airport?\",\n    \"question_toks\": \"['Which', 'city', 'is', 'the', 'most', 'frequent', 'source', 'airport', '?']\"\n}"}
{"question": "What is the code of airport that has the highest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What is the code of airport that has the highest number of flights?\",\n\"question_toks\": \"['What', 'is', 'the', 'code', 'of', 'airport', 'that', 'has', 'the', 'highest', 'number', 'of', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"flight_2\",\n\"query\": \"SELECT AirportCode FROM (SELECT SourceAirport AS AirportCode, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport UNION ALL SELECT DestAirport AS AirportCode, COUNT(*) AS num_flights FROM flights GROUP BY DestAirport) t ORDER BY num_flights DESC LIMIT 1\",\n\"query_toks\": [\"SELECT\", \"AirportCode\", \"FROM\", \"(\", \"SELECT\", \"SourceAirport\", \"AS\", \"AirportCode\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"SourceAirport\", \"UNION\", \"ALL\", \"SELECT\", \"DestAirport\", \"AS\", \"AirportCode\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"DestAirport\", \")\", \"t\", \"ORDER\", \"BY\", \"num_flights\", \"DESC\", \"LIMIT\", \"1\"],\n\"query_toks_no_value\": [\"SELECT\", \"AirportCode\", \"FROM\", \"(\", \"SELECT\", \"SourceAirport\", \"AS\", \"AirportCode\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"SourceAirport\", \"UNION\", \"ALL\", \"SELECT\", \"DestAirport\", \"AS\", \"AirportCode\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"DestAirport\", \")\", \"t\", \"ORDER\", \"BY\", \"num_flights\", \"DESC\", \"LIMIT\", \"1\"],\n\"question\": \"What is the code of airport that has the highest number of flights?\",\n\"question_toks\": [\"What\", \"is\", \"the\", \"code\", \"of\", \"airport\", \"that\", \"has\", \"the\", \"highest\", \"number\", \"of\", \"flights\", \"?\"]}"}
{"question": "What is the airport code of the airport with the most flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What is the airport code of the airport with the most flights?\",\n\"question_toks\": \"['What', 'is', 'the', 'airport', 'code', 'of', 'the', 'airport', 'with', 'the', 'most', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT AirportCode FROM (SELECT SourceAirport AS AirportCode, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport UNION SELECT DestAirport AS AirportCode, COUNT(*) AS FlightCount FROM flights GROUP BY DestAirport) AS AllFlights ORDER BY FlightCount DESC LIMIT 1;\",\n  \"query_toks\": \"['SELECT', 'AirportCode', 'FROM', '(', 'SELECT', 'SourceAirport', 'AS', 'AirportCode', ',', 'COUNT', '(', '*', ')', 'AS', 'FlightCount', 'FROM', 'flights', 'GROUP', 'BY', 'SourceAirport', 'UNION', 'SELECT', 'DestAirport', 'AS', 'AirportCode', ',', 'COUNT', '(', '*', ')', 'AS', 'FlightCount', 'FROM', 'flights', 'GROUP', 'BY', 'DestAirport', ')', 'AS', 'AllFlights', 'ORDER', 'BY', 'FlightCount', 'DESC', 'LIMIT', '1', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'AirportCode', 'FROM', '(', 'SELECT', 'SourceAirport', 'AS', 'AirportCode', ',', 'COUNT', '(', '*', ')', 'AS', 'FlightCount', 'FROM', 'flights', 'GROUP', 'BY', 'SourceAirport', 'UNION', 'SELECT', 'DestAirport', 'AS', 'AirportCode', ',', 'COUNT', '(', '*', ')', 'AS', 'FlightCount', 'FROM', 'flights', 'GROUP', 'BY', 'DestAirport', ')', 'AS', 'AllFlights', 'ORDER', 'BY', 'FlightCount', 'DESC', 'LIMIT', '1', ';']\",\n  \"question\": \"What is the airport code of the airport with the most flights?\",\n  \"question_toks\": \"['What', 'is', 'the', 'airport', 'code', 'of', 'the', 'airport', 'with', 'the', 'most', 'flights', '?']\"\n}"}
{"question": "What is the code of airport that has fewest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What is the code of airport that has fewest number of flights?\",\n\"question_toks\": \"['What', 'is', 'the', 'code', 'of', 'airport', 'that', 'has', 'fewest', 'number', 'of', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT SourceAirport as Airport, COUNT(*) AS Flights\\nFROM flights\\nGROUP BY Airport\\nORDER BY Flights\\nLIMIT 1\",\n    \"query_toks\": [\"SELECT\", \"SourceAirport\", \"as\", \"Airport\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"Flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"Airport\", \"ORDER\", \"BY\", \"Flights\", \"LIMIT\", \"1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"SourceAirport\", \"as\", \"Airport\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"Flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"Airport\", \"ORDER\", \"BY\", \"Flights\", \"LIMIT\", \"1\"],\n    \"question\": \"What is the code of airport that has fewest number of flights?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"code\", \"of\", \"airport\", \"that\", \"has\", \"fewest\", \"number\", \"of\", \"flights\", \"?\"]\n}"}
{"question": "Give the code of the airport with the least flights.", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Give the code of the airport with the least flights.\",\n\"question_toks\": \"['Give', 'the', 'code', 'of', 'the', 'airport', 'with', 'the', 'least', 'flights', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT AirportCode FROM airports AS T1 JOIN (SELECT SourceAirport AS airport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport UNION ALL SELECT DestAirport AS airport, COUNT(*) AS num_flights FROM flights GROUP BY DestAirport) AS T2 ON T1.AirportCode = T2.airport ORDER BY num_flights ASC LIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"AirportCode\", \"FROM\", \"airports\", \"AS\", \"T1\", \"JOIN\", \"(\", \"SELECT\", \"SourceAirport\", \"AS\", \"airport\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"SourceAirport\", \"UNION\", \"ALL\", \"SELECT\", \"DestAirport\", \"AS\", \"airport\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"DestAirport\", \")\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"AirportCode\", \"=\", \"T2\", \".\", \"airport\", \"ORDER\", \"BY\", \"num_flights\", \"ASC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"AirportCode\", \"FROM\", \"airports\", \"AS\", \"T1\", \"JOIN\", \"(\", \"SELECT\", \"SourceAirport\", \"AS\", \"airport\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"SourceAirport\", \"UNION\", \"ALL\", \"SELECT\", \"DestAirport\", \"AS\", \"airport\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"DestAirport\", \")\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"AirportCode\", \"=\", \"T2\", \".\", \"airport\", \"ORDER\", \"BY\", \"num_flights\", \"ASC\", \"LIMIT\", \"1\"],\n  \"question\": \"Give the code of the airport with the least flights.\",\n  \"question_toks\": [\"Give\", \"the\", \"code\", \"of\", \"the\", \"airport\", \"with\", \"the\", \"least\", \"flights\", \".\"]\n}"}
{"question": "Which airline has most number of flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which airline has most number of flights?\",\n\"question_toks\": \"['Which', 'airline', 'has', 'most', 'number', 'of', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;\",\n    \"query_toks\": \"['SELECT', 'Airline', 'FROM', 'flights', 'GROUP', 'BY', 'Airline', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'Airline', 'FROM', 'flights', 'GROUP', 'BY', 'Airline', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']\",\n    \"question\": \"Which airline has most number of flights?\",\n    \"question_toks\": \"['Which', 'airline', 'has', 'most', 'number', 'of', 'flights', '?']\"\n}"}
{"question": "What airline serves the most flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What airline serves the most flights?\",\n\"question_toks\": \"['What', 'airline', 'serves', 'the', 'most', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;\",\n  \"query_toks\": [\"SELECT\", \"Airline\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"Airline\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Airline\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"Airline\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n  \"question\": \"What airline serves the most flights?\",\n  \"question_toks\": [\"What\", \"airline\", \"serves\", \"the\", \"most\", \"flights\", \"?\"]\n}"}
{"question": "Find the abbreviation and country of the airline that has fewest number of flights?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Find the abbreviation and country of the airline that has fewest number of flights?\",\n\"question_toks\": \"['Find', 'the', 'abbreviation', 'and', 'country', 'of', 'the', 'airline', 'that', 'has', 'fewest', 'number', 'of', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT Abbreviation, Country FROM (SELECT Airline, Abbreviation, Country, COUNT(*) AS num_flights FROM airlines GROUP BY Airline ORDER BY num_flights ASC LIMIT 1) AS T1\",\n  \"query_toks\": [\"SELECT\", \"Abbreviation\", \",\", \"Country\", \"FROM\", \"(\", \"SELECT\", \"Airline\", \",\", \"Abbreviation\", \",\", \"Country\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"airlines\", \"GROUP\", \"BY\", \"Airline\", \"ORDER\", \"BY\", \"num_flights\", \"ASC\", \"LIMIT\", \"1\", \")\", \"AS\", \"T1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Abbreviation\", \",\", \"Country\", \"FROM\", \"(\", \"SELECT\", \"Airline\", \",\", \"Abbreviation\", \",\", \"Country\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_flights\", \"FROM\", \"airlines\", \"GROUP\", \"BY\", \"Airline\", \"ORDER\", \"BY\", \"num_flights\", \"ASC\", \"LIMIT\", \"1\", \")\", \"AS\", \"T1\"],\n  \"question\": \"Find the abbreviation and country of the airline that has fewest number of flights?\",\n  \"question_toks\": [\"Find\", \"the\", \"abbreviation\", \"and\", \"country\", \"of\", \"the\", \"airline\", \"that\", \"has\", \"fewest\", \"number\", \"of\", \"flights\", \"?\"]\n}"}
{"question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What is the abbreviation of the airilne has the fewest flights and what country is it in?\",\n\"question_toks\": \"['What', 'is', 'the', 'abbreviation', 'of', 'the', 'airilne', 'has', 'the', 'fewest', 'flights', 'and', 'what', 'country', 'is', 'it', 'in', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT Abbreviation, Country FROM (SELECT Airline, COUNT(*) as num_flights FROM flights GROUP BY Airline) as T1 JOIN airlines ON T1.Airline = airlines.uid ORDER BY num_flights ASC LIMIT 1\",\n  \"query_toks\": \"['SELECT', 'Abbreviation', ',', 'Country', 'FROM', '(', 'SELECT', 'Airline', ',', 'COUNT', '(', '*', ')', 'as', 'num_flights', 'FROM', 'flights', 'GROUP', 'BY', 'Airline', ')', 'as', 'T1', 'JOIN', 'airlines', 'ON', 'T1', '.', 'Airline', '=', 'airlines', '.', 'uid', 'ORDER', 'BY', 'num_flights', 'ASC', 'LIMIT', '1']\",\n  \"query_toks_no_value\": \"['SELECT', 'Abbreviation', ',', 'Country', 'FROM', '(', 'SELECT', 'Airline', ',', 'COUNT', '(', '*', ')', 'as', 'num_flights', 'FROM', 'flights', 'GROUP', 'BY', 'Airline', ')', 'as', 'T1', 'JOIN', 'airlines', 'ON', 'T1', '.', 'Airline', '=', 'airlines', '.', 'uid', 'ORDER', 'BY', 'num_flights', 'ASC', 'LIMIT', '1']\",\n  \"question\": \"What is the abbreviation of the airilne has the fewest flights and what country is it in?\",\n  \"question_toks\": \"['What', 'is', 'the', 'abbreviation', 'of', 'the', 'airilne', 'has', 'the', 'fewest', 'flights', 'and', 'what', 'country', 'is', 'it', 'in', '?']\"\n}"}
{"question": "What are airlines that have some flight departing from airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are airlines that have some flight departing from airport 'AHD'?\",\n\"question_toks\": \"['What', 'are', 'airlines', 'that', 'have', 'some', 'flight', 'departing', 'from', 'airport', \"'AHD\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT DISTINCT T1.Airline FROM flights as T1 WHERE T1.SourceAirport = 'AHD' OR T1.DestAirport = 'AHD';\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Airline\", \"FROM\", \"flights\", \"AS\", \"T1\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"'AHD'\", \"OR\", \"T1\", \".\", \"DestAirport\", \"=\", \"'AHD'\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Airline\", \"FROM\", \"flights\", \"AS\", \"T1\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"value\", \"OR\", \"T1\", \".\", \"DestAirport\", \"=\", \"value\", \";\"],\n  \"question\": \"What are airlines that have some flight departing from airport 'AHD'?\",\n  \"question_toks\": [\"What\", \"are\", \"airlines\", \"that\", \"have\", \"some\", \"flight\", \"departing\", \"from\", \"airport\", \"'AHD'\", \"?\"]\n}"}
{"question": "Which airlines have a flight with source airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which airlines have a flight with source airport AHD?\",\n\"question_toks\": \"['Which', 'airlines', 'have', 'a', 'flight', 'with', 'source', 'airport', 'AHD', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"flight_2\",\n\"query\": \"SELECT DISTINCT Airline FROM flights T1 WHERE T1.SourceAirport='AHD'\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'Airline', 'FROM', 'flights', 'T1', 'WHERE', 'T1', '.', 'SourceAirport', '=', \\\"'AHD'\\\"\",\n\"',']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Airline', 'FROM', 'flights', 'T1', 'WHERE', 'T1', '.', 'SourceAirport', '=', '?', ',']\",\n\"question\": \"Which airlines have a flight with source airport AHD?\",\n\"question_toks\": \"['Which', 'airlines', 'have', 'a', 'flight', 'with', 'source', 'airport', 'AHD', '?']\"\n}"}
{"question": "What are airlines that have flights arriving at airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are airlines that have flights arriving at airport 'AHD'?\",\n\"question_toks\": \"['What', 'are', 'airlines', 'that', 'have', 'flights', 'arriving', 'at', 'airport', \"'AHD\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT DISTINCT airlines.Airline FROM flights, airports, airlines WHERE flights.DestAirport = airports.AirportCode AND airports.City = 'AHD' AND flights.Airline = airlines.Abbreviation;\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"airlines\", \".\", \"Airline\", \"FROM\", \"flights\", \",\", \"airports\", \",\", \"airlines\", \"WHERE\", \"flights\", \".\", \"DestAirport\", \"=\", \"airports\", \".\", \"AirportCode\", \"AND\", \"airports\", \".\", \"City\", \"=\", \"'AHD'\", \"AND\", \"flights\", \".\", \"Airline\", \"=\", \"airlines\", \".\", \"Abbreviation\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"airlines\", \".\", \"Airline\", \"FROM\", \"flights\", \",\", \"airports\", \",\", \"airlines\", \"WHERE\", \"flights\", \".\", \"DestAirport\", \"=\", \"airports\", \".\", \"AirportCode\", \"AND\", \"airports\", \".\", \"City\", \"=\", \"\", \"AND\", \"flights\", \".\", \"Airline\", \"=\", \"airlines\", \".\", \"Abbreviation\", \";\"],\n  \"question\": \"What are airlines that have flights arriving at airport 'AHD'?\",\n  \"question_toks\": [\"What\", \"are\", \"airlines\", \"that\", \"have\", \"flights\", \"arriving\", \"at\", \"airport\", \"'AHD'\", \"?\"],\n}"}
{"question": "Which airlines have a flight with destination airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which airlines have a flight with destination airport AHD?\",\n\"question_toks\": \"['Which', 'airlines', 'have', 'a', 'flight', 'with', 'destination', 'airport', 'AHD', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT DISTINCT Airline FROM flights T1 WHERE T1.DestAirport='AHD'\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"Airline\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"DestAirport\", \"=\", \"'AHD'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"Airline\", \"FROM\", \"flights\", \"T1\", \"WHERE\", \"T1\", \".\", \"DestAirport\", \"=\", \"?\"],\n  \"question\": \"Which airlines have a flight with destination airport AHD?\",\n  \"question_toks\": [\"Which\", \"airlines\", \"have\", \"a\", \"flight\", \"with\", \"destination\", \"airport\", \"AHD\", \"?\"]\n}"}
{"question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Find all airlines that have flights from both airports 'APG' and 'CVO'.\",\n\"question_toks\": \"['Find', 'all', 'airlines', 'that', 'have', 'flights', 'from', 'both', 'airports', \"'APG\", \"'\", 'and', \"'CVO\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT DISTINCT A.Airline FROM flights A JOIN flights B ON A.Airline = B.Airline WHERE A.SourceAirport = 'APG' AND B.SourceAirport = 'CVO'\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Airline\", \"FROM\", \"flights\", \"T1\", \"JOIN\", \"flights\", \"T2\", \"ON\", \"T1\", \".\", \"Airline\", \"=\", \"T2\", \".\", \"Airline\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"'APG'\", \"AND\", \"T2\", \".\", \"SourceAirport\", \"=\", \"'CVO'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Airline\", \"FROM\", \"flights\", \"T1\", \"JOIN\", \"flights\", \"T2\", \"ON\", \"T1\", \".\", \"Airline\", \"=\", \"T2\", \".\", \"Airline\", \"WHERE\", \"T1\", \".\", \"SourceAirport\", \"=\", \"\", \"AND\", \"T2\", \".\", \"SourceAirport\", \"=\", \"\"],\n    \"question\": \"Find all airlines that have flights from both airports 'APG' and 'CVO'.\",\n    \"question_toks\": [\"Find\", \"all\", \"airlines\", \"that\", \"have\", \"flights\", \"from\", \"both\", \"airports\", \"'APG'\", \"and\", \"'CVO'.\"],\n}"}
{"question": "Which airlines have departing flights from both APG and CVO airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which airlines have departing flights from both APG and CVO airports?\",\n\"question_toks\": \"['Which', 'airlines', 'have', 'departing', 'flights', 'from', 'both', 'APG', 'and', 'CVO', 'airports', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT DISTINCT T1.Airline FROM flights T1, flights T2 WHERE T1.SourceAirport='APG' AND T2.SourceAirport='CVO' AND T1.Airline=T2.Airline\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'T1', '.', 'Airline', 'FROM', 'flights', 'T1', ',', 'flights', 'T2', 'WHERE', 'T1', '.', 'SourceAirport', '=', '\\\\\\\"APG\\\\\\\"', 'AND', 'T2', '.', 'SourceAirport', '=', '\\\\\\\"CVO\\\\\\\"', 'AND', 'T1', '.', 'Airline', '=', 'T2', '.', 'Airline']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T1', '.', 'Airline', 'FROM', 'flights', 'T1', ',', 'flights', 'T2', 'WHERE', 'T1', '.', 'SourceAirport', '=', '?', 'AND', 'T2', '.', 'SourceAirport', '=', '?', 'AND', 'T1', '.', 'Airline', '=', 'T2', '.', 'Airline']\",\n  \"question\": \"Which airlines have departing flights from both APG and CVO airports?\",\n  \"question_toks\": \"['Which', 'airlines', 'have', 'departing', 'flights', 'from', 'both', 'APG', 'and', 'CVO', 'airports', '?']\"\n}"}
{"question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Find all airlines that have flights from airport 'CVO' but not from 'APG'.\",\n\"question_toks\": \"['Find', 'all', 'airlines', 'that', 'have', 'flights', 'from', 'airport', \"'CVO\", \"'\", 'but', 'not', 'from', \"'APG\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT DISTINCT T1.Airline FROM flights T1 WHERE T1.SourceAirport='CVO' AND NOT EXISTS (SELECT * FROM flights T2 WHERE T2.Airline=T1.Airline AND T2.SourceAirport='APG')\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'T1', '.', 'Airline', 'FROM', 'flights', 'T1', 'WHERE', 'T1', '.', 'SourceAirport', '=', \\\"'CVO'\\\"', 'AND', 'NOT', 'EXISTS', '(', 'SELECT', '*', 'FROM', 'flights', 'T2', 'WHERE', 'T2', '.', 'Airline', '=', 'T1', '.', 'Airline', 'AND', 'T2', '.', 'SourceAirport', '=', \\\"'APG'\\\"', ')']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T1', '.', 'Airline', 'FROM', 'flights', 'T1', 'WHERE', 'T1', '.', 'SourceAirport', '=', '', 'AND', 'NOT', 'EXISTS', '(', 'SELECT', '*', 'FROM', 'flights', 'T2', 'WHERE', 'T2', '.', 'Airline', '=', 'T1', '.', 'Airline', 'AND', 'T2', '.', 'SourceAirport', '=', '', ')']\",\n  \"question\": \"Find all airlines that have flights from airport 'CVO' but not from 'APG'.\",\n  \"question_toks\": \"['Find', 'all', 'airlines', 'that', 'have', 'flights', 'from', 'airport', \\\"'CVO'\\\"', 'but', 'not', 'from', \\\"'APG'\\\"', '.']\"\n}"}
{"question": "Which airlines have departures from CVO but not from APG airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which airlines have departures from CVO but not from APG airports?\",\n\"question_toks\": \"['Which', 'airlines', 'have', 'departures', 'from', 'CVO', 'but', 'not', 'from', 'APG', 'airports', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT DISTINCT T1.Airline \\nFROM flights AS T1\\nWHERE T1.SourceAirport = 'CVO' AND T1.Airline NOT IN (SELECT T2.Airline FROM flights AS T2 WHERE T2.SourceAirport = 'APG');\",\n  \"query_toks\": [\n    \"SELECT\",\n    \"DISTINCT\",\n    \"T1\",\n    \".\",\n    \"Airline\",\n    \"FROM\",\n    \"flights\",\n    \"AS\",\n    \"T1\",\n    \"WHERE\",\n    \"T1\",\n    \".\",\n    \"SourceAirport\",\n    \"=\",\n    \"'CVO'\",\n    \"AND\",\n    \"T1\",\n    \".\",\n    \"Airline\",\n    \"NOT\",\n    \"IN\",\n    \"(\",\n    \"SELECT\",\n    \"T2\",\n    \".\",\n    \"Airline\",\n    \"FROM\",\n    \"flights\",\n    \"AS\",\n    \"T2\",\n    \"WHERE\",\n    \"T2\",\n    \".\",\n    \"SourceAirport\",\n    \"=\",\n    \"'APG'\",\n    \")\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\",\n    \"DISTINCT\",\n    \"T1\",\n    \".\",\n    \"Airline\",\n    \"FROM\",\n    \"flights\",\n    \"AS\",\n    \"T1\",\n    \"WHERE\",\n    \"T1\",\n    \".\",\n    \"SourceAirport\",\n    \"=\",\n    \"?\",\n    \"AND\",\n    \"T1\",\n    \".\",\n    \"Airline\",\n    \"NOT\",\n    \"IN\",\n    \"(\",\n    \"SELECT\",\n    \"T2\",\n    \".\",\n    \"Airline\",\n    \"FROM\",\n    \"flights\",\n    \"AS\",\n    \"T2\",\n    \"WHERE\",\n    \"T2\",\n    \".\",\n    \"SourceAirport\",\n    \"=\",\n    \"?\",\n    \")\"\n  ],\n  \"question\": \"Which airlines have departures from CVO but not from APG airports?\",\n  \"question_toks\": [\n    \"Which\",\n    \"airlines\",\n    \"have\",\n    \"departures\",\n    \"from\",\n    \"CVO\",\n    \"but\",\n    \"not\",\n    \"from\",\n    \"APG\",\n    \"airports\",\n    \"?\"\n  ]\n}"}
{"question": "Find all airlines that have at least 10 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Find all airlines that have at least 10 flights.\",\n\"question_toks\": \"['Find', 'all', 'airlines', 'that', 'have', 'at', 'least', '10', 'flights', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;\",\n    \"query_toks\": [\"SELECT\", \"Airline\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"Airline\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"10\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Airline\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"Airline\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"?\", \";\"],\n    \"question\": \"Find all airlines that have at least 10 flights.\",\n    \"question_toks\": [\"Find\", \"all\", \"airlines\", \"that\", \"have\", \"at\", \"least\", \"10\", \"flights\", \".\"]\n}"}
{"question": "Which airlines have at least 10 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which airlines have at least 10 flights?\",\n\"question_toks\": \"['Which', 'airlines', 'have', 'at', 'least', '10', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;\",\n    \"query_toks\": \"['SELECT', 'Airline', 'FROM', 'flights', 'GROUP', 'BY', 'Airline', 'HAVING', 'COUNT', '(', '*', ')', '>=', '10', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'Airline', 'FROM', 'flights', 'GROUP', 'BY', 'Airline', 'HAVING', 'COUNT', '(', '*', ')', '>=', '<value>', ';']\",\n    \"question\": \"Which airlines have at least 10 flights?\",\n    \"question_toks\": \"['Which', 'airlines', 'have', 'at', 'least', '10', 'flights', '?']\"\n}"}
{"question": "Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Find all airlines that have fewer than 200 flights.\",\n\"question_toks\": \"['Find', 'all', 'airlines', 'that', 'have', 'fewer', 'than', '200', 'flights', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT Airline\\nFROM flights AS T1\\nGROUP BY Airline\\nHAVING COUNT(*) < 200;\",\n    \"query_toks\": \"[SELECT, Airline, FROM, flights, AS, T1, GROUP, BY, Airline, HAVING, COUNT, (, *, ), <, 200, ;]\",\n    \"query_toks_no_value\": \"[SELECT, Airline, FROM, flights, AS, T1, GROUP, BY, Airline, HAVING, COUNT, (, ), <, ;]\",\n    \"question\": \"Find all airlines that have fewer than 200 flights.\",\n    \"question_toks\": \"['Find', 'all', 'airlines', 'that', 'have', 'fewer', 'than', '200', 'flights', '.']\"\n}"}
{"question": "Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which airlines have less than 200 flights?\",\n\"question_toks\": \"['Which', 'airlines', 'have', 'less', 'than', '200', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT DISTINCT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"Airline\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"Airline\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \"<\", \"200\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"Airline\", \"FROM\", \"flights\", \"GROUP\", \"BY\", \"Airline\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \"<\"],\n    \"question\": \"Which airlines have less than 200 flights?\",\n    \"question_toks\": [\"Which\", \"airlines\", \"have\", \"less\", \"than\", \"200\", \"flights\", \"?\"]\n}"}
{"question": "What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are flight numbers of Airline \"United Airlines\"?\",\n\"question_toks\": \"['What', 'are', 'flight', 'numbers', 'of', 'Airline', '``', 'United', 'Airlines', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT FlightNo FROM flights WHERE Airline='United Airlines'\",\n    \"query_toks\": [\"SELECT\", \"FlightNo\", \"FROM\", \"flights\", \"WHERE\", \"Airline\", \"=\", \"'United Airlines'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"FlightNo\", \"FROM\", \"flights\", \"WHERE\", \"Airline\", \"=\"],\n    \"question\": \"What are flight numbers of Airline \\\"United Airlines\\\"?\",\n    \"question_toks\": [\"What\", \"are\", \"flight\", \"numbers\", \"of\", \"Airline\", \"\\\"United\", \"Airlines\\\"\", \"?\"]\n}"}
{"question": "Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which flight numbers correspond to United Airlines flights?\",\n\"question_toks\": \"['Which', 'flight', 'numbers', 'correspond', 'to', 'United', 'Airlines', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT FlightNo FROM flights WHERE Airline='United Airlines'\",\n    \"query_toks\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'WHERE', 'Airline', '=',  'United Airlines', '']\",\n    \"query_toks_no_value\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'WHERE', 'Airline', '=',  'string', '']\",\n    \"question\": \"Which flight numbers correspond to United Airlines flights?\",\n    \"question_toks\": \"['Which', 'flight', 'numbers', 'correspond', 'to', 'United', 'Airlines', 'flights', '?']\"\n}"}
{"question": "What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are flight numbers of flights departing from Airport \"APG\"?\",\n\"question_toks\": \"['What', 'are', 'flight', 'numbers', 'of', 'flights', 'departing', 'from', 'Airport', '``', 'APG', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT FlightNo FROM flights T1 WHERE T1.SourceAirport = 'APG'\",\n    \"query_toks\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'T1', 'WHERE', 'T1', '.', 'SourceAirport', '=', ''', 'APG', ''']\",\n    \"query_toks_no_value\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'T1', 'WHERE', 'T1', '.', 'SourceAirport', '=', '', '', '']\",\n    \"question\": \"What are flight numbers of flights departing from Airport \\\"APG\\\"?\",\n    \"question_toks\": \"['What', 'are', 'flight', 'numbers', 'of', 'flights', 'departing', 'from', 'Airport', '``', 'APG', \"''\", '?']\"\n}"}
{"question": "Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Give the flight numbers of flights leaving from APG.\",\n\"question_toks\": \"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'leaving', 'from', 'APG', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"flight_2\",\n\"query\": \"SELECT FlightNo FROM flights AS T1, airports AS T2 WHERE T1.SourceAirport = T2.AirportCode AND T2.AirportName = 'Phillips Army Airfield';\",\n \"query_toks\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'AS', 'T1', ',', 'airports', 'AS', 'T2', 'WHERE', 'T1', '.', 'SourceAirport', '=', 'T2', '.', 'AirportCode', 'AND', 'T2', '.', 'AirportName', '=',\\\\\", 'Phillips Army Airfield', '\\\\';']\",\n \"query_toks_no_value\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'AS', 'T1', ',', 'airports', 'AS', 'T2', 'WHERE', 'T1', '.', 'SourceAirport', '=', 'T2', '.', 'AirportCode', 'AND', 'T2', '.', 'AirportName', '=', '\\\\\",', '.', '\\\\';']\",\n\"question\": \"Give the flight numbers of flights leaving from APG.\",\n\"question_toks\": \"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'leaving', 'from', 'APG', '.']}\""}
{"question": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are flight numbers of flights arriving at Airport \"APG\"?\",\n\"question_toks\": \"['What', 'are', 'flight', 'numbers', 'of', 'flights', 'arriving', 'at', 'Airport', '``', 'APG', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT FlightNo FROM flights WHERE DestAirport = 'APG'\",\n  \"query_toks\": [\"SELECT\", \"FlightNo\", \"FROM\", \"flights\", \"WHERE\", \"DestAirport\", \"=\", \"'APG'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"FlightNo\", \"FROM\", \"flights\", \"WHERE\", \"DestAirport\", \"=\"],\n  \"question\": \"What are flight numbers of flights arriving at Airport \\\"APG\\\"?\",\n  \"question_toks\": [\"What\", \"are\", \"flight\", \"numbers\", \"of\", \"flights\", \"arriving\", \"at\", \"Airport\", \"\\\"APG\\\"\", \"?\"]\n}"}
{"question": "Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Give the flight numbers of flights landing at APG.\",\n\"question_toks\": \"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'landing', 'at', 'APG', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"flight_2\",\n\"query\": \"SELECT FlightNo FROM flights WHERE DestAirport = 'APG'\",\n\"query_toks\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'WHERE', 'DestAirport', '=', ''''', 'APG', ''''']\",\n\"query_toks_no_value\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'WHERE', 'DestAirport', '=', 'APG']\",\n\"question\": \"Give the flight numbers of flights landing at APG.\",\n\"question_toks\": \"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'landing', 'at', 'APG', '.']\"}"}
{"question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are flight numbers of flights departing from City \"Aberdeen \"?\",\n\"question_toks\": \"['What', 'are', 'flight', 'numbers', 'of', 'flights', 'departing', 'from', 'City', '``', 'Aberdeen', '``', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT FlightNo FROM flights T1, airports T2 WHERE T1.SourceAirport = T2.AirportCode AND T2.City = 'Aberdeen'\",\n  \"query_toks\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'T1', ',', 'airports', 'T2', 'WHERE', 'T1', '.', 'SourceAirport', '=', 'T2', '.', 'AirportCode', 'AND', 'T2', '.', 'City', '=', ''''', 'Aberdeen', ''''']\",\n  \"query_toks_no_value\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'T1', ',', 'airports', 'T2', 'WHERE', 'T1', '.', 'SourceAirport', '=', 'T2', '.', 'AirportCode', 'AND', 'T2', '.', 'City', '=', '', '']\",\n  \"question\": \"What are flight numbers of flights departing from City \\\"Aberdeen\\\"?\",\n  \"question_toks\": \"['What', 'are', 'flight', 'numbers', 'of', 'flights', 'departing', 'from', 'City', '``', 'Aberdeen', '``', '?']\"\n}"}
{"question": "Give the flight numbers of flights leaving from Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Give the flight numbers of flights leaving from Aberdeen.\",\n\"question_toks\": \"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'leaving', 'from', 'Aberdeen', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"flight_2\",\n\"query\": \"SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport=T2.AirportCode WHERE T2.City='Aberdeen'\",\n\"query_toks\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'AS', 'T1', 'JOIN', 'airports', 'AS', 'T2', 'ON', 'T1', '.', 'SourceAirport', '=', 'T2', '.', 'AirportCode', 'WHERE', 'T2', '.', 'City', '=', ''', 'Aberdeen', ''']\",\n\"query_toks_no_value\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'AS', 'T1', 'JOIN', 'airports', 'AS', 'T2', 'ON', 'T1', '.', 'SourceAirport', '=', 'T2', '.', 'AirportCode', 'WHERE', 'T2', '.', 'City', '=', '', '']\",\n\"question\": \"Give the flight numbers of flights leaving from Aberdeen.\",\n\"question_toks\": \"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'leaving', 'from', 'Aberdeen', '.']\"\n}"}
{"question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"What are flight numbers of flights arriving at City \"Aberdeen\"?\",\n\"question_toks\": \"['What', 'are', 'flight', 'numbers', 'of', 'flights', 'arriving', 'at', 'City', '``', 'Aberdeen', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT FlightNo FROM flights T1 INNER JOIN airports T2 ON T1.DestAirport=T2.AirportCode WHERE T2.City='Aberdeen'\",\n  \"query_toks\": [\"SELECT\", \"FlightNo\", \"FROM\", \"flights\", \"T1\", \"INNER\", \"JOIN\", \"airports\", \"T2\", \"ON\", \"T1\", \".\", \"DestAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"WHERE\", \"T2\", \".\", \"City\", \"=\", \"'\", \"Aberdeen\", \"'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"FlightNo\", \"FROM\", \"flights\", \"T1\", \"INNER\", \"JOIN\", \"airports\", \"T2\", \"ON\", \"T1\", \".\", \"DestAirport\", \"=\", \"T2\", \".\", \"AirportCode\", \"WHERE\", \"T2\", \".\", \"City\", \"=\", \"?\"],\n  \"question\": \"What are flight numbers of flights arriving at City \\\"Aberdeen\\\"?\",\n  \"question_toks\": [\"What\", \"are\", \"flight\", \"numbers\", \"of\", \"flights\", \"arriving\", \"at\", \"City\", \"\\\"\", \"Aberdeen\", \"\\\"\", \"?\"]\n}"}
{"question": "Give the flight numbers of flights arriving in Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Give the flight numbers of flights arriving in Aberdeen.\",\n\"question_toks\": \"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'arriving', 'in', 'Aberdeen', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'\",\n    \"query_toks\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'T1', 'JOIN', 'airports', 'T2', 'ON', 'T1', '.', 'DestAirport', '=', 'T2', '.', 'AirportCode', 'WHERE', 'T2', '.', 'City', '=', ''Aberdeen'']\",\n    \"query_toks_no_value\": \"['SELECT', 'FlightNo', 'FROM', 'flights', 'T1', 'JOIN', 'airports', 'T2', 'ON', 'T1', '.', 'DestAirport', '=', 'T2', '.', 'AirportCode', 'WHERE', 'T2', '.', 'City', '=', '']\",\n    \"question\": \"Give the flight numbers of flights arriving in Aberdeen.\",\n    \"question_toks\": \"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'arriving', 'in', 'Aberdeen', '.']\"\n}"}
{"question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Find the number of flights landing in the city of Aberdeen or Abilene.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'flights', 'landing', 'in', 'the', 'city', 'of', 'Aberdeen', 'or', 'Abilene', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"flight_2\",\n  \"query\": \"SELECT COUNT(*) FROM (SELECT * FROM flights f JOIN airports a ON f.DestAirport=a.AirportCode WHERE a.City='Aberdeen' OR a.City='Abilene') T1\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"(\", \"SELECT\", \"*\", \"FROM\", \"flights\", \"f\", \"JOIN\", \"airports\", \"a\", \"ON\", \"f\", \".\", \"DestAirport\", \"=\", \"a\", \".\", \"AirportCode\", \"WHERE\", \"a\", \".\", \"City\", \"=\", \"'Aberdeen'\", \"OR\", \"a\", \".\", \"City\", \"=\", \"'Abilene'\", \")\", \"T1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"(\", \"SELECT\", \"*\", \"FROM\", \"flights\", \"f\", \"JOIN\", \"airports\", \"a\", \"ON\", \"f\", \".\", \"DestAirport\", \"=\", \"a\", \".\", \"AirportCode\", \"WHERE\", \"a\", \".\", \"City\", \"=\", \"\", \"OR\", \"a\", \".\", \"City\", \"=\", \"\", \")\", \"T1\"],\n  \"question\": \"Find the number of flights landing in the city of Aberdeen or Abilene.\",\n  \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"flights\", \"landing\", \"in\", \"the\", \"city\", \"of\", \"Aberdeen\", \"or\", \"Abilene\", \".\"]\n}"}
{"question": "How many flights land in Aberdeen or Abilene?", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"How many flights land in Aberdeen or Abilene?\",\n\"question_toks\": \"['How', 'many', 'flights', 'land', 'in', 'Aberdeen', 'or', 'Abilene', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"flight_2\",\n\"query\": \"SELECT COUNT(*) FROM ((SELECT * FROM airports WHERE City='Aberdeen' OR City='Abilene') AS T1 JOIN (SELECT * FROM flights) AS T2 ON T1.AirportCode=T2.SourceAirport) AS T3 JOIN (SELECT * FROM airports WHERE City='Aberdeen' OR City='Abilene') AS T4 ON T3.DestAirport=T4.AirportCode\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', '(', 'SELECT', '*', 'FROM', 'airports', 'WHERE', 'City', '=', ''Aberdeen'', 'OR', 'City', '=', ''Abilene''', ')', 'AS', 'T1', 'JOIN', '(', 'SELECT', '*', 'FROM', 'flights', ')', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.SourceAirport', ')', 'AS', 'T3', 'JOIN', '(', 'SELECT', '*', 'FROM', 'airports', 'WHERE', 'City', '=', ''Aberdeen'', 'OR', 'City', '=', ''Abilene''', ')', 'AS', 'T4', 'ON', 'T3.DestAirport', '=', 'T4.AirportCode']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', '(', 'SELECT', '*', 'FROM', 'airports', 'WHERE', 'City', '=', '', 'OR', 'City', '=', '', ')', 'AS', 'T1', 'JOIN', '(', 'SELECT', '*', 'FROM', 'flights', ')', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.SourceAirport', ')', 'AS', 'T3', 'JOIN', '(', 'SELECT', '*', 'FROM', 'airports', 'WHERE', 'City', '=', '', 'OR', 'City', '=', '', ')', 'AS', 'T4', 'ON', 'T3.DestAirport', '=', 'T4.AirportCode']\",\n\"question\": \"How many flights land in Aberdeen or Abilene?\",\n\"question_toks\": \"['How', 'many', 'flights', 'land', 'in', 'Aberdeen', 'or', 'Abilene', '?']\"\n}"}
{"question": "Find the name of airports which do not have any flight in and out.", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Find the name of airports which do not have any flight in and out.\",\n\"question_toks\": \"['Find', 'the', 'name', 'of', 'airports', 'which', 'do', 'not', 'have', 'any', 'flight', 'in', 'and', 'out', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"flight_2\",\n\"query\": \"SELECT AirportName FROM airports WHERE NOT EXISTS (SELECT * FROM flights WHERE SourceAirport = airports.AirportCode OR DestAirport = airports.AirportCode)\",\n\"query_toks\": \"['SELECT', 'AirportName', 'FROM', 'airports', 'WHERE', 'NOT', 'EXISTS', '(', 'SELECT', '*', 'FROM', 'flights', 'WHERE', 'SourceAirport', '=', 'airports', '.', 'AirportCode', 'OR', 'DestAirport', '=', 'airports', '.', 'AirportCode', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'AirportName', 'FROM', 'airports', 'WHERE', 'NOT', 'EXISTS', '(', 'SELECT', '*', 'FROM', 'flights', 'WHERE', 'SourceAirport', '=', 'airports', '.', 'AirportCode', 'OR', 'DestAirport', '=', 'airports', '.', 'AirportCode', ')']\",\n\"question\": \"Find the name of airports which do not have any flight in and out.\",\n\"question_toks\": \"['Find', 'the', 'name', 'of', 'airports', 'which', 'do', 'not', 'have', 'any', 'flight', 'in', 'and', 'out', '.']\"}"}
{"question": "Which airports do not have departing or arriving flights?", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nairlines: 'uid', 'Airline', 'Abbreviation', 'Country'\nairports: 'City', 'AirportCode', 'AirportName', 'Country', 'CountryAbbrev'\nflights: 'Airline', 'FlightNo', 'SourceAirport', 'DestAirport'\n\n{\"db_id\": \"flight_2\",\n\"question\": \"Which airports do not have departing or arriving flights?\",\n\"question_toks\": \"['Which', 'airports', 'do', 'not', 'have', 'departing', 'or', 'arriving', 'flights', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"flight_2\",\n    \"query\": \"SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights UNION SELECT flights.DestAirport FROM flights)\",\n    \"query_toks\": \"['SELECT', 'airports', '.', 'AirportName', 'FROM', 'airports', 'WHERE', 'airports', '.', 'AirportCode', 'NOT', 'IN', '(', 'SELECT', 'flights', '.', 'SourceAirport', 'FROM', 'flights', 'UNION', 'SELECT', 'flights', '.', 'DestAirport', 'FROM', 'flights', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'airports', '.', '<column>', 'FROM', 'airports', 'WHERE', 'airports', '.', '<column>', 'NOT', 'IN', '(', 'SELECT', 'flights', '.', '<column>', 'FROM', 'flights', 'UNION', 'SELECT', 'flights', '.', '<column>', 'FROM', 'flights', ')']\",\n    \"question\": \"Which airports do not have departing or arriving flights?\",\n    \"question_toks\": \"['Which', 'airports', 'do', 'not', 'have', 'departing', 'or', 'arriving', 'flights', '?']\"\n}"}
{"question": "How many employees are there?", "sql": "SELECT count(*) FROM employee", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"How many employees are there?\",\n\"question_toks\": \"['How', 'many', 'employees', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT COUNT(*) FROM employee\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'employee']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'employee']\",\n\"question\": \"How many employees are there?\",\n\"question_toks\": \"['How', 'many', 'employees', 'are', 'there', '?']\"}"}
{"question": "Count the number of employees", "sql": "SELECT count(*) FROM employee", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Count the number of employees\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'employees']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"employee_hire_evaluation\",\n  \"query\": \"SELECT COUNT(*) FROM employee\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"employee\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"employee\"],\n  \"question\": \"Count the number of employees\",\n  \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"employees\"]\n}"}
{"question": "Sort employee names by their age in ascending order.", "sql": "SELECT name FROM employee ORDER BY age", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Sort employee names by their age in ascending order.\",\n\"question_toks\": \"['Sort', 'employee', 'names', 'by', 'their', 'age', 'in', 'ascending', 'order', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT Name FROM employee ORDER BY Age ASC\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'employee', 'ORDER', 'BY', 'Age', 'ASC']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'employee', 'ORDER', 'BY', 'Age', 'ASC']\",\n\"question\": \"Sort employee names by their age in ascending order.\",\n\"question_toks\": \"['Sort', 'employee', 'names', 'by', 'their', 'age', 'in', 'ascending', 'order', '.']\"}"}
{"question": "List the names of employees and sort in ascending order of age.", "sql": "SELECT name FROM employee ORDER BY age", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"List the names of employees and sort in ascending order of age.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'employees', 'and', 'sort', 'in', 'ascending', 'order', 'of', 'age', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT Name FROM employee ORDER BY Age ASC\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'employee', 'ORDER', 'BY', 'Age', 'ASC']\",\n\"query_toks_no_value\": \"['select', 'name', 'from', 'employee', 'order', 'by', 'age']\",\n\"question\": \"List the names of employees and sort in ascending order of age.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'employees', 'and', 'sort', 'in', 'ascending', 'order', 'of', 'age', '.']\"}"}
{"question": "What is the number of employees from each city?", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"What is the number of employees from each city?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'employees', 'from', 'each', 'city', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"employee_hire_evaluation\",\n    \"query\": \"SELECT city, COUNT(Employee_ID) FROM employee GROUP BY city\",\n    \"query_toks\": \"['SELECT', 'City', ',', 'COUNT', '(', 'Employee_ID', ')', 'FROM', 'Employee', 'GROUP', 'BY', 'City']\",\n    \"query_toks_no_value\": \"['SELECT', 'city', ',', 'COUNT', '(', 'Employee_ID', ')', 'FROM', 'employee', 'GROUP', 'BY', 'city']\",\n    \"question\": \"What is the number of employees from each city?\",\n    \"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'employees', 'from', 'each', 'city', '?']\"\n}"}
{"question": "Count the number of employees for each city.", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Count the number of employees for each city.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'employees', 'for', 'each', 'city', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"employee_hire_evaluation\",\n    \"query\": \"SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City\",\n    \"query_toks\": [\"SELECT\", \"City\", \",\", \"COUNT\", \"(\", \"Employee_ID\", \")\", \"FROM\", \"employee\", \"GROUP\", \"BY\", \"City\"],\n    \"query_toks_no_value\": [\"SELECT\", \"City\", \",\", \"COUNT\", \"(\", \"Employee_ID\", \")\", \"FROM\", \"employee\", \"GROUP\", \"BY\", \"City\"],\n    \"question\": \"Count the number of employees for each city.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"employees\", \"for\", \"each\", \"city\", \".\"]\n}"}
{"question": "Which cities do more than one employee under age 30 come from?", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Which cities do more than one employee under age 30 come from?\",\n\"question_toks\": \"['Which', 'cities', 'do', 'more', 'than', 'one', 'employee', 'under', 'age', '30', 'come', 'from', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1\",\n\"query_toks\": \"['SELECT', 'City', 'FROM', 'employee', 'WHERE', 'Age', '<', '30', 'GROUP', 'BY', 'City', 'HAVING', 'COUNT', '(', 'Employee_ID', ')', '>', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'City', 'FROM', 'employee', 'WHERE', 'Age', '<', '<value>', 'GROUP', 'BY', 'City', 'HAVING', 'COUNT', '(', 'Employee_ID', ')', '>', '<value>']\",\n\"question\": \"Which cities do more than one employee under age 30 come from?\",\n\"question_toks\": \"['Which', 'cities', 'do', 'more', 'than', 'one', 'employee', 'under', 'age', '30', 'come', 'from', '?']}\""}
{"question": "Find the cities that have more than one employee under age 30.", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the cities that have more than one employee under age 30.\",\n\"question_toks\": \"['Find', 'the', 'cities', 'that', 'have', 'more', 'than', 'one', 'employee', 'under', 'age', '30', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n \"query\": \"SELECT City FROM employee WHERE Age<30 GROUP BY City HAVING COUNT(*)>1\",\n \"query_toks\": \"['SELECT', 'City', 'FROM', 'employee', 'WHERE', 'Age', '<', '30', 'GROUP', 'BY', 'City', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'City', 'FROM', 'employee', 'WHERE', 'Age', '<', '', 'GROUP', 'BY', 'City', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']\",\n \"question\": \"Find the cities that have more than one employee under age 30.\",\n \"question_toks\": \"['Find', 'the', 'cities', 'that', 'have', 'more', 'than', 'one', 'employee', 'under', 'age', '30', '.']\"\n}"}
{"question": "Find the number of shops in each location.", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the number of shops in each location.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'shops', 'in', 'each', 'location', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT Location, COUNT(*) FROM shop GROUP BY Location\",\n\"query_toks\": \"['SELECT', 'Location', ',', 'COUNT', '(', '*', ')', 'FROM', 'shop', 'GROUP', 'BY', 'Location']\",\n\"query_toks_no_value\": \"['SELECT', 'Location', ',', 'COUNT', '(', '*', ')', 'FROM', 'shop', 'GROUP', 'BY', 'Location']\",\n\"question\": \"Find the number of shops in each location.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'shops', 'in', 'each', 'location', '.']}\"\n"}
{"question": "How many shops are there in each location?", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"How many shops are there in each location?\",\n\"question_toks\": \"['How', 'many', 'shops', 'are', 'there', 'in', 'each', 'location', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"employee_hire_evaluation\",\n  \"query\": \"SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location\",\n  \"query_toks\": [\"SELECT\", \"Location\", \",\", \"COUNT\", \"(\", \"Shop_ID\", \")\", \"FROM\", \"shop\", \"GROUP\", \"BY\", \"Location\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Location\", \",\", \"COUNT\", \"(\", \"Shop_ID\", \")\", \"FROM\", \"shop\", \"GROUP\", \"BY\", \"Location\"],\n  \"question\": \"How many shops are there in each location?\",\n  \"question_toks\": [\"How\", \"many\", \"shops\", \"are\", \"there\", \"in\", \"each\", \"location\", \"?\"]\n}"}
{"question": "Find the manager name and district of the shop whose number of products is the largest.", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the manager name and district of the shop whose number of products is the largest.\",\n\"question_toks\": \"['Find', 'the', 'manager', 'name', 'and', 'district', 'of', 'the', 'shop', 'whose', 'number', 'of', 'products', 'is', 'the', 'largest', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"spider_1\",\n \"query\": \"SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1;\",\n \"query_toks\": \"['SELECT', 'Manager_name', ',', 'District', 'FROM', 'shop', 'ORDER', 'BY', 'Number_products', 'DESC', 'LIMIT', '1', ';']\",\n \"query_toks_no_value\": \"['SELECT', 'Manager_name', ',', 'District', 'FROM', 'shop', 'ORDER', 'BY', 'Number_products', 'DESC', 'LIMIT', '1', ';']\",\n \"question\": \"Find the manager name and district of the shop whose number of products is the largest.\",\n \"question_toks\": \"['Find', 'the', 'manager', 'name', 'and', 'district', 'of', 'the', 'shop', 'whose', 'number', 'of', 'products', 'is', 'the', 'largest', '.']}\" \n}"}
{"question": "What are the manager name and district of the shop that sells the largest number of products?", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"What are the manager name and district of the shop that sells the largest number of products?\",\n\"question_toks\": \"['What', 'are', 'the', 'manager', 'name', 'and', 'district', 'of', 'the', 'shop', 'that', 'sells', 'the', 'largest', 'number', 'of', 'products', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT s.Manager_name, s.District FROM shop as s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)\",\n\"query_toks\": \"['SELECT', 's', '.', 'Manager_name', ',', 's', '.', 'District', 'FROM', 'shop', 'as', 's', 'WHERE', 's', '.', 'Number_products', '=', '(', 'SELECT', 'MAX', '(', 'Number_products', ')', 'FROM', 'shop', ')']\",\n\"query_toks_no_value\": \"['SELECT', 's', '.', 'Manager_name', ',', 's', '.', 'District', 'FROM', 'shop', 'as', 's', 'WHERE', 's', '.', 'Number_products', '=', '(', 'SELECT', 'MAX', '(', 'Number_products', ')', 'FROM', 'shop', ')']\",\n\"question\": \"What are the manager name and district of the shop that sells the largest number of products?\",\n\"question_toks\": \"['What', 'are', 'the', 'manager', 'name', 'and', 'district', 'of', 'the', 'shop', 'that', 'sells', 'the', 'largest', 'number', 'of', 'products', '?']}\" \n}"}
{"question": "find the minimum and maximum number of products of all stores.", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"find the minimum and maximum number of products of all stores.\",\n\"question_toks\": \"['find', 'the', 'minimum', 'and', 'maximum', 'number', 'of', 'products', 'of', 'all', 'stores', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT MIN(Number_products), MAX(Number_products) FROM shop\",\n\"query_toks\": [\"SELECT\", \"MIN\", \"(\", \"Number_products\", \")\", \",\", \"MAX\", \"(\", \"Number_products\", \")\", \"FROM\", \"shop\"],\n\"query_toks_no_value\": [\"SELECT\", \"MIN\", \"(\", \"Number_products\", \")\", \",\", \"MAX\", \"(\", \"Number_products\", \")\", \"FROM\", \"shop\"],\n\"question\": \"find the minimum and maximum number of products of all stores.\",\n\"question_toks\": [\"find\", \"the\", \"minimum\", \"and\", \"maximum\", \"number\", \"of\", \"products\", \"of\", \"all\", \"stores\", \".\"]}"}
{"question": "What are the minimum and maximum number of products across all the shops?", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"What are the minimum and maximum number of products across all the shops?\",\n\"question_toks\": \"['What', 'are', 'the', 'minimum', 'and', 'maximum', 'number', 'of', 'products', 'across', 'all', 'the', 'shops', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT MIN(Number_products), MAX(Number_products) FROM shop\",\n\"query_toks\": \"['SELECT', 'MIN', '(', 'Number_products', ')', ',', 'MAX', '(', 'Number_products', ')', 'FROM', 'shop']\",\n\"query_toks_no_value\": \"['SELECT', 'MIN', '(', ')', ',', 'MAX', '(', ')', 'FROM', 'shop']\",\n\"question\": \"What are the minimum and maximum number of products across all the shops?\",\n\"question_toks\": \"['What', 'are', 'the', 'minimum', 'and', 'maximum', 'number', 'of', 'products', 'across', 'all', 'the', 'shops', '?']}\"\n"}
{"question": "Return the name, location and district of all shops in descending order of number of products.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Return the name, location and district of all shops in descending order of number of products.\",\n\"question_toks\": \"['Return', 'the', 'name', ',', 'location', 'and', 'district', 'of', 'all', 'shops', 'in', 'descending', 'order', 'of', 'number', 'of', 'products', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n \"query\": \"SELECT T2.Name, T2.Location, T2.District FROM shop T2 ORDER BY T2.Number_products DESC\",\n \"query_toks\": \"['SELECT', 'T2', '.', 'Name', ',', 'T2', '.', 'Location', ',', 'T2', '.', 'District', 'FROM', 'shop', 'T2', 'ORDER', 'BY', 'T2', '.', 'Number_products', 'DESC']\",\n \"query_toks_no_value\": \"['SELECT', 'T2', '.', 'Name', ',', 'T2', '.', 'Location', ',', 'T2', '.', 'District', 'FROM', 'shop', 'T2', 'ORDER', 'BY', 'T2', '.', 'Number_products', 'DESC']\",\n \"question\": \"Return the name, location and district of all shops in descending order of number of products.\",\n \"question_toks\": \"['Return', 'the', 'name', ',', 'location', 'and', 'district', 'of', 'all', 'shops', 'in', 'descending', 'order', 'of', 'number', 'of', 'products', '.']\"}"}
{"question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Sort all the shops by number products in descending order, and return the name, location and district of each shop.\",\n\"question_toks\": \"['Sort', 'all', 'the', 'shops', 'by', 'number', 'products', 'in', 'descending', 'order', ',', 'and', 'return', 'the', 'name', ',', 'location', 'and', 'district', 'of', 'each', 'shop', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"employee_hire_evaluation\",\n  \"query\": \"SELECT Name, Location, District FROM shop ORDER BY Number_products DESC\",\n  \"query_toks\": \"['SELECT', 'Name', ',', 'Location', ',', 'District', 'FROM', 'shop', 'ORDER', 'BY', 'Number_products', 'DESC']\",\n  \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Location', ',', 'District', 'FROM', 'shop', 'ORDER', 'BY', 'Number_products', 'DESC']\",\n  \"question\": \"Sort all the shops by number products in descending order, and return the name, location and district of each shop.\",\n  \"question_toks\": \"['Sort', 'all', 'the', 'shops', 'by', 'number', 'products', 'in', 'descending', 'order', ',', 'and', 'return', 'the', 'name', ',', 'location', 'and', 'district', 'of', 'each', 'shop', '.']\"\n}"}
{"question": "Find the names of stores whose number products is more than the average number of products.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the names of stores whose number products is more than the average number of products.\",\n\"question_toks\": \"['Find', 'the', 'names', 'of', 'stores', 'whose', 'number', 'products', 'is', 'more', 'than', 'the', 'average', 'number', 'of', 'products', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"spider_1\",\n \"query\": \"SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);\",\n \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"shop\", \"WHERE\", \"Number_products\", \">\", \"(\", \"SELECT\", \"AVG\", \"(\", \"Number_products\", \")\", \"FROM\", \"shop\", \")\", \";\"],\n \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"shop\", \"WHERE\", \"Number_products\", \">\", \"(\", \"SELECT\", \"AVG\", \"(\", \"Number_products\", \")\", \"FROM\", \"shop\", \")\", \";\"],\n \"question\": \"Find the names of stores whose number products is more than the average number of products.\",\n \"question_toks\": [\"Find\", \"the\", \"names\", \"of\", \"stores\", \"whose\", \"number\", \"products\", \"is\", \"more\", \"than\", \"the\", \"average\", \"number\", \"of\", \"products\", \".\"]\n}"}
{"question": "Which shops' number products is above the average? Give me the shop names.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Which shops' number products is above the average? Give me the shop names.\",\n\"question_toks\": \"['Which', 'shops', \"'\", 'number', 'products', 'is', 'above', 'the', 'average', '?', 'Give', 'me', 'the', 'shop', 'names', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n \"query\": \"SELECT Name FROM (SELECT Shop_ID, AVG(Number_products) AS avg_products FROM shop GROUP BY Shop_ID) AS subquery JOIN shop ON subquery.Shop_ID = shop.Shop_ID WHERE shop.Number_products > subquery.avg_products\", \n \"query_toks\": \"['SELECT', 'Name', 'FROM', '(', 'SELECT', 'Shop_ID', ',', 'AVG', '(', 'Number_products', ')', 'AS', 'avg_products', 'FROM', 'shop', 'GROUP', 'BY', 'Shop_ID', ')', 'AS', 'subquery', 'JOIN', 'shop', 'ON', 'subquery', '.', 'Shop_ID', '=', 'shop', '.', 'Shop_ID', 'WHERE', 'shop', '.', 'Number_products', '>', 'subquery', '.', 'avg_products']\", \n \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', '(', 'SELECT', 'Shop_ID', ',', 'AVG', '(', 'Number_products', ')', 'AS', 'avg_products', 'FROM', 'shop', 'GROUP', 'BY', 'Shop_ID', ')', 'AS', 'subquery', 'JOIN', 'shop', 'ON', 'subquery', '.', 'Shop_ID', '=', 'shop', '.', 'Shop_ID', 'WHERE', 'shop', '.', 'Number_products', '>', 'subquery', '.', 'avg_products']\", \n \"question\": \"Which shops' number products is above the average? Give me the shop names.\",\n \"question_toks\": \"['Which', 'shops', \"'\", 'number', 'products', 'is', 'above', 'the', 'average', '?', 'Give', 'me', 'the', 'shop', 'names', '.']\"}"}
{"question": "find the name of employee who was awarded the most times in the evaluation.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"find the name of employee who was awarded the most times in the evaluation.\",\n\"question_toks\": \"['find', 'the', 'name', 'of', 'employee', 'who', 'was', 'awarded', 'the', 'most', 'times', 'in', 'the', 'evaluation', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT e.Name FROM evaluation AS ev JOIN employee AS e ON e.Employee_ID = ev.Employee_ID GROUP BY ev.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'e', '.', 'Name', 'FROM', 'evaluation', 'AS', 'ev', 'JOIN', 'employee', 'AS', 'e', 'ON', 'e', '.', 'Employee_ID', '=', 'ev', '.', 'Employee_ID', 'GROUP', 'BY', 'ev', '.', 'Employee_ID', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'e', '.', 'Name', 'FROM', 'evaluation', 'AS', 'ev', 'JOIN', 'employee', 'AS', 'e', 'ON', 'e', '.', 'Employee_ID', '=', 'ev', '.', 'Employee_ID', 'GROUP', 'BY', 'ev', '.', 'Employee_ID', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"question\": \"find the name of employee who was awarded the most times in the evaluation.\",\n\"question_toks\": \"['find', 'the', 'name', 'of', 'employee', 'who', 'was', 'awarded', 'the', 'most', 'times', 'in', 'the', 'evaluation', '.']}\""}
{"question": "Which employee received the most awards in evaluations? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Which employee received the most awards in evaluations? Give me the employee name.\",\n\"question_toks\": \"['Which', 'employee', 'received', 'the', 'most', 'awards', 'in', 'evaluations', '?', 'Give', 'me', 'the', 'employee', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"employee_hire_evaluation\",\n  \"query\": \"SELECT e.Name FROM employee AS e, evaluation AS ev WHERE e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;\",\n  \"query_toks\": \"['SELECT', 'e', '.', 'Name', 'FROM', 'employee', 'AS', 'e', ',', 'evaluation', 'AS', 'ev', 'WHERE', 'e', '.', 'Employee_ID', '=', 'ev', '.', 'Employee_ID', 'ORDER', 'BY', 'ev', '.', 'Bonus', 'DESC', 'LIMIT', '1', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'e', '.', 'Name', 'FROM', 'employee', 'AS', 'e', ',', 'evaluation', 'AS', 'ev', 'WHERE', 'e', '.', 'Employee_ID', '=', 'ev', '.', 'Employee_ID', 'ORDER', 'BY', 'ev', '.', 'Bonus', 'DESC', 'LIMIT', '1', ';']\",\n  \"question\": \"Which employee received the most awards in evaluations? Give me the employee name.\",\n  \"question_toks\": \"['Which', 'employee', 'received', 'the', 'most', 'awards', 'in', 'evaluations', '?', 'Give', 'me', 'the', 'employee', 'name', '.']\"\n}"}
{"question": "Find the name of the employee who got the highest one time bonus.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the name of the employee who got the highest one time bonus.\",\n\"question_toks\": \"['Find', 'the', 'name', 'of', 'the', 'employee', 'who', 'got', 'the', 'highest', 'one', 'time', 'bonus', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"employee_hire_evaluation\",\n    \"query\": \"SELECT Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)\",\n    \"query_toks\": \"['SELECT', 'Name', 'FROM', 'employee', 'INNER', 'JOIN', 'evaluation', 'ON', 'employee', '.', 'Employee_ID', '=', 'evaluation', '.', 'Employee_ID', 'WHERE', 'evaluation', '.', 'Bonus', '=', '(', 'SELECT', 'MAX', '(', 'Bonus', ')', 'FROM', 'evaluation', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'employee', 'INNER', 'JOIN', 'evaluation', 'ON', 'employee', '.', 'Employee_ID', '=', 'evaluation', '.', 'Employee_ID', 'WHERE', 'evaluation', '.', 'Bonus', '=', '(', 'SELECT', 'MAX', '(', 'Bonus', ')', 'FROM', 'evaluation', ')']\",\n    \"question\": \"Find the name of the employee who got the highest one time bonus.\",\n    \"question_toks\": \"['Find', 'the', 'name', 'of', 'the', 'employee', 'who', 'got', 'the', 'highest', 'one', 'time', 'bonus', '.']\"\n}"}
{"question": "Which employee received the biggest bonus? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Which employee received the biggest bonus? Give me the employee name.\",\n\"question_toks\": \"['Which', 'employee', 'received', 'the', 'biggest', 'bonus', '?', 'Give', 'me', 'the', 'employee', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"spider_99\",\n\"query\": \"SELECT Name FROM employee, evaluation WHERE employee.Employee_ID = evaluation.Employee_ID AND evaluation.Bonus = (SELECT MAX(evaluation.Bonus) FROM evaluation)\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'employee', ',', 'evaluation', 'WHERE', 'employee.Employee_ID', '=', 'evaluation.Employee_ID', 'AND', 'evaluation.Bonus', '=', '(', 'SELECT', 'MAX', '(', 'evaluation.Bonus', ')', 'FROM', 'evaluation', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'employee', ',', 'evaluation', 'WHERE', 'employee.Employee_ID', '=', 'evaluation.Employee_ID', 'AND', 'evaluation.Bonus', '=', '(', 'SELECT', 'MAX', '(', 'evaluation.Bonus', ')', 'FROM', 'evaluation', ')']\",\n\"question\": \"Which employee received the biggest bonus? Give me the employee name.\",\n\"question_toks\": \"['Which', 'employee', 'received', 'the', 'biggest', 'bonus', '?', 'Give', 'me', 'the', 'employee', 'name', '.']}\"\n"}
{"question": "Find the names of employees who never won any award in the evaluation.", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the names of employees who never won any award in the evaluation.\",\n\"question_toks\": \"['Find', 'the', 'names', 'of', 'employees', 'who', 'never', 'won', 'any', 'award', 'in', 'the', 'evaluation', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n \"query\": \"SELECT DISTINCT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'Name', 'FROM', 'employee', 'WHERE', 'Employee_ID', 'NOT', 'IN', '(', 'SELECT', 'Employee_ID', 'FROM', 'evaluation', ')']\",\n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Name', 'FROM', 'employee', 'WHERE', 'Employee_ID', 'NOT', 'IN', '(', 'SELECT', 'Employee_ID', 'FROM', 'evaluation', ')']\",\n \"question\": \"Find the names of employees who never won any award in the evaluation.\",\n \"question_toks\": \"['Find', 'the', 'names', 'of', 'employees', 'who', 'never', 'won', 'any', 'award', 'in', 'the', 'evaluation', '.']\"}"}
{"question": "What are the names of the employees who never received any evaluation?", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"What are the names of the employees who never received any evaluation?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'employees', 'who', 'never', 'received', 'any', 'evaluation', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n \"query\": \"SELECT DISTINCT employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'employee', '.', 'Name', 'FROM', 'employee', 'LEFT', 'JOIN', 'evaluation', 'ON', 'employee', '.', 'Employee_ID', '=', 'evaluation', '.', 'Employee_ID', 'WHERE', 'evaluation', '.', 'Employee_ID', 'IS', 'NULL']\",\n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'employee', '.', 'Name', 'FROM', 'employee', 'LEFT', 'JOIN', 'evaluation', 'ON', 'employee', '.', 'Employee_ID', '=', 'evaluation', '.', 'Employee_ID', 'WHERE', 'evaluation', '.', 'Employee_ID', 'IS', 'NULL']\",\n \"question\": \"What are the names of the employees who never received any evaluation?\",\n \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'employees', 'who', 'never', 'received', 'any', 'evaluation', '?']\"\n}"}
{"question": "What is the name of the shop that is hiring the largest number of employees?", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"What is the name of the shop that is hiring the largest number of employees?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'shop', 'that', 'is', 'hiring', 'the', 'largest', 'number', 'of', 'employees', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT Name FROM (SELECT Shop_ID, Name, Number_products, ROW_NUMBER() OVER (ORDER BY Number_products DESC) AS RN FROM shop JOIN hiring ON Shop_ID = shop.Id WHERE Is_full_time = 'yes') AS T WHERE T.RN = 1;\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', '(', 'SELECT', 'Shop_ID', ',', 'Name', ',', 'Number_products', ',', 'ROW_NUMBER', '(', ')', 'AS', 'RN', 'FROM', 'shop', 'JOIN', 'hiring', 'ON', 'Shop_ID', '=', 'shop', '.', 'Id', 'WHERE', 'Is_full_time', '=', \\\"'yes'\\\"\", ')', 'AS', 'T', 'WHERE', 'T', '.', 'RN', '=', '1', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', '(', 'SELECT', 'Shop_ID', ',', 'Name', ',', 'Number_products', ',', 'ROW_NUMBER', '(', ')', 'AS', 'RN', 'FROM', 'shop', 'JOIN', 'hiring', 'ON', 'Shop_ID', '=', 'shop', '.', 'Id', 'WHERE', 'Is_full_time', '=', 'yes', ')', 'AS', 'T', 'WHERE', 'T', '.', 'RN', '=', '1', ';']\",\n\"question\": \"What is the name of the shop that is hiring the largest number of employees?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'shop', 'that', 'is', 'hiring', 'the', 'largest', 'number', 'of', 'employees', '?']}\"\n"}
{"question": "Which shop has the most employees? Give me the shop name.", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Which shop has the most employees? Give me the shop name.\",\n\"question_toks\": \"['Which', 'shop', 'has', 'the', 'most', 'employees', '?', 'Give', 'me', 'the', 'shop', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT Shop_ID, Name FROM (SELECT Shop_ID, COUNT(Employee_ID) as num_employees FROM hiring GROUP BY Shop_ID) COUNT_EMPLOYEES JOIN shop ON COUNT_EMPLOYEES.Shop_ID = shop.Shop_ID ORDER BY num_employees DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'Shop_ID', ',', 'Name', 'FROM', '(', 'SELECT', 'Shop_ID', ',', 'COUNT', '(', 'Employee_ID', ')', 'as', 'num_employees', 'FROM', 'hiring', 'GROUP', 'BY', 'Shop_ID', ')', 'COUNT_EMPLOYEES', 'JOIN', 'shop', 'ON', 'COUNT_EMPLOYEES', '.', 'Shop_ID', '=', 'shop', '.', 'Shop_ID', 'ORDER', 'BY', 'num_employees', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'Shop_ID', ',', 'Name', 'FROM', '(', 'SELECT', 'Shop_ID', ',', 'COUNT', '(', 'Employee_ID', ')', 'as', 'num_employees', 'FROM', 'hiring', 'GROUP', 'BY', 'Shop_ID', ')', 'COUNT_EMPLOYEES', 'JOIN', 'shop', 'ON', 'COUNT_EMPLOYEES', '.', 'Shop_ID', '=', 'shop', '.', 'Shop_ID', 'ORDER', 'BY', 'num_employees', 'DESC', 'LIMIT', '1']\",\n\"question\": \"Which shop has the most employees? Give me the shop name.\",\n\"question_toks\": \"['Which', 'shop', 'has', 'the', 'most', 'employees', '?', 'Give', 'me', 'the', 'shop', 'name', '.']}\""}
{"question": "Find the name of the shops that do not hire any employee.", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the name of the shops that do not hire any employee.\",\n\"question_toks\": \"['Find', 'the', 'name', 'of', 'the', 'shops', 'that', 'do', 'not', 'hire', 'any', 'employee', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'shop', 'WHERE', 'Shop_ID', 'NOT', 'IN', '(', 'SELECT', 'Shop_ID', 'FROM', 'hiring', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'shop', 'WHERE', 'Shop_ID', 'NOT', 'IN', '(', 'SELECT', 'Shop_ID', 'FROM', 'hiring', ')']\",\n\"question\": \"Find the name of the shops that do not hire any employee.\",\n\"question_toks\": \"['Find', 'the', 'name', 'of', 'the', 'shops', 'that', 'do', 'not', 'hire', 'any', 'employee', '.']}\""}
{"question": "Which shops run with no employees? Find the shop names", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Which shops run with no employees? Find the shop names\",\n\"question_toks\": \"['Which', 'shops', 'run', 'with', 'no', 'employees', '?', 'Find', 'the', 'shop', 'names']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"employee_hire_evaluation\",\n    \"query\": \"SELECT s.Name FROM shop as s WHERE s.Shop_ID NOT IN (SELECT h.Shop_ID FROM hiring as h)\",\n    \"query_toks\": \"['SELECT', 's', '.', 'Name', 'FROM', 'shop', 'as', 's', 'WHERE', 's', '.', 'Shop_ID', 'NOT', 'IN', '(', 'SELECT', 'h', '.', 'Shop_ID', 'FROM', 'hiring', 'as', 'h', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 's', '.', 'Name', 'FROM', 'shop', 'as', 's', 'WHERE', 's', '.', 'Shop_ID', 'NOT', 'IN', '(', 'SELECT', 'h', '.', 'Shop_ID', 'FROM', 'hiring', 'as', 'h', ')']\",\n    \"question\": \"Which shops run with no employees? Find the shop names\",\n    \"question_toks\": \"['Which', 'shops', 'run', 'with', 'no', 'employees', '?', 'Find', 'the', 'shop', 'names']\"\n}"}
{"question": "Find the number of employees hired in each shop; show the shop name as well.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the number of employees hired in each shop; show the shop name as well.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'employees', 'hired', 'in', 'each', 'shop', ';', 'show', 'the', 'shop', 'name', 'as', 'well', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"employee_hire_evaluation\",\n    \"query\": \"SELECT T2.Name AS Shop_Name, COUNT(*) AS Num_Employees_Hired FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name;\",\n    \"query_toks\": [\"SELECT\", \"T2\", \".\", \"Name\", \"AS\", \"Shop_Name\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"Num_Employees_Hired\", \"FROM\", \"hiring\", \"AS\", \"T1\", \"JOIN\", \"shop\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"Shop_ID\", \"=\", \"T2\", \".\", \"Shop_ID\", \"GROUP\", \"BY\", \"T2\", \".\", \"Name\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T2\", \".\", \"Name\", \"AS\", \"Shop_Name\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"Num_Employees_Hired\", \"FROM\", \"hiring\", \"AS\", \"T1\", \"JOIN\", \"shop\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"Shop_ID\", \"=\", \"T2\", \".\", \"Shop_ID\", \"GROUP\", \"BY\", \"T2\", \".\", \"Name\", \";\"],\n    \"question\": \"Find the number of employees hired in each shop; show the shop name as well.\",\n    \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"employees\", \"hired\", \"in\", \"each\", \"shop\", \";\", \"show\", \"the\", \"shop\", \"name\", \"as\", \"well\", \".\"]\n}"}
{"question": "For each shop, return the number of employees working there and the name of the shop.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"For each shop, return the number of employees working there and the name of the shop.\",\n\"question_toks\": \"['For', 'each', 'shop', ',', 'return', 'the', 'number', 'of', 'employees', 'working', 'there', 'and', 'the', 'name', 'of', 'the', 'shop', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT T2.Name, Count(T1.Employee_ID) FROM hiring T1 INNER JOIN shop T2 ON T1.Shop_ID=T2.Shop_ID GROUP BY T2.Name\",\n\"query_toks\": \"['SELECT', 'T2', '.', 'Name', ',', 'Count', '(', 'T1', '.', 'Employee_ID', ')', 'FROM', 'hiring', 'T1', 'INNER', 'JOIN', 'shop', 'T2', 'ON', 'T1', '.', 'Shop_ID', '=', 'T2', '.', 'Shop_ID', 'GROUP', 'BY', 'T2', '.', 'Name']\",\n\"query_toks_no_value\": \"['SELECT', 'T2', '.', 'Name', ',', 'Count', '(', 'T1', '.', '<value>', ')', 'FROM', 'hiring', 'T1', 'INNER', 'JOIN', 'shop', 'T2', 'ON', 'T1', '.', 'Shop_ID', '=', 'T2', '.', 'Shop_ID', 'GROUP', 'BY', 'T2', '.', 'Name']\",\n\"question\": \"For each shop, return the number of employees working there and the name of the shop.\",\n\"question_toks\": \"['For', 'each', 'shop', ',', 'return', 'the', 'number', 'of', 'employees', 'working', 'there', 'and', 'the', 'name', 'of', 'the', 'shop', '.']}\""}
{"question": "What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"What is total bonus given in all evaluations?\",\n\"question_toks\": \"['What', 'is', 'total', 'bonus', 'given', 'in', 'all', 'evaluations', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"employee_hire_evaluation\",\n    \"query\": \"SELECT SUM(Bonus) FROM evaluation\",\n    \"query_toks\": \"['SELECT', 'SUM', '(', 'Bonus', ')', 'FROM', 'evaluation']\",\n    \"query_toks_no_value\": \"['SELECT', 'SUM', '(', ')', 'FROM', 'evaluation']\",\n    \"question\": \"What is total bonus given in all evaluations?\",\n    \"question_toks\": \"['What', 'is', 'total', 'bonus', 'given', 'in', 'all', 'evaluations', '?']\"\n}"}
{"question": "Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the total amount of bonus given in all the evaluations.\",\n\"question_toks\": \"['Find', 'the', 'total', 'amount', 'of', 'bonus', 'given', 'in', 'all', 'the', 'evaluations', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT SUM(Bonus) FROM evaluation\",\n\"query_toks\": \"['SELECT', 'SUM', '(', 'Bonus', ')', 'FROM', 'evaluation']\",\n\"query_toks_no_value\": \"['SELECT', 'SUM', '(', ')', 'FROM', 'evaluation']\",\n\"question\": \"Find the total amount of bonus given in all the evaluations.\",\n\"question_toks\": \"['Find', 'the', 'total', 'amount', 'of', 'bonus', 'given', 'in', 'all', 'the', 'evaluations', '.']\"}"}
{"question": "Give me all the information about hiring.", "sql": "SELECT * FROM hiring", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Give me all the information about hiring.\",\n\"question_toks\": \"['Give', 'me', 'all', 'the', 'information', 'about', 'hiring', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT * FROM hiring\",\n\"query_toks\": \"['SELECT', '*', 'FROM', 'hiring']\",\n\"query_toks_no_value\": \"['SELECT', '*', 'FROM', 'hiring']\",\n\"question\": \"Give me all the information about hiring.\",\n\"question_toks\": \"['Give', 'me', 'all', 'the', 'information', 'about', 'hiring', '.']}\""}
{"question": "What is all the information about hiring?", "sql": "SELECT * FROM hiring", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"What is all the information about hiring?\",\n\"question_toks\": \"['What', 'is', 'all', 'the', 'information', 'about', 'hiring', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n\"query\": \"SELECT Shop_ID, Employee_ID, Start_from, Is_full_time FROM hiring\",\n\"query_toks\": [\"SELECT\", \"Shop_ID\", \",\", \"Employee_ID\", \",\", \"Start_from\", \",\", \"Is_full_time\", \"FROM\", \"hiring\"],\n\"query_toks_no_value\": [\"SELECT\", \"Shop_ID\", \",\", \"Employee_ID\", \",\", \"Start_from\", \",\", \"Is_full_time\", \"FROM\", \"hiring\"],\n\"question\": \"What is all the information about hiring?\",\n\"question_toks\": [\"What\", \"is\", \"all\", \"the\", \"information\", \"about\", \"hiring\", \"?\"]\n}"}
{"question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Which district has both stores with less than 3000 products and stores with more than 10000 products?\",\n\"question_toks\": \"['Which', 'district', 'has', 'both', 'stores', 'with', 'less', 'than', '3000', 'products', 'and', 'stores', 'with', 'more', 'than', '10000', 'products', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"employee_hire_evaluation\",\n \"query\": \"SELECT DISTINCT s.District FROM shop AS s WHERE s.Number_products < 3000 AND EXISTS (SELECT * FROM shop AS s2 WHERE s2.Number_products > 10000 AND s.District = s2.District)\",\n \"query_toks\": [\"SELECT\", \"DISTINCT\", \"s\", \".\", \"District\", \"FROM\", \"shop\", \"AS\", \"s\", \"WHERE\", \"s\", \".\", \"Number_products\", \"<\", \"3000\", \"AND\", \"EXISTS\", \"(\", \"SELECT\", \"*\", \"FROM\", \"shop\", \"AS\", \"s2\", \"WHERE\", \"s2\", \".\", \"Number_products\", \">\", \"10000\", \"AND\", \"s\", \".\", \"District\", \"=\", \"s2\", \".\", \"District\", \")\"],\n \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"s\", \".\", \"District\", \"FROM\", \"shop\", \"AS\", \"s\", \"WHERE\", \"s\", \".\", \"Number_products\", \"<\", \"?\", \"AND\", \"EXISTS\", \"(\", \"SELECT\", \"*\", \"FROM\", \"shop\", \"AS\", \"s2\", \"WHERE\", \"s2\", \".\", \"Number_products\", \">\", \"?\", \"AND\", \"s\", \".\", \"District\", \"=\", \"s2\", \".\", \"District\", \")\"],\n \"question\": \"Which district has both stores with less than 3000 products and stores with more than 10000 products?\",\n \"question_toks\": [\"Which\", \"district\", \"has\", \"both\", \"stores\", \"with\", \"less\", \"than\", \"3000\", \"products\", \"and\", \"stores\", \"with\", \"more\", \"than\", \"10000\", \"products\", \"?\"]\n }"}
{"question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.\",\n\"question_toks\": \"['Find', 'the', 'districts', 'in', 'which', 'there', 'are', 'both', 'shops', 'selling', 'less', 'than', '3000', 'products', 'and', 'shops', 'selling', 'more', 'than', '10000', 'products', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"employee_hire_evaluation\",\n    \"query\": \"SELECT DISTINCT s1.District FROM shop as s1, shop as s2 WHERE s1.Number_products < 3000 AND s2.Number_products > 10000 AND s1.District = s2.District\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 's1', '.', 'District', 'FROM', 'shop', 'as', 's1', ',', 'shop', 'as', 's2', 'WHERE', 's1', '.', 'Number_products', '<', '3000', 'AND', 's2', '.', 'Number_products', '>', '10000', 'AND', 's1', '.', 'District', '=', 's2', '.', 'District']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 's1', '.', 'District', 'FROM', 'shop', 'as', 's1', ',', 'shop', 'as', 's2', 'WHERE', 's1', '.', 'Number_products', '<', '?', 'AND', 's2', '.', 'Number_products', '>', '?', 'AND', 's1', '.', 'District', '=', 's2', '.', 'District']\",\n    \"question\": \"Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.\",\n    \"question_toks\": \"['Find', 'the', 'districts', 'in', 'which', 'there', 'are', 'both', 'shops', 'selling', 'less', 'than', '3000', 'products', 'and', 'shops', 'selling', 'more', 'than', '10000', 'products', '.']\"\n}"}
{"question": "How many different store locations are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"How many different store locations are there?\",\n\"question_toks\": \"['How', 'many', 'different', 'store', 'locations', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"employee_hire_evaluation\",\n  \"query\": \"SELECT COUNT(DISTINCT Location) FROM shop\",\n  \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'Location', ')', 'FROM', 'shop']\",\n  \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'Location', ')', 'FROM', 'shop']\",\n  \"question\": \"How many different store locations are there?\",\n  \"question_toks\": \"['How', 'many', 'different', 'store', 'locations', 'are', 'there', '?']\"\n}"}
{"question": "Count the number of distinct store locations.", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nemployee: 'Employee_ID', 'Name', 'Age', 'City'\nshop: 'Shop_ID', 'Name', 'Location', 'District', 'Number_products', 'Manager_name'\nhiring: 'Shop_ID', 'Employee_ID', 'Start_from', 'Is_full_time'\nevaluation: 'Employee_ID', 'Year_awarded', 'Bonus'\n\n{\"db_id\": \"employee_hire_evaluation\",\n\"question\": \"Count the number of distinct store locations.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'distinct', 'store', 'locations', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"employee_hire_evaluation\",\n  \"query\": \"SELECT COUNT(DISTINCT Location) FROM shop\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Location\", \")\", \"FROM\", \"shop\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Location\", \")\", \"FROM\", \"shop\"],\n  \"question\": \"Count the number of distinct store locations.\",\n  \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"distinct\", \"store\", \"locations\", \".\"]\n}"}
{"question": "How many documents do we have?", "sql": "SELECT count(*) FROM Documents", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"How many documents do we have?\",\n\"question_toks\": \"['How', 'many', 'documents', 'do', 'we', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT COUNT(*) FROM Documents\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Documents\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Documents\"],\n    \"question\": \"How many documents do we have?\",\n    \"question_toks\": [\"How\", \"many\", \"documents\", \"do\", \"we\", \"have\", \"?\"]\n}"}
{"question": "Count the number of documents.", "sql": "SELECT count(*) FROM Documents", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Count the number of documents.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'documents', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT COUNT(*) FROM Documents\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Documents\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"FROM\", \"Documents\"],\n  \"question\": \"Count the number of documents.\",\n  \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"documents\", \".\"]\n}"}
{"question": "List document IDs, document names, and document descriptions for all documents.", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"List document IDs, document names, and document descriptions for all documents.\",\n\"question_toks\": \"['List', 'document', 'IDs', ',', 'document', 'names', ',', 'and', 'document', 'descriptions', 'for', 'all', 'documents', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Documents d\",\n  \"query_toks\": [\"SELECT\", \"d\", \".\", \"Document_ID\", \",\", \"d\", \".\", \"Document_Name\", \",\", \"d\", \".\", \"Document_Description\", \"FROM\", \"Documents\", \"d\"],\n  \"query_toks_no_value\": [\"SELECT\", \"d\", \".\", \"Document_ID\", \",\", \"d\", \".\", \"Document_Name\", \",\", \"d\", \".\", \"Document_Description\", \"FROM\", \"Documents\", \"d\"],\n  \"question\": \"List document IDs, document names, and document descriptions for all documents.\",\n  \"question_toks\": [\"List\", \"document\", \"IDs\", \",\", \"document\", \"names\", \",\", \"and\", \"document\", \"descriptions\", \"for\", \"all\", \"documents\", \".\"]\n}"}
{"question": "What are the ids, names, and descriptions for all documents?", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the ids, names, and descriptions for all documents?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', ',', 'names', ',', 'and', 'descriptions', 'for', 'all', 'documents', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Document_ID, Document_Name, Document_Description FROM Documents\",\n  \"query_toks\": [\"SELECT\", \"Document_ID\", \",\", \"Document_Name\", \",\", \"Document_Description\", \"FROM\", \"Documents\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Document_ID\", \",\", \"Document_Name\", \",\", \"Document_Description\", \"FROM\", \"Documents\"],\n  \"question\": \"What are the ids, names, and descriptions for all documents?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"ids\", \",\", \"names\", \",\", \"and\", \"descriptions\", \"for\", \"all\", \"documents\", \"?\"]\n}"}
{"question": "What is the document name and template id for document with description with the letter 'w' in it?", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the document name and template id for document with description with the letter 'w' in it?\",\n\"question_toks\": \"['What', 'is', 'the', 'document', 'name', 'and', 'template', 'id', 'for', 'document', 'with', 'description', 'with', 'the', 'letter', \"'w\", \"'\", 'in', 'it', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT d.Document_Name, d.Template_ID FROM Documents d WHERE d.Document_Description LIKE '%w%'\",\n    \"query_toks\": \"['SELECT', 'd', '.', 'Document_Name', ',', 'd', '.', 'Template_ID', 'FROM', 'Documents', 'd', 'WHERE', 'd', '.', 'Document_Description', 'LIKE', \\\"'%w%'\\\"]\",\n    \"query_toks_no_value\": \"['SELECT', 'd', '.', 'Document_Name', ',', 'd', '.', 'Template_ID', 'FROM', 'Documents', 'd', 'WHERE', 'd', '.', 'Document_Description', 'LIKE', \\\"''\\\"]\",\n    \"question\": \"What is the document name and template id for document with description with the letter 'w' in it?\",\n    \"question_toks\": \"['What', 'is', 'the', 'document', 'name', 'and', 'template', 'id', 'for', 'document', 'with', 'description', 'with', 'the', 'letter', \\\"'w\\\", \\\"'\\\", 'in', 'it', '?']\"\n}"}
{"question": "Return the names and template ids for documents that contain the letter w in their description.", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the names and template ids for documents that contain the letter w in their description.\",\n\"question_toks\": \"['Return', 'the', 'names', 'and', 'template', 'ids', 'for', 'documents', 'that', 'contain', 'the', 'letter', 'w', 'in', 'their', 'description', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT d.Document_Name, d.Template_ID FROM Documents d WHERE d.Document_Description LIKE '%w%'\",\n    \"query_toks\": [\"SELECT\", \"d\", \".\", \"Document_Name\", \",\", \"d\", \".\", \"Template_ID\", \"FROM\", \"Documents\", \"d\", \"WHERE\", \"d\", \".\", \"Document_Description\", \"LIKE\", \"'%\", \"w\", \"%'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"d\", \".\", \"Document_Name\", \",\", \"d\", \".\", \"Template_ID\", \"FROM\", \"Documents\", \"d\", \"WHERE\", \"d\", \".\", \"Document_Description\", \"LIKE\", \"???\"],\n    \"question\": \"Return the names and template ids for documents that contain the letter w in their description.\",\n    \"question_toks\": [\"Return\", \"the\", \"names\", \"and\", \"template\", \"ids\", \"for\", \"documents\", \"that\", \"contain\", \"the\", \"letter\", \"w\", \"in\", \"their\", \"description\", \".\"]\n}"}
{"question": "What is the document id, template id and description for document named \"Robbin CV\"?", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the document id, template id and description for document named \"Robbin CV\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'document', 'id', ',', 'template', 'id', 'and', 'description', 'for', 'document', 'named', '``', 'Robbin', 'CV', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT d.Document_ID, d.Template_ID, d.Document_Description FROM Documents d WHERE d.Document_Name = 'Robbin CV'\",\n    \"query_toks\": \"['SELECT', 'd', '.', 'Document_ID', ',', 'd', '.', 'Template_ID', ',', 'd', '.', 'Document_Description', 'FROM', 'Documents', 'd', 'WHERE', 'd', '.', 'Document_Name', '=', ''Robbin', 'CV', ''']\",\n    \"query_toks_no_value\": \"['SELECT', 'd', '.', 'Document_ID', ',', 'd', '.', 'Template_ID', ',', 'd', '.', 'Document_Description', 'FROM', 'Documents', 'd', 'WHERE', 'd', '.', 'Document_Name', '=', '']\",\n    \"question\": \"What is the document id, template id and description for document named \\\"Robbin CV\\\"?\",\n    \"question_toks\": \"['What', 'is', 'the', 'document', 'id', ',', 'template', 'id', 'and', 'description', 'for', 'document', 'named', '\\\\\\\"Robbin', 'CV\\\\\\\"', '?']\"\n}"}
{"question": "Return the document id, template id, and description for the document with the name Robbin CV.", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the document id, template id, and description for the document with the name Robbin CV.\",\n\"question_toks\": \"['Return', 'the', 'document', 'id', ',', 'template', 'id', ',', 'and', 'description', 'for', 'the', 'document', 'with', 'the', 'name', 'Robbin', 'CV', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT d.Document_ID, d.Template_ID, d.Document_Description FROM Documents d WHERE d.Document_Name = 'Robbin CV'\",\n  \"query_toks\": [\"SELECT\", \"d\", \".\", \"Document_ID\", \",\", \"d\", \".\", \"Template_ID\", \",\", \"d\", \".\", \"Document_Description\", \"FROM\", \"Documents\", \"d\", \"WHERE\", \"d\", \".\", \"Document_Name\", \"=\", \"'Robbin CV'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"d\", \".\", \"Document_ID\", \",\", \"d\", \".\", \"Template_ID\", \",\", \"d\", \".\", \"Document_Description\", \"FROM\", \"Documents\", \"d\", \"WHERE\", \"d\", \".\", \"Document_Name\", \"=\", \"?\"],\n  \"question\": \"Return the document id, template id, and description for the document with the name Robbin CV.\",\n  \"question_toks\": [\"Return\", \"the\", \"document\", \"id\", \",\", \"template\", \"id\", \",\", \"and\", \"description\", \"for\", \"the\", \"document\", \"with\", \"the\", \"name\", \"Robbin\", \"CV\", \".\"]\n}"}
{"question": "How many different templates do all document use?", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"How many different templates do all document use?\",\n\"question_toks\": \"['How', 'many', 'different', 'templates', 'do', 'all', 'document', 'use', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT COUNT(DISTINCT Template_ID) FROM Templates\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'Template_ID', ')', 'FROM', 'Templates']\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'Template_ID', ')', 'FROM', 'Templates']\",\n    \"question\": \"How many different templates do all document use?\",\n    \"question_toks\": \"['How', 'many', 'different', 'templates', 'do', 'all', 'document', 'use', '?']\"\n}"}
{"question": "Count the number of different templates used for documents.", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Count the number of different templates used for documents.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'different', 'templates', 'used', 'for', 'documents', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT COUNT(DISTINCT Template_ID) FROM Templates;\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Template_ID\", \")\", \"FROM\", \"Templates\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Template_ID\", \")\", \"FROM\", \"Templates\", \";\"],\n    \"question\": \"Count the number of different templates used for documents.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"different\", \"templates\", \"used\", \"for\", \"documents\", \".\"]\n}"}
{"question": "How many documents are using the template with type code 'PPT'?", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"How many documents are using the template with type code 'PPT'?\",\n\"question_toks\": \"['How', 'many', 'documents', 'are', 'using', 'the', 'template', 'with', 'type', 'code', \"'PPT\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code='PPT')\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Documents\", \"WHERE\", \"Template_ID\", \"IN\", \"(\", \"SELECT\", \"Template_ID\", \"FROM\", \"Templates\", \"WHERE\", \"Template_Type_Code\", \"=\", \"'PPT'\", \")\",],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Documents\", \"WHERE\", \"Template_ID\", \"IN\", \"(\", \"SELECT\", \"Template_ID\", \"FROM\", \"Templates\", \"WHERE\", \"Template_Type_Code\", \"=\", \"value\", \")\",],\n    \"question\": \"How many documents are using the template with type code 'PPT'?\",\n    \"question_toks\": [\"How\", \"many\", \"documents\", \"are\", \"using\", \"the\", \"template\", \"with\", \"type\", \"code\", \"'PPT\", \"'\", \"?\"]\n}"}
{"question": "Count the number of documents that use the PPT template type.", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Count the number of documents that use the PPT template type.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'documents', 'that', 'use', 'the', 'PPT', 'template', 'type', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT COUNT(*) FROM Document T1 JOIN Template T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Document\", \"T1\", \"JOIN\", \"Template\", \"T2\", \"ON\", \"T1\", \".\", \"Template_ID\", \"=\", \"T2\", \".\", \"Template_ID\", \"WHERE\", \"T2\", \".\", \"Template_Type_Code\", \"=\", \"'PPT'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Document\", \"T1\", \"JOIN\", \"Template\", \"T2\", \"ON\", \"T1\", \".\", \"Template_ID\", \"=\", \"T2\", \".\", \"Template_ID\", \"WHERE\", \"T2\", \".\", \"Template_Type_Code\", \"=\", \"?\"],\n    \"question\": \"Count the number of documents that use the PPT template type.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"documents\", \"that\", \"use\", \"the\", \"PPT\", \"template\", \"type\", \".\"]\n}"}
{"question": "Show all template ids and number of documents using each template.", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all template ids and number of documents using each template.\",\n\"question_toks\": \"['Show', 'all', 'template', 'ids', 'and', 'number', 'of', 'documents', 'using', 'each', 'template', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT T.Template_ID, COUNT(D.Document_ID) AS Document_Count FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID\",\n  \"query_toks\": [\"SELECT\", \"T\", \".\", \"Template_ID\", \",\", \"COUNT\", \"(\", \"D\", \".\", \"Document_ID\", \")\", \"AS\", \"Document_Count\", \"FROM\", \"Templates\", \"T\", \"INNER\", \"JOIN\", \"Documents\", \"D\", \"ON\", \"T\", \".\", \"Template_ID\", \"=\", \"D\", \".\", \"Template_ID\", \"GROUP\", \"BY\", \"T\", \".\", \"Template_ID\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Template_ID\", \",\", \"COUNT\", \"(\", \"Document_ID\", \")\", \"FROM\", \"Templates\", \"INNER\", \"JOIN\", \"Documents\", \"ON\", \"Templates\", \".\", \"Template_ID\", \"=\", \"Documents\", \".\", \"Template_ID\", \"GROUP\", \"BY\", \"Template_ID\"],\n  \"question\": \"Show all template ids and number of documents using each template.\",\n  \"question_toks\": [\"Show\", \"all\", \"template\", \"ids\", \"and\", \"number\", \"of\", \"documents\", \"using\", \"each\", \"template\", \".\"]\n}"}
{"question": "What are all different template ids used for documents, and how many times were each of them used?", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are all different template ids used for documents, and how many times were each of them used?\",\n\"question_toks\": \"['What', 'are', 'all', 'different', 'template', 'ids', 'used', 'for', 'documents', ',', 'and', 'how', 'many', 'times', 'were', 'each', 'of', 'them', 'used', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID\",\n    \"query_toks\": [\"SELECT\", \"Template_ID\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Documents\", \"GROUP\", \"BY\", \"Template_ID\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Template_ID\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Documents\", \"GROUP\", \"BY\", \"Template_ID\"],\n    \"question\": \"What are all different template ids used for documents, and how many times were each of them used?\",\n    \"question_toks\": [\"What\", \"are\", \"all\", \"different\", \"template\", \"ids\", \"used\", \"for\", \"documents\", \",\", \"and\", \"how\", \"many\", \"times\", \"were\", \"each\", \"of\", \"them\", \"used\", \"?\"],\n}"}
{"question": "What is the id and type code for the template used by the most documents?", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the id and type code for the template used by the most documents?\",\n\"question_toks\": \"['What', 'is', 'the', 'id', 'and', 'type', 'code', 'for', 'the', 'template', 'used', 'by', 'the', 'most', 'documents', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_ID, Template_Type_Code FROM (SELECT Template_ID, Template_Type_Code, COUNT(*) AS doc_count FROM Documents GROUP BY Template_ID ORDER BY doc_count DESC LIMIT 1) AS temp_docs\",\n    \"query_toks\": \"['SELECT', 'Template_ID', ',', 'Template_Type_Code', 'FROM', '(', 'SELECT', 'Template_ID', ',', 'Template_Type_Code', ',', 'COUNT', '(', '*', ')', 'AS', 'doc_count', 'FROM', 'Documents', 'GROUP', 'BY', 'Template_ID', 'ORDER', 'BY', 'doc_count', 'DESC', 'LIMIT', '1', ')', 'AS', 'temp_docs']\",\n    \"query_toks_no_value\": \"['SELECT', 'Template_ID', ',', 'Template_Type_Code', 'FROM', '(', 'SELECT', 'Template_ID', ',', 'Template_Type_Code', ',', 'COUNT', '(', '*', ')', 'AS', 'doc_count', 'FROM', 'Documents', 'GROUP', 'BY', 'Template_ID', 'ORDER', 'BY', 'doc_count', 'DESC', 'LIMIT', '1', ')', 'AS', 'temp_docs']\",\n    \"question\": \"What is the id and type code for the template used by the most documents?\",\n    \"question_toks\": \"['What', 'is', 'the', 'id', 'and', 'type', 'code', 'for', 'the', 'template', 'used', 'by', 'the', 'most', 'documents', '?']\"\n}"}
{"question": "Return the id and type code of the template that is used for the greatest number of documents.", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the id and type code of the template that is used for the greatest number of documents.\",\n\"question_toks\": \"['Return', 'the', 'id', 'and', 'type', 'code', 'of', 'the', 'template', 'that', 'is', 'used', 'for', 'the', 'greatest', 'number', 'of', 'documents', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY COUNT(DISTINCT T2.Document_ID) DESC LIMIT 1\",\n  \"query_toks\": \"['SELECT', 'T1', '.', 'Template_ID', ',', 'T1', '.', 'Template_Type_Code', 'FROM', 'Templates', 'T1', 'JOIN', 'Documents', 'T2', 'ON', 'T1', '.', 'Template_ID', '=', 'T2', '.', 'Template_ID', 'GROUP', 'BY', 'T1', '.', 'Template_ID', 'ORDER', 'BY', 'COUNT', '(', 'DISTINCT', 'T2', '.', 'Document_ID', ')', 'DESC', 'LIMIT', '1']\",\n  \"query_toks_no_value\": \"['SELECT', 'T1', '.', '<column>', ',', 'T1', '.', '<column>', 'FROM', 'Templates', 'T1', 'JOIN', 'Documents', 'T2', 'ON', 'T1', '.', 'Template_ID', '=', 'T2', '.', 'Template_ID', 'GROUP', 'BY', 'T1', '.', 'Template_ID', 'ORDER', 'BY', 'COUNT', '(', 'DISTINCT', 'T2', '.', '<column>', ')', 'DESC', 'LIMIT', '1']\",\n  \"question\": \"Return the id and type code of the template that is used for the greatest number of documents.\",\n  \"question_toks\": \"['Return', 'the', 'id', 'and', 'type', 'code', 'of', 'the', 'template', 'that', 'is', 'used', 'for', 'the', 'greatest', 'number', 'of', 'documents', '.']\"\n}"}
{"question": "Show ids for all templates that are used by more than one document.", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show ids for all templates that are used by more than one document.\",\n\"question_toks\": \"['Show', 'ids', 'for', 'all', 'templates', 'that', 'are', 'used', 'by', 'more', 'than', 'one', 'document', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT T1.Template_ID \\\n               FROM Templates T1 \\\n               JOIN Documents D1 \\\n                 ON T1.Template_ID = D1.Template_ID \\\n              GROUP BY T1.Template_ID \\\n             HAVING COUNT(DISTINCT D1.Document_ID) > 1;\",\n    \"query_toks\": [\"SELECT\", \"T1\", \".\", \"Template_ID\", \"FROM\", \"Templates\", \"T1\", \"JOIN\", \"Documents\", \"D1\", \"ON\", \"T1\", \".\", \"Template_ID\", \"=\", \"D1\", \".\", \"Template_ID\", \"GROUP\", \"BY\", \"T1\", \".\", \"Template_ID\", \"HAVING\", \"COUNT\", \"(\", \"DISTINCT\", \"D1\", \".\", \"Document_ID\", \")\", \">\", \"1\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T1\", \".\", \"Template_ID\", \"FROM\", \"Templates\", \"T1\", \"JOIN\", \"Documents\", \"D1\", \"ON\", \"T1\", \".\", \"Template_ID\", \"=\", \"D1\", \".\", \"Template_ID\", \"GROUP\", \"BY\", \"T1\", \".\", \"Template_ID\", \"HAVING\", \"COUNT\", \"(\", \"DISTINCT\", \"D1\", \".\", \"Document_ID\", \")\", \">\", \"1\", \";\"],\n    \"question\": \"Show ids for all templates that are used by more than one document.\",\n    \"question_toks\": [\"Show\", \"ids\", \"for\", \"all\", \"templates\", \"that\", \"are\", \"used\", \"by\", \"more\", \"than\", \"one\", \"document\", \".\"]\n}"}
{"question": "What are the template ids of any templates used in more than a single document?", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the template ids of any templates used in more than a single document?\",\n\"question_toks\": \"['What', 'are', 'the', 'template', 'ids', 'of', 'any', 'templates', 'used', 'in', 'more', 'than', 'a', 'single', 'document', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT DISTINCT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1;\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Template_ID', 'FROM', 'Documents', 'GROUP', 'BY', 'Template_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Template_ID', 'FROM', 'Documents', 'GROUP', 'BY', 'Template_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '?', ';']\",\n    \"question\": \"What are the template ids of any templates used in more than a single document?\",\n    \"question_toks\": \"['What', 'are', 'the', 'template', 'ids', 'of', 'any', 'templates', 'used', 'in', 'more', 'than', 'a', 'single', 'document', '?']\"\n}"}
{"question": "Show ids for all templates not used by any document.", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show ids for all templates not used by any document.\",\n\"question_toks\": \"['Show', 'ids', 'for', 'all', 'templates', 'not', 'used', 'by', 'any', 'document', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT DISTINCT T1.Template_ID FROM Templates T1 LEFT JOIN Documents T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_ID IS NULL;\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'T1.Template_ID', 'FROM', 'Templates', 'T1', 'LEFT', 'JOIN', 'Documents', 'T2', 'ON', 'T1.Template_ID', '=', 'T2.Template_ID', 'WHERE', 'T2.Template_ID', 'IS', 'NULL', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T1', '.', 'Template_ID', 'FROM', 'Templates', 'T1', 'LEFT', 'JOIN', 'Documents', 'T2', 'ON', 'T1', '.', 'Template_ID', '=', 'T2', '.', 'Template_ID', 'WHERE', 'T2', '.', 'Template_ID', 'IS', 'NULL', ';']\",\n  \"question\": \"Show ids for all templates not used by any document.\",\n  \"question_toks\": \"['Show', 'ids', 'for', 'all', 'templates', 'not', 'used', 'by', 'any', 'document', '.']\"\n}"}
{"question": "What are the ids for templates that are not used in any documents?", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the ids for templates that are not used in any documents?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'for', 'templates', 'that', 'are', 'not', 'used', 'in', 'any', 'documents', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT DISTINCT(T1.Template_ID) FROM Templates T1 LEFT JOIN Documents T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_ID IS NULL;\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"(\", \"T1\", \".\", \"Template_ID\", \")\", \"FROM\", \"Templates\", \"T1\", \"LEFT\", \"JOIN\", \"Documents\", \"T2\", \"ON\", \"T1\", \".\", \"Template_ID\", \"=\", \"T2\", \".\", \"Template_ID\", \"WHERE\", \"T2\", \".\", \"Template_ID\", \"IS\", \"NULL\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"(\", \"T1\", \".\", \"Template_ID\", \")\", \"FROM\", \"Templates\", \"T1\", \"LEFT\", \"JOIN\", \"Documents\", \"T2\", \"ON\", \"T1\", \".\", \"Template_ID\", \"=\", \"T2\", \".\", \"Template_ID\", \"WHERE\", \"T2\", \".\", \"Template_ID\", \"IS\", \"NULL\", \";\"],\n    \"question\": \"What are the ids for templates that are not used in any documents?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"ids\", \"for\", \"templates\", \"that\", \"are\", \"not\", \"used\", \"in\", \"any\", \"documents\", \"?\"]\n}"}
{"question": "How many templates do we have?", "sql": "SELECT count(*) FROM Templates", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"How many templates do we have?\",\n\"question_toks\": \"['How', 'many', 'templates', 'do', 'we', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT COUNT(*) FROM Template_Details\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Template_Details\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Template_Details\"],\n  \"question\": \"How many templates do we have?\",\n  \"question_toks\": [\"How\", \"many\", \"templates\", \"do\", \"we\", \"have\", \"?\"]\n}"}
{"question": "Count the number of templates.", "sql": "SELECT count(*) FROM Templates", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Count the number of templates.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'templates', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT COUNT(*) FROM Template_Details;\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Template_Details\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Template_Details\", \";\"],\n  \"question\": \"Count the number of templates.\",\n  \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"templates\", \".\"]\n}"}
{"question": "Show template ids, version numbers, and template type codes for all templates.", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show template ids, version numbers, and template type codes for all templates.\",\n\"question_toks\": \"['Show', 'template', 'ids', ',', 'version', 'numbers', ',', 'and', 'template', 'type', 'codes', 'for', 'all', 'templates', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT T.Template_ID, T.Version_Number, T.Template_Type_Code FROM Template_Details T\",\n    \"query_toks\": [\"SELECT\", \"T\", \".\", \"Template_ID\", \",\", \"T\", \".\", \"Version_Number\", \",\", \"T\", \".\", \"Template_Type_Code\", \"FROM\", \"Template_Details\", \"T\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T\", \".\", \"Template_ID\", \",\", \"T\", \".\", \"Version_Number\", \",\", \"T\", \".\", \"Template_Type_Code\", \"FROM\", \"Template_Details\", \"T\"],\n    \"question\": \"Show template ids, version numbers, and template type codes for all templates.\",\n    \"question_toks\": [\"Show\", \"template\", \"ids\", \",\", \"version\", \"numbers\", \",\", \"and\", \"template\", \"type\", \"codes\", \"for\", \"all\", \"templates\", \".\"]\n}"}
{"question": "What are the ids, version numbers, and type codes for each template?", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the ids, version numbers, and type codes for each template?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', ',', 'version', 'numbers', ',', 'and', 'type', 'codes', 'for', 'each', 'template', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT T.Template_ID, T.Version_Number, T.Template_Type_Code FROM Templates T\",\n  \"query_toks\": \"['SELECT', 'T', '.', 'Template_ID', ',', 'T', '.', 'Version_Number', ',', 'T', '.', 'Template_Type_Code', 'FROM', 'Templates', 'T']\",\n  \"query_toks_no_value\": \"['SELECT', 'T', '.', 'Template_ID', ',', 'T', '.', 'Version_Number', ',', 'T', '.', 'Template_Type_Code', 'FROM', 'Templates', 'T']\",\n  \"question\": \"What are the ids, version numbers, and type codes for each template?\",\n  \"question_toks\": \"['What', 'are', 'the', 'ids', ',', 'version', 'numbers', ',', 'and', 'type', 'codes', 'for', 'each', 'template', '?']\"\n}"}
{"question": "Show all distinct template type codes for all templates.", "sql": "SELECT DISTINCT template_type_code FROM Templates", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all distinct template type codes for all templates.\",\n\"question_toks\": \"['Show', 'all', 'distinct', 'template', 'type', 'codes', 'for', 'all', 'templates', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT DISTINCT Template_Type_Code FROM Templates;\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"Template_Type_Code\", \"FROM\", \"Templates\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"Template_Type_Code\", \"FROM\", \"Templates\", \";\"],\n    \"question\": \"Show all distinct template type codes for all templates.\",\n    \"question_toks\": [\"Show\", \"all\", \"distinct\", \"template\", \"type\", \"codes\", \"for\", \"all\", \"templates\", \".\"]\n}"}
{"question": "What are the different template type codes?", "sql": "SELECT DISTINCT template_type_code FROM Templates", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the different template type codes?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'template', 'type', 'codes', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Template_Type_Code FROM Template_Types\",\n  \"query_toks\": \"['SELECT', 'Template_Type_Code', 'FROM', 'Template_Types']\",\n  \"query_toks_no_value\": \"['SELECT', 'Template_Type_Code', 'FROM', 'Template_Types']\",\n  \"question\": \"What are the different template type codes?\",\n  \"question_toks\": \"['What', 'are', 'the', 'different', 'template', 'type', 'codes', '?']\"\n}"}
{"question": "What are the ids of templates with template type code PP or PPT?", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the ids of templates with template type code PP or PPT?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'templates', 'with', 'template', 'type', 'code', 'PP', 'or', 'PPT', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')\",\n  \"query_toks\": \"['SELECT', 'Template_ID', 'FROM', 'Templates', 'WHERE', 'Template_Type_Code', 'IN', '(', ''''PP'''', ',', ''''PPT''''', ')']\",\n  \"query_toks_no_value\": \"['SELECT', 'Template_ID', 'FROM', 'Templates', 'WHERE', 'Template_Type_Code', 'IN', '(', ')']\",\n  \"question\": \"What are the ids of templates with template type code PP or PPT?\",\n  \"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'templates', 'with', 'template', 'type', 'code', 'PP', 'or', 'PPT', '?']\"\n}"}
{"question": "Return the ids of templates that have the code PP or PPT.", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the ids of templates that have the code PP or PPT.\",\n\"question_toks\": \"['Return', 'the', 'ids', 'of', 'templates', 'that', 'have', 'the', 'code', 'PP', 'or', 'PPT', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'\",\n    \"query_toks\": [\"SELECT\", \"Template_ID\", \"FROM\", \"Templates\", \"WHERE\", \"Template_Type_Code\", \"=\", \"'PP'\", \"OR\", \"Template_Type_Code\", \"=\", \"'PPT'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Template_ID\", \"FROM\", \"Templates\", \"WHERE\", \"Template_Type_Code\", \"=\", \"OR\", \"Template_Type_Code\", \"=\"],\n    \"question\": \"Return the ids of templates that have the code PP or PPT.\",\n    \"question_toks\": [\"Return\", \"the\", \"ids\", \"of\", \"templates\", \"that\", \"have\", \"the\", \"code\", \"PP\", \"or\", \"PPT\", \".\"]\n}"}
{"question": "How many templates have template type code CV?", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"How many templates have template type code CV?\",\n\"question_toks\": \"['How', 'many', 'templates', 'have', 'template', 'type', 'code', 'CV', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"cre_Doc_Template_Mgt\",\n \"query\": \"SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'\",\n \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Templates', 'WHERE', 'Template_Type_Code', '=', ''CV'', ';']\",\n \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Templates', 'WHERE', 'Template_Type_Code', '=', '', ';']\",\n \"question\": \"How many templates have template type code CV?\",\n \"question_toks\": \"['How', 'many', 'templates', 'have', 'template', 'type', 'code', 'CV', '?']\"}"}
{"question": "Count the number of templates of the type CV.", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Count the number of templates of the type CV.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'templates', 'of', 'the', 'type', 'CV', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT COUNT(*) FROM Template_Details T WHERE T.Template_Type_Code = 'CV'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Template_Details\", \"T\", \"WHERE\", \"T\", \".\", \"Template_Type_Code\", \"=\", \"'CV'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Template_Details\", \"T\", \"WHERE\", \"T\", \".\", \"Template_Type_Code\", \"=\", \"?\"],\n    \"question\": \"Count the number of templates of the type CV.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"templates\", \"of\", \"the\", \"type\", \"CV\", \".\"]\n}"}
{"question": "What is the version number and template type code for the template with version number later than 5?", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the version number and template type code for the template with version number later than 5?\",\n\"question_toks\": \"['What', 'is', 'the', 'version', 'number', 'and', 'template', 'type', 'code', 'for', 'the', 'template', 'with', 'version', 'number', 'later', 'than', '5', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Version_Number, Template_Type_Code FROM Template_Details WHERE Version_Number > 5\",\n    \"query_toks\": \"['SELECT', 'Version_Number', ',', 'Template_Type_Code', 'FROM', 'Template_Details', 'WHERE', 'Version_Number', '>', '5']\",\n    \"query_toks_no_value\": \"['SELECT', 'Version_Number', ',', 'Template_Type_Code', 'FROM', 'Template_Details', 'WHERE', 'Version_Number', '>', '<value>']\",\n    \"question\": \"What is the version number and template type code for the template with version number later than 5?\",\n    \"question_toks\": \"['What', 'is', 'the', 'version', 'number', 'and', 'template', 'type', 'code', 'for', 'the', 'template', 'with', 'version', 'number', 'later', 'than', '5', '?']\"\n}"}
{"question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the version numbers and template type codes of templates with a version number greater than 5.\",\n\"question_toks\": \"['Return', 'the', 'version', 'numbers', 'and', 'template', 'type', 'codes', 'of', 'templates', 'with', 'a', 'version', 'number', 'greater', 'than', '5', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT T.Template_Type_Code, T.Version_Number FROM Templates T WHERE T.Version_Number > 5\",\n  \"query_toks\": \"['SELECT', 'T', '.', 'Template_Type_Code', ',', 'T', '.', 'Version_Number', 'FROM', 'Templates', 'T', 'WHERE', 'T', '.', 'Version_Number', '>', '5']\",\n  \"query_toks_no_value\": \"['SELECT', 'T', '.', 'Template_Type_Code', ',', 'T', '.', 'Version_Number', 'FROM', 'Templates', 'T', 'WHERE', 'T', '.', 'Version_Number', '>', '?']\",\n  \"question\": \"Return the version numbers and template type codes of templates with a version number greater than 5.\",\n  \"question_toks\": \"['Return', 'the', 'version', 'numbers', 'and', 'template', 'type', 'codes', 'of', 'templates', 'with', 'a', 'version', 'number', 'greater', 'than', '5', '.']\"\n}"}
{"question": "Show all template type codes and number of templates for each.", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all template type codes and number of templates for each.\",\n\"question_toks\": \"['Show', 'all', 'template', 'type', 'codes', 'and', 'number', 'of', 'templates', 'for', 'each', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Template_Type_Code, COUNT(Template_ID) AS Num_Templates FROM Templates GROUP BY Template_Type_Code\",\n  \"query_toks\": \"['SELECT', 'Template_Type_Code', ',', 'COUNT', '(', 'Template_ID', ')', 'AS', 'Num_Templates', 'FROM', 'Templates', 'GROUP', 'BY', 'Template_Type_Code']\",\n  \"query_toks_no_value\": \"['SELECT', 'Template_Type_Code', ',', 'COUNT', '(', 'Template_ID', ')', 'AS', 'Num_Templates', 'FROM', 'Templates', 'GROUP', 'BY', 'Template_Type_Code']\",\n  \"question\": \"Show all template type codes and number of templates for each.\",\n  \"question_toks\": \"['Show', 'all', 'template', 'type', 'codes', 'and', 'number', 'of', 'templates', 'for', 'each', '.']\"\n}"}
{"question": "What are the different template type codes, and how many templates correspond to each?", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the different template type codes, and how many templates correspond to each?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'template', 'type', 'codes', ',', 'and', 'how', 'many', 'templates', 'correspond', 'to', 'each', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_Type_Code, COUNT(Template_ID) AS Num_Templates FROM Template GROUP BY Template_Type_Code;\",\n    \"query_toks\": \"['SELECT', 'Template_Type_Code', ',', 'COUNT', '(', 'Template_ID', ')', 'AS', 'Num_Templates', 'FROM', 'Template', 'GROUP', 'BY', 'Template_Type_Code', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'Template_Type_Code', ',', 'COUNT', '(', ')', 'AS', 'Num_Templates', 'FROM', 'Template', 'GROUP', 'BY', 'Template_Type_Code', ';']\",\n    \"question\": \"What are the different template type codes, and how many templates correspond to each?\",\n    \"question_toks\": \"['What', 'are', 'the', 'different', 'template', 'type', 'codes', ',', 'and', 'how', 'many', 'templates', 'correspond', 'to', 'each', '?']\"\n}"}
{"question": "Which template type code has most number of templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Which template type code has most number of templates?\",\n\"question_toks\": \"['Which', 'template', 'type', 'code', 'has', 'most', 'number', 'of', 'templates', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_Type_Code, COUNT(*) AS num_templates FROM Templates GROUP BY Template_Type_Code ORDER BY num_templates DESC LIMIT 1\",\n    \"query_toks\": [\"SELECT\", \"Template_Type_Code\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_templates\", \"FROM\", \"Templates\", \"GROUP\", \"BY\", \"Template_Type_Code\", \"ORDER\", \"BY\", \"num_templates\", \"DESC\", \"LIMIT\", \"1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Template_Type_Code\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_templates\", \"FROM\", \"Templates\", \"GROUP\", \"BY\", \"Template_Type_Code\", \"ORDER\", \"BY\", \"num_templates\", \"DESC\", \"LIMIT\", \"1\"],\n    \"question\": \"Which template type code has most number of templates?\",\n    \"question_toks\": [\"Which\", \"template\", \"type\", \"code\", \"has\", \"most\", \"number\", \"of\", \"templates\", \"?\"]\n}"}
{"question": "Return the type code of the template type that the most templates belong to.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the type code of the template type that the most templates belong to.\",\n\"question_toks\": \"['Return', 'the', 'type', 'code', 'of', 'the', 'template', 'type', 'that', 'the', 'most', 'templates', 'belong', 'to', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_Type_Code\\nFROM\\n  (SELECT Template_Type_Code, Count(Template_Type_Code) AS cnt\\n   FROM Template_Details\\n   GROUP BY Template_Type_Code) AS tmp\\nORDER BY cnt DESC\\nLIMIT 1;\",\n    \"query_toks\": [\"SELECT\", \"Template_Type_Code\", \"FROM\", \"(\", \"SELECT\", \"Template_Type_Code\", \",\", \"Count\", \"(\", \"Template_Type_Code\", \")\", \"AS\", \"cnt\", \"FROM\", \"Template_Details\", \"GROUP\", \"BY\", \"Template_Type_Code\", \")\", \"AS\", \"tmp\", \"ORDER\", \"BY\", \"cnt\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Template_Type_Code\", \"FROM\", \"(\", \"SELECT\", \"Template_Type_Code\", \",\", \"Count\", \"(\", \"Template_Type_Code\", \")\", \"AS\", \"cnt\", \"FROM\", \"Template_Details\", \"GROUP\", \"BY\", \"Template_Type_Code\", \")\", \"AS\", \"tmp\", \"ORDER\", \"BY\", \"cnt\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"question\": \"Return the type code of the template type that the most templates belong to.\",\n    \"question_toks\": [\"Return\", \"the\", \"type\", \"code\", \"of\", \"the\", \"template\", \"type\", \"that\", \"the\", \"most\", \"templates\", \"belong\", \"to\", \".\"]\n}"}
{"question": "Show all template type codes with less than three templates.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all template type codes with less than three templates.\",\n\"question_toks\": \"['Show', 'all', 'template', 'type', 'codes', 'with', 'less', 'than', 'three', 'templates', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_Type_Code FROM Template_Details GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3\",\n    \"query_toks\": \"['SELECT', 'Template_Type_Code', 'FROM', 'Template_Details', 'GROUP', 'BY', 'Template_Type_Code', 'HAVING', 'COUNT', '(', 'Template_ID', ')', '<', '3']\",\n    \"query_toks_no_value\": \"['SELECT', 'Template_Type_Code', 'FROM', 'Template_Details', 'GROUP', 'BY', 'Template_Type_Code', 'HAVING', 'COUNT', '(', 'Template_ID', ')', '<', '?']\",\n    \"question\": \"Show all template type codes with less than three templates.\",\n    \"question_toks\": \"['Show', 'all', 'template', 'type', 'codes', 'with', 'less', 'than', 'three', 'templates', '.']\"\n}"}
{"question": "What are the codes of template types that have fewer than 3 templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the codes of template types that have fewer than 3 templates?\",\n\"question_toks\": \"['What', 'are', 'the', 'codes', 'of', 'template', 'types', 'that', 'have', 'fewer', 'than', '3', 'templates', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3\",\n    \"query_toks\": \"['SELECT', 'Template_Type_Code', 'FROM', 'Templates', 'GROUP', 'BY', 'Template_Type_Code', 'HAVING', 'COUNT', '(', '*', ')', '<', '3']\",\n    \"query_toks_no_value\": \"['SELECT', 'Template_Type_Code', 'FROM', 'Templates', 'GROUP', 'BY', 'Template_Type_Code', 'HAVING', 'COUNT', '(', '*', ')', '<']\",\n    \"question\": \"What are the codes of template types that have fewer than 3 templates?\",\n    \"question_toks\": \"['What', 'are', 'the', 'codes', 'of', 'template', 'types', 'that', 'have', 'fewer', 'than', '3', 'templates', '?']\"\n}"}
{"question": "What the smallest version number and its template type code?", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What the smallest version number and its template type code?\",\n\"question_toks\": \"['What', 'the', 'smallest', 'version', 'number', 'and', 'its', 'template', 'type', 'code', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Template_Details;\",\n  \"query_toks\": [\"SELECT\", \"MIN\", \"(\", \"Version_Number\", \")\", \"AS\", \"Smallest_Version_Number\", \",\", \"Template_Type_Code\", \"FROM\", \"Template_Details\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"MIN\", \"(\", \"Version_Number\", \")\", \"AS\", \"Smallest_Version_Number\", \",\", \"Template_Type_Code\", \"FROM\", \"Template_Details\", \";\"],\n  \"question\": \"What is the smallest version number and its template type code?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"smallest\", \"version\", \"number\", \"and\", \"its\", \"template\", \"type\", \"code\", \"?\"]\n}"}
{"question": "Return the lowest version number, along with its corresponding template type code.", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the lowest version number, along with its corresponding template type code.\",\n\"question_toks\": \"['Return', 'the', 'lowest', 'version', 'number', ',', 'along', 'with', 'its', 'corresponding', 'template', 'type', 'code', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT T1.Template_Type_Code, MIN(T1.Version_Number) FROM Template_Details T1\",\n    \"query_toks\": \"[ 'SELECT', 'T1', '.', 'Template_Type_Code', ',', 'MIN', '(', 'T1', '.', 'Version_Number', ')', 'FROM', 'Template_Details', 'T1' ]\",\n    \"query_toks_no_value\": \"[ 'SELECT', 'T1', '.', 'Template_Type_Code', ',', 'MIN', '(', 'T1', '.', 'Version_Number', ')', 'FROM', 'Template_Details', 'T1' ]\",\n    \"question\": \"Return the lowest version number, along with its corresponding template type code.\",\n    \"question_toks\": \"['Return', 'the', 'lowest', 'version', 'number', ',', 'along', 'with', 'its', 'corresponding', 'template', 'type', 'code', '.']\"\n}"}
{"question": "What is the template type code of the template used by document with the name \"Data base\"?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the template type code of the template used by document with the name \"Data base\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'template', 'type', 'code', 'of', 'the', 'template', 'used', 'by', 'document', 'with', 'the', 'name', '``', 'Data', 'base', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"cre_Doc_Template_Mgt\",\n \"query\": \"SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID=d.Template_ID WHERE Document_Name='Data base'\",\n \"query_toks\": \"['SELECT', 't', '.', 'Template_Type_Code', 'FROM', 'Templates', 't', 'JOIN', 'Documents', 'd', 'ON', 't', '.', 'Template_ID', '=', 'd', '.', 'Template_ID', 'WHERE', 'Document_Name', '=', \"'Data base'\"]\",\n \"query_toks_no_value\": \"['SELECT', 't', '.', 'Template_Type_Code', 'FROM', 'Templates', 't', 'JOIN', 'Documents', 'd', 'ON', 't', '.', 'Template_ID', '=', 'd', '.', 'Template_ID', 'WHERE', 'Document_Name', '=']\",\n \"question\": \"What is the template type code of the template used by document with the name \\\"Data base\\\"?\",\n \"question_toks\": \"['What', 'is', 'the', 'template', 'type', 'code', 'of', 'the', 'template', 'used', 'by', 'document', 'with', 'the', 'name', '``', 'Data', 'base', '\\\"', '?']\"\n}"}
{"question": "Return the template type code of the template that is used by a document named Data base.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the template type code of the template that is used by a document named Data base.\",\n\"question_toks\": \"['Return', 'the', 'template', 'type', 'code', 'of', 'the', 'template', 'that', 'is', 'used', 'by', 'a', 'document', 'named', 'Data', 'base', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "Here is the completed json:\n\n{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT t.Template_Type_Code FROM Templates t, Documents d WHERE d.Document_Name = 'Data base' AND d.Template_ID=t.Template_ID\",\n  \"query_toks\": [\"SELECT\", \"t\", \".\", \"Template_Type_Code\", \"FROM\", \"Templates\", \"t\", \",\", \"Documents\", \"d\", \"WHERE\", \"d\", \".\", \"Document_Name\", \"=\", \"'\", \"Data\", \"base\", \"'\", \"AND\", \"d\", \".\", \"Template_ID\", \"=\", \"t\", \".\", \"Template_ID\"],\n  \"query_toks_no_value\": [\"SELECT\", \"t\", \".\", \"Template_Type_Code\", \"FROM\", \"Templates\", \"t\", \",\", \"Documents\", \"d\", \"WHERE\", \"d\", \".\", \"Document_Name\", \"=\", \"value\", \"AND\", \"d\", \".\", \"Template_ID\", \"=\", \"t\", \".\", \"Template_ID\"],\n  \"question\": \"Return the template type code of the template that is used by a document named Data base.\",\n  \"question_toks\": [\"Return\", \"the\", \"template\", \"type\", \"code\", \"of\", \"the\", \"template\", \"that\", \"is\", \"used\", \"by\", \"a\", \"document\", \"named\", \"Data\", \"base\", \".\"]\n}"}
{"question": "Show all document names using templates with template type code BK.", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all document names using templates with template type code BK.\",\n\"question_toks\": \"['Show', 'all', 'document', 'names', 'using', 'templates', 'with', 'template', 'type', 'code', 'BK', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT d.Document_Name FROM Templates T1 JOIN Documents d ON T1.Template_ID = d.Template_ID WHERE T1.Template_Type_Code = 'BK'\",\n    \"query_toks\": \"['SELECT', 'd', '.', 'Document_Name', 'FROM', 'Templates', 'T1', 'JOIN', 'Documents', 'd', 'ON', 'T1', '.', 'Template_ID', '=', 'd', '.', 'Template_ID', 'WHERE', 'T1', '.', 'Template_Type_Code', '=', ''BK'']\",\n    \"query_toks_no_value\": \"['SELECT', 'd', '.', 'Document_Name', 'FROM', 'Templates', 'T1', 'JOIN', 'Documents', 'd', 'ON', 'T1', '.', 'Template_ID', '=', 'd', '.', 'Template_ID', 'WHERE', 'T1', '.', 'Template_Type_Code', '=', '']\",\n    \"question\": \"Show all document names using templates with template type code BK.\",\n    \"question_toks\": \"['Show', 'all', 'document', 'names', 'using', 'templates', 'with', 'template', 'type', 'code', 'BK', '.']\"\n}"}
{"question": "What are the names of documents that use templates with the code BK?", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the names of documents that use templates with the code BK?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'documents', 'that', 'use', 'templates', 'with', 'the', 'code', 'BK', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT d.Document_Name FROM Documents d INNER JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK'\",\n    \"query_toks\": \"['SELECT', 'd', '.', 'Document_Name', 'FROM', 'Documents', 'd', 'INNER', 'JOIN', 'Templates', 't', 'ON', 'd', '.', 'Template_ID', '=', 't', '.', 'Template_ID', 'WHERE', 't', '.', 'Template_Type_Code', '=', ''BK'']\",\n    \"query_toks_no_value\": \"['SELECT', 'd', '.', 'Document_Name', 'FROM', 'Documents', 'd', 'INNER', 'JOIN', 'Templates', 't', 'ON', 'd', '.', 'Template_ID', '=', 't', '.', 'Template_ID', 'WHERE', 't', '.', 'Template_Type_Code', '=', \"BK\"]\",\n    \"question\": \"What are the names of documents that use templates with the code BK?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'documents', 'that', 'use', 'templates', 'with', 'the', 'code', 'BK', '?']\"\n}"}
{"question": "Show all template type codes and the number of documents using each type.", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all template type codes and the number of documents using each type.\",\n\"question_toks\": \"['Show', 'all', 'template', 'type', 'codes', 'and', 'the', 'number', 'of', 'documents', 'using', 'each', 'type', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT T1.Template_Type_Code, COUNT(DISTINCT T2.Document_ID) AS num_documents\\nFROM Templates T1\\nJOIN Documents T2 ON T1.Template_ID = T2.Template_ID\\nGROUP BY T1.Template_Type_Code\",\n  \"query_toks\": \"['SELECT', 'T1', '.', 'Template_Type_Code', ',', 'COUNT', '(', 'DISTINCT', 'T2', '.', 'Document_ID', ')', 'AS', 'num_documents', 'FROM', 'Templates', 'T1', 'JOIN', 'Documents', 'T2', 'ON', 'T1', '.', 'Template_ID', '=', 'T2', '.', 'Template_ID', 'GROUP', 'BY', 'T1', '.', 'Template_Type_Code']\",\n  \"query_toks_no_value\": \"['SELECT', 'T1', '.', '<value>', ',', 'COUNT', '(', 'DISTINCT', 'T2', '.', '<value>', ')', 'AS', 'num_documents', 'FROM', 'Templates', 'T1', 'JOIN', 'Documents', 'T2', 'ON', 'T1', '.', '<value>', '=', 'T2', '.', '<value>', 'GROUP', 'BY', 'T1', '.', '<value>']\",\n  \"question\": \"Show all template type codes and the number of documents using each type.\",\n  \"question_toks\": \"['Show', 'all', 'template', 'type', 'codes', 'and', 'the', 'number', 'of', 'documents', 'using', 'each', 'type', '.']\"\n}"}
{"question": "What are the different template type codes, and how many documents use each type?", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the different template type codes, and how many documents use each type?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'template', 'type', 'codes', ',', 'and', 'how', 'many', 'documents', 'use', 'each', 'type', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT T1.Template_Type_Code, COUNT(DISTINCT T2.Document_ID) FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code\",\n  \"query_toks\": \"['SELECT', 'T1', '.', 'Template_Type_Code', ',', 'COUNT', '(', 'DISTINCT', 'T2', '.', 'Document_ID', ')', 'FROM', 'Templates', 'T1', 'JOIN', 'Documents', 'T2', 'ON', 'T1', '.', 'Template_ID', '=', 'T2', '.', 'Template_ID', 'GROUP', 'BY', 'T1', '.', 'Template_Type_Code']\",\n  \"query_toks_no_value\": \"['SELECT', 'T1', '.', 'Template_Type_Code', ',', 'COUNT', '(', 'DISTINCT', 'T2', '.', 'Document_ID', ')', 'FROM', 'Templates', 'T1', 'JOIN', 'Documents', 'T2', 'ON', 'T1', '.', 'Template_ID', '=', 'T2', '.', 'Template_ID', 'GROUP', 'BY', 'T1', '.', 'Template_Type_Code']\",\n  \"question\": \"What are the different template type codes, and how many documents use each type?\",\n  \"question_toks\": \"['What', 'are', 'the', 'different', 'template', 'type', 'codes', ',', 'and', 'how', 'many', 'documents', 'use', 'each', 'type', '?']\"\n}"}
{"question": "Which template type code is used by most number of documents?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Which template type code is used by most number of documents?\",\n\"question_toks\": \"['Which', 'template', 'type', 'code', 'is', 'used', 'by', 'most', 'number', 'of', 'documents', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Template_Type_Code, COUNT(*) AS num_docs\\nFROM Documents\\nGROUP BY Template_Type_Code\\nORDER BY num_docs DESC\\nLIMIT 1;\",\n  \"query_toks\": \"['SELECT', 'Template_Type_Code', ',', 'COUNT', '(', '*', ')', 'AS', 'num_docs', 'FROM', 'Documents', 'GROUP', 'BY', 'Template_Type_Code', 'ORDER', 'BY', 'num_docs', 'DESC', 'LIMIT', '1', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'Template_Type_Code', ',', 'COUNT', '(', '*', ')', 'AS', '<value>', 'FROM', 'Documents', 'GROUP', 'BY', 'Template_Type_Code', 'ORDER', 'BY', '<value>', 'DESC', 'LIMIT', '1', ';']\",\n  \"question\": \"Which template type code is used by most number of documents?\",\n  \"question_toks\": \"['Which', 'template', 'type', 'code', 'is', 'used', 'by', 'most', 'number', 'of', 'documents', '?']\"\n}"}
{"question": "Return the code of the template type that is most commonly used in documents.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the code of the template type that is most commonly used in documents.\",\n\"question_toks\": \"['Return', 'the', 'code', 'of', 'the', 'template', 'type', 'that', 'is', 'most', 'commonly', 'used', 'in', 'documents', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"cre_Doc_Template_Mgt\",\n \"query\": \"SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID=Templates.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'Template_Type_Code', 'FROM', 'Documents', 'JOIN', 'Templates', 'ON', 'Documents.Template_ID=Templates.Template_ID', 'GROUP', 'BY', 'Template_Type_Code', 'ORDER', 'BY', 'COUNT(*)', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Template_Type_Code', 'FROM', 'Documents', 'JOIN', 'Templates', 'ON', 'Documents.Template_ID=', 'Templates.Template_ID', 'GROUP', 'BY', 'Template_Type_Code', 'ORDER', 'BY', 'COUNT(*)', 'DESC', 'LIMIT', '1']\",\n \"question\": \"Return the code of the template type that is most commonly used in documents.\",\n \"question_toks\": \"['Return', 'the', 'code', 'of', 'the', 'template', 'type', 'that', 'is', 'most', 'commonly', 'used', 'in', 'documents', '.']\"\n}"}
{"question": "Show all template type codes that are not used by any document.", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all template type codes that are not used by any document.\",\n\"question_toks\": \"['Show', 'all', 'template', 'type', 'codes', 'that', 'are', 'not', 'used', 'by', 'any', 'document', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"cre_Doc_Template_Mgt\",\n\"query\": \"SELECT DISTINCT T.Template_Type_Code FROM Template T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'T', '.', 'Template_Type_Code', 'FROM', 'Template', 'T', 'LEFT', 'JOIN', 'Documents', 'D', 'ON', 'T', '.', 'Template_ID', '=', 'D', '.', 'Template_ID', 'WHERE', 'D', '.', 'Document_ID', 'IS', 'NULL']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Template_Type_Code', 'FROM', 'Template', 'LEFT', 'JOIN', 'Documents', 'ON', 'Template', '.', 'Template_ID', '=', 'Documents', '.', 'Template_ID', 'WHERE', 'Documents', '.', 'Document_ID', 'IS', 'NULL']\",\n\"question\": \"Show all template type codes that are not used by any document.\",\n\"question_toks\": \"['Show', 'all', 'template', 'type', 'codes', 'that', 'are', 'not', 'used', 'by', 'any', 'document', '.']\"\n}"}
{"question": "What are the codes of template types that are not used for any document?", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the codes of template types that are not used for any document?\",\n\"question_toks\": \"['What', 'are', 'the', 'codes', 'of', 'template', 'types', 'that', 'are', 'not', 'used', 'for', 'any', 'document', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT t.Template_Type_Code FROM Templates t WHERE t.Template_Type_Code NOT IN (SELECT DISTINCT d.Template_Type_Code FROM Documents d)\",\n    \"query_toks\": \"['SELECT', 't', '.', 'Template_Type_Code', 'FROM', 'Templates', 't', 'WHERE', 't', '.', 'Template_Type_Code', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'd', '.', 'Template_Type_Code', 'FROM', 'Documents', 'd', ')']\",\n    \"query_toks_no_value\": [\"SELECT\", \"t\", \".\", \"Template_Type_Code\", \"FROM\", \"Templates\", \"t\", \"WHERE\", \"t\", \".\", \"Template_Type_Code\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"d\", \".\", \"Template_Type_Code\", \"FROM\", \"Documents\", \"d\", \")\"],\n    \"question\": \"What are the codes of template types that are not used for any document?\",\n    \"question_toks\": \"['What', 'are', 'the', 'codes', 'of', 'template', 'types', 'that', 'are', 'not', 'used', 'for', 'any', 'document', '?']\"\n}"}
{"question": "Show all template type codes and descriptions.", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all template type codes and descriptions.\",\n\"question_toks\": \"['Show', 'all', 'template', 'type', 'codes', 'and', 'descriptions', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Template_Type_Code, Template_Type_Description FROM Template_Type\",\n  \"query_toks\": [\"SELECT\", \"Template_Type_Code\", \",\", \"Template_Type_Description\", \"FROM\", \"Template_Type\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Template_Type_Code\", \",\", \"Template_Type_Description\", \"FROM\", \"Template_Type\"],\n  \"question\": \"Show all template type codes and descriptions.\",\n  \"question_toks\": [\"Show\", \"all\", \"template\", \"type\", \"codes\", \"and\", \"descriptions\", \".\"]\n}"}
{"question": "What are the type codes and descriptions for all template types?", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the type codes and descriptions for all template types?\",\n\"question_toks\": \"['What', 'are', 'the', 'type', 'codes', 'and', 'descriptions', 'for', 'all', 'template', 'types', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_Type_Code, Template_Type_Description FROM Template_Type\",\n    \"query_toks\": [\"SELECT\", \"Template_Type_Code\", \",\", \"Template_Type_Description\", \"FROM\", \"Template_Type\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Template_Type_Code\", \",\", \"Template_Type_Description\", \"FROM\", \"Template_Type\"],\n    \"question\": \"What are the type codes and descriptions for all template types?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"type\", \"codes\", \"and\", \"descriptions\", \"for\", \"all\", \"template\", \"types\", \"?\"]\n}"}
{"question": "What is the template type descriptions for template type code \"AD\".", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the template type descriptions for template type code \"AD\".\",\n\"question_toks\": \"['What', 'is', 'the', 'template', 'type', 'descriptions', 'for', 'template', 'type', 'code', '``', 'AD', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';\",\n    \"query_toks\": [\"SELECT\", \"Template_Type_Description\", \"FROM\", \"Ref_Template_Templates\", \"WHERE\", \"Template_Type_Code\", \"=\", \"'AD';\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Template_Type_Description\", \"FROM\", \"Ref_Template_Templates\", \"WHERE\", \"Template_Type_Code\", \"=\", \"?\"],\n    \"question\": \"What is the template type descriptions for template type code \\\"AD\\\"?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"template\", \"type\", \"descriptions\", \"for\", \"template\", \"type\", \"code\", \"\\\"AD\\\"?\"]\n}"}
{"question": "Return the template type description of the template type with the code AD.", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the template type description of the template type with the code AD.\",\n\"question_toks\": \"['Return', 'the', 'template', 'type', 'description', 'of', 'the', 'template', 'type', 'with', 'the', 'code', 'AD', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_Type_Description FROM Templates T1 WHERE T1.Template_Type_Code = 'AD'\",\n    \"query_toks\": [\"SELECT\", \"Template_Type_Description\", \"FROM\", \"Templates\", \"T1\", \"WHERE\", \"T1.Template_Type_Code\", \"=\", \"'AD'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Template_Type_Description\", \"FROM\", \"Templates\", \"T1\", \"WHERE\", \"T1.Template_Type_Code\", \"=\"],\n    \"question\": \"Return the template type description of the template type with the code AD.\",\n    \"question_toks\": [\"Return\", \"the\", \"template\", \"type\", \"description\", \"of\", \"the\", \"template\", \"type\", \"with\", \"the\", \"code\", \"AD\", \".\"]\n}"}
{"question": "What is the template type code for template type description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the template type code for template type description \"Book\".\",\n\"question_toks\": \"['What', 'is', 'the', 'template', 'type', 'code', 'for', 'template', 'type', 'description', '``', 'Book', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Template_Type_Code FROM Template_Types WHERE Template_Type_Description = 'Book'\",\n  \"query_toks\": [\"SELECT\", \"Template_Type_Code\", \"FROM\", \"Template_Types\", \"WHERE\", \"Template_Type_Description\", \"=\", \"'Book'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Template_Type_Code\", \"FROM\", \"Template_Types\", \"WHERE\", \"Template_Type_Description\", \"=\"],\n  \"question\": \"What is the template type code for template type description \\\"Book\\\"?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"template\", \"type\", \"code\", \"for\", \"template\", \"type\", \"description\", \"\\\"Book\\\"\", \"?\"]\n}"}
{"question": "Return the type code of the template type with the description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the type code of the template type with the description \"Book\".\",\n\"question_toks\": \"['Return', 'the', 'type', 'code', 'of', 'the', 'template', 'type', 'with', 'the', 'description', '``', 'Book', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Template_Type_Code FROM Template_Types WHERE Template_Type_Description = 'Book';\",\n  \"query_toks\": [\"SELECT\", \"Template_Type_Code\", \"FROM\", \"Template_Types\", \"WHERE\", \"Template_Type_Description\", \"=\", \"'Book'\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Template_Type_Code\", \"FROM\", \"Template_Types\", \"WHERE\", \"Template_Type_Description\", \"=\", \";\"],\n  \"question\": \"Return the type code of the template type with the description \\\"Book\\\".\",\n  \"question_toks\": [\"Return\", \"the\", \"type\", \"code\", \"of\", \"the\", \"template\", \"type\", \"with\", \"the\", \"description\", \"\\\"Book\\\".\",]\n}"}
{"question": "What are the distinct template type descriptions for the templates ever used by any document?", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the distinct template type descriptions for the templates ever used by any document?\",\n\"question_toks\": \"['What', 'are', 'the', 'distinct', 'template', 'type', 'descriptions', 'for', 'the', 'templates', 'ever', 'used', 'by', 'any', 'document', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Template_Type_Description', 'FROM', 'Ref_Template_Types', 'INNER', 'JOIN', 'Templates', 'ON', 'Ref_Template_Types.Template_Type_Code', '=', 'Templates.Template_Type_Code', 'INNER', 'JOIN', 'Documents', 'ON', 'Templates.Template_ID', '=', 'Documents.Template_ID']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Template_Type_Description', 'FROM', 'Ref_Template_Types', 'INNER', 'JOIN', 'Templates', 'ON', 'Ref_Template_Types', '.', 'Template_Type_Code', '=', 'Templates', '.', 'Template_Type_Code', 'INNER', 'JOIN', 'Documents', 'ON', 'Templates', '.', 'Template_ID', '=', 'Documents', '.', 'Template_ID']\",\n    \"question\": \"What are the distinct template type descriptions for the templates ever used by any document?\",\n    \"question_toks\": \"['What', 'are', 'the', 'distinct', 'template', 'type', 'descriptions', 'for', 'the', 'templates', 'ever', 'used', 'by', 'any', 'document', '?']\"\n}"}
{"question": "Return the different descriptions for templates that have been used in a document.", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the different descriptions for templates that have been used in a document.\",\n\"question_toks\": \"['Return', 'the', 'different', 'descriptions', 'for', 'templates', 'that', 'have', 'been', 'used', 'in', 'a', 'document', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT DISTINCT t.Template_Details\\nFROM Templates t\\nJOIN Documents d ON t.Template_ID = d.Template_ID\\nWHERE d.Document_ID = [DOCUMENT ID GOES HERE];\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 't.Template_Details', 'FROM', 'Templates', 't', 'JOIN', 'Documents', 'd', 'ON', 't.Template_ID', '=', 'd.Template_ID', 'WHERE', 'd.Document_ID', '=', '[', 'DOCUMENT', 'ID', 'GOES', 'HERE', ']', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 't.Template_Details', 'FROM', 'Templates', 't', 'JOIN', 'Documents', 'd', 'ON', 't.Template_ID', '=', 'd.Template_ID', 'WHERE', 'd.Document_ID', '=', ';']\",\n    \"question\": \"Return the different descriptions for templates that have been used in a document.\",\n    \"question_toks\": \"['Return', 'the', 'different', 'descriptions', 'for', 'templates', 'that', 'have', 'been', 'used', 'in', 'a', 'document', '.']\"\n}"}
{"question": "What are the template ids with template type description \"Presentation\".", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the template ids with template type description \"Presentation\".\",\n\"question_toks\": \"['What', 'are', 'the', 'template', 'ids', 'with', 'template', 'type', 'description', '``', 'Presentation', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_ID FROM Templates T1 JOIN Template_Type T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'\",\n    \"query_toks\": [\"SELECT\", \"Template_ID\", \"FROM\", \"Templates\", \"T1\", \"JOIN\", \"Template_Type\", \"T2\", \"ON\", \"T1.Template_Type_Code\", \"=\", \"T2.Template_Type_Code\", \"WHERE\", \"T2.Template_Type_Description\", \"=\", \"'Presentation'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Template_ID\", \"FROM\", \"Templates\", \"T1\", \"JOIN\", \"Template_Type\", \"T2\", \"ON\", \"T1.Template_Type_Code\", \"=\", \"T2.Template_Type_Code\", \"WHERE\", \"T2.Template_Type_Description\", \"=\", \"?\"],\n    \"question\": \"What are the template ids with template type description \\\"Presentation\\\".\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"template\", \"ids\", \"with\", \"template\", \"type\", \"description\", \"\\\"\", \"Presentation\", \"\\\"\", \".\"]\n}"}
{"question": "Return the ids corresponding to templates with the description 'Presentation'.", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the ids corresponding to templates with the description 'Presentation'.\",\n\"question_toks\": \"['Return', 'the', 'ids', 'corresponding', 'to', 'templates', 'with', 'the', 'description', \"'Presentation\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Template_ID FROM Templates WHERE Template_Type_Description = 'Presentation'\",\n    \"query_toks\": [\"SELECT\", \"Template_ID\", \"FROM\", \"Templates\", \"WHERE\", \"Template_Type_Description\", \"=\", \"'Presentation'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Template_ID\", \"FROM\", \"Templates\", \"WHERE\", \"Template_Type_Description\", \"=\"],\n    \"question\": \"Return the ids corresponding to templates with the description 'Presentation'.\",\n    \"question_toks\": [\"Return\", \"the\", \"ids\", \"corresponding\", \"to\", \"templates\", \"with\", \"the\", \"description\", \"'Presentation'\", \".\"]\n}"}
{"question": "How many paragraphs in total?", "sql": "SELECT count(*) FROM Paragraphs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"How many paragraphs in total?\",\n\"question_toks\": \"['How', 'many', 'paragraphs', 'in', 'total', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT COUNT(*) FROM Paragraphs;\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Paragraphs\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Paragraphs\", \";\"],\n  \"question\": \"How many paragraphs in total?\",\n  \"question_toks\": [\"How\", \"many\", \"paragraphs\", \"in\", \"total\", \"?\"]\n}"}
{"question": "Count the number of paragraphs.", "sql": "SELECT count(*) FROM Paragraphs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Count the number of paragraphs.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'paragraphs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT COUNT(*) FROM Paragraphs;\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Paragraphs\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Paragraphs\", \";\"],\n    \"question\": \"Count the number of paragraphs.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"paragraphs\", \".\"]\n}"}
{"question": "How many paragraphs for the document with name 'Summer Show'?", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"How many paragraphs for the document with name 'Summer Show'?\",\n\"question_toks\": \"['How', 'many', 'paragraphs', 'for', 'the', 'document', 'with', 'name', \"'Summer\", 'Show', \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT COUNT(Paragraph_ID) FROM Paragraphs P, Documents D WHERE D.Document_Name = 'Summer Show' AND D.Document_ID = P.Document_ID\",\n    \"query_toks\": [\"SELECT\", \"COUNT(\", \"Paragraph_ID\", \")\", \"FROM\", \"Paragraphs\", \"P\", \",\", \"Documents\", \"D\", \"WHERE\", \"D.Document_Name\", \"=\", \"'Summer Show'\", \"AND\", \"D.Document_ID\", \"=\", \"P.Document_ID\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT(\", \"Paragraph_ID\", \")\", \"FROM\", \"Paragraphs\", \"P\", \",\", \"Documents\", \"D\", \"WHERE\", \"D.Document_Name\", \"=\", \"\", \"AND\", \"D.Document_ID\", \"=\", \"P.Document_ID\"],\n    \"question\": \"How many paragraphs for the document with name 'Summer Show'?\",\n    \"question_toks\": [\"How\", \"many\", \"paragraphs\", \"for\", \"the\", \"document\", \"with\", \"name\", \"'Summer\", \"Show\", \"'\", \"?\"]\n}"}
{"question": "Count the number of paragraphs in the document named 'Summer Show'.", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Count the number of paragraphs in the document named 'Summer Show'.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'paragraphs', 'in', 'the', 'document', 'named', \"'Summer\", 'Show', \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT COUNT(*) FROM Paragraphs P, Documents D WHERE P.Document_ID=D.Document_ID AND D.Document_Name='Summer Show'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Paragraphs\", \"P\", \",\", \"Documents\", \"D\", \"WHERE\", \"P\", \".\", \"Document_ID\", \"=\", \"D\", \".\", \"Document_ID\", \"AND\", \"D\", \".\", \"Document_Name\", \"=\", \"'Summer Show'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Paragraphs\", \"P\", \",\", \"Documents\", \"D\", \"WHERE\", \"P\", \".\", \"Document_ID\", \"=\", \"D\", \".\", \"Document_ID\", \"AND\", \"D\", \".\", \"Document_Name\", \"=\", \"?\"],\n    \"question\": \"Count the number of paragraphs in the document named 'Summer Show'.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"paragraphs\", \"in\", \"the\", \"document\", \"named\", \"'Summer\", \"Show\", \"'\", \".\"]\n}"}
{"question": "Show paragraph details for paragraph with text 'Korea ' .", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show paragraph details for paragraph with text 'Korea ' .\",\n\"question_toks\": \"['Show', 'paragraph', 'details', 'for', 'paragraph', 'with', 'text', \"'Korea\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT * FROM Paragraphs as p JOIN Documents as d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text LIKE '%Korea%';\",\n    \"query_toks\": \"['SELECT', '*', 'FROM', 'Paragraphs', 'as', 'p', 'JOIN', 'Documents', 'as', 'd', 'ON', 'p', '.', 'Document_ID', '=', 'd', '.', 'Document_ID', 'WHERE', 'p', '.', 'Paragraph_Text', 'LIKE', \\\"'%Korea%'\\\", ';']\",\n    \"query_toks_no_value\": \"['SELECT', '*', 'FROM', 'Paragraphs', 'as', 'p', 'JOIN', 'Documents', 'as', 'd', 'ON', 'p', '.', 'Document_ID', '=', 'd', '.', 'Document_ID', 'WHERE', 'p', '.', 'Paragraph_Text', 'LIKE', '\\\"%value%\\\"', ';']\",\n    \"question\": \"Show paragraph details for paragraph with text 'Korea '.\",\n    \"question_toks\": \"['Show', 'paragraph', 'details', 'for', 'paragraph', 'with', 'text', \\\"'Korea\\\", \\\"'\\\", '.']\"\n}"}
{"question": "What are the details for the paragraph that includes the text 'Korea ' ?", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the details for the paragraph that includes the text 'Korea ' ?\",\n\"question_toks\": \"['What', 'are', 'the', 'details', 'for', 'the', 'paragraph', 'that', 'includes', 'the', 'text', \"'Korea\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'\",\n  \"query_toks\": \"['SELECT', '*', 'FROM', 'Paragraphs', 'WHERE', 'Paragraph_Text', 'LIKE', ''%'Korea'%''']\",\n  \"query_toks_no_value\": \"['SELECT', '*', 'FROM', 'Paragraphs', 'WHERE', 'Paragraph_Text', 'LIKE', ''%'?''']\",\n  \"question\": \"What are the details for the paragraph that includes the text 'Korea ' ?\",\n  \"question_toks\": \"['What', 'are', 'the', 'details', 'for', 'the', 'paragraph', 'that', 'includes', 'the', 'text', \"'Korea\", \"'\", '?']\"\n}"}
{"question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all paragraph ids and texts for the document with name 'Welcome to NY'.\",\n\"question_toks\": \"['Show', 'all', 'paragraph', 'ids', 'and', 'texts', 'for', 'the', 'document', 'with', 'name', \"'Welcome\", 'to', 'NY', \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Welcome to NY'\",\n  \"query_toks\": [\"SELECT\", \"Paragraph_ID\", \",\", \"Paragraph_Text\", \"FROM\", \"Paragraphs\", \"P\", \"JOIN\", \"Documents\", \"D\", \"ON\", \"P\", \".\", \"Document_ID\", \"=\", \"D\", \".\", \"Document_ID\", \"WHERE\", \"D\", \".\", \"Document_Name\", \"=\", \"'Welcome\", \"to\", \"NY'\", \"\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Paragraph_ID\", \",\", \"Paragraph_Text\", \"FROM\", \"Paragraphs\", \"P\", \"JOIN\", \"Documents\", \"D\", \"ON\", \"P\", \".\", \"Document_ID\", \"=\", \"D\", \".\", \"Document_ID\", \"WHERE\", \"D\", \".\", \"Document_Name\", \"=\", \"\"],\n  \"question\": \"Show all paragraph ids and texts for the document with name 'Welcome to NY'.\",\n  \"question_toks\": [\"Show\", \"all\", \"paragraph\", \"ids\", \"and\", \"texts\", \"for\", \"the\", \"document\", \"with\", \"name\", \"'Welcome\", \"to\", \"NY\", \"'\", \".\"]\n}"}
{"question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'texts', 'of', 'paragraphs', 'in', 'the', 'document', 'titled', \"'Welcome\", 'to', 'NY', \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Welcome to NY'\",\n  \"query_toks\": \"['SELECT', 'Paragraph_ID', ',', 'Paragraph_Text', 'FROM', 'Paragraphs', 'P', 'JOIN', 'Documents', 'D', 'ON', 'P', '.', 'Document_ID', '=', 'D', '.', 'Document_ID', 'WHERE', 'D', '.', 'Document_Name', '=', ''Welcome', 'to', 'NY', ''']\",\n  \"query_toks_no_value\": \"['SELECT', 'Paragraph_ID', ',', 'Paragraph_Text', 'FROM', 'Paragraphs', 'P', 'JOIN', 'Documents', 'D', 'ON', 'P', '.', 'Document_ID', '=', 'D', '.', 'Document_ID', 'WHERE', 'D', '.', 'Document_Name', '=', '', '', '']\",\n  \"question\": \"What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?\",\n  \"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'texts', 'of', 'paragraphs', 'in', 'the', 'document', 'titled', ''Welcome', 'to', 'NY', ''', '?']\"\n}"}
{"question": "Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all paragraph texts for the document \"Customer reviews\".\",\n\"question_toks\": \"['Show', 'all', 'paragraph', 'texts', 'for', 'the', 'document', '``', 'Customer', 'reviews', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"cre_Doc_Template_Mgt\",\n\"query\": \"SELECT Paragraph_Text FROM Paragraphs T1 JOIN Documents T2 ON T1.Document_ID=T2.Document_ID WHERE T2.Document_Name='Customer reviews'\",\n\"query_toks\": \"['SELECT', 'Paragraph_Text', 'FROM', 'Paragraphs', 'T1', 'JOIN', 'Documents', 'T2', 'ON', 'T1', '.', 'Document_ID', '=', 'T2', '.', 'Document_ID', 'WHERE', 'T2', '.', 'Document_Name', '=', \"'Customer reviews'']\",\n\"query_toks_no_value\": \"['SELECT', 'Paragraph_Text', 'FROM', 'Paragraphs', 'T1', 'JOIN', 'Documents', 'T2', 'ON', 'T1', '.', 'Document_ID', '=', 'T2', '.', 'Document_ID', 'WHERE', 'T2', '.', 'Document_Name', '=', \"']\",\n\"question\": \"Show all paragraph texts for the document \"Customer reviews\".\",\n\"question_toks\": \"['Show', 'all', 'paragraph', 'texts', 'for', 'the', 'document', '``', 'Customer', 'reviews', \"''\", '.']\"\n}"}
{"question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the paragraph texts for the document with the name 'Customer reviews'?\",\n\"question_toks\": \"['What', 'are', 'the', 'paragraph', 'texts', 'for', 'the', 'document', 'with', 'the', 'name', \"'Customer\", 'reviews', \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"cre_Doc_Template_Mgt\",\n\"query\": \"SELECT Paragraph_Text FROM Paragraphs p, Documents d WHERE p.Document_ID=d.Document_ID and d.Document_Name='Customer reviews'\",\n\"query_toks\": [\"SELECT\", \"Paragraph_Text\", \"FROM\", \"Paragraphs\", \"p\", \",\", \"Documents\", \"d\", \"WHERE\", \"p\", \".\", \"Document_ID\", \"=\", \"d\", \".\", \"Document_ID\", \"and\", \"d\", \".\", \"Document_Name\", \"=\", \"'Customer reviews'\"],\n\"query_toks_no_value\": [\"SELECT\", \"Paragraph_Text\", \"FROM\", \"Paragraphs\", \"p\", \",\", \"Documents\", \"d\", \"WHERE\", \"p\", \".\", \"Document_ID\", \"=\", \"d\", \".\", \"Document_ID\", \"and\", \"d\", \".\", \"Document_Name\", \"=\"],\n\"question\": \"What are the paragraph texts for the document with the name 'Customer reviews'?\",\n\"question_toks\": [\"What\", \"are\", \"the\", \"paragraph\", \"texts\", \"for\", \"the\", \"document\", \"with\", \"the\", \"name\", \"'Customer reviews'\", \"?\"]\n}"}
{"question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all document ids and the number of paragraphs in each document. Order by document id.\",\n\"question_toks\": \"['Show', 'all', 'document', 'ids', 'and', 'the', 'number', 'of', 'paragraphs', 'in', 'each', 'document', '.', 'Order', 'by', 'document', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents AS d JOIN Paragraphs AS p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID\",\n  \"query_toks\": [\"SELECT\", \"d\", \".\", \"Document_ID\", \",\", \"COUNT\", \"(\", \"p\", \".\", \"Paragraph_ID\", \")\", \"AS\", \"Paragraph_Count\", \"FROM\", \"Documents\", \"AS\", \"d\", \"JOIN\", \"Paragraphs\", \"AS\", \"p\", \"ON\", \"d\", \".\", \"Document_ID\", \"=\", \"p\", \".\", \"Document_ID\", \"GROUP\", \"BY\", \"d\", \".\", \"Document_ID\", \"ORDER\", \"BY\", \"d\", \".\", \"Document_ID\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Document_ID\", \",\", \"COUNT\", \"(\", \"Paragraph_ID\", \")\", \"FROM\", \"Documents\", \"AS\", \"d\", \"JOIN\", \"Paragraphs\", \"AS\", \"p\", \"ON\", \"d\", \".\", \"Document_ID\", \"=\", \"p\", \".\", \"Document_ID\", \"GROUP\", \"BY\", \"Document_ID\", \"ORDER\", \"BY\", \"Document_ID\"],\n  \"question\": \"Show all document ids and the number of paragraphs in each document. Order by document id.\",\n  \"question_toks\": [\"Show\", \"all\", \"document\", \"ids\", \"and\", \"the\", \"number\", \"of\", \"paragraphs\", \"in\", \"each\", \"document\", \".\", \"Order\", \"by\", \"document\", \"id\", \".\"]\n}"}
{"question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.\",\n\"question_toks\": \"['Return', 'the', 'different', 'document', 'ids', 'along', 'with', 'the', 'number', 'of', 'paragraphs', 'corresponding', 'to', 'each', ',', 'ordered', 'by', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID\",\n  \"query_toks\": [\"SELECT\", \"Documents\", \".\", \"Document_ID\", \",\", \"COUNT\", \"(\", \"Paragraphs\", \".\", \"Paragraph_ID\", \")\", \"AS\", \"Num_Paragraphs\", \"FROM\", \"Documents\", \"JOIN\", \"Paragraphs\", \"ON\", \"Documents\", \".\", \"Document_ID\", \"=\", \"Paragraphs\", \".\", \"Document_ID\", \"GROUP\", \"BY\", \"Documents\", \".\", \"Document_ID\", \"ORDER\", \"BY\", \"Documents\", \".\", \"Document_ID\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Documents\", \".\", \"Document_ID\", \",\", \"COUNT\", \"(\", \"Paragraphs\", \".\", \"Paragraph_ID\", \")\", \"AS\", \"Num_Paragraphs\", \"FROM\", \"Documents\", \"JOIN\", \"Paragraphs\", \"ON\", \"Documents\", \".\", \"Document_ID\", \"=\", \"Paragraphs\", \".\", \"Document_ID\", \"GROUP\", \"BY\", \"Documents\", \".\", \"Document_ID\", \"ORDER\", \"BY\", \"Documents\", \".\", \"Document_ID\"],\n  \"question\": \"Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.\",\n  \"question_toks\": [\"Return\", \"the\", \"different\", \"document\", \"ids\", \"along\", \"with\", \"the\", \"number\", \"of\", \"paragraphs\", \"corresponding\", \"to\", \"each\", \",\", \"ordered\", \"by\", \"id\", \".\"]\n}"}
{"question": "Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show all document ids, names and the number of paragraphs in each document.\",\n\"question_toks\": \"['Show', 'all', 'document', 'ids', ',', 'names', 'and', 'the', 'number', 'of', 'paragraphs', 'in', 'each', 'document', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name\",\n  \"query_toks\": \"[SELECT, d.Document_ID, ,, d.Document_Name, ,, COUNT, (, p.Paragraph_ID, ), FROM, Documents, d, JOIN, Paragraphs, p, ON, d.Document_ID, =, p.Document_ID, GROUP, BY, d.Document_ID, ,, d.Document_Name]\",\n  \"query_toks_no_value\": \"[SELECT, Document_ID, ,, Document_Name, ,, COUNT, (, Paragraph_ID, ), FROM, Documents, JOIN, Paragraphs, ON, Document_ID, =, Document_ID, GROUP, BY, Document_ID, ,, Document_Name]\",\n  \"question\": \"Show all document ids, names and the number of paragraphs in each document.\",\n  \"question_toks\": \"[Show, all, document, ids, ,, names, and, the, number, of, paragraphs, in, each, document, .]\"\n}"}
{"question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the ids and names of each document, as well as the number of paragraphs in each?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'names', 'of', 'each', 'document', ',', 'as', 'well', 'as', 'the', 'number', 'of', 'paragraphs', 'in', 'each', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) as num_paragraphs FROM Documents d INNER JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID\",\n    \"query_toks\": \"['SELECT', 'd', '.', 'Document_ID', ',', 'd', '.', 'Document_Name', ',', 'COUNT', '(', 'p', '.', 'Paragraph_ID', ')', 'as', 'num_paragraphs', 'FROM', 'Documents', 'd', 'INNER', 'JOIN', 'Paragraphs', 'p', 'ON', 'd', '.', 'Document_ID', '=', 'p', '.', 'Document_ID', 'GROUP', 'BY', 'd', '.', 'Document_ID']\",\n    \"query_toks_no_value\": \"['SELECT', 'Documents', '.', 'Document_ID', ',', 'Documents', '.', 'Document_Name', ',', 'COUNT', '(', 'Paragraphs', '.', 'Paragraph_ID', ')', 'FROM', 'Documents', 'INNER', 'JOIN', 'Paragraphs', 'ON', 'Documents', '.', 'Document_ID', '=', 'Paragraphs', '.', 'Document_ID', 'GROUP', 'BY', 'Documents', '.', 'Document_ID']\",\n    \"question\": \"What are the ids and names of each document, as well as the number of paragraphs in each?\",\n    \"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'names', 'of', 'each', 'document', ',', 'as', 'well', 'as', 'the', 'number', 'of', 'paragraphs', 'in', 'each', '?']\"\n}"}
{"question": "List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"List all document ids with at least two paragraphs.\",\n\"question_toks\": \"['List', 'all', 'document', 'ids', 'with', 'at', 'least', 'two', 'paragraphs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT DISTINCT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) >= 2\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'Documents', '.', 'Document_ID', 'FROM', 'Documents', 'JOIN', 'Paragraphs', 'ON', 'Documents', '.', 'Document_ID', '=', 'Paragraphs', '.', 'Document_ID', 'GROUP', 'BY', 'Documents', '.', 'Document_ID', 'HAVING', 'COUNT', '(', 'DISTINCT', 'Paragraphs', '.', 'Paragraph_ID', ')', '>=', '2']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Documents', '.', 'Document_ID', 'FROM', 'Documents', 'JOIN', 'Paragraphs', 'ON', 'Documents', '.', 'Document_ID', '=', 'Paragraphs', '.', 'Document_ID', 'GROUP', 'BY', 'Documents', '.', 'Document_ID', 'HAVING', 'COUNT', '(', 'DISTINCT', 'Paragraphs', '.', 'Paragraph_ID', ')', '>=', '?']\",\n  \"question\": \"List all document ids with at least two paragraphs.\",\n  \"question_toks\": \"['List', 'all', 'document', 'ids', 'with', 'at', 'least', 'two', 'paragraphs', '.']\"\n}"}
{"question": "What are the ids of documents that have 2 or more paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the ids of documents that have 2 or more paragraphs?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'documents', 'that', 'have', '2', 'or', 'more', 'paragraphs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID=p.Document_ID GROUP BY d.Document_ID HAVING COUNT(*)>=2\",\n    \"query_toks\": \"['SELECT', 'd', '.', 'Document_ID', 'FROM', 'Documents', 'd', 'JOIN', 'Paragraphs', 'p', 'ON', 'd', '.', 'Document_ID', '=', 'p', '.', 'Document_ID', 'GROUP', 'BY', 'd', '.', 'Document_ID', 'HAVING', 'COUNT', '(', '*', ')', '>=', '2']\",\n    \"query_toks_no_value\": \"['SELECT', 'd', '.', 'Document_ID', 'FROM', 'Documents', 'd', 'JOIN', 'Paragraphs', 'p', 'ON', 'd', '.', 'Document_ID', '=', 'p', '.', 'Document_ID', 'GROUP', 'BY', 'd', '.', 'Document_ID', 'HAVING', 'COUNT', '(', '*', ')', '>=', '<value>']\",\n    \"question\": \"What are the ids of documents that have 2 or more paragraphs?\",\n    \"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'documents', 'that', 'have', '2', 'or', 'more', 'paragraphs', '?']\"\n}"}
{"question": "What is the document id and name with greatest number of paragraphs?", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the document id and name with greatest number of paragraphs?\",\n\"question_toks\": \"['What', 'is', 'the', 'document', 'id', 'and', 'name', 'with', 'greatest', 'number', 'of', 'paragraphs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID = (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) DESC LIMIT 1)\",\n  \"query_toks\": \"['SELECT', 'Document_ID', ',', 'Document_Name', 'FROM', 'Documents', 'WHERE', 'Document_ID', '=', '(', 'SELECT', 'Document_ID', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'Document_ID', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1', ')']\",\n  \"query_toks_no_value\": \"['SELECT', 'Document_ID', ',', 'Document_Name', 'FROM', 'Documents', 'WHERE', 'Document_ID', '=', '(', 'SELECT', 'Document_ID', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'Document_ID', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '?', ')']\",\n  \"question\": \"What is the document id and name with greatest number of paragraphs?\",\n  \"question_toks\": \"['What', 'is', 'the', 'document', 'id', 'and', 'name', 'with', 'greatest', 'number', 'of', 'paragraphs', '?']\"\n}"}
{"question": "Return the id and name of the document with the most paragraphs.", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the id and name of the document with the most paragraphs.\",\n\"question_toks\": \"['Return', 'the', 'id', 'and', 'name', 'of', 'the', 'document', 'with', 'the', 'most', 'paragraphs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"cre_Doc_Template_Mgt\",\n\"query\": \"SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (SELECT Document_ID, COUNT(*) as num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1) p ON d.Document_ID = p.Document_ID\",\n\"query_toks\": \"['SELECT', 'd', '.', 'Document_ID', ',', 'd', '.', 'Document_Name', 'FROM', 'Documents', 'd', 'JOIN', '(', 'SELECT', 'Document_ID', ',', 'COUNT', '(', '*', ')', 'as', 'num_paragraphs', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'Document_ID', 'ORDER', 'BY', 'num_paragraphs', 'DESC', 'LIMIT', '1', ')', 'p', 'ON', 'd', '.', 'Document_ID', '=', 'p', '.', 'Document_ID']\",\n\"query_toks_no_value\": \"['SELECT', 'd', '.', '<column>', ',', 'd', '.', '<column>', 'FROM', 'Documents', 'd', 'JOIN', '(', 'SELECT', '<column>', ',', 'COUNT', '(', '*', ')', 'as', 'num_paragraphs', 'FROM', 'Paragraphs', 'GROUP', 'BY', '<column>', 'ORDER', 'BY', 'num_paragraphs', 'DESC', 'LIMIT', '1', ')', 'p', 'ON', 'd', '.', '<column>', '=', 'p', '.', '<column>']\",\n\"question\": \"Return the id and name of the document with the most paragraphs.\",\n\"question_toks\": \"['Return', 'the', 'id', 'and', 'name', 'of', 'the', 'document', 'with', 'the', 'most', 'paragraphs', '.']\"\n}"}
{"question": "What is the document id with least number of paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the document id with least number of paragraphs?\",\n\"question_toks\": \"['What', 'is', 'the', 'document', 'id', 'with', 'least', 'number', 'of', 'paragraphs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"cre_Doc_Template_Mgt\",\n\"query\": \"SELECT Document_ID, COUNT(Paragraph_ID) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs ASC LIMIT 1;\",\n\"query_toks\": \"['SELECT', 'Document_ID', ',', 'COUNT', '(', 'Paragraph_ID', ')', 'AS', 'num_paragraphs', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'Document_ID', 'ORDER', 'BY', 'num_paragraphs', 'ASC', 'LIMIT', '1', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'Document_ID', ',', 'COUNT', '(', 'Paragraph_ID', ')', 'AS', 'num_paragraphs', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'Document_ID', 'ORDER', 'BY', 'num_paragraphs', 'ASC', 'LIMIT', '1', ';']\",\n\"question\": \"What is the document id with least number of paragraphs?\",\n\"question_toks\": \"['What', 'is', 'the', 'document', 'id', 'with', 'least', 'number', 'of', 'paragraphs', '?']}\"\n}"}
{"question": "Return the id of the document with the fewest paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Return the id of the document with the fewest paragraphs.\",\n\"question_toks\": \"['Return', 'the', 'id', 'of', 'the', 'document', 'with', 'the', 'fewest', 'paragraphs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"cre_Doc_Template_Mgt\",\n\"query\": \"SELECT d.Document_ID FROM Documents d JOIN (SELECT Document_ID, COUNT(*) as num_paragraphs FROM Paragraphs GROUP BY Document_ID) p ON d.Document_ID = p.Document_ID ORDER BY num_paragraphs ASC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'd', '.', 'Document_ID', 'FROM', 'Documents', 'd', 'JOIN', '(', 'SELECT', 'Document_ID', ',', 'COUNT', '(', '*', ')', 'as', 'num_paragraphs', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'Document_ID', ')', 'p', 'ON', 'd', '.', 'Document_ID', '=', 'p', '.', 'Document_ID', 'ORDER', 'BY', 'num_paragraphs', 'ASC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'd', '.', 'Document_ID', 'FROM', 'Documents', 'd', 'JOIN', '(', 'SELECT', 'Document_ID', ',', 'COUNT', '(', '*', ')', 'as', 'num_paragraphs', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'Document_ID', ')', 'p', 'ON', 'd', '.', 'Document_ID', '=', 'p', '.', 'Document_ID', 'ORDER', 'BY', 'num_paragraphs', 'ASC', 'LIMIT', '1']\",\n\"question\": \"Return the id of the document with the fewest paragraphs.\",\n\"question_toks\": \"['Return', 'the', 'id', 'of', 'the', 'document', 'with', 'the', 'fewest', 'paragraphs', '.']\"\n}"}
{"question": "What is the document id with 1 to 2 paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What is the document id with 1 to 2 paragraphs?\",\n\"question_toks\": \"['What', 'is', 'the', 'document', 'id', 'with', '1', 'to', '2', 'paragraphs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2)\",\n    \"query_toks\": [\"SELECT\", \"Document_ID\", \"FROM\", \"Documents\", \"WHERE\", \"Document_ID\", \"IN\", \"(\", \"SELECT\", \"Document_ID\", \"FROM\", \"Paragraphs\", \"GROUP\", \"BY\", \"Document_ID\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \"BETWEEN\", \"1\", \"AND\", \"2\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Document_ID\", \"FROM\", \"Documents\", \"WHERE\", \"Document_ID\", \"IN\", \"(\", \"SELECT\", \"Document_ID\", \"FROM\", \"Paragraphs\", \"GROUP\", \"BY\", \"Document_ID\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \"BETWEEN\", \"<s>\", \"AND\", \"<s>\", \")\"],\n    \"question\": \"What is the document id with 1 to 2 paragraphs?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"document\", \"id\", \"with\", \"1\", \"to\", \"2\", \"paragraphs\", \"?\"]\n}"}
{"question": "Give the ids of documents that have between one and two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Give the ids of documents that have between one and two paragraphs.\",\n\"question_toks\": \"['Give', 'the', 'ids', 'of', 'documents', 'that', 'have', 'between', 'one', 'and', 'two', 'paragraphs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"cre_Doc_Template_Mgt\",\n  \"query\": \"SELECT d.Document_ID FROM Documents d JOIN (SELECT Document_ID, COUNT(*) AS paragraph_count FROM Paragraphs GROUP BY Document_ID) AS p ON d.Document_ID = p.Document_ID WHERE p.paragraph_count BETWEEN 1 AND 2\",\n  \"query_toks\": \"['SELECT', 'd', '.', 'Document_ID', 'FROM', 'Documents', 'd', 'JOIN', '(', 'SELECT', 'Document_ID', ',', 'COUNT', '(', '*', ')', 'AS', 'paragraph_count', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'Document_ID', ')', 'AS', 'p', 'ON', 'd', '.', 'Document_ID', '=', 'p', '.', 'Document_ID', 'WHERE', 'p', '.', 'paragraph_count', 'BETWEEN', '1', 'AND', '2']\",\n  \"query_toks_no_value\": \"['SELECT', 'd', '.', 'Document_ID', 'FROM', 'Documents', 'd', 'JOIN', '(', 'SELECT', 'Document_ID', ',', 'COUNT', '(', '*', ')', 'AS', 'paragraph_count', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'Document_ID', ')', 'AS', 'p', 'ON', 'd', '.', 'Document_ID', '=', 'p', '.', 'Document_ID', 'WHERE', 'p', '.', 'paragraph_count', 'BETWEEN', '<VALUE>', 'AND', '<VALUE>']\",\n  \"question\": \"Give the ids of documents that have between one and two paragraphs.\",\n  \"question_toks\": \"['Give', 'the', 'ids', 'of', 'documents', 'that', 'have', 'between', 'one', 'and', 'two', 'paragraphs', '.']\"\n}"}
{"question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"Show the document id with paragraph text 'Brazil' and 'Ireland'.\",\n\"question_toks\": \"['Show', 'the', 'document', 'id', 'with', 'paragraph', 'text', \"'Brazil\", \"'\", 'and', \"'Ireland\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"cre_Doc_Template_Mgt\",\n\"query\": \"SELECT DISTINCT Documents.Document_ID FROM Documents \\\nJOIN Paragraphs AS P1 ON Documents.Document_ID = P1.Document_ID \\\nJOIN Paragraphs AS P2 ON Documents.Document_ID = P2.Document_ID \\\nWHERE P1.Paragraph_Text LIKE '%Brazil%' AND P2.Paragraph_Text LIKE '%Ireland%';\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'Documents', '.', 'Document_ID', 'FROM', 'Documents', 'JOIN', \\\n'Paragraphs', 'AS', 'P1', 'ON', 'Documents', '.', 'Document_ID', '=', 'P1', '.', 'Document_ID', 'JOIN', \\\n'Paragraphs', 'AS', 'P2', 'ON', 'Documents', '.', 'Document_ID', '=', 'P2', '.', 'Document_ID', 'WHERE', \\\n'P1', '.', 'Paragraph_Text', 'LIKE', \"'%%Brazil%%'\", 'AND', 'P2', '.', 'Paragraph_Text', 'LIKE', \"'%%Ireland%%'\", ';']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Documents', '.', 'Document_ID', 'FROM', 'Documents', 'JOIN', \\\n'Paragraphs', 'AS', 'P1', 'ON', 'Documents', '.', 'Document_ID', '=', 'P1', '.', 'Document_ID', 'JOIN', \\\n'Paragraphs', 'AS', 'P2', 'ON', 'Documents', '.', 'Document_ID', '=', 'P2', '.', 'Document_ID', 'WHERE', \\\n'P1', '.', 'Paragraph_Text', 'LIKE', \"'%%'\", 'AND', 'P2', '.', 'Paragraph_Text', 'LIKE', \"'%%'\", ';']\",\n\"question\": \"Show the document id with paragraph text 'Brazil' and 'Ireland'.\",\n\"question_toks\": \"['Show', 'the', 'document', 'id', 'with', 'paragraph', 'text', \"'Brazil\", \"'\", 'and', \"'Ireland\", \"'\", '.']\"\n}"}
{"question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Template_Types: 'Template_Type_Code', 'Template_Type_Description'\nTemplates: 'Template_ID', 'Version_Number', 'Template_Type_Code', 'Date_Effective_From', 'Date_Effective_To', 'Template_Details'\nDocuments: 'Document_ID', 'Template_ID', 'Document_Name', 'Document_Description', 'Other_Details'\nParagraphs: 'Paragraph_ID', 'Document_ID', 'Paragraph_Text', 'Other_Details'\n\n{\"db_id\": \"cre_Doc_Template_Mgt\",\n\"question\": \"What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'documents', 'that', 'contain', 'the', 'paragraph', 'text', \"'Brazil\", \"'\", 'and', \"'Ireland\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"cre_Doc_Template_Mgt\",\n    \"query\": \"SELECT d.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' AND p.Paragraph_Text LIKE '%Ireland%'\",\n    \"query_toks\": [\"SELECT\", \"d\", \".\", \"Document_ID\", \"FROM\", \"Paragraphs\", \"p\", \"JOIN\", \"Documents\", \"d\", \"ON\", \"p\", \".\", \"Document_ID\", \"=\", \"d\", \".\", \"Document_ID\", \"WHERE\", \"p\", \".\", \"Paragraph_Text\", \"LIKE\", \"'%\", \"Brazil\", \"%'\", \"AND\", \"p\", \".\", \"Paragraph_Text\", \"LIKE\", \"'%\", \"Ireland\", \"%'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"d\", \".\", \"Document_ID\", \"FROM\", \"Paragraphs\", \"p\", \"JOIN\", \"Documents\", \"d\", \"ON\", \"p\", \".\", \"Document_ID\", \"=\", \"d\", \".\", \"Document_ID\", \"WHERE\", \"p\", \".\", \"Paragraph_Text\", \"LIKE\", \"'%'\", \"Brazil\", \"'%'\", \"AND\", \"p\", \".\", \"Paragraph_Text\", \"LIKE\", \"'%'\", \"Ireland\", \"'%'\"],\n    \"question\": \"What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"ids\", \"of\", \"documents\", \"that\", \"contain\", \"the\", \"paragraph\", \"text\", \"'Brazil'\", \"and\", \"'Ireland'\", \"?\"],\n}"}
{"question": "How many teachers are there?", "sql": "SELECT count(*) FROM teacher", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"How many teachers are there?\",\n\"question_toks\": \"['How', 'many', 'teachers', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT COUNT(Teacher_ID) FROM teacher\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"Teacher_ID\", \")\", \"FROM\", \"teacher\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"Teacher_ID\", \")\", \"FROM\", \"teacher\"],\n    \"question\": \"How many teachers are there?\",\n    \"question_toks\": [\"How\", \"many\", \"teachers\", \"are\", \"there\", \"?\"]\n}"}
{"question": "What is the total count of teachers?", "sql": "SELECT count(*) FROM teacher", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What is the total count of teachers?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'count', 'of', 'teachers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"course_teach\",\n  \"query\": \"SELECT COUNT(*) FROM teacher T2\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"teacher\", \"T2\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"teacher\", \"T2\"],\n  \"question\": \"What is the total count of teachers?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"total\", \"count\", \"of\", \"teachers\", \"?\"],\n}"}
{"question": "List the names of teachers in ascending order of age.", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"List the names of teachers in ascending order of age.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'teachers', 'in', 'ascending', 'order', 'of', 'age', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT Name FROM teacher ORDER BY Age ASC\",\n    \"query_toks\": \"['SELECT', 'Name', 'FROM', 'teacher', 'ORDER', 'BY', 'Age', 'ASC']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'teacher', 'ORDER', 'BY', 'Age', 'ASC']\",\n    \"question\": \"List the names of teachers in ascending order of age.\",\n    \"question_toks\": \"['List', 'the', 'names', 'of', 'teachers', 'in', 'ascending', 'order', 'of', 'age', '.']\"\n}"}
{"question": "What are the names of the teachers ordered by ascending age?", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the names of the teachers ordered by ascending age?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'ordered', 'by', 'ascending', 'age', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT Name FROM teacher ORDER BY Age ASC\",\n    \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"teacher\", \"ORDER\", \"BY\", \"Age\", \"ASC\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"teacher\", \"ORDER\", \"BY\", \"Age\"],\n    \"question\": \"What are the names of the teachers ordered by ascending age?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"the\", \"teachers\", \"ordered\", \"by\", \"ascending\", \"age\", \"?\"],\n}"}
{"question": "What are the age and hometown of teachers?", "sql": "SELECT Age ,  Hometown FROM teacher", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the age and hometown of teachers?\",\n\"question_toks\": \"['What', 'are', 'the', 'age', 'and', 'hometown', 'of', 'teachers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT Age, Hometown FROM teacher\",\n    \"query_toks\": [\"SELECT\", \"Age\", \",\", \"Hometown\", \"FROM\", \"teacher\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Age\", \",\", \"Hometown\", \"FROM\", \"teacher\"],\n    \"question\": \"What are the age and hometown of teachers?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"age\", \"and\", \"hometown\", \"of\", \"teachers\", \"?\"]\n}"}
{"question": "What is the age and hometown of every teacher?", "sql": "SELECT Age ,  Hometown FROM teacher", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What is the age and hometown of every teacher?\",\n\"question_toks\": \"['What', 'is', 'the', 'age', 'and', 'hometown', 'of', 'every', 'teacher', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n\"query\": \"SELECT Name, Age, Hometown FROM teacher\",\n\"query_toks\": \"['SELECT', 'Name', ',', 'Age', ',', 'Hometown', 'FROM', 'teacher']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Age', ',', 'Hometown', 'FROM', 'teacher']\",\n\"question\": \"What is the age and hometown of every teacher?\",\n\"question_toks\": \"['What', 'is', 'the', 'age', 'and', 'hometown', 'of', 'every', 'teacher', '?']}\""}
{"question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "sql": "select name from teacher where hometown != \"little lever urban district\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"List the name of teachers whose hometown is not `` Little Lever Urban District '' .\",\n\"question_toks\": \"['List', 'the', 'name', 'of', 'teachers', 'whose', 'hometown', 'is', 'not', '``', 'Little', 'Lever', 'Urban', 'District', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n\"query\": \"SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Hometown', '!=', \"'Little', 'Lever', 'Urban', 'District'']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Hometown', '!=', '', '', '', '']\",\n\"question\": \"List the name of teachers whose hometown is not `` Little Lever Urban District '' .\",\n\"question_toks\": \"['List', 'the', 'name', 'of', 'teachers', 'whose', 'hometown', 'is', 'not', '``', 'Little', 'Lever', 'Urban', 'District', \"''\", '.']}\""}
{"question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "sql": "select name from teacher where hometown != \"little lever urban district\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'whose', 'hometown', 'is', 'not', '``', 'Little', 'Lever', 'Urban', 'District', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n\"query\": \"SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Hometown', '!=', \"'Little', 'Lever', 'Urban', 'District'\", ']'}\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Hometown', '!=', '?']\", \n\"question\": \"What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'whose', 'hometown', 'is', 'not', '``', 'Little', 'Lever', 'Urban', 'District', \"''\", '?']}\""}
{"question": "Show the name of teachers aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"Show the name of teachers aged either 32 or 33?\",\n\"question_toks\": \"['Show', 'the', 'name', 'of', 'teachers', 'aged', 'either', '32', 'or', '33', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"course_teach\",\n  \"query\": \"SELECT Name FROM teacher WHERE Age=32 OR Age=33;\",\n  \"query_toks\": \"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Age', '=', '32', 'OR', 'Age', '=', '33', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Age', '=', 'number', 'OR', 'Age', '=', 'number', ';']\",\n  \"question\": \"Show the name of teachers aged either 32 or 33?\",\n  \"question_toks\": \"['Show', 'the', 'name', 'of', 'teachers', 'aged', 'either', '32', 'or', '33', '?']\"\n}"}
{"question": "What are the names of the teachers who are aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the names of the teachers who are aged either 32 or 33?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'who', 'are', 'aged', 'either', '32', 'or', '33', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"course_teach\",\n  \"query\": \"SELECT Name FROM teacher WHERE Age = 32 OR Age = 33\",\n  \"query_toks\": \"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Age', '=', '32', 'OR', 'Age', '=', '33']\",\n  \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Age', '=', '', 'OR', 'Age', '=', '']\",\n  \"question\": \"What are the names of the teachers who are aged either 32 or 33?\",\n  \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'who', 'are', 'aged', 'either', '32', 'or', '33', '?']\"\n }"}
{"question": "What is the hometown of the youngest teacher?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What is the hometown of the youngest teacher?\",\n\"question_toks\": \"['What', 'is', 'the', 'hometown', 'of', 'the', 'youngest', 'teacher', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"course_teach\",\n\"query\": \"SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)\",\n\"query_toks\": \"['SELECT', 'Hometown', 'FROM', 'teacher', 'WHERE', 'Age', '=', '(', 'SELECT', 'MIN', '(', 'Age', ')', 'FROM', 'teacher', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'Hometown', 'FROM', 'teacher', 'WHERE', 'Age', '=', '(', 'SELECT', 'MIN', '(', 'Age', ')', 'FROM', 'teacher', ')']\",\n\"question\": \"What is the hometown of the youngest teacher?\",\n\"question_toks\": \"['What', 'is', 'the', 'hometown', 'of', 'the', 'youngest', 'teacher', '?']\"\n}"}
{"question": "Where is the youngest teacher from?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"Where is the youngest teacher from?\",\n\"question_toks\": \"['Where', 'is', 'the', 'youngest', 'teacher', 'from', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT Hometown FROM teacher ORDER BY Age LIMIT 1\",\n    \"query_toks\": [\"SELECT\", \"Hometown\", \"FROM\", \"teacher\", \"ORDER\", \"BY\", \"Age\", \"LIMIT\", \"1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Hometown\", \"FROM\", \"teacher\", \"ORDER\", \"BY\", \"Age\", \"LIMIT\"],\n    \"question\": \"Where is the youngest teacher from?\",\n    \"question_toks\": [\"Where\", \"is\", \"the\", \"youngest\", \"teacher\", \"from\", \"?\"],\n}"}
{"question": "Show different hometown of teachers and the number of teachers from each hometown.", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"Show different hometown of teachers and the number of teachers from each hometown.\",\n\"question_toks\": \"['Show', 'different', 'hometown', 'of', 'teachers', 'and', 'the', 'number', 'of', 'teachers', 'from', 'each', 'hometown', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"course_teach\",\n  \"query\": \"SELECT Hometown, COUNT(*) AS Num_Teachers FROM teacher GROUP BY Hometown\",\n  \"query_toks\": \"['SELECT', 'Hometown', ',', 'COUNT', '(', '*', ')', 'AS', 'Num_Teachers', 'FROM', 'teacher', 'GROUP', 'BY', 'Hometown']\",\n  \"query_toks_no_value\": \"['SELECT', 'Hometown', ',', 'COUNT', '(', '*', ')', 'AS', 'Num_Teachers', 'FROM', 'teacher', 'GROUP', 'BY', 'Hometown']\",\n  \"question\": \"Show different hometown of teachers and the number of teachers from each hometown.\",\n  \"question_toks\": \"['Show', 'different', 'hometown', 'of', 'teachers', 'and', 'the', 'number', 'of', 'teachers', 'from', 'each', 'hometown', '.']\"\n}"}
{"question": "For each hometown, how many teachers are there?", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"For each hometown, how many teachers are there?\",\n\"question_toks\": \"['For', 'each', 'hometown', ',', 'how', 'many', 'teachers', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown;\",\n    \"query_toks\": [\"SELECT\", \"Hometown\", \",\", \"COUNT\", \"(\", \"Teacher_ID\", \")\", \"FROM\", \"teacher\", \"GROUP\", \"BY\", \"Hometown\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Hometown\", \",\", \"COUNT\", \"(\", \"Teacher_ID\", \")\", \"FROM\", \"teacher\", \"GROUP\", \"BY\", \"Hometown\", \";\"],\n    \"question\": \"For each hometown, how many teachers are there?\",\n    \"question_toks\": [\"For\", \"each\", \"hometown\", \",\", \"how\", \"many\", \"teachers\", \"are\", \"there\", \"?\"]\n}"}
{"question": "List the most common hometown of teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"List the most common hometown of teachers.\",\n\"question_toks\": \"['List', 'the', 'most', 'common', 'hometown', 'of', 'teachers', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"course_teach\",\n  \"query\": \"SELECT Hometown, COUNT(*) AS count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"Hometown\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \"FROM\", \"teacher\", \"GROUP\", \"BY\", \"Hometown\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Hometown\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \"FROM\", \"teacher\", \"GROUP\", \"BY\", \"Hometown\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"number\"],\n  \"question\": \"List the most common hometown of teachers.\",\n  \"question_toks\": [\"List\", \"the\", \"most\", \"common\", \"hometown\", \"of\", \"teachers\", \".\"]\n}"}
{"question": "What is the most commmon hometowns for teachers?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What is the most commmon hometowns for teachers?\",\n\"question_toks\": \"['What', 'is', 'the', 'most', 'commmon', 'hometowns', 'for', 'teachers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"course_teach\",\n  \"query\": \"SELECT Hometown, COUNT(*) AS count\\nFROM teacher\\nGROUP BY Hometown\\nORDER BY count DESC\\nLIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"Hometown\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \"FROM\", \"teacher\", \"GROUP\", \"BY\", \"Hometown\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Hometown\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \"FROM\", \"teacher\", \"GROUP\", \"BY\", \"Hometown\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"number\"],\n  \"question\": \"What is the most common hometown for teachers?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"most\", \"common\", \"hometown\", \"for\", \"teachers\", \"?\"],\n}"}
{"question": "Show the hometowns shared by at least two teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"Show the hometowns shared by at least two teachers.\",\n\"question_toks\": \"['Show', 'the', 'hometowns', 'shared', 'by', 'at', 'least', 'two', 'teachers', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n \"query\": \"SELECT DISTINCT T2.Hometown FROM teacher T1, teacher T2 WHERE T1.Teacher_ID <> T2.Teacher_ID AND T1.Hometown = T2.Hometown\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'T2', '.', 'Hometown', 'FROM', 'teacher', 'T1', ',', 'teacher', 'T2', 'WHERE', 'T1', '.', 'Teacher_ID', '<>', 'T2', '.', 'Teacher_ID', 'AND', 'T1', '.', 'Hometown', '=', 'T2', '.', 'Hometown']\",\n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T2', '.', 'Hometown', 'FROM', 'teacher', 'T1', ',', 'teacher', 'T2', 'WHERE', 'T1', '.', 'Teacher_ID', '<>', 'T2', '.', 'Teacher_ID', 'AND', 'T1', '.', 'Hometown', '=', 'T2', '.', 'Hometown']\",\n \"question\": \"Show the hometowns shared by at least two teachers.\",\n \"question_toks\": \"['Show', 'the', 'hometowns', 'shared', 'by', 'at', 'least', 'two', 'teachers', '.']\"}"}
{"question": "What are the towns from which at least two teachers come from?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the towns from which at least two teachers come from?\",\n\"question_toks\": \"['What', 'are', 'the', 'towns', 'from', 'which', 'at', 'least', 'two', 'teachers', 'come', 'from', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n\"query\": \"SELECT DISTINCT t1.Hometown FROM teacher t1, teacher t2 WHERE t1.Hometown = t2.Hometown AND t1.Teacher_ID <> t2.Teacher_ID\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 't1', '.', 'Hometown', 'FROM', 'teacher', 't1', ',', 'teacher', 't2', 'WHERE', 't1', '.', 'Hometown', '=', 't2', '.', 'Hometown', 'AND', 't1', '.', 'Teacher_ID', '<>', 't2', '.', 'Teacher_ID']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 't1', '.', 'Hometown', 'FROM', 'teacher', 't1', ',', 'teacher', 't2', 'WHERE', 't1', '.', 'Hometown', '=', 't2', '.', 'Hometown', 'AND', 't1', '.', 'Teacher_ID', '<>', 't2', '.', 'Teacher_ID']\",\n\"question\": \"What are the towns from which at least two teachers come from?\",\n\"question_toks\": \"['What', 'are', 'the', 'towns', 'from', 'which', 'at', 'least', 'two', 'teachers', 'come', 'from', '?']\"}"}
{"question": "Show names of teachers and the courses they are arranged to teach.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"Show names of teachers and the courses they are arranged to teach.\",\n\"question_toks\": \"['Show', 'names', 'of', 'teachers', 'and', 'the', 'courses', 'they', 'are', 'arranged', 'to', 'teach', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT T2.Name, T1.Course\\r\\nFROM Course_arrange T1\\r\\nJOIN Teacher T2 ON T1.Teacher_ID = T2.Teacher_ID\",\n    \"query_toks\": [\"SELECT\", \"T2\", \".\", \"Name\", \",\", \"T1\", \".\", \"Course\", \"FROM\", \"Course_arrange\", \"T1\", \"JOIN\", \"Teacher\", \"T2\", \"ON\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T2\", \".\", \"Name\", \",\", \"T1\", \".\", \"Course\", \"FROM\", \"Course_arrange\", \"T1\", \"JOIN\", \"Teacher\", \"T2\", \"ON\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\"],\n    \"question\": \"Show names of teachers and the courses they are arranged to teach.\",\n    \"question_toks\": [\"Show\", \"names\", \"of\", \"teachers\", \"and\", \"the\", \"courses\", \"they\", \"are\", \"arranged\", \"to\", \"teach\", \".\"]\n}"}
{"question": "What is the name of each teacher and what course they teach?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What is the name of each teacher and what course they teach?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'each', 'teacher', 'and', 'what', 'course', 'they', 'teach', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n\"query\": \"SELECT T2.Name, T1.Course FROM course T1, teacher T2, course_arrange T3 WHERE T1.Course_ID=T3.Course_ID AND T2.Teacher_ID=T3.Teacher_ID\",\n\"query_toks\": \"['SELECT', 'T2', '.', 'Name', ',', 'T1', '.', 'Course', 'FROM', 'course', 'T1', ',', 'teacher', 'T2', ',', 'course_arrange', 'T3', 'WHERE', 'T1', '.', 'Course_ID', '=', 'T3', '.', 'Course_ID', 'AND', 'T2', '.', 'Teacher_ID', '=', 'T3', '.', 'Teacher_ID']\",\n\"query_toks_no_value\": \"['SELECT', 'T2', '.', 'Name', ',', 'T1', '.', 'Course', 'FROM', 'course', 'T1', ',', 'teacher', 'T2', ',', 'course_arrange', 'T3', 'WHERE', 'T1', '.', 'Course_ID', '=', 'T3', '.', 'Course_ID', 'AND', 'T2', '.', 'Teacher_ID', '=', 'T3', '.', 'Teacher_ID']\",\n\"question\": \"What is the name of each teacher and what course they teach?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'each', 'teacher', 'and', 'what', 'course', 'they', 'teach', '?']\"}"}
{"question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.\",\n\"question_toks\": \"['Show', 'names', 'of', 'teachers', 'and', 'the', 'courses', 'they', 'are', 'arranged', 'to', 'teach', 'in', 'ascending', 'alphabetical', 'order', 'of', 'the', 'teacher', \"'s\", 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n \"query\": \"SELECT T2.Name, T1.Course\\nFROM course_arrange T1\\nJOIN teacher T2 ON T1.Teacher_ID=T2.Teacher_ID\\nORDER BY T2.Name ASC\",\n \"query_toks\": [\"SELECT\", \"T2\", \".\", \"Name\", \",\", \"T1\", \".\", \"Course\", \"FROM\", \"course_arrange\", \"T1\", \"JOIN\", \"teacher\", \"T2\", \"ON\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\", \"ORDER\", \"BY\", \"T2\", \".\", \"Name\", \"ASC\"],\n \"query_toks_no_value\": [\"SELECT\", \"T2\", \".\", \"Name\", \",\", \"T1\", \".\", \"Course\", \"FROM\", \"course_arrange\", \"T1\", \"JOIN\", \"teacher\", \"T2\", \"ON\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\", \"ORDER\", \"BY\", \"T2\", \".\", \"Name\", \"ASC\"],\n \"question\": \"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.\",\n \"question_toks\": [\"Show\", \"names\", \"of\", \"teachers\", \"and\", \"the\", \"courses\", \"they\", \"are\", \"arranged\", \"to\", \"teach\", \"in\", \"ascending\", \"alphabetical\", \"order\", \"of\", \"the\", \"teacher\", \"'s\", \"name\", \".\"]}"}
{"question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'and', 'the', 'courses', 'they', 'teach', 'in', 'ascending', 'alphabetical', 'order', 'by', 'the', 'name', 'of', 'the', 'teacher', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n \"query\": \"SELECT T2.Name, T1.Course From course_arrange T1, teacher T2 where T1.Teacher_ID = T2.Teacher_ID order by T2.Name asc\",\n \"query_toks\": \"['SELECT', 'T2.Name', ',', 'T1.Course', 'FROM', 'course_arrange', 'T1', ',', 'teacher', 'T2', 'WHERE', 'T1.Teacher_ID', '=', 'T2.Teacher_ID', 'ORDER', 'BY', 'T2.Name', 'ASC']\",\n \"query_toks_no_value\": \"['SELECT', 'T2', '.', 'Name', ',', 'T1', '.', 'Course', 'FROM', 'course_arrange', 'T1', ',', 'teacher', 'T2', 'WHERE', 'T1', '.', 'Teacher_ID', '=', 'T2', '.', 'Teacher_ID', 'ORDER', 'BY', 'T2', '.', 'Name', 'ASC']\",\n \"question\": \"What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?\",\n \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'and', 'the', 'courses', 'they', 'teach', 'in', 'ascending', 'alphabetical', 'order', 'by', 'the', 'name', 'of', 'the', 'teacher', '?']\"\n}"}
{"question": "Show the name of the teacher for the math course.", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"Show the name of the teacher for the math course.\",\n\"question_toks\": \"['Show', 'the', 'name', 'of', 'the', 'teacher', 'for', 'the', 'math', 'course', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n\"query\": \"SELECT T2.Name FROM course_arrange T1, teacher T2, course T3 WHERE T3.Course='math' AND T1.Teacher_ID=T2.Teacher_ID AND T1.Course_ID=T3.Course_ID\",\n\"query_toks\": \"['SELECT', 'T2', '.', 'Name', 'FROM', 'course_arrange', 'T1', ',', 'teacher', 'T2', ',', 'course', 'T3', 'WHERE', 'T3', '.', 'Course', '=', '\\\\''math\\\\''', 'AND', 'T1', '.', 'Teacher_ID', '=', 'T2', '.', 'Teacher_ID', 'AND', 'T1', '.', 'Course_ID', '=', 'T3', '.', 'Course_ID']\",\n\"query_toks_no_value\": \"['SELECT', 'T2', '.', 'Name', 'FROM', 'course_arrange', 'T1', ',', 'teacher', 'T2', ',', 'course', 'T3', 'WHERE', 'T3', '.', 'Course', '=', 'math', 'AND', 'T1', '.', 'Teacher_ID', '=', 'T2', '.', 'Teacher_ID', 'AND', 'T1', '.', 'Course_ID', '=', 'T3', '.', 'Course_ID']\",\n\"question\": \"Show the name of the teacher for the math course.\",\n\"question_toks\": \"['Show', 'the', 'name', 'of', 'the', 'teacher', 'for', 'the', 'math', 'course', '.']\"\n}"}
{"question": "What are the names of the people who teach math courses?", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the names of the people who teach math courses?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'people', 'who', 'teach', 'math', 'courses', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"course_teach\",\n\"query\": \"SELECT T2.Name FROM course_arrange T1 JOIN teacher T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course T3 ON T1.Course_ID = T3.Course_ID WHERE T3.Course = 'Math';\",\n\"query_toks\": [\"SELECT\", \"T2\", \".\", \"Name\", \"FROM\", \"course_arrange\", \"T1\", \"JOIN\", \"teacher\", \"T2\", \"ON\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\", \"JOIN\", \"course\", \"T3\", \"ON\", \"T1\", \".\", \"Course_ID\", \"=\", \"T3\", \".\", \"Course_ID\", \"WHERE\", \"T3\", \".\", \"Course\", \"=\", \"'Math'\", \";\"],\n\"query_toks_no_value\": [\"SELECT\", \"T2\", \".\", \"Name\", \"FROM\", \"course_arrange\", \"T1\", \"JOIN\", \"teacher\", \"T2\", \"ON\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\", \"JOIN\", \"course\", \"T3\", \"ON\", \"T1\", \".\", \"Course_ID\", \"=\", \"T3\", \".\", \"Course_ID\", \"WHERE\", \"T3\", \".\", \"Course\", \"=\", \"?\"],\n\"question\": \"What are the names of the people who teach math courses?\",\n\"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"the\", \"people\", \"who\", \"teach\", \"math\", \"courses\", \"?\"]\n}"}
{"question": "Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"Show names of teachers and the number of courses they teach.\",\n\"question_toks\": \"['Show', 'names', 'of', 'teachers', 'and', 'the', 'number', 'of', 'courses', 'they', 'teach', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n \"query\": \"SELECT T2.Name, COUNT(T3.Course_ID) FROM teacher as T2 INNER JOIN course_arrange as T3 ON T2.Teacher_ID=T3.Teacher_ID GROUP BY T2.Teacher_ID ORDER BY COUNT(T3.Course_ID) DESC\",\n \"query_toks\": \"['SELECT', 'T2', '.', 'Name', ',', 'COUNT', '(', 'T3', '.', 'Course_ID', ')', 'FROM', 'teacher', 'as', 'T2', 'INNER', 'JOIN', 'course_arrange', 'as', 'T3', 'ON', 'T2', '.', 'Teacher_ID', '=', 'T3', '.', 'Teacher_ID', 'GROUP', 'BY', 'T2', '.', 'Teacher_ID', 'ORDER', 'BY', 'COUNT', '(', 'T3', '.', 'Course_ID', ')', 'DESC']\",\n \"query_toks_no_value\": \"['SELECT', 'T2', '.', 'Name', ',', 'COUNT', '(', 'T3', '.', 'Course_ID', ')', 'FROM', 'teacher', 'as', 'T2', 'INNER', 'JOIN', 'course_arrange', 'as', 'T3', 'ON', 'T2', '.', 'Teacher_ID', '=', 'T3', '.', 'Teacher_ID', 'GROUP', 'BY', 'T2', '.', 'Teacher_ID', 'ORDER', 'BY', 'COUNT', '(', 'T3', '.', 'Course_ID', ')', 'DESC']\",\n \"question\": \"Show names of teachers and the number of courses they teach.\",\n \"question_toks\": \"['Show', 'names', 'of', 'teachers', 'and', 'the', 'number', 'of', 'courses', 'they', 'teach', '.']\"\n}"}
{"question": "What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the names of the teachers and how many courses do they teach?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'and', 'how', 'many', 'courses', 'do', 'they', 'teach', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n\"query\": \"SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher, course_arrange WHERE teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name\",\n\"query_toks\": \"['SELECT', 'teacher.Name', ',', 'COUNT', '(', 'course_arrange.Course_ID', ')', 'FROM', 'teacher', ',', 'course_arrange', 'WHERE', 'teacher.Teacher_ID', '=', 'course_arrange.Teacher_ID', 'GROUP', 'BY', 'teacher.Name']\",\n\"query_toks_no_value\": \"['SELECT', 'teacher', '.', 'Name', ',', 'COUNT', '(', 'course_arrange', '.', 'Course_ID', ')', 'FROM', 'teacher', ',', 'course_arrange', 'WHERE', 'teacher', '.', 'Teacher_ID', '=', 'course_arrange', '.', 'Teacher_ID', 'GROUP', 'BY', 'teacher', '.', 'Name']\",\n\"question\": \"What are the names of the teachers and how many courses do they teach?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'and', 'how', 'many', 'courses', 'do', 'they', 'teach', '?']}\""}
{"question": "Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"Show names of teachers that teach at least two courses.\",\n\"question_toks\": \"['Show', 'names', 'of', 'teachers', 'that', 'teach', 'at', 'least', 'two', 'courses', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT T2.Name FROM course_arrange AS T1, teacher AS T2 WHERE T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING COUNT(*) >= 2;\",\n    \"query_toks\": [\"SELECT\", \"T2\", \".\", \"Name\", \"FROM\", \"course_arrange\", \"AS\", \"T1\", \",\", \"teacher\", \"AS\",\n                   \"T2\", \"WHERE\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\", \"GROUP\", \"BY\", \"T2\", \".\", \n                   \"Teacher_ID\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"2\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T2\", \".\", \"Name\", \"FROM\", \"course_arrange\", \"AS\", \"T1\", \",\", \"teacher\", \"AS\",\n                            \"T2\", \"WHERE\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\", \"GROUP\", \"BY\", \n                            \"T2\", \".\", \"Teacher_ID\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"<number>\", \";\"],\n    \"question\": \"Show names of teachers that teach at least two courses.\",\n    \"question_toks\": [\"Show\", \"names\", \"of\", \"teachers\", \"that\", \"teach\", \"at\", \"least\", \"two\", \"courses\", \".\"]\n}"}
{"question": "What are the names of the teachers who teach at least two courses?", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the names of the teachers who teach at least two courses?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'who', 'teach', 'at', 'least', 'two', 'courses', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(T1.Course_ID) > 1\",\n    \"query_toks\": [\"SELECT\", \"T2\", \".\", \"Name\", \"FROM\", \"course_arrange\", \"AS\", \"T1\", \"JOIN\", \"teacher\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\", \"GROUP\", \"BY\", \"T1\", \".\", \"Teacher_ID\", \"HAVING\", \"COUNT\", \"(\", \"T1\", \".\", \"Course_ID\", \")\", \">\", \"1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T2\", \".\", \"Name\", \"FROM\", \"course_arrange\", \"AS\", \"T1\", \"JOIN\", \"teacher\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"Teacher_ID\", \"=\", \"T2\", \".\", \"Teacher_ID\", \"GROUP\", \"BY\", \"T1\", \".\", \"Teacher_ID\", \"HAVING\", \"COUNT\", \"(\", \"T1\", \".\", \"Course_ID\", \")\", \">\", \"?\"],\n    \"question\": \"What are the names of the teachers who teach at least two courses?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"the\", \"teachers\", \"who\", \"teach\", \"at\", \"least\", \"two\", \"courses\", \"?\"]\n}"}
{"question": "List the names of teachers who have not been arranged to teach courses.", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"List the names of teachers who have not been arranged to teach courses.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'teachers', 'who', 'have', 'not', 'been', 'arranged', 'to', 'teach', 'courses', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"course_teach\",\n    \"query\": \"SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)\",\n    \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"teacher\", \"WHERE\", \"Teacher_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Teacher_ID\", \"FROM\", \"course_arrange\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"teacher\", \"WHERE\", \"Teacher_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Teacher_ID\", \"FROM\", \"course_arrange\", \")\"],\n    \"question\": \"List the names of teachers who have not been arranged to teach courses.\",\n    \"question_toks\": [\"List\", \"the\", \"names\", \"of\", \"teachers\", \"who\", \"have\", \"not\", \"been\", \"arranged\", \"to\", \"teach\", \"courses\", \".\"]\n}"}
{"question": "What are the names of the teachers whose courses have not been arranged?", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncourse: 'Course_ID', 'Staring_Date', 'Course'\nteacher: 'Teacher_ID', 'Name', 'Age', 'Hometown'\ncourse_arrange: 'Course_ID', 'Teacher_ID', 'Grade'\n\n{\"db_id\": \"course_teach\",\n\"question\": \"What are the names of the teachers whose courses have not been arranged?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'whose', 'courses', 'have', 'not', 'been', 'arranged', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"course_teach\",\n\"query\": \"SELECT name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)\",\n\"query_toks\": \"['SELECT', 'name', 'FROM', 'teacher', 'WHERE', 'Teacher_ID', 'NOT', 'IN', '(', 'SELECT', 'Teacher_ID', 'FROM', 'course_arrange', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'name', 'FROM', 'teacher', 'WHERE', 'Teacher_ID', 'NOT', 'IN', '(', 'SELECT', 'Teacher_ID', 'FROM', 'course_arrange', ')']\",\n\"question\": \"What are the names of the teachers whose courses have not been arranged?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'whose', 'courses', 'have', 'not', 'been', 'arranged', '?']}\""}
{"question": "How many visitors below age 30 are there?", "sql": "SELECT count(*) FROM visitor WHERE age  <  30", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"How many visitors below age 30 are there?\",\n\"question_toks\": \"['How', 'many', 'visitors', 'below', 'age', '30', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"museum_visit\",\n\"query\": \"SELECT COUNT(*) FROM visit, visitor WHERE visit.visitor_ID = visitor.ID AND visitor.Age < 30\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'visit', ',', 'visitor', 'WHERE', 'visit', '.', 'visitor_ID', '=', 'visitor', '.', 'ID', 'AND', 'visitor', '.', 'Age', '<', '30']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'visit', ',', 'visitor', 'WHERE', 'visit', '.', 'visitor_ID', '=', 'visitor', '.', 'ID', 'AND', 'visitor', '.', 'Age', '<']\",\n\"question\": \"How many visitors below age 30 are there?\",\n\"question_toks\": \"['How', 'many', 'visitors', 'below', 'age', '30', 'are', 'there', '?']\"\n}"}
{"question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.\",\n\"question_toks\": \"['Find', 'the', 'names', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'higher', 'than', '4', ',', 'and', 'order', 'the', 'results', 'by', 'the', 'level', 'from', 'high', 'to', 'low', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"museum_visit\",\n \"query\": \"SELECT Name FROM visitor WHERE Level_of_membership>4 ORDER BY Level_of_membership DESC\",\n \"query_toks\": \"['SELECT', 'Name', 'FROM', 'visitor', 'WHERE', 'Level_of_membership', '>', '4', 'ORDER', 'BY', 'Level_of_membership', 'DESC']\",\n \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'visitor', 'WHERE', 'Level_of_membership', '>', 'NUM', 'ORDER', 'BY', 'Level_of_membership', 'DESC']\",\n \"question\": \"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.\",\n \"question_toks\": \"['Find', 'the', 'names', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'higher', 'than', '4', ',', 'and', 'order', 'the', 'results', 'by', 'the', 'level', 'from', 'high', 'to', 'low', '.']}\"\n"}
{"question": "What is the average age of the visitors whose membership level is not higher than 4?", "sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"What is the average age of the visitors whose membership level is not higher than 4?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'age', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'not', 'higher', 'than', '4', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"museum_visit\",\n  \"query\": \"SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;\",\n  \"query_toks\": \"['SELECT', 'AVG', '(', 'Age', ')', 'FROM', 'visitor', 'WHERE', 'Level_of_membership', '<=', '4', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'AVG', '(', ')', 'FROM', 'visitor', 'WHERE', 'Level_of_membership', '<=', ';']\",\n  \"question\": \"What is the average age of the visitors whose membership level is not higher than 4?\",\n  \"question_toks\": \"['What', 'is', 'the', 'average', 'age', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'not', 'higher', 'than', '4', '?']\"\n}"}
{"question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.\",\n\"question_toks\": \"['Find', 'the', 'name', 'and', 'membership', 'level', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'higher', 'than', '4', ',', 'and', 'sort', 'by', 'their', 'age', 'from', 'old', 'to', 'young', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"museum_visit\",\n    \"query\": \"SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC\",\n    \"query_toks\": \"['SELECT', 'Name', ',', 'Level_of_membership', 'FROM', 'visitor', 'WHERE', 'Level_of_membership', '>', '4', 'ORDER', 'BY', 'Age', 'DESC']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Level_of_membership', 'FROM', 'visitor', 'WHERE', 'Level_of_membership', '>', '<value>', 'ORDER', 'BY', 'Age', 'DESC']\",\n    \"question\": \"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.\",\n    \"question_toks\": \"['Find', 'the', 'name', 'and', 'membership', 'level', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'higher', 'than', '4', ',', 'and', 'sort', 'by', 'their', 'age', 'from', 'old', 'to', 'young', '.']\"\n}"}
{"question": "Find the id and name of the museum that has the most staff members?", "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"Find the id and name of the museum that has the most staff members?\",\n\"question_toks\": \"['Find', 'the', 'id', 'and', 'name', 'of', 'the', 'museum', 'that', 'has', 'the', 'most', 'staff', 'members', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"museum_visit\",\n  \"query\": \"SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1\",\n  \"query_toks\": \"['SELECT', 'Museum_ID', ',', 'Name', 'FROM', 'museum', 'ORDER', 'BY', 'Num_of_Staff', 'DESC', 'LIMIT', '1']\",\n  \"query_toks_no_value\": \"['SELECT', 'Museum_ID', ',', 'Name', 'FROM', 'museum', 'ORDER', 'BY', 'Num_of_Staff', 'DESC', 'LIMIT', '1']\",\n  \"question\": \"Find the id and name of the museum that has the most staff members?\",\n  \"question_toks\": \"['Find', 'the', 'id', 'and', 'name', 'of', 'the', 'museum', 'that', 'has', 'the', 'most', 'staff', 'members', '?']\"\n}"}
{"question": "Find the average number of staff working for the museums that were open before 2009.", "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"Find the average number of staff working for the museums that were open before 2009.\",\n\"question_toks\": \"['Find', 'the', 'average', 'number', 'of', 'staff', 'working', 'for', 'the', 'museums', 'that', 'were', 'open', 'before', '2009', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"museum_visit\",\n\"query\": \"SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'Num_of_Staff', ')', 'FROM', 'museum', 'WHERE', 'Open_Year', '<', \\\"'2009'\\\"', '']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'Num_of_Staff', ')', 'FROM', 'museum', 'WHERE', 'Open_Year', '<', '', '']\",\n\"question\": \"Find the average number of staff working for the museums that were open before 2009.\",\n\"question_toks\": \"['Find', 'the', 'average', 'number', 'of', 'staff', 'working', 'for', 'the', 'museums', 'that', 'were', 'open', 'before', '2009', '.']}\""}
{"question": "What are the opening year and staff number of the museum named Plaza Museum?", "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"What are the opening year and staff number of the museum named Plaza Museum?\",\n\"question_toks\": \"['What', 'are', 'the', 'opening', 'year', 'and', 'staff', 'number', 'of', 'the', 'museum', 'named', 'Plaza', 'Museum', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"museum_visit\",\n    \"query\": \"SELECT Open_Year, Num_of_Staff FROM museum T1 WHERE T1.Name = 'Plaza Museum'\",\n    \"query_toks\": [\"SELECT\", \"Open_Year\", \",\", \"Num_of_Staff\", \"FROM\", \"museum\", \"T1\", \"WHERE\", \"T1\", \".\", \"Name\", \"=\", \"'Plaza Museum'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Open_Year\", \",\", \"Num_of_Staff\", \"FROM\", \"museum\", \"T1\", \"WHERE\", \"T1\", \".\", \"Name\", \"=\", \"string\"],\n    \"question\": \"What are the opening year and staff number of the museum named Plaza Museum?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"opening\", \"year\", \"and\", \"staff\", \"number\", \"of\", \"the\", \"museum\", \"named\", \"Plaza\", \"Museum\", \"?\"]\n}"}
{"question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.\",\n\"question_toks\": \"['find', 'the', 'names', 'of', 'museums', 'which', 'have', 'more', 'staff', 'than', 'the', 'minimum', 'staff', 'number', 'of', 'all', 'museums', 'opened', 'after', '2010', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"museum_visit\",\n  \"query\": \"SELECT m.Name FROM Museum m WHERE m.Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM Museum WHERE Open_Year > 2010)\",\n  \"query_toks\": \"['SELECT', 'm', '.', 'Name', 'FROM', 'Museum', 'm', 'WHERE', 'm', '.', 'Num_of_Staff', '>', '(', 'SELECT', 'MIN', '(', 'Num_of_ of_Staff', ')', 'FROM', 'Museum', 'WHERE', 'Open_Year', '>', '2010', ')']\",\n  \"query_toks_no_value\": \"['SELECT', 'm', '.', 'Name', 'FROM', 'Museum', 'm', 'WHERE', 'm', '.', 'Num_of_Staff', '>', '(', 'SELECT', 'MIN', '(', 'Num_of_ of_Staff', ')', 'FROM', 'Museum', 'WHERE', 'Open_Year', '>', '?', ')']\",\n  \"question\": \"find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.\",\n  \"question_toks\": \"['find', 'the', 'names', 'of', 'museums', 'which', 'have', 'more', 'staff', 'than', 'the', 'minimum', 'staff', 'number', 'of', 'all', 'museums', 'opened', 'after', '2010', '.']\"\n}"}
{"question": "find the id, name and age for visitors who visited some museums more than once.", "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"find the id, name and age for visitors who visited some museums more than once.\",\n\"question_toks\": \"['find', 'the', 'id', ',', 'name', 'and', 'age', 'for', 'visitors', 'who', 'visited', 'some', 'museums', 'more', 'than', 'once', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"museum_visit\",\n  \"query\": \"SELECT v.visitor_ID, v.Name, v.Age FROM visit AS vi JOIN visitor AS v ON v.ID = vi.visitor_ID GROUP BY vi.visitor_ID HAVING COUNT(*) > 1;\",\n  \"query_toks\": [\"SELECT\", \"v\", \".\", \"visitor_ID\", \",\", \"v\", \".\", \"Name\", \",\", \"v\", \".\", \"Age\", \"FROM\", \"visit\", \"AS\", \"vi\", \"JOIN\", \"visitor\", \"AS\", \"v\", \"ON\", \"v\", \".\", \"ID\", \"=\", \"vi\", \".\", \"visitor_ID\", \"GROUP\", \"BY\", \"vi\", \".\", \"visitor_ID\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">\", \"1\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"visitor_ID\", \",\", \"Name\", \",\", \"Age\", \"FROM\", \"visit\", \"AS\", \"vi\", \"JOIN\", \"visitor\", \"AS\", \"v\", \"ON\", \"ID\", \"=\", \"visitor_ID\", \"GROUP\", \"BY\", \"visitor_ID\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">\", \"1\", \";\"],\n  \"question\": \"find the id, name and age for visitors who visited some museums more than once.\",\n  \"question_toks\": [\"find\", \"the\", \"id\", \",\", \"name\", \"and\", \"age\", \"for\", \"visitors\", \"who\", \"visited\", \"some\", \"museums\", \"more\", \"than\", \"once\", \".\"]\n}"}
{"question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?\",\n\"question_toks\": \"['What', 'are', 'the', 'id', ',', 'name', 'and', 'membership', 'level', 'of', 'visitors', 'who', 'have', 'spent', 'the', 'largest', 'amount', 'of', 'money', 'in', 'total', 'in', 'all', 'museum', 'tickets', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"museum_visit\",\n  \"query\": \"SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Total_spent DESC LIMIT 1\",\n  \"query_toks\": \"['SELECT', 'visitor', '.', 'ID', ',', 'visitor', '.', 'Name', ',', 'visitor', '.', 'Level_of_membership', 'FROM', 'visitor', 'INNER', 'JOIN', 'visit', 'ON', 'visitor', '.', 'ID', '=', 'visit', '.', 'visitor_ID', 'ORDER', 'BY', 'visit', '.', 'Total_spent', 'DESC', 'LIMIT', '1']\",\n  \"query_toks_no_value\": \"['SELECT', 'visitor', '.', '<column>', ',', 'visitor', '.', '<column>', ',', 'visitor', '.', '<column>', 'FROM', 'visitor', 'INNER', 'JOIN', 'visit', 'ON', 'visitor', '.', '<column>', '=', 'visit', '.', '<column>', 'ORDER', 'BY', 'visit', '.', '<column>', 'DESC', 'LIMIT', '<value>']\",\n  \"question\": \"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?\",\n  \"question_toks\": \"['What', 'are', 'the', 'id', ',', 'name', 'and', 'membership', 'level', 'of', 'visitors', 'who', 'have', 'spent', 'the', 'largest', 'amount', 'of', 'money', 'in', 'total', 'in', 'all', 'museum', 'tickets', '?']\"\n}"}
{"question": "What are the id and name of the museum visited most times?", "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"What are the id and name of the museum visited most times?\",\n\"question_toks\": \"['What', 'are', 'the', 'id', 'and', 'name', 'of', 'the', 'museum', 'visited', 'most', 'times', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"museum_visit\",\n    \"query\": \"SELECT Museum_ID, Name FROM (SELECT Museum_ID, Name, SUM(Num_of_Ticket) AS Total_Tickets FROM museum AS T1 INNER JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID) AS T3 ORDER BY Total_Tickets DESC LIMIT 1;\",\n    \"query_toks\": [\"SELECT\", \"Museum_ID\", \",\", \"Name\", \"FROM\", \"(\", \"SELECT\", \"Museum_ID\", \",\", \"Name\", \",\", \"SUM\", \"(\", \"Num_of_Ticket\", \")\", \"AS\", \"Total_Tickets\", \"FROM\", \"museum\", \"AS\", \"T1\", \"INNER\", \"JOIN\", \"visit\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"Museum_ID\", \"=\", \"T2\", \".\", \"Museum_ID\", \"GROUP\", \"BY\", \"T1\", \".\", \"Museum_ID\", \")\", \"AS\", \"T3\", \"ORDER\", \"BY\", \"Total_Tickets\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Museum_ID\", \",\", \"Name\", \"FROM\", \"(\", \"SELECT\", \"Museum_ID\", \",\", \"Name\", \",\", \"SUM\", \"(\", \"Num_of_Ticket\", \")\", \"AS\", \"Total_Tickets\", \"FROM\", \"museum\", \"AS\", \"T1\", \"INNER\", \"JOIN\", \"visit\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"Museum_ID\", \"=\", \"T2\", \".\", \"Museum_ID\", \"GROUP\", \"BY\", \"T1\", \".\", \"Museum_ID\", \")\", \"AS\", \"T3\", \"ORDER\", \"BY\", \"Total_Tickets\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"question\": \"What are the id and name of the museum visited most times?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"id\", \"and\", \"name\", \"of\", \"the\", \"museum\", \"visited\", \"most\", \"times\", \"?\"]\n}"}
{"question": "What is the name of the museum that had no visitor yet?", "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"What is the name of the museum that had no visitor yet?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'museum', 'that', 'had', 'no', 'visitor', 'yet', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"museum_visit\",\n\"query\": \"SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'museum', 'WHERE', 'Museum_ID', 'NOT', 'IN', '(', 'SELECT', 'Museum_ID', 'FROM', 'visit', ')', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'museum', 'WHERE', 'Museum_ID', 'NOT', 'IN', '(', 'SELECT', 'Museum_ID', 'FROM', 'visit', ')', ';']\",\n\"question\": \"What is the name of the museum that had no visitor yet?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'museum', 'that', 'had', 'no', 'visitor', 'yet', '?']\"\n}"}
{"question": "Find the name and age of the visitor who bought the most tickets at once.", "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"Find the name and age of the visitor who bought the most tickets at once.\",\n\"question_toks\": \"['Find', 'the', 'name', 'and', 'age', 'of', 'the', 'visitor', 'who', 'bought', 'the', 'most', 'tickets', 'at', 'once', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"museum_visit\",\n \"query\": \"SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)\",\n \"query_toks\": \"['SELECT', 'visitor', '.', 'Name', ',', 'visitor', '.', 'Age', 'FROM', 'visit', 'JOIN', 'visitor', 'ON', 'visit', '.', 'visitor_ID', '=', 'visitor', '.', 'ID', 'WHERE', 'visit', '.', 'Num_of_Ticket', '=', '(', 'SELECT', 'MAX', '(', 'Num_of_Ticket', ')', 'FROM', 'visit', ')']\",\n \"query_toks_no_value\": \"['SELECT', 'visitor', '.', 'Name', ',', 'visitor', '.', 'Age', 'FROM', 'visit', 'JOIN', 'visitor', 'ON', 'visit', '.', 'visitor_ID', '=', 'visitor', '.', 'ID', 'WHERE', 'visit', '.', 'Num_of_Ticket', '=', '(', 'SELECT', 'MAX', '(', 'Num_of_Ticket', ')', 'FROM', 'visit', ')']\",\n \"question\": \"Find the name and age of the visitor who bought the most tickets at once.\",\n \"question_toks\": \"['Find', 'the', 'name', 'and', 'age', 'of', 'the', 'visitor', 'who', 'bought', 'the', 'most', 'tickets', 'at', 'once', '.']}\"\n"}
{"question": "What are the average and maximum number of tickets bought in all visits?", "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"What are the average and maximum number of tickets bought in all visits?\",\n\"question_toks\": \"['What', 'are', 'the', 'average', 'and', 'maximum', 'number', 'of', 'tickets', 'bought', 'in', 'all', 'visits', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"museum_visit\",\n    \"query\": \"SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit\",\n    \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"Num_of_Ticket\", \")\", \",\", \"MAX\", \"(\", \"Num_of_Ticket\", \")\", \"FROM\", \"visit\"],\n    \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"Num_of_Ticket\", \")\", \",\", \"MAX\", \"(\", \"Num_of_Ticket\", \")\", \"FROM\", \"visit\"],\n    \"question\": \"What are the average and maximum number of tickets bought in all visits?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"average\", \"and\", \"maximum\", \"number\", \"of\", \"tickets\", \"bought\", \"in\", \"all\", \"visits\", \"?\"]\n}"}
{"question": "What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"What is the total ticket expense of the visitors whose membership level is 1?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'ticket', 'expense', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', '1', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"museum_visit\",\n    \"query\": \"SELECT SUM(visit.Total_spent) FROM visitor INNER JOIN visit ON visitor.ID=visit.visitor_ID WHERE visitor.Level_of_membership=1\",\n    \"query_toks\": \"['SELECT', 'SUM', '(', 'visit', '.', 'Total_spent', ')', 'FROM', 'visitor', 'INNER', 'JOIN', 'visit', 'ON', 'visitor', '.', 'ID', '=', 'visit', '.', 'visitor_ID', 'WHERE', 'visitor', '.', 'Level_of_membership', '=', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'SUM', '(', 'visit', '.', 'Total_spent', ')', 'FROM', 'visitor', 'INNER', 'JOIN', 'visit', 'ON', 'visitor', '.', 'ID', '=', 'visit', '.', 'visitor_ID', 'WHERE', 'visitor', '.', 'Level_of_membership', '=', '?']\",\n    \"question\": \"What is the total ticket expense of the visitors whose membership level is 1?\",\n    \"question_toks\": \"['What', 'is', 'the', 'total', 'ticket', 'expense', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', '1', '?']\"\n}"}
{"question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'visitor', 'who', 'visited', 'both', 'a', 'museum', 'opened', 'before', '2009', 'and', 'a', 'museum', 'opened', 'after', '2011', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"museum_visit\",\n    \"query\": \"SELECT visitor.Name FROM visit AS v1 JOIN visit AS v2 ON v1.visitor_ID = v2.visitor_ID JOIN museum AS m1 ON v1.Museum_ID = m1.Museum_ID JOIN museum AS m2 ON v2.Museum_ID = m2.Museum_ID JOIN visitor ON v1.visitor_ID = visitor.ID WHERE m1.Open_Year < 2009 AND m2.Open_Year > 2011\",\n    \"query_toks\": \"['SELECT', 'visitor.Name', 'FROM', 'visit', 'AS', 'v1', 'JOIN', 'visit', 'AS', 'v2', 'ON', 'v1.visitor_ID', '=', 'v2.visitor_ID', 'JOIN', 'museum', 'AS', 'm1', 'ON', 'v1.Museum_ID', '=', 'm1.Museum_ID', 'JOIN', 'museum', 'AS', 'm2', 'ON', 'v2.Museum_ID', '=', 'm2.Museum_ID', 'JOIN', 'visitor', 'ON', 'v1.visitor_ID', '=', 'visitor.ID', 'WHERE', 'm1.Open_Year', '<', '2009', 'AND', 'm2.Open_Year', '>', '2011']\",\n    \"query_toks_no_value\": \"['SELECT', 'visitor.Name', 'FROM', 'visit', 'AS', 'v1', 'JOIN', 'visit', 'AS', 'v2', 'ON', 'v1.visitor_ID', '=', 'v2.visitor_ID', 'JOIN', 'museum', 'AS', 'm1', 'ON', 'v1.Museum_ID', '=', 'm1.Museum_ID', 'JOIN', 'museum', 'AS', 'm2', 'ON', 'v2.Museum_ID', '=', 'm2.Museum_ID', 'JOIN', 'visitor', 'ON', 'v1.visitor_ID', '=', 'visitor.ID', 'WHERE', 'm1.Open_Year', '<', '%', 'AND', 'm2.Open_Year', '>', '%']\",\n    \"question\": \"What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?\",\n    \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'visitor', 'who', 'visited', 'both', 'a', 'museum', 'opened', 'before', '2009', 'and', 'a', 'museum', 'opened', 'after', '2011', '?']\"\n}"}
{"question": "Find the number of visitors who did not visit any museum opened after 2010.", "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"Find the number of visitors who did not visit any museum opened after 2010.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'visitors', 'who', 'did', 'not', 'visit', 'any', 'museum', 'opened', 'after', '2010', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"museum_visit\",\n \"query\": \"SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT V.visitor_ID FROM visit V JOIN museum M ON V.Museum_ID = M.Museum_ID WHERE M.Open_Year > 2010)\",\n \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'visitor', 'WHERE', 'ID', 'NOT', 'IN', '(', 'SELECT', 'V', '.', 'visitor_ID', 'FROM', 'visit', 'V', 'JOIN', 'museum', 'M', 'ON', 'V', '.', 'Museum_ID', '=', 'M', '.', 'Museum_ID', 'WHERE', 'M', '.', 'Open_Year', '>', '2010', ')']\",\n \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'visitor', 'WHERE', 'ID', 'NOT', 'IN', '(', 'SELECT', 'V', '.', 'visitor_ID', 'FROM', 'visit', 'V', 'JOIN', 'museum', 'M', 'ON', 'V', '.', 'Museum_ID', '=', 'M', '.', 'Museum_ID', 'WHERE', 'M', '.', 'Open_Year', '>', '?', ')']\",\n \"question\": \"Find the number of visitors who did not visit any museum opened after 2010.\",\n \"question_toks\": \"['Find', 'the', 'number', 'of', 'visitors', 'who', 'did', 'not', 'visit', 'any', 'museum', 'opened', 'after', '2010', '.']\"}"}
{"question": "How many museums were opened after 2013 or before 2008?", "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nmuseum: 'Museum_ID', 'Name', 'Num_of_Staff', 'Open_Year'\nvisitor: 'ID', 'Name', 'Level_of_membership', 'Age'\nvisit: 'Museum_ID', 'visitor_ID', 'Num_of_Ticket', 'Total_spent'\n\n{\"db_id\": \"museum_visit\",\n\"question\": \"How many museums were opened after 2013 or before 2008?\",\n\"question_toks\": \"['How', 'many', 'museums', 'were', 'opened', 'after', '2013', 'or', 'before', '2008', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"museum_visit\",\n \"query\": \"SELECT COUNT(*) FROM (SELECT DISTINCT Museum_ID FROM Museum WHERE Open_Year > 2013 OR Open_Year < 2008) AS T1\",\n \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"(\", \"SELECT\", \"DISTINCT\", \"Museum_ID\", \"FROM\", \"Museum\", \"WHERE\", \"Open_Year\", \">\", \"2013\", \"OR\", \"Open_Year\", \"<\", \"2008\", \")\", \"AS\", \"T1\"],\n \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"(\", \"SELECT\", \"DISTINCT\", \"Museum_ID\", \"FROM\", \"Museum\", \"WHERE\", \"Open_Year\", \">\", \"\", \"OR\", \"Open_Year\", \"<\", \"\", \")\", \"AS\", \"T1\"],\n \"question\": \"How many museums were opened after 2013 or before 2008?\",\n \"question_toks\": [\"How\", \"many\", \"museums\", \"were\", \"opened\", \"after\", \"2013\", \"or\", \"before\", \"2008\", \"?\"]}\n"}
{"question": "Find the total number of players.", "sql": "SELECT count(*) FROM players", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the total number of players.\",\n\"question_toks\": \"['Find', 'the', 'total', 'number', 'of', 'players', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n   \"db_id\": \"wta_1\",\n   \"query\": \"SELECT COUNT(*) FROM players\",\n   \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"players\"],\n   \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"players\"],\n   \"question\": \"Find the total number of players.\",\n   \"question_toks\": [\"Find\", \"the\", \"total\", \"number\", \"of\", \"players\", \".\"]\n}"}
{"question": "How many players are there?", "sql": "SELECT count(*) FROM players", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"How many players are there?\",\n\"question_toks\": \"['How', 'many', 'players', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT COUNT(*) FROM players\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"players\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"players\"],\n  \"question\": \"How many players are there?\",\n  \"question_toks\": [\"How\", \"many\", \"players\", \"are\", \"there\", \"?\"]\n}"}
{"question": "Find the total number of matches.", "sql": "SELECT count(*) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the total number of matches.\",\n\"question_toks\": \"['Find', 'the', 'total', 'number', 'of', 'matches', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT COUNT(*) FROM matches\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\"],\n  \"question\": \"Find the total number of matches.\",\n  \"question_toks\": [\"Find\", \"the\", \"total\", \"number\", \"of\", \"matches\", \".\"]\n}"}
{"question": "Count the number of matches.", "sql": "SELECT count(*) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Count the number of matches.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'matches', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"wta_1\",\n \"query\": \"SELECT COUNT(*)\\nFROM matches\",\n \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\"],\n \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\"],\n \"question\": \"Count the number of matches.\",\n \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"matches\", \".\"]\n}"}
{"question": "List the first name and birth date of all players from the country with code USA.", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"List the first name and birth date of all players from the country with code USA.\",\n\"question_toks\": \"['List', 'the', 'first', 'name', 'and', 'birth', 'date', 'of', 'all', 'players', 'from', 'the', 'country', 'with', 'code', 'USA', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT first_name, birth_date FROM players WHERE country_code = 'USA'\",\n    \"query_toks\": \"['SELECT', 'first_name', ',', 'birth_date', 'FROM', 'players', 'WHERE', 'country_code', '=', \\\"'USA'\\\"\",\n    \"query_toks_no_value\": \"['SELECT', 'first_name', ',', 'birth_date', 'FROM', 'players', 'WHERE', 'country_code', '=', '?'\",\n    \"question\": \"List the first name and birth date of all players from the country with code USA.\",\n    \"question_toks\": \"['List', 'the', 'first', 'name', 'and', 'birth', 'date', 'of', 'all', 'players', 'from', 'the', 'country', 'with', 'code', 'USA', '.']\"\n}"}
{"question": "What are the first names and birth dates of players from the USA?", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the first names and birth dates of players from the USA?\",\n\"question_toks\": \"['What', 'are', 'the', 'first', 'names', 'and', 'birth', 'dates', 'of', 'players', 'from', 'the', 'USA', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT first_name, birth_date FROM players WHERE country_code = 'USA'\",\n  \"query_toks\": \"['SELECT', 'first_name', ',', 'birth_date', 'FROM', 'players', 'WHERE', 'country_code', '=', ''USA'', '']\",\n  \"query_toks_no_value\": \"['SELECT', 'first_name', ',', 'birth_date', 'FROM', 'players', 'WHERE', 'country_code', '=', '']\",\n  \"question\": \"What are the first names and birth dates of players from the USA?\",\n  \"question_toks\": \"['What', 'are', 'the', 'first', 'names', 'and', 'birth', 'dates', 'of', 'players', 'from', 'the', 'USA', '?']\"\n}"}
{"question": "Find the average age of losers and winners of all matches.", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the average age of losers and winners of all matches.\",\n\"question_toks\": \"['Find', 'the', 'average', 'age', 'of', 'losers', 'and', 'winners', 'of', 'all', 'matches', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age FROM matches\",\n    \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"loser_age\", \")\", \"as\", \"avg_loser_age\", \",\", \"AVG\", \"(\", \"winner_age\", \")\", \"as\", \"avg_winner_age\", \"FROM\", \"matches\"],\n    \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"loser_age\", \")\", \"as\", \"avg_loser_age\", \",\", \"AVG\", \"(\", \"winner_age\", \")\", \"as\", \"avg_winner_age\", \"FROM\", \"matches\"],\n    \"question\": \"Find the average age of losers and winners of all matches.\",\n    \"question_toks\": [\"Find\", \"the\", \"average\", \"age\", \"of\", \"losers\", \"and\", \"winners\", \"of\", \"all\", \"matches\", \".\"]\n}"}
{"question": "What are the average ages of losers and winners across matches?", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the average ages of losers and winners across matches?\",\n\"question_toks\": \"['What', 'are', 'the', 'average', 'ages', 'of', 'losers', 'and', 'winners', 'across', 'matches', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"wta_1\",\n\"query\": \"SELECT AVG(loser_age), AVG(winner_age) FROM T2\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'loser_age', ')', ',', 'AVG', '(', 'winner_age', ')', 'FROM', 'T2']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'loser_age', ')', ',', 'AVG', '(', 'winner_age', ')', 'FROM', 'T2']\",\n\"question\": \"What are the average ages of losers and winners across matches?\",\n\"question_toks\": \"['What', 'are', 'the', 'average', 'ages', 'of', 'losers', 'and', 'winners', 'across', 'matches', '?']\"\n}"}
{"question": "Find the average rank of winners in all matches.", "sql": "SELECT avg(winner_rank) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the average rank of winners in all matches.\",\n\"question_toks\": \"['Find', 'the', 'average', 'rank', 'of', 'winners', 'in', 'all', 'matches', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT AVG(winner_rank) FROM matches\",\n  \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"winner_rank\", \")\", \"FROM\", \"matches\"],\n  \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"winner_rank\", \")\", \"FROM\", \"matches\"],\n  \"question\": \"Find the average rank of winners in all matches.\",\n  \"question_toks\": [\"Find\", \"the\", \"average\", \"rank\", \"of\", \"winners\", \"in\", \"all\", \"matches\", \".\"] \n}"}
{"question": "What is the average rank for winners in all matches?", "sql": "SELECT avg(winner_rank) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What is the average rank for winners in all matches?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'rank', 'for', 'winners', 'in', 'all', 'matches', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"wta_1\",\n\"query\": \"SELECT AVG(winner_rank) FROM matches\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'winner_rank', ')', 'FROM', 'matches']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', ')', 'FROM', 'matches']\",\n\"question\": \"What is the average rank for winners in all matches?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'rank', 'for', 'winners', 'in', 'all', 'matches', '?']\"\n}"}
{"question": "Find the highest rank of losers in all matches.", "sql": "SELECT min(loser_rank) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the highest rank of losers in all matches.\",\n\"question_toks\": \"['Find', 'the', 'highest', 'rank', 'of', 'losers', 'in', 'all', 'matches', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT MAX(loser_rank) FROM matches\",\n  \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"loser_rank\", \")\", \"FROM\", \"matches\"],\n  \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"loser_rank\", \")\", \"FROM\", \"matches\"],\n  \"question\": \"Find the highest rank of losers in all matches.\",\n  \"question_toks\": [\"Find\", \"the\", \"highest\", \"rank\", \"of\", \"losers\", \"in\", \"all\", \"matches\", \".\"]\n}"}
{"question": "What is the best rank of losers across all matches?", "sql": "SELECT min(loser_rank) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What is the best rank of losers across all matches?\",\n\"question_toks\": \"['What', 'is', 'the', 'best', 'rank', 'of', 'losers', 'across', 'all', 'matches', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT MAX(loser_rank) FROM matches\",\n    \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"loser_rank\", \")\", \"FROM\", \"matches\"],\n    \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"loser_rank\", \")\", \"FROM\", \"matches\"],\n    \"question\": \"What is the best rank of losers across all matches?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"best\", \"rank\", \"of\", \"losers\", \"across\", \"all\", \"matches\", \"?\"]\n}"}
{"question": "find the number of distinct country codes of all players.", "sql": "SELECT count(DISTINCT country_code) FROM players", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"find the number of distinct country codes of all players.\",\n\"question_toks\": \"['find', 'the', 'number', 'of', 'distinct', 'country', 'codes', 'of', 'all', 'players', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT COUNT(DISTINCT country_code) FROM players\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"country_code\", \")\", \"FROM\", \"players\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"country_code\", \")\", \"FROM\", \"players\"],\n  \"question\": \"find the number of distinct country codes of all players.\",\n  \"question_toks\": [\"find\", \"the\", \"number\", \"of\", \"distinct\", \"country\", \"codes\", \"of\", \"all\", \"players\", \".\"]\n}"}
{"question": "How many distinct countries do players come from?", "sql": "SELECT count(DISTINCT country_code) FROM players", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"How many distinct countries do players come from?\",\n\"question_toks\": \"['How', 'many', 'distinct', 'countries', 'do', 'players', 'come', 'from', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT COUNT(DISTINCT country_code) FROM players\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"country_code\", \")\", \"FROM\", \"players\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"country_code\", \")\", \"FROM\", \"players\"],\n  \"question\": \"How many distinct countries do players come from?\",\n  \"question_toks\": [\"How\", \"many\", \"distinct\", \"countries\", \"do\", \"players\", \"come\", \"from\", \"?\"]\n}"}
{"question": "Find the number of distinct name of losers.", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the number of distinct name of losers.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'distinct', 'name', 'of', 'losers', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT COUNT(DISTINCT loser_name) FROM matches\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"loser_name\", \")\", \"FROM\", \"matches\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"loser_name\", \")\", \"FROM\", \"matches\"],\n  \"question\": \"Find the number of distinct name of losers.\",\n  \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"distinct\", \"name\", \"of\", \"losers\", \".\"]\n}"}
{"question": "How many different loser names are there?", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"How many different loser names are there?\",\n\"question_toks\": \"['How', 'many', 'different', 'loser', 'names', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"wta_1\",\n\"query\": \"SELECT COUNT(DISTINCT loser_name) FROM matches\",\n\"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"loser_name\", \")\", \"FROM\", \"matches\"],\n\"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"loser_name\", \")\", \"FROM\", \"matches\"],\n\"question\": \"How many different loser names are there?\",\n\"question_toks\": [\"How\", \"many\", \"different\", \"loser\", \"names\", \"are\", \"there\", \"?\"]\n}"}
{"question": "Find the name of tourney that has more than 10 matches.", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the name of tourney that has more than 10 matches.\",\n\"question_toks\": \"['Find', 'the', 'name', 'of', 'tourney', 'that', 'has', 'more', 'than', '10', 'matches', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;\",\n    \"query_toks\": \"['SELECT', 'tourney_name', 'FROM', 'matches', 'GROUP', 'BY', 'tourney_name', 'HAVING', 'COUNT', '(', '*', ')', '>', '10', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'tourney_name', 'FROM', 'matches', 'GROUP', 'BY', 'tourney_name', 'HAVING', 'COUNT', '(', '*', ')', '>', ';']\",\n    \"question\": \"Find the name of tourney that has more than 10 matches.\",\n    \"question_toks\": \"['Find', 'the', 'name', 'of', 'tourney', 'that', 'has', 'more', 'than', '10', 'matches', '.']\"\n}"}
{"question": "What are the names of tournaments that have more than 10 matches?", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the names of tournaments that have more than 10 matches?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'tournaments', 'that', 'have', 'more', 'than', '10', 'matches', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"wta_1\",\n\"query\": \"SELECT DISTINCT tourney_name FROM matches WHERE match_num > 10\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'tourney_name', 'FROM', 'matches', 'WHERE', 'match_num', '>', '10']\",\n\"query_toks_no_value\":\"['SELECT', 'DISTINCT', 'tourney_name', 'FROM', 'matches', 'WHERE', 'match_num', '>', '?']\",\n\"question\": \"What are the names of tournaments that have more than 10 matches?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'tournaments', 'that', 'have', 'more', 'than', '10', 'matches', '?']\"\n}"}
{"question": "List the names of all winners who played in both 2013 and 2016.", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"List the names of all winners who played in both 2013 and 2016.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'all', 'winners', 'who', 'played', 'in', 'both', '2013', 'and', '2016', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tennis_1\",\n  \"query\": \"SELECT DISTINCT w13.winner_name FROM matches as w13 JOIN matches as w16 ON w13.winner_id=w16.winner_id WHERE w13.year=2013 AND w16.year=2016;\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"w13\", \".\", \"winner_name\", \"FROM\", \"matches\", \"as\", \"w13\", \"JOIN\", \"matches\", \"as\", \"w16\", \"ON\", \"w13\", \".\", \"winner_id\", \"=\", \"w16\", \".\", \"winner_id\", \"WHERE\", \"w13\", \".\", \"year\", \"=\", \"2013\", \"AND\", \"w16\", \".\", \"year\", \"=\", \"2016\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"w13\", \".\", \"winner_name\", \"FROM\", \"matches\", \"as\", \"w13\", \"JOIN\", \"matches\", \"as\", \"w16\", \"ON\", \"w13\", \".\", \"winner_id\", \"=\", \"w16\", \".\", \"winner_id\", \"WHERE\", \"w13\", \".\", \"year\", \"=\", \"<value>\", \"AND\", \"w16\", \".\", \"year\", \"=\", \"<value>\", \";\"],\n  \"question\": \"List the names of all winners who played in both 2013 and 2016.\",\n  \"question_toks\": [\"List\", \"the\", \"names\", \"of\", \"all\", \"winners\", \"who\", \"played\", \"in\", \"both\", \"2013\", \"and\", \"2016\", \".\"]\n}"}
{"question": "What are the names of players who won in both 2013 and 2016?", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the names of players who won in both 2013 and 2016?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'players', 'who', 'won', 'in', 'both', '2013', 'and', '2016', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT DISTINCT T1.winner_name FROM matches T1 JOIN matches T2 ON T1.winner_name = T2.winner_name WHERE T1.tourney_date LIKE '2013%' AND T2.tourney_date LIKE '2016%'\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"winner_name\", \"FROM\", \"matches\", \"T1\", \"JOIN\", \"matches\", \"T2\", \"ON\", \"T1\", \".\", \"winner_name\", \"=\", \"T2\", \".\", \"winner_name\", \"WHERE\", \"T1\", \".\", \"tourney_date\", \"LIKE\", \"'2013%'\", \"AND\", \"T2\", \".\", \"tourney_date\", \"LIKE\", \"'2016%'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"winner_name\", \"FROM\", \"matches\", \"T1\", \"JOIN\", \"matches\", \"T2\", \"ON\", \"T1\", \".\", \"winner_name\", \"=\", \"T2\", \".\", \"winner_name\", \"WHERE\", \"T1\", \".\", \"tourney_date\", \"LIKE\", \"'year_one%'\", \"AND\", \"T2\", \".\", \"tourney_date\", \"LIKE\", \"'year_two%'\"],\n  \"question\": \"What are the names of players who won in both 2013 and 2016?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"players\", \"who\", \"won\", \"in\", \"both\", \"2013\", \"and\", \"2016\", \"?\"]\n}"}
{"question": "List the number of all matches who played in years of 2013 or 2016.", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"List the number of all matches who played in years of 2013 or 2016.\",\n\"question_toks\": \"['List', 'the', 'number', 'of', 'all', 'matches', 'who', 'played', 'in', 'years', 'of', '2013', 'or', '2016', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"WHERE\", \"year\", \"IN\", \"(\", \"2013\", \",\", \"2016\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"WHERE\", \"year\", \"IN\", \"(\", \"<value>\", \",\", \"<value>\", \")\"],\n    \"question\": \"List the number of all matches who played in years of 2013 or 2016.\",\n    \"question_toks\": [\"List\", \"the\", \"number\", \"of\", \"all\", \"matches\", \"who\", \"played\", \"in\", \"years\", \"of\", \"2013\", \"or\", \"2016\", \".\"]\n}"}
{"question": "How many matches were played in 2013 or 2016?", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"How many matches were played in 2013 or 2016?\",\n\"question_toks\": \"['How', 'many', 'matches', 'were', 'played', 'in', '2013', 'or', '2016', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT COUNT(*) FROM matches WHERE year = '2013' OR year = '2016'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"WHERE\", \"year\", \"=\", \"'2013'\", \"OR\", \"year\", \"=\", \"'2016'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"WHERE\", \"year\", \"=\", \"OR\", \"year\", \"=\"],\n    \"question\": \"How many matches were played in 2013 or 2016?\",\n    \"question_toks\": [\"How\", \"many\", \"matches\", \"were\", \"played\", \"in\", \"2013\", \"or\", \"2016\", \"?\"]\n}"}
{"question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?\",\n\"question_toks\": \"['What', 'are', 'the', 'country', 'code', 'and', 'first', 'name', 'of', 'the', 'players', 'who', 'won', 'in', 'both', 'tourney', 'WTA', 'Championships', 'and', 'Australian', 'Open', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT players.country_code, players.first_name FROM players, matches AS m1, matches AS m2 WHERE players.player_id = m1.winner_id AND players.player_id = m2.winner_id AND m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'\",\n  \"query_toks\": [\"SELECT\", \"players\", \".\", \"country_code\", \",\", \"players\", \".\", \"first_name\", \"FROM\", \"players\", \",\", \"matches\", \"AS\", \"m1\", \",\", \"matches\", \"AS\", \"m2\", \"WHERE\", \"players\", \".\", \"player_id\", \"=\", \"m1\", \".\", \"winner_id\", \"AND\", \"players\", \".\", \"player_id\", \"=\", \"m2\", \".\", \"winner_id\", \"AND\", \"m1\", \".\", \"tourney_name\", \"=\", \"'\", \"WTA\", \"Championships\", \"'\", \"AND\", \"m2\", \".\", \"tourney_name\", \"=\", \"'\", \"Australian\", \"Open\", \"'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"players\", \".\", \"country_code\", \",\", \"players\", \".\", \"first_name\", \"FROM\", \"players\", \",\", \"matches\", \"AS\", \"m1\", \",\", \"matches\", \"AS\", \"m2\", \"WHERE\", \"players\", \".\", \"player_id\", \"=\", \"m1\", \".\", \"winner_id\", \"AND\", \"players\", \".\", \"player_id\", \"=\", \"m2\", \".\", \"winner_id\", \"AND\", \"m1\", \".\", \"tourney_name\", \"=\", \"\", \"WTA\", \"Championships\", \"\", \"AND\", \"m2\", \".\", \"tourney_name\", \"=\", \"\", \"Australian\", \"Open\", \"\"],\n  \"question\": \"What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"country\", \"code\", \"and\", \"first\", \"name\", \"of\", \"the\", \"players\", \"who\", \"won\", \"in\", \"both\", \"tourney\", \"WTA\", \"Championships\", \"and\", \"Australian\", \"Open\", \"?\"]\n}"}
{"question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the first names and country codes for players who won both the WTA Championships and the Australian Open?\",\n\"question_toks\": \"['What', 'are', 'the', 'first', 'names', 'and', 'country', 'codes', 'for', 'players', 'who', 'won', 'both', 'the', 'WTA', 'Championships', 'and', 'the', 'Australian', 'Open', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT T1.first_name, T1.country_code FROM players T1, matches T2, matches T3 WHERE T1.player_id = T2.winner_id AND T1.player_id = T3.winner_id AND T2.tourney_name = 'WTA Championships' AND T3.tourney_name = 'Australian Open'\",\n    \"query_toks\": \"['SELECT', 'T1.first_name', ',', 'T1.country_code', 'FROM', 'players', 'T1', ',', 'matches', 'T2', ',', 'matches', 'T3', 'WHERE', 'T1.player_id', '=', 'T2.winner_id', 'AND', 'T1.player_id', '=', 'T3.winner_id', 'AND', 'T2.tourney_name', '=', \\\"'WTA Championships'\\\"\", 'AND', 'T3.tourney_name', '=', \\\"'Australian Open'\\\"']\",\n    \"query_toks_no_value\": \"['SELECT', 'T1', '.', 'first_name', ',', 'T1', '.', 'country_code', 'FROM', 'players', 'T1', ',', 'matches', 'T2', ',', 'matches', 'T3', 'WHERE', 'T1', '.', 'player_id', '=', 'T2', '.', 'winner_id', 'AND', 'T1', '.', 'player_id', '=', 'T3', '.', 'winner_id', 'AND', 'T2', '.', 'tourney_name', '=', '\\\"WTA Championships\\\"', 'AND', 'T3', '.', 'tourney_name', '=', '\\\"Australian Open\\\"']\",\n    \"question\": \"What are the first names and country codes for players who won both the WTA Championships and the Australian Open?\",\n    \"question_toks\": \"['What', 'are', 'the', 'first', 'names', 'and', 'country', 'codes', 'for', 'players', 'who', 'won', 'both', 'the', 'WTA', 'Championships', 'and', 'the', 'Australian', 'Open', '?']\"\n}"}
{"question": "Find the first name and country code of the oldest player.", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the first name and country code of the oldest player.\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'oldest', 'player', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"tennis_1\",\n \"query\": \"SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);\",\n \"query_toks\": [\"SELECT\", \"first_name\", \",\", \"country_code\", \"FROM\", \"players\", \"WHERE\", \"birth_date\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"birth_date\", \")\", \"FROM\", \"players\", \")\",\";\"],\n \"query_toks_no_value\": [\"SELECT\", \"first_name\", \",\", \"country_code\", \"FROM\", \"players\", \"WHERE\", \"birth_date\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"birth_date\", \")\", \"FROM\", \"players\", \")\",\";\"],\n \"question\": \"Find the first name and country code of the oldest player.\",\n \"question_toks\": [\"Find\", \"the\", \"first\", \"name\", \"and\", \"country\", \"code\", \"of\", \"the\", \"oldest\", \"player\", \".\"]\n}"}
{"question": "What is the first name and country code of the oldest player?", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What is the first name and country code of the oldest player?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'oldest', 'player', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"wta_1\",\n\"query\": \"SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)\",\n\"query_toks\": [\"SELECT\", \"first_name\", \",\", \"country_code\", \"FROM\", \"players\", \"WHERE\", \"birth_date\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"birth_date\", \")\", \"FROM\", \"players\", \")\"],\n\"query_toks_no_value\": [\"SELECT\", \"first_name\", \",\", \"country_code\", \"FROM\", \"players\", \"WHERE\", \"birth_date\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"birth_date\", \")\", \"FROM\", \"players\", \")\"],\n\"question\": \"What is the first name and country code of the oldest player?\",\n\"question_toks\": [\"What\", \"is\", \"the\", \"first\", \"name\", \"and\", \"country\", \"code\", \"of\", \"the\", \"oldest\", \"player\", \"?\"]\n}"}
{"question": "List the first and last name of all players in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"List the first and last name of all players in the order of birth date.\",\n\"question_toks\": \"['List', 'the', 'first', 'and', 'last', 'name', 'of', 'all', 'players', 'in', 'the', 'order', 'of', 'birth', 'date', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT first_name, last_name FROM players ORDER BY birth_date;\",\n    \"query_toks\": [\"SELECT\", \"first_name\", \",\", \"last_name\", \"FROM\", \"players\", \"ORDER\", \"BY\", \"birth_date\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"first_name\", \",\", \"last_name\", \"FROM\", \"players\", \"ORDER\", \"BY\", \"birth_date\", \";\"],\n    \"question\": \"List the first and last name of all players in the order of birth date.\",\n    \"question_toks\": [\"List\", \"the\", \"first\", \"and\", \"last\", \"name\", \"of\", \"all\", \"players\", \"in\", \"the\", \"order\", \"of\", \"birth\", \"date\", \".\"]\n}"}
{"question": "What are the full names of all players, sorted by birth date?", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the full names of all players, sorted by birth date?\",\n\"question_toks\": \"['What', 'are', 'the', 'full', 'names', 'of', 'all', 'players', ',', 'sorted', 'by', 'birth', 'date', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"wta_1\",\n\"query\": \"SELECT CONCAT(first_name, ' ', last_name) FROM players ORDER BY birth_date\",\n\"query_toks\": \"['SELECT', 'CONCAT', '(', 'first_name', ',', ''', '', 'last_name', '',')', 'FROM', 'players', 'ORDER', 'BY', 'birth_date']\",\n\"query_toks_no_value\": \"['SELECT', 'CONCAT', '(', 'first_name', ',', 'last_name', ')', 'FROM', 'players', 'ORDER', 'BY', 'birth_date']\",\n\"question\": \"What are the full names of all players, sorted by birth date?\",\n\"question_toks\": \"['What', 'are', 'the', 'full', 'names', 'of', 'all', 'players', ',', 'sorted', 'by', 'birth', 'date', '?']}\""}
{"question": "List the first and last name of all players who are left / L hand in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"List the first and last name of all players who are left / L hand in the order of birth date.\",\n\"question_toks\": \"['List', 'the', 'first', 'and', 'last', 'name', 'of', 'all', 'players', 'who', 'are', 'left', '/', 'L', 'hand', 'in', 'the', 'order', 'of', 'birth', 'date', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"wta_1\",\n \"query\": \"SELECT first_name, last_name FROM players WHERE hand='L' ORDER BY birth_date;\",\n \"query_toks\": [\"SELECT\", \"first_name\", \",\", \"last_name\", \"FROM\", \"players\", \"WHERE\", \"hand\", \"=\", \"'L'\", \"ORDER\", \"BY\", \"birth_date\", \";\"],\n \"query_toks_no_value\": [\"SELECT\", \"first_name\", \",\", \"last_name\", \"FROM\", \"players\", \"WHERE\", \"hand\", \"=\", \"?\", \"ORDER\", \"BY\", \"birth_date\", \";\"],\n \"question\": \"List the first and last name of all players who are left / L hand in the order of birth date.\",\n \"question_toks\": [\"List\", \"the\", \"first\", \"and\", \"last\", \"name\", \"of\", \"all\", \"players\", \"who\", \"are\", \"left\", \"/\", \"L\", \"hand\", \"in\", \"the\", \"order\", \"of\", \"birth\", \"date\", \".\"]}"}
{"question": "What are the full names of all left handed players, in order of birth date?", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the full names of all left handed players, in order of birth date?\",\n\"question_toks\": \"['What', 'are', 'the', 'full', 'names', 'of', 'all', 'left', 'handed', 'players', ',', 'in', 'order', 'of', 'birth', 'date', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT first_name, last_name FROM players WHERE hand='L' ORDER BY birth_date\",\n  \"query_toks\": [\"SELECT\", \"first_name\", \",\", \"last_name\", \"FROM\", \"players\", \"WHERE\", \"hand\", \"=\", \"'\", \"L\", \"'\", \"ORDER\", \"BY\", \"birth_date\"],\n  \"query_toks_no_value\": [\"SELECT\", \"first_name\", \",\", \"last_name\", \"FROM\", \"players\", \"WHERE\", \"hand\", \"=\", \"?\", \"ORDER\", \"BY\", \"birth_date\"],\n  \"question\": \"What are the full names of all left handed players, in order of birth date?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"full\", \"names\", \"of\", \"all\", \"left\", \"handed\", \"players\", \",\", \"in\", \"order\", \"of\", \"birth\", \"date\", \"?\"]\n}"}
{"question": "Find the first name and country code of the player who did the most number of tours.", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the first name and country code of the player who did the most number of tours.\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'player', 'who', 'did', 'the', 'most', 'number', 'of', 'tours', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)\",\n    \"query_toks\": [\"SELECT\", \"players.first_name\", \",\", \"players.country_code\", \"FROM\", \"players\", \"JOIN\", \"rankings\", \"ON\", \"players.player_id\", \"=\", \"rankings.player_id\", \"WHERE\", \"rankings.tours\", \"=\", \"(\", \"SELECT\", \"MAX\", \"(\", \"tours\", \")\", \"FROM\", \"rankings\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"players.first_name\", \",\", \"players.country_code\", \"FROM\", \"players\", \"JOIN\", \"rankings\", \"ON\", \"players.player_id\", \"=\", \"rankings.player_id\", \"WHERE\", \"rankings.tours\", \"=\", \"(\", \"SELECT\", \"MAX\", \"(\", \"tours\", \")\", \"FROM\", \"rankings\", \")\"],\n    \"question\": \"Find the first name and country code of the player who did the most number of tours.\",\n    \"question_toks\": [\"Find\", \"the\", \"first\", \"name\", \"and\", \"country\", \"code\", \"of\", \"the\", \"player\", \"who\", \"did\", \"the\", \"most\", \"number\", \"of\", \"tours\", \".\"]\n}"}
{"question": "What is the first name and country code of the player with the most tours?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What is the first name and country code of the player with the most tours?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'player', 'with', 'the', 'most', 'tours', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"wta_1\",\n\"query\": \"SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)\",\n\"query_toks\": \"['SELECT', 'players', '.', 'first_name', ',', 'players', '.', 'country_code', 'FROM', 'players', 'JOIN', 'rankings', 'ON', 'players', '.', 'player_id', '=', 'rankings', '.', 'player_id', 'WHERE', 'rankings', '.', 'tours', '=', '(', 'SELECT', 'MAX', '(', 'tours', ')', 'FROM', 'rankings', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'players', '.', 'first_name', ',', 'players', '.', 'country_code', 'FROM', 'players', 'JOIN', 'rankings', 'ON', 'players', '.', 'player_id', '=', 'rankings', '.', 'player_id', 'WHERE', 'rankings', '.', 'tours', '=', '(', 'SELECT', 'MAX', '(', 'tours', ')', 'FROM', 'rankings', ')']\",\n\"question\": \"What is the first name and country code of the player with the most tours?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'player', 'with', 'the', 'most', 'tours', '?']}\" }"}
{"question": "Find the year that has the most number of matches.", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the year that has the most number of matches.\",\n\"question_toks\": \"['Find', 'the', 'year', 'that', 'has', 'the', 'most', 'number', 'of', 'matches', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"tennis_1\",\n \"query\": \"SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'year', ',', 'COUNT', '(', '*', ')', 'AS', 'num_matches', 'FROM', 'matches', 'GROUP', 'BY', 'year', 'ORDER', 'BY', 'num_matches', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'year', ',', 'COUNT', '(', '*', ')', 'AS', 'num_matches', 'FROM', 'matches', 'GROUP', 'BY', 'year', 'ORDER', 'BY', 'num_matches', 'DESC', 'LIMIT', '1']\",\n \"question\": \"Find the year that has the most number of matches.\",\n \"question_toks\": \"['Find', 'the', 'year', 'that', 'has', 'the', 'most', 'number', 'of', 'matches', '.']\"}"}
{"question": "Which year had the most matches?", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Which year had the most matches?\",\n\"question_toks\": \"['Which', 'year', 'had', 'the', 'most', 'matches', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"wta_1\",\n\"query\": \"SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'year', ',', 'COUNT', '(', '*', ')', 'FROM', 'matches', 'GROUP', 'BY', 'year', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'year', ',', 'COUNT', '(', '*', ')', 'FROM', 'matches', 'GROUP', 'BY', 'year', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"question\": \"Which year had the most matches?\",\n\"question_toks\": \"['Which', 'year', 'had', 'the', 'most', 'matches', '?']}\""}
{"question": "Find the name and rank points of the winner who won the most times.", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the name and rank points of the winner who won the most times.\",\n\"question_toks\": \"['Find', 'the', 'name', 'and', 'rank', 'points', 'of', 'the', 'winner', 'who', 'won', 'the', 'most', 'times', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT winner_name, winner_rank_points FROM (SELECT winner_id, COUNT(*) as wins FROM matches GROUP BY winner_id) AS T1 JOIN matches ON T1.winner_id = matches.winner_id JOIN rankings ON rankings.player_id = T1.winner_id AND rankings.ranking_date = CAST(tourney_date AS DATE) ORDER BY wins DESC LIMIT 1\",\n  \"query_toks\": \"['SELECT', 'winner_name', ',', 'winner_rank_points', 'FROM', '(', 'SELECT', 'winner_id', ',', 'COUNT', '(', '*', ')', 'as', 'wins', 'FROM', 'matches', 'GROUP', 'BY', 'winner_id', ')', 'AS', 'T1', 'JOIN', 'matches', 'ON', 'T1.winner_id', '=', 'matches.winner_id', 'JOIN', 'rankings', 'ON', 'rankings.player_id', '=', 'T1.winner_id', 'AND', 'rankings.ranking_date', '=', 'CAST', '(', 'tourney_date', 'AS', 'DATE', ')', 'ORDER', 'BY', 'wins', 'DESC', 'LIMIT', '1']\",\n  \"query_toks_no_value\": \"['SELECT', 'winner_name', ',', 'winner_rank_points', 'FROM', '(', 'SELECT', 'winner_id', ',', 'COUNT', '(', '*', ')', 'as', 'wins', 'FROM', 'matches', 'GROUP', 'BY', 'winner_id', ')', 'AS', 'T1', 'JOIN', 'matches', 'ON', 'T1.winner_id', '=', 'matches.winner_id', 'JOIN', 'rankings', 'ON', 'rankings.player_id', '=', 'T1.winner_id', 'AND', 'rankings.ranking_date', '=', 'CAST', '(', 'tourney_date', 'AS', 'DATE', ')', 'ORDER', 'BY', 'wins', 'DESC', 'LIMIT', '1']\",\n  \"question\": \"Find the name and rank points of the winner who won the most times.\",\n  \"question_toks\": \"['Find', 'the', 'name', 'and', 'rank', 'points', 'of', 'the', 'winner', 'who', 'won', 'the', 'most', 'times', '.']\"\n}"}
{"question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What is the name of the winner who has won the most matches, and how many rank points does this player have?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'winner', 'who', 'has', 'won', 'the', 'most', 'matches', ',', 'and', 'how', 'many', 'rank', 'points', 'does', 'this', 'player', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"wta_1\",\n\"query\": \"SELECT winner_name, winner_rank_points FROM (SELECT winner_id, COUNT(*) AS Num_Wins FROM matches GROUP BY winner_id ORDER BY Num_Wins DESC LIMIT 1) AS T1 JOIN rankings ON T1.winner_id=rankings.player_id ORDER BY rankings.ranking_date DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'winner_name', ',', 'winner_rank_points', 'FROM', '(', 'SELECT', 'winner_id', ',', 'COUNT', '(', '*', ')', 'AS', 'Num_Wins', 'FROM', 'matches', 'GROUP', 'BY', 'winner_id', 'ORDER', 'BY', 'Num_Wins', 'DESC', 'LIMIT', '1', ')', 'AS', 'T1', 'JOIN', 'rankings', 'ON', 'T1', '.', 'winner_id', '=', 'rankings', '.', 'player_id', 'ORDER', 'BY', 'rankings', '.', 'ranking_date', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'winner_name', ',', 'winner_rank_points', 'FROM', '(', 'SELECT', 'winner_id', ',', 'COUNT', '(', '*', ')', 'AS', 'Num_Wins', 'FROM', 'matches', 'GROUP', 'BY', 'winner_id', 'ORDER', 'BY', 'Num_Wins', 'DESC', 'LIMIT', '1', ')', 'AS', 'T1', 'JOIN', 'rankings', 'ON', 'T1', '.', 'winner_id', '=', 'rankings', '.', 'player_id', 'ORDER', 'BY', 'rankings', '.', 'ranking_date', 'DESC', 'LIMIT', '1']\",\n\"question\": \"What is the name of the winner who has won the most matches, and how many rank points does this player have?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'winner', 'who', 'has', 'won', 'the', 'most', 'matches', ',', 'and', 'how', 'many', 'rank', 'points', 'does', 'this', 'player', 'have', '?']}\""}
{"question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.\",\n\"question_toks\": \"['Find', 'the', 'name', 'of', 'the', 'winner', 'who', 'has', 'the', 'highest', 'rank', 'points', 'and', 'participated', 'in', 'the', 'Australian', 'Open', 'tourney', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT winner_name FROM matches T1, rankings T2 WHERE T1.winner_id=T2.player_id AND T1.tourney_name='Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1;\",\n    \"query_toks\": \"['SELECT', 'winner_name', 'FROM', 'matches', 'T1', ',', 'rankings', 'T2', 'WHERE', 'T1', '.', 'winner_id', '=', 'T2', '.', 'player_id', 'AND', 'T1', '.', 'tourney_name', '=', ''Australian Open'', 'ORDER', 'BY', 'T2', '.', 'ranking_points', 'DESC', 'LIMIT', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'winner_name', 'FROM', 'matches', 'T1', ',', 'rankings', 'T2', 'WHERE', 'T1', '.', 'winner_id', '=', 'T2', '.', 'player_id', 'AND', 'T1', '.', 'tourney_name', '=', '', 'ORDER', 'BY', 'T2', '.', 'ranking_points', 'DESC', 'LIMIT', '1', ';']\",\n    \"question\": \"Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.\",\n    \"question_toks\": \"['Find', 'the', 'name', 'of', 'the', 'winner', 'who', 'has', 'the', 'highest', 'rank', 'points', 'and', 'participated', 'in', 'the', 'Australian', 'Open', 'tourney', '.']\"\n}"}
{"question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What is the name of the winner with the most rank points who participated in the Australian Open tournament?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'winner', 'with', 'the', 'most', 'rank', 'points', 'who', 'participated', 'in', 'the', 'Australian', 'Open', 'tournament', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"wta_1\",\n \"query\": \"SELECT winner_name FROM matches T1 JOIN rankings T2 ON T1.winner_id = T2.player_id WHERE tourney_name = 'Australian Open' ORDER BY ranking_points DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'winner_name', 'FROM', 'matches', 'T1', 'JOIN', 'rankings', 'T2', 'ON', 'T1', '.', 'winner_id', '=', 'T2', '.', 'player_id', 'WHERE', 'tourney_name', '=', '\\\\'\", 'Australian', 'Open', '\\\\'', 'ORDER', 'BY', 'ranking_points', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'winner_name', 'FROM', 'matches', 'T1', 'JOIN', 'rankings', 'T2', 'ON', 'T1', '.', 'winner_id', '=', 'T2', '.', 'player_id', 'WHERE', 'tourney_name', '=', 'Australian Open', 'ORDER', 'BY', 'ranking_points', 'DESC', 'LIMIT', '1']\",\n \"question\": \"What is the name of the winner with the most rank points who participated in the Australian Open tournament?\",\n \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'winner', 'with', 'the', 'most', 'rank', 'points', 'who', 'participated', 'in', 'the', 'Australian', 'Open', 'tournament', '?']\"}"}
{"question": "find the names of loser and winner who played in the match with greatest number of minutes.", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"find the names of loser and winner who played in the match with greatest number of minutes.\",\n\"question_toks\": \"['find', 'the', 'names', 'of', 'loser', 'and', 'winner', 'who', 'played', 'in', 'the', 'match', 'with', 'greatest', 'number', 'of', 'minutes', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT loser_name, winner_name\\nFROM matches\\nWHERE minutes = (SELECT MAX(minutes) FROM matches);\",\n    \"query_toks\": \"['SELECT', 'loser_name', ',', 'winner_name', 'FROM', 'matches', 'WHERE', 'minutes', '=', '(', 'SELECT', 'MAX', '(', 'minutes', ')', 'FROM', 'matches', ')', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'loser_name', ',', 'winner_name', 'FROM', 'matches', 'WHERE', 'minutes', '=', '(', 'SELECT', 'MAX', '(', 'minutes', ')', 'FROM', 'matches', ')', ';']\",\n    \"question\": \"find the names of loser and winner who played in the match with greatest number of minutes.\",\n    \"question_toks\": \"['find', 'the', 'names', 'of', 'loser', 'and', 'winner', 'who', 'played', 'in', 'the', 'match', 'with', 'greatest', 'number', 'of', 'minutes', '.']\"\n}"}
{"question": "What are the names of the winner and loser who played in the longest match?", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the names of the winner and loser who played in the longest match?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'winner', 'and', 'loser', 'who', 'played', 'in', 'the', 'longest', 'match', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tennis_1\",\n  \"query\": \"SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)\",\n  \"query_toks\": [\"SELECT\", \"winner_name\", \",\", \"loser_name\", \"FROM\", \"matches\", \"WHERE\", \"minutes\", \"=\", \"(\", \"SELECT\", \"MAX\", \"(\", \"minutes\", \")\", \"FROM\", \"matches\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"winner_name\", \",\", \"loser_name\", \"FROM\", \"matches\", \"WHERE\", \"minutes\", \"=\", \"(\", \"SELECT\", \"MAX\", \"(\", \"minutes\", \")\", \"FROM\", \"matches\", \")\"],\n  \"question\": \"What are the names of the winner and loser who played in the longest match?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"the\", \"winner\", \"and\", \"loser\", \"who\", \"played\", \"in\", \"the\", \"longest\", \"match\", \"?\"]\n}"}
{"question": "Find the average ranking for each player and their first name.", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the average ranking for each player and their first name.\",\n\"question_toks\": \"['Find', 'the', 'average', 'ranking', 'for', 'each', 'player', 'and', 'their', 'first', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"wta_1\",\n \"query\": \"SELECT AVG(ranking) AS avg_ranking, first_name FROM rankings R JOIN players P ON R.player_id = P.player_id GROUP BY first_name\",\n \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"ranking\", \")\", \"AS\", \"avg_ranking\", \",\", \"first_name\", \"FROM\", \"rankings\", \"R\", \"JOIN\", \"players\", \"P\", \"ON\", \"R\", \".\", \"player_id\", \"=\", \"P\", \".\", \"player_id\", \"GROUP\", \"BY\", \"first_name\"],\n \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"ranking\", \")\", \"AS\", \"avg_ranking\", \",\", \"first_name\", \"FROM\", \"rankings\", \"R\", \"JOIN\", \"players\", \"P\", \"ON\", \"R\", \".\", \"player_id\", \"=\", \"P\", \".\", \"player_id\", \"GROUP\", \"BY\", \"first_name\"],\n \"question\": \"Find the average ranking for each player and their first name.\",\n \"question_toks\": [\"Find\", \"the\", \"average\", \"ranking\", \"for\", \"each\", \"player\", \"and\", \"their\", \"first\", \"name\", \".\"]\n}"}
{"question": "What are the first names of all players, and their average rankings?", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the first names of all players, and their average rankings?\",\n\"question_toks\": \"['What', 'are', 'the', 'first', 'names', 'of', 'all', 'players', ',', 'and', 'their', 'average', 'rankings', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT first_name, AVG(ranking) FROM players T1 INNER JOIN rankings T2 ON T1.player_id = T2.player_id GROUP BY first_name\",\n  \"query_toks\": [\"SELECT\", \"first_name\", \",\", \"AVG\", \"(\", \"ranking\", \")\", \"FROM\", \"players\", \"T1\", \"INNER\", \"JOIN\", \"rankings\", \"T2\", \"ON\", \"T1\", \".\", \"player_id\", \"=\", \"T2\", \".\", \"player_id\", \"GROUP\", \"BY\", \"first_name\"],\n  \"query_toks_no_value\": [\"SELECT\", \"first_name\", \",\", \"AVG\", \"(\", \"ranking\", \")\", \"FROM\", \"players\", \"T1\", \"INNER\", \"JOIN\", \"rankings\", \"T2\", \"ON\", \"T1\", \".\", \"player_id\", \"=\", \"T2\", \".\", \"player_id\", \"GROUP\", \"BY\", \"first_name\"],\n  \"question\": \"What are the first names of all players, and their average rankings?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"first\", \"names\", \"of\", \"all\", \"players\", \",\", \"and\", \"their\", \"average\", \"rankings\", \"?\"]\n}"}
{"question": "Find the total ranking points for each player and their first name.", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the total ranking points for each player and their first name.\",\n\"question_toks\": \"['Find', 'the', 'total', 'ranking', 'points', 'for', 'each', 'player', 'and', 'their', 'first', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;\",\n    \"query_toks\": [\"SELECT\", \"players\", \".\", \"first_name\", \",\", \"SUM\", \"(\", \"rankings\", \".\", \"ranking_points\", \")\", \"AS\", \"total_ranking_points\", \"FROM\", \"players\", \"JOIN\", \"rankings\", \"ON\", \"players\", \".\", \"player_id\", \"=\", \"rankings\", \".\", \"player_id\", \"GROUP\", \"BY\", \"players\", \".\", \"player_id\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"players\", \".\", \"first_name\", \",\", \"SUM\", \"(\", \"rankings\", \".\", \"ranking_points\", \")\", \"AS\", \"total_ranking_points\", \"FROM\", \"players\", \"JOIN\", \"rankings\", \"ON\", \"players\", \".\", \"player_id\", \"=\", \"rankings\", \".\", \"player_id\", \"GROUP\", \"BY\", \"players\", \".\", \"player_id\", \";\"],\n    \"question\": \"Find the total ranking points for each player and their first name.\",\n    \"question_toks\": [\"Find\", \"the\", \"total\", \"ranking\", \"points\", \"for\", \"each\", \"player\", \"and\", \"their\", \"first\", \"name\", \".\"]\n}"}
{"question": "What are the first names of all players, and their total ranking points?", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the first names of all players, and their total ranking points?\",\n\"question_toks\": \"['What', 'are', 'the', 'first', 'names', 'of', 'all', 'players', ',', 'and', 'their', 'total', 'ranking', 'points', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT T1.first_name, SUM(T3.ranking_points) FROM players T1 INNER JOIN rankings T3 ON T1.player_id = T3.player_id GROUP BY T1.first_name\",\n    \"query_toks\": [\"SELECT\", \"T1\", \".\", \"first_name\", \",\", \"SUM\", \"(\", \"T3\", \".\", \"ranking_points\", \")\", \"FROM\", \"players\", \"T1\", \"INNER\", \"JOIN\", \"rankings\", \"T3\", \"ON\", \"T1\", \".\", \"player_id\", \"=\", \"T3\", \".\", \"player_id\", \"GROUP\", \"BY\", \"T1\", \".\", \"first_name\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T1\", \".\", \"first_name\", \",\", \"SUM\", \"(\", \"T3\", \".\", \"ranking_points\", \")\", \"FROM\", \"players\", \"T1\", \"INNER\", \"JOIN\", \"rankings\", \"T3\", \"ON\", \"T1\", \".\", \"player_id\", \"=\", \"T3\", \".\", \"player_id\", \"GROUP\", \"BY\", \"T1\", \".\", \"first_name\"],\n    \"question\": \"What are the first names of all players, and their total ranking points?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"first\", \"names\", \"of\", \"all\", \"players\", \",\", \"and\", \"their\", \"total\", \"ranking\", \"points\", \"?\"]\n}"}
{"question": "find the number of players for each country.", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"find the number of players for each country.\",\n\"question_toks\": \"['find', 'the', 'number', 'of', 'players', 'for', 'each', 'country', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT country_code, COUNT(*) FROM players GROUP BY country_code\",\n  \"query_toks\": [\"SELECT\", \"country_code\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"country_code\"],\n  \"query_toks_no_value\": [\"SELECT\", \"country_code\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"country_code\"],\n  \"question\": \"find the number of players for each country.\",\n  \"question_toks\": [\"find\", \"the\", \"number\", \"of\", \"players\", \"for\", \"each\", \"country\", \".\"]\n}"}
{"question": "How many players are from each country?", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"How many players are from each country?\",\n\"question_toks\": \"['How', 'many', 'players', 'are', 'from', 'each', 'country', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code\",\n    \"query_toks\": [\"SELECT\", \"country_code\", \",\", \"COUNT\", \"(\", \"player_id\", \")\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"country_code\"],\n    \"query_toks_no_value\": [\"SELECT\", \"country_code\", \",\", \"COUNT\", \"(\", \"player_id\", \")\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"country_code\"],\n    \"question\": \"How many players are from each country?\",\n    \"question_toks\": [\"How\", \"many\", \"players\", \"are\", \"from\", \"each\", \"country\", \"?\"]\n}"}
{"question": "find the code of the country where has the greatest number of players.", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"find the code of the country where has the greatest number of players.\",\n\"question_toks\": \"['find', 'the', 'code', 'of', 'the', 'country', 'where', 'has', 'the', 'greatest', 'number', 'of', 'players', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT country_code FROM (SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1) as country_count\",\n    \"query_toks\": [\"SELECT\", \"country_code\", \"FROM\", \"(\", \"SELECT\", \"country_code\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"as\", \"num_players\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"country_code\", \"ORDER\", \"BY\", \"num_players\", \"DESC\", \"LIMIT\", \"1\", \")\", \"as\", \"country_count\"],\n    \"query_toks_no_value\": [\"SELECT\", \"country_code\", \"FROM\", \"(\", \"SELECT\", \"country_code\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"as\", \"num_players\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"country_code\", \"ORDER\", \"BY\", \"num_players\", \"DESC\", \"LIMIT\", \"1\", \")\", \"as\", \"country_count\"],\n    \"question\": \"find the code of the country where has the greatest number of players.\",\n    \"question_toks\": [\"find\", \"the\", \"code\", \"of\", \"the\", \"country\", \"where\", \"has\", \"the\", \"greatest\", \"number\", \"of\", \"players\", \".\"]\n}"}
{"question": "What is the code of the country with the most players?", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What is the code of the country with the most players?\",\n\"question_toks\": \"['What', 'is', 'the', 'code', 'of', 'the', 'country', 'with', 'the', 'most', 'players', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tennis_1\",\n  \"query\": \"SELECT country_code FROM (SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1) AS max_players;\",\n  \"query_toks\": [\"SELECT\", \"country_code\", \"FROM\", \"(\", \"SELECT\", \"country_code\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_players\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"country_code\", \"ORDER\", \"BY\", \"num_players\", \"DESC\", \"LIMIT\", \"1\", \")\", \"AS\", \"max_players\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"country_code\", \"FROM\", \"(\", \"SELECT\", \"country_code\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_players\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"country_code\", \"ORDER\", \"BY\", \"num_players\", \"DESC\", \"LIMIT\", \"1\", \")\", \"AS\", \"max_players\", \";\"],\n  \"question\": \"What is the code of the country with the most players?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"code\", \"of\", \"the\", \"country\", \"with\", \"the\", \"most\", \"players\", \"?\"]\n}"}
{"question": "Find the codes of countries that have more than 50 players.", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the codes of countries that have more than 50 players.\",\n\"question_toks\": \"['Find', 'the', 'codes', 'of', 'countries', 'that', 'have', 'more', 'than', '50', 'players', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50\",\n  \"query_toks\": [\"SELECT\", \"players\", \".\", \"country_code\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"players\", \".\", \"country_code\", \"HAVING\", \"COUNT\", \"(\", \"players\", \".\", \"player_id\", \")\", \">\", \"50\"],\n  \"query_toks_no_value\": [\"SELECT\", \"players\", \".\", \"country_code\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"players\", \".\", \"country_code\", \"HAVING\", \"COUNT\", \"(\", \"players\", \".\", \"player_id\", \")\", \">\", \"??\"],\n  \"question\": \"Find the codes of countries that have more than 50 players.\",\n  \"question_toks\": [\"Find\", \"the\", \"codes\", \"of\", \"countries\", \"that\", \"have\", \"more\", \"than\", \"50\", \"players\", \".\"]\n}"}
{"question": "What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the codes of countries with more than 50 players?\",\n\"question_toks\": \"['What', 'are', 'the', 'codes', 'of', 'countries', 'with', 'more', 'than', '50', 'players', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'country_code', 'FROM', 'players', 'GROUP', 'BY', 'country_code', 'HAVING', 'COUNT', '(', '*', ')', '>', '50']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'country_code', 'FROM', 'players', 'GROUP', 'BY', 'country_code', 'HAVING', 'COUNT', '(', '*', ')', '>', '?']\",\n    \"question\": \"What are the codes of countries with more than 50 players?\",\n    \"question_toks\": \"['What', 'are', 'the', 'codes', 'of', 'countries', 'with', 'more', 'than', '50', 'players', '?']\"\n}"}
{"question": "Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the total number of tours for each ranking date.\",\n\"question_toks\": \"['Find', 'the', 'total', 'number', 'of', 'tours', 'for', 'each', 'ranking', 'date', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date\",\n    \"query_toks\": [\"SELECT\", \"ranking_date\", \",\", \"sum\", \"(\", \"tours\", \")\", \"FROM\", \"rankings\", \"GROUP\", \"BY\", \"ranking_date\"],\n    \"query_toks_no_value\": [\"SELECT\", \"ranking_date\", \",\", \"sum\", \"(\", \"tours\", \")\", \"FROM\", \"rankings\", \"GROUP\", \"BY\", \"ranking_date\"],\n    \"question\": \"Find the total number of tours for each ranking date.\",\n    \"question_toks\": [\"Find\", \"the\", \"total\", \"number\", \"of\", \"tours\", \"for\", \"each\", \"ranking\", \"date\", \".\"]\n}"}
{"question": "How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"How many total tours were there for each ranking date?\",\n\"question_toks\": \"['How', 'many', 'total', 'tours', 'were', 'there', 'for', 'each', 'ranking', 'date', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date\",\n  \"query_toks\": [\"SELECT\", \"ranking_date\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"tours\", \")\", \"FROM\", \"rankings\", \"GROUP\", \"BY\", \"ranking_date\"],\n  \"query_toks_no_value\": [\"SELECT\", \"ranking_date\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"tours\", \")\", \"FROM\", \"rankings\", \"GROUP\", \"BY\", \"ranking_date\"],\n  \"question\": \"How many total tours were there for each ranking date?\",\n  \"question_toks\": [\"How\", \"many\", \"total\", \"tours\", \"were\", \"there\", \"for\", \"each\", \"ranking\", \"date\", \"?\"]\n}"}
{"question": "Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the number of matches happened in each year.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'matches', 'happened', 'in', 'each', 'year', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"wta_1\",\n \"query\": \"SELECT year, COUNT(*) FROM matches GROUP BY year\",\n \"query_toks\": [\"SELECT\", \"year\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"GROUP\", \"BY\", \"year\"],\n \"query_toks_no_value\": [\"SELECT\", \"year\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"GROUP\", \"BY\", \"year\"],\n \"question\": \"Find the number of matches happened in each year.\",\n \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"matches\", \"happened\", \"in\", \"each\", \"year\", \".\"]}"}
{"question": "How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"How many matches were played in each year?\",\n\"question_toks\": \"['How', 'many', 'matches', 'were', 'played', 'in', 'each', 'year', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"wta_1\",\n\"query\": \"SELECT year, COUNT(*) FROM matches GROUP BY year\",\n\"query_toks\": [\"SELECT\", \"year\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"GROUP\", \"BY\", \"year\"],\n\"query_toks_no_value\": [\"SELECT\", \"year\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"GROUP\", \"BY\", \"year\"],\n\"question\": \"How many matches were played in each year?\",\n\"question_toks\": [\"How\", \"many\", \"matches\", \"were\", \"played\", \"in\", \"each\", \"year\", \"?\"]\n}"}
{"question": "Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the name and rank of the 3 youngest winners across all matches.\",\n\"question_toks\": \"['Find', 'the', 'name', 'and', 'rank', 'of', 'the', '3', 'youngest', 'winners', 'across', 'all', 'matches', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"tennis_1\",\n \"query\": \"SELECT winner_name, winner_rank FROM matches T1 JOIN (SELECT winner_id, MIN(winner_age) AS min_age FROM matches GROUP BY winner_id ORDER BY min_age LIMIT 3) T2 ON T1.winner_id = T2.winner_id AND T1.winner_age = T2.min_age\",\n \"query_toks\": [\"SELECT\", \"winner_name\", \",\", \"winner_rank\", \"FROM\", \"matches\", \"T1\", \"JOIN\", \"(\", \"SELECT\", \"winner_id\", \",\", \"MIN\", \"(\", \"winner_age\", \")\", \"AS\", \"min_age\", \"FROM\", \"matches\", \"GROUP\", \"BY\", \"winner_id\", \"ORDER\", \"BY\", \"min_age\", \"LIMIT\", \"3\", \")\", \"T2\", \"ON\", \"T1\", \".\", \"winner_id\", \"=\", \"T2\", \".\", \"winner_id\", \"AND\", \"T1\", \".\", \"winner_age\", \"=\", \"T2\", \".\", \"min_age\"],\n \"query_toks_no_value\": [\"SELECT\", \"winner_name\", \",\", \"winner_rank\", \"FROM\", \"matches\", \"T1\", \"JOIN\", \"(\", \"SELECT\", \"winner_id\", \",\", \"MIN\", \"(\", \"winner_age\", \")\", \"AS\", \"min_age\", \"FROM\", \"matches\", \"GROUP\", \"BY\", \"winner_id\", \"ORDER\", \"BY\", \"min_age\", \"LIMIT\", \"3\", \")\", \"T2\", \"ON\", \"T1\", \".\", \"winner_id\", \"=\", \"T2\", \".\", \"winner_id\", \"AND\", \"T1\", \".\", \"winner_age\", \"=\", \"T2\", \".\", \"min_age\"],\n \"question\": \"Find the name and rank of the 3 youngest winners across all matches.\",\n \"question_toks\": [\"Find\", \"the\", \"name\", \"and\", \"rank\", \"of\", \"the\", \"3\", \"youngest\", \"winners\", \"across\", \"all\", \"matches\", \".\"]}"}
{"question": "What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What are the names and ranks of the three youngest winners across all matches?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'ranks', 'of', 'the', 'three', 'youngest', 'winners', 'across', 'all', 'matches', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"wta_1\",\n\"query\": \"SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3;\",\n\"query_toks\": \"['SELECT', 'winner_name', ',', 'winner_rank', 'FROM', 'matches', 'ORDER', 'BY', 'winner_age', 'LIMIT', '3', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'winner_name', ',', 'winner_rank', 'FROM', 'matches', 'ORDER', 'BY', 'winner_age', 'LIMIT', '3', ';']\",\n\"question\": \"What are the names and ranks of the three youngest winners across all matches?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'ranks', 'of', 'the', 'three', 'youngest', 'winners', 'across', 'all', 'matches', '?']\"\n}"}
{"question": "How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"How many different winners both participated in the WTA Championships and were left handed?\",\n\"question_toks\": \"['How', 'many', 'different', 'winners', 'both', 'participated', 'in', 'the', 'WTA', 'Championships', 'and', 'were', 'left', 'handed', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"wta_1\",\n\"query\": \"SELECT COUNT(DISTINCT T1.winner_name) FROM matches T1, players T2 WHERE T1.winner_id = T2.player_id AND T1.tourney_name LIKE '%WTA Championships%' AND T2.hand = 'L'\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'T1', '.', 'winner_name', ')', 'FROM', 'matches', 'T1', ',', 'players', 'T2', 'WHERE', 'T1', '.', 'winner_id', '=', 'T2', '.', 'player_id', 'AND', 'T1', '.', 'tourney_name', 'LIKE', '\\'%WTA', 'T', 'A', 'Championships%\\'', 'AND', 'T2', '.', 'hand', '=', '\\'L\\'']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'T1', '.', 'winner_name', ')', 'FROM', 'matches', 'T1', ',', 'players', 'T2', 'WHERE', 'T1', '.', 'winner_id', '=', 'T2', '.', 'player_id', 'AND', 'T1', '.', 'tourney_name', 'LIKE', '', 'AND', 'T2', '.', 'hand', '=', '']\",\n\"question\": \"How many different winners both participated in the WTA Championships and were left handed?\",\n\"question_toks\": \"['How', 'many', 'different', 'winners', 'both', 'participated', 'in', 'the', 'WTA', 'Championships', 'and', 'were', 'left', 'handed', '?']\"\n}"}
{"question": "Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the number of left handed winners who participated in the WTA Championships.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'left', 'handed', 'winners', 'who', 'participated', 'in', 'the', 'WTA', 'Championships', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT COUNT(*) FROM matches T1, players T2 WHERE T1.winner_hand='L' AND T1.tourney_name='WTA Championships' AND T1.winner_id=T2.player_id\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"T1\", \",\", \"players\", \"T2\", \"WHERE\", \"T1\", \".\", \"winner_hand\", \"=\", \"'L'\", \"AND\", \"T1\", \".\", \"tourney_name\", \"=\", \"'WTA Championships'\", \"AND\", \"T1\", \".\", \"winner_id\", \"=\", \"T2\", \".\", \"player_id\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"matches\", \"T1\", \",\", \"players\", \"T2\", \"WHERE\", \"T1\", \".\", \"winner_hand\", \"=\", \"\", \"AND\", \"T1\", \".\", \"tourney_name\", \"=\", \"\", \"AND\", \"T1\", \".\", \"winner_id\", \"=\", \"T2\", \".\", \"player_id\"],\n  \"question\": \"Find the number of left handed winners who participated in the WTA Championships.\",\n  \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"left\", \"handed\", \"winners\", \"who\", \"participated\", \"in\", \"the\", \"WTA\", \"Championships\", \".\"]\n}"}
{"question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', ',', 'country', 'code', 'and', 'birth', 'date', 'of', 'the', 'winner', 'who', 'has', 'the', 'highest', 'rank', 'points', 'in', 'all', 'matches', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT T3.first_name, T3.country_code, T3.birth_date\\nFROM (\\n    SELECT winner_id\\n    FROM matches\\n    ORDER BY winner_rank_points DESC\\n    LIMIT 1\\n) as T1\\nJOIN rankings as T2 ON T1.winner_id = T2.player_id\\nJOIN players as T3 ON T1.winner_id = T3.player_id\",\n    \"query_toks\": [\"SELECT\", \"T3\", \".\", \"first_name\", \",\", \"T3\", \".\", \"country_code\", \",\", \"T3\", \".\", \"birth_date\", \"FROM\", \"(\", \"SELECT\", \"winner_id\", \"FROM\", \"matches\", \"ORDER\", \"BY\", \"winner_rank_points\", \"DESC\", \"LIMIT\", \"1\", \")\", \"as\", \"T1\", \"JOIN\", \"rankings\", \"as\", \"T2\", \"ON\", \"T1\", \".\", \"winner_id\", \"=\", \"T2\", \".\", \"player_id\", \"JOIN\", \"players\", \"as\", \"T3\", \"ON\", \"T1\", \".\", \"winner_id\", \"=\", \"T3\", \".\", \"player_id\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T3\", \".\", \"first_name\", \",\", \"T3\", \".\", \"country_code\", \",\", \"T3\", \".\", \"birth_date\", \"FROM\", \"(\", \"SELECT\", \"winner_id\", \"FROM\", \"matches\", \"ORDER\", \"BY\", \"winner_rank_points\", \"DESC\", \"LIMIT\", \"1\", \")\", \"as\", \"T1\", \"JOIN\", \"rankings\", \"as\", \"T2\", \"ON\", \"T1\", \".\", \"winner_id\", \"=\", \"T2\", \".\", \"player_id\", \"JOIN\", \"players\", \"as\", \"T3\", \"ON\", \"T1\", \".\", \"winner_id\", \"=\", \"T3\", \".\", \"player_id\"],\n    \"question\": \"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.\",\n    \"question_toks\": [\"Find\", \"the\", \"first\", \"name\", \",\", \"country\", \"code\", \"and\", \"birth\", \"date\", \"of\", \"the\", \"winner\", \"who\", \"has\", \"the\", \"highest\", \"rank\", \"points\", \"in\", \"all\", \"matches\", \".\"]\n}"}
{"question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"What is the first name, country code, and birth date of the player with the most winner rank points across all matches?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', 'name', ',', 'country', 'code', ',', 'and', 'birth', 'date', 'of', 'the', 'player', 'with', 'the', 'most', 'winner', 'rank', 'points', 'across', 'all', 'matches', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"wta_1\",\n  \"query\": \"SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1) AS T1 ON players.player_id = T1.winner_id\",\n  \"query_toks\": \"['SELECT', 'players', '.', 'first_name', ',', 'players', '.', 'country_code', ',', 'players', '.', 'birth_date', 'FROM', 'players', 'JOIN', '(', 'SELECT', 'winner_id', 'FROM', 'matches', 'ORDER', 'BY', 'winner_rank_points', 'DESC', 'LIMIT', '1', ')', 'AS', 'T1', 'ON', 'players', '.', 'player_id', '=', 'T1', '.', 'winner_id']\",\n  \"query_toks_no_value\": \"['SELECT', 'players', '.', 'first_name', ',', 'players', '.', 'country_code', ',', 'players', '.', 'birth_date', 'FROM', 'players', 'JOIN', '(', 'SELECT', 'winner_id', 'FROM', 'matches', 'ORDER', 'BY', 'winner_rank_points', 'DESC', 'LIMIT', '1', ')', 'AS', 'T1', 'ON', 'players', '.', 'player_id', '=', 'T1', '.', 'winner_id']\",\n  \"question\": \"What is the first name, country code, and birth date of the player with the most winner rank points across all matches?\",\n  \"question_toks\": \"['What', 'is', 'the', 'first', 'name', ',', 'country', 'code', ',', 'and', 'birth', 'date', 'of', 'the', 'player', 'with', 'the', 'most', 'winner', 'rank', 'points', 'across', 'all', 'matches', '?']\"\n}"}
{"question": "Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"Find the number of players for each hand type.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'players', 'for', 'each', 'hand', 'type', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"wta_1\",\n    \"query\": \"SELECT hand, COUNT(*) FROM players GROUP BY hand\",\n    \"query_toks\": [\"SELECT\", \"hand\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"hand\"],\n    \"query_toks_no_value\": [\"SELECT\", \"hand\", \",\", \"COUNT\", \".\", \".\", \".\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"hand\"],\n    \"question\": \"Find the number of players for each hand type.\",\n    \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"players\", \"for\", \"each\", \"hand\", \"type\", \".\"]\n}"}
{"question": "How many players are there for each hand type?", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nplayers: 'player_id', 'first_name', 'last_name', 'hand', 'birth_date', 'country_code'\nmatches: 'best_of', 'draw_size', 'loser_age', 'loser_entry', 'loser_hand', 'loser_ht', 'loser_id', 'loser_ioc', 'loser_name', 'loser_rank', 'loser_rank_points', 'loser_seed', 'match_num', 'minutes', 'round', 'score', 'surface', 'tourney_date', 'tourney_id', 'tourney_level', 'tourney_name', 'winner_age', 'winner_entry', 'winner_hand', 'winner_ht', 'winner_id', 'winner_ioc', 'winner_name', 'winner_rank', 'winner_rank_points', 'winner_seed', 'year'\nrankings: 'ranking_date', 'ranking', 'player_id', 'ranking_points', 'tours'\n\n{\"db_id\": \"wta_1\",\n\"question\": \"How many players are there for each hand type?\",\n\"question_toks\": \"['How', 'many', 'players', 'are', 'there', 'for', 'each', 'hand', 'type', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"wta_1\",\n\"query\": \"SELECT hand, COUNT(*) FROM players GROUP BY hand\",\n\"query_toks\": [\"SELECT\", \"hand\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"hand\"],\n\"query_toks_no_value\": [\"SELECT\", \"hand\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"players\", \"GROUP\", \"BY\", \"hand\"],\n\"question\": \"How many players are there for each hand type?\",\n\"question_toks\": [\"How\", \"many\", \"players\", \"are\", \"there\", \"for\", \"each\", \"hand\", \"type\", \"?\"]\n}"}
{"question": "How many ships ended up being 'Captured'?", "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"How many ships ended up being 'Captured'?\",\n\"question_toks\": \"['How', 'many', 'ships', 'ended', 'up', 'being', \"'Captured\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"battle_death\",\n    \"query\": \"SELECT COUNT(*) FROM ship WHERE disposition_of_ship='Captured'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"ship\", \"WHERE\", \"disposition_of_ship\", \"=\", \"'Captured'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"ship\", \"WHERE\", \"disposition_of_ship\", \"=\"],\n    \"question\": \"How many ships ended up being 'Captured'?\",\n    \"question_toks\": [\"How\", \"many\", \"ships\", \"ended\", \"up\", \"being\", \"'Captured'\", \"?\"]\n}"}
{"question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"List the name and tonnage ordered by in descending alphaetical order for the names.\",\n\"question_toks\": \"['List', 'the', 'name', 'and', 'tonnage', 'ordered', 'by', 'in', 'descending', 'alphaetical', 'order', 'for', 'the', 'names', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"battle_ship_death\",\n\"query\": \"SELECT s.name, s.tonnage FROM ship s, death d WHERE s.id=d.caused_by_ship_id ORDER BY s.name DESC;\",\n\"query_toks\": [\"SELECT\", \"s\", \".\", \"name\", \",\", \"s\", \".\", \"tonnage\", \"FROM\", \"ship\", \"s\", \",\", \"death\", \"d\", \"WHERE\", \"s\", \".\", \"id\", \"=\", \"d\", \".\", \"caused_by_ship_id\", \"ORDER\", \"BY\", \"s\", \".\", \"name\", \"DESC\", \";\"],\n\"query_toks_no_value\": [\"SELECT\", \"s\", \".\", \"name\", \",\", \"s\", \".\", \"tonnage\", \"FROM\", \"ship\", \"s\", \",\", \"death\", \"d\", \"WHERE\", \"s\", \".\", \"id\", \"=\", \"d\", \".\", \"caused_by_ship_id\", \"ORDER\", \"BY\", \"s\", \".\", \"name\", \"DESC\", \";\"],\n\"question\": \"List the name and tonnage ordered by in descending alphabetical order for the names.\",\n\"question_toks\": [\"List\", \"the\", \"name\", \"and\", \"tonnage\", \"ordered\", \"by\", \"in\", \"descending\", \"alphabetical\", \"order\", \"for\", \"the\", \"names\", \".\"]\n}"}
{"question": "List the name, date and result of each battle.", "sql": "SELECT name ,  date FROM battle", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"List the name, date and result of each battle.\",\n\"question_toks\": \"['List', 'the', 'name', ',', 'date', 'and', 'result', 'of', 'each', 'battle', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"battle_death\",\n  \"query\": \"SELECT name, date, result FROM battle;\",\n  \"query_toks\": [\"SELECT\", \"name\", \",\", \"date\", \",\", \"result\", \"FROM\", \"battle\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"name\", \",\", \"date\", \",\", \"result\", \"FROM\", \"battle\", \";\"],\n  \"question\": \"List the name, date and result of each battle.\",\n  \"question_toks\": [\"List\", \"the\", \"name\", \",\", \"date\", \"and\", \"result\", \"of\", \"each\", \"battle\", \".\"]\n}"}
{"question": "What is maximum and minimum death toll caused each time?", "sql": "SELECT max(killed) ,  min(killed) FROM death", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"What is maximum and minimum death toll caused each time?\",\n\"question_toks\": \"['What', 'is', 'maximum', 'and', 'minimum', 'death', 'toll', 'caused', 'each', 'time', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"battle_death\",\n  \"query\": \"SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll FROM death\",\n  \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"killed\", \")\", \"AS\", \"maximum_death_toll\", \",\", \"MIN\", \"(\", \"killed\", \")\", \"AS\", \"minimum_death_toll\", \"FROM\", \"death\"],\n  \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"killed\", \")\", \"AS\", \"_\", \",\", \"MIN\", \"(\", \"killed\", \")\", \"AS\", \"_\", \"FROM\", \"death\"],\n  \"question\": \"What is maximum and minimum death toll caused each time?\",\n  \"question_toks\": [\"What\", \"is\", \"maximum\", \"and\", \"minimum\", \"death\", \"toll\", \"caused\", \"each\", \"time\", \"?\"]\n}"}
{"question": "What is the average number of injuries caused each time?", "sql": "SELECT avg(injured) FROM death", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"What is the average number of injuries caused each time?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'number', 'of', 'injuries', 'caused', 'each', 'time', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"battle_death\",\n    \"query\": \"SELECT AVG(injured) FROM death\",\n    \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"injured\", \")\", \"FROM\", \"death\"],\n    \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"injured\", \")\", \"FROM\", \"death\"],\n    \"question\": \"What is the average number of injuries caused each time?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"average\", \"number\", \"of\", \"injuries\", \"caused\", \"each\", \"time\", \"?\"]\n}"}
{"question": "What are the death and injury situations caused by the ship with tonnage 't'?", "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"What are the death and injury situations caused by the ship with tonnage 't'?\",\n\"question_toks\": \"['What', 'are', 'the', 'death', 'and', 'injury', 'situations', 'caused', 'by', 'the', 'ship', 'with', 'tonnage', \"'t\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"battle_death\",\n    \"query\": \"SELECT d.killed, d.injured FROM death AS d JOIN ship AS s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't'\",\n    \"query_toks\": [\"SELECT\", \"d\", \".\", \"killed\", \",\", \"d\", \".\", \"injured\", \"FROM\", \"death\", \"AS\", \"d\", \"JOIN\", \"ship\", \"AS\", \"s\", \"ON\", \"d\", \".\", \"caused_by_ship_id\", \"=\", \"s\", \".\", \"id\", \"WHERE\", \"s\", \".\", \"tonnage\", \"=\", \"'t'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"d\", \".\", \"killed\", \",\", \"d\", \".\", \"injured\", \"FROM\", \"death\", \"AS\", \"d\", \"JOIN\", \"ship\", \"AS\", \"s\", \"ON\", \"d\", \".\", \"caused_by_ship_id\", \"=\", \"s\", \".\", \"id\", \"WHERE\", \"s\", \".\", \"tonnage\", \"=\", \"\"],\n    \"question\": \"What are the death and injury situations caused by the ship with tonnage 't'?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"death\", \"and\", \"injury\", \"situations\", \"caused\", \"by\", \"the\", \"ship\", \"with\", \"tonnage\", \"'t\", \"'\", \"?\"]\n}"}
{"question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"What are the name and results of the battles when the bulgarian commander is not 'Boril'\",\n\"question_toks\": \"['What', 'are', 'the', 'name', 'and', 'results', 'of', 'the', 'battles', 'when', 'the', 'bulgarian', 'commander', 'is', 'not', \"'Boril\", \"'\"]}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n   \"db_id\": \"battle_death\",\n   \"query\": \"SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'\",\n   \"query_toks\": [\"SELECT\", \"name\", \",\", \"result\", \"FROM\", \"battle\", \"WHERE\", \"bulgarian_commander\", \"!=\", \"'Boril'\"],\n   \"query_toks_no_value\": [\"SELECT\", \"name\", \",\", \"result\", \"FROM\", \"battle\", \"WHERE\", \"bulgarian_commander\", \"!=\", \"??\"],\n   \"question\": \"What are the name and results of the battles when the bulgarian commander is not 'Boril'\",\n   \"question_toks\": [\"What\", \"are\", \"the\", \"name\", \"and\", \"results\", \"of\", \"the\", \"battles\", \"when\", \"the\", \"bulgarian\", \"commander\", \"is\", \"not\", \"'Boril\", \"'\"]\n}"}
{"question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"What are the different ids and names of the battles that lost any 'Brig' type shipes?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'ids', 'and', 'names', 'of', 'the', 'battles', 'that', 'lost', 'any', \"'Brig\", \"'\", 'type', 'shipes', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"battle_death\",\n  \"query\": \"SELECT DISTINCT B.id, B.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle WHERE S.ship_type = 'Brig';\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"B.\", \"id\", \",\", \"B.\", \"name\", \"FROM\", \"battle\", \"AS\", \"B\", \"JOIN\", \"ship\", \"AS\", \"S\", \"ON\", \"B.\", \"id\", \"=\", \"S.\", \"lost_in_battle\", \"WHERE\", \"S.\", \"ship_type\", \"=\", \"'\", \"Brig\", \"'\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"B.\", \"id\", \",\", \"B.\", \"name\", \"FROM\", \"battle\", \"AS\", \"B\", \"JOIN\", \"ship\", \"AS\", \"S\", \"ON\", \"B.\", \"id\", \"=\", \"S.\", \"lost_in_battle\", \"WHERE\", \"S.\", \"ship_type\", \"=\", \"'\", \"Brig\", \"'\", \";\"],\n  \"question\": \"What are the different ids and names of the battles that lost any 'Brig' type ships?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"different\", \"ids\", \"and\", \"names\", \"of\", \"the\", \"battles\", \"that\", \"lost\", \"any\", \"'Brig'\", \"type\", \"ships\", \"?\"]\n}"}
{"question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"What are the ids and names of the battles that led to more than 10 people killed in total.\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'names', 'of', 'the', 'battles', 'that', 'led', 'to', 'more', 'than', '10', 'people', 'killed', 'in', 'total', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"battle_death\",\n\"query\": \"SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10);\",\n\"query_toks\": \"['SELECT', 'id', ',', 'name', 'FROM', 'battle', 'WHERE', 'id', 'IN', '(', 'SELECT', 'caused_by_ship_id', 'FROM', 'death', 'GROUP', 'BY', 'caused_by_ship_id', 'HAVING', 'SUM', '(', 'killed', ')', '>', '10', ')', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'id', ',', 'name', 'FROM', 'battle', 'WHERE', 'id', 'IN', '(', 'SELECT', 'caused_by_ship_id', 'FROM', 'death', 'GROUP', 'BY', 'caused_by_ship_id', 'HAVING', 'SUM', '(', 'killed', ')', '>', '?', ')', ';']\",\n\"question\": \"What are the ids and names of the battles that led to more than 10 people killed in total.\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'and', 'names', 'of', 'the', 'battles', 'that', 'led', 'to', 'more', 'than', '10', 'people', 'killed', 'in', 'total', '.']}\""}
{"question": "What is the ship id and name that caused most total injuries?", "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"What is the ship id and name that caused most total injuries?\",\n\"question_toks\": \"['What', 'is', 'the', 'ship', 'id', 'and', 'name', 'that', 'caused', 'most', 'total', 'injuries', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"battle_death\",\n    \"query\": \"SELECT caused_by_ship_id AS id, name FROM ship WHERE id=(SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id ORDER BY SUM(injured) DESC LIMIT 1)\",\n    \"query_toks\": \"['SELECT', 'caused_by_ship_id', 'AS', 'id', ',', 'name', 'FROM', 'ship', 'WHERE', 'id', '=', '(SELECT', 'caused_by_ship_id', 'FROM', 'death', 'GROUP', 'BY', 'caused_by_ship_id', 'ORDER', 'BY', 'SUM', '(', 'injured', ')', 'DESC', 'LIMIT', '1', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'caused_by_ship_id', 'AS', 'id', ',', 'name', 'FROM', 'ship', 'WHERE', 'id', '=', '(SELECT', 'caused_by_ship_id', 'FROM', 'death', 'GROUP', 'BY', 'caused_by_ship_id', 'ORDER', 'BY', 'SUM', '(', 'injured', ')', 'DESC', 'LIMIT', '1', ')']\",\n    \"question\": \"What is the ship id and name that caused most total injuries?\",\n    \"question_toks\": \"['What', 'is', 'the', 'ship', 'id', 'and', 'name', 'that', 'caused', 'most', 'total', 'injuries', '?']\"\n}"}
{"question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?\",\n\"question_toks\": \"['What', 'are', 'the', 'distinct', 'battle', 'names', 'which', 'are', 'between', 'bulgarian', 'commander', \"'Kaloyan\", \"'\", 'and', 'latin', 'commander', \"'Baldwin\", 'I', \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"battle_death\",\n  \"query\": \"SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I'\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"b\", \".\", \"name\", \"FROM\", \"battle\", \"AS\", \"b\", \"WHERE\", \"b\", \".\", \"bulgarian_commander\", \"=\", \"'Kaloyan'\", \"AND\", \"b\", \".\", \"latin_commander\", \"=\", \"'Baldwin I'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"b\", \".\", \"name\", \"FROM\", \"battle\", \"AS\", \"b\", \"WHERE\", \"b\", \".\", \"bulgarian_commander\", \"=\", \"?\", \"AND\", \"b\", \".\", \"latin_commander\", \"=\", \"?\"],\n  \"question\": \"What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"distinct\", \"battle\", \"names\", \"which\", \"are\", \"between\", \"bulgarian\", \"commander\", \"'Kaloyan'\", \"and\", \"latin\", \"commander\", \"'Baldwin\", \"I\", \"'?\"]\n}"}
{"question": "How many different results are there for the battles?", "sql": "SELECT count(DISTINCT RESULT) FROM battle", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"How many different results are there for the battles?\",\n\"question_toks\": \"['How', 'many', 'different', 'results', 'are', 'there', 'for', 'the', 'battles', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"spider\",\n  \"query\": \"SELECT COUNT(DISTINCT result) FROM battle\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"result\", \")\", \"FROM\", \"battle\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"result\", \")\", \"FROM\", \"battle\"],\n  \"question\": \"How many different results are there for the battles?\",\n  \"question_toks\": [\"How\", \"many\", \"different\", \"results\", \"are\", \"there\", \"for\", \"the\", \"battles\", \"?\"]\n}"}
{"question": "How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"How many battles did not lose any ship with tonnage '225'?\",\n\"question_toks\": \"['How', 'many', 'battles', 'did', 'not', 'lose', 'any', 'ship', 'with', 'tonnage', \"'225\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"battle_death\",\n    \"query\": \"SELECT COUNT(*) FROM battle b LEFT JOIN (SELECT * FROM ship WHERE tonnage='225') AS s ON b.id = s.id WHERE s.id IS NULL\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"battle\", \"b\", \"LEFT\", \"JOIN\", \"(\", \"SELECT\", \"*\", \"FROM\", \"ship\", \"WHERE\", \"tonnage\", \"=\", \"'225'\", \")\", \"AS\", \"s\", \"ON\", \"b\", \".\", \"id\", \"=\", \"s\", \".\", \"id\", \"WHERE\", \"s\", \".\", \"id\", \"IS\", \"NULL\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"battle\", \"b\", \"LEFT\", \"JOIN\", \"(\", \"SELECT\", \"*\", \"FROM\", \"ship\", \"WHERE\", \"tonnage\", \"=\", \"?\", \")\", \"AS\", \"s\", \"ON\", \"b\", \".\", \"id\", \"=\", \"s\", \".\", \"id\", \"WHERE\", \"s\", \".\", \"id\", \"IS\", \"NULL\"],\n    \"question\": \"How many battles did not lose any ship with tonnage '225'?\",\n    \"question_toks\": [\"How\", \"many\", \"battles\", \"did\", \"not\", \"lose\", \"any\", \"ship\", \"with\", \"tonnage\", \"'225'\", \"?\"],\n}"}
{"question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'\",\n\"question_toks\": \"['List', 'the', 'name', 'and', 'date', 'the', 'battle', 'that', 'has', 'lost', 'the', 'ship', 'named', \"'Lettice\", \"'\", 'and', 'the', 'ship', 'named', \"'HMS\", 'Atalanta', \"'\"]}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"battle_death\",\n  \"query\": \"SELECT b.name, b.date FROM battle as b JOIN ship as s ON b.id = s.lost_in_battle WHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta'\",\n  \"query_toks\": [\"SELECT\", \"b.name\", \",\", \"b.date\", \"FROM\", \"battle\", \"AS\", \"b\", \"JOIN\", \"ship\", \"AS\", \"s\", \"ON\", \"b.id\", \"=\", \"s.lost_in_battle\", \"WHERE\", \"s.name\", \"=\", \"'Lettice'\", \"OR\", \"s.name\", \"=\", \"'HMS\", \"Atalanta'\", \"\"],\n  \"query_toks_no_value\": [\"SELECT\", \"b.name\", \",\", \"b.date\", \"FROM\", \"battle\", \"AS\", \"b\", \"JOIN\", \"ship\", \"AS\", \"s\", \"ON\", \"b.id\", \"=\", \"s.lost_in_battle\", \"WHERE\", \"s.name\", \"=\", \"\", \"OR\", \"s.name\", \"=\", \"\", \"\"],\n  \"question\": \"List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'\",\n  \"question_toks\": [\"List\", \"the\", \"name\", \"and\", \"date\", \"the\", \"battle\", \"that\", \"has\", \"lost\", \"the\", \"ship\", \"named\", \"'Lettice'\", \"and\", \"the\", \"ship\", \"named\", \"'HMS\", \"Atalanta'\"]\n}"}
{"question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.\",\n\"question_toks\": \"['Show', 'names', ',', 'results', 'and', 'bulgarian', 'commanders', 'of', 'the', 'battles', 'with', 'no', 'ships', 'lost', 'in', 'the', \"'English\", 'Channel', \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"battle_death\",\n  \"query\": \"SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')\",\n  \"query_toks\": [\"SELECT\", \"name\", \",\", \"result\", \",\", \"bulgarian_commander\", \"FROM\", \"battle\", \"WHERE\", \"id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"lost_in_battle\", \"FROM\", \"ship\", \"WHERE\", \"location\", \"=\", \"'English\", \"Channel'\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"name\", \",\", \"result\", \",\", \"bulgarian_commander\", \"FROM\", \"battle\", \"WHERE\", \"id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"lost_in_battle\", \"FROM\", \"ship\", \"WHERE\", \"location\", \"=\", \"?\", \")\", \";\"],\n  \"question\": \"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.\",\n  \"question_toks\": [\"Show\", \"names\", \",\", \"results\", \"and\", \"bulgarian\", \"commanders\", \"of\", \"the\", \"battles\", \"with\", \"no\", \"ships\", \"lost\", \"in\", \"the\", \"'English\", \"Channel\", \"'\", \".\"]\n}"}
{"question": "What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nbattle: 'id', 'name', 'date', 'bulgarian_commander', 'latin_commander', 'result'\nship: 'lost_in_battle', 'id', 'name', 'tonnage', 'ship_type', 'location', 'disposition_of_ship'\ndeath: 'caused_by_ship_id', 'id', 'note', 'killed', 'injured'\n\n{\"db_id\": \"battle_death\",\n\"question\": \"What are the notes of the death events which has substring 'East'?\",\n\"question_toks\": \"['What', 'are', 'the', 'notes', 'of', 'the', 'death', 'events', 'which', 'has', 'substring', \"'East\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"battle_death\",\n  \"query\": \"SELECT note FROM death WHERE note LIKE '%East%'\",\n  \"query_toks\": [\"SELECT\", \"note\", \"FROM\", \"death\", \"WHERE\", \"note\", \"LIKE\", \"'%\", \"East\", \"%'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"note\", \"FROM\", \"death\", \"WHERE\", \"note\", \"LIKE\", \"'%\", \"value\", \"%'\"],\n  \"question\": \"What are the notes of the death events which has substring 'East'?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"notes\", \"of\", \"the\", \"death\", \"events\", \"which\", \"has\", \"substring\", \"'East\", \"'\", \"?\"]\n}"}
{"question": "what are all the addresses including line 1 and line 2?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"what are all the addresses including line 1 and line 2?\",\n\"question_toks\": \"['what', 'are', 'all', 'the', 'addresses', 'including', 'line', '1', 'and', 'line', '2', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT line_1, line_2 FROM Addresses\",\n    \"query_toks\": [\"SELECT\", \"line_1\", \",\", \"line_2\", \"FROM\", \"Addresses\"],\n    \"query_toks_no_value\": [\"SELECT\", \"line_1\", \",\", \"line_2\", \"FROM\", \"Addresses\"],\n    \"question\": \"what are all the addresses including line 1 and line 2?\",\n    \"question_toks\": [\"what\", \"are\", \"all\", \"the\", \"addresses\", \"including\", \"line\", \"1\", \"and\", \"line\", \"2\", \"?\"]\n}"}
{"question": "What is the first and second line for all addresses?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the first and second line for all addresses?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', 'and', 'second', 'line', 'for', 'all', 'addresses', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT line_1, line_2 FROM Addresses\",\n  \"query_toks\": [\"SELECT\", \"line_1\", \",\", \"line_2\", \"FROM\", \"Addresses\"],\n  \"query_toks_no_value\": [\"SELECT\", \"line_1\", \",\", \"line_2\", \"FROM\", \"Addresses\"],\n  \"question\": \"What is the first and second line for all addresses?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"first\", \"and\", \"second\", \"line\", \"for\", \"all\", \"addresses\", \"?\"]\n}"}
{"question": "How many courses in total are listed?", "sql": "SELECT count(*) FROM Courses", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many courses in total are listed?\",\n\"question_toks\": \"['How', 'many', 'courses', 'in', 'total', 'are', 'listed', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT COUNT(*)\\nFROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id\\n    JOIN Sections AS T3 ON T1.section_id = T3.section_id\\n    JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id\\n    JOIN Semesters AS T5 ON T4.semester_id = T5.semester_id\\n    JOIN Students AS T6 ON T4.student_id = T6.student_id\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Sections\", \"AS\", \"T1\", \"JOIN\", \"Courses\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"course_id\", \"=\", \"T2\", \".\", \"course_id\", \"JOIN\", \"Sections\", \"AS\", \"T3\", \"ON\", \"T1\", \".\", \"section_id\", \"=\", \"T3\", \".\", \"section_id\", \"JOIN\", \"Student_Enrolment_Courses\", \"AS\", \"T4\", \"ON\", \"T1\", \".\", \"course_id\", \"=\", \"T4\", \".\", \"course_id\", \"JOIN\", \"Semesters\", \"AS\", \"T5\", \"ON\", \"T4\", \".\", \"semester_id\", \"=\", \"T5\", \".\", \"semester_id\", \"JOIN\", \"Students\", \"AS\", \"T6\", \"ON\", \"T4\", \".\", \"student_id\", \"=\", \"T6\", \".\", \"student_id\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Sections\", \"AS\", \"T1\", \"JOIN\", \"Courses\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"course_id\", \"=\", \"T2\", \".\", \"course_id\", \"JOIN\", \"Sections\", \"AS\", \"T3\", \"ON\", \"T1\", \".\", \"section_id\", \"=\", \"T3\", \".\", \"section_id\", \"JOIN\", \"Student_Enrolment_Courses\", \"AS\", \"T4\", \"ON\", \"T1\", \".\", \"course_id\", \"=\", \"T4\", \".\", \"course_id\", \"JOIN\", \"Semesters\", \"AS\", \"T5\", \"ON\", \"T4\", \".\", \"semester_id\", \"=\", \"T5\", \".\", \"semester_id\", \"JOIN\", \"Students\", \"AS\", \"T6\", \"ON\", \"T4\", \".\", \"student_id\", \"=\", \"T6\", \".\", \"student_id\"],\n    \"question\": \"How many courses in total are listed?\",\n    \"question_toks\": [\"How\", \"many\", \"courses\", \"in\", \"total\", \"are\", \"listed\", \"?\"]\n}"}
{"question": "How many courses are there?", "sql": "SELECT count(*) FROM Courses", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many courses are there?\",\n\"question_toks\": \"['How', 'many', 'courses', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT COUNT(*) FROM Courses\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Courses\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Courses\"],\n    \"question\": \"How many courses are there?\",\n    \"question_toks\": [\"How\", \"many\", \"courses\", \"are\", \"there\", \"?\"]\n}"}
{"question": "How is the math course described?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How is the math course described?\",\n\"question_toks\": \"['How', 'is', 'the', 'math', 'course', 'described', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT course_description FROM Courses WHERE course_name = 'Math';\",\n    \"query_toks\": \"['SELECT', 'course_description', 'FROM', 'Courses', 'WHERE', 'course_name', '=', ''Math'', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'course_description', 'FROM', 'Courses', 'WHERE', 'course_name', '=', '', ';']\",\n    \"question\": \"How is the math course described?\",\n    \"question_toks\": \"['How', 'is', 'the', 'math', 'course', 'described', '?']\"\n}"}
{"question": "What are the descriptions for all the math courses?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the descriptions for all the math courses?\",\n\"question_toks\": \"['What', 'are', 'the', 'descriptions', 'for', 'all', 'the', 'math', 'courses', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT course_description FROM Courses T1 WHERE T1.course_name LIKE '%math%';\",\n  \"query_toks\": [\"SELECT\", \"course_description\", \"FROM\", \"Courses\", \"T1\", \"WHERE\", \"T1\", \".\", \"course_name\", \"LIKE\", \"'\", \"%\", \"math\", \"%\", \"'\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"course_description\", \"FROM\", \"Courses\", \"T1\", \"WHERE\", \"T1\", \".\", \"course_name\", \"LIKE\", \"'math'\", \";\"],\n  \"question\": \"What are the descriptions for all the math courses?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"descriptions\", \"for\", \"all\", \"the\", \"math\", \"courses\", \"?\"]\n}"}
{"question": "What is the zip code of the address in the city Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the zip code of the address in the city Port Chelsea?\",\n\"question_toks\": \"['What', 'is', 'the', 'zip', 'code', 'of', 'the', 'address', 'in', 'the', 'city', 'Port', 'Chelsea', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT zip_postcode FROM Addresses AS T1 WHERE T1.city='Port Chelsea'\",\n    \"query_toks\": [\"SELECT\", \"zip_postcode\", \"FROM\", \"Addresses\", \"AS\", \"T1\", \"WHERE\", \"T1\", \".\", \"city\", \"=\", \"'Port\", \"Chelsea'\", \"\"],\n    \"query_toks_no_value\": [\"SELECT\", \"zip_postcode\", \"FROM\", \"Addresses\", \"AS\", \"T1\", \"WHERE\", \"T1\", \".\", \"city\", \"=\", \"\", \"\"],\n    \"question\": \"What is the zip code of the address in the city Port Chelsea?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"zip\", \"code\", \"of\", \"the\", \"address\", \"in\", \"the\", \"city\", \"Port\", \"Chelsea\", \"?\"]\n}"}
{"question": "What is the zip code for Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the zip code for Port Chelsea?\",\n\"question_toks\": \"['What', 'is', 'the', 'zip', 'code', 'for', 'Port', 'Chelsea', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT zip_postcode FROM Addresses WHERE city='Port Chelsea'\",\n    \"query_toks\": [\"SELECT\", \"zip_postcode\", \"FROM\", \"Addresses\", \"WHERE\", \"city\", \"=\", \"'Port Chelsea'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"zip_postcode\", \"FROM\", \"Addresses\", \"WHERE\", \"city\", \"=\"],\n    \"question\": \"What is the zip code for Port Chelsea?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"zip\", \"code\", \"for\", \"Port\", \"Chelsea\", \"?\"]\n}"}
{"question": "Which department offers the most number of degrees? List department name and id.", "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Which department offers the most number of degrees? List department name and id.\",\n\"question_toks\": \"['Which', 'department', 'offers', 'the', 'most', 'number', 'of', 'degrees', '?', 'List', 'department', 'name', 'and', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT D.department_id, D.department_name FROM Degree_Programs AS DP, Departments AS D WHERE DP.department_id = D.department_id GROUP BY D.department_id ORDER BY COUNT(DP.degree_program_id) DESC LIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"D\", \".\", \"department_id\", \",\", \"D\", \".\", \"department_name\", \"FROM\", \"Degree_Programs\", \"AS\", \"DP\", \",\", \"Departments\", \"AS\", \"D\", \"WHERE\", \"DP\", \".\", \"department_id\", \"=\", \"D\", \".\", \"department_id\", \"GROUP\", \"BY\", \"D\", \".\", \"department_id\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"DP\", \".\", \"degree_program_id\", \")\", \"DESC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"D\", \".\", \"department_id\", \",\", \"D\", \".\", \"department_name\", \"FROM\", \"Degree_Programs\", \"AS\", \"DP\", \",\", \"Departments\", \"AS\", \"D\", \"WHERE\", \"DP\", \".\", \"department_id\", \"=\", \"D\", \".\", \"department_id\", \"GROUP\", \"BY\", \"D\", \".\", \"department_id\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"DP\", \".\", \"degree_program_id\", \")\", \"DESC\", \"LIMIT\", \"1\"],\n  \"question\": \"Which department offers the most number of degrees? List department name and id.\",\n  \"question_toks\": [\"Which\", \"department\", \"offers\", \"the\", \"most\", \"number\", \"of\", \"degrees\", \"?\", \"List\", \"department\", \"name\", \"and\", \"id\", \".\"]\n}"}
{"question": "What is the name and id of the department with the most number of degrees ?", "sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the name and id of the department with the most number of degrees ?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'id', 'of', 'the', 'department', 'with', 'the', 'most', 'number', 'of', 'degrees', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT T3.department_id, T3.department_name FROM Degree_Programs T1 INNER JOIN Departments T3 ON T1.department_id = T3.department_id GROUP BY T1.department_id ORDER BY COUNT(T1.degree_program_id) DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'T3', '.', 'department_id', ',', 'T3', '.', 'department_name', 'FROM', 'Degree_Programs', 'T1', 'INNER', 'JOIN', 'Departments', 'T3', 'ON', 'T1', '.', 'department_id', '=', 'T3', '.', 'department_id', 'GROUP', 'BY', 'T1', '.', 'department_id', 'ORDER', 'BY', 'COUNT', '(', 'T1', '.', 'degree_program_id', ')', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'T3', '.', 'department_id', ',', 'T3', '.', 'department_name', 'FROM', 'Degree_Programs', 'T1', 'INNER', 'JOIN', 'Departments', 'T3', 'ON', 'T1', '.', 'department_id', '=', 'T3', '.', 'department_id', 'GROUP', 'BY', 'T1', '.', 'department_id', 'ORDER', 'BY', 'COUNT', '(', 'T1', '.', 'degree_program_id', ')', 'DESC', 'LIMIT', '1']\",\n    \"question\": \"What is the name and id of the department with the most number of degrees ?\",\n    \"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'id', 'of', 'the', 'department', 'with', 'the', 'most', 'number', 'of', 'degrees', '?']\"\n}"}
{"question": "How many departments offer any degree?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many departments offer any degree?\",\n\"question_toks\": \"['How', 'many', 'departments', 'offer', 'any', 'degree', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"student_transcripts_tracking\",\n \"query\": \"SELECT COUNT(DISTINCT department_id) FROM Degree_Programs\",\n \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"department_id\", \")\", \"FROM\", \"Degree_Programs\"],\n \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"department_id\", \")\", \"FROM\", \"Degree_Programs\"],\n \"question\": \"How many departments offer any degree?\",\n \"question_toks\": [\"How\", \"many\", \"departments\", \"offer\", \"any\", \"degree\", \"?\"]\n}"}
{"question": "How many different departments offer degrees?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many different departments offer degrees?\",\n\"question_toks\": \"['How', 'many', 'different', 'departments', 'offer', 'degrees', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT COUNT(DISTINCT department_id) FROM Degree_Programs\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"department_id\", \")\", \"FROM\", \"Degree_Programs\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"department_id\", \")\", \"FROM\", \"Degree_Programs\"],\n  \"question\": \"How many different departments offer degrees?\",\n  \"question_toks\": [\"How\", \"many\", \"different\", \"departments\", \"offer\", \"degrees\", \"?\"]\n}"}
{"question": "How many different degree names are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many different degree names are offered?\",\n\"question_toks\": \"['How', 'many', 'different', 'degree', 'names', 'are', 'offered', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"degree_summary_name\", \")\", \"FROM\", \"Degree_Programs\", \";\" ],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"degree_summary_name\", \")\", \"FROM\", \"Degree_Programs\", \";\" ],\n    \"question\": \"How many different degree names are offered?\",\n    \"question_toks\": [\"How\", \"many\", \"different\", \"degree\", \"names\", \"are\", \"offered\", \"?\"]\n}"}
{"question": "How many different degrees are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many different degrees are offered?\",\n\"question_toks\": \"['How', 'many', 'different', 'degrees', 'are', 'offered', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT COUNT(*) FROM Degree_Programs\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Degree_Programs\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Degree_Programs\"],\n  \"question\": \"How many different degrees are offered?\",\n  \"question_toks\": [\"How\", \"many\", \"different\", \"degrees\", \"are\", \"offered\", \"?\"]\n}"}
{"question": "How many degrees does the engineering department offer?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many degrees does the engineering department offer?\",\n\"question_toks\": \"['How', 'many', 'degrees', 'does', 'the', 'engineering', 'department', 'offer', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT COUNT(*) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineering'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Degree_Programs\", \"AS\", \"T1\", \"JOIN\", \"Departments\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"department_id\", \"=\", \"T2\", \".\", \"department_id\", \"WHERE\", \"T2\", \".\", \"department_name\", \"=\", \"'engineering'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Degree_Programs\", \"AS\", \"T1\", \"JOIN\", \"Departments\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"department_id\", \"=\", \"T2\", \".\", \"department_id\", \"WHERE\", \"T2\", \".\", \"department_name\", \"=\", \"?\"],\n  \"question\": \"How many degrees does the engineering department offer?\",\n  \"question_toks\": [\"How\", \"many\", \"degrees\", \"does\", \"the\", \"engineering\", \"department\", \"offer\", \"?\"]\n}"}
{"question": "How many degrees does the engineering department have?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many degrees does the engineering department have?\",\n\"question_toks\": \"['How', 'many', 'degrees', 'does', 'the', 'engineering', 'department', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', 'degree_program_id', ')', 'FROM', 'Degree_Programs', 'WHERE', 'department_id', '=', '(', 'SELECT', 'department_id', 'FROM', 'Departments', 'WHERE', 'department_name', '=', ''engineering''', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'degree_program_id', ')', 'FROM', 'Degree_Programs', 'WHERE', 'department_id', '=', '(', 'SELECT', 'department_id', 'FROM', 'Departments', 'WHERE', 'department_name', '=', '', ')']\",\n\"question\": \"How many degrees does the engineering department have?\",\n\"question_toks\": \"['How', 'many', 'degrees', 'does', 'the', 'engineering', 'department', 'have', '?']\"\n}"}
{"question": "What are the names and descriptions of all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the names and descriptions of all the sections?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'descriptions', 'of', 'all', 'the', 'sections', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT section_name, section_description FROM Sections\",\n  \"query_toks\": [\"SELECT\", \"section_name\", \",\", \"section_description\", \"FROM\", \"Sections\"],\n  \"query_toks_no_value\": [\"SELECT\", \"section_name\", \",\", \"section_description\", \"FROM\", \"Sections\"],\n  \"question\": \"What are the names and descriptions of all the sections?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"and\", \"descriptions\", \"of\", \"all\", \"the\", \"sections\", \"?\"]\n}"}
{"question": "What are the names and descriptions for all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the names and descriptions for all the sections?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'descriptions', 'for', 'all', 'the', 'sections', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT section_name, section_description FROM Sections\",\n\"query_toks\": [\"SELECT\", \"section_name\", \",\", \"section_description\", \"FROM\", \"Sections\"],\n\"query_toks_no_value\": [\"SELECT\", \"section_name\", \",\", \"section_description\", \"FROM\", \"Sections\"],\n\"question\": \"What are the names and descriptions for all the sections?\",\n\"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"and\", \"descriptions\", \"for\", \"all\", \"the\", \"sections\", \"?\"]\n}"}
{"question": "What are the names and id of courses having at most 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the names and id of courses having at most 2 sections?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'id', 'of', 'courses', 'having', 'at', 'most', '2', 'sections', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT T1.course_name, T1.course_id FROM Courses T1 JOIN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) <= 2) T2 ON T1.course_id = T2.course_id;\",\n    \"query_toks\": [\"SELECT\", \"T1\", \".\", \"course_name\", \",\", \"T1\", \".\", \"course_id\", \"FROM\", \"Courses\", \"T1\", \"JOIN\", \"(\", \"SELECT\", \"course_id\", \"FROM\", \"Sections\", \"GROUP\", \"BY\", \"course_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \"<=\", \"2\", \")\", \"T2\", \"ON\", \"T1\", \".\", \"course_id\", \"=\", \"T2\", \".\", \"course_id\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T1\", \".\", \"course_name\", \",\", \"T1\", \".\", \"course_id\", \"FROM\", \"Courses\", \"T1\", \"JOIN\", \"(\", \"SELECT\", \"course_id\", \"FROM\", \"Sections\", \"GROUP\", \"BY\", \"course_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \"<=\", \"?\", \")\", \"T2\", \"ON\", \"T1\", \".\", \"course_id\", \"=\", \"T2\", \".\", \"course_id\", \";\"],\n    \"question\": \"What are the names and id of courses having at most 2 sections?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"and\", \"id\", \"of\", \"courses\", \"having\", \"at\", \"most\", \"2\", \"sections\", \"?\"]\n}"}
{"question": "What are the names and ids of every course with less than 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the names and ids of every course with less than 2 sections?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'ids', 'of', 'every', 'course', 'with', 'less', 'than', '2', 'sections', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT course_id, course_name FROM Courses AS T1 WHERE course_id NOT IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) > 1);\",\n    \"query_toks\": [\"SELECT\", \"course_id\", \",\", \"course_name\", \"FROM\", \"Courses\", \"AS\", \"T1\", \"WHERE\", \"course_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"course_id\", \"FROM\", \"Sections\", \"GROUP\", \"BY\", \"course_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">\", \"1\", \")\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"course_id\", \",\", \"course_name\", \"FROM\", \"Courses\", \"AS\", \"T1\", \"WHERE\", \"course_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"course_id\", \"FROM\", \"Sections\", \"GROUP\", \"BY\", \"course_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">\", \"1\", \")\", \";\"],\n    \"question\": \"What are the names and ids of every course with less than 2 sections?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"and\", \"ids\", \"of\", \"every\", \"course\", \"with\", \"less\", \"than\", \"2\", \"sections\", \"?\"]\n}"}
{"question": "List the section_name in reversed lexicographical order.", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"List the section_name in reversed lexicographical order.\",\n\"question_toks\": \"['List', 'the', 'section_name', 'in', 'reversed', 'lexicographical', 'order', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT section_name FROM Sections ORDER BY section_name DESC\",\n\"query_toks\": [\"SELECT\", \"section_name\", \"FROM\", \"Sections\", \"ORDER\", \"BY\", \"section_name\", \"DESC\"],\n\"query_toks_no_value\": [\"SELECT\", \"section_name\", \"FROM\", \"Sections\", \"ORDER\", \"BY\", \"section_name\", \"DESC\"],\n\"question\": \"List the section_name in reversed lexicographical order.\",\n\"question_toks\": [\"List\", \"the\", \"section_name\", \"in\", \"reversed\", \"lexicographical\", \"order\", \".\"]}"}
{"question": "What are the names of the sections in reverse alphabetical order?", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the names of the sections in reverse alphabetical order?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'sections', 'in', 'reverse', 'alphabetical', 'order', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT section_name FROM Sections ORDER BY section_name DESC\",\n\"query_toks\": \"['SELECT', 'section_name', 'FROM', 'Sections', 'ORDER', 'BY', 'section_name', 'DESC']\",\n\"query_toks_no_value\": \"['SELECT', 'section_name', 'FROM', 'Sections', 'ORDER', 'BY', 'section_name', 'DESC']\",\n\"question\": \"What are the names of the sections in reverse alphabetical order?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'sections', 'in', 'reverse', 'alphabetical', 'order', '?']}\""}
{"question": "What is the semester which most student registered in? Show both the name and the id.", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the semester which most student registered in? Show both the name and the id.\",\n\"question_toks\": \"['What', 'is', 'the', 'semester', 'which', 'most', 'student', 'registered', 'in', '?', 'Show', 'both', 'the', 'name', 'and', 'the', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"student_transcripts_tracking\",\n \"query\": \"SELECT Semester.semester_id, Semester.semester_name\\nFROM Semester\\nJOIN Student_Enrolment\\nON Semester.semester_id = Student_Enrolment.semester_id\\nGROUP BY Semester.semester_id\\nORDER BY COUNT(Student_Enrolment.student_id) DESC\\nLIMIT 1\",\n \"query_toks\": \"['SELECT', 'Semester.semester_id', ',', 'Semester.semester_name', 'FROM', 'Semester', 'JOIN', 'Student_Enrolment', 'ON', 'Semester.semester_id', '=', 'Student_Enrolment.semester_id', 'GROUP', 'BY', 'Semester.semester_id', 'ORDER', 'BY', 'COUNT', '(', 'Student_Enrolment.student_id', ')', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Semester.semester_id', ',', 'Semester.semester_name', 'FROM', 'Semester', 'JOIN', 'Student_Enrolment', 'ON', 'Semester.semester_id', '=', 'Student_Enrolment.semester_id', 'GROUP', 'BY', 'Semester.semester_id', 'ORDER', 'BY', 'COUNT', '(', 'Student_Enrolment.student_id', ')', 'DESC', 'LIMIT', '1']\",\n \"question\": \"What is the semester which most student registered in? Show both the name and the id.\",\n \"question_toks\": \"['What', 'is', 'the', 'semester', 'which', 'most', 'student', 'registered', 'in', '?', 'Show', 'both', 'the', 'name', 'and', 'the', 'id', '.']\"}"}
{"question": "For each semester, what is the name and id of the one with the most students registered?", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"For each semester, what is the name and id of the one with the most students registered?\",\n\"question_toks\": \"['For', 'each', 'semester', ',', 'what', 'is', 'the', 'name', 'and', 'id', 'of', 'the', 'one', 'with', 'the', 'most', 'students', 'registered', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT T6.semester_name, T6.semester_id\\nFROM Student_Enrolment T5, Semesters T6\\nWHERE T5.semester_id=T6.semester_id\\nGROUP BY T5.semester_id\\nHAVING COUNT(*) = (SELECT MAX(num_students)\\n                   FROM (SELECT semester_id, COUNT(*) as num_students\\n                         FROM Student_Enrolment\\n                         GROUP BY semester_id) T4)\",\n    \"query_toks\": \"['SELECT', 'T6', '.', 'semester_name', ',', 'T6', '.', 'semester_id', 'FROM', 'Student_Enrolment', 'T5', ',', 'Semesters', 'T6', 'WHERE', 'T5', '.', 'semester_id', '=', 'T6', '.', 'semester_id', 'GROUP', 'BY', 'T5', '.', 'semester_id', 'HAVING', 'COUNT', '(', '*', ')', '=', '(', 'SELECT', 'MAX', '(', 'num_students', ')', 'FROM', '(', 'SELECT', 'semester_id', ',', 'COUNT', '(', '*', ')', 'as', 'num_students', 'FROM', 'Student_Enrolment', 'GROUP', 'BY', 'semester_id', ')', 'T4', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'T6', '.', 'semester_name', ',', 'T6', '.', 'semester_id', 'FROM', 'Student_Enrolment', 'T5', ',', 'Semesters', 'T6', 'WHERE', 'T5', '.', 'semester_id', '=', 'T6', '.', 'semester_id', 'GROUP', 'BY', 'T5', '.', 'semester_id', 'HAVING', 'COUNT', '(', '*', ')', '=', '(', 'SELECT', 'MAX', '(', 'num_students', ')', 'FROM', '(', 'SELECT', 'semester_id', ',', 'COUNT', '(', '*', ')', 'as', 'num_students', 'FROM', 'Student_Enrolment', 'GROUP', 'BY', 'semester_id', ')', 'T4', ')']\",\n    \"question\": \"For each semester, what is the name and id of the one with the most students registered?\",\n    \"question_toks\": \"['For', 'each', 'semester', ',', 'what', 'is', 'the', 'name', 'and', 'id', 'of', 'the', 'one', 'with', 'the', 'most', 'students', 'registered', '?']\"\n}"}
{"question": "What is the description of the department whose name has the substring the computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the description of the department whose name has the substring the computer?\",\n\"question_toks\": \"['What', 'is', 'the', 'description', 'of', 'the', 'department', 'whose', 'name', 'has', 'the', 'substring', 'the', 'computer', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT department_description FROM Departments T1 WHERE T1.department_name LIKE '%computer%'\",\n    \"query_toks\": [\"SELECT\", \"department_description\", \"FROM\", \"Departments\", \"T1\", \"WHERE\", \"T1\", \".\", \"department_name\", \"LIKE\", \"'\", \"%computer%\", \"'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"department_description\", \"FROM\", \"Departments\", \"T1\", \"WHERE\", \"T1\", \".\", \"department_name\", \"LIKE\", \"'%%'\"],\n    \"question\": \"What is the description of the department whose name has the substring the computer?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"description\", \"of\", \"the\", \"department\", \"whose\", \"name\", \"has\", \"the\", \"substring\", \"the\", \"computer\", \"?\"]\n}"}
{"question": "What is the department description for the one whose name has the word computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the department description for the one whose name has the word computer?\",\n\"question_toks\": \"['What', 'is', 'the', 'department', 'description', 'for', 'the', 'one', 'whose', 'name', 'has', 'the', 'word', 'computer', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT department_description FROM Departments T1 WHERE T1.department_name LIKE '%computer%';\",\n    \"query_toks\": [\"SELECT\", \"department_description\", \"FROM\", \"Departments\", \"T1\", \"WHERE\", \"T1.department_name\", \"LIKE\", \"'\", \"%computer%\", \"';\"],\n    \"query_toks_no_value\": [\"SELECT\", \"department_description\", \"FROM\", \"Departments\", \"T1\", \"WHERE\", \"T1.department_name\", \"LIKE\", \"'%\", \"%%\", \"%';\"],\n    \"question\": \"What is the department description for the one whose name has the word computer?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"department\", \"description\", \"for\", \"the\", \"one\", \"whose\", \"name\", \"has\", \"the\", \"word\", \"computer\", \"?\"]\n}"}
{"question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.\",\n\"question_toks\": \"['Who', 'are', 'enrolled', 'in', '2', 'degree', 'programs', 'in', 'one', 'semester', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', 'and', 'the', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT DISTINCT s1.first_name, s1.middle_name, s1.last_name, s1.student_id FROM Students AS s1 JOIN Student_Enrolment AS se1 ON s1.student_id = se1.student_id JOIN Student_Enrolment AS se2 ON s1.student_id = se2.student_id JOIN Degree_Programs AS dp1 ON dp1.degree_program_id = se1.degree_program_id JOIN Degree_Programs AS dp2 ON dp2.degree_program_id = se2.degree_program_id JOIN Semesters AS sem1 ON sem1.semester_id = se1.semester_id JOIN Semesters AS sem2 ON sem2.semester_id = se2.semester_id WHERE dp1.degree_program_id <> dp2.degree_program_id AND sem1.semester_id = sem2.semester_id AND COUNT(DISTINCT se1.degree_program_id) = 2;\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 's1', '.', 'first_name', ',', 's1', '.', 'middle_name', ',', 's1', '.', 'last_name', ',', 's1', '.', 'student_id', 'FROM', 'Students', 'AS', 's1', 'JOIN', 'Student_Enrolment', 'AS', 'se1', 'ON', 's1', '.', 'student_id', '=', 'se1', '.', 'student_id', 'JOIN', 'Student_Enrolment', 'AS', 'se2', 'ON', 's1', '.', 'student_id', '=', 'se2', '.', 'student_id', 'JOIN', 'Degree_Programs', 'AS', 'dp1', 'ON', 'dp1', '.', 'degree_program_id', '=', 'se1', '.', 'degree_program_id', 'JOIN', 'Degree_Programs', 'AS', 'dp2', 'ON', 'dp2', '.', 'degree_program_id', '=', 'se2', '.', 'degree_program_id', 'JOIN', 'Semesters', 'AS', 'sem1', 'ON', 'sem1', '.', 'semester_id', '=', 'se1', '.', 'semester_id', 'JOIN', 'Semesters', 'AS', 'sem2', 'ON', 'sem2', '.', 'semester_id', '=', 'se2', '.', 'semester_id', 'WHERE', 'dp1', '.', 'degree_program_id', '<>', 'dp2', '.', 'degree_program_id', 'AND', 'sem1', '.', 'semester_id', '=', 'sem2', '.', 'semester_id', 'AND', 'COUNT', '(', 'DISTINCT', 'se1', '.', 'degree_program_id', ')', '=', '2', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 's1', '.', 'first_name', ',', 's1', '.', 'middle_name', ',', 's1', '.', 'last_name', ',', 's1', '.', 'student_id', 'FROM', 'Students', 'AS', 's1', 'JOIN', 'Student_Enrolment', 'AS', 'se1', 'ON', 's1', '.', 'student_id', '=', 'se1', '.', 'student_id', 'JOIN', 'Student_Enrolment', 'AS', 'se2', 'ON', 's1', '.', 'student_id', '=', 'se2', '.', 'student_id', 'JOIN', 'Degree_Programs', 'AS', 'dp1', 'ON', 'dp1', '.', 'degree_program_id', '=', 'se1', '.', 'degree_program_id', 'JOIN', 'Degree_Programs', 'AS', 'dp2', 'ON', 'dp2', '.', 'degree_program_id', '=', 'se2', '.', 'degree_program_id', 'JOIN', 'Semesters', 'AS', 'sem1', 'ON', 'sem1', '.', 'semester_id', '=', 'se1', '.', 'semester_id', 'JOIN', 'Semesters', 'AS', 'sem2', 'ON', 'sem2', '.', 'semester_id', '=', 'se2', '.', 'semester_id', 'WHERE', 'dp1', '.', 'degree_program_id', '<>', 'dp2', '.', 'degree_program_id', 'AND', 'sem1', '.', 'semester_id', '=', 'sem2', '.', 'semester_id', 'AND', 'COUNT', '(', 'DISTINCT', 'se1', '.', 'degree_program_id', ')', '=', '?', ';']\",\n    \"question\": \"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.\",\n    \"question_toks\": \"['Who', 'are', 'enrolled', 'in', '2', 'degree', 'programs', 'in', 'one', 'semester', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', 'and', 'the', 'id', '.']\"\n}"}
{"question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?\",\n\"question_toks\": \"['What', 'are', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'names', ',', 'along', 'with', 'the', 'ids', ',', 'of', 'all', 'students', 'who', 'enrolled', 'in', '2', 'degree', 'programs', 'in', 'one', 'semester', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT s1.first_name, s1.middle_name, s1.last_name, s1.student_id FROM Students s1 JOIN Student_Enrolment se1 ON s1.student_id = se1.student_id JOIN Student_Enrolment se2 ON s1.student_id = se2.student_id WHERE se1.degree_program_id != se2.degree_program_id AND se1.semester_id = se2.semester_id GROUP BY s1.student_id HAVING COUNT(DISTINCT se1.degree_program_id) = 2;\",\n    \"query_toks\": \"['SELECT', 's1', '.', 'first_name', ',', 's1', '.', 'middle_name', ',', 's1', '.', 'last_name', ',', 's1', '.', 'student_id', 'FROM', 'Students', 's1', 'JOIN', 'Student_Enrolment', 'se1', 'ON', 's1', '.', 'student_id', '=', 'se1', '.', 'student_id', 'JOIN', 'Student_Enrolment', 'se2', 'ON', 's1', '.', 'student_id', '=', 'se2', '.', 'student_id', 'WHERE', 'se1', '.', 'degree_program_id', '!=', 'se2', '.', 'degree_program_id', 'AND', 'se1', '.', 'semester_id', '=', 'se2', '.', 'semester_id', 'GROUP', 'BY', 's1', '.', 'student_id', 'HAVING', 'COUNT', '(', 'DISTINCT', 'se1', '.', 'degree_program_id', ')', '=', '2', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 's1', '.', '<column>', ',', 's1', '.', '<column>', ',', 's1', '.', '<column>', ',', 's1', '.', '<column>', 'FROM', 'Students', 's1', 'JOIN', 'Student_Enrolment', 'se1', 'ON', 's1', '.', 'student_id', '=', 'se1', '.', 'student_id', 'JOIN', 'Student_Enrolment', 'se2', 'ON', 's1', '.', 'student_id', '=', 'se2', '.', 'student_id', 'WHERE', 'se1', '.', '<column>', '!=', 'se2', '.', '<column>', 'AND', 'se1', '.', '<column>', '=', 'se2', '.', '<column>', 'GROUP', 'BY', 's1', '.', '<column>', 'HAVING', 'COUNT', '(', 'DISTINCT', 'se1', '.', '<column>', ')', '=', '<value>', ';']\",\n    \"question\": \"What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?\",\n    \"question_toks\": \"['What', 'are', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'names', ',', 'along', 'with', 'the', 'ids', ',', 'of', 'all', 'students', 'who', 'enrolled', 'in', '2', 'degree', 'programs', 'in', 'one', 'semester', '?']\"\n}"}
{"question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.\",\n\"question_toks\": \"['Who', 'is', 'enrolled', 'in', 'a', 'Bachelor', 'degree', 'program', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', ',', 'last', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT S.first_name, S.middle_name, S.last_name FROM Students S, Degree_Programs D, Student_Enrolment SE WHERE S.student_id = SE.student_id AND SE.degree_program_id = D.degree_program_id AND D.degree_summary_name LIKE '%Bachelor%';\",\n    \"query_toks\": [\"SELECT\", \"S\", \".\", \"first_name\", \",\", \"S\", \".\", \"middle_name\", \",\", \"S\", \".\", \"last_name\", \"FROM\", \"Students\", \"S\", \",\", \"Degree_Programs\", \"D\", \",\", \"Student_Enrolment\", \"SE\", \"WHERE\", \"S\", \".\", \"student_id\", \"=\", \"SE\", \".\", \"student_id\", \"AND\", \"SE\", \".\", \"degree_program_id\", \"=\", \"D\", \".\", \"degree_program_id\", \"AND\", \"D\", \".\", \"degree_summary_name\", \"LIKE\", \"'%\", \"Bachelor\", \"%';\"],\n    \"query_toks_no_value\": [\"SELECT\", \"S\", \".\", \"first_name\", \",\", \"S\", \".\", \"middle_name\", \",\", \"S\", \".\", \"last_name\", \"FROM\", \"Students\", \"S\", \",\", \"Degree_Programs\", \"D\", \",\", \"Student_Enrolment\", \"SE\", \"WHERE\", \"S\", \".\", \"student_id\", \"=\", \"SE\", \".\", \"student_id\", \"AND\", \"SE\", \".\", \"degree_program_id\", \"=\", \"D\", \".\", \"degree_program_id\", \"AND\", \"D\", \".\", \"degree_summary_name\", \"LIKE\", \"'%\", \"Bachelor\", \"%';\"],\n    \"question\": \"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.\",\n    \"question_toks\": [\"Who\", \"is\", \"enrolled\", \"in\", \"a\", \"Bachelor\", \"degree\", \"program\", \"?\", \"List\", \"the\", \"first\", \"name\", \",\", \"middle\", \"name\", \",\", \"last\", \"name\", \".\"]\n}"}
{"question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the first, middle, and last names for everybody enrolled in a Bachelors program?\",\n\"question_toks\": \"['What', 'are', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'names', 'for', 'everybody', 'enrolled', 'in', 'a', 'Bachelors', 'program', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT student.first_name, student.middle_name, student.last_name\\nFROM Students AS student\\nJOIN Student_Enrolment AS enrollment\\nON student.student_id = enrollment.student_id\\nJOIN Degree_Programs AS degree\\nON enrollment.degree_program_id = degree.degree_program_id\\nWHERE degree.degree_summary_name LIKE 'Bachelor%';\",\n    \"query_toks\": \"['SELECT', 'student', '.', 'first_name', ',', 'student', '.', 'middle_name', ',', 'student', '.', 'last_name', 'FROM', 'Students', 'AS', 'student', 'JOIN', 'Student_Enrolment', 'AS', 'enrollment', 'ON', 'student', '.', 'student_id', '=', 'enrollment', '.', 'student_id', 'JOIN', 'Degree_Programs', 'AS', 'degree', 'ON', 'enrollment', '.', 'degree_program_id', '=', 'degree', '.', 'degree_program_id', 'WHERE', 'degree', '.', 'degree_summary_name', 'LIKE', \"'Bachelor%'\", ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'student', '.', 'first_name', ',', 'student', '.', 'middle_name', ',', 'student', '.', 'last_name', 'FROM', 'Students', 'AS', 'student', 'JOIN', 'Student_Enrolment', 'AS', 'enrollment', 'ON', 'student', '.', 'student_id', '=', 'enrollment', '.', 'student_id', 'JOIN', 'Degree_Programs', 'AS', 'degree', 'ON', 'enrollment', '.', 'degree_program_id', '=', 'degree', '.', 'degree_program_id', 'WHERE', 'degree', '.', 'degree_summary_name', 'LIKE', '?', ';']\",\n    \"question\": \"What are the first, middle, and last names for everybody enrolled in a Bachelors program?\",\n    \"question_toks\": \"['What', 'are', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'names', 'for', 'everybody', 'enrolled', 'in', 'a', 'Bachelors', 'program', '?']\"\n}"}
{"question": "Find the kind of program which most number of students are enrolled in?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Find the kind of program which most number of students are enrolled in?\",\n\"question_toks\": \"['Find', 'the', 'kind', 'of', 'program', 'which', 'most', 'number', 'of', 'students', 'are', 'enrolled', 'in', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT Degree_Programs.degree_summary_name \\nFROM Degree_Programs \\nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \\nGROUP BY Degree_Programs.degree_summary_name \\nORDER BY COUNT(*) DESC \\nLIMIT 1;\",\n    \"query_toks\": [\n        \"SELECT\",\n        \"Degree_Programs\",\n        \".\",\n        \"degree_summary_name\",\n        \"FROM\",\n        \"Degree_Programs\",\n        \"JOIN\",\n        \"Student_Enrolment\",\n        \"ON\",\n        \"Degree_Programs\",\n        \".\",\n        \"degree_program_id\",\n        \"=\",\n        \"Student_Enrolment\",\n        \".\",\n        \"degree_program_id\",\n        \"GROUP\",\n        \"BY\",\n        \"Degree_Programs\",\n        \".\",\n        \"degree_summary_name\",\n        \"ORDER\",\n        \"BY\",\n        \"COUNT\",\n        \"(\",\n        \"*\",\n        \")\",\n        \"DESC\",\n        \"LIMIT\",\n        \"1\",\n        \";\"\n    ],\n    \"query_toks_no_value\": [\n        \"SELECT\",\n        \"Degree_Programs\",\n        \".\",\n        \"degree_summary_name\",\n        \"FROM\",\n        \"Degree_Programs\",\n        \"JOIN\",\n        \"Student_Enrolment\",\n        \"ON\",\n        \"Degree_Programs\",\n        \".\",\n        \"degree_program_id\",\n        \"=\",\n        \"Student_Enrolment\",\n        \".\",\n        \"degree_program_id\",\n        \"GROUP\",\n        \"BY\",\n        \"Degree_Programs\",\n        \".\",\n        \"degree_summary_name\",\n        \"ORDER\",\n        \"BY\",\n        \"COUNT\",\n        \"(\",\n        \"*\",\n        \")\",\n        \"DESC\",\n        \"LIMIT\",\n        \"1\",\n        \";\"\n    ],\n    \"question\": \"Find the kind of program which most number of students are enrolled in?\",\n    \"question_toks\": [\n        \"Find\",\n        \"the\",\n        \"kind\",\n        \"of\",\n        \"program\",\n        \"which\",\n        \"most\",\n        \"number\",\n        \"of\",\n        \"students\",\n        \"are\",\n        \"enrolled\",\n        \"in\",\n        \"?\"\n    ]\n}"}
{"question": "What is the degree summary name that has the most number of students enrolled?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the degree summary name that has the most number of students enrolled?\",\n\"question_toks\": \"['What', 'is', 'the', 'degree', 'summary', 'name', 'that', 'has', 'the', 'most', 'number', 'of', 'students', 'enrolled', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1\",\n    \"query_toks\": [\"SELECT\", \"Degree_Programs.degree_summary_name\", \"FROM\", \"Degree_Programs\", \"JOIN\", \"Student_Enrolment\", \"ON\", \"Degree_Programs.degree_program_id\", \"=\", \"Student_Enrolment.degree_program_id\", \"GROUP\", \"BY\", \"Degree_Programs.degree_summary_name\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Degree_Programs.degree_summary_name\", \"FROM\", \"Degree_Programs\", \"JOIN\", \"Student_Enrolment\", \"ON\", \"Degree_Programs.degree_program_id\", \"=\", \"Student_Enrolment.degree_program_id\", \"GROUP\", \"BY\", \"Degree_Programs.degree_summary_name\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\"],\n    \"question\": \"What is the degree summary name that has the most number of students enrolled?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"degree\", \"summary\", \"name\", \"that\", \"has\", \"the\", \"most\", \"number\", \"of\", \"students\", \"enrolled\", \"?\"]\n}"}
{"question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Find the program which most number of students are enrolled in. List both the id and the summary.\",\n\"question_toks\": \"['Find', 'the', 'program', 'which', 'most', 'number', 'of', 'students', 'are', 'enrolled', 'in', '.', 'List', 'both', 'the', 'id', 'and', 'the', 'summary', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'degree_programs.degree_program_id', ',', 'degree_programs.degree_summary_name', 'FROM', 'student_enrolment', 'JOIN', 'degree_programs', 'ON', 'student_enrolment.degree_program_id', '=', 'degree_programs.degree_program_id', 'GROUP', 'BY', 'degree_programs.degree_program_id', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'degree_programs.degree_program_id', ',', 'degree_programs.degree_summary_name', 'FROM', 'student_enrolment', 'JOIN', 'degree_programs', 'ON', 'student_enrolment.degree_program_id', '=', 'degree_programs.degree_program_id', 'GROUP', 'BY', 'degree_programs.degree_program_id', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"question\": \"Find the program which most number of students are enrolled in. List both the id and the summary.\",\n\"question_toks\": \"['Find', 'the', 'program', 'which', 'most', 'number', 'of', 'students', 'are', 'enrolled', 'in', '.', 'List', 'both', 'the', 'id', 'and', 'the', 'summary', '.']\"}"}
{"question": "What is the program id and the summary of the degree that has the most students enrolled?", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the program id and the summary of the degree that has the most students enrolled?\",\n\"question_toks\": \"['What', 'is', 'the', 'program', 'id', 'and', 'the', 'summary', 'of', 'the', 'degree', 'that', 'has', 'the', 'most', 'students', 'enrolled', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT degree_program_id, degree_summary_description FROM Degree_Programs WHERE degree_program_id = (SELECT degree_program_id FROM (SELECT degree_program_id, COUNT(*) as count FROM Student_Enrolment GROUP BY degree_program_id ORDER BY count DESC LIMIT 1) AS temp);\",\n\"query_toks\": \"['SELECT', 'degree_program_id', ',', 'degree_summary_description', 'FROM', 'Degree_Programs', 'WHERE', 'degree_program_id', '=', '(', 'SELECT', 'degree_program_id', 'FROM', '(', 'SELECT', 'degree_program_id', ',', 'COUNT', '(', '*', ')', 'as', 'count', 'FROM', 'Student_Enrolment', 'GROUP', 'BY', 'degree_program_id', 'ORDER', 'BY', 'count', 'DESC', 'LIMIT', '1', ')', 'AS', 'temp', ')', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'degree_program_id', ',', 'degree_summary_description', 'FROM', 'Degree_Programs', 'WHERE', 'degree_program_id', '=', '(', 'SELECT', 'degree_program_id', 'FROM', '(', 'SELECT', 'degree_program_id', ',', 'COUNT', '(', '*', ')', 'as', 'count', 'FROM', 'Student_Enrolment', 'GROUP', 'BY', 'degree_program_id', 'ORDER', 'BY', 'count', 'DESC', 'LIMIT', '1', ')', 'AS', 'temp', ')', ';']\",\n\"question\": \"What is the program id and the summary of the degree that has the most students enrolled?\",\n\"question_toks\": \"['What', 'is', 'the', 'program', 'id', 'and', 'the', 'summary', 'of', 'the', 'degree', 'that', 'has', 'the', 'most', 'students', 'enrolled', '?']\"\n}"}
{"question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.\",\n\"question_toks\": \"['Which', 'student', 'has', 'enrolled', 'for', 'the', 'most', 'times', 'in', 'any', 'program', '?', 'List', 'the', 'id', ',', 'first', 'name', ',', 'middle', 'name', ',', 'last', 'name', ',', 'the', 'number', 'of', 'enrollments', 'and', 'student', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(*) AS num_enrollments \\nFROM Students \\nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \\nGROUP BY Students.student_id \\nORDER BY num_enrollments DESC \\nLIMIT 1;\",\n  \"query_toks\": \"['SELECT', 'Students', '.', 'student_id', ',', 'Students', '.', 'first_name', ',', 'Students', '.', 'middle_name', ',', 'Students', '.', 'last_name', ',', 'COUNT', '(', '*', ')', 'AS', 'num_enrollments', 'FROM', 'Students', 'INNER', 'JOIN', 'Student_Enrolment', 'ON', 'Students', '.', 'student_id', '=', 'Student_Enrolment', '.', 'student_id', 'GROUP', 'BY', 'Students', '.', 'student_id', 'ORDER', 'BY', 'num_enrollments', 'DESC', 'LIMIT', '1', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'Students', '.', 'student_id', ',', 'Students', '.', 'first_name', ',', 'Students', '.', 'middle_name', ',', 'Students', '.', 'last_name', ',', 'COUNT', '(', '*', ')', 'AS', 'num_enrollments', 'FROM', 'Students', 'INNER', 'JOIN', 'Student_Enrolment', 'ON', 'Students', '.', 'student_id', '=', 'Student_Enrolment', '.', 'student_id', 'GROUP', 'BY', 'Students', '.', 'student_id', 'ORDER', 'BY', 'num_enrollments', 'DESC', 'LIMIT', '1', ';']\",\n  \"question\": \"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.\",\n  \"question_toks\": \"['Which', 'student', 'has', 'enrolled', 'for', 'the', 'most', 'times', 'in', 'any', 'program', '?', 'List', 'the', 'id', ',', 'first', 'name', ',', 'middle', 'name', ',', 'last', 'name', ',', 'the', 'number', 'of', 'enrollments', 'and', 'student', 'id', '.']\"\n}"}
{"question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'name', ',', 'along', 'with', 'the', 'id', 'and', 'number', 'of', 'enrollments', ',', 'for', 'the', 'student', 'who', 'enrolled', 'the', 'most', 'in', 'any', 'program', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) as num_enrollments FROM Students s, Student_Enrolment se, Degree_Programs dp WHERE s.student_id = se.student_id and se.degree_program_id = dp.degree_program_id GROUP BY se.student_id ORDER BY num_enrollments DESC LIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"s.\", \"first_name\", \",\", \"s.\", \"middle_name\", \",\", \"s.\", \"last_name\", \",\", \"s.\", \"student_id\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"as\", \"num_enrollments\", \"FROM\", \"Students\", \"s\", \",\", \"Student_Enrolment\", \"se\", \",\", \"Degree_Programs\", \"dp\", \"WHERE\", \"s.\", \"student_id\", \"=\", \"se.\", \"student_id\", \"and\", \"se.\", \"degree_program_id\", \"=\", \"dp.\", \"degree_program_id\", \"GROUP\", \"BY\", \"se.\", \"student_id\", \"ORDER\", \"BY\", \"num_enrollments\", \"DESC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"s.\", \"first_name\", \",\", \"s.\", \"middle_name\", \",\", \"s.\", \"last_name\", \",\", \"s.\", \"student_id\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"as\", \"num_enrollments\", \"FROM\", \"Students\", \"s\", \",\", \"Student_Enrolment\", \"se\", \",\", \"Degree_Programs\", \"dp\", \"WHERE\", \"s.\", \"student_id\", \"=\", \"se.\", \"student_id\", \"and\", \"se.\", \"degree_program_id\", \"=\", \"dp.\", \"degree_program_id\", \"GROUP\", \"BY\", \"se.\", \"student_id\", \"ORDER\", \"BY\", \"num_enrollments\", \"DESC\", \"LIMIT\", \"1\"],\n  \"question\": \"What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"first\", \",\", \"middle\", \",\", \"and\", \"last\", \"name\", \",\", \"along\", \"with\", \"the\", \"id\", \"and\", \"number\", \"of\", \"enrollments\", \",\", \"for\", \"the\", \"student\", \"who\", \"enrolled\", \"the\", \"most\", \"in\", \"any\", \"program\", \"?\"]\n}"}
{"question": "Which semesters do not have any student enrolled? List the semester name.", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Which semesters do not have any student enrolled? List the semester name.\",\n\"question_toks\": \"['Which', 'semesters', 'do', 'not', 'have', 'any', 'student', 'enrolled', '?', 'List', 'the', 'semester', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.semester_id IS NULL\",\n\"query_toks\": \"['SELECT', 'Semesters.semester_name', 'FROM', 'Semesters', 'LEFT', 'JOIN', 'Student_Enrolment', 'ON', 'Semesters.semester_id', '=', 'Student_Enrolment.semester_id', 'WHERE', 'Student_Enrolment.semester_id', 'IS', 'NULL']\",\n\"query_toks_no_value\": \"['SELECT', 'Semesters', '.', 'semester_name', 'FROM', 'Semesters', 'LEFT', 'JOIN', 'Student_Enrolment', 'ON', 'Semesters', '.', 'semester_id', '=', 'Student_Enrolment', '.', 'semester_id', 'WHERE', 'Student_Enrolment', '.', 'semester_id', 'IS', 'NULL']\",\n\"question\": \"Which semesters do not have any student enrolled? List the semester name.\",\n\"question_toks\": \"['Which', 'semesters', 'do', 'not', 'have', 'any', 'student', 'enrolled', '?', 'List', 'the', 'semester', 'name', '.']\"\n}"}
{"question": "What is the name of the semester with no students enrolled?", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the name of the semester with no students enrolled?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'semester', 'with', 'no', 'students', 'enrolled', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT semester_name FROM Semesters WHERE semester_id NOT IN(SELECT DISTINCT semester_id FROM Student_Enrollment)\",\n\"query_toks\": \"['SELECT', 'semester_name', 'FROM', 'Semesters', 'WHERE', 'semester_id', 'NOT', 'IN', 'SELECT', 'DISTINCT', 'semester_id', 'FROM', 'Student_Enrollment']\", \n\"query_toks_no_value\": \"['SELECT', 'semester_name', 'FROM', 'Semesters', 'WHERE', 'semester_id', 'NOT', 'IN', 'SELECT', 'DISTINCT', 'semester_id', 'FROM', 'Student_Enrollment']\", \n\"question\": \"What is the name of the semester with no students enrolled?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'semester', 'with', 'no', 'students', 'enrolled', '?']}\""}
{"question": "What are all the course names of the courses which ever have students enrolled in?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are all the course names of the courses which ever have students enrolled in?\",\n\"question_toks\": \"['What', 'are', 'all', 'the', 'course', 'names', 'of', 'the', 'courses', 'which', 'ever', 'have', 'students', 'enrolled', 'in', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT DISTINCT Courses.course_name FROM Student_Enrolment_Courses AS SEC, Courses WHERE SEC.course_id=Courses.course_id;\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Courses', '.', 'course_name', 'FROM', 'Student_Enrolment_Courses', 'AS', 'SEC', ',', 'Courses', 'WHERE', 'SEC', '.', 'course_id', '=', 'Courses', '.', 'course_id', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Courses', '.', 'course_name', 'FROM', 'Student_Enrolment_Courses', 'AS', 'SEC', ',', 'Courses', 'WHERE', 'SEC', '.', 'course_id', '=', 'Courses', '.', 'course_id', ';']\",\n    \"question\": \"What are all the course names of the courses which ever have students enrolled in?\",\n    \"question_toks\": \"['What', 'are', 'all', 'the', 'course', 'names', 'of', 'the', 'courses', 'which', 'ever', 'have', 'students', 'enrolled', 'in', '?']\"\n}"}
{"question": "What are the names of all courses that have some students enrolled?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the names of all courses that have some students enrolled?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'courses', 'that', 'have', 'some', 'students', 'enrolled', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT DISTINCT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id=Sections.course_id JOIN Student_Enrollment_Courses ON Sections.section_id=Student_Enrollment_Courses.section_id\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"Courses\", \".\", \"course_name\", \"FROM\", \"Courses\", \"JOIN\", \"Sections\", \"ON\", \"Courses\", \".\", \"course_id\", \"=\", \"Sections\", \".\", \"course_id\", \"JOIN\", \"Student_Enrollment_Courses\", \"ON\", \"Sections\", \".\", \"section_id\", \"=\", \"Student_Enrollment_Courses\", \".\", \"section_id\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"Courses\", \".\", \"course_name\", \"FROM\", \"Courses\", \"JOIN\", \"Sections\", \"ON\", \"Courses\", \".\", \"course_id\", \"=\", \"Sections\", \".\", \"course_id\", \"JOIN\", \"Student_Enrollment_Courses\", \"ON\", \"Sections\", \".\", \"section_id\", \"=\", \"Student_Enrollment_Courses\", \".\", \"section_id\"],\n  \"question\": \"What are the names of all courses that have some students enrolled?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"all\", \"courses\", \"that\", \"have\", \"some\", \"students\", \"enrolled\", \"?\"]\n}"}
{"question": "What's the name of the course with most number of enrollments?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What's the name of the course with most number of enrollments?\",\n\"question_toks\": \"['What', \"'s\", 'the', 'name', 'of', 'the', 'course', 'with', 'most', 'number', 'of', 'enrollments', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT course_name FROM Sections T1, Student_Enrolment_Courses T2, (SELECT course_id, COUNT(*) AS num_enrollments FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY num_enrollments DESC LIMIT 1) T3 WHERE T2.course_id=T1.course_id AND T2.course_id=T3.course_id;\",\n  \"query_toks\": [\"SELECT\", \"course_name\", \"FROM\", \"Sections\", \"T1\", \",\", \"Student_Enrolment_Courses\", \"T2\", \",\", \"(\", \"SELECT\", \"course_id\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_enrollments\", \"FROM\", \"Student_Enrolment_Courses\", \"GROUP\", \"BY\", \"course_id\", \"ORDER\", \"BY\", \"num_enrollments\", \"DESC\", \"LIMIT\", \"1\", \")\", \"T3\", \"WHERE\", \"T2.course_id\", \"=\", \"T1.course_id\", \"AND\", \"T2.course_id\", \"=\", \"T3.course_id\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"course_name\", \"FROM\", \"Sections\", \"T1\", \",\", \"Student_Enrolment_Courses\", \"T2\", \",\", \"(\", \"SELECT\", \"course_id\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_enrollments\", \"FROM\", \"Student_Enrolment_Courses\", \"GROUP\", \"BY\", \"course_id\", \"ORDER\", \"BY\", \"num_enrollments\", \"DESC\", \"LIMIT\", \"1\", \")\", \"T3\", \"WHERE\", \"T2.course_id\", \"=\", \"T1.course_id\", \"AND\", \"T2.course_id\", \"=\", \"T3.course_id\", \";\"],\n  \"question\": \"What's the name of the course with most number of enrollments?\",\n  \"question_toks\": [\"What\", \"'s\", \"the\", \"name\", \"of\", \"the\", \"course\", \"with\", \"most\", \"number\", \"of\", \"enrollments\", \"?\"]\n}"}
{"question": "What is the name of the course with the most students enrolled?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the name of the course with the most students enrolled?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'course', 'with', 'the', 'most', 'students', 'enrolled', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT course_name\\nFROM\\n  (SELECT COUNT(*) AS course_count, course_id\\n   FROM student_enrolment_courses\\n   GROUP BY course_id) AS course_counts\\nJOIN courses ON courses.course_id = course_counts.course_id\\nORDER BY course_count DESC\\nLIMIT 1;\",\n    \"query_toks\": [\"SELECT\", \"course_name\", \"FROM\", \"(\", \"SELECT\", \"COUNT(*)\", \"AS\", \"course_count\", \",\", \"course_id\", \"FROM\", \"student_enrolment_courses\", \"GROUP\", \"BY\", \"course_id\", \")\", \"AS\", \"course_counts\", \"JOIN\", \"courses\", \"ON\", \"courses.course_id\", \"=\", \"course_counts.course_id\", \"ORDER\", \"BY\", \"course_count\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"course_name\", \"FROM\", \"(\", \"SELECT\", \"COUNT(*)\", \"AS\", \"course_count\", \",\", \"course_id\", \"FROM\", \"student_enrolment_courses\", \"GROUP\", \"BY\", \"course_id\", \")\", \"AS\", \"course_counts\", \"JOIN\", \"courses\", \"ON\", \"courses.course_id\", \"=\", \"course_counts.course_id\", \"ORDER\", \"BY\", \"course_count\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"question\": \"What is the name of the course with the most students enrolled?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"name\", \"of\", \"the\", \"course\", \"with\", \"the\", \"most\", \"students\", \"enrolled\", \"?\"]\n}"}
{"question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.\",\n\"question_toks\": \"['Find', 'the', 'last', 'name', 'of', 'the', 'students', 'who', 'currently', 'live', 'in', 'the', 'state', 'of', 'North', 'Carolina', 'but', 'have', 'not', 'registered', 'in', 'any', 'degree', 'program', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT last_name FROM Students S JOIN Addresses A on S.current_address_id = A.address_id WHERE A.state_province_county = 'North Carolina' AND S.student_id NOT IN (SELECT student_id FROM Student_Enrolment SE JOIN Degree_Programs DP on SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name IS NOT NULL)\",\n    \"query_toks\": [\"SELECT\", \"last_name\", \"FROM\", \"Students\", \"S\", \"JOIN\", \"Addresses\", \"A\", \"on\", \"S\", \".\", \"current_address_id\", \"=\", \"A\", \".\", \"address_id\", \"WHERE\", \"A\", \".\", \"state_province_county\", \"=\", \"'North\", \"Carolina'\", \"AND\", \"S\", \".\", \"student_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"Student_Enrolment\", \"SE\", \"JOIN\", \"Degree_Programs\", \"DP\", \"on\", \"SE\", \".\", \"degree_program_id\", \"=\", \"DP\", \".\", \"degree_program_id\", \"WHERE\", \"DP\", \".\", \"degree_summary_name\", \"IS\", \"NOT\", \"NULL\", \")\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"last_name\", \"FROM\", \"Students\", \"S\", \"JOIN\", \"Addresses\", \"A\", \"on\", \"S\", \".\", \"current_address_id\", \"=\", \"A\", \".\", \"address_id\", \"WHERE\", \"A\", \".\", \"state_province_county\", \"=\", \"<value>\", \"AND\", \"S\", \".\", \"student_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"Student_Enrolment\", \"SE\", \"JOIN\", \"Degree_Programs\", \"DP\", \"on\", \"SE\", \".\", \"degree_program_id\", \"=\", \"DP\", \".\", \"degree_program_id\", \"WHERE\", \"DP\", \".\", \"degree_summary_name\", \"IS\", \"NOT\", \"NULL\", \")\", \";\"],\n    \"question\": \"Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.\",\n    \"question_toks\": [\"Find\", \"the\", \"last\", \"name\", \"of\", \"the\", \"students\", \"who\", \"currently\", \"live\", \"in\", \"the\", \"state\", \"of\", \"North\", \"Carolina\", \"but\", \"have\", \"not\", \"registered\", \"in\", \"any\", \"degree\", \"program\", \".\"]\n}"}
{"question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the last name of the students who live in North Carolina but have not registered in any degree programs?\",\n\"question_toks\": \"['What', 'are', 'the', 'last', 'name', 'of', 'the', 'students', 'who', 'live', 'in', 'North', 'Carolina', 'but', 'have', 'not', 'registered', 'in', 'any', 'degree', 'programs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT DISTINCT Students.last_name FROM Students WHERE Students.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT * FROM Student_Enrolment WHERE Student_Enrolment.student_id = Students.student_id)\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Students', '.', 'last_name', 'FROM', 'Students', 'WHERE', 'Students', '.', 'state_province_county', '=', ''North Carolina'', 'AND', 'NOT', 'EXISTS', '(', 'SELECT', '*', 'FROM', 'Student_Enrolment', 'WHERE', 'Student_Enrolment', '.', 'student_id', '=', 'Students', '.', 'student_id', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Students', '.', 'last_name', 'FROM', 'Students', 'WHERE', 'Students', '.', 'state_province_county', '=', '', 'AND', 'NOT', 'EXISTS', '(', 'SELECT', '*', 'FROM', 'Student_Enrolment', 'WHERE', 'Student_Enrolment', '.', 'student_id', '=', 'Students', '.', 'student_id', ')']\",\n    \"question\": \"What are the last name of the students who live in North Carolina but have not registered in any degree programs?\",\n    \"question_toks\": \"['What', 'are', 'the', 'last', 'name', 'of', 'the', 'students', 'who', 'live', 'in', 'North', 'Carolina', 'but', 'have', 'not', 'registered', 'in', 'any', 'degree', 'programs', '?']\"\n}"}
{"question": "Show the date and id of the transcript with at least 2 course results.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Show the date and id of the transcript with at least 2 course results.\",\n\"question_toks\": \"['Show', 'the', 'date', 'and', 'id', 'of', 'the', 'transcript', 'with', 'at', 'least', '2', 'course', 'results', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT TC.transcript_id, T.transcript_date FROM Transcript_Contents TC JOIN Student_Enrolment_Courses SEC ON TC.student_course_id = SEC.student_course_id JOIN Student_Enrolment SE ON SEC.student_enrolment_id = SE.student_enrolment_id JOIN Transcripts T ON T.transcript_id = TC.transcript_id GROUP BY TC.transcript_id HAVING COUNT(*) >= 2\",\n    \"query_toks\": [\"SELECT\", \"TC\", \".\", \"transcript_id\", \",\", \"T\", \".\", \"transcript_date\", \"FROM\", \"Transcript_Contents\", \"TC\", \"JOIN\", \"Student_Enrolment_Courses\", \"SEC\", \"ON\", \"TC\", \".\", \"student_course_id\", \"=\", \"SEC\", \".\", \"student_course_id\", \"JOIN\", \"Student_Enrolment\", \"SE\", \"ON\", \"SEC\", \".\", \"student_enrolment_id\", \"=\", \"SE\", \".\", \"student_enrolment_id\", \"JOIN\", \"Transcripts\", \"T\", \"ON\", \"T\", \".\", \"transcript_id\", \"=\", \"TC\", \".\", \"transcript_id\", \"GROUP\", \"BY\", \"TC\", \".\", \"transcript_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"2\"],\n    \"query_toks_no_value\": [\"SELECT\", \"TC\", \".\", \"transcript_id\", \",\", \"T\", \".\", \"transcript_date\", \"FROM\", \"Transcript_Contents\", \"TC\", \"JOIN\", \"Student_Enrolment_Courses\", \"SEC\", \"ON\", \"TC\", \".\", \"student_course_id\", \"=\", \"SEC\", \".\", \"student_course_id\", \"JOIN\", \"Student_Enrolment\", \"SE\", \"ON\", \"SEC\", \".\", \"student_enrolment_id\", \"=\", \"SE\", \".\", \"student_enrolment_id\", \"JOIN\", \"Transcripts\", \"T\", \"ON\", \"T\", \".\", \"transcript_id\", \"=\", \"TC\", \".\", \"transcript_id\", \"GROUP\", \"BY\", \"TC\", \".\", \"transcript_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"2\"],\n    \"question\": \"Show the date and id of the transcript with at least 2 course results.\",\n    \"question_toks\": [\"Show\", \"the\", \"date\", \"and\", \"id\", \"of\", \"the\", \"transcript\", \"with\", \"at\", \"least\", \"2\", \"course\", \"results\", \".\"]\n}"}
{"question": "What is the date and id of the transcript with at least 2 courses listed?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the date and id of the transcript with at least 2 courses listed?\",\n\"question_toks\": \"['What', 'is', 'the', 'date', 'and', 'id', 'of', 'the', 'transcript', 'with', 'at', 'least', '2', 'courses', 'listed', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT t.transcript_id, t.transcript_date FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(T2.course_id) >= 2;\",\n    \"query_toks\": [\"SELECT\", \"t\", \".\", \"transcript_id\", \",\", \"t\", \".\", \"transcript_date\", \"FROM\", \"Transcripts\", \"T1\", \"JOIN\", \"Transcript_Contents\", \"T2\", \"ON\", \"T1\", \".\", \"transcript_id\", \"=\", \"T2\", \".\", \"transcript_id\", \"GROUP\", \"BY\", \"T1\", \".\", \"transcript_id\", \",\", \"T1\", \".\", \"transcript_date\", \"HAVING\", \"COUNT\", \"(\", \"T2\", \".\", \"course_id\", \")\", \">=\", \"2\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"t\", \".\", \"transcript_id\", \",\", \"t\", \".\", \"transcript_date\", \"FROM\", \"Transcripts\", \"T1\", \"JOIN\", \"Transcript_Contents\", \"T2\", \"ON\", \"T1\", \".\", \"transcript_id\", \"=\", \"T2\", \".\", \"transcript_id\", \"GROUP\", \"BY\", \"T1\", \".\", \"transcript_id\", \",\", \"T1\", \".\", \"transcript_date\", \"HAVING\", \"COUNT\", \"(\", \"T2\", \".\", \"course_id\", \")\", \">=\", \"?\", \";\"],\n    \"question\": \"What is the date and id of the transcript with at least 2 courses listed?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"date\", \"and\", \"id\", \"of\", \"the\", \"transcript\", \"with\", \"at\", \"least\", \"2\", \"courses\", \"listed\", \"?\"]\n}"}
{"question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the phone number of the man with the first name Timmothy and the last name Ward?\",\n\"question_toks\": \"['What', 'is', 'the', 'phone', 'number', 'of', 'the', 'man', 'with', 'the', 'first', 'name', 'Timmothy', 'and', 'the', 'last', 'name', 'Ward', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT cell_mobile_number FROM Students WHERE first_name='Timmothy' AND last_name='Ward'\",\n  \"query_toks\": [\"SELECT\", \"cell_mobile_number\", \"FROM\", \"Students\", \"WHERE\", \"first_name\", \"=\", \"'Timmothy'\", \"AND\", \"last_name\", \"=\", \"'Ward'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"cell_mobile_number\", \"FROM\", \"Students\", \"WHERE\", \"first_name\", \"=\", \"?\", \"AND\", \"last_name\", \"=\", \"?\"],\n  \"question\": \"What is the phone number of the man with the first name Timmothy and the last name Ward?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"phone\", \"number\", \"of\", \"the\", \"man\", \"with\", \"the\", \"first\", \"name\", \"Timmothy\", \"and\", \"the\", \"last\", \"name\", \"Ward\", \"?\"]\n}"}
{"question": "What is the mobile phone number of the student named Timmothy Ward ?", "sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the mobile phone number of the student named Timmothy Ward ?\",\n\"question_toks\": \"['What', 'is', 'the', 'mobile', 'phone', 'number', 'of', 'the', 'student', 'named', 'Timmothy', 'Ward', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'\",\n\"query_toks\": \"['SELECT', 'cell_mobile_number', 'FROM', 'Students', 'WHERE', 'first_name', '=', ''Timmothy'', 'AND', 'last_name', '=', ''Ward''']\",\n\"query_toks_no_value\": \"['SELECT', 'cell_mobile_number', 'FROM', 'Students', 'WHERE', 'first_name', '=', '', 'AND', 'last_name', '=', '']\",\n\"question\": \"What is the mobile phone number of the student named Timmothy Ward ?\",\n\"question_toks\": \"['What', 'is', 'the', 'mobile', 'phone', 'number', 'of', 'the', 'student', 'named', 'Timmothy', 'Ward', '?']\"\n}"}
{"question": "Who is the first student to register? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Who is the first student to register? List the first name, middle name and last name.\",\n\"question_toks\": \"['Who', 'is', 'the', 'first', 'student', 'to', 'register', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"student_transcripts_tracking\",\n \"query\": \"SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1\",\n \"query_toks\": [\"SELECT\", \"first_name\", \",\", \"middle_name\", \",\", \"last_name\", \"FROM\", \"Students\", \"ORDER\", \"BY\", \"date_first_registered\", \"LIMIT\", \"1\"],\n \"query_toks_no_value\": [\"SELECT\", \"first_name\", \",\", \"middle_name\", \",\", \"last_name\", \"FROM\", \"Students\", \"ORDER\", \"BY\", \"date_first_registered\", \"LIMIT\", \"1\"],\n \"question\": \"Who is the first student to register? List the first name, middle name and last name.\",\n \"question_toks\": [\"Who\", \"is\", \"the\", \"first\", \"student\", \"to\", \"register\", \"?\", \"List\", \"the\", \"first\", \"name\", \",\", \"middle\", \"name\", \"and\", \"last\", \"name\", \".\"]\n}"}
{"question": "What is the first, middle, and last name of the first student to register?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the first, middle, and last name of the first student to register?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'name', 'of', 'the', 'first', 'student', 'to', 'register', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;\",\n  \"query_toks\": [\"SELECT\", \"first_name\", \",\", \"middle_name\", \",\", \"last_name\", \"FROM\", \"Students\", \"ORDER\", \"BY\", \"date_first_registered\", \"LIMIT\", \"1\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"first_name\", \",\", \"middle_name\", \",\", \"last_name\", \"FROM\", \"Students\", \"ORDER\", \"BY\", \"date_first_registered\", \"LIMIT\", \"1\", \";\"],\n  \"question\": \"What is the first, middle, and last name of the first student to register?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"first\", \",\", \"middle\", \",\", \"and\", \"last\", \"name\", \"of\", \"the\", \"first\", \"student\", \"to\", \"register\", \"?\"]\n}"}
{"question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Who is the earliest graduate of the school? List the first name, middle name and last name.\",\n\"question_toks\": \"['Who', 'is', 'the', 'earliest', 'graduate', 'of', 'the', 'school', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT s.first_name, s.middle_name, s.last_name FROM Students s, Student_Enrolment se, Transcripts t WHERE s.student_id = se.student_id AND se.student_enrolment_id = t.transcript_id ORDER BY t.transcript_date LIMIT 1;\",\n    \"query_toks\":\"['SELECT', 's', '.', 'first_name', ',', 's', '.', 'middle_name', ',', 's', '.', 'last_name', 'FROM', 'Students', 's', ',', 'Student_Enrolment', 'se', ',', 'Transcripts', 't', 'WHERE', 's', '.', 'student_id', '=', 'se', '.', 'student_id', 'AND', 'se', '.', 'student_enrolment_id', '=', 't', '.', 'transcript_id', 'ORDER', 'BY', 't', '.', 'transcript_date', 'LIMIT', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 's', '.', 'first_name', ',', 's', '.', 'middle_name', ',', 's', '.', 'last_name', 'FROM', 'Students', 's', ',', 'Student_Enrolment', 'se', ',', 'Transcripts', 't', 'WHERE', 's', '.', 'student_id', '=', 'se', '.', 'student_id', 'AND', 'se', '.', 'student_enrolment_id', '=', 't', '.', 'transcript_id', 'ORDER', 'BY', 't', '.', 'transcript_date', 'LIMIT', '1', ';']\",\n    \"question\": \"Who is the earliest graduate of the school? List the first name, middle name and last name.\",\n    \"question_toks\": \"['Who', 'is', 'the', 'earliest', 'graduate', 'of', 'the', 'school', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', '.']\"\n}"}
{"question": "What is the first, middle, and last name of the earliest school graduate?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the first, middle, and last name of the earliest school graduate?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'name', 'of', 'the', 'earliest', 'school', 'graduate', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students, Student_Enrolment, Semesters, Transcript_Contents WHERE Students.student_id = Student_Enrolment.student_id AND Student_Enrolment.semester_id = Semesters.semester_id AND Student_Enrolment.student_enrolment_id = Transcript_Contents.student_course_id ORDER BY Semesters.semester_date LIMIT 1;\",\n    \"query_toks\": [\"SELECT\", \"Students\", \".\", \"first_name\", \",\", \"Students\", \".\", \"middle_name\", \",\", \"Students\", \".\", \"last_name\", \"FROM\", \"Students\", \",\", \"Student_Enrolment\", \",\", \"Semesters\", \",\", \"Transcript_Contents\", \"WHERE\", \"Students\", \".\", \"student_id\", \"=\", \"Student_Enrolment\", \".\", \"student_id\", \"AND\", \"Student_Enrolment\", \".\", \"semester_id\", \"=\", \"Semesters\", \".\", \"semester_id\", \"AND\", \"Student_Enrolment\", \".\", \"student_enrolment_id\", \"=\", \"Transcript_Contents\", \".\", \"student_course_id\", \"ORDER\", \"BY\", \"Semesters\", \".\", \"semester_date\", \"LIMIT\", \"1\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Students\", \".\", \"first_name\", \",\", \"Students\", \".\", \"middle_name\", \",\", \"Students\", \".\", \"last_name\", \"FROM\", \"Students\", \",\", \"Student_Enrolment\", \",\", \"Semesters\", \",\", \"Transcript_Contents\", \"WHERE\", \"Students\", \".\", \"student_id\", \"=\", \"Student_Enrolment\", \".\", \"student_id\", \"AND\", \"Student_Enrolment\", \".\", \"semester_id\", \"=\", \"Semesters\", \".\", \"semester_id\", \"AND\", \"Student_Enrolment\", \".\", \"student_enrolment_id\", \"=\", \"Transcript_Contents\", \".\", \"student_course_id\", \"ORDER\", \"BY\", \"Semesters\", \".\", \"semester_date\", \"LIMIT\", \"1\", \";\"],\n    \"question\": \"What is the first, middle, and last name of the earliest school graduate?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"first\", \",\", \"middle\", \",\", \"and\", \"last\", \"name\", \"of\", \"the\", \"earliest\", \"school\", \"graduate\", \"?\"]\n}"}
{"question": "Whose permanent address is different from his or her current address? List his or her first name.", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Whose permanent address is different from his or her current address? List his or her first name.\",\n\"question_toks\": \"['Whose', 'permanent', 'address', 'is', 'different', 'from', 'his', 'or', 'her', 'current', 'address', '?', 'List', 'his', 'or', 'her', 'first', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT s.first_name FROM Students s WHERE s.current_address_id != s.permanent_address_id\",\n    \"query_toks\": \"['SELECT', 's', '.', 'first_name', 'FROM', 'Students', 's', 'WHERE', 's', '.', 'current_address_id', '!=', 's', '.', 'permanent_address_id']\",\n    \"query_toks_no_value\": \"['SELECT', 's', '.', 'first_name', 'FROM', 'Students', 's', 'WHERE', 's', '.', 'current_address_id', '!=', 's', '.', 'permanent_address_id']\",\n    \"question\": \"Whose permanent address is different from his or her current address? List his or her first name.\",\n    \"question_toks\": \"['Whose', 'permanent', 'address', 'is', 'different', 'from', 'his', 'or', 'her', 'current', 'address', '?', 'List', 'his', 'or', 'her', 'first', 'name', '.']\"\n}"}
{"question": "What is the first name of the student whose permanent address is different from his or her current one?", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the first name of the student whose permanent address is different from his or her current one?\",\n\"question_toks\": \"['What', 'is', 'the', 'first', 'name', 'of', 'the', 'student', 'whose', 'permanent', 'address', 'is', 'different', 'from', 'his', 'or', 'her', 'current', 'one', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT s.first_name FROM Students s WHERE s.current_address_id <> s.permanent_address_id\",\n  \"query_toks\": \"['SELECT', 's', '.', 'first_name', 'FROM', 'Students', 's', 'WHERE', 's', '.', 'current_address_id', '<>', 's', '.', 'permanent_address_id']\",\n  \"query_toks_no_value\": \"['SELECT', 's', '.', 'first_name', 'FROM', 'Students', 's', 'WHERE', 's', '.', 'current_address_id', '<>', 's', '.', 'permanent_address_id']\",\n  \"question\": \"What is the first name of the student whose permanent address is different from his or her current one?\",\n  \"question_toks\": \"['What', 'is', 'the', 'first', 'name', 'of', 'the', 'student', 'whose', 'permanent', 'address', 'is', 'different', 'from', 'his', 'or', 'her', 'current', 'one', '?']\"\n}"}
{"question": "Which address holds the most number of students currently? List the address id and all lines.", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Which address holds the most number of students currently? List the address id and all lines.\",\n\"question_toks\": \"['Which', 'address', 'holds', 'the', 'most', 'number', 'of', 'students', 'currently', '?', 'List', 'the', 'address', 'id', 'and', 'all', 'lines', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT s.current_address_id AS address_id, a.line_1, a.line_2, a.line_3 FROM Students s LEFT JOIN Addresses a ON s.current_address_id=a.address_id GROUP BY s.current_address_id ORDER BY COUNT(*) DESC LIMIT 1;\",\n  \"query_toks\": [\"SELECT\", \"s\", \".\", \"current_address_id\", \"AS\", \"address_id\", \",\", \"a\", \".\", \"line_1\", \",\", \"a\", \".\", \"line_2\", \",\", \"a\", \".\", \"line_3\", \"FROM\", \"Students\", \"s\", \"LEFT\", \"JOIN\", \"Addresses\", \"a\", \"ON\", \"s\", \".\", \"current_address_id\", \"=\", \"a\", \".\", \"address_id\", \"GROUP\", \"BY\", \"s\", \".\", \"current_address_id\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"s\", \".\", \"current_address_id\", \"AS\", \"address_id\", \",\", \"a\", \".\", \"line_1\", \",\", \"a\", \".\", \"line_2\", \",\", \"a\", \".\", \"line_3\", \"FROM\", \"Students\", \"s\", \"LEFT\", \"JOIN\", \"Addresses\", \"a\", \"ON\", \"s\", \".\", \"current_address_id\", \"=\", \"a\", \".\", \"address_id\", \"GROUP\", \"BY\", \"s\", \".\", \"current_address_id\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n  \"question\": \"Which address holds the most number of students currently? List the address id and all lines.\",\n  \"question_toks\": [\"Which\", \"address\", \"holds\", \"the\", \"most\", \"number\", \"of\", \"students\", \"currently\", \"?\", \"List\", \"the\", \"address\", \"id\", \"and\", \"all\", \"lines\", \".\"]\n}"}
{"question": "What is the id, line 1, and line 2 of the address with the most students?", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the id, line 1, and line 2 of the address with the most students?\",\n\"question_toks\": \"['What', 'is', 'the', 'id', ',', 'line', '1', ',', 'and', 'line', '2', 'of', 'the', 'address', 'with', 'the', 'most', 'students', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses, Students WHERE Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2 ORDER BY COUNT(Students.student_id) DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'Addresses.address_id', ',', 'Addresses.line_1', ',', 'Addresses.line_2', 'FROM', 'Addresses', ',', 'Students', 'WHERE', 'Addresses.address_id', '=', 'Students.current_address_id', 'GROUP', 'BY', 'Addresses.address_id', ',', 'Addresses.line_1', ',', 'Addresses.line_2', 'ORDER', 'BY', 'COUNT', '(', 'Students.student_id', ')', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'Addresses', '.', 'address_id', ',', 'Addresses', '.', 'line_1', ',', 'Addresses', '.', 'line_2', 'FROM', 'Addresses', ',', 'Students', 'WHERE', 'Addresses', '.', 'address_id', '=', 'Students', '.', 'current_address_id', 'GROUP', 'BY', 'Addresses', '.', 'address_id', ',', 'Addresses', '.', 'line_1', ',', 'Addresses', '.', 'line_2', 'ORDER', 'BY', 'COUNT', '(', 'Students', '.', 'student_id', ')', 'DESC', 'LIMIT', '1']\",\n\"question\": \"What is the id, line 1, and line 2 of the address with the most students?\",\n\"question_toks\": \"['What', 'is', 'the', 'id', ',', 'line', '1', ',', 'and', 'line', '2', 'of', 'the', 'address', 'with', 'the', 'most', 'students', '?']\"}"}
{"question": "On average, when were the transcripts printed?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"On average, when were the transcripts printed?\",\n\"question_toks\": \"['On', 'average', ',', 'when', 'were', 'the', 'transcripts', 'printed', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT AVG(transcript_date) FROM Transcripts\",\n    \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"transcript_date\", \")\", \"FROM\", \"Transcripts\"],\n    \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"transcript_date\", \")\", \"FROM\", \"Transcripts\"],\n    \"question\": \"On average, when were the transcripts printed?\",\n    \"question_toks\": [\"On\", \"average\", \",\", \"when\", \"were\", \"the\", \"transcripts\", \"printed\", \"?\"]\n}"}
{"question": "What is the average transcript date?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the average transcript date?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'transcript', 'date', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT AVG(transcript_date) FROM Transcripts\",\n  \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"transcript_date\", \")\", \"FROM\", \"Transcripts\"],\n  \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"transcript_date\", \")\", \"FROM\", \"Transcripts\"],\n  \"question\": \"What is the average transcript date?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"average\", \"transcript\", \"date\", \"?\"]\n}"}
{"question": "When is the first transcript released? List the date and details.", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"When is the first transcript released? List the date and details.\",\n\"question_toks\": \"['When', 'is', 'the', 'first', 'transcript', 'released', '?', 'List', 'the', 'date', 'and', 'details', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;\",\n\"query_toks\": [\"SELECT\", \"transcript_date\", \",\", \"other_details\", \"FROM\", \"Transcripts\", \"ORDER\", \"BY\", \"transcript_date\", \"LIMIT\", \"1\", \";\"],\n\"query_toks_no_value\": [\"SELECT\", \"transcript_date\", \",\", \"other_details\", \"FROM\", \"Transcripts\", \"ORDER\", \"BY\", \"transcript_date\", \"LIMIT\", \"1\", \";\"],\n\"question\": \"When is the first transcript released? List the date and details.\",\n\"question_toks\": [\"When\", \"is\", \"the\", \"first\", \"transcript\", \"released\", \"?\", \"List\", \"the\", \"date\", \"and\", \"details\", \".\"]}"}
{"question": "What is the earliest date of a transcript release, and what details can you tell me?", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the earliest date of a transcript release, and what details can you tell me?\",\n\"question_toks\": \"['What', 'is', 'the', 'earliest', 'date', 'of', 'a', 'transcript', 'release', ',', 'and', 'what', 'details', 'can', 'you', 'tell', 'me', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT MIN(transcript_date), other_details FROM Transcripts GROUP BY other_details;\",\n    \"query_toks\": \"['SELECT', 'MIN', '(', 'transcript_date', ')', ',', 'other_details', 'FROM', 'Transcripts', 'GROUP', 'BY', 'other_details', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'MIN', '(', 'transcript_date', ')', ',', 'other_details', 'FROM', 'Transcripts', 'GROUP', 'BY', 'other_details', ';']\",\n    \"question\": \"What is the earliest date of a transcript release, and what details can you tell me?\",\n    \"question_toks\": \"['What', 'is', 'the', 'earliest', 'date', 'of', 'a', 'transcript', 'release', ',', 'and', 'what', 'details', 'can', 'you', 'tell', 'me', '?']\"\n}"}
{"question": "How many transcripts are released?", "sql": "SELECT count(*) FROM Transcripts", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many transcripts are released?\",\n\"question_toks\": \"['How', 'many', 'transcripts', 'are', 'released', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT COUNT(*) FROM Transcripts\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Transcripts\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"FROM\", \"Transcripts\"],\n    \"question\": \"How many transcripts are released?\",\n    \"question_toks\": [\"How\", \"many\", \"transcripts\", \"are\", \"released\", \"?\"]\n}"}
{"question": "How many transcripts are listed?", "sql": "SELECT count(*) FROM Transcripts", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many transcripts are listed?\",\n\"question_toks\": \"['How', 'many', 'transcripts', 'are', 'listed', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT COUNT(transcript_id) FROM Transcripts\",\n\"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"transcript_id\", \")\", \"FROM\", \"Transcripts\"],\n\"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"transcript_id\", \")\", \"FROM\", \"Transcripts\"],\n\"question\": \"How many transcripts are listed?\",\n\"question_toks\": [\"How\", \"many\", \"transcripts\", \"are\", \"listed\", \"?\"]\n}"}
{"question": "What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the last transcript release date?\",\n\"question_toks\": \"['What', 'is', 'the', 'last', 'transcript', 'release', 'date', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'transcript_date', 'FROM', 'Transcripts', 'ORDER', 'BY', 'transcript_date', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'transcript_date', 'FROM', 'Transcripts', 'ORDER', 'BY', 'transcript_date', 'DESC', 'LIMIT']\",\n    \"question\": \"What is the last transcript release date?\",\n    \"question_toks\": \"['What', 'is', 'the', 'last', 'transcript', 'release', 'date', '?']\"\n}"}
{"question": "When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"When was the last transcript released?\",\n\"question_toks\": \"['When', 'was', 'the', 'last', 'transcript', 'released', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT MAX(transcript_date) FROM Transcripts\",\n    \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"transcript_date\", \")\", \"FROM\", \"Transcripts\"],\n    \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"transcript_date\", \")\", \"FROM\", \"Transcripts\"],\n    \"question\": \"When was the last transcript released?\",\n    \"question_toks\": [\"When\", \"was\", \"the\", \"last\", \"transcript\", \"released\", \"?\"]\n}"}
{"question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.\",\n\"question_toks\": \"['How', 'many', 'times', 'at', 'most', 'can', 'a', 'course', 'enrollment', 'result', 'show', 'in', 'different', 'transcripts', '?', 'Also', 'show', 'the', 'course', 'enrollment', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT student_course_id, COUNT(transcript_id) AS times_shown_in_transcripts \\nFROM Student_Enrolment_Courses \\nINNER JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id \\nGROUP BY student_course_id \\nORDER BY times_shown_in_transcripts DESC, student_course_id ASC\",\n    \"query_toks\": \"['SELECT', 'student_course_id', ',', 'COUNT', '(', 'transcript_id', ')', 'AS', 'times_shown_in_transcripts', 'FROM', 'Student_Enrolment_Courses', 'INNER', 'JOIN', 'Transcript_Contents', 'ON', 'Student_Enrolment_Courses', '.', 'student_course_id', '=', 'Transcript_Contents', '.', 'student_course_id', 'GROUP', 'BY', 'student_course_id', 'ORDER', 'BY', 'times_shown_in_transcripts', 'DESC', ',', 'student_course_id', 'ASC']\",\n    \"query_toks_no_value\": \"['SELECT', 'student_course_id', ',', 'COUNT', '(', 'transcript_id', ')', 'AS', 'times_shown_in_transcripts', 'FROM', 'Student_Enrolment_Courses', 'INNER', 'JOIN', 'Transcript_Contents', 'ON', 'Student_Enrolment_Courses', '.', 'student_course_id', '=', 'Transcript_Contents', '.', 'student_course_id', 'GROUP', 'BY', 'student_course_id', 'ORDER', 'BY', 'times_shown_in_transcripts', 'DESC', ',', 'student_course_id', 'ASC']\",\n    \"question\": \"How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.\",\n    \"question_toks\": \"['How', 'many', 'times', 'at', 'most', 'can', 'a', 'course', 'enrollment', 'result', 'show', 'in', 'different', 'transcripts', '?', 'Also', 'show', 'the', 'course', 'enrollment', 'id', '.']\"\n}"}
{"question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'number', 'of', 'times', 'that', 'a', 'course', 'shows', 'up', 'in', 'different', 'transcripts', 'and', 'what', 'is', 'that', 'course', \"'s\", 'enrollment', 'id', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT COUNT(*), SEC.student_enrolment_id FROM Sections SEC JOIN Student_Enrolment_Courses SEC_CRS ON SEC.section_id=SEC_CRS.course_id GROUP BY SEC_CRS.course_id ORDER BY COUNT(*) DESC LIMIT 1;\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \",\", \"SEC\", \".\", \"student_enrolment_id\", \"FROM\", \"Sections\", \"SEC\", \"JOIN\", \"Student_Enrolment_Courses\", \"SEC_CRS\", \"ON\", \"SEC\", \".\", \"section_id\", \"=\", \"SEC_CRS\", \".\", \"course_id\", \"GROUP\", \"BY\", \"SEC_CRS\", \".\", \"course_id\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \",\", \"SEC\", \".\", \"student_enrolment_id\", \"FROM\", \"Sections\", \"SEC\", \"JOIN\", \"Student_Enrolment_Courses\", \"SEC_CRS\", \"ON\", \"SEC\", \".\", \"section_id\", \"=\", \"SEC_CRS\", \".\", \"course_id\", \"GROUP\", \"BY\", \"SEC_CRS\", \".\", \"course_id\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"question\": \"What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"maximum\", \"number\", \"of\", \"times\", \"that\", \"a\", \"course\", \"shows\", \"up\", \"in\", \"different\", \"transcripts\", \"and\", \"what\", \"is\", \"that\", \"course\", \"'s\", \"enrollment\", \"id\", \"?\"]\n}"}
{"question": "Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Show the date of the transcript which shows the least number of results, also list the id.\",\n\"question_toks\": \"['Show', 'the', 'date', 'of', 'the', 'transcript', 'which', 'shows', 'the', 'least', 'number', 'of', 'results', ',', 'also', 'list', 'the', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT transcript_id, transcript_date\\nFROM Transcripts AS T1\\nWHERE transcript_date = (SELECT MIN(transcript_date)\\n                          FROM Transcripts AS T2\\n                          GROUP BY transcript_id\\n                          HAVING COUNT(*) = (SELECT MIN(cnt)\\n                                            FROM (SELECT COUNT(*) AS cnt\\n                                                  FROM Transcripts AS T3\\n                                                  GROUP BY transcript_id) AS T4))\",\n    \"query_toks\": [\"SELECT\", \"transcript_id\", \",\", \"transcript_date\", \"FROM\", \"Transcripts\", \"AS\", \"T1\", \"WHERE\", \"transcript_date\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"transcript_date\", \")\", \"FROM\", \"Transcripts\", \"AS\", \"T2\", \"GROUP\", \"BY\", \"transcript_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"cnt\", \")\", \"FROM\", \"(\", \"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"cnt\", \"FROM\", \"Transcripts\", \"AS\", \"T3\", \"GROUP\", \"BY\", \"transcript_id\", \")\", \"AS\", \"T4\", \")\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"transcript_id\", \",\", \"transcript_date\", \"FROM\", \"Transcripts\", \"AS\", \"T1\", \"WHERE\", \"transcript_date\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"transcript_date\", \")\", \"FROM\", \"Transcripts\", \"AS\", \"T2\", \"GROUP\", \"BY\", \"transcript_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"cnt\", \")\", \"FROM\", \"(\", \"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"cnt\", \"FROM\", \"Transcripts\", \"AS\", \"T3\", \"GROUP\", \"BY\", \"transcript_id\", \")\", \"AS\", \"T4\", \")\", \")\"],\n    \"question\": \"Show the date of the transcript which shows the least number of results, also list the id.\",\n    \"question_toks\": [\"Show\", \"the\", \"date\", \"of\", \"the\", \"transcript\", \"which\", \"shows\", \"the\", \"least\", \"number\", \"of\", \"results\", \",\", \"also\", \"list\", \"the\", \"id\", \".\"]\n}"}
{"question": "What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the date and id of the transcript with the least number of results?\",\n\"question_toks\": \"['What', 'is', 'the', 'date', 'and', 'id', 'of', 'the', 'transcript', 'with', 'the', 'least', 'number', 'of', 'results', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT transcript_id, transcript_date FROM Transcripts LEFT OUTER JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY transcript_id, transcript_date ORDER BY COUNT(*) ASC LIMIT 1\",\n    \"query_toks\": [\"SELECT\", \"transcript_id\", \",\", \"transcript_date\", \"FROM\", \"Transcripts\", \"LEFT\", \"OUTER\", \"JOIN\", \"Transcript_Contents\", \"ON\", \"Transcripts\", \".\", \"transcript_id\", \"=\", \"Transcript_Contents\", \".\", \"transcript_id\", \"GROUP\", \"BY\", \"transcript_id\", \",\", \"transcript_date\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"ASC\", \"LIMIT\", \"1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"transcript_id\", \",\", \"transcript_date\", \"FROM\", \"Transcripts\", \"LEFT\", \"OUTER\", \"JOIN\", \"Transcript_Contents\", \"ON\", \"Transcripts\", \".\", \"transcript_id\", \"=\", \"Transcript_Contents\", \".\", \"transcript_id\", \"GROUP\", \"BY\", \"transcript_id\", \",\", \"transcript_date\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"ASC\", \"LIMIT\", \"1\"],\n    \"question\": \"What is the date and id of the transcript with the least number of results?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"date\", \"and\", \"id\", \"of\", \"the\", \"transcript\", \"with\", \"the\", \"least\", \"number\", \"of\", \"results\", \"?\"]\n}"}
{"question": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Find the semester when both Master students and Bachelor students got enrolled in.\",\n\"question_toks\": \"['Find', 'the', 'semester', 'when', 'both', 'Master', 'students', 'and', 'Bachelor', 'students', 'got', 'enrolled', 'in', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT S1.semester_name FROM Semesters S1 JOIN (SELECT E1.semester_id FROM Student_Enrolment E1 JOIN Degree_Programs D1 ON E1.degree_program_id = D1.degree_program_id WHERE D1.degree_summary_name = 'Master' INTERSECT SELECT E2.semester_id FROM Student_Enrolment E2 JOIN Degree_Programs D2 ON E2.degree_program_id = D2.degree_program_id WHERE D2.degree_summary_name = 'Bachelor') S2 ON S1.semester_id = S2.semester_id\",\n\"query_toks\": \"['SELECT', 'S1', '.', 'semester_name', 'FROM', 'Semesters', 'S1', 'JOIN', '(', 'SELECT', 'E1', '.', 'semester_id', 'FROM', 'Student_Enrolment', 'E1', 'JOIN', 'Degree_Programs', 'D1', 'ON', 'E1', '.', 'degree_program_id', '=', 'D1', '.', 'degree_program_id', 'WHERE', 'D1', '.', 'degree_summary_name', '=',\", \"'Master'\", 'INTERSECT', 'SELECT', 'E2', '.', 'semester_id', 'FROM', 'Student_Enrolment', 'E2', 'JOIN', 'Degree_Programs', 'D2', 'ON', 'E2', '.', 'degree_program_id', '=', 'D2', '.', 'degree_program_id', 'WHERE', 'D2', '.', 'degree_summary_name', '=',\", \"'Bachelor'\", ')', 'S2', 'ON', 'S1', '.', 'semester_id', '=', 'S2', '.', 'semester_id']\",\n\"query_toks_no_value\": \"['SELECT', 'S1', '.', 'semester_name', 'FROM', 'Semesters', 'S1', 'JOIN', '(', 'SELECT', 'E1', '.', 'semester_id', 'FROM', 'Student_Enrolment', 'E1', 'JOIN', 'Degree_Programs', 'D1', 'ON', 'E1', '.', 'degree_program_id', '=', 'D1', '.', 'degree_program_id', 'WHERE', 'D1', '.', 'degree_summary_name', '=',\", \"'N/A'\", 'INTERSECT', 'SELECT', 'E2', '.', 'semester_id', 'FROM', 'Student_Enrolment', 'E2', 'JOIN', 'Degree_Programs', 'D2', 'ON', 'E2', '.', 'degree_program_id', '=', 'D2', '.', 'degree_program_id', 'WHERE', 'D2', '.', 'degree_summary_name', '=',\", \"'N/A'\", ')', 'S2', 'ON', 'S1', '.', 'semester_id', '=', 'S2', '.', 'semester_id']\",\n\"question\": \"Find the semester when both Master students and Bachelor students got enrolled in.\",\n\"question_toks\": \"['Find', 'the', 'semester', 'when', 'both', 'Master', 'students', 'and', 'Bachelor', 'students', 'got', 'enrolled', 'in', '.']\"\n}"}
{"question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the id of the semester that had both Masters and Bachelors students enrolled?\",\n\"question_toks\": \"['What', 'is', 'the', 'id', 'of', 'the', 'semester', 'that', 'had', 'both', 'Masters', 'and', 'Bachelors', 'students', 'enrolled', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT se.semester_id\\nFROM Student_Enrolment se\\nINNER JOIN Degree_Programs dp1 ON se.degree_program_id = dp1.degree_program_id AND dp1.degree_summary_name = 'Masters'\\nINNER JOIN Degree_Programs dp2 ON se.degree_program_id = dp2.degree_program_id AND dp2.degree_summary_name = 'Bachelors'\\nGROUP BY se.semester_id\\nHAVING COUNT(DISTINCT se.student_id) > 1\",\n    \"query_toks\": \"['SELECT', 'se', '.', 'semester_id', 'FROM', 'Student_Enrolment', 'se', 'INNER', 'JOIN', 'Degree_Programs', 'dp1', 'ON', 'se', '.', 'degree_program_id', '=', 'dp1', '.', 'degree_program_id', 'AND', 'dp1', '.', 'degree_summary_name'...UDENT_ID)', '>', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'se', '.', 'semester_id', 'FROM', 'Student_Enrolment', 'se', 'INNER', 'JOIN', 'Degree_Programs', 'dp1', 'ON', 'se', '.', 'degree_program_id', '=', 'dp1', '.', 'degree_program_id', 'AND', 'dp1', '.', 'degree_summ...',\n    \"question\": \"What is the id of the semester that had both Masters and Bachelors students enrolled?\",\n    \"question_toks\": \"['What', 'is', 'the', 'id', 'of', 'the', 'semester', 'that', 'had', 'both', 'Masters', 'and', 'Bachelors', 'students', 'enrolled', '?']\"\n}"}
{"question": "How many different addresses do the students currently live?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"How many different addresses do the students currently live?\",\n\"question_toks\": \"['How', 'many', 'different', 'addresses', 'do', 'the', 'students', 'currently', 'live', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT COUNT(DISTINCT current_address_id) FROM Students\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"current_address_id\", \")\", \"FROM\", \"Students\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"current_address_id\", \")\", \"FROM\", \"Students\"],\n  \"question\": \"How many different addresses do the students currently live?\",\n  \"question_toks\": [\"How\", \"many\", \"different\", \"addresses\", \"do\", \"the\", \"students\", \"currently\", \"live\", \"?\"]\n}"}
{"question": "What are the different addresses that have students living there?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the different addresses that have students living there?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'addresses', 'that', 'have', 'students', 'living', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT DISTINCT a.line_1, a.line_2, a.line_3, a.city, a.state_province_county, a.zip_postcode, a.country FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id OR s.permanent_address_id = a.address_id\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"a\", \".\", \"line_1\", \",\", \"a\", \".\", \"line_2\", \",\", \"a\", \".\", \"line_3\", \",\", \"a\", \".\", \"city\", \",\", \"a\", \".\", \"state_province_county\", \",\", \"a\", \".\", \"zip_postcode\", \",\", \"a\", \".\", \"country\", \"FROM\", \"Students\", \"s\", \"JOIN\", \"Addresses\", \"a\", \"ON\", \"s\", \".\", \"current_address_id\", \"=\", \"a\", \".\", \"address_id\", \"OR\", \"s\", \".\", \"permanent_address_id\", \"=\", \"a\", \".\", \"address_id\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"a\", \".\", \"line_1\", \",\", \"a\", \".\", \"line_2\", \",\", \"a\", \".\", \"line_3\", \",\", \"a\", \".\", \"city\", \",\", \"a\", \".\", \"state_province_county\", \",\", \"a\", \".\", \"zip_postcode\", \",\", \"a\", \".\", \"country\", \"FROM\", \"Students\", \"s\", \"JOIN\", \"Addresses\", \"a\", \"ON\", \"s\", \".\", \"current_address_id\", \"=\", \"a\", \".\", \"address_id\", \"OR\", \"s\", \".\", \"permanent_address_id\", \"=\", \"a\", \".\", \"address_id\"],\n  \"question\": \"What are the different addresses that have students living there?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"different\", \"addresses\", \"that\", \"have\", \"students\", \"living\", \"there\", \"?\"]\n}"}
{"question": "List all the student details in reversed lexicographical order.", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"List all the student details in reversed lexicographical order.\",\n\"question_toks\": \"['List', 'all', 'the', 'student', 'details', 'in', 'reversed', 'lexicographical', 'order', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT * FROM Students ORDER BY last_name DESC;\",\n    \"query_toks\": [\"SELECT\", \"*\", \"FROM\", \"Students\", \"ORDER\", \"BY\", \"last_name\", \"DESC\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"*\", \"FROM\", \"Students\", \"ORDER\", \"BY\", \"last_name\", \"DESC\", \";\"],\n    \"question\": \"List all the student details in reversed lexicographical order.\",\n    \"question_toks\": [\"List\", \"all\", \"the\", \"student\", \"details\", \"in\", \"reversed\", \"lexicographical\", \"order\", \".\"]\n}"}
{"question": "What other details can you tell me about students in reverse alphabetical order?", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What other details can you tell me about students in reverse alphabetical order?\",\n\"question_toks\": \"['What', 'other', 'details', 'can', 'you', 'tell', 'me', 'about', 'students', 'in', 'reverse', 'alphabetical', 'order', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"student_transcripts_tracking\",\n  \"query\": \"SELECT * FROM Students ORDER BY last_name DESC\",\n  \"query_toks\": [\"SELECT\", \"*\", \"FROM\", \"Students\", \"ORDER\", \"BY\", \"last_name\", \"DESC\"],\n  \"query_toks_no_value\": [\"SELECT\", \"*\", \"FROM\", \"Students\", \"ORDER\", \"BY\", \"last_name\", \"DESC\"],\n  \"question\": \"What other details can you tell me about students in reverse alphabetical order?\",\n  \"question_toks\": [\"What\", \"other\", \"details\", \"can\", \"you\", \"tell\", \"me\", \"about\", \"students\", \"in\", \"reverse\", \"alphabetical\", \"order\", \"?\"]\n}"}
{"question": "Describe the section h.", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Describe the section h.\",\n\"question_toks\": \"['Describe', 'the', 'section', 'h', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT section_description FROM Sections AS T1 WHERE T1.section_name='h'\",\n    \"query_toks\": [\"SELECT\", \"section_description\", \"FROM\", \"Sections\", \"AS\", \"T1\", \"WHERE\", \"T1.section_name='h'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"section_description\", \"FROM\", \"Sections\", \"AS\", \"T1\", \"WHERE\", \"T1.section_name=\", \"'h'\"],\n    \"question\": \"Describe the section h.\",\n    \"question_toks\": [\"Describe\", \"the\", \"section\", \"h\", \".\"]\n}"}
{"question": "What is the description for the section named h?", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What is the description for the section named h?\",\n\"question_toks\": \"['What', 'is', 'the', 'description', 'for', 'the', 'section', 'named', 'h', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"student_transcripts_tracking\",\n\"query\": \"SELECT Sections.section_description FROM Sections WHERE Sections.section_name='h'\",\n\"query_toks\": \"['SELECT', 'Sections', '.', 'section_description', 'FROM', 'Sections', 'WHERE', 'Sections', '.', 'section_name', '=', '\\\"h\\\"', '']\",\n\"query_toks_no_value\": \"['SELECT', 'Sections', '.', 'section_description', 'FROM', 'Sections', 'WHERE', 'Sections', '.', 'section_name', '=', '']\",\n\"question\": \"What is the description for the section named h?\",\n\"question_toks\": \"['What', 'is', 'the', 'description', 'for', 'the', 'section', 'named', 'h', '?']\"\n}"}
{"question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .\",\n\"question_toks\": \"['Find', 'the', 'first', 'name', 'of', 'the', 'students', 'who', 'permanently', 'live', 'in', 'the', 'country', 'Haiti', 'or', 'have', 'the', 'cell', 'phone', 'number', '09700166582', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT students.first_name FROM Students students JOIN Addresses addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'\",\n    \"query_toks\": \"['SELECT', 'students.first_name', 'FROM', 'Students', 'students', 'JOIN', 'Addresses', 'addresses', 'ON', 'students.permanent_address_id', '=', 'addresses.address_id', 'WHERE', 'addresses.country', '=', ''Haiti'', 'OR', 'students.cell_mobile_number', '=', ''09700166582''']\",\n    \"query_toks_no_value\": \"['SELECT', 'students.first_name', 'FROM', 'Students', 'students', 'JOIN', 'Addresses', 'addresses', 'ON', 'students.permanent_address_id', '=', 'addresses.address_id', 'WHERE', 'addresses.country', '=', '', 'OR', 'students.cell_mobile_number', '=', '']\",\n    \"question\": \"Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .\",\n    \"question_toks\": \"['Find', 'the', 'first', 'name', 'of', 'the', 'students', 'who', 'permanently', 'live', 'in', 'the', 'country', 'Haiti', 'or', 'have', 'the', 'cell', 'phone', 'number', '09700166582', '.']\"\n}"}
{"question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAddresses: 'address_id', 'line_1', 'line_2', 'line_3', 'city', 'zip_postcode', 'state_province_county', 'country', 'other_address_details'\nCourses: 'course_id', 'course_name', 'course_description', 'other_details'\nDepartments: 'department_id', 'department_name', 'department_description', 'other_details'\nDegree_Programs: 'degree_program_id', 'department_id', 'degree_summary_name', 'degree_summary_description', 'other_details'\nSections: 'section_id', 'course_id', 'section_name', 'section_description', 'other_details'\nSemesters: 'semester_id', 'semester_name', 'semester_description', 'other_details'\nStudents: 'student_id', 'current_address_id', 'permanent_address_id', 'first_name', 'middle_name', 'last_name', 'cell_mobile_number', 'email_address', 'ssn', 'date_first_registered', 'date_left', 'other_student_details'\nStudent_Enrolment: 'student_enrolment_id', 'degree_program_id', 'semester_id', 'student_id', 'other_details'\nStudent_Enrolment_Courses: 'student_course_id', 'course_id', 'student_enrolment_id'\nTranscripts: 'transcript_id', 'transcript_date', 'other_details'\nTranscript_Contents: 'student_course_id', 'transcript_id'\n\n{\"db_id\": \"student_transcripts_tracking\",\n\"question\": \"What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?\",\n\"question_toks\": \"['What', 'are', 'the', 'first', 'names', 'of', 'the', 'students', 'who', 'live', 'in', 'Haiti', 'permanently', 'or', 'have', 'the', 'cell', 'phone', 'number', '09700166582', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"student_transcripts_tracking\",\n    \"query\": \"SELECT DISTINCT first_name FROM Students WHERE country='Haiti' AND permanent_address_id IN (SELECT address_id FROM Addresses WHERE country='Haiti') OR cell_mobile_number='09700166582'\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'first_name', 'FROM', 'Students', 'WHERE', 'country', '=', \\\"'Haiti'\\\", 'AND', 'permanent_address_id', 'IN', '(', 'SELECT', 'address_id', 'FROM', 'Addresses', 'WHERE', 'country', '=', \\\"'Haiti'\\\")', 'OR', 'cell_mobile_number', '=', \\\"'09700166582'\\\"']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'first_name', 'FROM', 'Students', 'WHERE', 'country', '=', 'AND', 'permanent_address_id', 'IN', '(', 'SELECT', 'address_id', 'FROM', 'Addresses', 'WHERE', 'country', '=', ')', 'OR', 'cell_mobile_number', '=', '']\",\n    \"question\": \"What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?\",\n    \"question_toks\": \"['What', 'are', 'the', 'first', 'names', 'of', 'the', 'students', 'who', 'live', 'in', 'Haiti', 'permanently', 'or', 'have', 'the', 'cell', 'phone', 'number', '09700166582', '?']\"\n}"}
{"question": "List the title of all cartoons in alphabetical order.", "sql": "SELECT Title FROM Cartoon ORDER BY title", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List the title of all cartoons in alphabetical order.\",\n\"question_toks\": \"['List', 'the', 'title', 'of', 'all', 'cartoons', 'in', 'alphabetical', 'order', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT `Title` FROM `Cartoon` ORDER BY `Title` ASC\",\n  \"query_toks\": [\"SELECT\", \"`Title`\", \"FROM\", \"`Cartoon`\", \"ORDER\", \"BY\", \"`Title`\", \"ASC\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Title\", \"FROM\", \"Cartoon\", \"ORDER\", \"BY\", \"Title\", \"ASC\"],\n  \"question\": \"List the title of all cartoons in alphabetical order.\",\n  \"question_toks\": [\"List\", \"the\", \"title\", \"of\", \"all\", \"cartoons\", \"in\", \"alphabetical\", \"order\", \".\"]\n}"}
{"question": "What are the titles of the cartoons sorted alphabetically?", "sql": "SELECT Title FROM Cartoon ORDER BY title", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the titles of the cartoons sorted alphabetically?\",\n\"question_toks\": \"['What', 'are', 'the', 'titles', 'of', 'the', 'cartoons', 'sorted', 'alphabetically', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Title FROM Cartoon ORDER BY Title ASC\",\n  \"query_toks\": [\"SELECT\", \"Title\", \"FROM\", \"Cartoon\", \"ORDER\", \"BY\", \"Title\", \"ASC\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Title\", \"FROM\", \"Cartoon\", \"ORDER\", \"BY\", \"Title\", \"ASC\"],\n  \"question\": \"What are the titles of the cartoons sorted alphabetically?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"titles\", \"of\", \"the\", \"cartoons\", \"sorted\", \"alphabetically\", \"?\"]\n}"}
{"question": "List all cartoon directed by \"Ben Jones\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List all cartoon directed by \"Ben Jones\".\",\n\"question_toks\": \"['List', 'all', 'cartoon', 'directed', 'by', '``', 'Ben', 'Jones', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Title FROM Cartoon T1 WHERE T1.Directed_by = 'Ben Jones'\",\n    \"query_toks\": \"['SELECT', 'Title', 'FROM', 'Cartoon', 'T1', 'WHERE', 'T1', '.', 'Directed_by', '=', \\\"'Ben Jones'\\\"', 'ORDER', 'BY', 'T1', '.', 'Title']\",\n    \"query_toks_no_value\": \"['SELECT', 'Title', 'FROM', 'Cartoon', 'T1', 'WHERE', 'T1', '.', 'Directed_by', '=', 'ORDER', 'BY', 'T1', '.', 'Title']\",\n    \"question\": \"List all cartoon directed by \\\"Ben Jones\\\".\",\n    \"question_toks\": \"['List', 'all', 'cartoon', 'directed', 'by', '``', 'Ben', 'Jones', \"''\", '.']\"\n}"}
{"question": "What are the names of all cartoons directed by Ben Jones?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the names of all cartoons directed by Ben Jones?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'cartoons', 'directed', 'by', 'Ben', 'Jones', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Title FROM Cartoon T1 WHERE T1.Directed_by='Ben Jones'\",\n    \"query_toks\": \"['SELECT', 'Title', 'FROM', 'Cartoon', 'T1', 'WHERE', 'T1', '.', 'Directed_by', '=', \\\"'Ben Jones'\\\"],\",\n    \"query_toks_no_value\": \"['SELECT', 'Title', 'FROM', 'Cartoon', 'T1', 'WHERE', 'T1', '.', 'Directed_by', '=', '?']\",\n    \"question\": \"What are the names of all cartoons directed by Ben Jones?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'cartoons', 'directed', 'by', 'Ben', 'Jones', '?']\"\n}"}
{"question": "How many cartoons were written by \"Joseph Kuhr\"?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"How many cartoons were written by \"Joseph Kuhr\"?\",\n\"question_toks\": \"['How', 'many', 'cartoons', 'were', 'written', 'by', '``', 'Joseph', 'Kuhr', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT COUNT(*) FROM Cartoon T1 WHERE T1.Written_by = 'Joseph Kuhr'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Cartoon\", \"T1\", \"WHERE\", \"T1\", \".\", \"Written_by\", \"=\", \"'Joseph\", \"Kuhr'\", \"\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Cartoon\", \"T1\", \"WHERE\", \"T1\", \".\", \"Written_by\", \"=\", \"?\"],\n  \"question\": \"How many cartoons were written by 'Joseph Kuhr'?\",\n  \"question_toks\": [\"How\", \"many\", \"cartoons\", \"were\", \"written\", \"by\", \"'Joseph\", \"Kuhr\", \"'?\"]\n}"}
{"question": "What is the number of cartoones written by Joseph Kuhr?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the number of cartoones written by Joseph Kuhr?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'cartoones', 'written', 'by', 'Joseph', 'Kuhr', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT COUNT(*) FROM Cartoon T1 WHERE T1.Written_by = 'Joseph Kuhr'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Cartoon\", \"T1\", \"WHERE\", \"T1\", \".\", \"Written_by\", \"=\", \"'\", \"Joseph\", \"Kuhr\", \"'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Cartoon\", \"T1\", \"WHERE\", \"T1\", \".\", \"Written_by\", \"=\", \"?\"],\n    \"question\": \"What is the number of cartoons written by Joseph Kuhr?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"number\", \"of\", \"cartoons\", \"written\", \"by\", \"Joseph\", \"Kuhr\", \"?\"]\n}"}
{"question": "list all cartoon titles and their directors ordered by their air date", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"list all cartoon titles and their directors ordered by their air date\",\n\"question_toks\": \"['list', 'all', 'cartoon', 'titles', 'and', 'their', 'directors', 'ordered', 'by', 'their', 'air', 'date']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT c.Title, c.Directed_by FROM Cartoon AS c ORDER BY c.Original_air_date\",\n  \"query_toks\": [\"SELECT\", \"c\", \".\", \"Title\", \",\", \"c\", \".\", \"Directed_by\", \"FROM\", \"Cartoon\", \"AS\", \"c\", \"ORDER\", \"BY\", \"c\", \".\", \"Original_air_date\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Cartoon\", \"AS\", \"c\", \"ORDER\", \"BY\", \"Original_air_date\"],\n  \"question\": \"list all cartoon titles and their directors ordered by their air date\",\n  \"question_toks\": [\"list\", \"all\", \"cartoon\", \"titles\", \"and\", \"their\", \"directors\", \"ordered\", \"by\", \"their\", \"air\", \"date\"]\n}"}
{"question": "What is the name and directors of all the cartoons that are ordered by air date?", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the name and directors of all the cartoons that are ordered by air date?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'and', 'directors', 'of', 'all', 'the', 'cartoons', 'that', 'are', 'ordered', 'by', 'air', 'date', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date\",\n  \"query_toks\": [\"SELECT\", \"Title\", \",\", \"Directed_by\", \"FROM\", \"Cartoon\", \"ORDER\", \"BY\", \"Original_air_date\"],\n  \"query_toks_no_value\": [\"SELECT\", \"*\", \"FROM\", \"Cartoon\", \"ORDER\", \"BY\", \"Original_air_date\"],\n  \"question\": \"What is the name and directors of all the cartoons that are ordered by air date?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"name\", \"and\", \"directors\", \"of\", \"all\", \"the\", \"cartoons\", \"that\", \"are\", \"ordered\", \"by\", \"air\", \"date\", \"?\"]\n}"}
{"question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".\",\n\"question_toks\": \"['List', 'the', 'title', 'of', 'all', 'cartoon', 'directed', 'by', '``', 'Ben', 'Jones', \"''\", 'or', '``', 'Brandon', 'Vietti', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';\",\n  \"query_toks\": [\"SELECT\", \"Title\", \"FROM\", \"Cartoon\", \"WHERE\", \"Directed_by\", \"=\", \"'Ben Jones'\", \"OR\", \"Directed_by\", \"=\", \"'Brandon Vietti'\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Title\", \"FROM\", \"Cartoon\", \"WHERE\", \"Directed_by\", \"=\", \"OR\", \"Directed_by\", \"=\", \";\"],\n  \"question\": \"List the title of all cartoon directed by \\\"Ben Jones\\\" or \\\"Brandon Vietti\\\".\",\n  \"question_toks\": [\"List\", \"the\", \"title\", \"of\", \"all\", \"cartoon\", \"directed\", \"by\", \"\\\"Ben\", \"Jones\\\"\", \"or\", \"\\\"Brandon\", \"Vietti\\\"\",\".\"]\n}"}
{"question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?\",\n\"question_toks\": \"['What', 'are', 'the', 'titles', 'of', 'all', 'cartoons', 'directed', 'by', 'Ben', 'Jones', 'or', 'Brandon', 'Vietti', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';\",\n  \"query_toks\": \"['SELECT', 'Title', 'FROM', 'Cartoon', 'WHERE', 'Directed_by', '=', ''Ben Jones'', 'OR', 'Directed_by', '=', ''Brandon Vietti'';',\",\n  \"query_toks_no_value\": \"['SELECT', 'Title', 'FROM', 'Cartoon', 'WHERE', 'Directed_by', '=', '', 'OR', 'Directed_by', '=', '';',\",\n  \"question\": \"What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?\",\n  \"question_toks\": \"['What', 'are', 'the', 'titles', 'of', 'all', 'cartoons', 'directed', 'by', 'Ben', 'Jones', 'or', 'Brandon', 'Vietti', '?']\"\n}"}
{"question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"Which country has the most of TV Channels? List the country and number of TV Channels it has.\",\n\"question_toks\": \"['Which', 'country', 'has', 'the', 'most', 'of', 'TV', 'Channels', '?', 'List', 'the', 'country', 'and', 'number', 'of', 'TV', 'Channels', 'it', 'has', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"tvshow\",\n\"query\": \"SELECT Country, COUNT(id) AS number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY number_of_TV_Channels DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'Country', ',', 'COUNT', '(', 'id', ')', 'AS', 'number_of_TV_Channels', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Country', 'ORDER', 'BY', 'number_of_TV_Channels', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'Country', ',', 'COUNT', '(', ')', 'AS', 'number_of_TV_Channels', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Country', 'ORDER', 'BY', 'number_of_TV_Channels', 'DESC', 'LIMIT', '1']\",\n\"question\": \"Which country has the most of TV Channels? List the country and number of TV Channels it has.\",\n\"question_toks\": \"['Which', 'country', 'has', 'the', 'most', 'of', 'TV', 'Channels', '?', 'List', 'the', 'country', 'and', 'number', 'of', 'TV', 'Channels', 'it', 'has', '.']\"}"}
{"question": "What is the country with the most number of TV Channels and how many does it have?", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the country with the most number of TV Channels and how many does it have?\",\n\"question_toks\": \"['What', 'is', 'the', 'country', 'with', 'the', 'most', 'number', 'of', 'TV', 'Channels', 'and', 'how', 'many', 'does', 'it', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Country, COUNT(*) as number_of_channels FROM TV_Channel GROUP BY Country ORDER BY number_of_channels DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'Country', ',', 'COUNT', '(', '*', ')', 'as', 'number_of_channels', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Country', 'ORDER', 'BY', 'number_of_channels', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'Country', ',', 'COUNT', '(', '*', ')', 'as', 'number_of_channels', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Country', 'ORDER', 'BY', 'number_of_channels', 'DESC', 'LIMIT', '1']\",\n    \"question\": \"What is the country with the most number of TV Channels and how many does it have?\",\n    \"question_toks\": \"['What', 'is', 'the', 'country', 'with', 'the', 'most', 'number', 'of', 'TV', 'Channels', 'and', 'how', 'many', 'does', 'it', 'have', '?']\"\n}"}
{"question": "List the number of different series names and contents in the TV Channel table.", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List the number of different series names and contents in the TV Channel table.\",\n\"question_toks\": \"['List', 'the', 'number', 'of', 'different', 'series', 'names', 'and', 'contents', 'in', 'the', 'TV', 'Channel', 'table', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel\",\n  \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'series_name', ')', ',', 'COUNT', '(', 'DISTINCT', 'Content', ')', 'FROM', 'TV_Channel']\",\n  \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'series_name', ')', ',', 'COUNT', '(', 'DISTINCT', 'Content', ')', 'FROM', 'TV_Channel']\",\n  \"question\": \"List the number of different series names and contents in the TV Channel table.\",\n  \"question_toks\": \"['List', 'the', 'number', 'of', 'different', 'series', 'names', 'and', 'contents', 'in', 'the', 'TV', 'Channel', 'table', '.']\"\n}"}
{"question": "How many different series and contents are listed in the TV Channel table?", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"How many different series and contents are listed in the TV Channel table?\",\n\"question_toks\": \"['How', 'many', 'different', 'series', 'and', 'contents', 'are', 'listed', 'in', 'the', 'TV', 'Channel', 'table', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel\",\n  \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'TV_Channel', '.', 'series_name', ')', ',', 'COUNT', '(', 'DISTINCT', 'TV_Channel', '.', 'Content', ')', 'FROM', 'TV_Channel']\",\n  \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'TV_Channel', '.', 'series_name', ')', ',', 'COUNT', '(', 'DISTINCT', 'TV_Channel', '.', 'Content', ')', 'FROM', 'TV_Channel']\",\n  \"question\": \"How many different series and contents are listed in the TV Channel table?\",\n  \"question_toks\": \"['How', 'many', 'different', 'series', 'and', 'contents', 'are', 'listed', 'in', 'the', 'TV', 'Channel', 'table', '?']\"\n}"}
{"question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the content of TV Channel with serial name \"Sky Radio\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'content', 'of', 'TV', 'Channel', 'with', 'serial', 'name', '``', 'Sky', 'Radio', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'\",\n    \"query_toks\": \"['SELECT', 'Content', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=', ``', 'Sky', 'Radio', \"''\"]\",\n    \"query_toks_no_value\": \"['SELECT', 'Content', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=', '']\",\n    \"question\": \"What is the content of TV Channel with serial name \\\"Sky Radio\\\"?\",\n    \"question_toks\": \"['What', 'is', 'the', 'content', 'of', 'TV', 'Channel', 'with', 'serial', 'name', '``', 'Sky', 'Radio', \"''\", '?']\"\n}"}
{"question": "What is the content of the series Sky Radio?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the content of the series Sky Radio?\",\n\"question_toks\": \"['What', 'is', 'the', 'content', 'of', 'the', 'series', 'Sky', 'Radio', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"tvshow\",\n \"query\": \"SELECT Content FROM TV_Channel WHERE series_name='Sky Radio'\",\n \"query_toks\": \"['SELECT', 'Content', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=', ''Sky', 'Radio''']\",\n \"query_toks_no_value\": \"['SELECT', 'Content', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=']\",\n \"question\": \"What is the content of the series Sky Radio?\",\n \"question_toks\": \"['What', 'is', 'the', 'content', 'of', 'the', 'series', 'Sky', 'Radio', '?']}\""}
{"question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the Package Option of TV Channel with serial name \"Sky Radio\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'Package', 'Option', 'of', 'TV', 'Channel', 'with', 'serial', 'name', '``', 'Sky', 'Radio', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Package_Option FROM TV_Channel WHERE series_name='Sky Radio'\",\n  \"query_toks\": [\"SELECT\", \"Package_Option\", \"FROM\", \"TV_Channel\", \"WHERE\", \"series_name\", \"=\", \"'Sky Radio'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Package_Option\", \"FROM\", \"TV_Channel\", \"WHERE\", \"series_name\", \"=\"],\n  \"question\": \"What is the Package Option of TV Channel with serial name \\\"Sky Radio\\\"?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"Package\", \"Option\", \"of\", \"TV\", \"Channel\", \"with\", \"serial\", \"name\", \"\\\"Sky\", \"Radio\\\"?\"]\n}"}
{"question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the Package Options of the TV Channels whose series names are Sky Radio?\",\n\"question_toks\": \"['What', 'are', 'the', 'Package', 'Options', 'of', 'the', 'TV', 'Channels', 'whose', 'series', 'names', 'are', 'Sky', 'Radio', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'\",\n  \"query_toks\": \"['SELECT', 'Package_Option', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=', ''Sky Radio'']\",\n  \"query_toks_no_value\": \"['SELECT', 'Package_Option', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=']\",\n  \"question\": \"What are the Package Options of the TV Channels whose series names are Sky Radio?\",\n  \"question_toks\": \"['What', 'are', 'the', 'Package', 'Options', 'of', 'the', 'TV', 'Channels', 'whose', 'series', 'names', 'are', 'Sky', 'Radio', '?']\"\n}"}
{"question": "How many TV Channel using language English?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"How many TV Channel using language English?\",\n\"question_toks\": \"['How', 'many', 'TV', 'Channel', 'using', 'language', 'English', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT COUNT(*) FROM TV_Channel WHERE Language='English'\",\n  \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'TV_Channel', 'WHERE', 'Language', '=', ''English'']\",\n  \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'TV_Channel', 'WHERE', 'Language', '=', 'value']\",\n  \"question\": \"How many TV Channel using language English?\",\n  \"question_toks\": \"['How', 'many', 'TV', 'Channel', 'using', 'language', 'English', '?']\"\n}"}
{"question": "How many TV Channels use the English language?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"How many TV Channels use the English language?\",\n\"question_toks\": \"['How', 'many', 'TV', 'Channels', 'use', 'the', 'English', 'language', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"TV_Channel\", \"WHERE\", \"Language\", \"=\", \"'English'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"TV_Channel\", \"WHERE\", \"Language\", \"=\", \"?\"],\n  \"question\": \"How many TV Channels use the English language?\",\n  \"question_toks\": [\"How\", \"many\", \"TV\", \"Channels\", \"use\", \"the\", \"English\", \"language\", \"?\"]\n}"}
{"question": "List the language used least number of TV Channel. List language and number of TV Channel.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List the language used least number of TV Channel. List language and number of TV Channel.\",\n\"question_toks\": \"['List', 'the', 'language', 'used', 'least', 'number', 'of', 'TV', 'Channel', '.', 'List', 'language', 'and', 'number', 'of', 'TV', 'Channel', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"tvshow\",\n\"query\": \"SELECT Language, COUNT(TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'Language', ',', 'COUNT', '(', 'TV_Channel', '.', 'id', ')', 'AS', 'num_channels', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Language', 'ORDER', 'BY', 'num_channels', 'ASC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'Language', ',', 'COUNT', '(', 'TV_Channel', '.', 'id', ')', 'AS', 'num_channels', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Language', 'ORDER', 'BY', 'num_channels', 'ASC', 'LIMIT', '1']\",\n\"question\": \"List the language used least number of TV Channel. List language and number of TV Channel.\",\n\"question_toks\": \"['List', 'the', 'language', 'used', 'least', 'number', 'of', 'TV', 'Channel', '.', 'List', 'language', 'and', 'number', 'of', 'TV', 'Channel', '.']\"\n}"}
{"question": "What are the languages used by the least number of TV Channels and how many channels use it?", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the languages used by the least number of TV Channels and how many channels use it?\",\n\"question_toks\": \"['What', 'are', 'the', 'languages', 'used', 'by', 'the', 'least', 'number', 'of', 'TV', 'Channels', 'and', 'how', 'many', 'channels', 'use', 'it', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"tvshow\",\n \"query\": \"SELECT Language, COUNT(DISTINCT TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'Language', ',', 'COUNT', '(', 'DISTINCT', 'TV_Channel', '.', 'id', ')', 'AS', 'Channel_Count', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Language', 'ORDER', 'BY', 'Channel_Count', 'ASC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Language', ',', 'COUNT', '(', 'DISTINCT', 'TV_Channel', '.', 'id', ')', 'AS', 'Channel_Count', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Language', 'ORDER', 'BY', 'Channel_Count', 'ASC', 'LIMIT', '1']\",\n \"question\": \"What are the languages used by the least number of TV Channels and how many channels use it?\",\n \"question_toks\": \"['What', 'are', 'the', 'languages', 'used', 'by', 'the', 'least', 'number', 'of', 'TV', 'Channels', 'and', 'how', 'many', 'channels', 'use', 'it', '?']}\"\n"}
{"question": "List each language and the number of TV Channels using it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List each language and the number of TV Channels using it.\",\n\"question_toks\": \"['List', 'each', 'language', 'and', 'the', 'number', 'of', 'TV', 'Channels', 'using', 'it', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language\",\n    \"query_toks\": \"['SELECT', 'Language', ',', 'COUNT', '(', '*', ')', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Language']\",\n    \"query_toks_no_value\": \"['SELECT', 'Language', ',', 'COUNT', '(', '*', ')', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Language']\",\n    \"question\": \"List each language and the number of TV Channels using it.\",\n    \"question_toks\": \"['List', 'each', 'language', 'and', 'the', 'number', 'of', 'TV', 'Channels', 'using', 'it', '.']\"\n}"}
{"question": "For each language, list the number of TV Channels that use it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"For each language, list the number of TV Channels that use it.\",\n\"question_toks\": \"['For', 'each', 'language', ',', 'list', 'the', 'number', 'of', 'TV', 'Channels', 'that', 'use', 'it', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Language, COUNT(DISTINCT id) AS num_TV_Channels\\nFROM TV_Channel\\nGROUP BY Language\",\n    \"query_toks\": [\"SELECT\", \"Language\", \",\", \"COUNT(DISTINCT\", \"id)\", \"AS\", \"num_TV_Channels\", \"FROM\", \"TV_Channel\", \"GROUP\", \"BY\", \"Language\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Language\", \",\", \"COUNT(DISTINCT\", \"id)\", \"AS\", \"num_TV_Channels\", \"FROM\", \"TV_Channel\", \"GROUP\", \"BY\", \"Language\"],\n    \"question\": \"For each language, list the number of TV Channels that use it.\",\n    \"question_toks\": [\"For\", \"each\", \"language\", \",\", \"list\", \"the\", \"number\", \"of\", \"TV\", \"Channels\", \"that\", \"use\", \"it\", \".\"]\n}"}
{"question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.\",\n\"question_toks\": \"['What', 'is', 'the', 'TV', 'Channel', 'that', 'shows', 'the', 'cartoon', '``', 'The', 'Rise', 'of', 'the', 'Blue', 'Beetle', '!', \"''\", '?', 'List', 'the', 'TV', 'Channel', \"'s\", 'series', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'\",\n    \"query_toks\": \"['SELECT', 'TV_Channel', '.', 'series_name', 'FROM', 'TV_Channel', 'JOIN', 'Cartoon', 'ON', 'TV_Channel', '.', 'id', '=', 'Cartoon', '.', 'Channel', 'WHERE', 'Cartoon', '.', 'Title', '=', \"'The Rise of the Blue Beetle!'']\",\n    \"query_toks_no_value\": \"['SELECT', 'TV_Channel', '.', 'series_name', 'FROM', 'TV_Channel', 'JOIN', 'Cartoon', 'ON', 'TV_Channel', '.', 'id', '=', 'Cartoon', '.', 'Channel', 'WHERE', 'Cartoon', '.', 'Title', '=']\",\n    \"question\": \"What is the TV Channel that shows the cartoon \\\"The Rise of the Blue Beetle!\\\"? List the TV Channel's series name.\",\n    \"question_toks\": \"['What', 'is', 'the', 'TV', 'Channel', 'that', 'shows', 'the', 'cartoon', '``', 'The', 'Rise', 'of', 'the', 'Blue', 'Beetle', '!', \"''\", '?', 'List', 'the', 'TV', 'Channel', \"'s\", 'series', 'name', '.']\"\n}"}
{"question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'series', 'name', 'of', 'the', 'TV', 'Channel', 'that', 'shows', 'the', 'cartoon', '``', 'The', 'Rise', 'of', 'the', 'Blue', 'Beetle', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"tvshow\",\n\"query\": \"SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title='The Rise of the Blue Beetle'\",\n\"query_toks\": \"['SELECT', 'TV_Channel', '.', 'series_name', 'FROM', 'TV_Channel', 'JOIN', 'Cartoon', 'ON', 'TV_Channel', '.', 'id', '=', 'Cartoon', '.', 'Channel', 'WHERE', 'Cartoon', '.', 'Title', '=', \"'The\", 'Rise', 'of', 'the', 'Blue', 'Beetle\"', \"''\"],\n\"query_toks_no_value\": \"['SELECT', 'TV_Channel', '.', 'series_name', 'FROM', 'TV_Channel', 'JOIN', 'Cartoon', 'ON', 'TV_Channel', '.', 'id', '=', 'Cartoon', '.', 'Channel', 'WHERE', 'Cartoon', '.', 'Title', '=', '?']\",\n\"question\": \"What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'series', 'name', 'of', 'the', 'TV', 'Channel', 'that', 'shows', 'the', 'cartoon', '``', 'The', 'Rise', 'of', 'the', 'Blue', 'Beetle', \"''\", '?']}\""}
{"question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".\",\n\"question_toks\": \"['List', 'the', 'title', 'of', 'all', 'Cartoons', 'showed', 'on', 'TV', 'Channel', 'with', 'series', 'name', '``', 'Sky', 'Radio', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Cartoon.Title FROM Cartoon JOIN TV_series T2 ON Cartoon.Channel = T2.Channel JOIN TV_Channel T3 ON T2.Channel = T3.id WHERE T3.series_name = 'Sky Radio';\",\n  \"query_toks\": \"['SELECT', 'Cartoon', '.', 'Title', 'FROM', 'Cartoon', 'JOIN', 'TV_series', 'T2', 'ON', 'Cartoon', '.', 'Channel', '=', 'T2', '.', 'Channel', 'JOIN', 'TV_Channel', 'T3', 'ON', 'T2', '.', 'Channel', '=', 'T3', '.', 'id', 'WHERE', 'T3', '.', 'series_name', '=', \"'Sky Radio';']\",\n  \"query_toks_no_value\": \"['SELECT', 'Cartoon', '.', 'Title', 'FROM', 'Cartoon', 'JOIN', 'TV_series', 'T2', 'ON', 'Cartoon', '.', 'Channel', '=', 'T2', '.', 'Channel', 'JOIN', 'TV_Channel', 'T3', 'ON', 'T2', '.', 'Channel', '=', 'T3', '.', 'id', 'WHERE', 'T3', '.', 'series_name', '=', \"']\",\n  \"question\": \"List the title of all Cartoons showed on TV Channel with series name \\\"Sky Radio\\\".\",\n  \"question_toks\": \"['List', 'the', 'title', 'of', 'all', 'Cartoons', 'showed', 'on', 'TV', 'Channel', 'with', 'series', 'name', '``', 'Sky', 'Radio', \"''\", '.']\"\n}"}
{"question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'title', 'of', 'all', 'the', 'cartools', 'that', 'are', 'on', 'the', 'TV', 'Channel', 'with', 'the', 'series', 'name', '``', 'Sky', 'Radio', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel T1 ON Cartoon.Channel = T1.id WHERE T1.series_name = 'Sky Radio';\",\n    \"query_toks\": \"['SELECT', 'Cartoon', '.', 'Title', 'FROM', 'Cartoon', 'JOIN', 'TV_Channel', 'T1', 'ON', 'Cartoon', '.', 'Channel', '=', 'T1', '.', 'id', 'WHERE', 'T1', '.', 'series_name', '=', \"'Sky Radio';']\",\n    \"query_toks_no_value\": \"['SELECT', 'Cartoon', '.', 'Title', 'FROM', 'Cartoon', 'JOIN', 'TV_Channel', 'T1', 'ON', 'Cartoon', '.', 'Channel', '=', 'T1', '.', 'id', 'WHERE', 'T1', '.', 'series_name', '=', ';']\",\n    \"question\": \"What is the title of all the cartoons that are on the TV Channel with the series name \\\"Sky Radio\\\"?\",\n    \"question_toks\": \"['What', 'is', 'the', 'title', 'of', 'all', 'the', 'cartoons', 'that', 'are', 'on', 'the', 'TV', 'Channel', 'with', 'the', 'series', 'name', '``', 'Sky', 'Radio', \"''\", '?']\"\n}"}
{"question": "List the Episode of all TV series sorted by rating.", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List the Episode of all TV series sorted by rating.\",\n\"question_toks\": \"['List', 'the', 'Episode', 'of', 'all', 'TV', 'series', 'sorted', 'by', 'rating', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Episode FROM TV_series ORDER BY Rating DESC\",\n    \"query_toks\": \"['SELECT', 'Episode', 'FROM', 'TV_series', 'ORDER', 'BY', 'Rating', 'DESC']\",\n    \"query_toks_no_value\": \"['SELECT', 'Episode', 'FROM', 'TV_series', 'ORDER', 'BY', 'Rating', 'DESC']\",\n    \"question\": \"List the Episode of all TV series sorted by rating.\",\n    \"question_toks\": \"['List', 'the', 'Episode', 'of', 'all', 'TV', 'series', 'sorted', 'by', 'rating', '.']\"\n}"}
{"question": "What are all of the episodes ordered by ratings?", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are all of the episodes ordered by ratings?\",\n\"question_toks\": \"['What', 'are', 'all', 'of', 'the', 'episodes', 'ordered', 'by', 'ratings', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT *\\nFROM TV_series AS T1\\nORDER BY T1.Rating DESC;\",\n  \"query_toks\": \"['SELECT', '*', 'FROM', 'TV_series', 'AS', 'T1', 'ORDER', 'BY', 'T1', '.', 'Rating', 'DESC', ';']\",\n  \"query_toks_no_value\": \"['SELECT', '*', 'FROM', 'TV_series', 'AS', 'T1', 'ORDER', 'BY', 'T1', '.', 'Rating', 'DESC', ';']\",\n  \"question\": \"What are all of the episodes ordered by ratings?\",\n  \"question_toks\": \"['What', 'are', 'all', 'of', 'the', 'episodes', 'ordered', 'by', 'ratings', '?']\"\n}"}
{"question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List top 3 highest Rating  TV series. List the TV series's Episode and Rating.\",\n\"question_toks\": \"['List', 'top', '3', 'highest', 'Rating', 'TV', 'series', '.', 'List', 'the', 'TV', 'series', \"'s\", 'Episode', 'and', 'Rating', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3\",\n  \"query_toks\": [\"SELECT\", \"Episode\", \",\", \"Rating\", \"FROM\", \"TV_series\", \"ORDER BY\", \"Rating\", \"DESC\", \"LIMIT\", \"3\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Episode\", \",\", \"Rating\", \"FROM\", \"TV_series\", \"ORDER BY\", \"Rating\", \"DESC\", \"LIMIT\", \"3\"],\n  \"question\": \"List top 3 highest Rating  TV series. List the TV series's Episode and Rating.\",\n  \"question_toks\": [\"List\", \"top\", \"3\", \"highest\", \"Rating\", \"TV\", \"series\", \".\", \"List\", \"the\", \"TV\", \"series\", \"'s\", \"Episode\", \"and\", \"Rating\", \".\"]\n}"}
{"question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are 3 most highly rated episodes in the TV series table and what were those ratings?\",\n\"question_toks\": \"['What', 'are', '3', 'most', 'highly', 'rated', 'episodes', 'in', 'the', 'TV', 'series', 'table', 'and', 'what', 'were', 'those', 'ratings', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;\",\n    \"query_toks\": \"['SELECT', 'Episode', ',', 'Rating', 'FROM', 'TV_series', 'ORDER', 'BY', 'Rating', 'DESC', 'LIMIT', '3', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'Episode', ',', 'Rating', 'FROM', 'TV_series', 'ORDER', 'BY', 'Rating', 'DESC', 'LIMIT', 'NUM', ';']\",\n    \"question\": \"What are 3 most highly rated episodes in the TV series table and what were those ratings?\",\n    \"question_toks\": \"['What', 'are', '3', 'most', 'highly', 'rated', 'episodes', 'in', 'the', 'TV', 'series', 'table', 'and', 'what', 'were', 'those', 'ratings', '?']\"\n}"}
{"question": "What is minimum and maximum share of TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is minimum and maximum share of TV series?\",\n\"question_toks\": \"['What', 'is', 'minimum', 'and', 'maximum', 'share', 'of', 'TV', 'series', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT MIN(Share), MAX(Share) FROM TV_series\",\n  \"query_toks\": [\"SELECT\", \"MIN\", \"(\", \"Share\", \")\", \",\", \"MAX\", \"(\", \"Share\", \")\", \"FROM\", \"TV_series\"],\n  \"query_toks_no_value\": [\"SELECT\", \"MIN\", \"(\", \"Share\", \")\", \",\", \"MAX\", \"(\", \"Share\", \")\", \"FROM\", \"TV_series\"],\n  \"question\": \"What is minimum and maximum share of TV series?\",\n  \"question_toks\": [\"What\", \"is\", \"minimum\", \"and\", \"maximum\", \"share\", \"of\", \"TV\", \"series\", \"?\"]\n}"}
{"question": "What is the maximum and minimum share for the TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the maximum and minimum share for the TV series?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'and', 'minimum', 'share', 'for', 'the', 'TV', 'series', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT MAX(Share), MIN(Share) FROM TV_series\",\n    \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"Share\", \")\", \",\", \"MIN\", \"(\", \"Share\", \")\", \"FROM\", \"TV_series\"],\n    \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"Share\", \")\", \",\", \"MIN\", \"(\", \"Share\", \")\", \"FROM\", \"TV_series\"],\n    \"question\": \"What is the maximum and minimum share for the TV series?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"maximum\", \"and\", \"minimum\", \"share\", \"for\", \"the\", \"TV\", \"series\", \"?\"]\n}"}
{"question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the air date of TV series with Episode \"A Love of a Lifetime\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'air', 'date', 'of', 'TV', 'series', 'with', 'Episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Air_Date FROM TV_series T1 WHERE T1.Episode = 'A Love of a Lifetime'\",\n    \"query_toks\": [\"SELECT\", \"Air_Date\", \"FROM\", \"TV_series\", \"T1\", \"WHERE\", \"T1\", \".\", \"Episode\", \"=\", \"'A Love of a Lifetime'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Air_Date\", \"FROM\", \"TV_series\", \"T1\", \"WHERE\", \"T1\", \".\", \"Episode\", \"=\"],\n    \"question\": \"What is the air date of TV series with Episode \\\"A Love of a Lifetime\\\"?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"air\", \"date\", \"of\", \"TV\", \"series\", \"with\", \"Episode\", \"\\\"A Love of a Lifetime\\\"?\"]\n}"}
{"question": "When did the episode \"A Love of a Lifetime\" air?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"When did the episode \"A Love of a Lifetime\" air?\",\n\"question_toks\": \"['When', 'did', 'the', 'episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", 'air', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"tvshow\",\n\"query\": \"SELECT Original_air_date FROM Cartoon WHERE Title='A Love of a Lifetime'\",\n\"query_toks\": \"['SELECT', 'Original_air_date', 'FROM', 'Cartoon', 'WHERE', 'Title', '=', ''\\\\''A Love of a Lifetime''\\\\'']\",\n\"query_toks_no_value\": \"['SELECT', 'Original_air_date', 'FROM', 'Cartoon', 'WHERE', 'Title', '=', '']\",\n\"question\": \"When did the episode \\\"A Love of a Lifetime\\\" air?\",\n\"question_toks\": \"['When', 'did', 'the', 'episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", 'air', '?']\"\n}"}
{"question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?\",\n\"question_toks\": \"['What', 'is', 'Weekly', 'Rank', 'of', 'TV', 'series', 'with', 'Episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'\",\n    \"query_toks\": \"['SELECT', 'Weekly_Rank', 'FROM', 'TV_series', 'WHERE', 'Episode', '=', ''', 'A', 'Love', 'of', 'a', 'Lifetime', ''']\",\n    \"query_toks_no_value\": \"['SELECT', 'Weekly_Rank', 'FROM', 'TV_series', 'WHERE', 'Episode', '=', '']\",\n    \"question\": \"What is Weekly Rank of TV series with Episode \\\"A Love of a Lifetime\\\"?\",\n    \"question_toks\": \"['What', 'is', 'Weekly', 'Rank', 'of', 'TV', 'series', 'with', 'Episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", '?']\"\n}"}
{"question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the weekly rank for the episode \"A Love of a Lifetime\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'weekly', 'rank', 'for', 'the', 'episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Weekly_Rank FROM TV_series WHERE Title='A Love of a Lifetime'\",\n    \"query_toks\": [\"SELECT\", \"Weekly_Rank\", \"FROM\", \"TV_series\", \"WHERE\", \"Title\", \"=\", \"'A Love of a Lifetime'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Weekly_Rank\", \"FROM\", \"TV_series\", \"WHERE\", \"Title\", \"=\"],\n    \"question\": \"What is the weekly rank for the episode \\\"A Love of a Lifetime\\\"?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"weekly\", \"rank\", \"for\", \"the\", \"episode\", \"\\\"A Love of a Lifetime\\\"?\"]\n}"}
{"question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.\",\n\"question_toks\": \"['What', 'is', 'the', 'TV', 'Channel', 'of', 'TV', 'series', 'with', 'Episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", '?', 'List', 'the', 'TV', 'Channel', \"'s\", 'series', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'\",\n    \"query_toks\": \"['SELECT', 'TV_Channel.series_name', 'FROM', 'TV_Channel', 'JOIN', 'TV_series', 'ON', 'TV_Channel.id', '=', 'TV_series.Channel', 'WHERE', 'TV_series.Episode', '=', \"'A Love of a Lifetime'\"]\",\n    \"query_toks_no_value\": \"['SELECT', 'TV_Channel.series_name', 'FROM', 'TV_Channel', 'JOIN', 'TV_series', 'ON', 'TV_Channel.id', '=', 'TV_series.Channel', 'WHERE', 'TV_series.Episode', '=']\",\n    \"question\": \"What is the TV Channel of TV series with Episode \\\"A Love of a Lifetime\\\"? List the TV Channel's series name.\",\n    \"question_toks\": \"['What', 'is', 'the', 'TV', 'Channel', 'of', 'TV', 'series', 'with', 'Episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", '?', 'List', 'the', 'TV', 'Channel', \"'s\", 'series', 'name', '.']\"\n}"}
{"question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the name of the series that has the episode \"A Love of a Lifetime\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'series', 'that', 'has', 'the', 'episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Episode = 'A Love of a Lifetime'\",\n    \"query_toks\": \"['SELECT', 'series_name', 'FROM', 'TV_Channel', 'JOIN', 'TV_series', 'ON', 'TV_Channel', '.', 'id', '=', 'TV_series', '.', 'Channel', 'WHERE', 'Episode', '=', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\"]\",\n    \"query_toks_no_value\": \"['SELECT', 'series_name', 'FROM', 'TV_Channel', 'JOIN', 'TV_series', 'ON', 'TV_Channel', '.', 'id', '=', 'TV_series', '.', 'Channel', 'WHERE', 'Episode', '=']\",\n    \"question\": \"What is the name of the series that has the episode \\\"A Love of a Lifetime\\\"?\",\n    \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'series', 'that', 'has', 'the', 'episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', \"''\", '?']\"\n}"}
{"question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".\",\n\"question_toks\": \"['List', 'the', 'Episode', 'of', 'all', 'TV', 'series', 'showed', 'on', 'TV', 'Channel', 'with', 'series', 'name', '``', 'Sky', 'Radio', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"tvshow\",\n\"query\": \"SELECT Episode FROM TV_series T1 JOIN TV_Channel T2 ON T1.Channel=T2.id WHERE T2.series_name='Sky Radio'\",\n\"query_toks\": \"['SELECT', 'Episode', 'FROM', 'TV_series', 'T1', 'JOIN', 'TV_Channel', 'T2', 'ON', 'T1.Channel=T2.id', 'WHERE', 'T2.series_name=', \"'\", 'Sky Radio', \"'']\",\n\"query_toks_no_value\": \"['SELECT', 'Episode', 'FROM', 'TV_series', 'T1', 'JOIN', 'TV_Channel', 'T2', 'ON', 'T1.Channel=T2.id', 'WHERE', 'T2.series_name=']\",\n\"question\": \"List the Episode of all  TV series showed on TV Channel with series name \\\"Sky Radio\\\".\",\n\"question_toks\": \"['List', 'the', 'Episode', 'of', 'all', 'TV', 'series', 'showed', 'on', 'TV', 'Channel', 'with', 'series', 'name', '``', 'Sky', 'Radio', \"''\", '.']}\"\n}"}
{"question": "What is the episode for the TV series named \"Sky Radio\"?", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the episode for the TV series named \"Sky Radio\"?\",\n\"question_toks\": \"['What', 'is', 'the', 'episode', 'for', 'the', 'TV', 'series', 'named', '``', 'Sky', 'Radio', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Episode FROM TV_series T1 WHERE T1.series_name = 'Sky Radio'\",\n    \"query_toks\": [\"SELECT\", \"Episode\", \"FROM\", \"TV_series\", \"T1\", \"WHERE\", \"T1\", \".\", \"series_name\", \"=\", \"'Sky\", \"Radio'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Episode\", \"FROM\", \"TV_series\", \"T1\", \"WHERE\", \"T1\", \".\", \"series_name\", \"=\", \"?\"],\n    \"question\": \"What is the episode for the TV series named \\\"Sky Radio\\\"?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"episode\", \"for\", \"the\", \"TV\", \"series\", \"named\", \"\\\"Sky\", \"Radio\\\"?\"]\n}"}
{"question": "Find the number of cartoons directed by each of the listed directors.", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"Find the number of cartoons directed by each of the listed directors.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'cartoons', 'directed', 'by', 'each', 'of', 'the', 'listed', 'directors', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Directed_by, COUNT(*) AS num_cartoons \\nFROM Cartoon \\nGROUP BY Directed_by;\",\n  \"query_toks\": [\"SELECT\", \"Directed_by\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_cartoons\", \"FROM\", \"Cartoon\", \"GROUP\", \"BY\", \"Directed_by\", \";\" ],\n  \"query_toks_no_value\": [\"SELECT\", \"Directed_by\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"num_cartoons\", \"FROM\", \"Cartoon\", \"GROUP\", \"BY\", \"Directed_by\", \";\" ],\n  \"question\": \"Find the number of cartoons directed by each of the listed directors.\",\n  \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"cartoons\", \"directed\", \"by\", \"each\", \"of\", \"the\", \"listed\", \"directors\", \".\"]\n}"}
{"question": "How many cartoons did each director create?", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"How many cartoons did each director create?\",\n\"question_toks\": \"['How', 'many', 'cartoons', 'did', 'each', 'director', 'create', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;\",\n    \"query_toks\": [\"SELECT\", \"Directed_by\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Cartoon\", \"GROUP\", \"BY\", \"Directed_by\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Directed_by\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Cartoon\", \"GROUP\", \"BY\", \"Directed_by\", \";\"],\n    \"question\": \"How many cartoons did each director create?\",\n    \"question_toks\": [\"How\", \"many\", \"cartoons\", \"did\", \"each\", \"director\", \"create\", \"?\"]\n}"}
{"question": "Find the production code and channel of the most recently aired cartoon .", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"Find the production code and channel of the most recently aired cartoon .\",\n\"question_toks\": \"['Find', 'the', 'production', 'code', 'and', 'channel', 'of', 'the', 'most', 'recently', 'aired', 'cartoon', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT max(Original_air_date) FROM Cartoon);\",\n    \"query_toks\": [\"SELECT\", \"Production_code\", \",\", \"Channel\", \"FROM\", \"Cartoon\", \"WHERE\", \"Original_air_date\", \"=\", \"(\", \"SELECT\", \"max\", \"(\", \"Original_air_date\", \")\", \"FROM\", \"Cartoon\", \")\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Production_code\", \",\", \"Channel\", \"FROM\", \"Cartoon\", \"WHERE\", \"Original_air_date\", \"=\", \"(\", \"SELECT\", \"max\", \"(\", \"Original_air_date\", \")\", \"FROM\", \"Cartoon\", \")\", \";\"],\n    \"question\": \"Find the production code and channel of the most recently aired cartoon.\",\n    \"question_toks\": [\"Find\", \"the\", \"production\", \"code\", \"and\", \"channel\", \"of\", \"the\", \"most\", \"recently\", \"aired\", \"cartoon\", \".\"]\n}"}
{"question": "What is the produdction code and channel of the most recent cartoon ?", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the produdction code and channel of the most recent cartoon ?\",\n\"question_toks\": \"['What', 'is', 'the', 'produdction', 'code', 'and', 'channel', 'of', 'the', 'most', 'recent', 'cartoon', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)\",\n  \"query_toks\": [\"SELECT\", \"Production_code\", \",\", \"Channel\", \"FROM\", \"Cartoon\", \"WHERE\", \"Original_air_date\", \"=\", \"(\", \"SELECT\", \"MAX\", \"(\", \"Original_air_date\", \")\", \"FROM\", \"Cartoon\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Production_code\", \",\", \"Channel\", \"FROM\", \"Cartoon\", \"WHERE\", \"Original_air_date\", \"=\", \"(\", \"SELECT\", \"MAX\", \"(\", \"Original_air_date\", \")\", \"FROM\", \"Cartoon\", \")\"],\n  \"question\": \"What is the produdction code and channel of the most recent cartoon?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"produdction\", \"code\", \"and\", \"channel\", \"of\", \"the\", \"most\", \"recent\", \"cartoon\", \"?\"]\n}"}
{"question": "Find the package choice and series name of the TV channel that has high definition TV.", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"Find the package choice and series name of the TV channel that has high definition TV.\",\n\"question_toks\": \"['Find', 'the', 'package', 'choice', 'and', 'series', 'name', 'of', 'the', 'TV', 'channel', 'that', 'has', 'high', 'definition', 'TV', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT T1.Package_Option, T1.series_name FROM TV_Channel T1 WHERE T1.Hight_definition_TV = 'True';\",\n    \"query_toks\": \"['SELECT', 'T1', '.', 'Package_Option', ',', 'T1', '.', 'series_name', 'FROM', 'TV_Channel', 'T1', 'WHERE', 'T1', '.', 'Hight_definition_TV', '=', \\\"'True'\\\"', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'T1', '.', 'Package_Option', ',', 'T1', '.', 'series_name', 'FROM', 'TV_Channel', 'T1', 'WHERE', 'T1', '.', 'Hight_definition_TV', '=', '', ';']\",\n    \"question\": \"Find the package choice and series name of the TV channel that has high definition TV.\",\n    \"question_toks\": \"['Find', 'the', 'package', 'choice', 'and', 'series', 'name', 'of', 'the', 'TV', 'channel', 'that', 'has', 'high', 'definition', 'TV', '.']\"\n}"}
{"question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the package options and the name of the series for the TV Channel that supports high definition TV?\",\n\"question_toks\": \"['What', 'are', 'the', 'package', 'options', 'and', 'the', 'name', 'of', 'the', 'series', 'for', 'the', 'TV', 'Channel', 'that', 'supports', 'high', 'definition', 'TV', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'True'\",\n  \"query_toks\": \"['SELECT', 'TV_Channel', '.', 'Package_Option', ',', 'TV_Channel', '.', 'series_name', 'FROM', 'TV_Channel', 'WHERE', 'TV_Channel', '.', 'Hight_definition_TV', '=', ''True'']\",\n  \"query_toks_no_value\": \"['SELECT', 'TV_Channel', '.', 'Package_Option', ',', 'TV_Channel', '.', 'series_name', 'FROM', 'TV_Channel', 'WHERE', 'TV_Channel', '.', 'Hight_definition_TV', '=', '']\",\n  \"question\": \"What are the package options and the name of the series for the TV Channel that supports high definition TV?\",\n  \"question_toks\": \"['What', 'are', 'the', 'package', 'options', 'and', 'the', 'name', 'of', 'the', 'series', 'for', 'the', 'TV', 'Channel', 'that', 'supports', 'high', 'definition', 'TV', '?']\"\n}"}
{"question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"which countries' tv channels are playing some cartoon written by Todd Casey?\",\n\"question_toks\": \"['which', 'countries', \"'\", 'tv', 'channels', 'are', 'playing', 'some', 'cartoon', 'written', 'by', 'Todd', 'Casey', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT DISTINCT Country FROM TV_Channel WHERE id IN (SELECT id FROM Cartoon WHERE Written_by LIKE '%Todd Casey%')\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"TV_Channel\", \"WHERE\", \"id\", \"IN\", \"(\", \"SELECT\", \"id\", \"FROM\", \"Cartoon\", \"WHERE\", \"Written_by\", \"LIKE\", \"'\", \"%\", \"Todd\", \"Casey\", \"%\", \"'\", \")\",],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"TV_Channel\", \"WHERE\", \"id\", \"IN\", \"(\", \"SELECT\", \"id\", \"FROM\", \"Cartoon\", \"WHERE\", \"Written_by\", \"LIKE\", \"'\", \"'\", \")\",],\n    \"question\": \"which countries' tv channels are playing some cartoon written by Todd Casey?\",\n    \"question_toks\": [\"which\", \"countries\", \"'\", \"tv\", \"channels\", \"are\", \"playing\", \"some\", \"cartoon\", \"written\", \"by\", \"Todd\", \"Casey\", \"?\"]\n}"}
{"question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the countries that have cartoons on TV that were written by Todd Casey?\",\n\"question_toks\": \"['What', 'are', 'the', 'countries', 'that', 'have', 'cartoons', 'on', 'TV', 'that', 'were', 'written', 'by', 'Todd', 'Casey', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT DISTINCT TV_Channel.Country\\nFROM Cartoon\\nINNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\\nWHERE Cartoon.Written_by = 'Todd Casey'\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'TV_Channel.Country', 'FROM', 'Cartoon', 'INNER', 'JOIN', 'TV_Channel', 'ON', 'Cartoon.Channel', '=', 'TV_Channel.id', 'WHERE', 'Cartoon.Written_by', '=', \\\"'Todd\\\", \\\"Casey'\\\"],\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'TV_Channel.Country', 'FROM', 'Cartoon', 'INNER', 'JOIN', 'TV_Channel', 'ON', 'Cartoon.Channel', '=', 'TV_Channel.id', 'WHERE', 'Cartoon.Written_by', '=', 'str']\",\n    \"question\": \"What are the countries that have cartoons on TV that were written by Todd Casey?\",\n    \"question_toks\": \"['What', 'are', 'the', 'countries', 'that', 'have', 'cartoons', 'on', 'TV', 'that', 'were', 'written', 'by', 'Todd', 'Casey', '?']\"\n}"}
{"question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"which countries' tv channels are not playing any cartoon written by Todd Casey?\",\n\"question_toks\": \"['which', 'countries', \"'\", 'tv', 'channels', 'are', 'not', 'playing', 'any', 'cartoon', 'written', 'by', 'Todd', 'Casey', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT DISTINCT Country FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'Country', 'FROM', 'TV_Channel', 'WHERE', 'TV_Channel.id', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'Channel', 'FROM', 'Cartoon', 'WHERE', 'Written_by', '=', '\\'Todd', 'Casey\\'', ')']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Country', 'FROM', 'TV_Channel', 'WHERE', 'TV_Channel.id', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'Channel', 'FROM', 'Cartoon', 'WHERE', 'Written_by', '=', '?', ')']\",\n  \"question\": \"which countries' tv channels are not playing any cartoon written by Todd Casey?\",\n  \"question_toks\": \"['which', 'countries', \\\"'\\\", 'tv', 'channels', 'are', 'not', 'playing', 'any', 'cartoon', 'written', 'by', 'Todd', 'Casey', '?']\"\n}"}
{"question": "What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the countries that are not playing cartoons written by Todd Casey?\",\n\"question_toks\": \"['What', 'are', 'the', 'countries', 'that', 'are', 'not', 'playing', 'cartoons', 'written', 'by', 'Todd', 'Casey', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT DISTINCT Country FROM TV_Channel LEFT JOIN Cartoon T2 ON TV_Channel.id = T2.Channel WHERE T2.Written_by != 'Todd Casey'\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"TV_Channel\", \"LEFT\", \"JOIN\", \"Cartoon\", \"T2\", \"ON\", \"TV_Channel\", \".\", \"id\", \"=\", \"T2\", \".\", \"Channel\", \"WHERE\", \"T2\", \".\", \"Written_by\", \"!=\", \"'Todd\", \"Casey'\", \"\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"Country\", \"FROM\", \"TV_Channel\", \"LEFT\", \"JOIN\", \"Cartoon\", \"T2\", \"ON\", \"TV_Channel\", \".\", \"id\", \"=\", \"T2\", \".\", \"Channel\", \"WHERE\", \"T2\", \".\", \"Written_by\", \"!=\", \"?\"],\n  \"question\": \"What are the countries that are not playing cartoons written by Todd Casey?\",\n  \"question_toks\": [\"['What', 'are', 'the', 'countries', 'that', 'are', 'not', 'playing', 'cartoons', 'written', 'by', 'Todd', 'Casey', '?']\"\n}"}
{"question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?\",\n\"question_toks\": \"['Find', 'the', 'series', 'name', 'and', 'country', 'of', 'the', 'tv', 'channel', 'that', 'is', 'playing', 'some', 'cartoons', 'directed', 'by', 'Ben', 'Jones', 'and', 'Michael', 'Chang', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"tvshow\",\n\"query\": \"SELECT T1.series_name, T1.Country FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' AND T2.Directed_by = 'Michael Chang'\",\n\"query_toks\": \"['SELECT', 'T1', '.', 'series_name', ',', 'T1', '.', 'Country', 'FROM', 'TV_Channel', 'T1', 'JOIN', 'Cartoon', 'T2', 'ON', 'T1', '.', 'id', '=', 'T2', '.', 'Channel', 'WHERE', 'T2', '.', 'Directed_by', '=', \\\"'Ben Jones'\\\"\", 'AND', 'T2', '.', 'Directed_by', '=', \\\"'Michael Chang'\\\"']\",\n\"query_toks_no_value\": \"['SELECT', 'T1', '.', 'series_name', ',', 'T1', '.', 'Country', 'FROM', 'TV_Channel', 'T1', 'JOIN', 'Cartoon', 'T2', 'ON', 'T1', '.', 'id', '=', 'T2', '.', 'Channel', 'WHERE', 'T2', '.', 'Directed_by', '=', 'AND', 'T2', '.', 'Directed_by', '=']\",\n\"question\": \"Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?\",\n\"question_toks\": \"['Find', 'the', 'series', 'name', 'and', 'country', 'of', 'the', 'tv', 'channel', 'that', 'is', 'playing', 'some', 'cartoons', 'directed', 'by', 'Ben', 'Jones', 'and', 'Michael', 'Chang', '?']\"\n}"}
{"question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?\",\n\"question_toks\": \"['What', 'is', 'the', 'series', 'name', 'and', 'country', 'of', 'all', 'TV', 'channels', 'that', 'are', 'playing', 'cartoons', 'directed', 'by', 'Ben', 'Jones', 'and', 'cartoons', 'directed', 'by', 'Michael', 'Chang', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country FROM Cartoon, TV_Channel JOIN TV_series T1 ON Cartoon.Channel=T1.Channel JOIN TV_series T2 ON TV_Channel.id=T2.Channel WHERE Cartoon.Directed_by='Ben Jones' AND T1.Directed_by='Ben Jones' AND Cartoon.Directed_by='Michael Chang' AND T2.Directed_by='Michael Chang';\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"TV_Channel.series_name\", \",\", \"TV_Channel.Country\", \"FROM\", \"Cartoon\", \",\", \"TV_Channel\", \"JOIN\", \"TV_series\", \"T1\", \"ON\", \"Cartoon.Channel\", \"=\", \"T1.Channel\", \"JOIN\", \"TV_series\", \"T2\", \"ON\", \"TV_Channel.id\", \"=\", \"T2.Channel\", \"WHERE\", \"Cartoon.Directed_by\", \"=\", \"'Ben Jones'\", \"AND\", \"T1.Directed_by\", \"=\", \"'Ben Jones'\", \"AND\", \"Cartoon.Directed_by\", \"=\", \"'Michael Chang'\", \"AND\", \"T2.Directed_by\", \"=\", \"'Michael Chang'\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"TV_Channel.series_name\", \",\", \"TV_Channel.Country\", \"FROM\", \"Cartoon\", \",\", \"TV_Channel\", \"JOIN\", \"TV_series\", \"T1\", \"ON\", \"Cartoon.Channel\", \"=\", \"T1.Channel\", \"JOIN\", \"TV_series\", \"T2\", \"ON\", \"TV_Channel.id\", \"=\", \"T2.Channel\", \"WHERE\", \"Cartoon.Directed_by\", \"=\", \"Ben Jones\", \"AND\", \"T1.Directed_by\", \"=\", \"Ben Jones\", \"AND\", \"Cartoon.Directed_by\", \"=\", \"Michael Chang\", \"AND\", \"T2.Directed_by\", \"=\", \"Michael Chang\", \";\"],\n    \"question\": \"What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"series\", \"name\", \"and\", \"country\", \"of\", \"all\", \"TV\", \"channels\", \"that\", \"are\", \"playing\", \"cartoons\", \"directed\", \"by\", \"Ben\", \"Jones\", \"and\", \"cartoons\", \"directed\", \"by\", \"Michael\", \"Chang\", \"?\"]\n}"}
{"question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"find the pixel aspect ratio and nation of the tv channels that do not use English.\",\n\"question_toks\": \"['find', 'the', 'pixel', 'aspect', 'ratio', 'and', 'nation', 'of', 'the', 'tv', 'channels', 'that', 'do', 'not', 'use', 'English', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';\",\n  \"query_toks\": \"['SELECT', 'Pixel_aspect_ratio_PAR', ',', 'Country', 'FROM', 'TV_Channel', 'WHERE', 'Language', '!=', ''English''', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'Pixel_aspect_ratio_PAR', ',', 'Country', 'FROM', 'TV_Channel', 'WHERE', 'Language', '!=', '', ';']\",\n  \"question\": \"find the pixel aspect ratio and nation of the tv channels that do not use English.\",\n  \"question_toks\": \"['find', 'the', 'pixel', 'aspect', 'ratio', 'and', 'nation', 'of', 'the', 'tv', 'channels', 'that', 'do', 'not', 'use', 'English', '.']\"\n}"}
{"question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What is the pixel aspect ratio and country of origin for all TV channels that do not use English?\",\n\"question_toks\": \"['What', 'is', 'the', 'pixel', 'aspect', 'ratio', 'and', 'country', 'of', 'origin', 'for', 'all', 'TV', 'channels', 'that', 'do', 'not', 'use', 'English', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'\",\n  \"query_toks\": \"['SELECT', 'Pixel_aspect_ratio_PAR', ',', 'Country', 'FROM', 'TV_Channel', 'WHERE', 'Language', '!=', ''English'']\",\n  \"query_toks_no_value\": \"['SELECT', 'Pixel_aspect_ratio_PAR', ',', 'Country', 'FROM', 'TV_Channel', 'WHERE', 'Language', '!=']\",\n  \"question\": \"What is the pixel aspect ratio and country of origin for all TV channels that do not use English?\",\n  \"question_toks\": \"['What', 'is', 'the', 'pixel', 'aspect', 'ratio', 'and', 'country', 'of', 'origin', 'for', 'all', 'TV', 'channels', 'that', 'do', 'not', 'use', 'English', '?']\"\n}"}
{"question": "find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"find id of the tv channels that from the countries where have more than two tv channels.\",\n\"question_toks\": \"['find', 'id', 'of', 'the', 'tv', 'channels', 'that', 'from', 'the', 'countries', 'where', 'have', 'more', 'than', 'two', 'tv', 'channels', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(Country)>2\",\n    \"query_toks\": \"['SELECT', 'id', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Country', 'HAVING', 'COUNT', '(', 'Country', ')', '>', '2']\",\n    \"query_toks_no_value\": \"['SELECT', 'id', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Country', 'HAVING', 'COUNT', '(', 'Country', ')', '>', '2']\",\n    \"question\": \"find id of the tv channels that from the countries where have more than two tv channels.\",\n    \"question_toks\": \"['find', 'id', 'of', 'the', 'tv', 'channels', 'that', 'from', 'the', 'countries', 'where', 'have', 'more', 'than', 'two', 'tv', 'channels', '.']\"\n}"}
{"question": "What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the ids of all tv channels that have more than 2 TV channels?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'all', 'tv', 'channels', 'that', 'have', 'more', 'than', '2', 'TV', 'channels', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT id FROM TV_Channel WHERE COUNT(id) > 2\",\n    \"query_toks\": \"['SELECT', 'id', 'FROM', 'TV_Channel', 'WHERE', 'COUNT', '(', 'id', ')', '>', '2']\",\n    \"query_toks_no_value\": \"['SELECT', 'id', 'FROM', 'TV_Channel', 'WHERE', 'COUNT', '(', 'id', ')', '>', '?']\",\n    \"question\": \"What are the ids of all tv channels that have more than 2 TV channels?\",\n    \"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'all', 'tv', 'channels', 'that', 'have', 'more', 'than', '2', 'TV', 'channels', '?']\"\n}"}
{"question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"find the id of tv channels that do not play any cartoon directed by Ben Jones.\",\n\"question_toks\": \"['find', 'the', 'id', 'of', 'tv', 'channels', 'that', 'do', 'not', 'play', 'any', 'cartoon', 'directed', 'by', 'Ben', 'Jones', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')\",\n    \"query_toks\": [\"SELECT\", \"id\", \"FROM\", \"TV_Channel\", \"WHERE\", \"id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Channel\", \"FROM\", \"Cartoon\", \"WHERE\", \"Directed_by\", \"=\", \"'Ben\", \"Jones'\", \")\", \"\"],\n    \"query_toks_no_value\": [\"SELECT\", \"id\", \"FROM\", \"TV_Channel\", \"WHERE\", \"id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Channel\", \"FROM\", \"Cartoon\", \"WHERE\", \"Directed_by\", \"=\", \"?\", \")\", \"\"],\n    \"question\": \"find the id of tv channels that do not play any cartoon directed by Ben Jones.\",\n    \"question_toks\": [\"find\", \"the\", \"id\", \"of\", \"tv\", \"channels\", \"that\", \"do\", \"not\", \"play\", \"any\", \"cartoon\", \"directed\", \"by\", \"Ben\", \"Jones\", \".\"]\n}"}
{"question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'the', 'TV', 'channels', 'that', 'do', 'not', 'have', 'any', 'cartoons', 'directed', 'by', 'Ben', 'Jones', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"tvshow\",\n    \"query\": \"SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by='Ben Jones')\",\n    \"query_toks\": \"['SELECT', 'id', 'FROM', 'TV_Channel', 'WHERE', 'id', 'NOT', 'IN', '(', 'SELECT', 'Channel', 'FROM', 'Cartoon', 'WHERE', 'Directed_by', '=', '\\'Ben', 'Jones\\'', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'id', 'FROM', 'TV_Channel', 'WHERE', 'id', 'NOT', 'IN', '(', 'SELECT', 'Channel', 'FROM', 'Cartoon', 'WHERE', 'Directed_by', '=', '?', ')']\",\n    \"question\": \"What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?\",\n    \"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'the', 'TV', 'channels', 'that', 'do', 'not', 'have', 'any', 'cartoons', 'directed', 'by', 'Ben', 'Jones', '?']\"\n}"}
{"question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"find the package option of the tv channel that do not have any cartoon directed by Ben Jones.\",\n\"question_toks\": \"['find', 'the', 'package', 'option', 'of', 'the', 'tv', 'channel', 'that', 'do', 'not', 'have', 'any', 'cartoon', 'directed', 'by', 'Ben', 'Jones', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;\",\n  \"query_toks\": \"['SELECT', 'TV_Channel', '.', 'Package_Option', 'FROM', 'TV_Channel', 'LEFT', 'JOIN', 'Cartoon', 'ON', 'TV_Channel', '.', 'id', '=', 'Cartoon', '.', 'Channel', 'WHERE', 'Cartoon', '.', 'Directed_by', '!=', '', 'Ben', 'Jones', '', 'OR', 'Cartoon', '.', 'Directed_by', 'IS', 'NULL', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'TV_Channel', '.', 'Package_Option', 'FROM', 'TV_Channel', 'LEFT', 'JOIN', 'Cartoon', 'ON', 'TV_Channel', '.', 'id', '=', 'Cartoon', '.', 'Channel', 'WHERE', 'Cartoon', '.', 'Directed_by', '!=', '', '', '', 'or', 'Cartoon', '.', 'Directed_by', 'is', 'null', ';']\",\n  \"question\": \"find the package option of the tv channel that do not have any cartoon directed by Ben Jones.\",\n  \"question_toks\": \"['find', 'the', 'package', 'option', 'of', 'the', 'tv', 'channel', 'that', 'do', 'not', 'have', 'any', 'cartoon', 'directed', 'by', 'Ben', 'Jones', '.']\"\n}"}
{"question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nTV_Channel: 'id', 'series_name', 'Country', 'Language', 'Content', 'Pixel_aspect_ratio_PAR', 'Hight_definition_TV', 'Pay_per_view_PPV', 'Package_Option'\nTV_series: 'id', 'Episode', 'Air_Date', 'Rating', 'Share', '18_49_Rating_Share', 'Viewers_m', 'Weekly_Rank', 'Channel'\nCartoon: 'id', 'Title', 'Directed_by', 'Written_by', 'Original_air_date', 'Production_code', 'Channel'\n\n{\"db_id\": \"tvshow\",\n\"question\": \"What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?\",\n\"question_toks\": \"['What', 'are', 'the', 'package', 'options', 'of', 'all', 'tv', 'channels', 'that', 'are', 'not', 'playing', 'any', 'cartoons', 'directed', 'by', 'Ben', 'Jones', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"tvshow\",\n  \"query\": \"SELECT DISTINCT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'TV_Channel.Package_Option', 'FROM', 'TV_Channel', 'LEFT', 'JOIN', 'Cartoon', 'ON', 'TV_Channel.id', '=', 'Cartoon.Channel', 'WHERE', 'Cartoon.Directed_by', '!=', '\\\\\\'Ben', 'Jones\\\\\\'', 'OR', 'Cartoon.Directed_by', 'IS', 'NULL']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'TV_Channel.Package_Option', 'FROM', 'TV_Channel', 'LEFT', 'JOIN', 'Cartoon', 'ON', 'TV_Channel.id', '=', 'Cartoon.Channel', 'WHERE', 'Cartoon.Directed_by', '!=', 'value', 'OR', 'Cartoon.Directed_by', 'IS', 'NULL']\",\n  \"question\": \"What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?\",\n  \"question_toks\": \"['What', 'are', 'the', 'package', 'options', 'of', 'all', 'tv', 'channels', 'that', 'are', 'not', 'playing', 'any', 'cartoons', 'directed', 'by', 'Ben', 'Jones', '?']\"\n}"}
{"question": "How many poker players are there?", "sql": "SELECT count(*) FROM poker_player", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"How many poker players are there?\",\n\"question_toks\": \"['How', 'many', 'poker', 'players', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT COUNT(*) FROM poker_player\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"poker_player\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"poker_player\"],\n    \"question\": \"How many poker players are there?\",\n    \"question_toks\": [\"How\", \"many\", \"poker\", \"players\", \"are\", \"there\", \"?\"]\n}"}
{"question": "Count the number of poker players.", "sql": "SELECT count(*) FROM poker_player", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Count the number of poker players.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'poker', 'players', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT COUNT(*) FROM poker_player\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"poker_player\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"FROM\", \"poker_player\"],\n    \"question\": \"Count the number of poker players.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"poker\", \"players\", \".\"]\n}"}
{"question": "List the earnings of poker players in descending order.", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"List the earnings of poker players in descending order.\",\n\"question_toks\": \"['List', 'the', 'earnings', 'of', 'poker', 'players', 'in', 'descending', 'order', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT Earnings FROM poker_player ORDER BY Earnings DESC;\",\n  \"query_toks\": [\"SELECT\", \"Earnings\", \"FROM\", \"poker_player\", \"ORDER\", \"BY\", \"Earnings\", \"DESC\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Earnings\", \"FROM\", \"poker_player\", \"ORDER\", \"BY\", \"Earnings\", \"DESC\", \";\"],\n  \"question\": \"List the earnings of poker players in descending order.\",\n  \"question_toks\": [\"List\", \"the\", \"earnings\", \"of\", \"poker\", \"players\", \"in\", \"descending\", \"order\", \".\"]\n}"}
{"question": "What are the earnings of poker players, ordered descending by value?", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the earnings of poker players, ordered descending by value?\",\n\"question_toks\": \"['What', 'are', 'the', 'earnings', 'of', 'poker', 'players', ',', 'ordered', 'descending', 'by', 'value', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT Earnings FROM poker_player ORDER BY Earnings DESC\",\n  \"query_toks\": [\"SELECT\", \"Earnings\", \"FROM\", \"poker_player\", \"ORDER\", \"BY\", \"Earnings\", \"DESC\"],\n  \"query_toks_no_value\": [\"SELECT\", \"<value>\", \"FROM\", \"poker_player\", \"ORDER\", \"BY\", \"<value>\", \"DESC\"],\n  \"question\": \"What are the earnings of poker players, ordered descending by value?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"earnings\", \"of\", \"poker\", \"players\", \",\", \"ordered\", \"descending\", \"by\", \"value\", \"?\"]\n}"}
{"question": "List the final tables made and the best finishes of poker players.", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"List the final tables made and the best finishes of poker players.\",\n\"question_toks\": \"['List', 'the', 'final', 'tables', 'made', 'and', 'the', 'best', 'finishes', 'of', 'poker', 'players', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT Final_Table_Made, Best_Finish FROM poker_player\",\n    \"query_toks\": [\"SELECT\", \"Final_Table_Made\", \",\", \"Best_Finish\", \"FROM\", \"poker_player\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Final_Table_Made\", \",\", \"Best_Finish\", \"FROM\", \"poker_player\"],\n    \"question\": \"List the final tables made and the best finishes of poker players.\",\n    \"question_toks\": [\"List\", \"the\", \"final\", \"tables\", \"made\", \"and\", \"the\", \"best\", \"finishes\", \"of\", \"poker\", \"players\", \".\"]\n}"}
{"question": "What are the final tables made and best finishes for all poker players?", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the final tables made and best finishes for all poker players?\",\n\"question_toks\": \"['What', 'are', 'the', 'final', 'tables', 'made', 'and', 'best', 'finishes', 'for', 'all', 'poker', 'players', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"poker_player\",\n \"query\": \"SELECT Final_Table_Made, Best_Finish FROM poker_player\",\n \"query_toks\": [\"SELECT\", \"Final_Table_Made\", \",\", \"Best_Finish\", \"FROM\", \"poker_player\"],\n \"query_toks_no_value\": [\"SELECT\", \"Final_Table_Made\", \",\", \"Best_Finish\", \"FROM\", \"poker_player\"],\n \"question\": \"What are the final tables made and best finishes for all poker players?\",\n \"question_toks\": [\"What\", \"are\", \"the\", \"final\", \"tables\", \"made\", \"and\", \"best\", \"finishes\", \"for\", \"all\", \"poker\", \"players\", \"?\"]\n}"}
{"question": "What is the average earnings of poker players?", "sql": "SELECT avg(Earnings) FROM poker_player", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What is the average earnings of poker players?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'earnings', 'of', 'poker', 'players', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT AVG(Earnings) FROM poker_player\",\n    \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"Earnings\", \")\", \"FROM\", \"poker_player\"],\n    \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"Earnings\", \")\", \"FROM\", \"poker_player\"],\n    \"question\": \"What is the average earnings of poker players?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"average\", \"earnings\", \"of\", \"poker\", \"players\", \"?\"]\n}"}
{"question": "Return the average earnings across all poker players.", "sql": "SELECT avg(Earnings) FROM poker_player", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Return the average earnings across all poker players.\",\n\"question_toks\": \"['Return', 'the', 'average', 'earnings', 'across', 'all', 'poker', 'players', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT AVG(Earnings) FROM poker_player\",\n  \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"Earnings\", \")\", \"FROM\", \"poker_player\"],\n  \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"Earnings\", \")\", \"FROM\", \"poker_player\"],\n  \"question\": \"Return the average earnings across all poker players.\",\n  \"question_toks\": [\"Return\", \"the\", \"average\", \"earnings\", \"across\", \"all\", \"poker\", \"players\", \".\"]\n}"}
{"question": "What is the money rank of the poker player with the highest earnings?", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What is the money rank of the poker player with the highest earnings?\",\n\"question_toks\": \"['What', 'is', 'the', 'money', 'rank', 'of', 'the', 'poker', 'player', 'with', 'the', 'highest', 'earnings', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"Money_Rank\", \"FROM\", \"poker_player\", \"ORDER\", \"BY\", \"Earnings\", \"DESC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Money_Rank\", \"FROM\", \"poker_player\", \"ORDER\", \"BY\", \"Earnings\", \"DESC\", \"LIMIT\"],\n  \"question\": \"What is the money rank of the poker player with the highest earnings?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"money\", \"rank\", \"of\", \"the\", \"poker\", \"player\", \"with\", \"the\", \"highest\", \"earnings\", \"?\"]\n}"}
{"question": "Return the money rank of the player with the greatest earnings.", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Return the money rank of the player with the greatest earnings.\",\n\"question_toks\": \"['Return', 'the', 'money', 'rank', 'of', 'the', 'player', 'with', 'the', 'greatest', 'earnings', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT Money_Rank FROM (SELECT Money_Rank, Earnings FROM poker_player ORDER BY Earnings DESC LIMIT 1) AS T1\",\n  \"query_toks\": [\"SELECT\", \"Money_Rank\", \"FROM\", \"(\", \"SELECT\", \"Money_Rank\", \",\", \"Earnings\", \"FROM\", \"poker_player\", \"ORDER\", \"BY\", \"Earnings\", \"DESC\", \"LIMIT\", \"1\", \")\", \"AS\", \"T1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Money_Rank\", \"FROM\", \"(\", \"SELECT\", \"Money_Rank\", \",\", \"Earnings\", \"FROM\", \"poker_player\", \"ORDER\", \"BY\", \"Earnings\", \"DESC\", \"LIMIT\", \"1\", \")\", \"AS\", \"T1\"],\n  \"question\": \"Return the money rank of the player with the greatest earnings.\",\n  \"question_toks\": [\"Return\", \"the\", \"money\", \"rank\", \"of\", \"the\", \"player\", \"with\", \"the\", \"greatest\", \"earnings\", \".\"]\n}"}
{"question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What is the maximum number of final tables made among poker players with earnings less than 200000?\",\n\"question_toks\": \"['What', 'is', 'the', 'maximum', 'number', 'of', 'final', 'tables', 'made', 'among', 'poker', 'players', 'with', 'earnings', 'less', 'than', '200000', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"poker_player\",\n \"query\": \"SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;\",\n \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"Final_Table_Made\", \")\", \"FROM\", \"poker_player\", \"WHERE\", \"Earnings\", \"<\", \"200000\", \";\"],\n \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"Final_Table_Made\", \")\", \"FROM\", \"poker_player\", \"WHERE\", \"Earnings\", \"<\", \"<value>\", \";\"],\n \"question\": \"What is the maximum number of final tables made among poker players with earnings less than 200000?\",\n \"question_toks\": [\"What\", \"is\", \"the\", \"maximum\", \"number\", \"of\", \"final\", \"tables\", \"made\", \"among\", \"poker\", \"players\", \"with\", \"earnings\", \"less\", \"than\", \"200000\", \"?\"]\n}"}
{"question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Return the maximum final tables made across all poker players who have earnings below 200000.\",\n\"question_toks\": \"['Return', 'the', 'maximum', 'final', 'tables', 'made', 'across', 'all', 'poker', 'players', 'who', 'have', 'earnings', 'below', '200000', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT MAX(Final_Table_Made) FROM (SELECT Final_Table_Made, Earnings FROM poker_player WHERE Earnings < 200000) AS T1\",\n    \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"Final_Table_Made\", \")\", \"FROM\", \"(\", \"SELECT\", \"Final_Table_Made\", \",\", \"Earnings\", \"FROM\", \"poker_player\", \"WHERE\", \"Earnings\", \"<\", \"200000\", \")\", \"AS\", \"T1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"Final_Table_Made\", \")\", \"FROM\", \"(\", \"SELECT\", \"Final_Table_Made\", \",\", \"Earnings\", \"FROM\", \"poker_player\", \"WHERE\", \"Earnings\", \"<\", \"?\", \")\", \"AS\", \"T1\"],\n    \"question\": \"Return the maximum final tables made across all poker players who have earnings below 200000.\",\n    \"question_toks\": [\"Return\", \"the\", \"maximum\", \"final\", \"tables\", \"made\", \"across\", \"all\", \"poker\", \"players\", \"who\", \"have\", \"earnings\", \"below\", \"200000\", \".\"]\n}"}
{"question": "What are the names of poker players?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the names of poker players?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'poker', 'players', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT Name FROM people T1, poker_player T2 WHERE T1.People_ID = T2.People_ID\",\n    \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"people\", \"T1\", \",\", \"poker_player\", \"T2\", \"WHERE\", \"T1\", \".\", \"People_ID\", \"=\", \"T2\", \".\", \"People_ID\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"people\", \"T1\", \",\", \"poker_player\", \"T2\", \"WHERE\", \"T1\", \".\", \"People_ID\", \"=\", \"T2\", \".\", \"People_ID\"],\n    \"question\": \"What are the names of poker players?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"poker\", \"players\", \"?\"]\n}"}
{"question": "Return the names of all the poker players.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Return the names of all the poker players.\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'all', 'the', 'poker', 'players', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT People.Name FROM poker_player AS PP JOIN people AS People ON PP.People_ID = People.People_ID\",\n    \"query_toks\": [\n        \"SELECT\",\n        \"People\",\n        \".\",\n        \"Name\",\n        \"FROM\",\n        \"poker_player\",\n        \"AS\",\n        \"PP\",\n        \"JOIN\",\n        \"people\",\n        \"AS\",\n        \"People\",\n        \"ON\",\n        \"PP\",\n        \".\",\n        \"People_ID\",\n        \"=\",\n        \"People\",\n        \".\",\n        \"People_ID\"\n    ],\n    \"query_toks_no_value\": [\n        \"SELECT\",\n        \"People\",\n        \".\",\n        \"Name\",\n        \"FROM\",\n        \"poker_player\",\n        \"AS\",\n        \"PP\",\n        \"JOIN\",\n        \"people\",\n        \"AS\",\n        \"People\",\n        \"ON\",\n        \"PP\",\n        \".\",\n        \"People_ID\",\n        \"=\",\n        \"People\",\n        \".\",\n        \"People_ID\"\n    ],\n    \"question\": \"Return the names of all the poker players.\",\n    \"question_toks\": [\n        \"Return\",\n        \"the\",\n        \"names\",\n        \"of\",\n        \"all\",\n        \"the\",\n        \"poker\",\n        \"players\",\n        \".\"\n    ]\n}"}
{"question": "What are the names of poker players whose earnings is higher than 300000?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the names of poker players whose earnings is higher than 300000?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'poker', 'players', 'whose', 'earnings', 'is', 'higher', 'than', '300000', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT p.Name FROM poker_player AS pl JOIN people AS p ON pl.People_ID=p.People_ID WHERE pl.Earnings > 300000;\",\n  \"query_toks\": [\"SELECT\", \"p\", \".\", \"Name\", \"FROM\", \"poker_player\", \"AS\", \"pl\", \"JOIN\", \"people\", \"AS\", \"p\", \"ON\", \"pl\", \".\", \"People_ID\", \"=\", \"p\", \".\", \"People_ID\", \"WHERE\", \"pl\", \".\", \"Earnings\", \">\", \"300000\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"p\", \".\", \"Name\", \"FROM\", \"poker_player\", \"AS\", \"pl\", \"JOIN\", \"people\", \"AS\", \"p\", \"ON\", \"pl\", \".\", \"People_ID\", \"=\", \"p\", \".\", \"People_ID\", \"WHERE\", \"pl\", \".\", \"Earnings\", \">\", \"?\", \";\"],\n  \"question\": \"What are the names of poker players whose earnings is higher than 300000?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"poker\", \"players\", \"whose\", \"earnings\", \"is\", \"higher\", \"than\", \"300000\", \"?\"]\n}"}
{"question": "Give the names of poker players who have earnings above 300000.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Give the names of poker players who have earnings above 300000.\",\n\"question_toks\": \"['Give', 'the', 'names', 'of', 'poker', 'players', 'who', 'have', 'earnings', 'above', '300000', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"poker_player\",\n\"query\": \"SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID=people.People_ID WHERE poker_player.Earnings>300000\",\n\"query_toks\": \"['SELECT', 'people', '.', 'Name', 'FROM', 'poker_player', 'JOIN', 'people', 'ON', 'poker_player', '.', 'People_ID', '=', 'people', '.', 'People_ID', 'WHERE', 'poker_player', '.', 'Earnings', '>', '300000']\",\n\"query_toks_no_value\": \"['SELECT', 'people', '.', 'Name', 'FROM', 'poker_player', 'JOIN', 'people', 'ON', 'poker_player', '.', 'People_ID', '=', 'people', '.', 'People_ID', 'WHERE', 'poker_player', '.', 'Earnings']\",\n\"question\": \"Give the names of poker players who have earnings above 300000.\",\n\"question_toks\": \"['Give', 'the', 'names', 'of', 'poker', 'players', 'who', 'have', 'earnings', 'above', '300000', '.']}\""}
{"question": "List the names of poker players ordered by the final tables made in ascending order.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"List the names of poker players ordered by the final tables made in ascending order.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'poker', 'players', 'ordered', 'by', 'the', 'final', 'tables', 'made', 'in', 'ascending', 'order', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT people.Name\\nFROM poker_player, people\\nWHERE poker_player.People_ID = people.People_ID\\nORDER BY poker_player.Final_Table_Made ASC\",\n    \"query_toks\": [\"SELECT\", \"people\", \".\", \"Name\", \"FROM\", \"poker_player\", \",\", \"people\", \"WHERE\", \"poker_player\", \".\", \"People_ID\", \"=\", \"people\", \".\", \"People_ID\", \"ORDER\", \"BY\", \"poker_player\", \".\", \"Final_Table_Made\", \"ASC\"],\n    \"query_toks_no_value\": [\"SELECT\", \"people\", \".\", \"Name\", \"FROM\", \"poker_player\", \",\", \"people\", \"WHERE\", \"poker_player\", \".\", \"People_ID\", \"=\", \"people\", \".\", \"People_ID\", \"ORDER\", \"BY\", \"poker_player\", \".\", \"Final_Table_Made\", \"ASC\"],\n    \"question\": \"List the names of poker players ordered by the final tables made in ascending order.\",\n    \"question_toks\": [\"List\", \"the\", \"names\", \"of\", \"poker\", \"players\", \"ordered\", \"by\", \"the\", \"final\", \"tables\", \"made\", \"in\", \"ascending\", \"order\", \".\"]\n}"}
{"question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the names of poker players, ordered ascending by the number of final tables they have made?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'poker', 'players', ',', 'ordered', 'ascending', 'by', 'the', 'number', 'of', 'final', 'tables', 'they', 'have', 'made', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"poker_player\",\n \"query\": \"SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.People_ID ORDER BY COUNT(poker_player.Final_Table_Made) ASC\",\n \"query_toks\": [\"SELECT\", \"people\", \".\", \"Name\", \"FROM\", \"poker_player\", \"JOIN\", \"people\", \"ON\", \"poker_player\", \".\", \"People_ID\", \"=\", \"people\", \".\", \"People_ID\", \"GROUP\", \"BY\", \"people\", \".\", \"People_ID\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"poker_player\", \".\", \"Final_Table_Made\", \")\", \"ASC\"],\n \"query_toks_no_value\": [\"SELECT\", \"people\", \".\", \"Name\", \"FROM\", \"poker_player\", \"JOIN\", \"people\", \"ON\", \"poker_player\", \".\", \"People_ID\", \"=\", \"people\", \".\", \"People_ID\", \"GROUP\", \"BY\", \"people\", \".\", \"People_ID\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"poker_player\", \".\", \"Final_Table_Made\", \")\", \"ASC\"],\n \"question\": \"What are the names of poker players, ordered ascending by the number of final tables they have made?\",\n \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"poker\", \"players\", \",\", \"ordered\", \"ascending\", \"by\", \"the\", \"number\", \"of\", \"final\", \"tables\", \"they\", \"have\", \"made\", \"?\"]\n}"}
{"question": "What is the birth date of the poker player with the lowest earnings?", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What is the birth date of the poker player with the lowest earnings?\",\n\"question_toks\": \"['What', 'is', 'the', 'birth', 'date', 'of', 'the', 'poker', 'player', 'with', 'the', 'lowest', 'earnings', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player)\",\n  \"query_toks\": [\"SELECT\", \"people\", \".\", \"Birth_Date\", \"FROM\", \"poker_player\", \"JOIN\", \"people\", \"ON\", \"poker_player\", \".\", \"People_ID\", \"=\", \"people\", \".\", \"People_ID\", \"WHERE\", \"poker_player\", \".\", \"Earnings\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Earnings\", \")\", \"FROM\", \"poker_player\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"people\", \".\", \"Birth_Date\", \"FROM\", \"poker_player\", \"JOIN\", \"people\", \"ON\", \"poker_player\", \".\", \"People_ID\", \"=\", \"people\", \".\", \"People_ID\", \"WHERE\", \"poker_player\", \".\", \"Earnings\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Earnings\", \")\", \"FROM\", \"poker_player\", \")\"],\n  \"question\": \"What is the birth date of the poker player with the lowest earnings?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"birth\", \"date\", \"of\", \"the\", \"poker\", \"player\", \"with\", \"the\", \"lowest\", \"earnings\", \"?\"],\n}"}
{"question": "Return the birth date of the poker player with the lowest earnings.", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Return the birth date of the poker player with the lowest earnings.\",\n\"question_toks\": \"['Return', 'the', 'birth', 'date', 'of', 'the', 'poker', 'player', 'with', 'the', 'lowest', 'earnings', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT p.Birth_Date FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)\",\n    \"query_toks\": [\"SELECT\", \"p\", \".\", \"Birth_Date\", \"FROM\", \"poker_player\", \"AS\", \"pp\", \"JOIN\", \"people\", \"AS\", \"p\", \"ON\", \"pp\", \".\", \"People_ID\", \"=\", \"p\", \".\", \"People_ID\", \"WHERE\", \"pp\", \".\", \"Earnings\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Earnings\", \")\", \"FROM\", \"poker_player\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"p\", \".\", \"Birth_Date\", \"FROM\", \"poker_player\", \"AS\", \"pp\", \"JOIN\", \"people\", \"AS\", \"p\", \"ON\", \"pp\", \".\", \"People_ID\", \"=\", \"p\", \".\", \"People_ID\", \"WHERE\", \"pp\", \".\", \"Earnings\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Earnings\", \")\", \"FROM\", \"poker_player\", \")\"],\n    \"question\": \"Return the birth date of the poker player with the lowest earnings.\",\n    \"question_toks\": [\"Return\", \"the\", \"birth\", \"date\", \"of\", \"the\", \"poker\", \"player\", \"with\", \"the\", \"lowest\", \"earnings\", \".\"]\n}"}
{"question": "What is the money rank of the tallest poker player?", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What is the money rank of the tallest poker player?\",\n\"question_toks\": \"['What', 'is', 'the', 'money', 'rank', 'of', 'the', 'tallest', 'poker', 'player', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT Money_Rank FROM (SELECT MAX(Height) as Max_Height FROM people) AS T1 JOIN people AS T2 ON T1.Max_Height = T2.Height JOIN poker_player AS T3 ON T2.People_ID = T3.People_ID\",\n  \"query_toks\": [\"SELECT\", \"Money_Rank\", \"FROM\", \"(\", \"SELECT\", \"MAX\", \"(\", \"Height\", \")\", \"as\", \"Max_Height\", \"FROM\", \"people\", \")\", \"AS\", \"T1\", \"JOIN\", \"people\", \"AS\", \"T2\", \"ON\", \"T1\", \".\", \"Max_Height\", \"=\", \"T2\", \".\", \"Height\", \"JOIN\", \"poker_player\", \"AS\", \"T3\", \"ON\", \"T2\", \".\", \"People_ID\", \"=\", \"T3\", \".\", \"People_ID\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Money_Rank\", \"FROM\", \"(\", \"SELECT\", \"MAX\", \"(\", \"Height\", \")\", \"as\", \"Max_Height\", \"FROM\", \"people\", \")\", \"AS\", \"T\", \"JOIN\", \"people\", \"AS\", \"T\", \"ON\", \"T\", \".\", \"Max_Height\", \"=\", \"T\", \".\", \"Height\", \"JOIN\", \"poker_player\", \"AS\", \"T\", \"ON\", \"T\", \".\", \"People_ID\", \"=\", \"T\", \".\", \"People_ID\"],\n  \"question\": \"What is the money rank of the tallest poker player?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"money\", \"rank\", \"of\", \"the\", \"tallest\", \"poker\", \"player\", \"?\"],\n}"}
{"question": "Return the money rank of the poker player with the greatest height.", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Return the money rank of the poker player with the greatest height.\",\n\"question_toks\": \"['Return', 'the', 'money', 'rank', 'of', 'the', 'poker', 'player', 'with', 'the', 'greatest', 'height', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT Earnings FROM poker_player T1 JOIN people T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT MAX(Height) FROM people)\",\n    \"query_toks\": \"['SELECT', 'Earnings', 'FROM', 'poker_player', 'T1', 'JOIN', 'people', 'T2', 'ON', 'T1', '.', 'People_ID', '=', 'T2', '.', 'People_ID', 'WHERE', 'T2', '.', 'Height', '=', '(', 'SELECT', 'MAX', '(', 'Height', ')', 'FROM', 'people', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'Earnings', 'FROM', 'poker_player', 'T1', 'JOIN', 'people', 'T2', 'ON', 'T1', '.', 'People_ID', '=', 'T2', '.', 'People_ID', 'WHERE', 'T2', '.', 'Height', '=', '(', 'SELECT', 'MAX', '(', 'Height', ')', 'FROM', 'people', ')']\",\n    \"question\": \"Return the money rank of the poker player with the greatest height.\",\n    \"question_toks\": \"['Return', 'the', 'money', 'rank', 'of', 'the', 'poker', 'player', 'with', 'the', 'greatest', 'height', '.']\"\n}"}
{"question": "What is the average earnings of poker players with height higher than 200?", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What is the average earnings of poker players with height higher than 200?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'earnings', 'of', 'poker', 'players', 'with', 'height', 'higher', 'than', '200', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT AVG(p.Earnings) FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200\",\n    \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"p\", \".\", \"Earnings\", \")\", \"FROM\", \"poker_player\", \"p\", \"JOIN\", \"people\", \"pe\", \"ON\", \"p\", \".\", \"People_ID\", \"=\", \"pe\", \".\", \"People_ID\", \"WHERE\", \"pe\", \".\", \"Height\", \">\", \"200\"],\n    \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"p\", \".\", \"Earnings\", \")\", \"FROM\", \"poker_player\", \"p\", \"JOIN\", \"people\", \"pe\", \"ON\", \"p\", \".\", \"People_ID\", \"=\", \"pe\", \".\", \"People_ID\", \"WHERE\", \"pe\", \".\", \"Height\", \">\", \"?\"],\n    \"question\": \"What is the average earnings of poker players with height higher than 200?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"average\", \"earnings\", \"of\", \"poker\", \"players\", \"with\", \"height\", \"higher\", \"than\", \"200\", \"?\"]\n}"}
{"question": "Give average earnings of poker players who are taller than 200.", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Give average earnings of poker players who are taller than 200.\",\n\"question_toks\": \"['Give', 'average', 'earnings', 'of', 'poker', 'players', 'who', 'are', 'taller', 'than', '200', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT AVG(Earnings) FROM (SELECT Earnings FROM poker_player JOIN people T2 ON poker_player.People_ID = T2.People_ID WHERE T2.Height > 200) T1\",\n    \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"Earnings\", \")\", \"FROM\", \"(\", \"SELECT\", \"Earnings\", \"FROM\", \"poker_player\", \"JOIN\", \"people\", \"T2\", \"ON\", \"poker_player.People_ID\", \"=\", \"T2.People_ID\", \"WHERE\", \"T2.Height\", \">\", \"200\", \")\", \"T1\"],\n    \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"Earnings\", \")\", \"FROM\", \"(\", \"SELECT\", \"Earnings\", \"FROM\", \"poker_player\", \"JOIN\", \"people\", \"T2\", \"ON\", \"poker_player.\", \"People_ID\", \"=\", \"T2.\", \"People_ID\", \"WHERE\", \"T2.\", \"Height\", \">\", \"\", \")\", \"T1\"],\n    \"question\": \"Give average earnings of poker players who are taller than 200.\",\n    \"question_toks\": [\"Give\", \"average\", \"earnings\", \"of\", \"poker\", \"players\", \"who\", \"are\", \"taller\", \"than\", \"200\", \".\"]\n}"}
{"question": "What are the names of poker players in descending order of earnings?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the names of poker players in descending order of earnings?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'poker', 'players', 'in', 'descending', 'order', 'of', 'earnings', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT people.Name FROM poker_player JOIN people on poker_player.People_ID=people.People_ID ORDER BY poker_player.Earnings DESC\",\n    \"query_toks\": \"['SELECT', 'people', '.', 'Name', 'FROM', 'poker_player', 'JOIN', 'people', 'on', 'poker_player', '.', 'People_ID', '=', 'people', '.', 'People_ID', 'ORDER', 'BY', 'poker_player', '.', 'Earnings', 'DESC']\",\n    \"query_toks_no_value\": \"['SELECT', 'people', '.', 'Name', 'FROM', 'poker_player', 'JOIN', 'people', 'on', 'poker_player', '.', 'People_ID', '=', 'people', '.', 'People_ID', 'ORDER', 'BY', 'poker_player', '.', 'Earnings', 'DESC']\",\n    \"question\": \"What are the names of poker players in descending order of earnings?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'poker', 'players', 'in', 'descending', 'order', 'of', 'earnings', '?']\"\n}"}
{"question": "Return the names of poker players sorted by their earnings descending.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Return the names of poker players sorted by their earnings descending.\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'poker', 'players', 'sorted', 'by', 'their', 'earnings', 'descending', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT p.Name FROM people AS p, poker_player AS pp WHERE p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC\",\n  \"query_toks\": [\"SELECT\", \"p\", \".\", \"Name\", \"FROM\", \"people\", \"AS\", \"p\", \",\", \"poker_player\", \"AS\", \"pp\", \"WHERE\", \"p\", \".\", \"People_ID\", \"=\", \"pp\", \".\", \"People_ID\", \"ORDER\", \"BY\", \"pp\", \".\", \"Earnings\", \"DESC\"],\n  \"query_toks_no_value\": [\"SELECT\", \"p\", \".\", \"Name\", \"FROM\", \"people\", \"AS\", \"p\", \",\", \"poker_player\", \"AS\", \"pp\", \"WHERE\", \"p\", \".\", \"People_ID\", \"=\", \"pp\", \".\", \"People_ID\", \"ORDER\", \"BY\", \"pp\", \".\", \"Earnings\", \"DESC\"],\n  \"question\": \"Return the names of poker players sorted by their earnings descending.\",\n  \"question_toks\": [\"Return\", \"the\", \"names\", \"of\", \"poker\", \"players\", \"sorted\", \"by\", \"their\", \"earnings\", \"descending\", \".\"]\n}"}
{"question": "What are different nationalities of people and the corresponding number of people from each nation?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are different nationalities of people and the corresponding number of people from each nation?\",\n\"question_toks\": \"['What', 'are', 'different', 'nationalities', 'of', 'people', 'and', 'the', 'corresponding', 'number', 'of', 'people', 'from', 'each', 'nation', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT Nationality, COUNT(*) FROM People GROUP BY Nationality\",\n    \"query_toks\": [\"SELECT\", \"Nationality\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"People\", \"GROUP\", \"BY\", \"Nationality\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Nationality\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"People\", \"GROUP\", \"BY\", \"Nationality\"],\n    \"question\": \"What are different nationalities of people and the corresponding number of people from each nation?\",\n    \"question_toks\": [\"What\", \"are\", \"different\", \"nationalities\", \"of\", \"people\", \"and\", \"the\", \"corresponding\", \"number\", \"of\", \"people\", \"from\", \"each\", \"nation\", \"?\"]\n}"}
{"question": "How many people are there of each nationality?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"How many people are there of each nationality?\",\n\"question_toks\": \"['How', 'many', 'people', 'are', 'there', 'of', 'each', 'nationality', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality\",\n    \"query_toks\": [\"SELECT\", \"Nationality\", \",\", \"COUNT\", \"(\", \"People_ID\", \")\", \"FROM\", \"people\", \"GROUP\", \"BY\", \"Nationality\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Nationality\", \",\", \"COUNT\", \"(\", \"People_ID\", \")\", \"FROM\", \"people\", \"GROUP\", \"BY\", \"Nationality\"],\n    \"question\": \"How many people are there of each nationality?\",\n    \"question_toks\": [\"How\", \"many\", \"people\", \"are\", \"there\", \"of\", \"each\", \"nationality\", \"?\"]\n}"}
{"question": "What is the most common nationality of people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What is the most common nationality of people?\",\n\"question_toks\": \"['What', 'is', 'the', 'most', 'common', 'nationality', 'of', 'people', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(People_ID) DESC LIMIT 1;\",\n  \"query_toks\": [\"SELECT\", \"Nationality\", \"FROM\", \"people\", \"GROUP\", \"BY\", \"Nationality\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"People_ID\", \")\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Nationality\", \"FROM\", \"people\", \"GROUP\", \"BY\", \"Nationality\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"People_ID\", \")\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n  \"question\": \"What is the most common nationality of people?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"most\", \"common\", \"nationality\", \"of\", \"people\", \"?\"]\n}"}
{"question": "Give the nationality that is most common across all people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Give the nationality that is most common across all people.\",\n\"question_toks\": \"['Give', 'the', 'nationality', 'that', 'is', 'most', 'common', 'across', 'all', 'people', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT Nationality FROM (SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality) count_table ORDER BY count DESC LIMIT 1;\",\n  \"query_toks\": [\"SELECT\", \"Nationality\", \"FROM\", \"(\", \"SELECT\", \"Nationality\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \"FROM\", \"people\", \"GROUP\", \"BY\", \"Nationality\", \")\", \"count_table\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Nationality\", \"FROM\", \"(\", \"SELECT\", \"Nationality\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \"FROM\", \"people\", \"GROUP\", \"BY\", \"Nationality\", \")\", \"count_table\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n  \"question\": \"Give the nationality that is most common across all people.\",\n  \"question_toks\": [\"Give\", \"the\", \"nationality\", \"that\", \"is\", \"most\", \"common\", \"across\", \"all\", \"people\", \".\"]\n}"}
{"question": "What are the nationalities that are shared by at least two people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the nationalities that are shared by at least two people?\",\n\"question_toks\": \"['What', 'are', 'the', 'nationalities', 'that', 'are', 'shared', 'by', 'at', 'least', 'two', 'people', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT DISTINCT people_1.Nationality\\nFROM people AS people_1, people AS people_2\\nWHERE people_1.People_ID <> people_2.People_ID AND people_1.Nationality = people_2.Nationality;\",\n  \"query_toks\": [\n    \"SELECT\",\n    \"DISTINCT\",\n    \"people_1\",\n    \".\",\n    \"Nationality\",\n    \"FROM\",\n    \"people\",\n    \"AS\",\n    \"people_1\",\n    \",\",\n    \"people\",\n    \"AS\",\n    \"people_2\",\n    \"WHERE\",\n    \"people_1\",\n    \".\",\n    \"People_ID\",\n    \"<>\",\n    \"people_2\",\n    \".\",\n    \"People_ID\",\n    \"AND\",\n    \"people_1\",\n    \".\",\n    \"Nationality\",\n    \"=\",\n    \"people_2\",\n    \".\",\n    \"Nationality\",\n    \";\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\",\n    \"DISTINCT\",\n    \"people_1\",\n    \".\",\n    \"Nationality\",\n    \"FROM\",\n    \"people\",\n    \"AS\",\n    \"people_1\",\n    \",\",\n    \"people\",\n    \"AS\",\n    \"people_2\",\n    \"WHERE\",\n    \"people_1\",\n    \".\",\n    \"People_ID\",\n    \"<>\",\n    \"people_2\",\n    \".\",\n    \"People_ID\",\n    \"AND\",\n    \"people_1\",\n    \".\",\n    \"Nationality\",\n    \"=\",\n    \"people_2\",\n    \".\",\n    \"Nationality\",\n    \";\"\n  ],\n  \"question\": \"What are the nationalities that are shared by at least two people?\",\n  \"question_toks\": [\n    \"What\",\n    \"are\",\n    \"the\",\n    \"nationalities\",\n    \"that\",\n    \"are\",\n    \"shared\",\n    \"by\",\n    \"at\",\n    \"least\",\n    \"two\",\n    \"people\",\n    \"?\"\n  ]\n}"}
{"question": "Return the nationalities for which there are two or more people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Return the nationalities for which there are two or more people.\",\n\"question_toks\": \"['Return', 'the', 'nationalities', 'for', 'which', 'there', 'are', 'two', 'or', 'more', 'people', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT Nationality FROM (SELECT COUNT(*) AS count, Nationality FROM (SELECT DISTINCT People_ID, Nationality FROM people) AS T1 GROUP BY Nationality) AS T2 WHERE count>=2\",\n    \"query_toks\": \"['SELECT', 'Nationality', 'FROM', '(', 'SELECT', 'COUNT', '(', '*', ')', 'AS', 'count', ',', 'Nationality', 'FROM', '(', 'SELECT', 'DISTINCT', 'People_ID', ',', 'Nationality', 'FROM', 'people', ')', 'AS', 'T1', 'GROUP', 'BY', 'Nationality', ')', 'AS', 'T2', 'WHERE', 'count', '>=', '2']\",\n    \"query_toks_no_value\": \"['SELECT', 'Nationality', 'FROM', '(', 'SELECT', 'COUNT', '(', '*', ')', 'AS', 'count', ',', 'Nationality', 'FROM', '(', 'SELECT', 'DISTINCT', 'People_ID', ',', 'Nationality', 'FROM', 'people', ')', 'AS', 'T1', 'GROUP', 'BY', 'Nationality', ')', 'AS', 'T2', 'WHERE', 'count', '>=', '2']\",\n    \"question\": \"Return the nationalities for which there are two or more people.\",\n    \"question_toks\": \"['Return', 'the', 'nationalities', 'for', 'which', 'there', 'are', 'two', 'or', 'more', 'people', '.']\"\n}"}
{"question": "List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"List the names and birth dates of people in ascending alphabetical order of name.\",\n\"question_toks\": \"['List', 'the', 'names', 'and', 'birth', 'dates', 'of', 'people', 'in', 'ascending', 'alphabetical', 'order', 'of', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT Name, Birth_Date FROM people ORDER BY Name ASC;\",\n  \"query_toks\": [\n    \"SELECT\",\n    \"Name\",\n    \",\",\n    \"Birth_Date\",\n    \"FROM\",\n    \"people\",\n    \"ORDER\",\n    \"BY\",\n    \"Name\",\n    \"ASC\",\n    \";\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\",\n    \"Name\",\n    \",\",\n    \"Birth_Date\",\n    \"FROM\",\n    \"people\",\n    \"ORDER\",\n    \"BY\",\n    \"Name\",\n    \"ASC\",\n    \";\"\n  ],\n  \"question\": \"List the names and birth dates of people in ascending alphabetical order of name.\",\n  \"question_toks\": [\n    \"List\",\n    \"the\",\n    \"names\",\n    \"and\",\n    \"birth\",\n    \"dates\",\n    \"of\",\n    \"people\",\n    \"in\",\n    \"ascending\",\n    \"alphabetical\",\n    \"order\",\n    \"of\",\n    \"name\",\n    \".\"\n  ]\n}"}
{"question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the names and birth dates of people, ordered by their names in alphabetical order?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'birth', 'dates', 'of', 'people', ',', 'ordered', 'by', 'their', 'names', 'in', 'alphabetical', 'order', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT Name, Birth_Date FROM people ORDER BY Name ASC\",\n    \"query_toks\": \"['SELECT', 'Name', ',', 'Birth_Date', 'FROM', 'people', 'ORDER', 'BY', 'Name', 'ASC']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Birth_Date', 'FROM', 'people', 'ORDER', 'BY', 'Name', 'ASC']\",\n    \"question\": \"What are the names and birth dates of people, ordered by their names in alphabetical order?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'birth', 'dates', 'of', 'people', ',', 'ordered', 'by', 'their', 'names', 'in', 'alphabetical', 'order', '?']\"\n}"}
{"question": "Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Show names of people whose nationality is not \"Russia\".\",\n\"question_toks\": \"['Show', 'names', 'of', 'people', 'whose', 'nationality', 'is', 'not', '``', 'Russia', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT Name FROM people WHERE Nationality != 'Russia'\",\n  \"query_toks\": \"[SELECT, Name, FROM, people, WHERE, Nationality, !=, 'Russia']\",\n  \"query_toks_no_value\": \"[SELECT, Name, FROM, people, WHERE, Nationality, !=]\",\n  \"question\": \"Show names of people whose nationality is not \\\"Russia\\\".\",\n  \"question_toks\": \"['Show', 'names', 'of', 'people', 'whose', 'nationality', 'is', 'not', '``', 'Russia', \"''\", '.']\"\n}"}
{"question": "What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the names of people who are not from Russia?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'people', 'who', 'are', 'not', 'from', 'Russia', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT Name FROM people WHERE Nationality != 'Russia'\",\n    \"query_toks\": \"['SELECT', 'Name', 'FROM', 'people', 'WHERE', 'Nationality', '!', '=', ''Russia', '']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'people', 'WHERE', 'Nationality', '!', '=', '']\",\n    \"question\": \"What are the names of people who are not from Russia?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'people', 'who', 'are', 'not', 'from', 'Russia', '?']\"\n}"}
{"question": "List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"List the names of people that are not poker players.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'people', 'that', 'are', 'not', 'poker', 'players', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"poker_player\",\n  \"query\": \"SELECT p.Name FROM people p WHERE p.People_ID NOT IN (SELECT pp.People_ID FROM poker_player pp)\",\n  \"query_toks\": [\"SELECT\", \"p\", \".\", \"Name\", \"FROM\", \"people\", \"p\", \"WHERE\", \"p\", \".\", \"People_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"pp\", \".\", \"People_ID\", \"FROM\", \"poker_player\", \"pp\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"p\", \".\", \"Name\", \"FROM\", \"people\", \"p\", \"WHERE\", \"p\", \".\", \"People_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"pp\", \".\", \"People_ID\", \"FROM\", \"poker_player\", \"pp\", \")\", \";\"],\n  \"question\": \"List the names of people that are not poker players.\",\n  \"question_toks\": [\"List\", \"the\", \"names\", \"of\", \"people\", \"that\", \"are\", \"not\", \"poker\", \"players\", \".\"]\n}"}
{"question": "What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"What are the names of people who do not play poker?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'people', 'who', 'do', 'not', 'play', 'poker', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)\",\n    \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"people\", \"WHERE\", \"People_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"People_ID\", \"FROM\", \"poker_player\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"people\", \"WHERE\", \"People_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"People_ID\", \"FROM\", \"poker_player\", \")\"],\n    \"question\": \"What are the names of people who do not play poker?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"people\", \"who\", \"do\", \"not\", \"play\", \"poker\", \"?\"]\n}"}
{"question": "How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"How many distinct nationalities are there?\",\n\"question_toks\": \"['How', 'many', 'distinct', 'nationalities', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"poker_player\",\n\"query\": \"SELECT COUNT(DISTINCT Nationality) FROM people\",\n\"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Nationality\", \")\", \"FROM\", \"people\"],\n\"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Nationality\", \")\", \"FROM\", \"people\"],\n\"question\": \"How many distinct nationalities are there?\",\n\"question_toks\": [\"How\", \"many\", \"distinct\", \"nationalities\", \"are\", \"there\", \"?\"]\n}"}
{"question": "Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\npoker_player: 'Poker_Player_ID', 'People_ID', 'Final_Table_Made', 'Best_Finish', 'Money_Rank', 'Earnings'\npeople: 'People_ID', 'Nationality', 'Name', 'Birth_Date', 'Height'\n\n{\"db_id\": \"poker_player\",\n\"question\": \"Count the number of different nationalities.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'different', 'nationalities', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"poker_player\",\n    \"query\": \"SELECT COUNT(DISTINCT Nationality) FROM people;\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Nationality\", \")\", \"FROM\", \"people\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Nationality\", \")\", \"FROM\", \"people\", \";\"],\n    \"question\": \"Count the number of different nationalities.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"different\", \"nationalities\", \".\"]\n}"}
{"question": "How many states are there?", "sql": "SELECT count(*) FROM area_code_state", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"How many states are there?\",\n\"question_toks\": \"['How', 'many', 'states', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"voter_1\",\n    \"query\": \"SELECT COUNT(*) FROM states\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"states\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"FROM\", \"states\"],\n    \"question\": \"How many states are there?\",\n    \"question_toks\": [\"How\", \"many\", \"states\", \"are\", \"there\", \"?\"],\n}"}
{"question": "List the contestant numbers and names, ordered by contestant name descending.", "sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"List the contestant numbers and names, ordered by contestant name descending.\",\n\"question_toks\": \"['List', 'the', 'contestant', 'numbers', 'and', 'names', ',', 'ordered', 'by', 'contestant', 'name', 'descending', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC\",\n\"query_toks\": \"['SELECT', 'contestant_number', ',', 'contestant_name', 'FROM', 'contestants', 'ORDER', 'BY', 'contestant_name', 'DESC']\",\n\"query_toks_no_value\": \"['SELECT', 'contestant_number', ',', 'contestant_name', 'FROM', 'contestants', 'ORDER', 'BY', 'contestant_name', 'DESC']\",\n\"question\": \"List the contestant numbers and names, ordered by contestant name descending.\",\n\"question_toks\": \"['List', 'the', 'contestant', 'numbers', 'and', 'names', ',', 'ordered', 'by', 'contestant', 'name', 'descending', '.']\"}"}
{"question": "List the vote ids, phone numbers and states of all votes.", "sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"List the vote ids, phone numbers and states of all votes.\",\n\"question_toks\": \"['List', 'the', 'vote', 'ids', ',', 'phone', 'numbers', 'and', 'states', 'of', 'all', 'votes', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT vote_id, phone_number, state FROM VOTES\",\n\"query_toks\": \"['SELECT', 'vote_id', ',', 'phone_number', ',', 'state', 'FROM', 'VOTES']\",\n\"query_toks_no_value\": \"['SELECT', 'vote_id', ',', 'phone_number', ',', 'state', 'FROM', 'VOTES']\",\n\"question\": \"List the vote ids, phone numbers and states of all votes.\",\n\"question_toks\": \"['List', 'the', 'vote', 'ids', ',', 'phone', 'numbers', 'and', 'states', 'of', 'all', 'votes', '.']\"}"}
{"question": "What are the maximum and minimum values of area codes?", "sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"What are the maximum and minimum values of area codes?\",\n\"question_toks\": \"['What', 'are', 'the', 'maximum', 'and', 'minimum', 'values', 'of', 'area', 'codes', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n \"query\": \"SELECT MAX(area_code) AS maximum_value, MIN(area_code) AS minimum_value FROM T1\",\n \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"area_code\", \")\", \"AS\", \"maximum_value\", \",\", \"MIN\", \"(\", \"area_code\", \")\", \"AS\", \"minimum_value\", \"FROM\", \"T1\"],\n \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"area_code\", \")\", \",\", \"MIN\", \"(\", \"area_code\", \")\", \"FROM\", \"T1\"],\n \"question\": \"What are the maximum and minimum values of area codes?\",\n \"question_toks\": [\"What\", \"are\", \"the\", \"maximum\", \"and\", \"minimum\", \"values\", \"of\", \"area\", \"codes\", \"?\"]\n}"}
{"question": "What is last date created of votes from the state 'CA'?", "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"What is last date created of votes from the state 'CA'?\",\n\"question_toks\": \"['What', 'is', 'last', 'date', 'created', 'of', 'votes', 'from', 'the', 'state', \"'CA\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n \"query\": \"SELECT MAX(created) FROM votes WHERE state='CA'\",\n \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"created\", \")\", \"FROM\", \"votes\", \"WHERE\", \"state\", \"=\", \"'CA'\",],\n \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"created\", \")\", \"FROM\", \"votes\", \"WHERE\", \"state\", \"=\", \"?\",],\n \"question\": \"What is last date created of votes from the state 'CA'?\",\n \"question_toks\": [\"What\", \"is\", \"last\", \"date\", \"created\", \"of\", \"votes\", \"from\", \"the\", \"state\", \"'CA'\", \"?\"]}"}
{"question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"What are the names of the contestants whose names are not 'Jessie Alloway'\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'contestants', 'whose', 'names', 'are', 'not', \"'Jessie\", 'Alloway', \"'\"]}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT T2.contestant_name FROM CONTESTANTS T2 WHERE T2.contestant_name != 'Jessie Alloway'\",\n\"query_toks\": \"['SELECT', 'T2', '.', 'contestant_name', 'FROM', 'CONTESTANTS', 'T2', 'WHERE', 'T2', '.', 'contestant_name', '!=', ''''Jessie', 'Alloway''''']\",\n\"query_toks_no_value\": \"['SELECT', 'T2', '.', 'contestant_name', 'FROM', 'CONTESTANTS', 'T2', 'WHERE', 'T2', '.', 'contestant_name', '!=']\",\n\"question\": \"What are the names of the contestants whose names are not 'Jessie Alloway'\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'contestants', 'whose', 'names', 'are', 'not', \"'Jessie\", 'Alloway', \"'']\" }"}
{"question": "What are the distinct states and create time of all votes?", "sql": "SELECT DISTINCT state ,  created FROM votes", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"What are the distinct states and create time of all votes?\",\n\"question_toks\": \"['What', 'are', 'the', 'distinct', 'states', 'and', 'create', 'time', 'of', 'all', 'votes', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT DISTINCT state, created FROM votes\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'state', ',', 'created', 'FROM', 'votes']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'state', ',', 'created', 'FROM', 'votes']\",\n\"question\": \"What are the distinct states and create time of all votes?\",\n\"question_toks\": \"['What', 'are', 'the', 'distinct', 'states', 'and', 'create', 'time', 'of', 'all', 'votes', '?']}\""}
{"question": "What are the contestant numbers and names of the contestants who had at least two votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"What are the contestant numbers and names of the contestants who had at least two votes?\",\n\"question_toks\": \"['What', 'are', 'the', 'contestant', 'numbers', 'and', 'names', 'of', 'the', 'contestants', 'who', 'had', 'at', 'least', 'two', 'votes', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT contestant_number, contestant_name FROM VOTES GROUP BY contestant_number, contestant_name HAVING COUNT(*)>=2\",\n\"query_toks\": \"['SELECT', 'contestant_number', ',', 'contestant_name', 'FROM', 'VOTES', 'GROUP', 'BY', 'contestant_number', ',', 'contestant_name', 'HAVING', 'COUNT', '(', '*', ')', '>=', '2']\",\n\"query_toks_no_value\": \"['select', 'contestant_number', ',', 'contestant_name', 'from', 'votes', 'group', 'by', 'contestant_number', ',', 'contestant_name', 'having', 'count', '(', '*', ')', '>=', '2']\",\n\"question\": \"What are the contestant numbers and names of the contestants who had at least two votes?\",\n\"question_toks\": \"['What', 'are', 'the', 'contestant', 'numbers', 'and', 'names', 'of', 'the', 'contestants', 'who', 'had', 'at', 'least', 'two', 'votes', '?']\"}"}
{"question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?\",\n\"question_toks\": \"['Of', 'all', 'the', 'contestants', 'who', 'got', 'voted', ',', 'what', 'is', 'the', 'contestant', 'number', 'and', 'name', 'of', 'the', 'contestant', 'who', 'got', 'least', 'votes', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"voter_1\",\n    \"query\": \"SELECT contestant_number, contestant_name FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE VOTES.state = (SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(state) ASC LIMIT 1) AND VOTES.contestant_number = (SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)\",\n    \"query_toks\": [\"SELECT\", \"contestant_number\", \",\", \"contestant_name\", \"FROM\", \"VOTES\", \"JOIN\", \"CONTESTANTS\", \"ON\", \"VOTES\", \".\", \"contestant_number\", \"=\", \"CONTESTANTS\", \".\", \"contestant_number\", \"WHERE\", \"VOTES\", \".\", \"state\", \"=\", \"(\", \"SELECT\", \"state\", \"FROM\", \"VOTES\", \"GROUP\", \"BY\", \"state\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"state\", \")\", \"ASC\", \"LIMIT\", \"1\", \")\", \"AND\", \"VOTES\", \".\", \"contestant_number\", \"=\", \"(\", \"SELECT\", \"contestant_number\", \"FROM\", \"VOTES\", \"GROUP\", \"BY\", \"contestant_number\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"ASC\", \"LIMIT\", \"1\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"contestant_number\", \",\", \"contestant_name\", \"FROM\", \"VOTES\", \"JOIN\", \"CONTESTANTS\", \"ON\", \"VOTES\", \".\", \"contestant_number\", \"=\", \"CONTESTANTS\", \".\", \"contestant_number\", \"WHERE\", \"VOTES\", \".\", \"state\", \"=\", \"(\", \"SELECT\", \"state\", \"FROM\", \"VOTES\", \"GROUP\", \"BY\", \"state\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"state\", \")\", \"ASC\", \"LIMIT\", \"1\", \")\", \"AND\", \"VOTES\", \".\", \"contestant_number\", \"=\", \"(\", \"SELECT\", \"contestant_number\", \"FROM\", \"VOTES\", \"GROUP\", \"BY\", \"contestant_number\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"ASC\", \"LIMIT\", \"1\", \")\"],\n    \"question\": \"Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?\",\n    \"question_toks\": [\"Of\", \"all\", \"the\", \"contestants\", \"who\", \"got\", \"voted\", \",\", \"what\", \"is\", \"the\", \"contestant\", \"number\", \"and\", \"name\", \"of\", \"the\", \"contestant\", \"who\", \"got\", \"least\", \"votes\", \"?\"]\n}"}
{"question": "What are the number of votes from state 'NY' or 'CA'?", "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"What are the number of votes from state 'NY' or 'CA'?\",\n\"question_toks\": \"['What', 'are', 'the', 'number', 'of', 'votes', 'from', 'state', \"'NY\", \"'\", 'or', \"'CA\", \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'VOTES', 'WHERE', 'state', '=', ''NY'', 'OR', 'state', '=', ''CA''']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'VOTES', 'WHERE', 'state', '=', '', 'OR', 'state', '=', '']\",\n\"question\": \"What are the number of votes from state 'NY' or 'CA'?\",\n\"question_toks\": \"['What', 'are', 'the', 'number', 'of', 'votes', 'from', 'state', \"'NY\", \"'\", 'or', \"'CA\", \"'\", '?']}\""}
{"question": "How many contestants did not get voted?", "sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"How many contestants did not get voted?\",\n\"question_toks\": \"['How', 'many', 'contestants', 'did', 'not', 'get', 'voted', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'contestants', 'WHERE', 'contestant_number', 'NOT', 'IN', '(', 'SELECT', 'contestant_number', 'FROM', 'votes', ')', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'contestants', 'WHERE', 'contestant_number', 'NOT', 'IN', '(', 'SELECT', 'contestant_number', 'FROM', 'votes', ')', ';']\",\n\"question\": \"How many contestants did not get voted?\",\n\"question_toks\": \"['How', 'many', 'contestants', 'did', 'not', 'get', 'voted', '?']\"\n}"}
{"question": "What is the area code in which the most voters voted?", "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"What is the area code in which the most voters voted?\",\n\"question_toks\": \"['What', 'is', 'the', 'area', 'code', 'in', 'which', 'the', 'most', 'voters', 'voted', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT area_code FROM VOTES GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'area_code', 'FROM', 'VOTES', 'GROUP', 'BY', 'area_code', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'area_code', 'FROM', 'VOTES', 'GROUP', 'BY', 'area_code', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"question\": \"What is the area code in which the most voters voted?\",\n\"question_toks\": \"['What', 'is', 'the', 'area', 'code', 'in', 'which', 'the', 'most', 'voters', 'voted', '?']}\""}
{"question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?\",\n\"question_toks\": \"['What', 'are', 'the', 'create', 'dates', ',', 'states', ',', 'and', 'phone', 'numbers', 'of', 'the', 'votes', 'that', 'were', 'for', 'the', 'contestant', 'named', \"'Tabatha\", 'Gehling', \"'\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"voter_1\",\n  \"query\": \"SELECT created, state, phone_number FROM VOTES WHERE contestant_number=(SELECT contestant_number FROM CONTESTANTS WHERE contestant_name='Tabatha Gehling')\",\n  \"query_toks\": [\"SELECT\", \"created\", \",\", \"state\", \",\", \"phone_number\", \"FROM\", \"VOTES\", \"WHERE\", \"contestant_number\", \"=\", \"(\", \"SELECT\", \"contestant_number\", \"FROM\", \"CONTESTANTS\", \"WHERE\", \"contestant_name\", \"=\", \"'Tabatha Gehling'\", \")\",],\n  \"query_toks_no_value\": [\"SELECT\", \"created\", \",\", \"state\", \",\", \"phone_number\", \"FROM\", \"VOTES\", \"WHERE\", \"contestant_number\", \"=\", \"(\", \"SELECT\", \"contestant_number\", \"FROM\", \"CONTESTANTS\", \"WHERE\", \"contestant_name\", \"=\", \"\", \")\",],\n  \"question\": \"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"create\", \"dates\", \",\", \"states\", \",\", \"and\", \"phone\", \"numbers\", \"of\", \"the\", \"votes\", \"that\", \"were\", \"for\", \"the\", \"contestant\", \"named\", \"'Tabatha\", \"Gehling\", \"'\", \"?\"],\n}"}
{"question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.\",\n\"question_toks\": \"['List', 'the', 'area', 'codes', 'in', 'which', 'voters', 'voted', 'both', 'for', 'the', 'contestant', \"'Tabatha\", 'Gehling', \"'\", 'and', 'the', 'contestant', \"'Kelly\", 'Clauss', \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT DISTINCT area_code\\nFROM votes AS v1 JOIN votes AS v2 ON v1.phone_number=v2.phone_number\\nWHERE v1.contestant_number='T1' AND v2.contestant_number='T2'\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'area_code', 'FROM', 'votes', 'AS', 'v1', 'JOIN', 'votes', 'AS', 'v2', 'ON', 'v1.phone_number=v2.phone_number', 'WHERE', 'v1.contestant_number=', \"'\", 'T1', \"'\", 'AND', 'v2.contestant_number=', \"'\", 'T2', \"'']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'area_code', 'FROM', 'votes', 'AS', 'v1', 'JOIN', 'votes', 'AS', 'v2', 'ON', 'v1.phone_number=v2.phone_number', 'WHERE', 'v1.contestant_number=', '', 'AND', 'v2.contestant_number=', '', '']\",\n\"question\": \"List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.\",\n\"question_toks\": \"['List', 'the', 'area', 'codes', 'in', 'which', 'voters', 'voted', 'both', 'for', 'the', 'contestant', \"'Tabatha\", 'Gehling', \"'\", 'and', 'the', 'contestant', \"'Kelly\", 'Clauss', \"'\", '.']}\" }"}
{"question": "Return the names of the contestants whose names contain the substring 'Al' .", "sql": "select contestant_name from contestants where contestant_name like \"%al%\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nAREA_CODE_STATE: 'area_code', 'state'\nCONTESTANTS: 'contestant_number', 'contestant_name'\nVOTES: 'vote_id', 'phone_number', 'state', 'contestant_number', 'created'\n\n{\"db_id\": \"voter_1\",\n\"question\": \"Return the names of the contestants whose names contain the substring 'Al' .\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'the', 'contestants', 'whose', 'names', 'contain', 'the', 'substring', \"'Al'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"voter_1\",\n\"query\": \"SELECT contestant_name FROM contestants T1 WHERE T1.contestant_name LIKE '%Al%'\",\n\"query_toks\": \"['SELECT', 'contestant_name', 'FROM', 'contestants', 'T1', 'WHERE', 'T1', '.', 'contestant_name', 'LIKE', '\\'%Al%\\'']\",\n\"query_toks_no_value\": \"['SELECT', 'contestant_name', 'FROM', 'contestants', 'T1', 'WHERE', 'T1', '.', 'contestant_name', 'LIKE', '\\'%\\'', 'AL', '\\'%\\'']\",\n\"question\": \"Return the names of the contestants whose names contain the substring 'Al' .\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'the', 'contestants', 'whose', 'names', 'contain', 'the', 'substring', \"'Al'\", '.']\"}"}
{"question": "What are the names of all the countries that became independent after 1950?", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the names of all the countries that became independent after 1950?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'the', 'countries', 'that', 'became', 'independent', 'after', '1950', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT Name FROM country WHERE IndepYear > 1950\",\n  \"query_toks\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'IndepYear', '>', '1950']\",\n  \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'IndepYear', '>', '?']\",\n  \"question\": \"What are the names of all the countries that became independent after 1950?\",\n  \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'the', 'countries', 'that', 'became', 'independent', 'after', '1950', '?']\"\n}"}
{"question": "Give the names of the nations that were founded after 1950.", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the names of the nations that were founded after 1950.\",\n\"question_toks\": \"['Give', 'the', 'names', 'of', 'the', 'nations', 'that', 'were', 'founded', 'after', '1950', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Name FROM Country WHERE IndepYear > 1950\",\n \"query_toks\": \"['SELECT', 'Name', 'FROM', 'Country', 'WHERE', 'IndepYear', '>', '1950']\",\n \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'Country', 'WHERE', 'IndepYear', '>', '?']\",\n \"question\": \"Give the names of the nations that were founded after 1950.\",\n \"question_toks\": \"['Give', 'the', 'names', 'of', 'the', 'nations', 'that', 'were', 'founded', 'after', '1950', '.']\"}"}
{"question": "How many countries have a republic as their form of government?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many countries have a republic as their form of government?\",\n\"question_toks\": \"['How', 'many', 'countries', 'have', 'a', 'republic', 'as', 'their', 'form', 'of', 'government', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT COUNT(*) FROM country WHERE GovernmentForm='Republic'\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'country', 'WHERE', 'GovernmentForm', '=', ''Republic', '']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'country', 'WHERE', 'GovernmentForm', '=', '']\",\n\"question\": \"How many countries have a republic as their form of government?\",\n\"question_toks\": \"['How', 'many', 'countries', 'have', 'a', 'republic', 'as', 'their', 'form', 'of', 'government', '?']}\""}
{"question": "How many countries have governments that are republics?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many countries have governments that are republics?\",\n\"question_toks\": \"['How', 'many', 'countries', 'have', 'governments', 'that', 'are', 'republics', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"world_1\",\n\"query\": \"SELECT count(*) FROM country WHERE GovernmentForm LIKE '%Republic%'\",\n\"query_toks\": \"[SELECT, count, (, * ), FROM, country, WHERE, GovernmentForm, LIKE, '%Republic%', ;]\",\n\"query_toks_no_value\": \"[SELECT, count, (, * ), FROM, country, WHERE, GovernmentForm, LIKE, '%Republic%', ;]\",\n\"question\": \"How many countries have governments that are republics?\",\n\"question_toks\": \"['How', 'many', 'countries', 'have', 'governments', 'that', 'are', 'republics', '?']\"\n}"}
{"question": "What is the total surface area of the countries in the Caribbean region?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the total surface area of the countries in the Caribbean region?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'surface', 'area', 'of', 'the', 'countries', 'in', 'the', 'Caribbean', 'region', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT SUM(SurfaceArea) FROM country WHERE Region='Caribbean'\",\n\"query_toks\": \"['SELECT', 'SUM', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Region', '=', \"'\", 'Caribbean', \"'\", ']',\n\"query_toks_no_value\": \"['SELECT', 'SUM', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Region', '=', '?']\",\n\"question\": \"What is the total surface area of the countries in the Caribbean region?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'surface', 'area', 'of', 'the', 'countries', 'in', 'the', 'Caribbean', 'region', '?']\"}"}
{"question": "How much surface area do the countires in the Carribean cover together?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How much surface area do the countires in the Carribean cover together?\",\n\"question_toks\": \"['How', 'much', 'surface', 'area', 'do', 'the', 'countires', 'in', 'the', 'Carribean', 'cover', 'together', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT SUM(SurfaceArea) FROM country WHERE Continent='Caribbean'\",\n\"query_toks\": \"['SELECT', 'SUM', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '\\\\''Caribbean\\\\''']\",\n\"query_toks_no_value\": \"['SELECT', 'SUM', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '\\\\''Caribbean\\\\''']\",\n\"question\": \"How much surface area do the countires in the Carribean cover together?\",\n\"question_toks\": \"['How', 'much', 'surface', 'area', 'do', 'the', 'countires', 'in', 'the', 'Carribean', 'cover', 'together', '?']}\""}
{"question": "Which continent is Anguilla in?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which continent is Anguilla in?\",\n\"question_toks\": \"['Which', 'continent', 'is', 'Anguilla', 'in', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT continent\\nFROM country\\nWHERE name = 'Anguilla'\",\n \"query_toks\": \"['SELECT', 'continent', 'FROM', 'country', 'WHERE', 'name', '=', ''', 'Anguilla', ''']\",\n \"query_toks_no_value\": \"['SELECT', 'continent', 'FROM', 'country', 'WHERE', 'name', '=', '', '']\",\n \"question\": \"Which continent is Anguilla in?\",\n \"question_toks\": \"['Which', 'continent', 'is', 'Anguilla', 'in', '?']\"\n}"}
{"question": "What is the continent name which Anguilla belongs to?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the continent name which Anguilla belongs to?\",\n\"question_toks\": \"['What', 'is', 'the', 'continent', 'name', 'which', 'Anguilla', 'belongs', 'to', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Continent FROM country WHERE Name='Anguilla'\",\n \"query_toks\": \"['SELECT', 'Continent', 'FROM', 'country', 'WHERE', 'Name', '=', '\\\\\\'Anguilla\\\\\\'']\",\n \"query_toks_no_value\": \"['SELECT', 'Continent', 'FROM', 'country', 'WHERE', 'Name', '=']\",\n \"question\": \"What is the continent name which Anguilla belongs to?\",\n \"question_toks\": \"['What', 'is', 'the', 'continent', 'name', 'which', 'Anguilla', 'belongs', 'to', '?']}\""}
{"question": "Which region is the city Kabul located in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which region is the city Kabul located in?\",\n\"question_toks\": \"['Which', 'region', 'is', 'the', 'city', 'Kabul', 'located', 'in', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT country.Region FROM city AS c JOIN country AS country ON c.CountryCode = country.Code WHERE c.Name = 'Kabul'\",\n    \"query_toks\": [\"SELECT\", \"country.Region\", \"FROM\", \"city\", \"AS\", \"c\", \"JOIN\", \"country\", \"AS\", \"country\", \"ON\", \"c.CountryCode\", \"=\", \"country.Code\", \"WHERE\", \"c.Name\", \"=\", \"'Kabul'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"country.Region\", \"FROM\", \"city\", \"AS\", \"c\", \"JOIN\", \"country\", \"AS\", \"country\", \"ON\", \"c.CountryCode\", \"=\", \"country.Code\", \"WHERE\", \"c.Name\", \"=\"],\n    \"question\": \"Which region is the city Kabul located in?\",\n    \"question_toks\": [\"Which\", \"region\", \"is\", \"the\", \"city\", \"Kabul\", \"located\", \"in\", \"?\"]\n}"}
{"question": "What region is Kabul in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What region is Kabul in?\",\n\"question_toks\": \"['What', 'region', 'is', 'Kabul', 'in', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Region FROM city WHERE Name='Kabul'\",\n \"query_toks\": \"['SELECT', 'Region', 'FROM', 'city', 'WHERE', 'Name', '=', \\\"'Kabul'\\\"', '']\",\n \"query_toks_no_value\": \"['SELECT', 'Region', 'FROM', 'city', 'WHERE', 'Name', '=', '']\",\n \"question\": \"What region is Kabul in?\",\n \"question_toks\": \"['What', 'region', 'is', 'Kabul', 'in', '?']}\"\n"}
{"question": "Which language is the most popular in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which language is the most popular in Aruba?\",\n\"question_toks\": \"['Which', 'language', 'is', 'the', 'most', 'popular', 'in', 'Aruba', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT cl.Language FROM countrylanguage cl, country c WHERE c.Name = 'Aruba' AND cl.CountryCode = c.Code AND cl.IsOfficial = 'T'\",\n    \"query_toks\": \"['SELECT', 'cl.Language', 'FROM', 'countrylanguage', 'cl', ',', 'country', 'c', 'WHERE', 'c.Name', '=', ''Aruba'', 'AND', 'cl.CountryCode', '=', 'c.Code', 'AND', 'cl.IsOfficial', '=', ''T''']\",\n    \"query_toks_no_value\": \"['SELECT', 'cl.Language', 'FROM', 'countrylanguage', 'cl', ',', 'country', 'c', 'WHERE', 'c.Name', '=', '', 'AND', 'cl.CountryCode', '=', 'c.Code', 'AND', 'cl.IsOfficial', '=', '']\",\n    \"question\": \"Which language is the most popular in Aruba?\",\n    \"question_toks\": \"['Which', 'language', 'is', 'the', 'most', 'popular', 'in', 'Aruba', '?']\"\n}"}
{"question": "What language is predominantly spoken in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What language is predominantly spoken in Aruba?\",\n\"question_toks\": \"['What', 'language', 'is', 'predominantly', 'spoken', 'in', 'Aruba', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT cl.Language FROM countrylanguage cl, country c WHERE c.Name = 'Aruba' AND cl.CountryCode = c.Code AND cl.IsOfficial = 'T'\",\n  \"query_toks\": [\"SELECT\", \"cl\", \".\", \"Language\", \"FROM\", \"countrylanguage\", \"cl\", \",\", \"country\", \"c\", \"WHERE\", \"c\", \".\", \"Name\", \"=\", \"'\", \"Aruba\", \"'\", \"AND\", \"cl\", \".\", \"CountryCode\", \"=\", \"c\", \".\", \"Code\", \"AND\", \"cl\", \".\", \"IsOfficial\", \"=\", \"'\", \"T\", \"'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"cl\", \".\", \"Language\", \"FROM\", \"countrylanguage\", \"cl\", \",\", \"country\", \"c\", \"WHERE\", \"c\", \".\", \"Name\", \"=\", \"Aruba\", \"AND\", \"cl\", \".\", \"CountryCode\", \"=\", \"c\", \".\", \"Code\", \"AND\", \"cl\", \".\", \"IsOfficial\", \"=\", \"T\"],\n  \"question\": \"What language is predominantly spoken in Aruba?\",\n  \"question_toks\": [\"What\", \"language\", \"is\", \"predominantly\", \"spoken\", \"in\", \"Aruba\", \"?\"]\n}"}
{"question": "What are the population and life expectancies in Brazil?", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the population and life expectancies in Brazil?\",\n\"question_toks\": \"['What', 'are', 'the', 'population', 'and', 'life', 'expectancies', 'in', 'Brazil', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Population, LifeExpectancy FROM country WHERE Name='Brazil'\",\n \"query_toks\": \"['SELECT', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Name', '=', '\\\\''Brazil\\\\''']\",\n \"query_toks_no_value\": \"['SELECT', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Name', '=', '?']\",\n \"question\": \"What are the population and life expectancies in Brazil?\",\n \"question_toks\": \"['What', 'are', 'the', 'population', 'and', 'life', 'expectancies', 'in', 'Brazil', '?']\"\n}"}
{"question": "Give me Brazil\u2019s population and life expectancies.", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give me Brazil\u2019s population and life expectancies.\",\n\"question_toks\": \"['Give', 'me', 'Brazil\u2019s', 'population', 'and', 'life', 'expectancies', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Population, LifeExpectancy FROM country WHERE Name='Brazil'\",\n\"query_toks\": [\"SELECT\", \"Population\", \",\", \"LifeExpectancy\", \"FROM\", \"country\", \"WHERE\", \"Name\", \"=\", \"'Brazil'\"],\n\"query_toks_no_value\": [\"SELECT\", \"Population\", \",\", \"LifeExpectancy\", \"FROM\", \"country\", \"WHERE\", \"Name\", \"=\"],\n\"question\": \"Give me Brazil\u2019s population and life expectancies.\",\n\"question_toks\": [\"Give\", \"me\", \"Brazil\u2019s\", \"population\", \"and\", \"life\", \"expectancies\", \".\"]}"}
{"question": "What are the region and population of Angola?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the region and population of Angola?\",\n\"question_toks\": \"['What', 'are', 'the', 'region', 'and', 'population', 'of', 'Angola', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"world_1\",\n\"query\": \"SELECT Region, Population FROM country WHERE Name='Angola'\",\n\"query_toks\": \"['SELECT', 'Region', ',', 'Population', 'FROM', 'country', 'WHERE', 'Name', '=', \\\"'Angola'\\\" ]\",\n\"query_toks_no_value\": \"['SELECT', 'Region', ',', 'Population', 'FROM', 'country', 'WHERE', 'Name', '=', 'string']\",\n\"question\": \"What are the region and population of Angola?\",\n\"question_toks\": \"['What', 'are', 'the', 'region', 'and', 'population', 'of', 'Angola', '?']\"\n}"}
{"question": "What region does Angola belong to and what is its population?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What region does Angola belong to and what is its population?\",\n\"question_toks\": \"['What', 'region', 'does', 'Angola', 'belong', 'to', 'and', 'what', 'is', 'its', 'population', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Region, Population FROM country WHERE Name='Angola'\",\n \"query_toks\": \"['SELECT', 'Region', ',', 'Population', 'FROM', 'country', 'WHERE', 'Name', '=', '\\\\''Angola\\\\''']\",\n \"query_toks_no_value\": \"['SELECT', 'Region', ',', 'Population', 'FROM', 'country', 'WHERE', 'Name', '=', '?']\",\n \"question\": \"What region does Angola belong to and what is its population?\",\n \"question_toks\": \"['What', 'region', 'does', 'Angola', 'belong', 'to', 'and', 'what', 'is', 'its', 'population', '?']\"\n}"}
{"question": "What is the average expected life expectancy for countries in the region of Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the average expected life expectancy for countries in the region of Central Africa?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'expected', 'life', 'expectancy', 'for', 'countries', 'in', 'the', 'region', 'of', 'Central', 'Africa', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT AVG(LifeExpectancy) FROM country WHERE Region='Central Africa'\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Region', '=', \\\"'Central Africa'\\\"',\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Region', '=', '']\",\n\"question\": \"What is the average expected life expectancy for countries in the region of Central Africa?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'expected', 'life', 'expectancy', 'for', 'countries', 'in', 'the', 'region', 'of', 'Central', 'Africa', '?']\"}"}
{"question": "How long is the people\u2019s average life expectancy in Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How long is the people\u2019s average life expectancy in Central Africa?\",\n\"question_toks\": \"['How', 'long', 'is', 'the', 'people\u2019s', 'average', 'life', 'expectancy', 'in', 'Central', 'Africa', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT AVG(LifeExpectancy) FROM country WHERE Region='Central Africa'\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Region', '=', ''Central Africa'']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Region', '=', '']\",\n\"question\": \"How long is the people\u2019s average life expectancy in Central Africa?\",\n\"question_toks\": \"['How', 'long', 'is', 'the', 'people\u2019s', 'average', 'life', 'expectancy', 'in', 'Central', 'Africa', '?']}\""}
{"question": "What is the name of country that has the shortest life expectancy in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the name of country that has the shortest life expectancy in Asia?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'country', 'that', 'has', 'the', 'shortest', 'life', 'expectancy', 'in', 'Asia', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT country.Name FROM country WHERE country.LifeExpectancy IN (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = 'Asia');\",\n \"query_toks\": [\"SELECT\", \"country.Name\", \"FROM\", \"country\", \"WHERE\", \"country.LifeExpectancy\", \"IN\", \"(\", \"SELECT\", \"MIN\", \"(\", \"country.LifeExpectancy\", \")\", \"FROM\", \"country\", \"WHERE\", \"country.Continent\", \"=\", \"'Asia'\", \")\", \";\"],\n \"query_toks_no_value\": [\"SELECT\", \"country\", \".\", \"Name\", \"FROM\", \"country\", \"WHERE\", \"country\", \".\", \"LifeExpectancy\", \"IN\", \"(\", \"SELECT\", \"MIN\", \"(\", \"country\", \".\", \"LifeExpectancy\", \")\", \"FROM\", \"country\", \"WHERE\", \"country\", \".\", \"Continent\", \"=\", \"'\", \"Asia\", \"'\", \")\", \";\"],\n \"question\": \"What is the name of country that has the shortest life expectancy in Asia?\",\n \"question_toks\": [\"What\", \"is\", \"the\", \"name\", \"of\", \"country\", \"that\", \"has\", \"the\", \"shortest\", \"life\", \"expectancy\", \"in\", \"Asia\", \"?\"]\n}"}
{"question": "Give the name of the country in Asia with the lowest life expectancy.", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the name of the country in Asia with the lowest life expectancy.\",\n\"question_toks\": \"['Give', 'the', 'name', 'of', 'the', 'country', 'in', 'Asia', 'with', 'the', 'lowest', 'life', 'expectancy', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT country.Name FROM country WHERE country.Continent='Asia' AND country.LifeExpectancy=(SELECT MIN(LifeExpectancy) FROM country WHERE Continent='Asia')\",\n\"query_toks\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', ''Asia'', 'AND', 'country', '.', 'LifeExpectancy', '=', '(', 'SELECT', 'MIN', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', ''Asia''', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', '', 'AND', 'country', '.', 'LifeExpectancy', '=', '(', 'SELECT', 'MIN', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', ''', ')']\",\n\"question\": \"Give the name of the country in Asia with the lowest life expectancy.\",\n\"question_toks\": \"['Give', 'the', 'name', 'of', 'the', 'country', 'in', 'Asia', 'with', 'the', 'lowest', 'life', 'expectancy', '.']\"}"}
{"question": "What is the total population and maximum GNP in Asia?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the total population and maximum GNP in Asia?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'population', 'and', 'maximum', 'GNP', 'in', 'Asia', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT sum(Population), max(GNP) FROM country WHERE Continent='Asia'\",\n \"query_toks\": [\"SELECT\", \"sum\", \"(\", \"Population\", \")\", \",\", \"max\", \"(\", \"GNP\", \")\", \"FROM\", \"country\", \"WHERE\", \"Continent\", \"=\", \"'Asia'\",],\n \"query_toks_no_value\": [\"SELECT\", \"sum\", \"(\", \"Population\", \")\", \",\", \"max\", \"(\", \"GNP\", \")\", \"FROM\", \"country\", \"WHERE\", \"Continent\", \"=\", \"?\"],\n \"question\": \"What is the total population and maximum GNP in Asia?\",\n \"question_toks\": [\"What\", \"is\", \"the\", \"total\", \"population\", \"and\", \"maximum\", \"GNP\", \"in\", \"Asia\", \"?\"]\n}"}
{"question": "How many people live in Asia, and what is the largest GNP among them?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many people live in Asia, and what is the largest GNP among them?\",\n\"question_toks\": \"['How', 'many', 'people', 'live', 'in', 'Asia', ',', 'and', 'what', 'is', 'the', 'largest', 'GNP', 'among', 'them', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'\",\n \"query_toks\": \"['SELECT', 'SUM', '(', 'Population', ')', ',', 'MAX', '(', 'GNP', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', \\\"'Asia'\\\" ]\",\n \"query_toks_no_value\": \"['SELECT', 'SUM', '(', 'Population', ')', ',', 'MAX', '(', 'GNP', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', \\\"''\\\" ]\",\n \"question\": \"How many people live in Asia, and what is the largest GNP among them?\",\n \"question_toks\": \"['How', 'many', 'people', 'live', 'in', 'Asia', ',', 'and', 'what', 'is', 'the', 'largest', 'GNP', 'among', 'them', '?']}\"\nNote: This query uses the \"country\" table, and searches for the sum of population and max of GNP for all countries in Asia. The final result will contain two columns, one for the sum of population, and another for the maximum GNP."}
{"question": "What is the average life expectancy in African countries that are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the average life expectancy in African countries that are republics?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'life', 'expectancy', 'in', 'African', 'countries', 'that', 'are', 'republics', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND GovernmentForm='Republic'\",\n\"query_toks\": ['SELECT', 'AVG', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', \"'Africa'\", 'AND', 'GovernmentForm', '=', \"'Republic'\"],\n\"query_toks_no_value\": ['SELECT', 'AVG', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '?', 'AND', 'GovernmentForm', '=', '?'],\n\"question\": \"What is the average life expectancy in African countries that are republics?\",\n\"question_toks\": ['What', 'is', 'the', 'average', 'life', 'expectancy', 'in', 'African', 'countries', 'that', 'are', 'republics', '?']}"}
{"question": "Give the average life expectancy for countries in Africa which are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the average life expectancy for countries in Africa which are republics?\",\n\"question_toks\": \"['Give', 'the', 'average', 'life', 'expectancy', 'for', 'countries', 'in', 'Africa', 'which', 'are', 'republics', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent='Africa' AND country.GovernmentForm='Republic'\",\n \"query_toks\": \"['SELECT', 'AVG', '(', 'country', '.', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', ''Africa'', 'AND', 'country', '.', 'GovernmentForm', '=', ''Republic''']\",\n \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'country', '.', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', '', 'AND', 'country', '.', 'GovernmentForm', '=', '']\",\n \"question\": \"Give the average life expectancy for countries in Africa which are republics?\",\n \"question_toks\": \"['Give', 'the', 'average', 'life', 'expectancy', 'for', 'countries', 'in', 'Africa', 'which', 'are', 'republics', '?']\"\n}"}
{"question": "What is the total surface area of the continents Asia and Europe?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the total surface area of the continents Asia and Europe?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'surface', 'area', 'of', 'the', 'continents', 'Asia', 'and', 'Europe', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT SUM(SurfaceArea) FROM (SELECT SurfaceArea FROM country WHERE Continent='Asia' UNION ALL SELECT SurfaceArea FROM country WHERE Continent='Europe') AS T1\",\n\"query_toks\": \"['SELECT', 'SUM', '(', 'SurfaceArea', ')', 'FROM', '(', 'SELECT', 'SurfaceArea', 'FROM', 'country', 'WHERE', 'Continent', '=', '\\\\''Asia\\\\''', 'UNION', 'ALL', 'SELECT', 'SurfaceArea', 'FROM', 'country', 'WHERE', 'Continent', '=', '\\\\''Europe\\\\''', ')', 'AS', 'T1']\",\n\"query_toks_no_value\": \"['SELECT', 'SUM', '(', 'SurfaceArea', ')', 'FROM', '(', 'SELECT', 'SurfaceArea', 'FROM', 'country', 'WHERE', 'Continent', '=', '\\\\''Asia\\\\''', 'UNION', 'ALL', 'SELECT', 'SurfaceArea', 'FROM', 'country', 'WHERE', 'Continent', '=', '\\\\''Europe\\\\''', ')', 'AS', 'T1']\",\n\"question\": \"What is the total surface area of the continents Asia and Europe?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'surface', 'area', 'of', 'the', 'continents', 'Asia', 'and', 'Europe', '?']}\""}
{"question": "Give the total surface area covered by countries in Asia or Europe.", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the total surface area covered by countries in Asia or Europe.\",\n\"question_toks\": \"['Give', 'the', 'total', 'surface', 'area', 'covered', 'by', 'countries', 'in', 'Asia', 'or', 'Europe', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT sum(SurfaceArea) FROM country WHERE Continent='Asia' OR Continent='Europe'\",\n \"query_toks\": \"['SELECT', 'sum', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', \\\"'Asia'\\\", 'OR', 'Continent', '=', \\\"'Europe'\\\"']\",\n \"query_toks_no_value\": \"['SELECT', 'sum', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', 'OR', 'Continent', '=', '']\",\n \"question\": \"Give the total surface area covered by countries in Asia or Europe.\",\n \"question_toks\": \"['Give', 'the', 'total', 'surface', 'area', 'covered', 'by', 'countries', 'in', 'Asia', 'or', 'Europe', '.']\"}"}
{"question": "How many people live in Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many people live in Gelderland district?\",\n\"question_toks\": \"['How', 'many', 'people', 'live', 'in', 'Gelderland', 'district', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT SUM(Population) FROM city WHERE District='Gelderland'\",\n    \"query_toks\": [\"SELECT\", \"SUM\", \"(\", \"Population\", \")\", \"FROM\", \"city\", \"WHERE\", \"District\", \"=\", \"'Gelderland'\",],\n    \"query_toks_no_value\": [\"SELECT\", \"SUM\", \"(\", \"Population\", \")\", \"FROM\", \"city\", \"WHERE\", \"District\", \"=\", \"?\"],\n    \"question\": \"How many people live in Gelderland district?\",\n    \"question_toks\": [\"How\", \"many\", \"people\", \"live\", \"in\", \"Gelderland\", \"district\", \"?\"],\n}"}
{"question": "What is the total population of Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the total population of Gelderland district?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'population', 'of', 'Gelderland', 'district', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT SUM(Population) FROM city WHERE District='Gelderland'\",\n    \"query_toks\": \"['SELECT', 'SUM', '(', 'Population', ')', 'FROM', 'city', 'WHERE', 'District', '=', ''Gelderland''']\",\n    \"query_toks_no_value\": \"['SELECT', 'SUM', '(', 'Population', ')', 'FROM', 'city', 'WHERE', 'District', '=', \"Gelderland\"]\",\n    \"question\": \"What is the total population of Gelderland district?\",\n    \"question_toks\": \"['What', 'is', 'the', 'total', 'population', 'of', 'Gelderland', 'district', '?']\"\n}"}
{"question": "What is the average GNP and total population in all nations whose government is US territory?", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the average GNP and total population in all nations whose government is US territory?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'GNP', 'and', 'total', 'population', 'in', 'all', 'nations', 'whose', 'government', 'is', 'US', 'territory', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm LIKE '%US%';\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'GNP', ')', ',', 'SUM', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'GovernmentForm', 'LIKE', '', '%US%', '';']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', ')', ',', 'SUM', '(', ')', 'FROM', 'country', 'WHERE', 'GovernmentForm', 'LIKE', '', '%US%', '';']\",\n\"question\": \"What is the average GNP and total population in all nations whose government is US territory?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'GNP', 'and', 'total', 'population', 'in', 'all', 'nations', 'whose', 'government', 'is', 'US', 'territory', '?']}\""}
{"question": "Give the mean GNP and total population of nations which are considered US territory.", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the mean GNP and total population of nations which are considered US territory.\",\n\"question_toks\": \"['Give', 'the', 'mean', 'GNP', 'and', 'total', 'population', 'of', 'nations', 'which', 'are', 'considered', 'US', 'territory', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT AVG(GNP), SUM(Population) FROM country WHERE Continent='North America' AND GovernmentForm='Dependent Territory' AND LocalName LIKE '%US%';\",\n \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"GNP\", \")\", \",\", \"SUM\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \"WHERE\", \"Continent\", \"=\", \"'North\", \"America'\", \"AND\", \"GovernmentForm\", \"=\", \"'Dependent\", \"Territory'\", \"AND\", \"LocalName\", \"LIKE\", \"'%US%';\"],\n \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"GNP\", \")\", \",\", \"SUM\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \"WHERE\", \"Continent\", \"=\", \"North America\", \"AND\", \"GovernmentForm\", \"=\", \"Dependent Territory\", \"AND\", \"LocalName\", \"LIKE\", \"%US%;\"],\n \"question\": \"Give the mean GNP and total population of nations which are considered US territory.\",\n \"question_toks\": [\"Give\", \"the\", \"mean\", \"GNP\", \"and\", \"total\", \"population\", \"of\", \"nations\", \"which\", \"are\", \"considered\", \"US\", \"territory\", \".\"]\n}"}
{"question": "How many unique languages are spoken in the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many unique languages are spoken in the world?\",\n\"question_toks\": \"['How', 'many', 'unique', 'languages', 'are', 'spoken', 'in', 'the', 'world', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"world_1\",\n\"query\": \"SELECT COUNT(DISTINCT Language) FROM countrylanguage\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'Language', ')', 'FROM', 'countrylanguage']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', '*', ')', 'FROM', 'countrylanguage']\",\n\"question\": \"How many unique languages are spoken in the world?\",\n\"question_toks\": \"['How', 'many', 'unique', 'languages', 'are', 'spoken', 'in', 'the', 'world', '?']\"\n}"}
{"question": "What is the number of distinct languages used around the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the number of distinct languages used around the world?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'distinct', 'languages', 'used', 'around', 'the', 'world', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT COUNT(*) FROM (SELECT COUNT(*) FROM countrylanguage GROUP BY Language) as CountLanguage;\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', 'SELECT', 'COUNT', '(', '*', ')', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'Language', ')', 'as', 'CountLanguage', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', 'FROM', 'SELECT', 'COUNT', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'Language', 'as', 'CountLanguage', ';']\",\n\"question\": \"What is the number of distinct languages used around the world?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'distinct', 'languages', 'used', 'around', 'the', 'world', '?']}\" }"}
{"question": "How many type of governments are in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many type of governments are in Africa?\",\n\"question_toks\": \"['How', 'many', 'type', 'of', 'governments', 'are', 'in', 'Africa', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'\",\n  \"query_toks\": [\"SELECT\", \"COUNT(DISTINCT)\", \"GovernmentForm\", \"FROM\", \"country\", \"WHERE\", \"Continent\", \"=\", \"'Africa'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT(DISTINCT)\", \"GovernmentForm\", \"FROM\", \"country\", \"WHERE\", \"Continent\", \"=\", \"?\"],\n  \"question\": \"How many type of governments are in Africa?\",\n  \"question_toks\": [\"How\", \"many\", \"type\", \"of\", \"governments\", \"are\", \"in\", \"Africa\", \"?\"]\n}"}
{"question": "How many different forms of governments are there in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many different forms of governments are there in Africa?\",\n\"question_toks\": \"['How', 'many', 'different', 'forms', 'of', 'governments', 'are', 'there', 'in', 'Africa', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT DISTINCT GovernmentForm FROM country WHERE Continent='Africa'\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'GovernmentForm', 'FROM', 'country', 'WHERE', 'Continent', '=', \"'Africa'\"]\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'GovernmentForm', 'FROM', 'country', 'WHERE', 'Continent', '=']\",\n\"question\": \"How many different forms of governments are there in Africa?\",\n\"question_toks\": \"['How', 'many', 'different', 'forms', 'of', 'governments', 'are', 'there', 'in', 'Africa', '?']}\""}
{"question": "What is the total number of languages used in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the total number of languages used in Aruba?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'number', 'of', 'languages', 'used', 'in', 'Aruba', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT COUNT(DISTINCT(Language)) FROM countrylanguage WHERE CountryCode = 'ABW'\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', '(', 'Language', ')', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode', '=', ''', 'ABW', ''']\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', '(', 'Language', ')', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode', '=', ''', '', ''']\",\n    \"question\": \"What is the total number of languages used in Aruba?\",\n    \"question_toks\": \"['What', 'is', 'the', 'total', 'number', 'of', 'languages', 'used', 'in', 'Aruba', '?']\"\n}"}
{"question": "How many languages are spoken in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many languages are spoken in Aruba?\",\n\"question_toks\": \"['How', 'many', 'languages', 'are', 'spoken', 'in', 'Aruba', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT COUNT(*) FROM countrylanguage WHERE CountryCode='ABW'\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode', '=', \\\"'ABW'\\\" ]\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode', '=', '\\\"', '\\'' ]\",\n\"question\": \"How many languages are spoken in Aruba?\",\n\"question_toks\": \"['How', 'many', 'languages', 'are', 'spoken', 'in', 'Aruba', '?']}\""}
{"question": "How many official languages does Afghanistan have?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many official languages does Afghanistan have?\",\n\"question_toks\": \"['How', 'many', 'official', 'languages', 'does', 'Afghanistan', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT COUNT(*) FROM countrylanguage WHERE IsOfficial='T' AND CountryCode='AF'\",\n \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"countrylanguage\", \"WHERE\", \"IsOfficial\", \"=\", \"'\", \"T\", \"'\", \"AND\", \"CountryCode\", \"=\", \"'\", \"AF\", \"'\"],\n \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"countrylanguage\", \"WHERE\", \"IsOfficial\", \"=\", \"T\", \"AND\", \"CountryCode\", \"=\", \"AF\"],\n \"question\": \"How many official languages does Afghanistan have?\",\n \"question_toks\": [\"How\", \"many\", \"official\", \"languages\", \"does\", \"Afghanistan\", \"have\", \"?\"]\n}"}
{"question": "How many official languages are spoken in Afghanistan?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many official languages are spoken in Afghanistan?\",\n\"question_toks\": \"['How', 'many', 'official', 'languages', 'are', 'spoken', 'in', 'Afghanistan', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT COUNT(*) FROM countrylanguage WHERE CountryCode='AF' AND IsOfficial='T'\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode', '=', ''AF'', 'AND', 'IsOfficial', '=', ''T''']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode', '=', '', 'AND', 'IsOfficial', '=', '']\",\n\"question\": \"How many official languages are spoken in Afghanistan?\",\n\"question_toks\": \"['How', 'many', 'official', 'languages', 'are', 'spoken', 'in', 'Afghanistan', '?']}\""}
{"question": "What is name of the country that speaks the largest number of languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is name of the country that speaks the largest number of languages?\",\n\"question_toks\": \"['What', 'is', 'name', 'of', 'the', 'country', 'that', 'speaks', 'the', 'largest', 'number', 'of', 'languages', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT country.Name FROM country JOIN\\n  (SELECT CountryCode, COUNT(Language) AS numLanguages\\n     FROM countrylanguage \\n     WHERE IsOfficial='T' \\n     GROUP BY CountryCode\\n     ORDER BY numLanguages DESC\\n     LIMIT 1\\n  ) AS officialLanguagesByCountry\\nON country.Code = officialLanguagesByCountry.CountryCode\",\n\"query_toks\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'JOIN', '(', 'SELECT', 'CountryCode', ',', 'COUNT', '(', 'Language', ')', 'AS', 'numLanguages', 'FROM', 'countrylanguage', 'WHERE', 'IsOfficial', '=', \"'T'\", 'GROUP', 'BY', 'CountryCode', 'ORDER', 'BY', 'numLanguages', 'DESC', 'LIMIT', '1', ')', 'AS', 'officialLanguagesByCountry', 'ON', 'country', '.', 'Code', '=', 'officialLanguagesByCountry', '.', 'CountryCode']\",\n\"query_toks_no_value\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'JOIN', '(', 'SELECT', 'CountryCode', ',', 'COUNT', '(', 'Language', ')', 'AS', 'numLanguages', 'FROM', 'countrylanguage', 'WHERE', 'IsOfficial', '=', 'T', 'GROUP', 'BY', 'CountryCode', 'ORDER', 'BY', 'numLanguages', 'DESC', 'LIMIT', '1', ')', 'AS', 'officialLanguagesByCountry', 'ON', 'country', '.', 'Code', '=', 'officialLanguagesByCountry', '.', 'CountryCode']\",\n\"question\": \"What is name of the country that speaks the largest number of languages?\",\n\"question_toks\": \"['What', 'is', 'name', 'of', 'the', 'country', 'that', 'speaks', 'the', 'largest', 'number', 'of', 'languages', '?']}\""}
{"question": "Give the name of the nation that uses the greatest amount of languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the name of the nation that uses the greatest amount of languages.\",\n\"question_toks\": \"['Give', 'the', 'name', 'of', 'the', 'nation', 'that', 'uses', 'the', 'greatest', 'amount', 'of', 'languages', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Name FROM country WHERE (SELECT COUNT Distinct(Language) FROM countrylanguage WHERE CountryCode=country.Code)>1 ORDER BY (SELECT COUNT Distinct(Language) FROM countrylanguage WHERE CountryCode=country.Code) DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', '(', 'SELECT', 'COUNT', 'Distinct', '(', 'Language', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode=country.Code', ')', '>1', 'ORDER', 'BY', '(', 'SELECT', 'COUNT', 'Distinct', '(', 'Language', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode=country.Code', ')', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', '(', 'SELECT', 'COUNT', 'Distinct', '(', 'Language', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode=', '.', 'Code', ')', '>1', 'ORDER', 'BY', '(', 'SELECT', 'COUNT', 'Distinct', '(', 'Language', ')', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode=', '.', 'Code', ')', 'DESC', 'LIMIT', '1']\",\n \"question\": \"Give the name of the nation that uses the greatest amount of languages.\",\n \"question_toks\": \"['Give', 'the', 'name', 'of', 'the', 'nation', 'that', 'uses', 'the', 'greatest', 'amount', 'of', 'languages', '.']\"\n }"}
{"question": "Which continent has the most diverse languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which continent has the most diverse languages?\",\n\"question_toks\": \"['Which', 'continent', 'has', 'the', 'most', 'diverse', 'languages', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Continent FROM countrylanguage GROUP BY Continent ORDER BY COUNT(*) DESC LIMIT 1\",\n \"query_toks\": [\"SELECT\", \"Continent\", \"FROM\", \"countrylanguage\", \"GROUP\", \"BY\", \"Continent\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\"],\n \"query_toks_no_value\": [\"SELECT\", \"Continent\", \"FROM\", \"countrylanguage\", \"GROUP\", \"BY\", \"Continent\", \"ORDER\", \"BY\", \"COUNT\", \"(\", \"*\", \")\", \"DESC\", \"LIMIT\", \"1\"],\n \"question\": \"Which continent has the most diverse languages?\",\n \"question_toks\": [\"Which\", \"continent\", \"has\", \"the\", \"most\", \"diverse\", \"languages\", \"?\"]\n}"}
{"question": "Which continent speaks the most languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which continent speaks the most languages?\",\n\"question_toks\": \"['Which', 'continent', 'speaks', 'the', 'most', 'languages', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Continent, COUNT(DISTINCT Language) AS num_languages FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY num_languages DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'Continent', ',', 'COUNT', '(', 'DISTINCT', 'Language', ')', 'AS', 'num_languages', 'FROM', 'countrylanguage', 'JOIN', 'country', 'ON', 'country.Code', '=', 'countrylanguage.CountryCode', 'GROUP', 'BY', 'Continent', 'ORDER', 'BY', 'num_languages', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Continent', ',', 'COUNT', '(', 'DISTINCT', 'Language', ')', 'AS', 'num_languages', 'FROM', 'countrylanguage', 'JOIN', 'country', 'ON', 'country', '.', 'Code', '=', 'countrylanguage', '.', 'CountryCode', 'GROUP', 'BY', 'Continent', 'ORDER', 'BY', 'num_languages', 'DESC', 'LIMIT', '1']\",\n \"question\": \"Which continent speaks the most languages?\",\n \"question_toks\": \"['Which', 'continent', 'speaks', 'the', 'most', 'languages', '?']}\"\n"}
{"question": "How many countries speak both English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many countries speak both English and Dutch?\",\n\"question_toks\": \"['How', 'many', 'countries', 'speak', 'both', 'English', 'and', 'Dutch', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT COUNT(*) FROM (SELECT cl.CountryCode FROM countrylanguage cl JOIN countrylanguage cl2 ON cl.CountryCode=cl2.CountryCode WHERE cl.Language='English' AND cl2.Language='Dutch') q\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', 'SELECT', 'cl', '.', 'CountryCode', 'FROM', 'countrylanguage', 'cl', 'JOIN', 'countrylanguage', 'cl2', 'ON', 'cl', '.', 'CountryCode', '=', 'cl2', '.', 'CountryCode', 'WHERE', 'cl', '.', 'Language', '=', \\\"'English'\\\", 'AND', 'cl2', '.', 'Language', '=', \\\"'Dutch'\\\")', 'q']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', 'SELECT', 'cl', '.', 'CountryCode', 'FROM', 'countrylanguage', 'cl', 'JOIN', 'countrylanguage', 'cl2', 'ON', 'cl', '.', 'CountryCode', '=', 'cl2', '.', 'CountryCode', 'WHERE', 'cl', '.', 'Language', '=', 'cl2', '.', 'Language', ')', 'q']\",\n\"question\": \"How many countries speak both English and Dutch?\",\n\"question_toks\": \"['How', 'many', 'countries', 'speak', 'both', 'English', 'and', 'Dutch', '?']\"}"}
{"question": "What is the number of nations that use English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the number of nations that use English and Dutch?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'nations', 'that', 'use', 'English', 'and', 'Dutch', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT COUNT(DISTINCT countrylanguage.CountryCode) FROM countrylanguage T1 JOIN country T2 ON T1.CountryCode = T2.Code WHERE Language IN ('English','Dutch')\",\n \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"countrylanguage\", \".\", \"CountryCode\", \")\", \"FROM\", \"countrylanguage\", \"T1\", \"JOIN\", \"country\", \"T2\", \"ON\", \"T1\", \".\", \"CountryCode\", \"=\", \"T2\", \".\", \"Code\", \"WHERE\", \"Language\", \"IN\", \"(\", \"'English'\", \",\", \"'Dutch'\", \")\"],\n \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"countrylanguage\", \".\", \"CountryCode\", \")\", \"FROM\", \"countrylanguage\", \"T1\", \"JOIN\", \"country\", \"T2\", \"ON\", \"T1\", \".\", \"CountryCode\", \"=\", \"T2\", \".\", \"Code\", \"WHERE\", \"Language\", \"IN\", \"(\", \"'\", \"'\", \",\", \"'\", \"'\", \")\"],\n \"question\": \"What is the number of nations that use English and Dutch?\",\n \"question_toks\": [\"What\", \"is\", \"the\", \"number\", \"of\", \"nations\", \"that\", \"use\", \"English\", \"and\", \"Dutch\", \"?\"]\n}"}
{"question": "What are the names of nations speak both English and French?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the names of nations speak both English and French?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'nations', 'speak', 'both', 'English', 'and', 'French', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT DISTINCT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code=cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language)=2\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'c', '.', 'Name', 'FROM', 'country', 'AS', 'c', 'JOIN', 'countrylanguage', 'AS', 'cl', 'ON', 'c', '.', 'Code', '=', 'cl', '.', 'CountryCode', 'WHERE', 'cl', '.', 'Language', 'IN', '(', ''', 'English', ''', ',', ''', 'French', ''', ')', 'GROUP', 'BY', 'c', '.', 'Name', 'HAVING', 'COUNT', '(', 'DISTINCT', 'cl', '.', 'Language', ')', '=', '2']\",\n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'c', '.', 'Name', 'FROM', 'country', 'AS', 'c', 'JOIN', 'countrylanguage', 'AS', 'cl', 'ON', 'c', '.', 'Code', '=', 'cl', '.', 'CountryCode', 'WHERE', 'cl', '.', 'Language', 'IN', '(', '', ',', '', ')', 'GROUP', 'BY', 'c', '.', 'Name', 'HAVING', 'COUNT', '(', 'DISTINCT', 'cl', '.', 'Language', ')', '=', '2']\",\n \"question\": \"What are the names of nations that speak both English and French?\",\n \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'nations', 'that', 'speak', 'both', 'English', 'and', 'French', '?']\"\n }"}
{"question": "Give the names of nations that speak both English and French.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the names of nations that speak both English and French.\",\n\"question_toks\": \"['Give', 'the', 'names', 'of', 'nations', 'that', 'speak', 'both', 'English', 'and', 'French', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT DISTINCT c1.Name \\\n               FROM country c1, countrylanguage cl1, countrylanguage cl2, country c2 \\\n               WHERE c1.Code = cl1.CountryCode AND c2.Code = cl2.CountryCode AND c1.Code <> c2.Code \\\n                   AND cl1.Language = 'English' AND cl2.Language = 'French'\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"c1\", \".\", \"Name\", \"FROM\", \"country\", \"c1\", \",\", \"countrylanguage\", \"cl1\", \",\", \"countrylanguage\", \"cl2\", \",\", \"country\", \"c2\", \"WHERE\", \"c1\", \".\", \"Code\", \"=\", \"cl1\", \".\", \"CountryCode\", \"AND\", \"c2\", \".\", \"Code\", \"=\", \"cl2\", \".\", \"CountryCode\", \"AND\", \"c1\", \".\", \"Code\", \"<>\", \"c2\", \".\", \"Code\", \"AND\", \"cl1\", \".\", \"Language\", \"=\", \"'English'\", \"AND\", \"cl2\", \".\", \"Language\", \"=\", \"'French'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"c1\", \".\", \"Name\", \"FROM\", \"country\", \"c1\", \",\", \"countrylanguage\", \"cl1\", \",\", \"countrylanguage\", \"cl2\", \",\", \"country\", \"c2\", \"WHERE\", \"c1\", \".\", \"Code\", \"=\", \"cl1\", \".\", \"CountryCode\", \"AND\", \"c2\", \".\", \"Code\", \"=\", \"cl2\", \".\", \"CountryCode\", \"AND\", \"c1\", \".\", \"Code\", \"<>\", \"c2\", \".\", \"Code\", \"AND\", \"cl1\", \".\", \"Language\", \"=\", \"English\", \"AND\", \"cl2\", \".\", \"Language\", \"=\", \"French\"],\n    \"question\": \"Give the names of nations that speak both English and French.\",\n    \"question_toks\": [\"Give\", \"the\", \"names\", \"of\", \"nations\", \"that\", \"speak\", \"both\", \"English\", \"and\", \"French\", \".\"]\n}"}
{"question": "What are the names of nations where both English and French are official languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the names of nations where both English and French are official languages?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'nations', 'where', 'both', 'English', 'and', 'French', 'are', 'official', 'languages', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT DISTINCT c.Name FROM country c, countrylanguage cl1, countrylanguage cl2 WHERE c.Code = cl1.CountryCode AND c.Code = cl2.CountryCode AND cl1.Language='English' AND cl1.IsOfficial='T' AND cl2.Language='French' AND cl2.IsOfficial='T'\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"c\", \".\", \"Name\", \"FROM\", \"country\", \"c\", \",\", \"countrylanguage\", \"cl1\", \",\", \"countrylanguage\", \"cl2\", \"WHERE\", \"c\", \".\", \"Code\", \"=\", \"cl1\", \".\", \"CountryCode\", \"AND\", \"c\", \".\", \"Code\", \"=\", \"cl2\", \".\", \"CountryCode\", \"AND\", \"cl1\", \".\", \"Language\", \"=\", \"'\", \"English\", \"'\", \"AND\", \"cl1\", \".\", \"IsOfficial\", \"=\", \"'\", \"T\", \"'\", \"AND\", \"cl2\", \".\", \"Language\", \"=\", \"'\", \"French\", \"'\", \"AND\", \"cl2\", \".\", \"IsOfficial\", \"=\", \"'\", \"T\", \"'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"c\", \".\", \"Name\", \"FROM\", \"country\", \"c\", \",\", \"countrylanguage\", \"cl1\", \",\", \"countrylanguage\", \"cl2\", \"WHERE\", \"c\", \".\", \"Code\", \"=\", \"cl1\", \".\", \"CountryCode\", \"AND\", \"c\", \".\", \"Code\", \"=\", \"cl2\", \".\", \"CountryCode\", \"AND\", \"cl1\", \".\", \"Language\", \"=\", \"English\", \"AND\", \"cl1\", \".\", \"IsOfficial\", \"=\", \"T\", \"AND\", \"cl2\", \".\", \"Language\", \"=\", \"French\", \"AND\", \"cl2\", \".\", \"IsOfficial\", \"=\", \"T\"],\n    \"question\": \"What are the names of nations where both English and French are official languages?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"nations\", \"where\", \"both\", \"English\", \"and\", \"French\", \"are\", \"official\", \"languages\", \"?\"]\n}"}
{"question": "Give the names of countries with English and French as official languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the names of countries with English and French as official languages.\",\n\"question_toks\": \"['Give', 'the', 'names', 'of', 'countries', 'with', 'English', 'and', 'French', 'as', 'official', 'languages', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT DISTINCT country.Name FROM country INNER JOIN countrylanguage AS cl1 ON country.Code=cl1.CountryCode AND cl1.Language='English' INNER JOIN countrylanguage AS cl2 ON country.Code=cl2.CountryCode AND cl2.Language='French'\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'country', '.', 'Name', 'FROM', 'country', 'INNER', 'JOIN', 'countrylanguage', 'AS', 'cl1', 'ON', 'country', '.', 'Code', '=', 'cl1', '.', 'CountryCode', 'AND', 'cl1', '.','Language','=','English', 'INNER', 'JOIN', 'countrylanguage', 'AS', 'cl2', 'ON', 'country', '.', 'Code','=', 'cl2', '.', 'CountryCode', 'AND', 'cl2', '.', 'Language', '=', 'French']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'country', '.', 'Name', 'FROM', 'country', 'INNER', 'JOIN', 'countrylanguage', 'AS', 'cl1', 'ON', 'country', '.', 'Code', '=', 'cl1', '.', 'CountryCode', 'AND', 'cl1', '.','Language','=','?', 'INNER', 'JOIN', 'countrylanguage', 'AS', 'cl2', 'ON', 'country', '.', 'Code','=', 'cl2', '.', 'CountryCode', 'AND', 'cl2', '.', 'Language', '=', '?']\",\n\"question\": \"Give the names of countries with English and French as official languages.\",\n\"question_toks\": \"['Give', 'the', 'names', 'of', 'countries', 'with', 'English', 'and', 'French', 'as', 'official', 'languages', '.']\"}"}
{"question": "What is the number of distinct continents where Chinese is spoken?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the number of distinct continents where Chinese is spoken?\",\n\"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'distinct', 'continents', 'where', 'Chinese', 'is', 'spoken', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT COUNT(DISTINCT Continent) FROM country c, countrylanguage l WHERE c.Code = l.CountryCode AND l.Language='Chinese'\",\n \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'Continent', ')', 'FROM', 'country', 'T1', ',', 'countrylanguage', 'T2', 'WHERE', 'T1.Code', '=', 'T2.CountryCode', 'AND', 'T2.Language', '=', '\\\"Chinese\\\"']\",\n \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'Continent', ')', 'FROM', 'country', 'T1', ',', 'countrylanguage', 'T2', 'WHERE', 'T1.Code', '=', 'T2.CountryCode', 'AND', 'T2.Language', '=', 'Chinese']\",\n \"question\": \"What is the number of distinct continents where Chinese is spoken?\",\n \"question_toks\": \"['What', 'is', 'the', 'number', 'of', 'distinct', 'continents', 'where', 'Chinese', 'is', 'spoken', '?']\"\n}"}
{"question": "How many continents speak Chinese?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many continents speak Chinese?\",\n\"question_toks\": \"['How', 'many', 'continents', 'speak', 'Chinese', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT COUNT(DISTINCT countrylanguage.CountryCode) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE Language = 'Chinese' AND country.Continent != 'Antarctica'\",\n \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'countrylanguage.CountryCode', ')', 'FROM', 'countrylanguage', 'JOIN', 'country', 'ON', 'countrylanguage.CountryCode', '=', 'country.Code', 'WHERE', 'Language', '=', \\\"'Chinese'\\\", 'AND', 'country.Continent', '!=', \\\"'Antarctica'\\\"']\",\n \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'countrylanguage.CountryCode', ')', 'FROM', 'countrylanguage', 'JOIN', 'country', 'ON', 'countrylanguage.CountryCode', '=', 'country.Code', 'WHERE', 'Language', '=', 'Chinese', 'AND', 'country.Continent', '!=', 'Antarctica']\",\n \"question\": \"How many continents speak Chinese?\",\n \"question_toks\": \"['How', 'many', 'continents', 'speak', 'Chinese', '?']\"\n}"}
{"question": "What are the regions that use English or Dutch?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the regions that use English or Dutch?\",\n\"question_toks\": \"['What', 'are', 'the', 'regions', 'that', 'use', 'English', 'or', 'Dutch', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT DISTINCT country.Region FROM country, countrylanguage WHERE (country.Code = countrylanguage.CountryCode AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch'))\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"country.Region\", \"FROM\", \"country\", \",\", \"countrylanguage\", \"WHERE\", \"(\", \"country.Code\", \"=\", \"countrylanguage.CountryCode\", \"AND\", \"(\", \"countrylanguage.Language\", \"=\", \"'English'\", \"OR\", \"countrylanguage.Language\", \"=\", \"'Dutch'\", \")\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"country\", \".\", \"Region\", \"FROM\", \"country\", \",\", \"countrylanguage\", \"WHERE\", \"(\", \"country\", \".\", \"Code\", \"=\", \"countrylanguage\", \".\", \"CountryCode\", \"AND\", \"(\", \"countrylanguage\", \".\", \"Language\", \"=\", \"English\", \"OR\", \"countrylanguage\", \".\", \"Language\", \"=\", \"Dutch\", \")\", \")\"],\n  \"question\": \"What are the regions that use English or Dutch?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"regions\", \"that\", \"use\", \"English\", \"or\", \"Dutch\", \"?\"]\n}"}
{"question": "Which regions speak Dutch or English?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which regions speak Dutch or English?\",\n\"question_toks\": \"['Which', 'regions', 'speak', 'Dutch', 'or', 'English', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT DISTINCT country.Region\\nFROM countrylanguage, country\\nWHERE (countrylanguage.CountryCode = country.Code) AND ((countrylanguage.Language = 'Dutch') OR (countrylanguage.Language = 'English'))\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'country', '.', 'Region', 'FROM', 'countrylanguage', ',', 'country', 'WHERE', '(', 'countrylanguage', '.', 'CountryCode', '=', 'country', '.', 'Code', ')', 'AND', '(', '(', 'countrylanguage', '.', 'Language', '=', ''Dutch''', ')', 'OR', '(', 'countrylanguage', '.', 'Language', '=', ''English''', ')', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'country', '.', 'Region', 'FROM', 'countrylanguage', ',', 'country', 'WHERE', '(', 'countrylanguage', '.', 'CountryCode', '=', 'country', '.', 'Code', ')', 'AND', '(', '(', 'countrylanguage', '.', 'Language', '=', '', ')', 'OR', '(', 'countrylanguage', '.', 'Language', '=', '', ')', ')']\",\n\"question\": \"Which regions speak Dutch or English?\",\n\"question_toks\": \"['Which', 'regions', 'speak', 'Dutch', 'or', 'English', '?']}\""}
{"question": "What are the countries where either English or Dutch is the official language ?", "sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the countries where either English or Dutch is the official language ?\",\n\"question_toks\": \"['What', 'are', 'the', 'countries', 'where', 'either', 'English', 'or', 'Dutch', 'is', 'the', 'official', 'language', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code=countrylanguage.CountryCode WHERE countrylanguage.IsOfficial='T' AND (countrylanguage.Language='English' OR countrylanguage.Language='Dutch') ORDER BY country.Name ASC\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"country\", \".\", \"Name\", \"FROM\", \"country\", \"JOIN\", \"countrylanguage\", \"ON\", \"country\", \".\", \"Code\", \"=\", \"countrylanguage\", \".\", \"CountryCode\", \"WHERE\", \"countrylanguage\", \".\", \"IsOfficial\", \"=\", \"'\", \"T\", \"'\", \"AND\", \"(\", \"countrylanguage\", \".\", \"Language\", \"=\", \"'\", \"English\", \"'\", \"OR\", \"countrylanguage\", \".\", \"Language\", \"=\", \"'\", \"Dutch\", \"'\", \")\", \"ORDER\", \"BY\", \"country\", \".\", \"Name\", \"ASC\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"country\", \".\", \"Name\", \"FROM\", \"country\", \"JOIN\", \"countrylanguage\", \"ON\", \"country\", \".\", \"Code\", \"=\", \"countrylanguage\", \".\", \"CountryCode\", \"WHERE\", \"countrylanguage\", \".\", \"IsOfficial\", \"=\", \"*\", \"AND\", \"(\", \"countrylanguage\", \".\", \"Language\", \"=\", \"*\", \"OR\", \"countrylanguage\", \".\", \"Language\", \"=\", \"*\", \")\", \"ORDER\", \"BY\", \"country\", \".\", \"Name\", \"ASC\"],\n    \"question\": \"What are the countries where either English or Dutch is the official language?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"countries\", \"where\", \"either\", \"English\", \"or\", \"Dutch\", \"is\", \"the\", \"official\", \"language\", \"?\"]\n}"}
{"question": "Which countries have either English or Dutch as an official language?", "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which countries have either English or Dutch as an official language?\",\n\"question_toks\": \"['Which', 'countries', 'have', 'either', 'English', 'or', 'Dutch', 'as', 'an', 'official', 'language', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT DISTINCT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch'\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"country\", \".\", \"Name\", \"FROM\", \"country\", \"INNER\", \"JOIN\", \"countrylanguage\", \"ON\", \"country\", \".\", \"Code\", \"=\", \"countrylanguage\", \".\", \"CountryCode\", \"WHERE\", \"countrylanguage\", \".\", \"Language\", \"=\", \"'English'\", \"OR\", \"countrylanguage\", \".\", \"Language\", \"=\", \"'Dutch'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"country\", \".\", \"Name\", \"FROM\", \"country\", \"INNER\", \"JOIN\", \"countrylanguage\", \"ON\", \"country\", \".\", \"Code\", \"=\", \"countrylanguage\", \".\", \"CountryCode\", \"WHERE\", \"countrylanguage\", \".\", \"Language\"],\n    \"question\": \"Which countries have either English or Dutch as an official language?\",\n    \"question_toks\": [\"Which\", \"countries\", \"have\", \"either\", \"English\", \"or\", \"Dutch\", \"as\", \"an\", \"official\", \"language\", \"?\"]\n}"}
{"question": "Which language is the most popular on the Asian continent?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which language is the most popular on the Asian continent?\",\n\"question_toks\": \"['Which', 'language', 'is', 'the', 'most', 'popular', 'on', 'the', 'Asian', 'continent', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent='Asia') AND IsOfficial='T' ORDER BY Percentage DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'Language', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode', 'IN', '(', 'SELECT', 'Code', 'FROM', 'country', 'WHERE', 'Continent', '=', '''Asia''', ')', 'AND', 'IsOfficial', '=', '''T''', 'ORDER', 'BY', 'Percentage', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'Language', 'FROM', 'countrylanguage', 'WHERE', 'CountryCode', 'IN', '(', 'SELECT', 'Code', 'FROM', 'country', 'WHERE', 'Continent', '=', '', ')', 'AND', 'IsOfficial', '=', '', 'ORDER', 'BY', 'Percentage', 'DESC', 'LIMIT', '1']\",\n\"question\": \"Which language is the most popular on the Asian continent?\",\n\"question_toks\": \"['Which', 'language', 'is', 'the', 'most', 'popular', 'on', 'the', 'Asian', 'continent', '?']}\""}
{"question": "What is the language that is used by the largest number of Asian nations?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the language that is used by the largest number of Asian nations?\",\n\"question_toks\": \"['What', 'is', 'the', 'language', 'that', 'is', 'used', 'by', 'the', 'largest', 'number', 'of', 'Asian', 'nations', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT cl.Language \\nFROM countrylanguage cl\\nLEFT JOIN country c ON c.Code = cl.CountryCode\\nWHERE c.Continent = 'Asia'\\nGROUP BY cl.Language\\nORDER BY COUNT(DISTINCT cl.CountryCode) DESC\\nLIMIT 1\",\n \"query_toks\": \"['SELECT', 'cl.Language', 'FROM', 'countrylanguage', 'cl', 'LEFT', 'JOIN', 'country', 'c', 'ON', 'c.Code', '=', 'cl.CountryCode', 'WHERE', 'c.Continent', '=', ''Asia'', 'GROUP', 'BY', 'cl.Language', 'ORDER', 'BY', 'COUNT', '(', 'DISTINCT', 'cl.CountryCode', ')', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'cl', '.', 'Language', 'FROM', 'countrylanguage', 'cl', 'LEFT', 'JOIN', 'country', 'c', 'ON', 'c', '.', 'Code', '=', 'cl', '.', 'CountryCode', 'WHERE', 'c', '.', 'Continent', '=', '', 'GROUP', 'BY', 'cl', '.', 'Language', 'ORDER', 'BY', 'COUNT', '(', 'DISTINCT', 'cl', '.', 'CountryCode', ')', 'DESC', 'LIMIT', '1']\",\n \"question\": \"What is the language that is used by the largest number of Asian nations?\",\n \"question_toks\": \"['What', 'is', 'the', 'language', 'that', 'is', 'used', 'by', 'the', 'largest', 'number', 'of', 'Asian', 'nations', '?']\"}"}
{"question": "Which languages are spoken by only one country in republic governments?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which languages are spoken by only one country in republic governments?\",\n\"question_toks\": \"['Which', 'languages', 'are', 'spoken', 'by', 'only', 'one', 'country', 'in', 'republic', 'governments', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm LIKE '%Republic%' AND NOT EXISTS (SELECT * FROM countrylanguage cl2 WHERE cl2.Language = cl.Language AND cl2.CountryCode != c.Code)\",\n  \"query_toks\": [\"SELECT\", \"cl\", \".\", \"Language\", \"FROM\", \"countrylanguage\", \"cl\", \"JOIN\", \"country\", \"c\", \"ON\", \"cl\", \".\", \"CountryCode\", \"=\", \"c\", \".\", \"Code\", \"WHERE\", \"c\", \".\", \"GovernmentForm\", \"LIKE\", \"'%\", \"Republic\", \"%'\", \"AND\", \"NOT\", \"EXISTS\", \"(\", \"SELECT\", \"*\", \"FROM\", \"countrylanguage\", \"cl2\", \"WHERE\", \"cl2\", \".\", \"Language\", \"=\", \"cl\", \".\", \"Language\", \"AND\", \"cl2\", \".\", \"CountryCode\", \"!=\", \"c\", \".\", \"Code\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"cl\", \".\", \"Language\", \"FROM\", \"countrylanguage\", \"cl\", \"JOIN\", \"country\", \"c\", \"ON\", \"cl\", \".\", \"CountryCode\", \"=\", \"c\", \".\", \"Code\", \"WHERE\", \"c\", \".\", \"GovernmentForm\", \"LIKE\", \"'%Republic%'\", \"AND\", \"NOT\", \"EXISTS\", \"(\", \"SELECT\", \"*\", \"FROM\", \"countrylanguage\", \"cl2\", \"WHERE\", \"cl2\", \".\", \"Language\", \"=\", \"cl\", \".\", \"Language\", \"AND\", \"cl2\", \".\", \"CountryCode\", \"!=\", \"c\", \".\", \"Code\", \")\"],\n  \"question\": \"Which languages are spoken by only one country in republic governments?\",\n  \"question_toks\": [\"Which\", \"languages\", \"are\", \"spoken\", \"by\", \"only\", \"one\", \"country\", \"in\", \"republic\", \"governments\", \"?\"],\n}"}
{"question": "What languages are only used by a single country with a republic government?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What languages are only used by a single country with a republic government?\",\n\"question_toks\": \"['What', 'languages', 'are', 'only', 'used', 'by', 'a', 'single', 'country', 'with', 'a', 'republic', 'government', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT DISTINCT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm like '%Republic%' AND cl.Percentage = 100\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"cl\", \".\", \"Language\", \"FROM\", \"countrylanguage\", \"cl\", \"JOIN\", \"country\", \"c\", \"ON\", \"cl\", \".\", \"CountryCode\", \"=\", \"c\", \".\", \"Code\", \"WHERE\", \"c\", \".\", \"GovernmentForm\", \"like\", \"'%\", \"Republic\", \"%'\", \"AND\", \"cl\", \".\", \"Percentage\", \"=\", \"100\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"cl\", \".\", \"Language\", \"FROM\", \"countrylanguage\", \"cl\", \"JOIN\", \"country\", \"c\", \"ON\", \"cl\", \".\", \"CountryCode\", \"=\", \"c\", \".\", \"Code\", \"WHERE\", \"c\", \".\", \"GovernmentForm\", \"like\", \"'%\", \"Republic\", \"%'\", \"AND\", \"cl\", \".\", \"Percentage\", \"=\"],\n  \"question\": \"What languages are only used by a single country with a republic government?\",\n  \"question_toks\": [\"What\", \"languages\", \"are\", \"only\", \"used\", \"by\", \"a\", \"single\", \"country\", \"with\", \"a\", \"republic\", \"government\", \"?\"]\n}"}
{"question": "Find the city with the largest population that uses English.", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Find the city with the largest population that uses English.\",\n\"question_toks\": \"['Find', 'the', 'city', 'with', 'the', 'largest', 'population', 'that', 'uses', 'English', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT City.Name FROM City JOIN CountryLanguage on City.CountryCode=CountryLanguage.CountryCode WHERE CountryLanguage.IsOfficial='T' AND CountryLanguage.Language='English' ORDER BY City.Population DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'City', '.', 'Name', 'FROM', 'City', 'JOIN', 'CountryLanguage', 'on', 'City', '.', 'CountryCode', '=', 'CountryLanguage', '.', 'CountryCode', 'WHERE', 'CountryLanguage', '.', 'IsOfficial', '=', ''T'', 'AND', 'CountryLanguage', '.', 'Language', '=', ''English'', 'ORDER', 'BY', 'City', '.', 'Population', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'City', '.', 'Name', 'FROM', 'City', 'JOIN', 'CountryLanguage', 'on', 'City', '.', 'CountryCode', '=', 'CountryLanguage', '.', 'CountryCode', 'WHERE', 'CountryLanguage', '.', 'IsOfficial', '=', '', 'AND', 'CountryLanguage', '.', 'Language', '=', '', 'ORDER', 'BY', 'City', '.', 'Population', 'DESC', 'LIMIT', '']\",\n\"question\": \"Find the city with the largest population that uses English.\",\n\"question_toks\": \"['Find', 'the', 'city', 'with', 'the', 'largest', 'population', 'that', 'uses', 'English', '.']}\""}
{"question": "What is the most populace city that speaks English?", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the most populace city that speaks English?\",\n\"question_toks\": \"['What', 'is', 'the', 'most', 'populace', 'city', 'that', 'speaks', 'English', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT city.Name FROM city, countrylanguage, country WHERE city.CountryCode=country.Code AND city.CountryCode=countrylanguage.CountryCode AND countrylanguage.Language='English' ORDER BY city.Population DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'city', '.', 'Name', 'FROM', 'city', ',', 'countrylanguage', ',', 'country', 'WHERE', 'city', '.', 'CountryCode', '=', 'country', '.', 'Code', 'AND', 'city', '.', 'CountryCode', '=', 'countrylanguage', '.', 'CountryCode', 'AND', 'countrylanguage', '.', 'Language', '=', \\\"'English'\\\", 'ORDER', 'BY', 'city', '.', 'Population', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'city', '.', 'Name', 'FROM', 'city', ',', 'countrylanguage', ',', 'country', 'WHERE', 'city', '.', 'CountryCode', '=', 'country', '.', 'Code', 'AND', 'city', '.', 'CountryCode', '=', 'countrylanguage', '.', 'CountryCode', 'AND', 'countrylanguage', '.', 'Language', '=', 'English', 'ORDER', 'BY', 'city', '.', 'Population', 'DESC', 'LIMIT', '1']\",\n\"question\": \"What is the most populace city that speaks English?\",\n\"question_toks\": \"['What', 'is', 'the', 'most', 'populace', 'city', 'that', 'speaks', 'English', '?']}\"\n"}
{"question": "Find the name, population and expected life length of asian country with the largest area?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Find the name, population and expected life length of asian country with the largest area?\",\n\"question_toks\": \"['Find', 'the', 'name', ',', 'population', 'and', 'expected', 'life', 'length', 'of', 'asian', 'country', 'with', 'the', 'largest', 'area', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Name, Population, LifeExpectancy FROM country WHERE Continent='Asia' ORDER BY SurfaceArea DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'Name', ',', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Continent', '=', ''Asia'', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Continent', '=', '', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '1']\",\n \"question\": \"Find the name, population and expected life length of asian country with the largest area?\",\n \"question_toks\": \"['Find', 'the', 'name', ',', 'population', 'and', 'expected', 'life', 'length', 'of', 'asian', 'country', 'with', 'the', 'largest', 'area', '?']\"\n}"}
{"question": "What are the name, population, and life expectancy of the largest Asian country by land?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the name, population, and life expectancy of the largest Asian country by land?\",\n\"question_toks\": \"['What', 'are', 'the', 'name', ',', 'population', ',', 'and', 'life', 'expectancy', 'of', 'the', 'largest', 'Asian', 'country', 'by', 'land', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1\",\n  \"query_toks\": \"['SELECT', 'Name', ',', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Continent', '=', ''Asia'', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '1']\",\n  \"query_toks_no_value\": \"['SELECT', 'Name', ',', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Continent', '=', '', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '']\",\n  \"question\": \"What are the name, population, and life expectancy of the largest Asian country by land?\",\n  \"question_toks\": \"['What', 'are', 'the', 'name', ',', 'population', ',', 'and', 'life', 'expectancy', 'of', 'the', 'largest', 'Asian', 'country', 'by', 'land', '?']\"\n}"}
{"question": "What is average life expectancy in the countries where English is not the official language?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is average life expectancy in the countries where English is not the official language?\",\n\"question_toks\": \"['What', 'is', 'average', 'life', 'expectancy', 'in', 'the', 'countries', 'where', 'English', 'is', 'not', 'the', 'official', 'language', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT AVG(LifeExpectancy) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.isofficial = 'F' AND cl.language <> 'English'\",\n \"query_toks\": \"['SELECT', 'AVG', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'c', 'JOIN', 'countrylanguage', 'cl', 'ON', 'c', '.', 'code', '=', 'cl', '.', 'countrycode', 'WHERE', 'cl', '.', 'isofficial', '=', \\\"'F'\\\"', 'AND', 'cl', '.', 'language', '<>', \\\"'English'\\\"']\",\n \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'c', 'JOIN', 'countrylanguage', 'cl', 'ON', 'c', '.', 'code', '=', 'cl', '.', 'countrycode', 'WHERE', 'cl', '.', 'isofficial', '=', '', 'AND', 'cl', '.', 'language', '<>', \\\"'\\\"]\",\n \"question\": \"What is average life expectancy in the countries where English is not the official language?\",\n \"question_toks\": \"['What', 'is', 'average', 'life', 'expectancy', 'in', 'the', 'countries', 'where', 'English', 'is', 'not', 'the', 'official', 'language', '?']}\"\n"}
{"question": "Give the mean life expectancy of countries in which English is not the official language.", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the mean life expectancy of countries in which English is not the official language.\",\n\"question_toks\": \"['Give', 'the', 'mean', 'life', 'expectancy', 'of', 'countries', 'in', 'which', 'English', 'is', 'not', 'the', 'official', 'language', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\":\"SELECT AVG(c1.LifeExpectancy) FROM countrylanguage cl, country c1 WHERE c1.Code = cl.CountryCode AND cl.IsOfficial = 'F' AND cl.Language <> 'English'\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'c1', '.', 'LifeExpectancy', ')', 'FROM', 'countrylanguage', 'cl', ',', 'country', 'c1', 'WHERE', 'c1', '.', 'Code', '=', 'cl', '.', 'CountryCode', 'AND', 'cl', '.', 'IsOfficial', '=', ''',F','''', 'AND', 'cl', '.', 'Language', '<>', ''',English','''']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'c1', '.', 'LifeExpectancy', ')', 'FROM', 'countrylanguage', 'cl', ',', 'country', 'c1', 'WHERE', 'c1', '.', 'Code', '=', 'cl', '.', 'CountryCode', 'AND', 'cl', '.', 'IsOfficial', '=', '', 'AND', 'cl', '.', 'Language', '<>', '']\",\n\"question\": \"Give the mean life expectancy of countries in which English is not the official language.\",\n\"question_toks\": \"['Give', 'the', 'mean', 'life', 'expectancy', 'of', 'countries', 'in', 'which', 'English', 'is', 'not', 'the', 'official', 'language', '.']}\""}
{"question": "What is the total number of people living in the nations that do not use English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the total number of people living in the nations that do not use English?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'number', 'of', 'people', 'living', 'in', 'the', 'nations', 'that', 'do', 'not', 'use', 'English', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English')\",\n \"query_toks\": [\"SELECT\", \"SUM\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \"WHERE\", \"Code\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"CountryCode\", \"FROM\", \"countrylanguage\", \"WHERE\", \"Language\", \"=\", \"'English'\", \")\",],\n \"query_toks_no_value\": [\"SELECT\", \"SUM\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \"WHERE\", \"Code\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"CountryCode\", \"FROM\", \"countrylanguage\", \"WHERE\", \"Language\", \"=\", \"?\", \")\",],\n \"question\": \"What is the total number of people living in the nations that do not use English?\",\n \"question_toks\": [\"What\", \"is\", \"the\", \"total\", \"number\", \"of\", \"people\", \"living\", \"in\", \"the\", \"nations\", \"that\", \"do\", \"not\", \"use\", \"English\", \"?\"]\n}"}
{"question": "How many people live in countries that do not speak English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many people live in countries that do not speak English?\",\n\"question_toks\": \"['How', 'many', 'people', 'live', 'in', 'countries', 'that', 'do', 'not', 'speak', 'English', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English')\",\n\"query_toks\": \"['SELECT', 'SUM', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Code', 'NOT', 'IN', '(', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', ''English'', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'SUM', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Code', 'NOT', 'IN', '(', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', '', ')']\",\n\"question\": \"How many people live in countries that do not speak English?\",\n\"question_toks\": \"['How', 'many', 'people', 'live', 'in', 'countries', 'that', 'do', 'not', 'speak', 'English', '?']}\""}
{"question": "What is the official language spoken in the country whose head of state is Beatrix?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the official language spoken in the country whose head of state is Beatrix?\",\n\"question_toks\": \"['What', 'is', 'the', 'official', 'language', 'spoken', 'in', 'the', 'country', 'whose', 'head', 'of', 'state', 'is', 'Beatrix', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT cl.Language FROM countrylanguage cl, country c WHERE c.HeadOfState='Beatrix' AND c.Code=cl.CountryCode AND cl.IsOfficial='T'\",\n\"query_toks\": \"['SELECT', 'cl', '.', 'Language', 'FROM', 'countrylanguage', 'cl', ',', 'country', 'c', 'WHERE', 'c', '.', 'HeadOfState', '=', '\", 'Beatrix', \"',\", 'AND', 'c', '.', 'Code', '=', 'cl', '.', 'CountryCode', 'AND', 'cl', '.', 'IsOfficial', '=', \"'\", 'T', \"'']\",\n\"query_toks_no_value\": \"['SELECT', 'cl', '.', 'Language', 'FROM', 'countrylanguage', 'cl', ',', 'country', 'c', 'WHERE', 'c', '.', 'HeadOfState', '=', 'Beatrix', AND', 'c', '.', 'Code', '=', 'cl', '.', 'CountryCode', 'AND', 'cl', '.', 'IsOfficial', '=', 'T']\",\n\"question\": \"What is the official language spoken in the country whose head of state is Beatrix?\",\n\"question_toks\": \"['What', 'is', 'the', 'official', 'language', 'spoken', 'in', 'the', 'country', 'whose', 'head', 'of', 'state', 'is', 'Beatrix', '?']}\""}
{"question": "What is the official language used in the country the name of whose head of state is Beatrix.", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the official language used in the country the name of whose head of state is Beatrix.\",\n\"question_toks\": \"['What', 'is', 'the', 'official', 'language', 'used', 'in', 'the', 'country', 'the', 'name', 'of', 'whose', 'head', 'of', 'state', 'is', 'Beatrix', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode=c.Code WHERE c.HeadOfState='Beatrix'\",\n\"query_toks\": \"['SELECT', 'cl', '.', 'Language', 'FROM', 'countrylanguage', 'cl', 'JOIN', 'country', 'c', 'ON', 'cl', '.', 'CountryCode', '=', 'c', '.', 'Code', 'WHERE', 'c', '.', 'HeadOfState', '=', ''Beatrix'']\",\n\"query_toks_no_value\": \"['SELECT', 'cl', '.', 'Language', 'FROM', 'countrylanguage', 'cl', 'JOIN', 'country', 'c', 'ON', 'cl', '.', 'CountryCode', '=', 'c', '.', 'Code', 'WHERE', 'c', '.', 'HeadOfState', '=', \",\n\"question\": \"What is the official language used in the country the name of whose head of state is Beatrix.\",\n\"question_toks\": \"['What', 'is', 'the', 'official', 'language', 'used', 'in', 'the', 'country', 'the', 'name', 'of', 'whose', 'head', 'of', 'state', 'is', 'Beatrix', '.']}\""}
{"question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the total number of unique official languages spoken in the countries that are founded before 1930?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'number', 'of', 'unique', 'official', 'languages', 'spoken', 'in', 'the', 'countries', 'that', 'are', 'founded', 'before', '1930', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT COUNT(DISTINCT Language) FROM countrylanguage cl JOIN country c ON c.Code = cl.CountryCode WHERE IndepYear < 1930 AND IsOfficial = 'T'\",\n \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Language\", \")\", \"FROM\", \"countrylanguage\", \"cl\", \"JOIN\", \"country\", \"c\", \"ON\", \"c\", \".\", \"Code\", \"=\", \"cl\", \".\", \"CountryCode\", \"WHERE\", \"IndepYear\", \"<\", \"1930\", \"AND\", \"IsOfficial\", \"=\", \"'T'\"],\n \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Language\", \")\", \"FROM\", \"countrylanguage\", \"cl\", \"JOIN\", \"country\", \"c\", \"ON\", \"c\", \".\", \"Code\", \"=\", \"cl\", \".\", \"CountryCode\", \"WHERE\", \"IndepYear\", \"<\", \"?\", \"AND\", \"IsOfficial\", \"=\", \"'?'\"],\n \"question\": \"What is the total number of unique official languages spoken in the countries that are founded before 1930?\",\n \"question_toks\": [\"What\", \"is\", \"the\", \"total\", \"number\", \"of\", \"unique\", \"official\", \"languages\", \"spoken\", \"in\", \"the\", \"countries\", \"that\", \"are\", \"founded\", \"before\", \"1930\", \"?\"]}"}
{"question": "For the countries founded before 1930, what is the total number of distinct official languages?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"For the countries founded before 1930, what is the total number of distinct official languages?\",\n\"question_toks\": \"['For', 'the', 'countries', 'founded', 'before', '1930', ',', 'what', 'is', 'the', 'total', 'number', 'of', 'distinct', 'official', 'languages', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.indepyear < 1930 AND IsOfficial = 'T'\",\n\"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"language\", \")\", \"FROM\", \"countrylanguage\", \"JOIN\", \"country\", \"ON\", \"countrylanguage\", \".\", \"CountryCode\", \"=\", \"country\", \".\", \"Code\", \"WHERE\", \"country\", \".\", \"indepyear\", \"<\", \"1930\", \"AND\", \"IsOfficial\", \"=\", \"'\", \"T\", \"'\"],\n\"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"language\", \")\", \"FROM\", \"countrylanguage\", \"JOIN\", \"country\", \"ON\", \"countrylanguage\", \".\", \"CountryCode\", \"=\", \"country\", \".\", \"Code\", \"WHERE\", \"country\", \".\", \"indepyear\", \"<\", \"<value>\", \"AND\", \"IsOfficial\", \"=\", \"<value>\"],\n\"question\": \"For the countries founded before 1930, what is the total number of distinct official languages?\",\n\"question_toks\": [\"For\", \"the\", \"countries\", \"founded\", \"before\", \"1930\", \",\", \"what\", \"is\", \"the\", \"total\", \"number\", \"of\", \"distinct\", \"official\", \"languages\", \"?\"]\n}"}
{"question": "What are the countries that have greater surface area than any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the countries that have greater surface area than any country in Europe?\",\n\"question_toks\": \"['What', 'are', 'the', 'countries', 'that', 'have', 'greater', 'surface', 'area', 'than', 'any', 'country', 'in', 'Europe', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT code, name, surfacearea FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent='Europe')\",\n \"query_toks\": \"['SELECT', 'code', ',', 'name', ',', 'surfacearea', 'FROM', 'country', 'WHERE', 'surfacearea', '>', '(', 'SELECT', 'MAX', '(', 'surfacearea', ')', 'FROM', 'country', 'WHERE', 'continent', '=', '\\\\''Europe\\\\''', ')']\",\n \"query_toks_no_value\": \"['SELECT', 'code', ',', 'name', ',', 'surfacearea', 'FROM', 'country', 'WHERE', 'surfacearea', '>', '(', 'SELECT', 'MAX', '(', 'surfacearea', ')', 'FROM', 'country', 'WHERE', 'continent', '=', '\\\\''Europe\\\\''', ')']\",\n \"question\": \"What are the countries that have greater surface area than any country in Europe?\",\n \"question_toks\": \"['What', 'are', 'the', 'countries', 'that', 'have', 'greater', 'surface', 'area', 'than', 'any', 'country', 'in', 'Europe', '?']}\"\n"}
{"question": "Which countries have greater area than that of any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which countries have greater area than that of any country in Europe?\",\n\"question_toks\": \"['Which', 'countries', 'have', 'greater', 'area', 'than', 'that', 'of', 'any', 'country', 'in', 'Europe', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent='Europe')\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'SurfaceArea', '>', '(', 'SELECT', 'MAX', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '\\\\'Europe\\\\'', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'SurfaceArea', '>', '(', 'SELECT', 'MAX', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '\\\\''Europe\\\\''', ')']\",\n\"question\": \"Which countries have greater area than that of any country in Europe?\",\n\"question_toks\": \"['Which', 'countries', 'have', 'greater', 'area', 'than', 'that', 'of', 'any', 'country', 'in', 'Europe', '?']}\""}
{"question": "What are the African countries that have a  population less than any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the African countries that have a  population less than any country in Asia?\",\n\"question_toks\": \"['What', 'are', 'the', 'African', 'countries', 'that', 'have', 'a', 'population', 'less', 'than', 'any', 'country', 'in', 'Asia', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Code, Name, Population FROM country WHERE Continent='Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent='Asia')\",\n \"query_toks\": \"['SELECT', 'Code', ',', 'Name', ',', 'Population', 'FROM', 'country', 'WHERE', 'Continent', '=', \\\"'Africa'\\\" ',', 'AND', 'Population', '<', '(', 'SELECT', 'MIN', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', \\\"'Asia'\\\" ')']\",\n \"query_toks_no_value\": \"['SELECT', 'Code', ',', 'Name', ',', 'Population', 'FROM', 'country', 'WHERE', 'Continent', '=', ',', 'AND', 'Population', '<', '(', 'SELECT', 'MIN', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', ')']\",\n \"question\": \"What are the African countries that have a population less than any country in Asia?\",\n \"question_toks\": \"['What', 'are', 'the', 'African', 'countries', 'that', 'have', 'a', 'population', 'less', 'than', 'any', 'country', 'in', 'Asia', '?']\"}"}
{"question": "Which African countries have a smaller population than that of any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which African countries have a smaller population than that of any country in Asia?\",\n\"question_toks\": \"['Which', 'African', 'countries', 'have', 'a', 'smaller', 'population', 'than', 'that', 'of', 'any', 'country', 'in', 'Asia', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')\",\n    \"query_toks\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', ''Africa'', 'AND', 'country', '.', 'Population', '<', '(', 'SELECT', 'MIN', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', ''Asia'', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', '', 'AND', 'country', '.', 'Population', '<', '(', 'SELECT', 'MIN', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '', ')']\",\n    \"question\": \"Which African countries have a smaller population than that of any country in Asia?\",\n    \"question_toks\": \"['Which', 'African', 'countries', 'have', 'a', 'smaller', 'population', 'than', 'that', 'of', 'any', 'country', 'in', 'Asia', '?']\"\n}"}
{"question": "Which Asian countries have a population that is larger than any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which Asian countries have a population that is larger than any country in Africa?\",\n\"question_toks\": \"['Which', 'Asian', 'countries', 'have', 'a', 'population', 'that', 'is', 'larger', 'than', 'any', 'country', 'in', 'Africa', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT country.Name FROM country WHERE country.Continent='Asia' AND country.Population>(SELECT MAX(Population) FROM country WHERE Continent='Africa')\",\n\"query_toks\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', '\\\\\\'Asia\\\\\\'', 'AND', 'country', '.', 'Population', '>', '(', 'SELECT', 'MAX', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '\\\\\\'Africa\\\\\\'', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', '', 'AND', 'country', '.', 'Population', '>', '(', 'SELECT', 'MAX', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '', ')']\",\n\"question\": \"Which Asian countries have a population that is larger than any country in Africa?\",\n\"question_toks\": \"['Which', 'Asian', 'countries', 'have', 'a', 'population', 'that', 'is', 'larger', 'than', 'any', 'country', 'in', 'Africa', '?']}\""}
{"question": "What are the Asian countries which have a population larger than that of any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the Asian countries which have a population larger than that of any country in Africa?\",\n\"question_toks\": \"['What', 'are', 'the', 'Asian', 'countries', 'which', 'have', 'a', 'population', 'larger', 'than', 'that', 'of', 'any', 'country', 'in', 'Africa', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT country.Name FROM country WHERE country.Continent='Asia' AND country.Population>(SELECT MAX(country.Population) FROM country WHERE country.Continent='Africa')\",\n\"query_toks\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', \\\"'Asia'\\\"', 'AND', 'country', '.', 'Population', '>', '(', 'SELECT', 'MAX', '(', 'country', '.', 'Population', ')', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', \\\"'Africa'\\\"', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'country', '.', 'Name', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', '', 'AND', 'country', '.', 'Population', '>', '(', 'SELECT', 'MAX', '(', 'country', '.', 'Population', ')', 'FROM', 'country', 'WHERE', 'country', '.', 'Continent', '=', '', ')']\",\n\"question\": \"What are the Asian countries which have a population larger than that of any country in Africa?\",\n\"question_toks\": \"['What', 'are', 'the', 'Asian', 'countries', 'which', 'have', 'a', 'population', 'larger', 'than', 'that', 'of', 'any', 'country', 'in', 'Africa', '?']}\" \n}"}
{"question": "What are the country codes for countries that do not speak English?", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the country codes for countries that do not speak English?\",\n\"question_toks\": \"['What', 'are', 'the', 'country', 'codes', 'for', 'countries', 'that', 'do', 'not', 'speak', 'English', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT DISTINCT country.Code FROM country WHERE country.Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')\",\n  \"query_toks\": [\n    \"SELECT\", \"DISTINCT\", \"country\", \".\", \"Code\", \"FROM\", \"country\", \"WHERE\", \"country\", \".\", \"Code\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"CountryCode\", \"FROM\", \"countrylanguage\", \"WHERE\", \"Language\", \"=\", \"'\", \"English\", \"'\", \")\", \";\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\", \"DISTINCT\", \"country\", \".\", \"Code\", \"FROM\", \"country\", \"WHERE\", \"country\", \".\", \"Code\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"CountryCode\", \"FROM\", \"countrylanguage\", \"WHERE\", \"Language\", \"=\", \"'\", \"<value>\", \"'\", \")\", \";\"\n  ],\n  \"question\": \"What are the country codes for countries that do not speak English?\",\n  \"question_toks\": [\n    \"What\", \"are\", \"the\", \"country\", \"codes\", \"for\", \"countries\", \"that\", \"do\", \"not\", \"speak\", \"English\", \"?\"\n  ]\n}"}
{"question": "Return the country codes for countries that do not speak English.", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Return the country codes for countries that do not speak English.\",\n\"question_toks\": \"['Return', 'the', 'country', 'codes', 'for', 'countries', 'that', 'do', 'not', 'speak', 'English', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT DISTINCT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language != 'English'\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'country', '.', 'Code', 'FROM', 'country', 'LEFT', 'JOIN', 'countrylanguage', 'ON', 'country', '.', 'Code', '=', 'countrylanguage', '.', 'CountryCode', 'WHERE', 'Language', '!=', ''English'']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'country', '.', 'Code', 'FROM', 'country', 'LEFT', 'JOIN', 'countrylanguage', 'ON', 'country', '.', 'Code', '=', 'countrylanguage', '.', 'CountryCode', 'WHERE', 'Language', '!=', ''']\",\n\"question\": \"Return the country codes for countries that do not speak English.\",\n\"question_toks\": \"['Return', 'the', 'country', 'codes', 'for', 'countries', 'that', 'do', 'not', 'speak', 'English', '.']\"}"}
{"question": "What are the country codes of countries where people use languages other than English?", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the country codes of countries where people use languages other than English?\",\n\"question_toks\": \"['What', 'are', 'the', 'country', 'codes', 'of', 'countries', 'where', 'people', 'use', 'languages', 'other', 'than', 'English', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT DISTINCT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English'\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'country', '.', 'Code', 'FROM', 'country', 'JOIN', 'countrylanguage', 'ON', 'country', '.', 'Code', '=', 'countrylanguage', '.', 'CountryCode', 'WHERE', 'countrylanguage', '.', 'Language', '<>', '\\\"', 'English', '\\\"']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'country', '.', 'Code', 'FROM', 'country', 'JOIN', 'countrylanguage', 'ON', 'country', '.', 'Code', '=', 'countrylanguage', '.', 'CountryCode', 'WHERE', 'countrylanguage', '.', 'Language', '<>', 'English']\",\n  \"question\": \"What are the country codes of countries where people use languages other than English?\",\n  \"question_toks\": \"['What', 'are', 'the', 'country', 'codes', 'of', 'countries', 'where', 'people', 'use', 'languages', 'other', 'than', 'English', '?']\"\n}"}
{"question": "Give the country codes for countries in which people speak langauges that are not English.", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the country codes for countries in which people speak langauges that are not English.\",\n\"question_toks\": \"['Give', 'the', 'country', 'codes', 'for', 'countries', 'in', 'which', 'people', 'speak', 'langauges', 'that', 'are', 'not', 'English', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT DISTINCT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English'\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"country.\", \"Code\", \"FROM\", \"country\", \"JOIN\", \"countrylanguage\", \"ON\", \"country.\", \"Code\", \"=\", \"countrylanguage.\", \"CountryCode\", \"WHERE\", \"countrylanguage.\", \"Language\", \"<>\", \"'English'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"country.\", \"Code\", \"FROM\", \"country\", \"JOIN\", \"countrylanguage\", \"ON\", \"country.\", \"Code\", \"=\", \"countrylanguage.\", \"CountryCode\", \"WHERE\", \"countrylanguage.\", \"Language\", \"<>\", \"?\"],\n    \"question\": \"Give the country codes for countries in which people speak langauges that are not English.\",\n    \"question_toks\": [\"Give\", \"the\", \"country\", \"codes\", \"for\", \"countries\", \"in\", \"which\", \"people\", \"speak\", \"langauges\", \"that\", \"are\", \"not\", \"English\", \".\"]\n}"}
{"question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the codes of the countries that do not speak English and whose government forms are not Republic?\",\n\"question_toks\": \"['What', 'are', 'the', 'codes', 'of', 'the', 'countries', 'that', 'do', 'not', 'speak', 'English', 'and', 'whose', 'government', 'forms', 'are', 'not', 'Republic', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT Code FROM country WHERE Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language='English' AND cl.IsOfficial='T') AND GovernmentForm <> 'Republic'\",\n    \"query_toks\": [\"SELECT\", \"Code\", \"FROM\", \"country\", \"WHERE\", \"Code\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"cl\", \".\", \"CountryCode\", \"FROM\", \"countrylanguage\", \"cl\", \"WHERE\", \"cl\", \".\", \"Language\", \"=\", \"'English'\", \"AND\", \"cl\", \".\", \"IsOfficial\", \"=\", \"'T'\", \")\", \"AND\", \"GovernmentForm\", \"<>\", \"'Republic'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Code\", \"FROM\", \"country\", \"WHERE\", \"Code\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"cl\", \".\", \"CountryCode\", \"FROM\", \"countrylanguage\", \"cl\", \"WHERE\", \"cl\", \".\", \"Language\", \"=\", \"\", \"AND\", \"cl\", \".\", \"IsOfficial\", \"=\", \"\", \")\", \"AND\", \"GovernmentForm\", \"<>\", \"\"],\n    \"question\": \"What are the codes of the countries that do not speak English and whose government forms are not Republic?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"codes\", \"of\", \"the\", \"countries\", \"that\", \"do\", \"not\", \"speak\", \"English\", \"and\", \"whose\", \"government\", \"forms\", \"are\", \"not\", \"Republic\", \"?\"]\n}"}
{"question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Return the codes of countries that do not speak English and do not have Republics for governments.\",\n\"question_toks\": \"['Return', 'the', 'codes', 'of', 'countries', 'that', 'do', 'not', 'speak', 'English', 'and', 'do', 'not', 'have', 'Republics', 'for', 'governments', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = \\'English\\' AND IsOfficial = \\'T\\') AND GovernmentForm != \\'Republic\\'\",\n  \"query_toks\": \"['SELECT', 'Code', 'FROM', 'country', 'WHERE', 'Code', 'NOT', 'IN', '(', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', '\\\\\\'English\\\\\\'', 'AND', 'IsOfficial', '=', '\\\\\\'T\\\\\\'', ')', 'AND', 'GovernmentForm', '!=', '\\\\\\'Republic\\\\\\'']\",\n  \"query_toks_no_value\": \"['SELECT', 'Code', 'FROM', 'country', 'WHERE', 'Code', 'NOT', 'IN', '(', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', '?', 'AND', 'IsOfficial', '=', '?', ')', 'AND', 'GovernmentForm', '!=', '?']\",\n  \"question\": \"Return the codes of countries that do not speak English and do not have Republics for governments.\",\n  \"question_toks\": \"['Return', 'the', 'codes', 'of', 'countries', 'that', 'do', 'not', 'speak', 'English', 'and', 'do', 'not', 'have', 'Republics', 'for', 'governments', '.']\"\n}"}
{"question": "Which cities are in European countries where English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which cities are in European countries where English is not the official language?\",\n\"question_toks\": \"['Which', 'cities', 'are', 'in', 'European', 'countries', 'where', 'English', 'is', 'not', 'the', 'official', 'language', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT DISTINCT city.Name FROM city INNER JOIN country ON city.CountryCode = country.Code AND country.Continent = 'Europe' AND country.Language != 'English' ORDER BY city.Name ASC\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'city', '.', 'Name', 'FROM', 'city', 'INNER', 'JOIN', 'country', 'ON', 'city', '.', 'CountryCode', '=', 'country', '.', 'Code', 'AND', 'country', '.', 'Continent', '=', ''Europe'', 'AND', 'country', '.', 'Language', '!=', ''English'', 'ORDER', 'BY', 'city', '.', 'Name', 'ASC']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'city', '.', 'Name', 'FROM', 'city', 'INNER', 'JOIN', 'country', 'ON', 'city', '.', 'CountryCode', '=', 'country', '.', 'Code', 'AND', 'country', '.', 'Continent', '=', '', 'AND', 'country', '.', 'Language', '!=', '', 'ORDER', 'BY', 'city', '.', 'Name', 'ASC']\",\n  \"question\": \"Which cities are in European countries where English is not the official language?\",\n  \"question_toks\": \"['Which', 'cities', 'are', 'in', 'European', 'countries', 'where', 'English', 'is', 'not', 'the', 'official', 'language', '?']\"\n}"}
{"question": "What are the names of cities in Europe for which English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the names of cities in Europe for which English is not the official language?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'cities', 'in', 'Europe', 'for', 'which', 'English', 'is', 'not', 'the', 'official', 'language', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent='Europe' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T'))\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'city', 'WHERE', 'CountryCode', 'IN', '(', 'SELECT', 'Code', 'FROM', 'country', 'WHERE', 'Continent', '=', \"'Europe'\", 'AND', 'Code', 'NOT', 'IN', '(', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', \"'English'\", 'AND', 'IsOfficial', '=', \"'T'\", ')', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'city', 'WHERE', 'CountryCode', 'IN', '(', 'SELECT', 'Code', 'FROM', 'country', 'WHERE', 'Continent', '=', '', 'AND', 'Code', 'NOT', 'IN', '(', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', '', 'AND', 'IsOfficial', '=', '', ')', ')']\",\n\"question\": \"What are the names of cities in Europe for which English is not the official language?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'cities', 'in', 'Europe', 'for', 'which', 'English', 'is', 'not', 'the', 'official', 'language', '?']}\" }"}
{"question": "Which unique cities are in Asian countries where Chinese is the official language ?", "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which unique cities are in Asian countries where Chinese is the official language ?\",\n\"question_toks\": \"['Which', 'unique', 'cities', 'are', 'in', 'Asian', 'countries', 'where', 'Chinese', 'is', 'the', 'official', 'language', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT DISTINCT T1.Name FROM countrylanguage AS T2, city AS T1, country AS T3 WHERE T1.CountryCode=T3.Code AND T2.CountryCode=T1.CountryCode AND T3.Continent='Asia' AND T2.IsOfficial='T' AND T2.Language='Chinese';\",\n    \"query_toks\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Name\", \"FROM\", \"countrylanguage\", \"AS\", \"T2\", \",\", \"city\", \"AS\", \"T1\", \",\", \"country\", \"AS\", \"T3\", \"WHERE\", \"T1\", \".\", \"CountryCode\", \"=\", \"T3\", \".\", \"Code\", \"AND\", \"T2\", \".\", \"CountryCode\", \"=\", \"T1\", \".\", \"CountryCode\", \"AND\", \"T3\", \".\", \"Continent\", \"=\", \"'Asia'\", \"AND\", \"T2\", \".\", \"IsOfficial\", \"=\", \"'T'\", \"AND\", \"T2\", \".\", \"Language\", \"=\", \"'Chinese';\"],\n    \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"T1\", \".\", \"Name\", \"FROM\", \"countrylanguage\", \"AS\", \"T2\", \",\", \"city\", \"AS\", \"T1\", \",\", \"country\", \"AS\", \"T3\", \"WHERE\", \"T1\", \".\", \"CountryCode\", \"=\", \"T3\", \".\", \"Code\", \"AND\", \"T2\", \".\", \"CountryCode\", \"=\", \"T1\", \".\", \"CountryCode\", \"AND\", \"T3\", \".\", \"Continent\", \"=\", \"\", \"AND\", \"T2\", \".\", \"IsOfficial\", \"=\", \"\", \"AND\", \"T2\", \".\", \"Language\", \"=\", \"'';\"],\n    \"question\": \"Which unique cities are in Asian countries where Chinese is the official language?\",\n    \"question_toks\": [\"Which\", \"unique\", \"cities\", \"are\", \"in\", \"Asian\", \"countries\", \"where\", \"Chinese\", \"is\", \"the\", \"official\", \"language\", \"?\"]\n}"}
{"question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Return the different names of cities that are in Asia and for which Chinese is the official language.\",\n\"question_toks\": \"['Return', 'the', 'different', 'names', 'of', 'cities', 'that', 'are', 'in', 'Asia', 'and', 'for', 'which', 'Chinese', 'is', 'the', 'official', 'language', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT DISTINCT T1.Name FROM countrylanguage T1, city T2, country T3 WHERE T1.CountryCode=T2.CountryCode AND T2.District=T3.Name AND T3.Continent='Asia' AND T1.Language='Chinese' AND T1.IsOfficial='T'\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'T1', '.', 'Name', 'FROM', 'countrylanguage', 'T1', ',', 'city', 'T2', ',', 'country', 'T3', 'WHERE', 'T1', '.', 'CountryCode', '=', 'T2', '.', 'CountryCode', 'AND', 'T2', '.', 'District', '=', 'T3', '.', 'Name', 'AND', 'T3', '.', 'Continent', '=', \\\"'Asia'\\\"', 'AND', 'T1', '.', 'Language', '=', \\\"'Chinese'\\\"', 'AND', 'T1', '.', 'IsOfficial', '=', \\\"'T'\\\"']\",\n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T1', '.', 'Name', 'FROM', 'countrylanguage', 'T1', ',', 'city', 'T2', ',', 'country', 'T3', 'WHERE', 'T1', '.', 'CountryCode', '=', 'T2', '.', 'CountryCode', 'AND', 'T2', '.', 'District', '=', 'T3', '.', 'Name', 'AND', 'T3', '.', 'Continent', '=', 'Asia', 'AND', 'T1', '.', 'Language', '=', 'Chinese', 'AND', 'T1', '.', 'IsOfficial', '=', 'T']\",\n \"question\": \"Return the different names of cities that are in Asia and for which Chinese is the official language.\",\n \"question_toks\": \"['Return', 'the', 'different', 'names', 'of', 'cities', 'that', 'are', 'in', 'Asia', 'and', 'for', 'which', 'Chinese', 'is', 'the', 'official', 'language', '.']\"}"}
{"question": "What are the name, independence year, and surface area of the country with the smallest population?", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the name, independence year, and surface area of the country with the smallest population?\",\n\"question_toks\": \"['What', 'are', 'the', 'name', ',', 'independence', 'year', ',', 'and', 'surface', 'area', 'of', 'the', 'country', 'with', 'the', 'smallest', 'population', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population=(SELECT MIN(Population) FROM country)\",\n\"query_toks\": [\"SELECT\", \"Name\", \",\", \"IndepYear\", \",\", \"SurfaceArea\", \"FROM\", \"country\", \"WHERE\", \"Population\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \")\"],\n\"query_toks_no_value\": [\"SELECT\", \"Name\", \",\", \"IndepYear\", \",\", \"SurfaceArea\", \"FROM\", \"country\", \"WHERE\", \"Population\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \")\"],\n\"question\": \"What are the name, independence year, and surface area of the country with the smallest population?\",\n\"question_toks\": [\"What\", \"are\", \"the\", \"name\", \",\", \"independence\", \"year\", \",\", \"and\", \"surface\", \"area\", \"of\", \"the\", \"country\", \"with\", \"the\", \"smallest\", \"population\", \"?\"]}\n"}
{"question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the name, year of independence, and surface area of the country that has the lowest population.\",\n\"question_toks\": \"['Give', 'the', 'name', ',', 'year', 'of', 'independence', ',', 'and', 'surface', 'area', 'of', 'the', 'country', 'that', 'has', 'the', 'lowest', 'population', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)\",\n  \"query_toks\": [\"SELECT\", \"Name\", \",\", \"IndepYear\", \",\", \"SurfaceArea\", \"FROM\", \"country\", \"WHERE\", \"Population\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Name\", \",\", \"IndepYear\", \",\", \"SurfaceArea\", \"FROM\", \"country\", \"WHERE\", \"Population\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \")\"],\n  \"question\": \"Give the name, year of independence, and surface area of the country that has the lowest population.\",\n  \"question_toks\": [\"Give\", \"the\", \"name\", \",\", \"year\", \"of\", \"independence\", \",\", \"and\", \"surface\", \"area\", \"of\", \"the\", \"country\", \"that\", \"has\", \"the\", \"lowest\", \"population\", \".\"]\n}"}
{"question": "What are the population, name and leader of the country with the largest area?", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the population, name and leader of the country with the largest area?\",\n\"question_toks\": \"['What', 'are', 'the', 'population', ',', 'name', 'and', 'leader', 'of', 'the', 'country', 'with', 'the', 'largest', 'area', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'country', '.', 'Name', ',', 'country', '.', 'Population', ',', 'country', '.', 'HeadOfState', 'FROM', 'country', 'ORDER', 'BY', 'country', '.', 'SurfaceArea', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'country', '.', 'Name', ',', 'country', '.', 'Population', ',', 'country', '.', 'HeadOfState', 'FROM', 'country', 'ORDER', 'BY', 'country', '.', 'SurfaceArea', 'DESC', 'LIMIT', 'number']\",\n\"question\": \"What are the population, name and leader of the country with the largest area?\",\n\"question_toks\": \"['What', 'are', 'the', 'population', ',', 'name', 'and', 'leader', 'of', 'the', 'country', 'with', 'the', 'largest', 'area', '?']\"}"}
{"question": "Give the name, population, and head of state for the country that has the largest area.", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the name, population, and head of state for the country that has the largest area.\",\n\"question_toks\": \"['Give', 'the', 'name', ',', 'population', ',', 'and', 'head', 'of', 'state', 'for', 'the', 'country', 'that', 'has', 'the', 'largest', 'area', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1;\",\n    \"query_toks\": [\"SELECT\", \"country\", \".\", \"Name\", \",\", \"country\", \".\", \"Population\", \",\", \"country\", \".\", \"HeadOfState\", \"FROM\", \"country\", \"ORDER\", \"BY\", \"country\", \".\", \"SurfaceArea\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"country\", \".\", \"Name\", \",\", \"country\", \".\", \"Population\", \",\", \"country\", \".\", \"HeadOfState\", \"FROM\", \"country\", \"ORDER\", \"BY\", \"country\", \".\", \"SurfaceArea\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"question\": \"Give the name, population, and head of state for the country that has the largest area.\",\n    \"question_toks\": [\"Give\", \"the\", \"name\", \",\", \"population\", \",\", \"and\", \"head\", \"of\", \"state\", \"for\", \"the\", \"country\", \"that\", \"has\", \"the\", \"largest\", \"area\", \".\"]\n}"}
{"question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.\",\n\"question_toks\": \"['Return', 'the', 'country', 'name', 'and', 'the', 'numbers', 'of', 'languages', 'spoken', 'for', 'each', 'country', 'that', 'speaks', 'at', 'least', '3', 'languages', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Country.Name, COUNT(countrylanguage.Language) AS language_count FROM Country JOIN countrylanguage ON Country.Code = countrylanguage.CountryCode GROUP BY Country.Name HAVING language_count >= 3;\",\n \"query_toks\": \"['SELECT', 'Country', '.', 'Name', ',', 'COUNT', '(', 'countrylanguage', '.', 'Language', ')', 'AS', 'language_count', 'FROM', 'Country', 'JOIN', 'countrylanguage', 'ON', 'Country', '.', 'Code', '=', 'countrylanguage', '.', 'CountryCode', 'GROUP', 'BY', 'Country', '.', 'Name', 'HAVING', 'language_count', '>=', '3', ';']\",\n \"query_toks_no_value\": \"['SELECT', 'Country', '.', 'Name', ',', 'COUNT', '(', 'countrylanguage', '.', 'Language', ')', 'AS', 'language_count', 'FROM', 'Country', 'JOIN', 'countrylanguage', 'ON', 'Country', '.', 'Code', '=', 'countrylanguage', '.', 'CountryCode', 'GROUP', 'BY', 'Country', '.', 'Name', 'HAVING', 'language_count', '>=', '<value>', ';']\",\n \"question\": \"Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.\",\n \"question_toks\": \"['Return', 'the', 'country', 'name', 'and', 'the', 'numbers', 'of', 'languages', 'spoken', 'for', 'each', 'country', 'that', 'speaks', 'at', 'least', '3', 'languages', '.']}\"\n"}
{"question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'countries', 'that', 'speak', 'more', 'than', '2', 'languages', ',', 'as', 'well', 'as', 'how', 'many', 'languages', 'they', 'speak', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT country.Name, COUNT(countrylanguage.Language) AS num_languages\\nFROM country\\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\\nGROUP BY country.Name\\nHAVING COUNT(countrylanguage.Language) > 2\",\n    \"query_toks\": \"['SELECT', 'country.Name', ',', 'COUNT', '(', 'countrylanguage.Language', ')', 'AS', 'num_languages', 'FROM', 'country', 'JOIN', 'countrylanguage', 'ON', 'country.Code', '=', 'countrylanguage.CountryCode', 'GROUP', 'BY', 'country.Name', 'HAVING', 'COUNT', '(', 'countrylanguage.Language', ')', '>', '2']\",\n    \"query_toks_no_value\": \"['SELECT', 'country', '.', 'Name', ',', 'COUNT', '(', 'countrylanguage', '.', 'Language', ')', 'AS', 'num_languages', 'FROM', 'country', 'JOIN', 'countrylanguage', 'ON', 'country', '.', 'Code', '=', 'countrylanguage', '.', 'CountryCode', 'GROUP', 'BY', 'country', '.', 'Name', 'HAVING', 'COUNT', '(', 'countrylanguage', '.', 'Language', ')', '>', '2']\",\n    \"question\": \"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'countries', 'that', 'speak', 'more', 'than', '2', 'languages', ',', 'as', 'well', 'as', 'how', 'many', 'languages', 'they', 'speak', '?']\"\n}"}
{"question": "Find the number of cities in each district whose population is greater than the average population of cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Find the number of cities in each district whose population is greater than the average population of cities?\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'cities', 'in', 'each', 'district', 'whose', 'population', 'is', 'greater', 'than', 'the', 'average', 'population', 'of', 'cities', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT District, COUNT(*) FROM City WHERE Population > (SELECT AVG(Population) FROM City) GROUP BY District\",\n  \"query_toks\": [\"SELECT\", \"District\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"City\", \"WHERE\", \"Population\", \">\", \"(\", \"SELECT\", \"AVG\", \"(\", \"Population\", \")\", \"FROM\", \"City\", \")\", \"GROUP\", \"BY\", \"District\"],\n  \"query_toks_no_value\": [\"SELECT\", \"District\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"City\", \"WHERE\", \"Population\", \">\", \"(\", \"SELECT\", \"AVG\", \"(\", \"Population\", \")\", \"FROM\", \"City\", \")\", \"GROUP\", \"BY\", \"District\"],\n  \"question\": \"Find the number of cities in each district whose population is greater than the average population of cities?\",\n  \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"cities\", \"in\", \"each\", \"district\", \"whose\", \"population\", \"is\", \"greater\", \"than\", \"the\", \"average\", \"population\", \"of\", \"cities\", \"?\"]\n}"}
{"question": "How many cities in each district have a population that is above the average population across all cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"How many cities in each district have a population that is above the average population across all cities?\",\n\"question_toks\": \"['How', 'many', 'cities', 'in', 'each', 'district', 'have', 'a', 'population', 'that', 'is', 'above', 'the', 'average', 'population', 'across', 'all', 'cities', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT District, COUNT(Name) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District\",\n \"query_toks\": \"['SELECT', 'District', ',', 'COUNT', '(', 'Name', ')', 'FROM', 'city', 'WHERE', 'Population', '>', '(', 'SELECT', 'AVG', '(', 'Population', ')', 'FROM', 'city', ')', 'GROUP', 'BY', 'District']\",\n \"query_toks_no_value\": \"['SELECT', 'District', ',', 'COUNT', '(', 'Name', ')', 'FROM', 'city', 'WHERE', 'Population', '>', '(', 'SELECT', 'AVG', '(', 'Population', ')', 'FROM', 'city', ')', 'GROUP', 'BY', 'District']\",\n \"question\": \"How many cities in each district have a population that is above the average population across all cities?\",\n \"question_toks\": \"['How', 'many', 'cities', 'in', 'each', 'district', 'have', 'a', 'population', 'that', 'is', 'above', 'the', 'average', 'population', 'across', 'all', 'cities', '?']}\""}
{"question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Find the government form name and total population for each government form whose average life expectancy is longer than 72.\",\n\"question_toks\": \"['Find', 'the', 'government', 'form', 'name', 'and', 'total', 'population', 'for', 'each', 'government', 'form', 'whose', 'average', 'life', 'expectancy', 'is', 'longer', 'than', '72', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm\",\n    \"query_toks\": [\"SELECT\", \"GovernmentForm\", \",\", \"SUM\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \"WHERE\", \"LifeExpectancy\", \">\", \"72\", \"GROUP\", \"BY\", \"GovernmentForm\"],\n    \"query_toks_no_value\": [\"SELECT\", \"GovernmentForm\", \",\", \"SUM\", \"(\", \"Population\", \")\", \"FROM\", \"country\", \"WHERE\", \"LifeExpectancy\", \">\", \"72\", \"GROUP\", \"BY\", \"GovernmentForm\"],\n    \"question\": \"Find the government form name and total population for each government form whose average life expectancy is longer than 72.\",\n    \"question_toks\": [\"Find\", \"the\", \"government\", \"form\", \"name\", \"and\", \"total\", \"population\", \"for\", \"each\", \"government\", \"form\", \"whose\", \"average\", \"life\", \"expectancy\", \"is\", \"longer\", \"than\", \"72\", \".\"]\n}"}
{"question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'government', 'forms', 'and', 'what', 'is', 'the', 'total', 'population', 'of', 'each', 'for', 'government', 'forms', 'that', 'have', 'an', 'average', 'life', 'expectancy', 'greater', 'than', '72', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm\",\n\"query_toks\": \"['SELECT', 'GovernmentForm', ',', 'SUM', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'LifeExpectancy', '>', '72', 'GROUP', 'BY', 'GovernmentForm']\",\n\"query_toks_no_value\": \"['SELECT', 'GovernmentForm', ',', 'SUM', '(', ')', 'FROM', 'country', 'WHERE', 'LifeExpectancy', '>', '72', 'GROUP', 'BY', 'GovernmentForm']\",\n\"question\": \"What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'government', 'forms', 'and', 'what', 'is', 'the', 'total', 'population', 'of', 'each', 'for', 'government', 'forms', 'that', 'have', 'an', 'average', 'life', 'expectancy', 'greater', 'than', '72', '?']}\" }"}
{"question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?\",\n\"question_toks\": \"['Find', 'the', 'average', 'life', 'expectancy', 'and', 'total', 'population', 'for', 'each', 'continent', 'where', 'the', 'average', 'life', 'expectancy', 'is', 'shorter', 'than', '72', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT continent, AVG(lifeexpectancy), SUM(population) FROM country WHERE AVG(lifeexpectancy) < 72 GROUP BY continent\",\n\"query_toks\": \"['SELECT', 'continent', ',', 'AVG', '(', 'lifeexpectancy', ')', ',', 'SUM', '(', 'population', ')', 'FROM', 'country', 'WHERE', 'AVG', '(', 'lifeexpectancy', ')', '<', '72', 'GROUP', 'BY', 'continent']\",\n\"query_toks_no_value\": \"['SELECT', 'continent', ',', 'AVG', '(', ')', ',', 'SUM', '(', ')', 'FROM', 'country', 'WHERE', 'AVG', '(', ')', '<', '72', 'GROUP', 'BY', 'continent']\",\n\"question\": \"Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?\",\n\"question_toks\": \"['Find', 'the', 'average', 'life', 'expectancy', 'and', 'total', 'population', 'for', 'each', 'continent', 'where', 'the', 'average', 'life', 'expectancy', 'is', 'shorter', 'than', '72', '?']}\""}
{"question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'continents', 'and', 'the', 'total', 'popuation', 'and', 'average', 'life', 'expectancy', 'corresponding', 'to', 'each', ',', 'for', 'continents', 'that', 'have', 'an', 'average', 'life', 'expectancy', 'less', 'than', '72', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT country.Continent AS Continent, SUM(country.Population) AS Total_Population, AVG(country.LifeExpectancy) AS Avg_Life_Expectancy FROM country WHERE country.LifeExpectancy<72 GROUP BY country.Continent\",\n\"query_toks\": \"['SELECT', 'country', '.', 'Continent', 'AS', 'Continent', ',', 'SUM', '(', 'country', '.', 'Population', ')', 'AS', 'Total_Population', ',', 'AVG', '(', 'country', '.', 'LifeExpectancy', ')', 'AS', 'Avg_Life_Expectancy', 'FROM', 'country', 'WHERE', 'country', '.', 'LifeExpectancy', '<', '72', 'GROUP', 'BY', 'country', '.', 'Continent']\",\n\"query_toks_no_value\": \"['SELECT', 'country', '.', 'Continent', 'AS', 'Continent', ',', 'SUM', '(', 'country', '.', 'Population', ')', 'AS', 'Total_Population', ',', 'AVG', '(', 'country', '.', 'LifeExpectancy', ')', 'AS', 'Avg_Life_Expectancy', 'FROM', 'country', 'WHERE', 'country', '.', 'LifeExpectancy', '<', '?', 'GROUP', 'BY', 'country', '.', 'Continent']\",\n\"question\": \"What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?\",\n\"question_toks\": \"['What', 'are', 'the', 'different', 'continents', 'and', 'the', 'total', 'popuation', 'and', 'average', 'life', 'expectancy', 'corresponding', 'to', 'each', ',', 'for', 'continents', 'that', 'have', 'an', 'average', 'life', 'expectancy', 'less', 'than', '72', '?']}\""}
{"question": "What are the names and areas of countries with the top 5 largest area?", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the names and areas of countries with the top 5 largest area?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'areas', 'of', 'countries', 'with', 'the', 'top', '5', 'largest', 'area', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5\",\n \"query_toks\": [\"SELECT\", \"Name\", \",\", \"SurfaceArea\", \"FROM\", \"country\", \"ORDER\", \"BY\", \"SurfaceArea\", \"DESC\", \"LIMIT\", \"5\"],\n \"query_toks_no_value\": [\"SELECT\", \"Name\", \",\", \"SurfaceArea\", \"FROM\", \"country\", \"ORDER\", \"BY\", \"SurfaceArea\", \"DESC\", \"LIMIT\", \"number\"],\n \"question\": \"What are the names and areas of countries with the top 5 largest area?\",\n \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"and\", \"areas\", \"of\", \"countries\", \"with\", \"the\", \"top\", \"5\", \"largest\", \"area\", \"?\"]\n }"}
{"question": "Return the names and surface areas of the 5 largest countries.", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Return the names and surface areas of the 5 largest countries.\",\n\"question_toks\": \"['Return', 'the', 'names', 'and', 'surface', 'areas', 'of', 'the', '5', 'largest', 'countries', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;\",\n\"query_toks\": \"['SELECT', 'Name', ',', 'SurfaceArea', 'FROM', 'country', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '5', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', ',', 'SurfaceArea', 'FROM', 'country', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '5', ';']\",\n\"question\": \"Return the names and surface areas of the 5 largest countries.\",\n\"question_toks\": \"['Return', 'the', 'names', 'and', 'surface', 'areas', 'of', 'the', '5', 'largest', 'countries', '.']\"}"}
{"question": "What are names of countries with the top 3 largest population?", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are names of countries with the top 3 largest population?\",\n\"question_toks\": \"['What', 'are', 'names', 'of', 'countries', 'with', 'the', 'top', '3', 'largest', 'population', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Name FROM country ORDER BY Population DESC LIMIT 3\",\n\"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"country\", \"ORDER\", \"BY\", \"Population\", \"DESC\", \"LIMIT\", \"3\"],\n\"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"country\", \"ORDER\", \"BY\", \"Population\", \"DESC\", \"LIMIT\"],\n\"question\": \"What are names of countries with the top 3 largest population?\",\n\"question_toks\": [\"What\", \"are\", \"names\", \"of\", \"countries\", \"with\", \"the\", \"top\", \"3\", \"largest\", \"population\", \"?\"]\n}"}
{"question": "Return the names of the 3 most populated countries.", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Return the names of the 3 most populated countries.\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'the', '3', 'most', 'populated', 'countries', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Name FROM country ORDER BY Population DESC LIMIT 3\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'DESC', 'LIMIT', '3']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'DESC', 'LIMIT', 'number']\",\n\"question\": \"Return the names of the 3 most populated countries.\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'the', '3', 'most', 'populated', 'countries', '.']\"}"}
{"question": "What are the names of the nations with the 3 lowest populations?", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the names of the nations with the 3 lowest populations?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'nations', 'with', 'the', '3', 'lowest', 'populations', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Name FROM (SELECT * FROM country ORDER BY Population LIMIT 3) AS T1\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', '(', 'SELECT', '*', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'LIMIT', '3', ')', 'AS', 'T1']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', '(', 'SELECT', '*', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'LIMIT', 'NUMBER', ')', 'AS', 'T1']\",\n\"question\": \"What are the names of the nations with the 3 lowest populations?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'nations', 'with', 'the', '3', 'lowest', 'populations', '?']\"}"}
{"question": "Return the names of the 3 countries with the fewest people.", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Return the names of the 3 countries with the fewest people.\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'the', '3', 'countries', 'with', 'the', 'fewest', 'people', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "Sorry, I cannot complete the JSON as there is no information given about the database schema and the contents of the tables. Can you please provide me with more information or context?"}
{"question": "how many countries are in Asia?", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"how many countries are in Asia?\",\n\"question_toks\": \"['how', 'many', 'countries', 'are', 'in', 'Asia', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT COUNT(*) FROM country WHERE Continent='Asia'\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"country\", \"WHERE\", \"Continent\", \"=\", \"'\", \"Asia\", \"'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"country\", \"WHERE\", \"Continent\", \"=\"],\n  \"question\": \"how many countries are in Asia?\",\n  \"question_toks\": [\"how\", \"many\", \"countries\", \"are\", \"in\", \"Asia\", \"?\"]\n}"}
{"question": "Count the number of countries in Asia.", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Count the number of countries in Asia.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'countries', 'in', 'Asia', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"world_1\",\n    \"query\": \"SELECT COUNT(*) FROM country WHERE continent='Asia'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"country\", \"WHERE\", \"continent\", \"=\", \"'Asia'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"country\", \"WHERE\", \"continent\", \"=\"],\n    \"question\": \"Count the number of countries in Asia.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"countries\", \"in\", \"Asia\", \".\"]\n}"}
{"question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the names of the countries that are in the continent of Europe and have a population of 80000?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'countries', 'that', 'are', 'in', 'the', 'continent', 'of', 'Europe', 'and', 'have', 'a', 'population', 'of', '80000', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000\",\n \"query_toks\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Continent', '=', \\\"'Europe'\\\", 'AND', 'Population', '=', '80000']\",\n \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Continent', '=', '', 'AND', 'Population', '=', '']\",\n \"question\": \"What are the names of the countries that are in the continent of Europe and have a population of 80000?\",\n \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'countries', 'that', 'are', 'in', 'the', 'continent', 'of', 'Europe', 'and', 'have', 'a', 'population', 'of', '80000', '?']\"}"}
{"question": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the names of countries that are in Europe and have a population equal to 80000.\",\n\"question_toks\": \"['Give', 'the', 'names', 'of', 'countries', 'that', 'are', 'in', 'Europe', 'and', 'have', 'a', 'population', 'equal', 'to', '80000', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Name FROM country WHERE Population = 80000 AND Continent = 'Europe'\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Population', '=', '80000', 'AND', 'Continent', '=', \\\"'Europe'\\\"', '']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Population', '=', '<num>', 'AND', 'Continent', '=', '<str>', '']\",\n\"question\": \"Give the names of countries that are in Europe and have a population equal to 80000.\",\n\"question_toks\": \"['Give', 'the', 'names', 'of', 'countries', 'that', 'are', 'in', 'Europe', 'and', 'have', 'a', 'population', 'equal', 'to', '80000', '.']\"}"}
{"question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'population', 'and', 'average', 'area', 'of', 'countries', 'in', 'the', 'continent', 'of', 'North', 'America', 'whose', 'area', 'is', 'bigger', 'than', '3000', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT SUM(Population) as Population_Total, AVG(SurfaceArea) as Average_Area FROM country WHERE Continent='North America' AND SurfaceArea>3000;\",\n\"query_toks\": \"['SELECT', 'SUM', '(', 'Population', ')', 'as', 'Population_Total', ',', 'AVG', '(', 'SurfaceArea', ')', 'as', 'Average_Area', 'FROM', 'country', 'WHERE', 'Continent', '=', ''North', 'America'', 'AND', 'SurfaceArea', '>', '3000', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'SUM', '(', ')', 'as', 'Population_Total', ',', 'AVG', '(', ')', 'as', 'Average_Area', 'FROM', 'country', 'WHERE', 'Continent', '=', '', 'AND', 'SurfaceArea', '>', '']\",\n\"question\": \"What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'population', 'and', 'average', 'area', 'of', 'countries', 'in', 'the', 'continent', 'of', 'North', 'America', 'whose', 'area', 'is', 'bigger', 'than', '3000', '?']\"}"}
{"question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .\",\n\"question_toks\": \"['Give', 'the', 'total', 'population', 'and', 'average', 'surface', 'area', 'corresponding', 'to', 'countries', 'in', 'North', 'America', 'that', 'have', 'a', 'surface', 'area', 'greater', 'than', '3000', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT SUM(c1.Population), AVG(c1.SurfaceArea) FROM country c1 WHERE c1.Continent = 'North America' AND c1.SurfaceArea > 3000\",\n\"query_toks\": \"SELECT SUM ( c1 . Population ) , AVG ( c1 . SurfaceArea ) FROM country c1 WHERE c1 . Continent = 'North America' AND c1 . SurfaceArea > 3000\",\n\"query_toks_no_value\": \"SELECT SUM, AVG FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000\",\n\"question\": \"Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .\",\n\"question_toks\": \"['Give', 'the', 'total', 'population', 'and', 'average', 'surface', 'area', 'corresponding', 'to', 'countries', 'in', 'North', 'America', 'that', 'have', 'a', 'surface', 'area', 'greater', 'than', '3000', '.']}\""}
{"question": "What are the cities whose population is between 160000 and 900000?", "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the cities whose population is between 160000 and 900000?\",\n\"question_toks\": \"['What', 'are', 'the', 'cities', 'whose', 'population', 'is', 'between', '160000', 'and', '900000', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000\",\n \"query_toks\": \"['SELECT', 'Name', 'FROM', 'city', 'WHERE', 'Population', 'BETWEEN', '160000', 'AND', '900000']\",\n \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'city', 'WHERE', 'Population', 'BETWEEN', '?', 'AND', '?']\",\n \"question\": \"What are the cities whose population is between 160000 and 900000?\",\n \"question_toks\": \"['What', 'are', 'the', 'cities', 'whose', 'population', 'is', 'between', '160000', 'and', '900000', '?']\"\n}"}
{"question": "Return the names of cities that have a population between 160000 and 900000 .", "sql": "select name from city where population between 160000 and 900000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Return the names of cities that have a population between 160000 and 900000 .\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'cities', 'that', 'have', 'a', 'population', 'between', '160000', 'and', '900000', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'city', 'WHERE', 'Population', 'BETWEEN', '160000', 'AND', '900000', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'city', 'WHERE', 'Population', 'BETWEEN', '<num>', 'AND', '<num>', ';']\",\n\"question\": \"Return the names of cities that have a population between 160000 and 900000 .\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'cities', 'that', 'have', 'a', 'population', 'between', '160000', 'and', '900000', '.']\"}"}
{"question": "Which language is spoken by the largest number of countries?", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Which language is spoken by the largest number of countries?\",\n\"question_toks\": \"['Which', 'language', 'is', 'spoken', 'by', 'the', 'largest', 'number', 'of', 'countries', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT DISTINCT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'DISTINCT', 'Language', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'Language', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Language', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'Language', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n \"question\": \"Which language is spoken by the largest number of countries?\",\n \"question_toks\": \"['Which', 'language', 'is', 'spoken', 'by', 'the', 'largest', 'number', 'of', 'countries', '?']\"}"}
{"question": "Give the language that is spoken in the most countries.", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Give the language that is spoken in the most countries.\",\n\"question_toks\": \"['Give', 'the', 'language', 'that', 'is', 'spoken', 'in', 'the', 'most', 'countries', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;\",\n\"query_toks\": \"['SELECT', 'Language', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'Language', 'ORDER', 'BY', 'COUNT', '(', 'DISTINCT', 'CountryCode', ')', 'DESC', 'LIMIT', '1', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'Language', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'Language', 'ORDER', 'BY', 'COUNT', '(', 'DISTINCT', 'CountryCode', ')', 'DESC', 'LIMIT', '1', ';']\",\n\"question\": \"Give the language that is spoken in the most countries.\",\n\"question_toks\": \"['Give', 'the', 'language', 'that', 'is', 'spoken', 'in', 'the', 'most', 'countries', '.']}\""}
{"question": "What is the language spoken by the largest percentage of people in each country?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the language spoken by the largest percentage of people in each country?\",\n\"question_toks\": \"['What', 'is', 'the', 'language', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', 'in', 'each', 'country', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT cl.CountryCode, cl.Language FROM countrylanguage cl WHERE cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl.CountryCode = cl2.CountryCode) ORDER BY cl.CountryCode ASC\",\n\"query_toks\": \"['SELECT', 'cl.CountryCode', ',', 'cl.Language', 'FROM', 'countrylanguage', 'AS', 'cl', 'WHERE', 'cl.Percentage', '=', '(', 'SELECT', 'MAX', '(', 'cl2.Percentage', ')', 'FROM', 'countrylanguage', 'AS', 'cl2', 'WHERE', 'cl.CountryCode', '=', 'cl2.CountryCode', ')', 'ORDER', 'BY', 'cl.CountryCode', 'ASC']\",\n\"query_toks_no_value\": \"['SELECT', 'cl.CountryCode', ',', 'cl.Language', 'FROM', 'countrylanguage', 'AS', 'cl', 'WHERE', 'cl.Percentage', '=', '(', 'SELECT', 'MAX', '(', 'cl2.Percentage', ')', 'FROM', 'countrylanguage', 'AS', 'cl2', 'WHERE', 'cl.CountryCode', '=', 'cl2.CountryCode', ')', 'ORDER', 'BY', 'cl.CountryCode', 'ASC']\",\n\"question\": \"What is the language spoken by the largest percentage of people in each country?\",\n\"question_toks\": \"['What', 'is', 'the', 'language', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', 'in', 'each', 'country', '?']\"}"}
{"question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?\",\n\"question_toks\": \"['What', 'are', 'the', 'country', 'codes', 'of', 'the', 'different', 'countries', ',', 'and', 'what', 'are', 'the', 'languages', 'spoken', 'by', 'the', 'greatest', 'percentage', 'of', 'people', 'for', 'each', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT country.Code, countrylanguage.Language FROM country JOIN (SELECT CountryCode, Language, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode) AS T1 ON T1.CountryCode = country.Code JOIN countrylanguage ON T1.CountryCode = countrylanguage.CountryCode AND T1.Language = countrylanguage.Language AND T1.MaxPercentage = countrylanguage.Percentage;\",\n \"query_toks\": \"['SELECT', 'country', '.', 'Code', ',', 'countrylanguage', '.', 'Language', 'FROM', 'country', 'JOIN', '(', 'SELECT', 'CountryCode', ',', 'Language', ',', 'MAX', '(', 'Percentage', ')', 'AS', 'MaxPercentage', 'FROM', 'countrylang... 'Percentage', '=', 'countrylanguage', '.', 'Percentage', ';']\",\n \"query_toks_no_value\": \"['SELECT', 'country', '.', 'Code', ',', 'countrylanguage', '.', 'Language', 'FROM', 'country', 'JOIN', '(', 'SELECT', 'CountryCode', ',', 'Language', ',', 'MAX', '(', 'Percentage', ')', 'AS', 'MaxPercentage', 'FROM', 'country...Percentage', '=', 'countrylanguage', '.', 'Percentage', ';']\",\n \"question\": \"What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?\",\n \"question_toks\": \"['What', 'are', 'the', 'country', 'codes', 'of', 'the', 'different', 'countries', ',', 'and', 'what', 'are', 'the', 'languages', 'spoken', 'by', 'the', 'greatest', 'percentage', 'of', 'people', 'for', 'each', '?']\"\n}"}
{"question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What is the total number of countries where Spanish is spoken by the largest percentage of people?\",\n\"question_toks\": \"['What', 'is', 'the', 'total', 'number', 'of', 'countries', 'where', 'Spanish', 'is', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"world_1\",\n  \"query\": \"SELECT COUNT(*) FROM countrylanguage CL INNER JOIN (SELECT CountryCode, MAX(Percentage) AS max_percentage FROM countrylanguage WHERE Language = 'Spanish' GROUP BY Language) AS subquery ON CL.CountryCode = subquery.CountryCode AND CL.Percentage = subquery.max_percentage\",\n  \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'countrylanguage', 'CL', 'INNER', 'JOIN', '(', 'SELECT', 'CountryCode', ',', 'MAX', '(', 'Percentage', ')', 'AS', 'max_percentage', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', ''Spanish'', 'GROUP', 'BY', 'Language', ')', 'AS', 'subquery', 'ON', 'CL', '.', 'CountryCode', '=', 'subquery', '.', 'CountryCode', 'AND', 'CL', '.', 'Percentage', '=', 'subquery', '.', 'max_percentage']\",\n  \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'countrylanguage', 'CL', 'INNER', 'JOIN', '(', 'SELECT', 'CountryCode', ',', 'MAX', '(', 'Percentage', ')', 'AS', 'max_percentage', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', '', 'GROUP', 'BY', 'Language', ')', 'AS', 'subquery', 'ON', 'CL', '.', 'CountryCode', '=', 'subquery', '.', 'CountryCode', 'AND', 'CL', '.', 'Percentage', '=', 'subquery', '.', 'max_percentage']\",\n  \"question\": \"What is the total number of countries where Spanish is spoken by the largest percentage of people?\",\n  \"question_toks\": \"['What', 'is', 'the', 'total', 'number', 'of', 'countries', 'where', 'Spanish', 'is', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', '?']\"\n}"}
{"question": "Count the number of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Count the number of countries for which Spanish is the predominantly spoken language.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'countries', 'for', 'which', 'Spanish', 'is', 'the', 'predominantly', 'spoken', 'language', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT COUNT(CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', 'CountryCode', ')', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', ''Spanish'', 'AND', 'IsOfficial', '=', ''T''', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'CountryCode', ')', 'FROM', 'countrylanguage', 'WHERE', 'Language', '=', '', 'AND', 'IsOfficial', '=', '', ';']\",\n\"question\": \"Count the number of countries for which Spanish is the predominantly spoken language.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'countries', 'for', 'which', 'Spanish', 'is', 'the', 'predominantly', 'spoken', 'language', '.']}\""}
{"question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"What are the codes of countries where Spanish is spoken by the largest percentage of people?\",\n\"question_toks\": \"['What', 'are', 'the', 'codes', 'of', 'countries', 'where', 'Spanish', 'is', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n\"query\": \"SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage=(SELECT MAX(cl1.Percentage) FROM countrylanguage cl1 WHERE cl1.Language = 'Spanish')\",\n\"query_toks\": \"['SELECT', 'cl', '.', 'CountryCode', 'FROM', 'countrylanguage', 'cl', 'WHERE', 'cl', '.', 'Language', '=', \\\"'Spanish'\\\"', 'AND', 'cl', '.', 'Percentage', '=', '(', 'SELECT', 'MAX', '(', 'cl1', '.', 'Percentage', ')', 'FROM', 'countrylanguage', 'cl1', 'WHERE', 'cl1', '.', 'Language', '=', \\\"'Spanish'\\\"', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'cl', '.', 'CountryCode', 'FROM', 'countrylanguage', 'cl', 'WHERE', 'cl', '.', 'Language', '=', '', 'AND', 'cl', '.', 'Percentage', '=', '(', 'SELECT', 'MAX', '(', 'cl1', '.', 'Percentage', ')', 'FROM', 'countrylanguage', 'cl1', 'WHERE', 'cl1', '.', 'Language', '=', '', ')']\",\n\"question\": \"What are the codes of countries where Spanish is spoken by the largest percentage of people?\",\n\"question_toks\": \"['What', 'are', 'the', 'codes', 'of', 'countries', 'where', 'Spanish', 'is', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', '?']}\""}
{"question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\ncity: 'ID', 'Name', 'CountryCode', 'District', 'Population'\nsqlite_sequence: 'name', 'seq'\ncountry: 'Code', 'Name', 'Continent', 'Region', 'SurfaceArea', 'IndepYear', 'Population', 'LifeExpectancy', 'GNP', 'GNPOld', 'LocalName', 'GovernmentForm', 'HeadOfState', 'Capital', 'Code2'\ncountrylanguage: 'CountryCode', 'Language', 'IsOfficial', 'Percentage'\n\n{\"db_id\": \"world_1\",\n\"question\": \"Return the codes of countries for which Spanish is the predominantly spoken language.\",\n\"question_toks\": \"['Return', 'the', 'codes', 'of', 'countries', 'for', 'which', 'Spanish', 'is', 'the', 'predominantly', 'spoken', 'language', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"world_1\",\n \"query\": \"SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T'\",\n \"query_toks\": \"['SELECT', 'cl.CountryCode', 'FROM', 'countrylanguage', 'cl', 'WHERE', 'cl.Language', '=', ''Spanish'', 'AND', 'cl.IsOfficial', '=', ''T''']\",\n \"query_toks_no_value\": \"['SELECT', 'cl.CountryCode', 'FROM', 'countrylanguage', 'cl', 'WHERE', 'cl.Language', '=', '', 'AND', 'cl.IsOfficial', '=', '']\",\n \"question\": \"Return the codes of countries for which Spanish is the predominantly spoken language.\",\n \"question_toks\": \"['Return', 'the', 'codes', 'of', 'countries', 'for', 'which', 'Spanish', 'is', 'the', 'predominantly', 'spoken', 'language', '.']\"\n}"}
{"question": "How many conductors are there?", "sql": "SELECT count(*) FROM conductor", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"How many conductors are there?\",\n\"question_toks\": \"['How', 'many', 'conductors', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT COUNT(*) FROM conductor\",\n\"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"conductor\"],\n\"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"conductor\"],\n\"question\": \"How many conductors are there?\",\n\"question_toks\": [\"How\", \"many\", \"conductors\", \"are\", \"there\", \"?\"]}"}
{"question": "Count the number of conductors.", "sql": "SELECT count(*) FROM conductor", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Count the number of conductors.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'conductors', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT COUNT(*) FROM conductor\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"conductor\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"conductor\"],\n    \"question\": \"Count the number of conductors.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"conductors\", \".\"]\n}"}
{"question": "List the names of conductors in ascending order of age.", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"List the names of conductors in ascending order of age.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'conductors', 'in', 'ascending', 'order', 'of', 'age', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"orchestra\",\n  \"query\": \"SELECT Name FROM conductor ORDER BY Age ASC\",\n  \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"conductor\", \"ORDER\", \"BY\", \"Age\", \"ASC\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"conductor\", \"ORDER\", \"BY\", \"Age\"],\n  \"question\": \"List the names of conductors in ascending order of age.\",\n  \"question_toks\": [\"List\", \"the\", \"names\", \"of\", \"conductors\", \"in\", \"ascending\", \"order\", \"of\", \"age\", \".\"]\n}"}
{"question": "What are the names of conductors, ordered by age?", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the names of conductors, ordered by age?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', ',', 'ordered', 'by', 'age', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT Name FROM conductor ORDER BY Age\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Age']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Age']\",\n\"question\": \"What are the names of conductors, ordered by age?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', ',', 'ordered', 'by', 'age', '?']}\""}
{"question": "What are the names of conductors whose nationalities are not \"USA\"?", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the names of conductors whose nationalities are not \"USA\"?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', 'whose', 'nationalities', 'are', 'not', '``', 'USA', \"''\", '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT Name FROM conductor WHERE Nationality <> 'USA'\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'conductor', 'WHERE', 'Nationality', '<>', '``', 'USA', \"''\"]\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'conductor', 'WHERE', 'Nationality', '<>', '?']\",\n\"question\": \"What are the names of conductors whose nationalities are not USA?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', 'whose', 'nationalities', 'are', 'not', '``', 'USA', \"''\", '?']\"}"}
{"question": "Return the names of conductors that do not have the nationality \"USA\".", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Return the names of conductors that do not have the nationality \"USA\".\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'conductors', 'that', 'do', 'not', 'have', 'the', 'nationality', '``', 'USA', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT Name FROM conductor WHERE Nationality <> 'USA'\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'conductor', 'WHERE', 'Nationality', '<>', \" 'USA', \" '']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'conductor', 'WHERE', 'Nationality', '<>', \" '']\",\n\"question\": \"Return the names of conductors that do not have the nationality 'USA'.\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'conductors', 'that', 'do', 'not', 'have', 'the', 'nationality', '``', 'USA', \"''\", '.']}\""}
{"question": "What are the record companies of orchestras in descending order of years in which they were founded?", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the record companies of orchestras in descending order of years in which they were founded?\",\n\"question_toks\": \"['What', 'are', 'the', 'record', 'companies', 'of', 'orchestras', 'in', 'descending', 'order', 'of', 'years', 'in', 'which', 'they', 'were', 'founded', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT Record_Company FROM (SELECT Orchestra_ID, Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC) AS T1 GROUP BY Record_Company ORDER BY min(Year_of_Founded);\",\n \"query_toks\": \"['SELECT', 'Record_Company', 'FROM', '(', 'SELECT', 'Orchestra_ID', ',', 'Record_Company', ',', 'Year_of_Founded', 'FROM', 'orchestra', 'ORDER', 'BY', 'Year_of_Founded', 'DESC', ')', 'AS', 'T1', 'GROUP', 'BY', 'Record_Company', 'ORDER', 'BY', 'min', '(', 'Year_of_Founded', ')', ';']\",\n \"query_toks_no_value\": \"['SELECT', 'Record_Company', 'FROM', '(', 'SELECT', 'Orchestra_ID', ',', 'Record_Company', ',', 'Year_of_Founded', 'FROM', 'orchestra', 'ORDER', 'BY', 'Year_of_Founded', 'DESC', ')', 'AS', 'T1', 'GROUP', 'BY', 'Record_Company', 'ORDER', 'BY', 'min', '(', 'Year_of_Founded', ')', ';']\",\n \"question\": \"What are the record companies of orchestras in descending order of years in which they were founded?\",\n \"question_toks\": \"['What', 'are', 'the', 'record', 'companies', 'of', 'orchestras', 'in', 'descending', 'order', 'of', 'years', 'in', 'which', 'they', 'were', 'founded', '?']\"}"}
{"question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Return the record companies of orchestras, sorted descending by the years in which they were founded.\",\n\"question_toks\": \"['Return', 'the', 'record', 'companies', 'of', 'orchestras', ',', 'sorted', 'descending', 'by', 'the', 'years', 'in', 'which', 'they', 'were', 'founded', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT Record_Company FROM (SELECT Orchestra_ID, MAX(Year_of_Founded) as MaxYear FROM Orchestra GROUP BY Orchestra_ID) AS c JOIN Orchestra ON c.Orchestra_ID = Orchestra.Orchestra_ID AND c.MaxYear = Orchestra.Year_of_Founded ORDER BY Orchestra.Year_of_Founded DESC\",\n \"query_toks\": \"['SELECT', 'Record_Company', 'FROM', '(', 'SELECT', 'Orchestra_ID', ',', 'MAX', '(', 'Year_of_Founded', ')', 'as', 'MaxYear', 'FROM', 'Orchestra', 'GROUP', 'BY', 'Orchestra_ID', ')', 'AS', 'c', 'JOIN', 'Orchestra', 'ON', 'c.Orchestra_ID', '=', 'Orchestra.Orchestra_ID', 'AND', 'c.MaxYear', '=', 'Orchestra.Year_of_Founded', 'ORDER', 'BY', 'Orchestra.Year_of_Founded', 'DESC']\",\n \"query_toks_no_value\": \"['SELECT', 'Record_Company', 'FROM', '(', 'SELECT', 'Orchestra_ID', ',', 'MAX', '(', 'Year_of_Founded', ')', 'as', 'MaxYear', 'FROM', 'Orchestra', 'GROUP', 'BY', 'Orchestra_ID', ')', 'AS', 'c', 'JOIN', 'Orchestra', 'ON', 'c.Orchestra_ID', '=', 'Orchestra.Orchestra_ID', 'AND', 'c.MaxYear', '=', 'Orchestra.Year_of_Founded', 'ORDER', 'BY', 'Orchestra.Year_of_Founded', 'DESC']\",\n \"question\": \"Return the record companies of orchestras, sorted descending by the years in which they were founded.\",\n \"question_toks\": \"['Return', 'the', 'record', 'companies', 'of', 'orchestras', ',', 'sorted', 'descending', 'by', 'the', 'years', 'in', 'which', 'they', 'were', 'founded', '.']}\""}
{"question": "What is the average attendance of shows?", "sql": "SELECT avg(Attendance) FROM SHOW", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What is the average attendance of shows?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'attendance', 'of', 'shows', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT AVG(Attendance) FROM Show\",\n \"query_toks\": \"['SELECT', 'AVG', '(', 'Attendance', ')', 'FROM', 'Show']\",\n \"query_toks_no_value\": \"['SELECT', 'AVG', '(', ')', 'FROM', 'Show']\",\n \"question\": \"What is the average attendance of shows?\",\n \"question_toks\": \"['What', 'is', 'the', 'average', 'attendance', 'of', 'shows', '?']}\"\n"}
{"question": "Return the average attendance across all shows.", "sql": "SELECT avg(Attendance) FROM SHOW", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Return the average attendance across all shows.\",\n\"question_toks\": \"['Return', 'the', 'average', 'attendance', 'across', 'all', 'shows', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT AVG(Attendance) FROM Show;\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'Attendance', ')', 'FROM', 'Show', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', ')', 'FROM', 'Show', ';']\",\n\"question\": \"Return the average attendance across all shows.\",\n\"question_toks\": \"['Return', 'the', 'average', 'attendance', 'across', 'all', 'shows', '.']}\""}
{"question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the maximum and minimum share of performances whose type is not \"Live final\".\",\n\"question_toks\": \"['What', 'are', 'the', 'maximum', 'and', 'minimum', 'share', 'of', 'performances', 'whose', 'type', 'is', 'not', '``', 'Live', 'final', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT MAX(Share), MIN(Share) FROM performance WHERE Type!='Live final'\",\n    \"query_toks\": \"['SELECT', 'MAX', '(', 'Share', ')', ',', 'MIN', '(', 'Share', ')', 'FROM', 'performance', 'WHERE', 'Type', '!=', \"'\", 'Live', 'final', \"'\", ']\",\n    \"query_toks_no_value\": \"['SELECT', 'MAX', '(', 'Share', ')', ',', 'MIN', '(', 'Share', ')', 'FROM', 'performance', 'WHERE', 'Type', '!', '=', 'Live', 'final']\",\n    \"question\": \"What are the maximum and minimum share of performances whose type is not \\\"Live final\\\".\",\n    \"question_toks\": \"['What', 'are', 'the', 'maximum', 'and', 'minimum', 'share', 'of', 'performances', 'whose', 'type', 'is', 'not', '``', 'Live', 'final', \"''\", '.']\"\n}"}
{"question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Return the maximum and minimum shares for performances that do not have the type \"Live final\".\",\n\"question_toks\": \"['Return', 'the', 'maximum', 'and', 'minimum', 'shares', 'for', 'performances', 'that', 'do', 'not', 'have', 'the', 'type', '``', 'Live', 'final', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT MAX(p.Share) AS max_share, MIN(p.Share) AS min_share FROM performance p WHERE p.Type <> 'Live final'\",\n    \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"p\", \".\", \"Share\", \")\", \"AS\", \"max_share\", \",\", \"MIN\", \"(\", \"p\", \".\", \"Share\", \")\", \"AS\", \"min_share\", \"FROM\", \"performance\", \"p\", \"WHERE\", \"p\", \".\", \"Type\", \"<>\", \"'Live final'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"p\", \".\", \"Share\", \")\", \"AS\", \"max_share\", \",\", \"MIN\", \"(\", \"p\", \".\", \"Share\", \")\", \"AS\", \"min_share\", \"FROM\", \"performance\", \"p\", \"WHERE\", \"p\", \".\", \"Type\", \"<>\", \"value\"],\n    \"question\": \"Return the maximum and minimum shares for performances that do not have the type \\\"Live final\\\".\",\n    \"question_toks\": [\"Return\", \"the\", \"maximum\", \"and\", \"minimum\", \"shares\", \"for\", \"performances\", \"that\", \"do\", \"not\", \"have\", \"the\", \"type\", \"\\\"Live\", \"final\\\".\",]\n}"}
{"question": "How many different nationalities do conductors have?", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"How many different nationalities do conductors have?\",\n\"question_toks\": \"['How', 'many', 'different', 'nationalities', 'do', 'conductors', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"orchestra\",\n  \"query\": \"SELECT COUNT(DISTINCT Nationality) FROM conductor\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Nationality\", \")\", \"FROM\", \"conductor\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Nationality\", \")\", \"FROM\", \"conductor\"],\n  \"question\": \"How many different nationalities do conductors have?\",\n  \"question_toks\": [\"How\", \"many\", \"different\", \"nationalities\", \"do\", \"conductors\", \"have\", \"?\"]\n}"}
{"question": "Count the number of different nationalities of conductors.", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Count the number of different nationalities of conductors.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'different', 'nationalities', 'of', 'conductors', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT COUNT(DISTINCT Nationality) FROM Conductor\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Nationality\", \")\", \"FROM\", \"Conductor\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Nationality\", \")\", \"FROM\", \"Conductor\"],\n    \"question\": \"Count the number of different nationalities of conductors.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"different\", \"nationalities\", \"of\", \"conductors\", \".\"]\n}"}
{"question": "List names of conductors in descending order of years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"List names of conductors in descending order of years of work.\",\n\"question_toks\": \"['List', 'names', 'of', 'conductors', 'in', 'descending', 'order', 'of', 'years', 'of', 'work', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT Name FROM conductor ORDER BY Year_of_Work DESC\",\n    \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"conductor\", \"ORDER\", \"BY\", \"Year_of_Work\", \"DESC\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"conductor\", \"ORDER\", \"BY\", \"Year_of_Work\", \"DESC\"],\n    \"question\": \"List names of conductors in descending order of years of work.\",\n    \"question_toks\": [\"List\", \"names\", \"of\", \"conductors\", \"in\", \"descending\", \"order\", \"of\", \"years\", \"of\", \"work\", \".\"]\n}"}
{"question": "What are the names of conductors, sorted descending by the number of years they have worked?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the names of conductors, sorted descending by the number of years they have worked?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', ',', 'sorted', 'descending', 'by', 'the', 'number', 'of', 'years', 'they', 'have', 'worked', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT Name FROM (SELECT Conductor_ID, Name, Year_of_Work FROM conductor) AS T1 ORDER BY Year_of_Work DESC\",\n \"query_toks\": \"['SELECT', 'Name', 'FROM', '(', 'SELECT', 'Conductor_ID', ',', 'Name', ',', 'Year_of_Work', 'FROM', 'conductor', ')', 'AS', 'T1', 'ORDER', 'BY', 'Year_of_Work', 'DESC']\",\n \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', '(', 'SELECT', 'Conductor_ID', ',', 'Name', ',', 'Year_of_Work', 'FROM', 'conductor', ')', 'AS', 'T1', 'ORDER', 'BY', 'Year_of_Work', 'DESC']\",\n \"question\": \"What are the names of conductors, sorted descending by the number of years they have worked?\",\n \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', ',', 'sorted', 'descending', 'by', 'the', 'number', 'of', 'years', 'they', 'have', 'worked', '?']}\"\n"}
{"question": "List the name of the conductor with the most years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"List the name of the conductor with the most years of work.\",\n\"question_toks\": \"['List', 'the', 'name', 'of', 'the', 'conductor', 'with', 'the', 'most', 'years', 'of', 'work', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Year_of_Work', 'DESC', 'LIMIT', '1', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Year_of_Work', 'DESC', 'LIMIT', '1', ';']\",\n\"question\": \"List the name of the conductor with the most years of work.\",\n\"question_toks\": \"['List', 'the', 'name', 'of', 'the', 'conductor', 'with', 'the', 'most', 'years', 'of', 'work', '.']\"}"}
{"question": "What is the name of the conductor who has worked the greatest number of years?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What is the name of the conductor who has worked the greatest number of years?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'conductor', 'who', 'has', 'worked', 'the', 'greatest', 'number', 'of', 'years', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID=orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY SUM(orchestra.Year_of_Founded - conductor.Year_of_Work) DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'conductor', '.', 'Name', 'FROM', 'conductor', 'JOIN', 'orchestra', 'ON', 'conductor', '.', 'Conductor_ID', '=', 'orchestra', '.', 'Conductor_ID', 'GROUP', 'BY', 'conductor', '.', 'Conductor_ID', 'ORDER', 'BY', 'SUM', '(', 'orchestra', '.', 'Year_of_Founded', '-', 'conductor', '.', 'Year_of_Work', ')', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'conductor', '.', 'Name', 'FROM', 'conductor', 'JOIN', 'orchestra', 'ON', 'conductor', '.', 'Conductor_ID', '=', 'orchestra', '.', 'Conductor_ID', 'GROUP', 'BY', 'conductor', '.', 'Conductor_ID', 'ORDER', 'BY', 'SUM', '(', 'orchestra', '.', 'Year_of_Founded', '-', 'conductor', '.', 'Year_of_Work', ')', 'DESC', 'LIMIT', '1']\",\n \"question\": \"What is the name of the conductor who has worked the greatest number of years?\",\n \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'conductor', 'who', 'has', 'worked', 'the', 'greatest', 'number', 'of', 'years', '?']\"}"}
{"question": "Show the names of conductors and the orchestras they have conducted.", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Show the names of conductors and the orchestras they have conducted.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'conductors', 'and', 'the', 'orchestras', 'they', 'have', 'conducted', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT conductor.Name, orchestra.Orchestra \\\n            FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\",\n \"query_toks\": \"['SELECT', 'conductor', '.', 'Name', ',', 'orchestra', '.', 'Orchestra', 'FROM', \\\n                 'conductor', 'JOIN', 'orchestra', 'ON', 'conductor', '.', 'Conductor_ID', '=', \\\n                 'orchestra', '.', 'Conductor_ID']\",\n \"query_toks_no_value\": \"['SELECT', 'conductor', '.', 'Name', ',', 'orchestra', '.', 'Orchestra', 'FROM', \\\n                          'conductor', 'JOIN', 'orchestra', 'ON', 'conductor', '.', 'Conductor_ID', '=', \\\n                          'orchestra', '.', 'Conductor_ID']\",\n \"question\": \"Show the names of conductors and the orchestras they have conducted.\",\n \"question_toks\": \"['Show', 'the', 'names', 'of', 'conductors', 'and', 'the', 'orchestras', 'they', 'have', 'conducted', '.']}\"\n"}
{"question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the names of conductors as well as the corresonding orchestras that they have conducted?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', 'as', 'well', 'as', 'the', 'corresonding', 'orchestras', 'that', 'they', 'have', 'conducted', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT conductor.Name, orchestra.Orchestra\\nFROM conductor\\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\",\n\"query_toks\": [\"SELECT\", \"conductor\", \".\", \"Name\", \",\", \"orchestra\", \".\", \"Orchestra\", \"FROM\", \"conductor\", \"JOIN\", \"orchestra\", \"ON\", \"conductor\", \".\", \"Conductor_ID\", \"=\", \"orchestra\", \".\", \"Conductor_ID\"],\n\"query_toks_no_value\": [\"SELECT\", \"conductor\", \".\", \"Name\", \",\", \"orchestra\", \".\", \"Orchestra\", \"FROM\", \"conductor\", \"JOIN\", \"orchestra\", \"ON\", \"conductor\", \".\", \"Conductor_ID\", \"=\", \"orchestra\", \".\", \"Conductor_ID\"],\n\"question\": \"What are the names of conductors as well as the corresponding orchestras that they have conducted?\",\n\"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"conductors\", \"as\", \"well\", \"as\", \"the\", \"corresponding\", \"orchestras\", \"that\", \"they\", \"have\", \"conducted\", \"?\"]}\n"}
{"question": "Show the names of conductors that have conducted more than one orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Show the names of conductors that have conducted more than one orchestras.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'conductors', 'that', 'have', 'conducted', 'more', 'than', 'one', 'orchestras', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1\",\n \"query_toks\": \"['SELECT', 'conductor.Name', 'FROM', 'conductor', 'JOIN', 'orchestra', 'ON', 'conductor.Conductor_ID', '=', 'orchestra.Conductor_ID', 'GROUP', 'BY', 'conductor.Name', 'HAVING', 'COUNT', '(', 'DISTINCT', 'orchestra.Orchestra_ID', ')', '>', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'conductor', '.', 'Name', 'FROM', 'conductor', 'JOIN', 'orchestra', 'ON', 'conductor', '.', 'Conductor_ID', '=', 'orchestra', '.', 'Conductor_ID', 'GROUP', 'BY', 'conductor', '.', 'Name', 'HAVING', 'COUNT', '(', 'DISTINCT', 'orchestra', '.', 'Orchestra_ID', ')', '>', '1']\",\n \"question\": \"Show the names of conductors that have conducted more than one orchestras.\",\n \"question_toks\": \"['Show', 'the', 'names', 'of', 'conductors', 'that', 'have', 'conducted', 'more', 'than', 'one', 'orchestras', '.']}\"\n"}
{"question": "What are the names of conductors who have conducted at more than one orchestra?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the names of conductors who have conducted at more than one orchestra?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', 'who', 'have', 'conducted', 'at', 'more', 'than', 'one', 'orchestra', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"orchestra\",\n  \"query\": \"SELECT DISTINCT c.Name FROM conductor c INNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"c\", \".\", \"Name\", \"FROM\", \"conductor\", \"c\", \"INNER\", \"JOIN\", \"orchestra\", \"o\", \"ON\", \"c\", \".\", \"Conductor_ID\", \"=\", \"o\", \".\", \"Conductor_ID\", \"GROUP\", \"BY\", \"c\", \".\", \"Conductor_ID\", \"HAVING\", \"COUNT\", \"(\", \"DISTINCT\", \"o\", \".\", \"Orchestra_ID\", \")\", \">\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"c\", \".\", \"Name\", \"FROM\", \"conductor\", \"c\", \"INNER\", \"JOIN\", \"orchestra\", \"o\", \"ON\", \"c\", \".\", \"Conductor_ID\", \"=\", \"o\", \".\", \"Conductor_ID\", \"GROUP\", \"BY\", \"c\", \".\", \"Conductor_ID\", \"HAVING\", \"COUNT\", \"(\", \"DISTINCT\", \"o\", \".\", \"Orchestra_ID\", \")\", \">\", \"1\"],\n  \"question\": \"What are the names of conductors who have conducted at more than one orchestra?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"conductors\", \"who\", \"have\", \"conducted\", \"at\", \"more\", \"than\", \"one\", \"orchestra\", \"?\"]\n}"}
{"question": "Show the name of the conductor that has conducted the most number of orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Show the name of the conductor that has conducted the most number of orchestras.\",\n\"question_toks\": \"['Show', 'the', 'name', 'of', 'the', 'conductor', 'that', 'has', 'conducted', 'the', 'most', 'number', 'of', 'orchestras', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT c.Name\\nFROM conductor c, orchestra o\\nWHERE c.Conductor_ID = o.Conductor_ID\\nGROUP BY c.Name\\nORDER BY COUNT(o.Orchestra_ID) DESC\\nLIMIT 1\",\n \"query_toks\": \"['SELECT', 'c', '.', 'Name', 'FROM', 'conductor', 'c', ',', 'orchestra', 'o', 'WHERE', 'c', '.', 'Conductor_ID', '=', 'o', '.', 'Conductor_ID', 'GROUP', 'BY', 'c', '.', 'Name', 'ORDER', 'BY', 'COUNT', '(', 'o', '.', 'Orchestra_ID', ')', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'c', '.', 'Name', 'FROM', 'conductor', 'c', ',', 'orchestra', 'o', 'WHERE', 'c', '.', 'Conductor_ID', '=', 'o', '.', 'Conductor_ID', 'GROUP', 'BY', 'c', '.', 'Name', 'ORDER', 'BY', 'COUNT', '(', 'o', '.', 'Orchestra_ID', ')', 'DESC', 'LIMIT', '1']\",\n \"question\": \"Show the name of the conductor that has conducted the most number of orchestras.\",\n \"question_toks\": \"['Show', 'the', 'name', 'of', 'the', 'conductor', 'that', 'has', 'conducted', 'the', 'most', 'number', 'of', 'orchestras', '.']\"}"}
{"question": "What is the name of the conductor who has conducted the most orchestras?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What is the name of the conductor who has conducted the most orchestras?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'conductor', 'who', 'has', 'conducted', 'the', 'most', 'orchestras', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT conductor.Name\\nFROM (SELECT Conductor_ID, COUNT(DISTINCT Orchestra_ID) AS num_orchs\\n      FROM orchestra\\n      GROUP BY Conductor_ID) c\\nJOIN conductor ON conductor.Conductor_ID=c.Conductor_ID\\nWHERE num_orchs=(SELECT MAX(num_orchs) FROM (SELECT Conductor_ID, COUNT(DISTINCT Orchestra_ID) AS num_orchs\\n                                             FROM orchestra\\n                                             GROUP BY Conductor_ID) a)\",\n \"query_toks\": \"['SELECT', 'conductor', '.', 'Name', 'FROM', '(', 'SELECT', 'Conductor_ID', ',', 'COUNT', '(', 'DISTINCT', 'Orchestra_ID', ')', 'AS', 'num_orchs', 'FROM', 'orchestra', 'GROUP', 'BY', 'Conductor_ID', ')', 'c', 'JOIN', 'conductor', ..., 'SELECT', 'MAX', '(', 'num_orchs', ')', 'FROM', '(', 'SELECT', 'Conductor_ID', ',', 'COUNT', '(', 'DISTINCT', 'Orchestra_ID', ')', 'AS', 'num_orchs', 'FROM', 'orchestra', 'GROUP', 'BY', 'Conductor_ID', ')', 'a', ')', '']\", \n \"query_toks_no_value\": \"['SELECT', 'conductor', '.', 'Name', 'FROM', '(', 'SELECT', 'Conductor_ID', ',', 'COUNT', '(', 'DISTINCT', 'Orchestra_ID', ')', 'AS', 'num_orchs', 'FROM', 'orchestra', 'GROUP', 'BY', 'Conductor_ID', ')', 'c', 'JOIN', 'conductor... 'SELECT', 'MAX', '(', 'num_orchs', ')', 'FROM', '(', 'SELECT', 'Conductor_ID', ',', 'COUNT', '(', 'DISTINCT', 'Orchestra_ID', ')', 'AS', 'num_orchs', 'FROM', 'orchestra', 'GROUP', 'BY', 'Conductor_ID', ')', 'a', ')', '']\", \n \"question\": \"What is the name of the conductor who has conducted the most orchestras?\",\n \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'conductor', 'who', 'has', 'conducted', 'the', 'most', 'orchestras', '?']\"\n}"}
{"question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Please show the name of the conductor that has conducted orchestras founded after 2008.\",\n\"question_toks\": \"['Please', 'show', 'the', 'name', 'of', 'the', 'conductor', 'that', 'has', 'conducted', 'orchestras', 'founded', 'after', '2008', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT Conductor.Name FROM Orchestra T1 JOIN Conductor ON T1.Conductor_ID=Conductor.Conductor_ID WHERE T1.Year_of_Founded>2008;\",\n\"query_toks\": \"['SELECT', 'Conductor.Name', 'FROM', 'Orchestra', 'T1', 'JOIN', 'Conductor', 'ON', 'T1.Conductor_ID=Conductor.Conductor_ID', 'WHERE', 'T1.Year_of_Founded>2008', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'Conductor.Name', 'FROM', 'Orchestra', 'T1', 'JOIN', 'Conductor', 'ON', 'T1.Conductor_ID', '=', 'Conductor.Conductor_ID', 'WHERE', 'T1.Year_of_Founded', '>', '2008', ';']\",\n\"question\": \"Please show the name of the conductor that has conducted orchestras founded after 2008.\",\n\"question_toks\": \"['Please', 'show', 'the', 'name', 'of', 'the', 'conductor', 'that', 'has', 'conducted', 'orchestras', 'founded', 'after', '2008', '.']}\" \nNote: This query assumes that the \"Conductor\" table has a column named \"Name\" and the \"Orchestra\" table has columns \"Conductor_ID\" and \"Year_of_Founded\". The alias T1 is used for the table Orchestra."}
{"question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the names of conductors who have conducted orchestras founded after the year 2008?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', 'who', 'have', 'conducted', 'orchestras', 'founded', 'after', 'the', 'year', '2008', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;\",\n    \"query_toks\": \"['SELECT', 'conductor', '.', 'Name', 'FROM', 'conductor', 'JOIN', 'orchestra', 'ON', 'conductor', '.', 'Conductor_ID', '=', 'orchestra', '.', 'Conductor_ID', 'WHERE', 'orchestra', '.', 'Year_of_Founded', '>', '2008', ';']\",\n    \"query_toks_no_value\": \"['select', 'conductor', '.', 'name', 'from', 'conductor', 'join', 'orchestra', 'on', 'conductor', '.', 'conductor_id', '=', 'orchestra', '.', 'conductor_id', 'where', 'orchestra', '.', 'year_of_founded', '>', '<value>', ';']\",\n    \"question\": \"What are the names of conductors who have conducted orchestras founded after the year 2008?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'conductors', 'who', 'have', 'conducted', 'orchestras', 'founded', 'after', 'the', 'year', '2008', '?']\"\n}"}
{"question": "Please show the different record companies and the corresponding number of orchestras.", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Please show the different record companies and the corresponding number of orchestras.\",\n\"question_toks\": \"['Please', 'show', 'the', 'different', 'record', 'companies', 'and', 'the', 'corresponding', 'number', 'of', 'orchestras', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company\",\n\"query_toks\": \"['SELECT', 'Record_Company', ',', 'COUNT', '(', 'DISTINCT', 'Orchestra_ID', ')', 'FROM', 'orchestra', 'GROUP', 'BY', 'Record_Company']\",\n\"query_toks_no_value\": \"['SELECT', 'Record_Company', ',', 'COUNT', '(', 'DISTINCT', 'Orchestra_ID', ')', 'FROM', 'orchestra', 'GROUP', 'BY', 'Record_Company']\",\n\"question\": \"Please show the different record companies and the corresponding number of orchestras.\",\n\"question_toks\": \"['Please', 'show', 'the', 'different', 'record', 'companies', 'and', 'the', 'corresponding', 'number', 'of', 'orchestras', '.']}\""}
{"question": "How many orchestras does each record company manage?", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"How many orchestras does each record company manage?\",\n\"question_toks\": \"['How', 'many', 'orchestras', 'does', 'each', 'record', 'company', 'manage', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"orchestra\",\n  \"query\": \"SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company\",\n  \"query_toks\": [\"SELECT\", \"Record_Company\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"Orchestra_ID\", \")\", \"FROM\", \"orchestra\", \"GROUP\", \"BY\", \"Record_Company\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Record_Company\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"Orchestra_ID\", \")\", \"FROM\", \"orchestra\", \"GROUP\", \"BY\", \"Record_Company\"],\n  \"question\": \"How many orchestras does each record company manage?\",\n  \"question_toks\": [\"How\", \"many\", \"orchestras\", \"does\", \"each\", \"record\", \"company\", \"manage\", \"?\"]\n}"}
{"question": "Please show the record formats of orchestras in ascending order of count.", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Please show the record formats of orchestras in ascending order of count.\",\n\"question_toks\": \"['Please', 'show', 'the', 'record', 'formats', 'of', 'orchestras', 'in', 'ascending', 'order', 'of', 'count', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"orchestra\",\n  \"query\": \"SELECT `Major_Record_Format`, COUNT(*) AS `count` FROM `orchestra` GROUP BY `Major_Record_Format` ORDER BY `count` ASC\",\n  \"query_toks\": [\"SELECT\", \"`Major_Record_Format`\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"`count`\", \"FROM\", \"`orchestra`\", \"GROUP\", \"BY\", \"`Major_Record_Format`\", \"ORDER\", \"BY\", \"`count`\", \"ASC\"],\n  \"query_toks_no_value\": [\"SELECT\", \"`Major_Record_Format`\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"`count`\", \"FROM\", \"`orchestra`\", \"GROUP\", \"BY\", \"`Major_Record_Format`\", \"ORDER\", \"BY\", \"`count`\", \"ASC\"],\n  \"question\": \"Please show the record formats of orchestras in ascending order of count.\",\n  \"question_toks\": [\"Please\", \"show\", \"the\", \"record\", \"formats\", \"of\", \"orchestras\", \"in\", \"ascending\", \"order\", \"of\", \"count\", \".\"]\n}"}
{"question": "What are the major record formats of orchestras, sorted by their frequency?", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the major record formats of orchestras, sorted by their frequency?\",\n\"question_toks\": \"['What', 'are', 'the', 'major', 'record', 'formats', 'of', 'orchestras', ',', 'sorted', 'by', 'their', 'frequency', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT Major_Record_Format, COUNT(*) AS Frequency FROM Orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC\",\n    \"query_toks\": \"['SELECT', 'Major_Record_Format', ',', 'COUNT', '(', '*', ')', 'AS', 'Frequency', 'FROM', 'Orchestra', 'GROUP', 'BY', 'Major_Record_Format', 'ORDER', 'BY', 'Frequency', 'DESC']\",\n    \"query_toks_no_value\": \"['SELECT', 'Major_Record_Format', ',', 'COUNT', '(', '*', ')', 'AS', 'Frequency', 'FROM', 'Orchestra', 'GROUP', 'BY', 'Major_Record_Format', 'ORDER', 'BY', 'Frequency', 'DESC']\",\n    \"question\": \"What are the major record formats of orchestras, sorted by their frequency?\",\n    \"question_toks\": \"['What', 'are', 'the', 'major', 'record', 'formats', 'of', 'orchestras', ',', 'sorted', 'by', 'their', 'frequency', '?']\"\n}"}
{"question": "List the record company shared by the most number of orchestras.", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"List the record company shared by the most number of orchestras.\",\n\"question_toks\": \"['List', 'the', 'record', 'company', 'shared', 'by', 'the', 'most', 'number', 'of', 'orchestras', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT Record_Company, COUNT(*) AS Company_Count FROM orchestra GROUP BY Record_Company ORDER BY Company_Count DESC LIMIT 1;\",\n    \"query_toks\": [\"SELECT\", \"Record_Company\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"Company_Count\", \"FROM\", \"orchestra\", \"GROUP\", \"BY\", \"Record_Company\", \"ORDER\", \"BY\", \"Company_Count\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Record_Company\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"Company_Count\", \"FROM\", \"orchestra\", \"GROUP\", \"BY\", \"Record_Company\", \"ORDER\", \"BY\", \"Company_Count\", \"DESC\", \"LIMIT\", \"1\", \";\"],\n    \"question\": \"List the record company shared by the most number of orchestras.\",\n    \"question_toks\": [\"List\", \"the\", \"record\", \"company\", \"shared\", \"by\", \"the\", \"most\", \"number\", \"of\", \"orchestras\", \".\"]\n}"}
{"question": "What is the record company used by the greatest number of orchestras?", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What is the record company used by the greatest number of orchestras?\",\n\"question_toks\": \"['What', 'is', 'the', 'record', 'company', 'used', 'by', 'the', 'greatest', 'number', 'of', 'orchestras', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n \"query\": \"SELECT Record_Company, COUNT(Orchestra_ID) AS count_orchestras FROM orchestra GROUP BY Record_Company ORDER BY count_orchestras DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'Record_Company', ',', 'COUNT', '(', 'Orchestra_ID', ')', 'AS', 'count_orchestras', 'FROM', 'orchestra', 'GROUP', 'BY', 'Record_Company', 'ORDER', 'BY', 'count_orchestras', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Record_Company', ',', 'COUNT', '(', 'Orchestra_ID', ')', 'AS', 'count_orchestras', 'FROM', 'orchestra', 'GROUP', 'BY', 'Record_Company', 'ORDER', 'BY', 'count_orchestras', 'DESC', 'LIMIT', '1']\",\n \"question\": \"What is the record company used by the greatest number of orchestras?\",\n \"question_toks\": \"['What', 'is', 'the', 'record', 'company', 'used', 'by', 'the', 'greatest', 'number', 'of', 'orchestras', '?']\"}"}
{"question": "List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"List the names of orchestras that have no performance.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'orchestras', 'that', 'have', 'no', 'performance', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"orchestra\",\n  \"query\": \"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)\",\n  \"query_toks\": [\"SELECT\", \"Orchestra\", \"FROM\", \"orchestra\", \"WHERE\", \"Orchestra_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Orchestra_ID\", \"FROM\", \"performance\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Orchestra\", \"FROM\", \"orchestra\", \"WHERE\", \"Orchestra_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Orchestra_ID\", \"FROM\", \"performance\", \")\", \";\"],\n  \"question\": \"List the names of orchestras that have no performance.\",\n  \"question_toks\": [\"List\", \"the\", \"names\", \"of\", \"orchestras\", \"that\", \"have\", \"no\", \"performance\", \".\"]\n}"}
{"question": "What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the orchestras that do not have any performances?\",\n\"question_toks\": \"['What', 'are', 'the', 'orchestras', 'that', 'do', 'not', 'have', 'any', 'performances', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"orchestra\",\n  \"query\": \"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);\",\n  \"query_toks\": [\"SELECT\", \"Orchestra\", \"FROM\", \"orchestra\", \"WHERE\", \"Orchestra_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Orchestra_ID\", \"FROM\", \"performance\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Orchestra\", \"FROM\", \"orchestra\", \"WHERE\", \"Orchestra_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Orchestra_ID\", \"FROM\", \"performance\", \")\", \";\"],\n  \"question\": \"What are the orchestras that do not have any performances?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"orchestras\", \"that\", \"do\", \"not\", \"have\", \"any\", \"performances\", \"?\"]\n}"}
{"question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Show the record companies shared by orchestras founded before 2003 and after 2003.\",\n\"question_toks\": \"['Show', 'the', 'record', 'companies', 'shared', 'by', 'orchestras', 'founded', 'before', '2003', 'and', 'after', '2003', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT DISTINCT Record_Company FROM orchestra T1 JOIN (SELECT DISTINCT Orchestra_ID FROM orchestra WHERE Year_of_Founded < 2003) T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN (SELECT DISTINCT Orchestra_ID FROM orchestra WHERE Year_of_Founded > 2003) T3 ON T1.Orchestra_ID = T3.Orchestra_ID\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Record_Company', 'FROM', 'orchestra', 'T1', 'JOIN', '(', 'SELECT', 'DISTINCT', 'Orchestra_ID', 'FROM', 'orchestra', 'WHERE', 'Year_of_Founded', '<', '2003', ')', 'T2', 'ON', 'T1', '.', 'Orchestra_ID', '=', 'T2', '.', 'Orchestra_ID', 'JOIN', '(', 'SELECT', 'DISTINCT', 'Orchestra_ID', 'FROM', 'orchestra', 'WHERE', 'Year_of_Founded', '>', '2003', ')', 'T3', 'ON', 'T1', '.', 'Orchestra_ID', '=', 'T3', '.', 'Orchestra_ID']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Record_Company', 'FROM', 'orchestra', 'T1', 'JOIN', '(', 'SELECT', 'DISTINCT', 'Orchestra_ID', 'FROM', 'orchestra', 'WHERE', 'Year_of_Founded', '<', '?', ')', 'T2', 'ON', 'T1', '.', 'Orchestra_ID', '=', 'T2', '.', 'Orchestra_ID', 'JOIN', '(', 'SELECT', 'DISTINCT', 'Orchestra_ID', 'FROM', 'orchestra', 'WHERE', 'Year_of_Founded', '>', '?', ')', 'T3', 'ON', 'T1', '.', 'Orchestra_ID', '=', 'T3', '.', 'Orchestra_ID']\",\n    \"question\": \"Show the record companies shared by orchestras founded before 2003 and after 2003.\",\n    \"question_toks\": \"['Show', 'the', 'record', 'companies', 'shared', 'by', 'orchestras', 'founded', 'before', '2003', 'and', 'after', '2003', '.']\"\n}"}
{"question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?\",\n\"question_toks\": \"['What', 'are', 'the', 'record', 'companies', 'that', 'are', 'used', 'by', 'both', 'orchestras', 'founded', 'before', '2003', 'and', 'those', 'founded', 'after', '2003', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT DISTINCT o.Record_Company FROM orchestra o JOIN (SELECT DISTINCT o2.Year_of_Founded FROM orchestra o2 WHERE o2.Year_of_Founded < 2003) AS T1 ON o.Year_of_Founded = T1.Year_of_Founded JOIN (SELECT DISTINCT o3.Year_of_Founded FROM orchestra o3 WHERE o3.Year_of_Founded > 2003) AS T2 ON o.Year_of_Founded = T2.Year_of_Founded\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'o', '.', 'Record_Company', 'FROM', 'orchestra', 'o', 'JOIN', '(', 'SELECT', 'DISTINCT', 'o2', '.', 'Year_of_Founded', 'FROM', 'orchestra', 'o2', 'WHERE', 'o2', '.', 'Year_of_Founded', '<', '2003', ')'... 'join', '(', 'select', 'distinct', 'o3', '.', 'Year_of_Founded', 'from', 'orchestra', 'o3', 'where', 'o3', '.', 'Year_of_Founded', '>', '2003', ')', 'as', 'T2', 'on', 'o', '.', 'Year_of_Founded', '=', 'T2', '.', 'Year_of_Founded']\",\n\"query_toks_no_value\": \"['select', 'distinct', 'o', '.', 'Record_Company', 'from', 'orchestra', 'o', 'join', '(', 'select', 'distinct', 'o2', '.', 'Year_of_Founded', 'from', 'orchestra', 'o2', 'where', 'o2', '.', 'Year_of_Founded', '<', '?', ')', 'as', 'T1', 'on', 'o', '.', 'Year_of_Founded', '=', 'T1', '.', 'Year_of_Founded', 'join', '(', 'select', 'distinct', 'o3', '.', 'Year_of_Founded', 'from', 'orchestra', 'o3', 'where', 'o3', '.', 'Year_of_Founded', '>', '?', ')', 'as', 'T2', 'on', 'o', '.', 'Year_of_Founded', '=', 'T2', '.', 'Year_of_Founded']\",\n\"question\": \"What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?\",\n\"question_toks\": \"['What', 'are', 'the', 'record', 'companies', 'that', 'are', 'used', 'by', 'both', 'orchestras', 'founded', 'before', '2003', 'and', 'those', 'founded', 'after', '2003', '?']}\""}
{"question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Find the number of orchestras whose record format is \"CD\" or \"DVD\".\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'orchestras', 'whose', 'record', 'format', 'is', '``', 'CD', \"''\", 'or', '``', 'DVD', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT COUNT(*) FROM T1 WHERE T1.Major_Record_Format = 'CD' OR T1.Major_Record_Format = 'DVD'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"T1\", \"WHERE\", \"T1\", \".\", \"Major_Record_Format\", \"=\", \"'\", \"CD\", \"'\", \"OR\", \"T1\", \".\", \"Major_Record_Format\", \"=\", \"'\", \"DVD\", \"'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"T1\", \"WHERE\", \"T1\", \".\", \"Major_Record_Format\", \"=\", \"'\", \"\", \"'\", \"OR\", \"T1\", \".\", \"Major_Record_Format\", \"=\", \"'\", \"\", \"'\"],\n    \"question\": \"Find the number of orchestras whose record format is \\\"CD\\\" or \\\"DVD\\\".\",\n    \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"orchestras\", \"whose\", \"record\", \"format\", \"is\", \"\\\"\", \"CD\", \"\\\"\", \"or\", \"\\\"\", \"DVD\", \"\\\"\", \".\"]\n}"}
{"question": "Count the number of orchestras that have CD or DVD as their record format.", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Count the number of orchestras that have CD or DVD as their record format.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'orchestras', 'that', 'have', 'CD', 'or', 'DVD', 'as', 'their', 'record', 'format', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"orchestra\",\n    \"query\": \"SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format LIKE '%CD%' OR Major_Record_Format LIKE '%DVD%'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Orchestra_ID\", \")\", \"FROM\", \"orchestra\", \"WHERE\", \"Major_Record_Format\", \"LIKE\", \"'\", \"%CD%\", \"'\", \"OR\", \"Major_Record_Format\", \"LIKE\", \"'\", \"%DVD%\", \"'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"Orchestra_ID\", \")\", \"FROM\", \"orchestra\", \"WHERE\", \"Major_Record_Format\", \"LIKE\", \"'\", \"X\", \"'\", \"OR\", \"Major_Record_Format\", \"LIKE\", \"'\", \"Y\", \"'\"],\n    \"question\": \"Count the number of orchestras that have CD or DVD as their record format.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"orchestras\", \"that\", \"have\", \"CD\", \"or\", \"DVD\", \"as\", \"their\", \"record\", \"format\", \".\"]\n}"}
{"question": "Show the years in which orchestras that have given more than one performance are founded.", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"Show the years in which orchestras that have given more than one performance are founded.\",\n\"question_toks\": \"['Show', 'the', 'years', 'in', 'which', 'orchestras', 'that', 'have', 'given', 'more', 'than', 'one', 'performance', 'are', 'founded', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"orchestra\",\n  \"query\": \"SELECT DISTINCT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1);\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'Year_of_Founded', 'FROM', 'orchestra', 'WHERE', 'Orchestra_ID', 'IN', '(', 'SELECT', 'Orchestra_ID', 'FROM', 'performance', 'GROUP', 'BY', 'Orchestra_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1', ')', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Year_of_Founded', 'FROM', 'orchestra', 'WHERE', 'Orchestra_ID', 'IN', '(', 'SELECT', 'Orchestra_ID', 'FROM', 'performance', 'GROUP', 'BY', 'Orchestra_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1', ')', ';']\",\n  \"question\": \"Show the years in which orchestras that have given more than one performance are founded.\",\n  \"question_toks\": \"['Show', 'the', 'years', 'in', 'which', 'orchestras', 'that', 'have', 'given', 'more', 'than', 'one', 'performance', 'are', 'founded', '.']\"\n}"}
{"question": "What are years of founding for orchestras that have had more than a single performance?", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nconductor: 'Conductor_ID', 'Name', 'Age', 'Nationality', 'Year_of_Work'\norchestra: 'Orchestra_ID', 'Orchestra', 'Conductor_ID', 'Record_Company', 'Year_of_Founded', 'Major_Record_Format'\nperformance: 'Performance_ID', 'Orchestra_ID', 'Type', 'Date', 'Official_ratings_(millions)', 'Weekly_rank', 'Share'\nshow: 'Show_ID', 'Performance_ID', 'If_first_show', 'Result', 'Attendance'\n\n{\"db_id\": \"orchestra\",\n\"question\": \"What are years of founding for orchestras that have had more than a single performance?\",\n\"question_toks\": \"['What', 'are', 'years', 'of', 'founding', 'for', 'orchestras', 'that', 'have', 'had', 'more', 'than', 'a', 'single', 'performance', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"orchestra\",\n\"query\": \"SELECT DISTINCT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'Year_of_Founded', 'FROM', 'orchestra', 'WHERE', 'Orchestra_ID', 'IN', '(', 'SELECT', 'Orchestra_ID', 'FROM', 'performance', 'GROUP', 'BY', 'Orchestra_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Year_of_Founded', 'FROM', 'orchestra', 'WHERE', 'Orchestra_ID', 'IN', '(', 'SELECT', 'Orchestra_ID', 'FROM', 'performance', 'GROUP', 'BY', 'Orchestra_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1', ')']\",\n\"question\": \"What are years of founding for orchestras that have had more than a single performance?\",\n\"question_toks\": \"['What', 'are', 'years', 'of', 'founding', 'for', 'orchestras', 'that', 'have', 'had', 'more', 'than', 'a', 'single', 'performance', '?']}\"\n"}
{"question": "How many high schoolers are there?", "sql": "SELECT count(*) FROM Highschooler", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"How many high schoolers are there?\",\n\"question_toks\": \"['How', 'many', 'high', 'schoolers', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT count(*) FROM highschooler AS T1\",\n    \"query_toks\": \"['SELECT', 'count', '(', '*', ')', 'FROM', 'highschooler', 'AS', 'T1']\",\n    \"query_toks_no_value\": \"['SELECT', 'count', '(', '*', ')', 'FROM', 'highschooler', 'AS', 'T1']\",\n    \"question\": \"How many high schoolers are there?\",\n    \"question_toks\": \"['How', 'many', 'high', 'schoolers', 'are', 'there', '?']}\"\n}"}
{"question": "Count the number of high schoolers.", "sql": "SELECT count(*) FROM Highschooler", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Count the number of high schoolers.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'high', 'schoolers', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT COUNT(*) FROM highschooler;\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"highschooler\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"highschooler\", \";\"],\n  \"question\": \"Count the number of high schoolers.\",\n  \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"high\", \"schoolers\", \".\"]\n}"}
{"question": "Show the names and grades of each high schooler.", "sql": "SELECT name ,  grade FROM Highschooler", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the names and grades of each high schooler.\",\n\"question_toks\": \"['Show', 'the', 'names', 'and', 'grades', 'of', 'each', 'high', 'schooler', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT ID, name, grade FROM Highschooler\",\n    \"query_toks\": \"['SELECT', 'ID', ',', 'name', ',', 'grade', 'FROM', 'Highschooler']\",\n    \"query_toks_no_value\": \"['SELECT', 'ID', ',', 'name', ',', 'grade', 'FROM', 'Highschooler']\",\n    \"question\": \"Show the names and grades of each high schooler.\",\n    \"question_toks\": \"['Show', 'the', 'names', 'and', 'grades', 'of', 'each', 'high', 'schooler', '.']\"\n}"}
{"question": "What are the names and grades for each high schooler?", "sql": "SELECT name ,  grade FROM Highschooler", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the names and grades for each high schooler?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'grades', 'for', 'each', 'high', 'schooler', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT ID, name, grade FROM highschooler\",\n    \"query_toks\": \"['SELECT', 'ID', ',', 'name', ',', 'grade', 'FROM', 'highschooler']\",\n    \"query_toks_no_value\": \"['SELECT', 'ID', ',', 'name', ',', 'grade', 'FROM', 'highschooler']\",\n    \"question\": \"What are the names and grades for each high schooler?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'and', 'grades', 'for', 'each', 'high', 'schooler', '?']\"\n}"}
{"question": "Show all the grades of the high schoolers.", "sql": "SELECT grade FROM Highschooler", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show all the grades of the high schoolers.\",\n\"question_toks\": \"['Show', 'all', 'the', 'grades', 'of', 'the', 'high', 'schoolers', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"highschooler_1\",\n  \"query\": \"SELECT grade FROM Highschooler\",\n  \"query_toks\": [\"SELECT\", \"grade\", \"FROM\", \"Highschooler\"],\n  \"query_toks_no_value\": [\"SELECT\", \"grade\", \"FROM\", \"Highschooler\"],\n  \"question\": \"Show all the grades of the high schoolers.\",\n  \"question_toks\": [\"Show\", \"all\", \"the\", \"grades\", \"of\", \"the\", \"high\", \"schoolers\", \".\"]\n}"}
{"question": "What is the grade of each high schooler?", "sql": "SELECT grade FROM Highschooler", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What is the grade of each high schooler?\",\n\"question_toks\": \"['What', 'is', 'the', 'grade', 'of', 'each', 'high', 'schooler', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"school_network\",\n  \"query\": \"SELECT grade FROM Highschooler\",\n  \"query_toks\": [\"SELECT\", \"grade\", \"FROM\", \"Highschooler\"],\n  \"query_toks_no_value\": [\"SELECT\", \"*\", \"FROM\", \"Highschooler\"],\n  \"question\": \"What is the grade of each high schooler?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"grade\", \"of\", \"each\", \"high\", \"schooler\", \"?\"]\n}"}
{"question": "What grade is Kyle in?", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What grade is Kyle in?\",\n\"question_toks\": \"['What', 'grade', 'is', 'Kyle', 'in', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT grade FROM Highschooler WHERE name = 'Kyle'\",\n    \"query_toks\": \"['SELECT', 'grade', 'FROM', 'Highschooler', 'WHERE', 'name', '=', '\\\\\\'Kyle\\\\\\'', '']\",\n    \"query_toks_no_value\": \"['SELECT', 'grade', 'FROM', 'Highschooler', 'WHERE', 'name', '=', '?', '']\",\n    \"question\": \"What grade is Kyle in?\",\n    \"question_toks\": \"['What', 'grade', 'is', 'Kyle', 'in', '?']\"\n}"}
{"question": "Return the grade for the high schooler named Kyle.", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Return the grade for the high schooler named Kyle.\",\n\"question_toks\": \"['Return', 'the', 'grade', 'for', 'the', 'high', 'schooler', 'named', 'Kyle', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT grade FROM highschooler T1 WHERE T1.name = 'Kyle';\",\n  \"query_toks\": \"['SELECT', 'grade', 'FROM', 'highschooler', 'T1', 'WHERE', 'T1', '.', 'name', '=', ''', 'Kyle', ''';']\",\n  \"query_toks_no_value\": \"['SELECT', 'grade', 'FROM', 'highschooler', 'T1', 'WHERE', 'T1', '.', 'name', '=', '', ';']\",\n  \"question\": \"Return the grade for the high schooler named Kyle.\",\n  \"question_toks\": \"['Return', 'the', 'grade', 'for', 'the', 'high', 'schooler', 'named', 'Kyle', '.']\"\n}"}
{"question": "Show the names of all high schoolers in grade 10.", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the names of all high schoolers in grade 10.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'all', 'high', 'schoolers', 'in', 'grade', '10', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"network_1\",\n\"query\": \"SELECT name FROM Highschooler T1 WHERE T1.grade = 10\",\n\"query_toks\": \"['SELECT', 'name', 'FROM', 'Highschooler', 'T1', 'WHERE', 'T1', '.', 'grade', '=', '10']\",\n\"query_toks_no_value\": \"['SELECT', 'name', 'FROM', 'Highschooler', 'T1', 'WHERE', 'T1', '.', 'grade', '=']\",\n\"question\": \"Show the names of all high schoolers in grade 10.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'all', 'high', 'schoolers', 'in', 'grade', '10', '.']}\""}
{"question": "What are the names of all high schoolers in grade 10?", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the names of all high schoolers in grade 10?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'high', 'schoolers', 'in', 'grade', '10', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT name FROM highschooler WHERE grade = '10'\",\n    \"query_toks\": \"['SELECT', 'name', 'FROM', 'highschooler', 'WHERE', 'grade', '=', ''10'', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'name', 'FROM', 'highschooler', 'WHERE', 'grade', '=', '', ';']\",\n    \"question\": \"What are the names of all high schoolers in grade 10?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'all', 'high', 'schoolers', 'in', 'grade', '10', '?']\"\n}"}
{"question": "Show the ID of the high schooler named Kyle.", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the ID of the high schooler named Kyle.\",\n\"question_toks\": \"['Show', 'the', 'ID', 'of', 'the', 'high', 'schooler', 'named', 'Kyle', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT ID FROM Highschooler T1 WHERE T1.name='Kyle'\",\n  \"query_toks\": \"['SELECT', 'ID', 'FROM', 'Highschooler', 'T1', 'WHERE', 'T1', '.', 'name', '=', '\\\\''Kyle\\\\''']\",\n  \"query_toks_no_value\": \"['SELECT', 'ID', 'FROM', 'Highschooler', 'T1', 'WHERE', 'T1', '.', 'name', '=', '?']\",\n  \"question\": \"Show the ID of the high schooler named Kyle.\",\n  \"question_toks\": \"['Show', 'the', 'ID', 'of', 'the', 'high', 'schooler', 'named', 'Kyle', '.']\"\n}"}
{"question": "What is Kyle's id?", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What is Kyle's id?\",\n\"question_toks\": \"['What', 'is', 'Kyle', \"'s\", 'id', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"network_1\",\n\"query\": \"SELECT ID FROM highschooler WHERE name='Kyle'\",\n\"query_toks\": \"['SELECT', 'ID', 'FROM', 'highschooler', 'WHERE', 'name', '=', 'Kyle']\",\n\"query_toks_no_value\": \"['SELECT', 'ID', 'FROM', 'highschooler', 'WHERE', 'name', '=', '?']\",\n\"question\": \"What is Kyle's id?\",\n\"question_toks\": \"['What', 'is', 'Kyle', \"'s\", 'id', '?']\"}"}
{"question": "How many high schoolers are there in grade 9 or 10?", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"How many high schoolers are there in grade 9 or 10?\",\n\"question_toks\": \"['How', 'many', 'high', 'schoolers', 'are', 'there', 'in', 'grade', '9', 'or', '10', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT COUNT(*) FROM highschooler WHERE grade IN ('9', '10');\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'highschooler', 'WHERE', 'grade', 'IN', '(', ''9'', ',', ''10'', ')', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'highschooler', 'WHERE', 'grade', 'IN', '(', '', ',', '', ')', ';']\",\n    \"question\": \"How many high schoolers are there in grade 9 or 10?\",\n    \"question_toks\": \"['How', 'many', 'high', 'schoolers', 'are', 'there', 'in', 'grade', '9', 'or', '10', '?']\"\n}"}
{"question": "Count the number of high schoolers in grades 9 or 10.", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Count the number of high schoolers in grades 9 or 10.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'high', 'schoolers', 'in', 'grades', '9', 'or', '10', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"school_data\",\n  \"query\": \"SELECT COUNT(*) FROM Highschooler AS T1 WHERE T1.grade=9 OR T1.grade=10\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Highschooler\", \"AS\", \"T1\", \"WHERE\", \"T1\", \".\", \"grade\", \"=\", \"9\", \"OR\", \"T1\", \".\", \"grade\", \"=\", \"10\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Highschooler\", \"AS\", \"T1\", \"WHERE\", \"T1\", \".\", \"grade\", \"=\", \"\", \"OR\", \"T1\", \".\", \"grade\", \"=\", \"\"],\n  \"question\": \"Count the number of high schoolers in grades 9 or 10.\",\n  \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"high\", \"schoolers\", \"in\", \"grades\", \"9\", \"or\", \"10\", \".\"]\n}"}
{"question": "Show the number of high schoolers for each grade.", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the number of high schoolers for each grade.\",\n\"question_toks\": \"['Show', 'the', 'number', 'of', 'high', 'schoolers', 'for', 'each', 'grade', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT grade, COUNT(*) as num_students FROM highschooler GROUP BY grade\",\n  \"query_toks\": [\"SELECT\", \"grade\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"as\", \"num_students\", \"FROM\", \"highschooler\", \"GROUP\", \"BY\", \"grade\"],\n  \"query_toks_no_value\": [\"SELECT\", \"grade\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"as\", \"num_students\", \"FROM\", \"highschooler\", \"GROUP\", \"BY\", \"grade\"],\n  \"question\": \"Show the number of high schoolers for each grade.\",\n  \"question_toks\": [\"Show\", \"the\", \"number\", \"of\", \"high\", \"schoolers\", \"for\", \"each\", \"grade\", \".\"]\n}"}
{"question": "How many high schoolers are in each grade?", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"How many high schoolers are in each grade?\",\n\"question_toks\": \"['How', 'many', 'high', 'schoolers', 'are', 'in', 'each', 'grade', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"school_network\",\n  \"query\": \"SELECT grade, COUNT(ID) FROM highschooler GROUP BY grade\",\n  \"query_toks\": [\"SELECT\", \"grade\", \",\", \"COUNT\", \"(\", \"ID\", \")\", \"FROM\", \"highschooler\", \"GROUP\", \"BY\", \"grade\"],\n  \"query_toks_no_value\": [\"SELECT\", \"grade\", \",\", \"COUNT\", \"(\", \"ID\", \")\", \"FROM\", \"highschooler\", \"GROUP\", \"BY\", \"grade\"],\n  \"question\": \"How many high schoolers are in each grade?\",\n  \"question_toks\": [\"How\", \"many\", \"high\", \"schoolers\", \"are\", \"in\", \"each\", \"grade\", \"?\"]\n}"}
{"question": "Which grade has the most high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Which grade has the most high schoolers?\",\n\"question_toks\": \"['Which', 'grade', 'has', 'the', 'most', 'high', 'schoolers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT grade, COUNT(*) FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'grade', ',', 'COUNT', '(', '*', ')', 'FROM', 'highschooler', 'GROUP', 'BY', 'grade', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'grade', ',', 'COUNT', '(', '*', ')', 'FROM', 'highschooler', 'GROUP', 'BY', 'grade', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n    \"question\": \"Which grade has the most high schoolers?\",\n    \"question_toks\": \"['Which', 'grade', 'has', 'the', 'most', 'high', 'schoolers', '?']\"\n}"}
{"question": "Return the grade that has the greatest number of high schoolers.", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Return the grade that has the greatest number of high schoolers.\",\n\"question_toks\": \"['Return', 'the', 'grade', 'that', 'has', 'the', 'greatest', 'number', 'of', 'high', 'schoolers', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"highschooler_friend_likes\",\n    \"query\": \"SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;\",\n    \"query_toks\": \"['SELECT', 'grade', 'FROM', 'highschooler', 'GROUP', 'BY', 'grade', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'grade', 'FROM', 'highschooler', 'GROUP', 'BY', 'grade', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']\",\n    \"question\": \"Return the grade that has the greatest number of high schoolers.\",\n    \"question_toks\": \"['Return', 'the', 'grade', 'that', 'has', 'the', 'greatest', 'number', 'of', 'high', 'schoolers', '.']\"\n}"}
{"question": "Show me all grades that have at least 4 students.", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show me all grades that have at least 4 students.\",\n\"question_toks\": \"['Show', 'me', 'all', 'grades', 'that', 'have', 'at', 'least', '4', 'students', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;\",\n  \"query_toks\": [\"SELECT\", \"grade\", \"FROM\", \"highschooler\", \"GROUP\", \"BY\", \"grade\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"4\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"grade\", \"FROM\", \"highschooler\", \"GROUP\", \"BY\", \"grade\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"<number>\", \";\"],\n  \"question\": \"Show me all grades that have at least 4 students.\",\n  \"question_toks\": [\"Show\", \"me\", \"all\", \"grades\", \"that\", \"have\", \"at\", \"least\", \"4\", \"students\", \".\"]\n}"}
{"question": "Which grades have 4 or more high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Which grades have 4 or more high schoolers?\",\n\"question_toks\": \"['Which', 'grades', 'have', '4', 'or', 'more', 'high', 'schoolers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"highschool_network\",\n    \"query\": \"SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4\",\n    \"query_toks\": \"['SELECT', 'grade', 'FROM', 'Highschooler', 'GROUP', 'BY', 'grade', 'HAVING', 'COUNT', '(', '*', ')', '>=', '4']\",\n    \"query_toks_no_value\": \"['SELECT', 'grade', 'FROM', 'Highschooler', 'GROUP', 'BY', 'grade', 'HAVING', 'COUNT', '(', '*', ')', '>=', '<value>']\",\n    \"question\": \"Which grades have 4 or more high schoolers?\",\n    \"question_toks\": \"['Which', 'grades', 'have', '4', 'or', 'more', 'high', 'schoolers', '?']\"\n}"}
{"question": "Show the student IDs and numbers of friends corresponding to each.", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the student IDs and numbers of friends corresponding to each.\",\n\"question_toks\": \"['Show', 'the', 'student', 'IDs', 'and', 'numbers', 'of', 'friends', 'corresponding', 'to', 'each', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT Friend.student_id, COUNT(Friend.friend_id) FROM Friend GROUP BY Friend.student_id;\",\n  \"query_toks\": \"['SELECT', 'Friend', '.', 'student_id', ',', 'COUNT', '(', 'Friend', '.', 'friend_id', ')', 'FROM', 'Friend', 'GROUP', 'BY', 'Friend', '.', 'student_id', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'Friend', '.', '<value>', ',', 'COUNT', '(', 'Friend', '.', '<value>', ')', 'FROM', 'Friend', 'GROUP', 'BY', 'Friend', '.', '<value>', ';']\",\n  \"question\": \"Show the student IDs and numbers of friends corresponding to each.\",\n  \"question_toks\": \"['Show', 'the', 'student', 'IDs', 'and', 'numbers', 'of', 'friends', 'corresponding', 'to', 'each', '.']\"\n}"}
{"question": "How many friends does each student have?", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"How many friends does each student have?\",\n\"question_toks\": \"['How', 'many', 'friends', 'does', 'each', 'student', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT hs.name, COUNT(f.friend_id) \\nFROM Highschooler hs JOIN Friend f ON hs.ID = f.student_id \\nGROUP BY hs.name\",\n    \"query_toks\": \"['SELECT', 'hs', '.', 'name', ',', 'COUNT', '(', 'f', '.', 'friend_id', ')', 'FROM', 'Highschooler', 'hs', 'JOIN', 'Friend', 'f', 'ON', 'hs', '.', 'ID', '=', 'f', '.', 'student_id', 'GROUP', 'BY', 'hs', '.', 'name']\",\n    \"query_toks_no_value\": \"['SELECT', 'hs', '.', 'name', ',', 'COUNT', '(', 'f', '.', 'friend_id', ')', 'FROM', 'Highschooler', 'hs', 'JOIN', 'Friend', 'f', 'ON', 'hs', '.', 'ID', '=', 'f', '.', 'student_id', 'GROUP', 'BY', 'hs', '.', 'name']\",\n    \"question\": \"How many friends does each student have?\",\n    \"question_toks\": \"['How', 'many', 'friends', 'does', 'each', 'student', 'have', '?']\"\n}"}
{"question": "Show the names of high school students and their corresponding number of friends.", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the names of high school students and their corresponding number of friends.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'high', 'school', 'students', 'and', 'their', 'corresponding', 'number', 'of', 'friends', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"network_1\",\n \"query\": \"SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler JOIN friend ON highschooler.ID = friend.student_id GROUP BY highschooler.ID;\",\n \"query_toks\": \"['SELECT', 'highschooler', '.', 'name', ',', 'COUNT', '(', 'friend', '.', 'friend_id', ')', 'FROM', 'highschooler', 'JOIN', 'friend', 'ON', 'highschooler', '.', 'ID', '=', 'friend', '.', 'student_id', 'GROUP', 'BY', 'highschooler', '.', 'ID', ';']\",\n \"query_toks_no_value\": \"['SELECT', 'highschooler', '.', 'name', ',', 'COUNT', '(', 'friend', '.', 'friend_id', ')', 'FROM', 'highschooler', 'JOIN', 'friend', 'ON', 'highschooler', '.', 'ID', '=', 'friend', '.', 'student_id', 'GROUP', 'BY', 'highschooler', '.', 'ID', ';']\",\n \"question\": \"Show the names of high school students and their corresponding number of friends.\",\n \"question_toks\": \"['Show', 'the', 'names', 'of', 'high', 'school', 'students', 'and', 'their', 'corresponding', 'number', 'of', 'friends', '.']}\"\n"}
{"question": "What are the names of the high schoolers and how many friends does each have?", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the names of the high schoolers and how many friends does each have?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'high', 'schoolers', 'and', 'how', 'many', 'friends', 'does', 'each', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"Spider\",\n\"query\": \"SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name\",\n\"query_toks\": \"['SELECT', 'Highschooler', '.', 'name', ',', 'COUNT', '(', 'Friend', '.', 'friend_id', ')', 'FROM', 'Highschooler', 'JOIN', 'Friend', 'ON', 'Highschooler', '.', 'ID', '=', 'Friend', '.', 'student_id', 'GROUP', 'BY', 'Highschooler', '.', 'name']\",\n\"query_toks_no_value\": \"['SELECT', 'Highschooler', '.', 'name', ',', 'COUNT', '(', 'Friend', '.', 'friend_id', ')', 'FROM', 'Highschooler', 'JOIN', 'Friend', 'ON', 'Highschooler', '.', 'ID', '=', 'Friend', '.', 'student_id', 'GROUP', 'BY', 'Highschooler', '.', 'name']\",\n\"question\": \"What are the names of the high schoolers and how many friends does each have?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'high', 'schoolers', 'and', 'how', 'many', 'friends', 'does', 'each', 'have', '?']}\""}
{"question": "What is the name of the high schooler who has the greatest number of friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What is the name of the high schooler who has the greatest number of friends?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'high', 'schooler', 'who', 'has', 'the', 'greatest', 'number', 'of', 'friends', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"network_1\",\n\"query\": \"SELECT highschooler.name FROM highschooler JOIN (SELECT friend_id, COUNT(*) FROM Friend GROUP BY friend_id ORDER BY COUNT(*) DESC LIMIT 1) AS T1 ON highschooler.ID = T1.friend_id\",\n\"query_toks\": \"['SELECT', 'highschooler.name', 'FROM', 'highschooler', 'JOIN', '(', 'SELECT', 'friend_id', ',', 'COUNT', '(', '*', ')', 'FROM', 'Friend', 'GROUP', 'BY', 'friend_id', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1', ')', 'AS', 'T1', 'ON', 'highschooler.ID', '=', 'T1.friend_id']\",\n\"query_toks_no_value\": \"['SELECT', 'highschooler.name', 'FROM', 'highschooler', 'JOIN', '(', 'SELECT', 'friend_id', ',', 'COUNT', '(', '*', ')', 'FROM', 'Friend', 'GROUP', 'BY', 'friend_id', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', 'integer', ')', 'AS', 'T1', 'ON', 'highschooler.ID', '=', 'T1.friend_id']\",\n\"question\": \"What is the name of the high schooler who has the greatest number of friends?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'high', 'schooler', 'who', 'has', 'the', 'greatest', 'number', 'of', 'friends', '?']\"}"}
{"question": "Return the name of the high school student with the most friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Return the name of the high school student with the most friends.\",\n\"question_toks\": \"['Return', 'the', 'name', 'of', 'the', 'high', 'school', 'student', 'with', 'the', 'most', 'friends', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"highschooler_friend_likes\",\n  \"query\": \"SELECT h.name\\nFROM Highschooler h JOIN (SELECT student_id, COUNT(friend_id) AS num_friends\\n                                FROM Friend\\n                                GROUP BY student_id\\n                                ORDER BY num_friends DESC\\n                                LIMIT 1) AS f\\n                    ON h.ID = f.student_id\",\n  \"query_toks\": \"[SELECT, h.name, FROM, Highschooler, h, JOIN, (, SELECT, student_id, ,, COUNT, (, friend_id, ), AS, num_friends, FROM, Friend, GROUP, BY, student_id, ORDER, BY, num_friends, DESC, LIMIT, 1, ), AS, f, ON, h.ID, =, f.student_id]\",\n  \"query_toks_no_value\": \"[SELECT, h.name, FROM, Highschooler, h, JOIN, (, SELECT, student_id, ,, COUNT, (, friend_id, ), AS, num_friends, FROM, Friend, GROUP, BY, student_id, ORDER, BY, num_friends, DESC, LIMIT, 'value', ), AS, f, ON, h.ID, =, f.student_id]\",\n  \"question\": \"Return the name of the high school student with the most friends.\",\n  \"question_toks\": \"['Return', 'the', 'name', 'of', 'the', 'high', 'school', 'student', 'with', 'the', 'most', 'friends', '.']\"\n}"}
{"question": "Show the names of high schoolers who have at least 3 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the names of high schoolers who have at least 3 friends.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'at', 'least', '3', 'friends', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT h.name FROM highschooler h WHERE h.ID IN (SELECT f.student_id FROM Friend f GROUP BY f.student_id HAVING COUNT(*) >= 3)\",\n    \"query_toks\": \"['SELECT', 'h', '.', 'name', 'FROM', 'highschooler', 'AS', 'h', 'WHERE', 'h', '.', 'ID', 'IN', '(', 'SELECT', 'f', '.', 'student_id', 'FROM', 'Friend', 'AS', 'f', 'GROUP', 'BY', 'f', '.', 'student_id', 'HAVING', 'COUNT', '(', '*', ')', '>=', '3', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'h', '.', 'name', 'FROM', 'highschooler', 'AS', 'h', 'WHERE', 'h', '.', 'ID', 'IN', '(', 'SELECT', 'f', '.', 'student_id', 'FROM', 'Friend', 'AS', 'f', 'GROUP', 'BY', 'f', '.', 'student_id', 'HAVING', 'COUNT', '(', '*', ')', '>=', '<value>', ')']\",\n    \"question\": \"Show the names of high schoolers who have at least 3 friends.\",\n    \"question_toks\": \"['Show', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'at', 'least', '3', 'friends', '.']\"\n}"}
{"question": "What are the names of high schoolers who have 3 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the names of high schoolers who have 3 or more friends?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', '3', 'or', 'more', 'friends', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"network_1\",\n\"query\": \"SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F GROUP BY F.student_id HAVING COUNT(F.friend_id) >= 3)\",\n\"query_toks\": \"['SELECT', 'H', '.', 'name', 'FROM', 'Highschooler', 'H', 'WHERE', 'H', '.', 'ID', 'IN', '(', 'SELECT', 'F', '.', 'student_id', 'FROM', 'Friend', 'F', 'GROUP', 'BY', 'F', '.', 'student_id', 'HAVING', 'COUNT', '(', 'F', '.', 'friend_id', ')', '>=', '3', ')']}\",\n\"query_toks_no_value\": \"['SELECT', 'H', '.', 'name', 'FROM', 'Highschooler', 'H', 'WHERE', 'H', '.', 'ID', 'IN', '(', 'SELECT', 'F', '.', 'student_id', 'FROM', 'Friend', 'F', 'GROUP', 'BY', 'F', '.', 'student_id', 'HAVING', 'COUNT', '(', 'F', '.', 'friend_id', ')', '>=', '?', ')']}\",\n\"question\": \"What are the names of high schoolers who have 3 or more friends?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', '3', 'or', 'more', 'friends', '?']}\"\n"}
{"question": "Show the names of all of the high schooler Kyle's friends.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the names of all of the high schooler Kyle's friends.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'all', 'of', 'the', 'high', 'schooler', 'Kyle', \"'s\", 'friends', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT H2.name FROM Highschooler AS H1, Highschooler AS H2, Friend AS F WHERE H1.name='Kyle' AND H1.ID=F.student_id AND F.friend_id=H2.ID\",\n    \"query_toks\": \"['SELECT', 'H2.name', 'FROM', 'Highschooler', 'AS', 'H1', ',', 'Highschooler', 'AS', 'H2', ',', 'Friend', 'AS', 'F', 'WHERE', 'H1.name', '=', '\\\"Kyle\\\"', 'AND', 'H1.ID', '=', 'F.student_id', 'AND', 'F.friend_id', '=', 'H2.ID']\",\n    \"query_toks_no_value\": \"['SELECT', 'H2.name', 'FROM', 'Highschooler', 'AS', 'H1', ',', 'Highschooler', 'AS', 'H2', ',', 'Friend', 'AS', 'F', 'WHERE', 'H1.name', '=', '', 'AND', 'H1.ID', '=', 'F.student_id', 'AND', 'F.friend_id', '=', 'H2.ID']\",\n    \"question\": \"Show the names of all of the high schooler Kyle's friends.\",\n    \"question_toks\": \"['Show', 'the', 'names', 'of', 'all', 'of', 'the', 'high', 'schooler', 'Kyle', \\\"'s\\\", 'friends', '.']\"\n}"}
{"question": "Return the names of friends of the high school student Kyle.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Return the names of friends of the high school student Kyle.\",\n\"question_toks\": \"['Return', 'the', 'names', 'of', 'friends', 'of', 'the', 'high', 'school', 'student', 'Kyle', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT HS.name \\nFROM Highschooler HS, Friend F\\nWHERE HS.ID = F.friend_id \\nAND F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')\",\n    \"query_toks\": \"['SELECT', 'HS', '.', 'name', 'FROM', 'Highschooler', 'HS', ',', 'Friend', 'F', 'WHERE', 'HS', '.', 'ID', '=', 'F', '.', 'friend_id', 'AND', 'F', '.', 'student_id', '=', '(', 'SELECT', 'ID', 'FROM', 'Highschooler', 'WHERE', 'name', '=', ''Kyle'')']\",\n    \"query_toks_no_value\": \"['SELECT', 'HS', '.', 'name', 'FROM', 'Highschooler', 'HS', ',', 'Friend', 'F', 'WHERE', 'HS', '.', 'ID', '=', 'F', '.', 'friend_id', 'AND', 'F', '.', 'student_id', '=', '(', 'SELECT', 'ID', 'FROM', 'Highschooler', 'WHERE', 'name', '=', '']\",\n    \"question\": \"Return the names of friends of the high school student Kyle.\",\n    \"question_toks\": \"['Return', 'the', 'names', 'of', 'friends', 'of', 'the', 'high', 'school', 'student', 'Kyle', '.']\"\n}"}
{"question": "How many friends does the high school student Kyle have?", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"How many friends does the high school student Kyle have?\",\n\"question_toks\": \"['How', 'many', 'friends', 'does', 'the', 'high', 'school', 'student', 'Kyle', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'\",\n  \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Highschooler', 'AS', 'T1', 'JOIN', 'Friend', 'AS', 'T2', 'ON', 'T1', '.', 'ID', '=', 'T2', '.', 'student_id', 'WHERE', 'T1', '.', 'name', '=', '\\\\''Kyle\\\\''']\",\n  \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Highschooler', 'AS', 'T1', 'JOIN', 'Friend', 'AS', 'T2', 'ON', 'T1', '.', 'ID', '=', 'T2', '.', 'student_id', 'WHERE', 'T1', '.', 'name', '=', '\\\\''', '\\\\''']\",\n  \"question\": \"How many friends does the high school student Kyle have?\",\n  \"question_toks\": \"['How', 'many', 'friends', 'does', 'the', 'high', 'school', 'student', 'Kyle', 'have', '?']\"\n}"}
{"question": "Count the number of friends Kyle has.", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Count the number of friends Kyle has.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'friends', 'Kyle', 'has', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT COUNT(*) FROM Friend T1, Highschooler T2 WHERE T1.student_id = T2.ID AND T2.name = 'Kyle'\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Friend\", \"T1\", \",\", \"Highschooler\", \"T2\", \"WHERE\", \"T1.student_id\", \"=\", \"T2.ID\", \"AND\", \"T2.name\", \"=\", \"'Kyle'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Friend\", \"T1\", \",\", \"Highschooler\", \"T2\", \"WHERE\", \"T1.student_id\", \"=\", \"T2.ID\", \"AND\", \"T2.name\", \"=\", \"?\"],\n    \"question\": \"Count the number of friends Kyle has.\",\n    \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"friends\", \"Kyle\", \"has\", \".\"]\n}"}
{"question": "Show ids of all students who do not have any friends.", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show ids of all students who do not have any friends.\",\n\"question_toks\": \"['Show', 'ids', 'of', 'all', 'students', 'who', 'do', 'not', 'have', 'any', 'friends', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)\",\n  \"query_toks\": [\"SELECT\", \"ID\", \"FROM\", \"Highschooler\", \"WHERE\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"student_id\", \"FROM\", \"Friend\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"ID\", \"FROM\", \"Highschooler\", \"WHERE\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"student_id\", \"FROM\", \"Friend\", \")\"],\n  \"question\": \"Show ids of all students who do not have any friends.\",\n  \"question_toks\": [\"Show\", \"ids\", \"of\", \"all\", \"students\", \"who\", \"do\", \"not\", \"have\", \"any\", \"friends\", \".\"]\n}"}
{"question": "What are the ids of high school students who do not have friends?", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the ids of high school students who do not have friends?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'high', 'school', 'students', 'who', 'do', 'not', 'have', 'friends', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"network_1\",\n\"query\": \"SELECT ID FROM highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM friend)\",\n\"query_toks\": \"['SELECT', 'ID', 'FROM', 'highschooler', 'WHERE', 'ID', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'student_id', 'FROM', 'friend', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'ID', 'FROM', 'highschooler', 'WHERE', 'ID', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'student_id', 'FROM', 'friend', ')']\",\n\"question\": \"What are the ids of high school students who do not have friends?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'high', 'school', 'students', 'who', 'do', 'not', 'have', 'friends', '?']\"\n}"}
{"question": "Show names of all high school students who do not have any friends.", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show names of all high school students who do not have any friends.\",\n\"question_toks\": \"['Show', 'names', 'of', 'all', 'high', 'school', 'students', 'who', 'do', 'not', 'have', 'any', 'friends', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"network_1\",\n\"query\": \"SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)\",\n\"query_toks\": \"['SELECT', 'h', '.', 'name', 'FROM', 'Highschooler', 'h', 'WHERE', 'h', '.', 'ID', 'NOT', 'IN', '(', 'SELECT', 'f', '.', 'student_id', 'FROM', 'Friend', 'f', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'h', '.', 'name', 'FROM', 'Highschooler', 'h', 'WHERE', 'h', '.', 'ID', 'NOT', 'IN', '(', 'SELECT', 'f', '.', 'student_id', 'FROM', 'Friend', 'f', ')']\",\n\"question\": \"Show names of all high school students who do not have any friends.\",\n\"question_toks\": \"['Show', 'names', 'of', 'all', 'high', 'school', 'students', 'who', 'do', 'not', 'have', 'any', 'friends', '.']\"\n}"}
{"question": "What are the names of students who have no friends?", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the names of students who have no friends?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'students', 'who', 'have', 'no', 'friends', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"school\",\n    \"query\": \"SELECT highschooler.name FROM highschooler WHERE highschooler.ID NOT IN (SELECT friend.student_id FROM friend)\",\n    \"query_toks\": \"['SELECT', 'highschooler', '.', 'name', 'FROM', 'highschooler', 'WHERE', 'highschooler', '.', 'ID', 'NOT', 'IN', '(', 'SELECT', 'friend', '.', 'student_id', 'FROM', 'friend', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'highschooler', '.', 'name', 'FROM', 'highschooler', 'WHERE', 'highschooler', '.', 'ID', 'NOT', 'IN', '(', 'SELECT', 'friend', '.', 'student_id', 'FROM', 'friend', ')']\",\n    \"question\": \"What are the names of students who have no friends?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'students', 'who', 'have', 'no', 'friends', '?']\"\n}"}
{"question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the ids of high schoolers who have friends and are also liked by someone else.\",\n\"question_toks\": \"['Show', 'the', 'ids', 'of', 'high', 'schoolers', 'who', 'have', 'friends', 'and', 'are', 'also', 'liked', 'by', 'someone', 'else', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"network_1\",\n\"query\": \"SELECT hs.ID FROM highschooler hs JOIN friend f ON hs.ID = f.student_id JOIN likes l ON hs.ID = l.student_id AND f.friend_id = l.liked_id\",\n\"query_toks\": \"['SELECT', 'hs', '.', 'ID', 'FROM', 'highschooler', 'hs', 'JOIN', 'friend', 'f', 'ON', 'hs', '.', 'ID', '=', 'f', '.', 'student_id', 'JOIN', 'likes', 'l', 'ON', 'hs', '.', 'ID', '=', 'l', '.', 'student_id', 'AND', 'f', '.', 'friend_id', '=', 'l', '.', 'liked_id']\",\n\"query_toks_no_value\": \"['SELECT', 'hs', '.', 'ID', 'FROM', 'highschooler', 'hs', 'JOIN', 'friend', 'f', 'ON', 'hs', '.', 'ID', '=', 'f', '.', '<value>', 'JOIN', 'likes', 'l', 'ON', 'hs', '.', 'ID', '=', 'l', '.', '<value>', 'AND', 'f', '.', 'friend_id', '=', 'l', '.', '<value>']\",\n\"question\": \"Show the ids of high schoolers who have friends and are also liked by someone else.\",\n\"question_toks\": \"['Show', 'the', 'ids', 'of', 'high', 'schoolers', 'who', 'have', 'friends', 'and', 'are', 'also', 'liked', 'by', 'someone', 'else', '.']}\"\n"}
{"question": "What are the ids of students who both have friends and are liked?", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the ids of students who both have friends and are liked?\",\n\"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'students', 'who', 'both', 'have', 'friends', 'and', 'are', 'liked', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT DISTINCT Friend.student_id\\nFROM Friend\\nINNER JOIN Likes\\nON Friend.student_id = Likes.student_id\\nAND Friend.friend_id = Likes.liked_id\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 'Friend.student_id', 'FROM', 'Friend', 'INNER', 'JOIN', 'Likes', 'ON', 'Friend.student_id', '=', 'Likes.student_id', 'AND', 'Friend.friend_id', '=', 'Likes.liked_id']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Friend', '.', 'student_id', '\\\\nFROM', 'Friend', '\\\\nINNER', 'JOIN', 'Likes', '\\\\nON', 'Friend', '.', 'student_id', '=', 'Likes', '.', 'student_id', '\\\\nAND', 'Friend', '.', 'friend_id', '=', 'Likes', '.', 'liked_id']\",\n  \"question\": \"What are the ids of students who both have friends and are liked?\",\n  \"question_toks\": \"['What', 'are', 'the', 'ids', 'of', 'students', 'who', 'both', 'have', 'friends', 'and', 'are', 'liked', '?']\"\n}"}
{"question": "Show name of all students who have some friends and also are liked by someone else.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show name of all students who have some friends and also are liked by someone else.\",\n\"question_toks\": \"['Show', 'name', 'of', 'all', 'students', 'who', 'have', 'some', 'friends', 'and', 'also', 'are', 'liked', 'by', 'someone', 'else', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT DISTINCT highschooler.name FROM highschooler, friend, likes WHERE highschooler.ID = friend.student_id AND highschooler.ID = likes.student_id AND highschooler.ID IN (SELECT friend.friend_id FROM friend) AND highschooler.ID IN (SELECT likes.liked_id FROM likes WHERE likes.student_id != highschooler.ID);\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"highschooler.name\", \"FROM\", \"highschooler\", \",\", \"friend\", \",\", \"likes\", \"WHERE\", \"highschooler.ID\", \"=\", \"friend.student_id\", \"AND\", \"highschooler.ID\", \"=\", \"likes.student_id\", \"AND\", \"highschooler.ID\", \"IN\", \"(\", \"SELECT\", \"friend.friend_id\", \"FROM\", \"friend\", \")\", \"AND\", \"highschooler.ID\", \"IN\", \"(\", \"SELECT\", \"likes.liked_id\", \"FROM\", \"likes\", \"WHERE\", \"likes.student_id\", \"!=\", \"highschooler.ID\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"highschooler\", \".\", \"name\", \"FROM\", \"highschooler\", \",\", \"friend\", \",\", \"likes\", \"WHERE\", \"highschooler\", \".\", \"ID\", \"=\", \"friend\", \".\", \"student_id\", \"AND\", \"highschooler\", \".\", \"ID\", \"=\", \"likes\", \".\", \"student_id\", \"AND\", \"highschooler\", \".\", \"ID\", \"IN\", \"(\", \"SELECT\", \"friend\", \".\", \"friend_id\", \"FROM\", \"friend\", \")\", \"AND\", \"highschooler\", \".\", \"ID\", \"IN\", \"(\", \"SELECT\", \"likes\", \".\", \"liked_id\", \"FROM\", \"likes\", \"WHERE\", \"likes\", \".\", \"student_id\", \"!=\", \"highschooler\", \".\", \"ID\", \")\", \";\"],\n  \"question\": \"Show name of all students who have some friends and also are liked by someone else.\",\n  \"question_toks\": [\"Show\", \"name\", \"of\", \"all\", \"students\", \"who\", \"have\", \"some\", \"friends\", \"and\", \"also\", \"are\", \"liked\", \"by\", \"someone\", \"else\", \".\"]\n}"}
{"question": "What are the names of high schoolers who both have friends and are liked?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the names of high schoolers who both have friends and are liked?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'both', 'have', 'friends', 'and', 'are', 'liked', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT DISTINCT T1.name \\nFROM Highschooler T1, Friend T2, Likes T3 \\nWHERE T1.ID = T2.student_id \\nAND T2.friend_id = T3.liked_id;\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'T1.name', 'FROM', 'Highschooler', 'T1', ',', 'Friend', 'T2', ',', 'Likes', 'T3', 'WHERE', 'T1.ID', '=', 'T2.student_id', 'AND', 'T2.friend_id', '=', 'T3.liked_id', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T1', '.', 'name', 'FROM', 'Highschooler', 'T1', ',', 'Friend', 'T2', ',', 'Likes', 'T3', 'WHERE', 'T1', '.', 'ID', '=', 'T2', '.', 'student_id', 'AND', 'T2', '.', 'friend_id', '=', 'T3', '.', 'liked_id', ';']\",\n    \"question\": \"What are the names of high schoolers who both have friends and are liked?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'both', 'have', 'friends', 'and', 'are', 'liked', '?']\"\n}"}
{"question": "Count the number of likes for each student id.", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Count the number of likes for each student id.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'likes', 'for', 'each', 'student', 'id', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id\",\n  \"query_toks\": [\"SELECT\", \"student_id\", \",\", \"COUNT\", \"(\", \"liked_id\", \")\", \"FROM\", \"Likes\", \"GROUP\", \"BY\", \"student_id\"],\n  \"query_toks_no_value\": [\"SELECT\", \"student_id\", \",\", \"COUNT\", \"(\", \"liked_id\", \")\", \"FROM\", \"Likes\", \"GROUP\", \"BY\", \"student_id\"],\n  \"question\": \"Count the number of likes for each student id.\",\n  \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"likes\", \"for\", \"each\", \"student\", \"id\", \".\"]\n}"}
{"question": "How many likes correspond to each student id?", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"How many likes correspond to each student id?\",\n\"question_toks\": \"['How', 'many', 'likes', 'correspond', 'to', 'each', 'student', 'id', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id\",\n    \"query_toks\": \"['SELECT', 'student_id', ',', 'COUNT', '(', 'liked_id', ')', 'FROM', 'Likes', 'GROUP', 'BY', 'student_id']\",\n    \"query_toks_no_value\": \"['SELECT', 'student_id', ',', 'COUNT', '(', 'liked_id', ')', 'FROM', 'Likes', 'GROUP', 'BY', 'student_id']\",\n    \"question\": \"How many likes correspond to each student id?\",\n    \"question_toks\": \"['How', 'many', 'likes', 'correspond', 'to', 'each', 'student', 'id', '?']\"\n}"}
{"question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the names of high schoolers who have likes, and numbers of likes for each.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'likes', ',', 'and', 'numbers', 'of', 'likes', 'for', 'each', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"network_1\",\n\"query\": \"SELECT h.name, COUNT(l.liked_id) FROM highschooler AS h JOIN likes AS l ON h.ID = l.student_id GROUP BY h.name HAVING COUNT(l.liked_id) > 0;\",\n\"query_toks\": \"['SELECT', 'h', '.', 'name', ',', 'COUNT', '(', 'l', '.', 'liked_id', ')', 'FROM', 'highschooler', 'AS', 'h', 'JOIN', 'likes', 'AS', 'l', 'ON', 'h', '.', 'ID', '=', 'l', '.', 'student_id', 'GROUP', 'BY', 'h', '.', 'name', 'HAVING', 'COUNT', '(', 'l', '.', 'liked_id', ')', '>', '0', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'h', '.', 'name', ',', 'COUNT', '(', 'l', '.', '<value>', ')', 'FROM', 'highschooler', 'AS', 'h', 'JOIN', 'likes', 'AS', 'l', 'ON', 'h', '.', 'ID', '=', 'l', '.', 'student_id', 'GROUP', 'BY', 'h', '.', 'name', 'HAVING', 'COUNT', '(', 'l', '.', '<value>', ')', '>', '0', ';']\",\n\"question\": \"Show the names of high schoolers who have likes, and numbers of likes for each.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'likes', ',', 'and', 'numbers', 'of', 'likes', 'for', 'each', '.']\"}"}
{"question": "What are the names of high schoolers who have likes, and how many likes does each have?", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the names of high schoolers who have likes, and how many likes does each have?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'likes', ',', 'and', 'how', 'many', 'likes', 'does', 'each', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) > 0;\",\n  \"query_toks\": \"['SELECT', 'Highschooler', '.', 'name', ',', 'COUNT', '(', 'Likes', '.', 'liked_id', ')', 'FROM', 'Highschooler', 'JOIN', 'Likes', 'ON', 'Highschooler', '.', 'ID', '=', 'Likes', '.', 'student_id', 'GROUP', 'BY', 'Highschooler', '.', 'ID', 'HAVING', 'COUNT', '(', 'Likes', '.', 'liked_id', ')', '>', '0', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'Highschooler', '.', 'name', ',', 'COUNT', '(', 'Likes', '.', 'liked_id', ')', 'FROM', 'Highschooler', 'JOIN', 'Likes', 'ON', 'Highschooler', '.', 'ID', '=', 'Likes', '.', 'student_id', 'GROUP', 'BY', 'Highschooler', '.', 'ID', 'HAVING', 'COUNT', '(', 'Likes', '.', 'liked_id', ')', '>', '?', ';']\",\n  \"question\": \"What are the names of high schoolers who have likes, and how many likes does each have?\",\n  \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'likes', ',', 'and', 'how', 'many', 'likes', 'does', 'each', 'have', '?']\"\n}"}
{"question": "What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What is the name of the high schooler who has the greatest number of likes?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'high', 'schooler', 'who', 'has', 'the', 'greatest', 'number', 'of', 'likes', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"network_1\",\n \"query\": \"SELECT Highschooler.`name` FROM Highschooler JOIN Likes ON Highschooler.`ID` = Likes.`student_id` GROUP BY Highschooler.`ID` ORDER BY COUNT(*) DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'Highschooler', '.', '`name`', 'FROM', 'Highschooler', 'JOIN', 'Likes', 'ON', 'Highschooler', '.', '`ID`', '=', 'Likes', '.', '`student_id`', 'GROUP', 'BY', 'Highschooler', '.', '`ID`', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Highschooler', '.', 'name', 'FROM', 'Highschooler', 'JOIN', 'Likes', 'ON', 'Highschooler', '.', 'ID', '=', 'Likes', '.', 'student_id', 'GROUP', 'BY', 'Highschooler', '.', 'ID', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n \"question\": \"What is the name of the high schooler who has the greatest number of likes?\",\n \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'high', 'schooler', 'who', 'has', 'the', 'greatest', 'number', 'of', 'likes', '?']}\"\n"}
{"question": "Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Give the name of the student with the most likes.\",\n\"question_toks\": \"['Give', 'the', 'name', 'of', 'the', 'student', 'with', 'the', 'most', 'likes', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"school\",\n    \"query\": \"SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY l.student_id ORDER BY COUNT(l.liked_id) DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'h', '.', 'name', 'FROM', 'Highschooler', 'h', 'JOIN', 'Likes', 'l', 'ON', 'h', '.', 'ID', '=', 'l', '.', 'student_id', 'GROUP', 'BY', 'l', '.', 'student_id', 'ORDER', 'BY', 'COUNT', '(', 'l', '.', 'liked_id', ')', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'h', '.', 'name', 'FROM', 'Highschooler', 'h', 'JOIN', 'Likes', 'l', 'ON', 'h', '.', 'ID', '=', 'l', '.', 'student_id', 'GROUP', 'BY', 'l', '.', 'student_id', 'ORDER', 'BY', 'COUNT', '(', 'l', '.', 'liked_id', ')', 'DESC', 'LIMIT', '1']\",\n    \"question\": \"Give the name of the student with the most likes.\",\n    \"question_toks\": \"['Give', 'the', 'name', 'of', 'the', 'student', 'with', 'the', 'most', 'likes', '.']\"\n}"}
{"question": "Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the names of students who have at least 2 likes.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'students', 'who', 'have', 'at', 'least', '2', 'likes', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"high_school\",\n  \"query\": \"SELECT H.name FROM Highschooler H INNER JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(L.liked_id) >= 2\",\n  \"query_toks\": [\"SELECT\", \"H\", \".\", \"name\", \"FROM\", \"Highschooler\", \"H\", \"INNER\", \"JOIN\", \"Likes\", \"L\", \"ON\", \"H\", \".\", \"ID\", \"=\", \"L\", \".\", \"student_id\", \"GROUP\", \"BY\", \"H\", \".\", \"ID\", \"HAVING\", \"COUNT\", \"(\", \"L\", \".\", \"liked_id\", \")\", \">=\", \"2\"],\n  \"query_toks_no_value\": [\"SELECT\", \"H\", \".\", \"name\", \"FROM\", \"Highschooler\", \"H\", \"INNER\", \"JOIN\", \"Likes\", \"L\", \"ON\", \"H\", \".\", \"ID\", \"=\", \"L\", \".\", \"student_id\", \"GROUP\", \"BY\", \"H\", \".\", \"ID\", \"HAVING\", \"COUNT\", \"(\", \"L\", \".\", \"liked_id\", \")\", \">=\", \"?\"],\n  \"question\": \"Show the names of students who have at least 2 likes.\",\n  \"question_toks\": [\"Show\", \"the\", \"names\", \"of\", \"students\", \"who\", \"have\", \"at\", \"least\", \"2\", \"likes\", \".\"]\n}"}
{"question": "What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the names of students who have 2 or more likes?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'students', 'who', 'have', '2', 'or', 'more', 'likes', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"network_1\",\n\"query\": \"SELECT h.name FROM highschooler AS h JOIN likes AS l ON h.ID=l.student_id GROUP BY l.student_id HAVING COUNT(*)>=2;\",\n\"query_toks\": \"['SELECT', 'h', '.', 'name', 'FROM', 'highschooler', 'AS', 'h', 'JOIN', 'likes', 'AS', 'l', 'ON', 'h', '.', 'ID', '=', 'l', '.', 'student_id', 'GROUP', 'BY', 'l', '.', 'student_id', 'HAVING', 'COUNT', '(', '*', ')', '>=', '2', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'h', '.', 'name', 'FROM', 'highschooler', 'AS', 'h', 'JOIN', 'likes', 'AS', 'l', 'ON', 'h', '.', 'ID', '=', 'l', '.', 'student_id', 'GROUP', 'BY', 'l', '.', 'student_id', 'HAVING', 'COUNT', '(', '*', ')', '>=', '2', ';']\",\n\"question\": \"What are the names of students who have 2 or more likes?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'students', 'who', 'have', '2', 'or', 'more', 'likes', '?']\"\n}"}
{"question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Show the names of students who have a grade higher than 5 and have at least 2 friends.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'students', 'who', 'have', 'a', 'grade', 'higher', 'than', '5', 'and', 'have', 'at', 'least', '2', 'friends', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"highschooler_network\",\n  \"query\": \"SELECT DISTINCT s.name FROM highschooler s, friend f1, friend f2 WHERE s.ID=f1.student_id AND s.ID=f2.student_id AND s.grade>5 GROUP BY s.name HAVING COUNT(f1.friend_id)>=2 AND COUNT(f2.friend_id)>=2;\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 's', '.', 'name', 'FROM', 'highschooler', 's', ',', 'friend', 'f1', ',', 'friend', 'f2', 'WHERE', 's', '.', 'ID', '=', 'f1', '.', 'student_id', 'AND', 's', '.', 'ID', '=', 'f2', '.', 'student_id', 'AND', 's', '.', 'grade', '>', '5', 'GROUP', 'BY', 's', '.', 'name', 'HAVING', 'COUNT', '(', 'f1', '.', 'friend_id', ')', '>=', '2', 'AND', 'COUNT', '(', 'f2', '.', 'friend_id', ')', '>=', '2', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 's', '.', 'name', 'FROM', 'highschooler', 's', ',', 'friend', 'f1', ',', 'friend', 'f2', 'WHERE', 's', '.', 'ID', '=', 'f1', '.', 'student_id', 'AND', 's', '.', 'ID', '=', 'f2', '.', 'student_id', 'AND', 's', '.', 'grade', '>', '?', 'GROUP', 'BY', 's', '.', 'name', 'HAVING', 'COUNT', '(', 'f1', '.', 'friend_id', ')', '>=', '?', 'AND', 'COUNT', '(', 'f2', '.', 'friend_id', ')', '>=', '?', ';']\",\n  \"question\": \"Show the names of students who have a grade higher than 5 and have at least 2 friends.\",\n  \"question_toks\": \"['Show', 'the', 'names', 'of', 'students', 'who', 'have', 'a', 'grade', 'higher', 'than', '5', 'and', 'have', 'at', 'least', '2', 'friends', '.']\"\n}"}
{"question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'a', 'grade', 'of', 'over', '5', 'and', 'have', '2', 'or', 'more', 'friends', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"network_1\",\n\"query\": \"SELECT h.name FROM highschooler h JOIN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2) f ON h.ID = f.student_id WHERE h.grade > 5\",\n\"query_toks\": [\"SELECT\", \"h\", \".\", \"name\", \"FROM\", \"highschooler\", \"h\", \"JOIN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"friend\", \"GROUP\", \"BY\", \"student_id\", \"HAVING\", \"COUNT\", \"(\", \"friend_id\", \")\", \">=\", \"2\", \")\", \"f\", \"ON\", \"h\", \".\", \"ID\", \"=\", \"f\", \".\", \"student_id\", \"WHERE\", \"h\", \".\", \"grade\", \">\", \"5\"],\n\"query_toks_no_value\": [\"SELECT\", \"h\", \".\", \"name\", \"FROM\", \"highschooler\", \"h\", \"JOIN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"friend\", \"GROUP\", \"BY\", \"student_id\", \"HAVING\", \"COUNT\", \"(\", \"friend_id\", \")\", \">=\", \"<value>\", \")\", \"f\", \"ON\", \"h\", \".\", \"ID\", \"=\", \"f\", \".\", \"student_id\", \"WHERE\", \"h\", \".\", \"grade\", \">\", \"<value>\"],\n\"question\": \"What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?\",\n\"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"high\", \"schoolers\", \"who\", \"have\", \"a\", \"grade\", \"of\", \"over\", \"5\", \"and\", \"have\", \"2\", \"or\", \"more\", \"friends\", \"?\"]\n}"}
{"question": "How many likes does Kyle have?", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"How many likes does Kyle have?\",\n\"question_toks\": \"['How', 'many', 'likes', 'does', 'Kyle', 'have', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"network_1\",\n\"query\": \"SELECT COUNT(*) FROM Likes T1, Highschooler T2 WHERE T2.name='Kyle' AND T1.student_id=T2.ID\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Likes', 'T1', ',', 'Highschooler', 'T2', 'WHERE', 'T2', '.', 'name', '=', '\\\\''Kyle\\\\''', 'AND', 'T1', '.', 'student_id', '=', 'T2', '.', 'ID']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Likes', 'T1', ',', 'Highschooler', 'T2', 'WHERE', 'T2', '.', 'name', '=', '', 'AND', 'T1', '.', 'student_id', '=', 'T2', '.', 'ID']\",\n\"question\": \"How many likes does Kyle have?\",\n\"question_toks\": \"['How', 'many', 'likes', 'does', 'Kyle', 'have', '?']}\""}
{"question": "Return the number of likes that the high schooler named Kyle has.", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Return the number of likes that the high schooler named Kyle has.\",\n\"question_toks\": \"['Return', 'the', 'number', 'of', 'likes', 'that', 'the', 'high', 'schooler', 'named', 'Kyle', 'has', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT COUNT(*)\\nFROM Likes T1, Highschooler T2\\nWHERE T1.student_id = T2.ID\\nAND T2.name = 'Kyle'\",\n  \"query_toks\": \"[SELECT, COUNT, (, *, ), FROM, Likes, T1, ,, Highschooler, T2, WHERE, T1.student_id, =, T2.ID, AND, T2.name, =, 'Kyle', ]\",\n  \"query_toks_no_value\": \"[SELECT, COUNT, (, *, ), FROM, Likes, T1, ,, Highschooler, T2, WHERE, T1.student_id, =, T2.ID, AND, T2.name, =]\",\n  \"question\": \"Return the number of likes that the high schooler named Kyle has.\",\n  \"question_toks\": \"['Return', 'the', 'number', 'of', 'likes', 'that', 'the', 'high', 'schooler', 'named', 'Kyle', 'has', '.']\"\n}"}
{"question": "Find the average grade of all students who have some friends.", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Find the average grade of all students who have some friends.\",\n\"question_toks\": \"['Find', 'the', 'average', 'grade', 'of', 'all', 'students', 'who', 'have', 'some', 'friends', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"network_1\",\n  \"query\": \"SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)\",\n  \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"grade\", \")\", \"FROM\", \"Highschooler\", \"WHERE\", \"ID\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"Friend\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"grade\", \")\", \"FROM\", \"Highschooler\", \"WHERE\", \"ID\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"Friend\", \")\", \";\"],\n  \"question\": \"Find the average grade of all students who have some friends.\",\n  \"question_toks\": [\"Find\", \"the\", \"average\", \"grade\", \"of\", \"all\", \"students\", \"who\", \"have\", \"some\", \"friends\", \".\"]\n}"}
{"question": "What is the average grade of students who have friends?", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What is the average grade of students who have friends?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'grade', 'of', 'students', 'who', 'have', 'friends', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"highschool\",\n\"query\": \"SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'grade', ')', 'FROM', 'Highschooler', 'WHERE', 'ID', 'IN', '(', 'SELECT', 'student_id', 'FROM', 'Friend', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'grade', ')', 'FROM', 'Highschooler', 'WHERE', 'ID', 'IN', '(', 'SELECT', 'student_id', 'FROM', 'Friend', ')']\",\n\"question\": \"What is the average grade of students who have friends?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'grade', 'of', 'students', 'who', 'have', 'friends', '?']}\"\n"}
{"question": "Find the minimum grade of students who have no friends.", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"Find the minimum grade of students who have no friends.\",\n\"question_toks\": \"['Find', 'the', 'minimum', 'grade', 'of', 'students', 'who', 'have', 'no', 'friends', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"network_1\",\n    \"query\": \"SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)\",\n    \"query_toks\": [\"SELECT\", \"MIN\", \"(\", \"grade\", \")\", \"FROM\", \"Highschooler\", \"WHERE\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"Friend\", \")\", \"AND\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"friend_id\", \"FROM\", \"Friend\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"MIN\", \"(\", \"grade\", \")\", \"FROM\", \"Highschooler\", \"WHERE\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"Friend\", \")\", \"AND\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"friend_id\", \"FROM\", \"Friend\", \")\"],\n    \"question\": \"Find the minimum grade of students who have no friends.\",\n    \"question_toks\": [\"Find\", \"the\", \"minimum\", \"grade\", \"of\", \"students\", \"who\", \"have\", \"no\", \"friends\", \".\"]\n}"}
{"question": "What is the lowest grade of students who do not have any friends?", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nHighschooler: 'ID', 'name', 'grade'\nFriend: 'student_id', 'friend_id'\nLikes: 'student_id', 'liked_id'\n\n{\"db_id\": \"network_1\",\n\"question\": \"What is the lowest grade of students who do not have any friends?\",\n\"question_toks\": \"['What', 'is', 'the', 'lowest', 'grade', 'of', 'students', 'who', 'do', 'not', 'have', 'any', 'friends', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"highschool\",\n  \"query\": \"SELECT MIN(grade) FROM highschooler WHERE ID NOT IN (SELECT student_id FROM friend) AND ID NOT IN (SELECT student_id FROM likes);\",\n  \"query_toks\": [\"SELECT\", \"MIN\", \"(\", \"grade\", \")\", \"FROM\", \"highschooler\", \"WHERE\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"friend\", \")\", \"AND\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"likes\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"MIN\", \"(\", \"grade\", \")\", \"FROM\", \"highschooler\", \"WHERE\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"friend\", \")\", \"AND\", \"ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"student_id\", \"FROM\", \"likes\", \")\", \";\"],\n  \"question\": \"What is the lowest grade of students who do not have any friends?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"lowest\", \"grade\", \"of\", \"students\", \"who\", \"do\", \"not\", \"have\", \"any\", \"friends\", \"?\"]\n}"}
{"question": "Which states have both owners and professionals living there?", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which states have both owners and professionals living there?\",\n\"question_toks\": \"['Which', 'states', 'have', 'both', 'owners', 'and', 'professionals', 'living', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT DISTINCT o.state FROM Owners o INNER JOIN Professionals p ON o.state=p.state\",\n\"query_toks\": \"['SELECT', 'DISTINCT', 'o.state', 'FROM', 'Owners', 'o', 'INNER', 'JOIN', 'Professionals', 'p', 'ON', 'o.state=p.state']\",\n\"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'o', '.', 'state', 'FROM', 'Owners', 'o', 'INNER', 'JOIN', 'Professionals', 'p', 'ON', 'o', '.', 'state', '=', 'p', '.', 'state']\",\n\"question\": \"Which states have both owners and professionals living there?\",\n\"question_toks\": \"['Which', 'states', 'have', 'both', 'owners', 'and', 'professionals', 'living', 'there', '?']\"}"}
{"question": "Find the states where both owners and professionals live.", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the states where both owners and professionals live.\",\n\"question_toks\": \"['Find', 'the', 'states', 'where', 'both', 'owners', 'and', 'professionals', 'live', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT DISTINCT o.state\\nFROM Owners o, Professionals p\\nWHERE o.state = p.state;\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'o', '.', 'state', 'FROM', 'Owners', 'o', ',', 'Professionals', 'p', 'WHERE', 'o', '.', 'state', '=', 'p', '.', 'state', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'o', '.', 'state', 'FROM', 'Owners', 'o', ',', 'Professionals', 'p', 'WHERE', 'o', '.', 'state', '=', 'p', '.', 'state', ';']\",\n    \"question\": \"Find the states where both owners and professionals live.\",\n    \"question_toks\": \"['Find', 'the', 'states', 'where', 'both', 'owners', 'and', 'professionals', 'live', '.']\"\n}"}
{"question": "What is the average age of the dogs who have gone through any treatments?", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What is the average age of the dogs who have gone through any treatments?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'age', 'of', 'the', 'dogs', 'who', 'have', 'gone', 'through', 'any', 'treatments', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT AVG(d.age) FROM Dogs d, Treatments t WHERE d.dog_id = t.dog_id\",\n\"query_toks\": \"['SELECT', 'AVG', '(', 'd', '.', 'age', ')', 'FROM', 'Dogs', 'd', ',', 'Treatments', 't', 'WHERE', 'd', '.', 'dog_id', '=', 't', '.', 'dog_id']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'd', '.', 'age', ')', 'FROM', 'Dogs', 'd', ',', 'Treatments', 't', 'WHERE', 'd', '.', 'dog_id', '=', 't', '.', 'dog_id']\",\n\"question\": \"What is the average age of the dogs who have gone through any treatments?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'age', 'of', 'the', 'dogs', 'who', 'have', 'gone', 'through', 'any', 'treatments', '?']}\""}
{"question": "Find the average age of the dogs who went through treatments.", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the average age of the dogs who went through treatments.\",\n\"question_toks\": \"['Find', 'the', 'average', 'age', 'of', 'the', 'dogs', 'who', 'went', 'through', 'treatments', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)\",\n  \"query_toks\": [\"SELECT\", \"AVG\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"dog_id\", \"IN\", \"(\", \"SELECT\", \"dog_id\", \"FROM\", \"Treatments\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"AVG\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"dog_id\", \"IN\", \"(\", \"SELECT\", \"dog_id\", \"FROM\", \"Treatments\", \")\"],\n  \"question\": \"Find the average age of the dogs who went through treatments.\",\n  \"question_toks\": [\"Find\", \"the\", \"average\", \"age\", \"of\", \"the\", \"dogs\", \"who\", \"went\", \"through\", \"treatments\", \".\"]\n}"}
{"question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.\",\n\"question_toks\": \"['Which', 'professionals', 'live', 'in', 'the', 'state', 'of', 'Indiana', 'or', 'have', 'done', 'treatment', 'on', 'more', 'than', '2', 'treatments', '?', 'List', 'his', 'or', 'her', 'id', ',', 'last', 'name', 'and', 'cell', 'phone', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT professional_id, last_name, cell_number FROM Professionals WHERE state='Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2);\",\n\"query_toks\": \"['SELECT', 'professional_id', ',', 'last_name', ',', 'cell_number', 'FROM', 'Professionals', 'WHERE', 'state', '=', ''Indiana'', 'OR', 'professional_id', 'IN', '(', 'SELECT', 'professional_id', 'FROM', 'Treatments', 'GROUP', 'BY', 'professional_id', 'HAVING', 'COUNT', '(', '*', ')', '>', '2', ')', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'professional_id', ',', 'last_name', ',', 'cell_number', 'FROM', 'Professionals', 'WHERE', 'state', '=', '', 'OR', 'professional_id', 'IN', '(', 'SELECT', 'professional_id', 'FROM', 'Treatments', 'GROUP', 'BY', 'professional_id', 'HAVING', 'COUNT', '(', '*', ')', '>', '2', ')', ';']\",\n\"question\": \"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.\",\n\"question_toks\": \"['Which', 'professionals', 'live', 'in', 'the', 'state', 'of', 'Indiana', 'or', 'have', 'done', 'treatment', 'on', 'more', 'than', '2', 'treatments', '?', 'List', 'his', 'or', 'her', 'id', ',', 'last', 'name', 'and', 'cell', 'phone', '.']}\""}
{"question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.\",\n\"question_toks\": \"['Find', 'the', 'id', ',', 'last', 'name', 'and', 'cell', 'phone', 'of', 'the', 'professionals', 'who', 'live', 'in', 'the', 'state', 'of', 'Indiana', 'or', 'have', 'performed', 'more', 'than', 'two', 'treatments', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)\",\n\"query_toks\": \"['SELECT', 'professional_id', ',', 'last_name', ',', 'cell_number', 'FROM', 'Professionals', 'WHERE', 'state', '=', ''Indiana'', 'OR', 'professional_id', 'IN', '(', 'SELECT', 'professional_id', 'FROM', 'Treatments', 'GROUP', 'BY', 'professional_id', 'HAVING', 'COUNT', '(', '*', ')', '>', '2', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'professional_id', ',', 'last_name', ',', 'cell_number', 'FROM', 'Professionals', 'WHERE', 'state', '=', '', 'OR', 'professional_id', 'IN', '(', 'SELECT', 'professional_id', 'FROM', 'Treatments', 'GROUP', 'BY', 'professional_id', 'HAVING', 'COUNT', '(', '*', ')', '>', '2', ')']\",\n\"question\": \"Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.\",\n\"question_toks\": \"['Find', 'the', 'id', ',', 'last', 'name', 'and', 'cell', 'phone', 'of', 'the', 'professionals', 'who', 'live', 'in', 'the', 'state', 'of', 'Indiana', 'or', 'have', 'performed', 'more', 'than', 'two', 'treatments', '.']\"\n}"}
{"question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .\",\n\"question_toks\": \"['Which', 'dogs', 'have', 'not', 'cost', 'their', 'owner', 'more', 'than', '1000', 'for', 'treatment', '?', 'List', 'the', 'dog', 'names', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT D.name FROM Dogs AS D WHERE D.dog_id NOT IN (SELECT T.dog_id FROM Treatments AS T GROUP BY T.dog_id HAVING SUM(T.cost_of_treatment) > 1000);\",\n\"query_toks\": \"['SELECT', 'D.name', 'FROM', 'Dogs', 'AS', 'D', 'WHERE', 'D.dog_id', 'NOT', 'IN', '(', 'SELECT', 'T.dog_id', 'FROM', 'Treatments', 'AS', 'T', 'GROUP', 'BY', 'T.dog_id', 'HAVING', 'SUM', '(', 'T.cost_of_treatment', ')', '>', '1000', ')', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'D.name', 'FROM', 'Dogs', 'AS', 'D', 'WHERE', 'D.dog_id', 'NOT', 'IN', '(', 'SELECT', 'T.dog_id', 'FROM', 'Treatments', 'AS', 'T', 'GROUP', 'BY', 'T.dog_id', 'HAVING', 'SUM', '(', 'T.cost_of_treatment', ')', '>', '?', ')', ';']\",\n\"question\": \"Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .\",\n\"question_toks\": \"['Which', 'dogs', 'have', 'not', 'cost', 'their', 'owner', 'more', 'than', '1000', 'for', 'treatment', '?', 'List', 'the', 'dog', 'names', '.']\"}"}
{"question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'dogs', 'for', 'which', 'the', 'owner', 'has', 'not', 'spend', 'more', 'than', '1000', 'for', 'treatment', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT d.name FROM Dogs d, Owners o, Treatments t WHERE d.owner_id = o.owner_id AND d.dog_id = t.dog_id AND o.owner_id = t.dog_id AND t.cost_of_treatment <= 1000\",\n  \"query_toks\": [\"SELECT\", \"d\", \".\", \"name\", \"FROM\", \"Dogs\", \"d\", \",\", \"Owners\", \"o\", \",\", \"Treatments\", \"t\", \"WHERE\", \"d\", \".\", \"owner_id\", \"=\", \"o\", \".\", \"owner_id\", \"AND\", \"d\", \".\", \"dog_id\", \"=\", \"t\", \".\", \"dog_id\", \"AND\", \"o\", \".\", \"owner_id\", \"=\", \"t\", \".\", \"dog_id\", \"AND\", \"t\", \".\", \"cost_of_treatment\", \"<=\", \"1000\"],\n  \"query_toks_no_value\": [\"SELECT\", \"d\", \".\", \"name\", \"FROM\", \"Dogs\", \"d\", \",\", \"Owners\", \"o\", \",\", \"Treatments\", \"t\", \"WHERE\", \"d\", \".\", \"owner_id\", \"=\", \"o\", \".\", \"owner_id\", \"AND\", \"d\", \".\", \"dog_id\", \"=\", \"t\", \".\", \"dog_id\", \"AND\", \"o\", \".\", \"owner_id\", \"=\", \"t\", \".\", \"dog_id\", \"AND\", \"t\", \".\", \"cost_of_treatment\", \"<=\"],\n  \"question\": \"What are the names of the dogs for which the owner has not spend more than 1000 for treatment?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"the\", \"dogs\", \"for\", \"which\", \"the\", \"owner\", \"has\", \"not\", \"spend\", \"more\", \"than\", \"1000\", \"for\", \"treatment\", \"?\"]\n}"}
{"question": "Which first names are used for professionals or owners but are not used as dog names?", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which first names are used for professionals or owners but are not used as dog names?\",\n\"question_toks\": \"['Which', 'first', 'names', 'are', 'used', 'for', 'professionals', 'or', 'owners', 'but', 'are', 'not', 'used', 'as', 'dog', 'names', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT DISTINCT owner.first_name \\nFROM Owners AS owner\\nWHERE owner.first_name NOT IN (\\n\\tSELECT dog.name \\n\\tFROM Dogs AS dog\\n)\",\n  \"query_toks\": [\n    \"SELECT\",\n    \"DISTINCT\",\n    \"owner\",\n    \".\",\n    \"first_name\",\n    \"FROM\",\n    \"Owners\",\n    \"AS\",\n    \"owner\",\n    \"WHERE\",\n    \"owner\",\n    \".\",\n    \"first_name\",\n    \"NOT\",\n    \"IN\",\n    \"(\",\n    \"SELECT\",\n    \"dog\",\n    \".\",\n    \"name\",\n    \"FROM\",\n    \"Dogs\",\n    \"AS\",\n    \"dog\",\n    \")\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\",\n    \"DISTINCT\",\n    \"owner\",\n    \".\",\n    \"first_name\",\n    \"FROM\",\n    \"Owners\",\n    \"AS\",\n    \"owner\",\n    \"WHERE\",\n    \"owner\",\n    \".\",\n    \"first_name\",\n    \"NOT\",\n    \"IN\",\n    \"(\",\n    \"SELECT\",\n    \"dog\",\n    \".\",\n    \"name\",\n    \"FROM\",\n    \"Dogs\",\n    \"AS\",\n    \"dog\",\n    \")\"\n  ],\n  \"question\": \"Which first names are used for professionals or owners but are not used as dog names?\",\n  \"question_toks\": [\n    \"Which\",\n    \"first\",\n    \"names\",\n    \"are\",\n    \"used\",\n    \"for\",\n    \"professionals\",\n    \"or\",\n    \"owners\",\n    \"but\",\n    \"are\",\n    \"not\",\n    \"used\",\n    \"as\",\n    \"dog\",\n    \"names\",\n    \"?\"\n  ]\n}"}
{"question": "Find the first names that are used for professionals or owners but are not used as dog names.", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the first names that are used for professionals or owners but are not used as dog names.\",\n\"question_toks\": \"['Find', 'the', 'first', 'names', 'that', 'are', 'used', 'for', 'professionals', 'or', 'owners', 'but', 'are', 'not', 'used', 'as', 'dog', 'names', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT DISTINCT first_name FROM ((SELECT first_name FROM Owners) UNION (SELECT first_name FROM Professionals)) AS T1 WHERE NOT EXISTS (SELECT name FROM Dogs WHERE T1.first_name = Dogs.name)\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'first_name', 'FROM', '(', '(', 'SELECT', 'first_name', 'FROM', 'Owners', ')', 'UNION', '(', 'SELECT', 'first_name', 'FROM', 'Professionals', ')', ')', 'AS', 'T1', 'WHERE', 'NOT', 'EXISTS', '(', 'SELECT', 'name', 'FROM', 'Dogs', 'WHERE', 'T1', '.', 'first_name', '=', 'Dogs', '.', 'name', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'first_name', 'FROM', '(', '(', 'SELECT', 'first_name', 'FROM', 'Owners', ')', 'UNION', '(', 'SELECT', 'first_name', 'FROM', 'Professionals', ')', ')', 'AS', 'T1', 'WHERE', 'NOT', 'EXISTS', '(', 'SELECT', 'name', 'FROM', 'Dogs', 'WHERE', 'T1', '.', 'first_name', '=', 'Dogs', '.', 'name', ')']\",\n    \"question\": \"Find the first names that are used for professionals or owners but are not used as dog names.\",\n    \"question_toks\": \"['Find', 'the', 'first', 'names', 'that', 'are', 'used', 'for', 'professionals', 'or', 'owners', 'but', 'are', 'not', 'used', 'as', 'dog', 'names', '.']\"\n}"}
{"question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which professional did not operate any treatment on dogs? List the professional's id, role and email.\",\n\"question_toks\": \"['Which', 'professional', 'did', 'not', 'operate', 'any', 'treatment', 'on', 'dogs', '?', 'List', 'the', 'professional', \"'s\", 'id', ',', 'role', 'and', 'email', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT P.professional_id, P.role_code, P.email_address FROM Professionals AS P WHERE P.professional_id NOT IN (SELECT T.professional_id FROM Treatments AS T);\",\n  \"query_toks\": \"['SELECT', 'P', '.', 'professional_id', ',', 'P', '.', 'role_code', ',', 'P', '.', 'email_address', 'FROM', 'Professionals', 'AS', 'P', 'WHERE', 'P', '.', 'professional_id', 'NOT', 'IN', '(', 'SELECT', 'T', '.', 'professional_id', 'FROM', 'Treatments', 'AS', 'T', ')', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'P', '.', 'professional_id', ',', 'P', '.', 'role_code', ',', 'P', '.', 'email_address', 'FROM', 'Professionals', 'AS', 'P', 'WHERE', 'P', '.', 'professional_id', 'NOT', 'IN', '(', 'SELECT', 'T', '.', 'professional_id', 'FROM', 'Treatments', 'AS', 'T', ')', ';']\",\n  \"question\": \"Which professional did not operate any treatment on dogs? List the professional's id, role and email.\",\n  \"question_toks\": \"['Which', 'professional', 'did', 'not', 'operate', 'any', 'treatment', 'on', 'dogs', '?', 'List', 'the', 'professional', \\\"'s\\\", 'id', ',', 'role', 'and', 'email', '.']\"\n}"}
{"question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Give me the id, role and email of the professionals who did not perform any treatment on dogs.\",\n\"question_toks\": \"['Give', 'me', 'the', 'id', ',', 'role', 'and', 'email', 'of', 'the', 'professionals', 'who', 'did', 'not', 'perform', 'any', 'treatment', 'on', 'dogs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"dog_kennels\",\n \"query\": \"SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)\",\n \"query_toks\": [\"SELECT\", \"professional_id\", \",\", \"role_code\", \",\", \"email_address\", \"FROM\", \"Professionals\", \"WHERE\", \"professional_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"professional_id\", \"FROM\", \"Treatments\", \")\"],\n \"query_toks_no_value\": [\"SELECT\", \"professional_id\", \",\", \"role_code\", \",\", \"email_address\", \"FROM\", \"Professionals\", \"WHERE\", \"professional_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"DISTINCT\", \"professional_id\", \"FROM\", \"Treatments\", \")\"],\n \"question\": \"Give me the id, role and email of the professionals who did not perform any treatment on dogs.\",\n \"question_toks\": [\"Give\", \"me\", \"the\", \"id\", \",\", \"role\", \"and\", \"email\", \"of\", \"the\", \"professionals\", \"who\", \"did\", \"not\", \"perform\", \"any\", \"treatment\", \"on\", \"dogs\", \".\"]\n}"}
{"question": "Which owner owns the most dogs? List the owner id, first name and last name.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which owner owns the most dogs? List the owner id, first name and last name.\",\n\"question_toks\": \"['Which', 'owner', 'owns', 'the', 'most', 'dogs', '?', 'List', 'the', 'owner', 'id', ',', 'first', 'name', 'and', 'last', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)\",\n    \"query_toks\": \"['SELECT', 'owner_id', ',', 'first_name', ',', 'last_name', 'FROM', 'Owners', 'WHERE', 'owner_id', 'IN', '(', 'SELECT', 'owner_id', 'FROM', 'Dogs', 'GROUP', 'BY', 'owner_id', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'owner_id', ',', 'first_name', ',', 'last_name', 'FROM', 'Owners', 'WHERE', 'owner_id', 'IN', '(', 'SELECT', 'owner_id', 'FROM', 'Dogs', 'GROUP', 'BY', 'owner_id', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1', ')']\",\n    \"question\": \"Which owner owns the most dogs? List the owner id, first name and last name.\",\n    \"question_toks\": \"['Which', 'owner', 'owns', 'the', 'most', 'dogs', '?', 'List', 'the', 'owner', 'id', ',', 'first', 'name', 'and', 'last', 'name', '.']\"\n}"}
{"question": "Return the owner id, first name and last name of the owner who has the most dogs.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Return the owner id, first name and last name of the owner who has the most dogs.\",\n\"question_toks\": \"['Return', 'the', 'owner', 'id', ',', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'owner', 'who', 'has', 'the', 'most', 'dogs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n \"query\": \"SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.owner_id) DESC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'Owners', '.', 'owner_id', ',', 'Owners', '.', 'first_name', ',', 'Owners', '.', 'last_name', 'FROM', 'Owners', 'JOIN', 'Dogs', 'ON', 'Owners', '.', 'owner_id', '=', 'Dogs', '.', 'owner_id', 'GROUP', 'BY', 'Owners', '.', 'owner_id', 'ORDER', 'BY', 'COUNT', '(', 'Dogs', '.', 'owner_id', ')', 'DESC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'Owners', '.', '<column>', ',', 'Owners', '.', '<column>', ',', 'Owners', '.', '<column>', 'FROM', 'Owners', 'JOIN', 'Dogs', 'ON', 'Owners', '.', '<column>', '=', 'Dogs', '.', '<column>', 'GROUP', 'BY', 'Owners', '.', '<column>', 'ORDER', 'BY', 'COUNT', '(', 'Dogs', '.', '<column>', ')', 'DESC', 'LIMIT', 'number']\",\n \"question\": \"Return the owner id, first name and last name of the owner who has the most dogs.\",\n \"question_toks\": \"['Return', 'the', 'owner', 'id', ',', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'owner', 'who', 'has', 'the', 'most', 'dogs', '.']\"}"}
{"question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which professionals have done at least two treatments? List the professional's id, role, and first name.\",\n\"question_toks\": \"['Which', 'professionals', 'have', 'done', 'at', 'least', 'two', 'treatments', '?', 'List', 'the', 'professional', \"'s\", 'id', ',', 'role', ',', 'and', 'first', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT T1.professional_id, T2.role_code, T1.first_name FROM Professionals T1 JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2) AS T3 ON T3.professional_id = T1.professional_id JOIN Professionals T2 ON T2.professional_id = T1.professional_id\",\n\"query_toks\": \"['SELECT', 'T1', '.', 'professional_id', ',', 'T2', '.', 'role_code', ',', 'T1', '.', 'first_name', 'FROM', 'Professionals', 'T1', 'JOIN', '(', 'SELECT', 'professional_id', 'FROM', 'Treatments', 'GROUP', 'BY', 'professional_id', 'HAVING', 'COUNT', '(', '*', ')', '>=', '2', ')', 'AS', 'T3', 'ON', 'T3', '.', 'professional_id', '=', 'T1', '.', 'professional_id', 'JOIN', 'Professionals', 'T2', 'ON', 'T2', '.', 'professional_id', '=', 'T1', '.', 'professional_id']\",\n\"query_toks_no_value\": \"['SELECT', 'T1', '.', 'professional_id', ',', 'T2', '.', 'role_code', ',', 'T1', '.', 'first_name', 'FROM', 'Professionals', 'T1', 'JOIN', '(', 'SELECT', 'professional_id', 'FROM', 'Treatments', 'GROUP', 'BY', 'professional_id', 'HAVING', 'COUNT', '(', '*', ')', '>=', '2', ')', 'AS', 'T3', 'ON', 'T3', '.', 'professional_id', '=', 'T1', '.', 'professional_id', 'JOIN', 'Professionals', 'T2', 'ON', 'T2', '.', 'professional_id', '=', 'T1', '.', 'professional_id']\",\n\"question\": \"Which professionals have done at least two treatments? List the professional's id, role, and first name.\",\n\"question_toks\": \"['Which', 'professionals', 'have', 'done', 'at', 'least', 'two', 'treatments', '?', 'List', 'the', 'professional', \"'s\", 'id', ',', 'role', ',', 'and', 'first', 'name', '.']\"\n}"}
{"question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the id, role, and first name of the professionals who have performed two or more treatments?\",\n\"question_toks\": \"['What', 'are', 'the', 'id', ',', 'role', ',', 'and', 'first', 'name', 'of', 'the', 'professionals', 'who', 'have', 'performed', 'two', 'or', 'more', 'treatments', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT T1.professional_id, T2.role_code, T1.first_name FROM Professionals T1 INNER JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*)>=2) T2 ON T1.professional_id = T2.professional_id\",\n    \"query_toks\": [\"SELECT\", \"T1\", \".\", \"professional_id\", \",\", \"T2\", \".\", \"role_code\", \",\", \"T1\", \".\", \"first_name\", \"FROM\", \"Professionals\", \"T1\", \"INNER\", \"JOIN\", \"(\", \"SELECT\", \"professional_id\", \"FROM\", \"Treatments\", \"GROUP\", \"BY\", \"professional_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"2\", \")\", \"T2\", \"ON\", \"T1\", \".\", \"professional_id\", \"=\", \"T2\", \".\", \"professional_id\"],\n    \"query_toks_no_value\": [\"SELECT\", \"T1\", \".\", \"professional_id\", \",\", \"T2\", \".\", \"role_code\", \",\", \"T1\", \".\", \"first_name\", \"FROM\", \"Professionals\", \"T1\", \"INNER\", \"JOIN\", \"(\", \"SELECT\", \"professional_id\", \"FROM\", \"Treatments\", \"GROUP\", \"BY\", \"professional_id\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">=\", \"2\", \")\", \"T2\", \"ON\", \"T1\", \".\", \"professional_id\", \"=\", \"T2\", \".\", \"professional_id\"],\n    \"question\": \"What are the id, role, and first name of the professionals who have performed two or more treatments?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"id\", \",\", \"role\", \",\", \"and\", \"first\", \"name\", \"of\", \"the\", \"professionals\", \"who\", \"have\", \"performed\", \"two\", \"or\", \"more\", \"treatments\", \"?\"]\n}"}
{"question": "What is the name of the breed with the most dogs?", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What is the name of the breed with the most dogs?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'breed', 'with', 'the', 'most', 'dogs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT breed_name FROM (SELECT COUNT(*) AS count, breed_name FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name) AS counts_by_breed ORDER BY count DESC LIMIT 1\",\n  \"query_toks\": [\"SELECT\", \"breed_name\", \"FROM\", \"(\", \"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \",\", \"breed_name\", \"FROM\", \"Dogs\", \"JOIN\", \"Breeds\", \"ON\", \"Dogs.breed_code\", \"=\", \"Breeds.breed_code\", \"GROUP\", \"BY\", \"breed_name\", \")\", \"AS\", \"counts_by_breed\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"1\"],\n  \"query_toks_no_value\": [\"SELECT\", \"breed_name\", \"FROM\", \"(\", \"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \",\", \"breed_name\", \"FROM\", \"Dogs\", \"JOIN\", \"Breeds\", \"ON\", \"Dogs\", \".\", \"breed_code\", \"=\", \"Breeds\", \".\", \"breed_code\", \"GROUP\", \"BY\", \"breed_name\", \")\", \"AS\", \"counts_by_breed\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"1\"],\n  \"question\": \"What is the name of the breed with the most dogs?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"name\", \"of\", \"the\", \"breed\", \"with\", \"the\", \"most\", \"dogs\", \"?\"]\n}"}
{"question": "Which breed do the most dogs have? Give me the breed name.", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which breed do the most dogs have? Give me the breed name.\",\n\"question_toks\": \"['Which', 'breed', 'do', 'the', 'most', 'dogs', 'have', '?', 'Give', 'me', 'the', 'breed', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT breed_name FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'breed_name', 'FROM', 'Dogs', 'JOIN', 'Breeds', 'ON', 'Dogs', '.', 'breed_code', '=', 'Breeds', '.', 'breed_code', 'GROUP', 'BY', 'breed_name', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'breed_name', 'FROM', 'Dogs', 'JOIN', 'Breeds', 'ON', 'Dogs', '.', 'breed_code', '=', 'Breeds', '.', 'breed_code', 'GROUP', 'BY', 'breed_name', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']\",\n\"question\": \"Which breed do the most dogs have? Give me the breed name.\",\n\"question_toks\": \"['Which', 'breed', 'do', 'the', 'most', 'dogs', 'have', '?', 'Give', 'me', 'the', 'breed', 'name', '.']\"}"}
{"question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.\",\n\"question_toks\": \"['Which', 'owner', 'has', 'paid', 'for', 'the', 'most', 'treatments', 'on', 'his', 'or', 'her', 'dogs', '?', 'List', 'the', 'owner', 'id', 'and', 'last', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;\",\n    \"query_toks\": \"['SELECT', 'Owners', '.', 'owner_id', ',', 'Owners', '.', 'last_name', 'FROM', 'Owners', 'JOIN', 'Dogs', 'ON', 'Owners', '.', 'owner_id', '=', 'Dogs', '.', 'owner_id', 'JOIN', 'Treatments', 'ON', 'Dogs', '.', 'dog_id', '=', 'Treatments', '.', 'dog_id', 'GROUP', 'BY', 'Owners', '.', 'owner_id', 'ORDER', 'BY', 'SUM', '(', 'Treatments', '.', 'cost_of_treatment', ')', 'DESC', 'LIMIT', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'Owners', '.', '<column>', ',', 'Owners', '.', '<column>', 'FROM', 'Owners', 'JOIN', 'Dogs', 'ON', 'Owners', '.', '<column>', '=', 'Dogs', '.', '<column>', 'JOIN', 'Treatments', 'ON', 'Dogs', '.', '<column>', '=', 'Treatments', '.', '<column>', 'GROUP', 'BY', 'Owners', '.', '<column>', 'ORDER', 'BY', 'SUM', '(', 'Treatments', '.', '<column>', ')', 'DESC', 'LIMIT', '1', ';']\",\n    \"question\": \"Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.\",\n    \"question_toks\": \"['Which', 'owner', 'has', 'paid', 'for', 'the', 'most', 'treatments', 'on', 'his', 'or', 'her', 'dogs', '?', 'List', 'the', 'owner', 'id', 'and', 'last', 'name', '.']\"\n}"}
{"question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.\",\n\"question_toks\": \"['Tell', 'me', 'the', 'owner', 'id', 'and', 'last', 'name', 'of', 'the', 'owner', 'who', 'spent', 'the', 'most', 'on', 'treatments', 'of', 'his', 'or', 'her', 'dogs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT o.owner_id, o.last_name FROM Owners o WHERE o.owner_id IN (SELECT d.owner_id FROM Dogs d JOIN (SELECT t.dog_id, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t GROUP BY t.dog_id ORDER BY total_cost DESC LIMIT 1) AS sub ON d.dog_id = sub.dog_id) ORDER BY o.owner_id ASC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'o', '.', 'owner_id', ',', 'o', '.', 'last_name', 'FROM', 'Owners', 'o', 'WHERE', 'o', '.', 'owner_id', 'IN', '(', 'SELECT', 'd', '.', 'owner_id', 'FROM', 'Dogs', 'd', 'JOIN', '(', 'SELECT', 't', '.', 'dog_id', ',', 'SUM', '(', 't', '.', 'cost_of_treatment', ')', 'AS', 'total_cost', 'FROM', 'Treatments', 't', 'GROUP', 'BY', 't', '.', 'dog_id', 'ORDER', 'BY', 'total_cost', 'DESC', 'LIMIT', '1', ')', 'AS', 'sub', 'ON', 'd', '.', 'dog_id', '=', 'sub', '.', 'dog_id', ')', 'ORDER', 'BY', 'o', '.', 'owner_id', 'ASC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'o', '.', 'owner_id', ',', 'o', '.', 'last_name', 'FROM', 'Owners', 'o', 'WHERE', 'o', '.', 'owner_id', 'IN', '(', 'SELECT', 'd', '.', 'owner_id', 'FROM', 'Dogs', 'd', 'JOIN', '(', 'SELECT', 't', '.', 'dog_id', ',', 'SUM', '(', 't', '.', 'cost_of_treatment', ')', 'AS', 'total_cost', 'FROM', 'Treatments', 't', 'GROUP', 'BY', 't', '.', 'dog_id', 'ORDER', 'BY', 'total_cost', 'DESC', 'LIMIT', '1', ')', 'AS', 'sub', 'ON', 'd', '.', 'dog_id', '=', 'sub', '.', 'dog_id', ')', 'ORDER', 'BY', 'o', '.', 'owner_id', 'ASC', 'LIMIT', '1']\",\n\"question\": \"Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.\",\n\"question_toks\": \"['Tell', 'me', 'the', 'owner', 'id', 'and', 'last', 'name', 'of', 'the', 'owner', 'who', 'spent', 'the', 'most', 'on', 'treatments', 'of', 'his', 'or', 'her', 'dogs', '.']}\""}
{"question": "What is the description of the treatment type that costs the least money in total?", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What is the description of the treatment type that costs the least money in total?\",\n\"question_toks\": \"['What', 'is', 'the', 'description', 'of', 'the', 'treatment', 'type', 'that', 'costs', 'the', 'least', 'money', 'in', 'total', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n \"query\": \"SELECT tt.treatment_type_description FROM treatments t, treatment_types tt WHERE t.treatment_type_code = tt.treatment_type_code GROUP BY tt.treatment_type_description ORDER BY SUM(cost_of_treatment) ASC LIMIT 1\",\n \"query_toks\": \"['SELECT', 'tt', '.', 'treatment_type_description', 'FROM', 'treatments', 't', ',', 'treatment_types', 'tt', 'WHERE', 't', '.', 'treatment_type_code', '=', 'tt', '.', 'treatment_type_code', 'GROUP', 'BY', 'tt', '.', 'treatment_type_description', 'ORDER', 'BY', 'SUM', '(', 'cost_of_treatment', ')', 'ASC', 'LIMIT', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'tt', '.', 'treatment_type_description', 'FROM', 'treatments', 't', ',', 'treatment_types', 'tt', 'WHERE', 't', '.', 'treatment_type_code', '=', 'tt', '.', 'treatment_type_code', 'GROUP', 'BY', 'tt', '.', 'treatment_type_description', 'ORDER', 'BY', 'SUM', '(', 'cost_of_treatment', ')', 'ASC', 'LIMIT', '1']\",\n \"question\": \"What is the description of the treatment type that costs the least money in total?\",\n \"question_toks\": \"['What', 'is', 'the', 'description', 'of', 'the', 'treatment', 'type', 'that', 'costs', 'the', 'least', 'money', 'in', 'total', '?']\"}"}
{"question": "Give me the description of the treatment type whose total cost is the lowest.", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Give me the description of the treatment type whose total cost is the lowest.\",\n\"question_toks\": \"['Give', 'me', 'the', 'description', 'of', 'the', 'treatment', 'type', 'whose', 'total', 'cost', 'is', 'the', 'lowest', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT Tt.treatment_type_description\\nFROM Treatments Tr, Treatment_Types Tt\\nWHERE Tr.treatment_type_code = Tt.treatment_type_code\\nGROUP BY Tr.treatment_type_code\\nORDER BY SUM(Tr.cost_of_treatment) ASC\\nLIMIT 1\",\n    \"query_toks\": \"['SELECT', 'Tt', '.', 'treatment_type_description', 'FROM', 'Treatments', 'Tr', ',', 'Treatment_Types', 'Tt', 'WHERE', 'Tr', '.', 'treatment_type_code', '=', 'Tt', '.', 'treatment_type_code', 'GROUP', 'BY', 'Tr', '.', 'treatment_type_code', 'ORDER', 'BY', 'SUM', '(', 'Tr', '.', 'cost_of_treatment', ')', 'ASC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'Tt', '.', 'treatment_type_description', 'FROM', 'Treatments', 'Tr', ',', 'Treatment_Types', 'Tt', 'WHERE', 'Tr', '.', 'treatment_type_code', '=', 'Tt', '.', 'treatment_type_code', 'GROUP', 'BY', 'Tr', '.', 'treatment_type_code', 'ORDER', 'BY', 'SUM', '(', 'Tr', '.', 'cost_of_treatment', ')', 'ASC', 'LIMIT']\",\n    \"question\": \"Give me the description of the treatment type whose total cost is the lowest.\",\n    \"question_toks\": \"['Give', 'me', 'the', 'description', 'of', 'the', 'treatment', 'type', 'whose', 'total', 'cost', 'is', 'the', 'lowest', '.']\"\n}"}
{"question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.\",\n\"question_toks\": \"['Which', 'owner', 'has', 'paid', 'the', 'largest', 'amount', 'of', 'money', 'in', 'total', 'for', 'their', 'dogs', '?', 'Show', 'the', 'owner', 'id', 'and', 'zip', 'code', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT d.owner_id, o.zip_code FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id GROUP BY d.owner_id, o.zip_code ORDER BY SUM(d.cost_of_treatment) DESC LIMIT 1;\",\n    \"query_toks\": \"['SELECT', 'd', '.', 'owner_id', ',', 'o', '.', 'zip_code', 'FROM', 'Dogs', 'd', 'JOIN', 'Owners', 'o', 'ON', 'd', '.', 'owner_id', '=', 'o', '.', 'owner_id', 'GROUP', 'BY', 'd', '.', 'owner_id', ',', 'o', '.', 'zip_code', 'ORDER', 'BY', 'SUM', '(', 'd', '.', 'cost_of_treatment', ')', 'DESC', 'LIMIT', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'd', '.', 'owner_id', ',', 'o', '.', 'zip_code', 'FROM', 'Dogs', 'd', 'JOIN', 'Owners', 'o', 'ON', 'd', '.', 'owner_id', '=', 'o', '.', 'owner_id', 'GROUP', 'BY', 'd', '.', 'owner_id', ',', 'o', '.', 'zip_code', 'ORDER', 'BY', 'SUM', '(', 'd', '.', 'cost_of_treatment', ')', 'DESC', 'LIMIT', '1', ';']\",\n    \"question\": \"Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.\",\n    \"question_toks\": \"['Which', 'owner', 'has', 'paid', 'the', 'largest', 'amount', 'of', 'money', 'in', 'total', 'for', 'their', 'dogs', '?', 'Show', 'the', 'owner', 'id', 'and', 'zip', 'code', '.']\"\n}"}
{"question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.\",\n\"question_toks\": \"['Find', 'the', 'owner', 'id', 'and', 'zip', 'code', 'of', 'the', 'owner', 'who', 'spent', 'the', 'most', 'money', 'in', 'total', 'for', 'his', 'or', 'her', 'dogs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n \"query\": \"SELECT O.owner_id, O.zip_code \\nFROM Owners O, Dogs D, Charges C \\nWHERE O.owner_id = D.owner_id AND D.dog_id = C.dog_id \\nGROUP BY O.owner_id \\nORDER BY SUM(C.charge_amount) DESC \\nLIMIT 1;\",\n \"query_toks\": \"['SELECT', 'O', '.', 'owner_id', ',', 'O', '.', 'zip_code', 'FROM', 'Owners', 'O', ',', 'Dogs', 'D', ',', 'Charges', 'C', 'WHERE', 'O', '.', 'owner_id', '=', 'D', '.', 'owner_id', 'AND', 'D', '.', 'dog_id', '=', 'C', '.', 'dog_id', 'GROUP', 'BY', 'O', '.', 'owner_id', 'ORDER', 'BY', 'SUM', '(', 'C', '.', 'charge_amount', ')', 'DESC', 'LIMIT', '1', ';']\",\n \"query_toks_no_value\": \"['SELECT', 'O', '.', 'owner_id', ',', 'O', '.', 'zip_code', 'FROM', 'Owners', 'O', ',', 'Dogs', 'D', ',', 'Charges', 'C', 'WHERE', 'O', '.', 'owner_id', '=', 'D', '.', 'owner_id', 'AND', 'D', '.', 'dog_id', '=', 'C', '.', 'dog_id', 'GROUP', 'BY', 'O', '.', 'owner_id', 'ORDER', 'BY', 'SUM', '(', 'C', '.', 'charge_amount', ')', 'DESC', 'LIMIT', '1', ';']\",\n \"question\": \"Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.\",\n \"question_toks\": \"['Find', 'the', 'owner', 'id', 'and', 'zip', 'code', 'of', 'the', 'owner', 'who', 'spent', 'the', 'most', 'money', 'in', 'total', 'for', 'his', 'or', 'her', 'dogs', '.']\"}"}
{"question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which professionals have done at least two types of treatments? List the professional id and cell phone.\",\n\"question_toks\": \"['Which', 'professionals', 'have', 'done', 'at', 'least', 'two', 'types', 'of', 'treatments', '?', 'List', 'the', 'professional', 'id', 'and', 'cell', 'phone', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT P.professional_id, P.cell_number\\nFROM (SELECT T.professional_id, COUNT(DISTINCT T.treatment_type_code) AS num_types\\n      FROM Treatments T\\n      GROUP BY T.professional_id\\n      HAVING num_types >= 2) AS PT\\nJOIN Professionals P\\nON PT.professional_id = P.professional_id\",\n\"query_toks\": \"['SELECT', 'P', '.', 'professional_id', ',', 'P', '.', 'cell_number', 'FROM', '(', 'SELECT', 'T', '.', 'professional_id', ',', 'COUNT', '(', 'DISTINCT', 'T', '.', 'treatment_type_code', ')', 'AS', 'num_types', 'FROM', 'Treatments', 'T', 'GROUP', 'BY', 'T', '.', 'professional_id', 'HAVING', 'num_types', '>=', '2', ')', 'AS', 'PT', 'JOIN', 'Professionals', 'P', 'ON', 'PT', '.', 'professional_id', '=', 'P', '.', 'professional_id']\",\n\"query_toks_no_value\": \"['SELECT', 'P', '.', 'professional_id', ',', 'P', '.', 'cell_number', 'FROM', '(', 'SELECT', 'T', '.', 'professional_id', ',', 'COUNT', '(', 'DISTINCT', 'T', '.', 'treatment_type_code', ')', 'AS', 'num_types', 'FROM', 'Treatments', 'T', 'GROUP', 'BY', 'T', '.', 'professional_id', 'HAVING', 'num_types', '>=', '<value>', ')', 'AS', 'PT', 'JOIN', 'Professionals', 'P', 'ON', 'PT', '.', 'professional_id', '=', 'P', '.', 'professional_id']\",\n\"question\": \"Which professionals have done at least two types of treatments? List the professional id and cell phone.\",\n\"question_toks\": \"['Which', 'professionals', 'have', 'done', 'at', 'least', 'two', 'types', 'of', 'treatments', '?', 'List', 'the', 'professional', 'id', 'and', 'cell', 'phone', '.']}\""}
{"question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the id and cell phone of the professionals who operate two or more types of treatments.\",\n\"question_toks\": \"['Find', 'the', 'id', 'and', 'cell', 'phone', 'of', 'the', 'professionals', 'who', 'operate', 'two', 'or', 'more', 'types', 'of', 'treatments', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT T1.professional_id, T1.cell_number FROM Professionals T1 JOIN Treatments T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2\",\n    \"query_toks\": \"['SELECT', 'T1', '.', 'professional_id', ',', 'T1', '.', 'cell_number', 'FROM', 'Professionals', 'T1', 'JOIN', 'Treatments', 'T2', 'ON', 'T1', '.', 'professional_id', '=', 'T2', '.', 'professional_id', 'GROUP', 'BY', 'T1', '.', 'professional_id', 'HAVING', 'COUNT', '(', 'DISTINCT', 'T2', '.', 'treatment_type_code', ')', '>=', '2']\",\n    \"query_toks_no_value\": \"['SELECT', 'T1', '.', 'professional_id', ',', 'T1', '.', 'cell_number', 'FROM', 'Professionals', 'T1', 'JOIN', 'Treatments', 'T2', 'ON', 'T1', '.', 'professional_id', '=', 'T2', '.', 'professional_id', 'GROUP', 'BY', 'T1', '.', 'professional_id', 'HAVING', 'COUNT', '(', 'DISTINCT', 'T2', '.', 'treatment_type_code', ')', '>=', '?']\",\n    \"question\": \"Find the id and cell phone of the professionals who operate two or more types of treatments.\",\n    \"question_toks\": \"['Find', 'the', 'id', 'and', 'cell', 'phone', 'of', 'the', 'professionals', 'who', 'operate', 'two', 'or', 'more', 'types', 'of', 'treatments', '.']\"\n}"}
{"question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the first name and last name of the professionals who have done treatment with cost below average?\",\n\"question_toks\": \"['What', 'are', 'the', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'professionals', 'who', 'have', 'done', 'treatment', 'with', 'cost', 'below', 'average', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT DISTINCT Professionals.first_name, Professionals.last_name\\nFROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\\nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Professionals', '.', 'first_name', ',', 'Professionals', '.', 'last_name', 'FROM', 'Professionals', 'JOIN', 'Treatments', 'ON', 'Professionals', '.', 'professional_id', '=', 'Treatments', '.', 'professional_id', 'WHERE', 'Treatments', '.', 'cost_of_treatment', '<', '(', 'SELECT', 'AVG', '(', 'cost_of_treatment', ')', 'FROM', 'Treatments', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Professionals', '.', 'first_name', ',', 'Professionals', '.', 'last_name', 'FROM', 'Professionals', 'JOIN', 'Treatments', 'ON', 'Professionals', '.', 'professional_id', '=', 'Treatments', '.', 'professional_id', 'WHERE', 'Treatments', '.', 'cost_of_treatment', '<', '(', 'SELECT', 'AVG', '(', 'cost_of_treatment', ')', 'FROM', 'Treatments', ')']\",\n    \"question\": \"What are the first name and last name of the professionals who have done treatment with cost below average?\",\n    \"question_toks\": \"['What', 'are', 'the', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'professionals', 'who', 'have', 'done', 'treatment', 'with', 'cost', 'below', 'average', '?']\"\n}"}
{"question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.\",\n\"question_toks\": \"['Which', 'professionals', 'have', 'operated', 'a', 'treatment', 'that', 'costs', 'less', 'than', 'the', 'average', '?', 'Give', 'me', 'theor', 'first', 'names', 'and', 'last', 'names', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT DISTINCT P.first_name, P.last_name FROM Professionals P, Treatments T WHERE T.professional_id = P.professional_id AND T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);\",\n  \"query_toks\": [\"SELECT\", \"DISTINCT\", \"P.first_name\", \",\", \"P.last_name\", \"FROM\", \"Professionals\", \"P\", \",\", \"Treatments\", \"T\", \"WHERE\", \"T.professional_id\", \"=\", \"P.professional_id\", \"AND\", \"T.cost_of_treatment\", \"<\", \"(\", \"SELECT\", \"AVG\", \"(\", \"cost_of_treatment\", \")\", \"FROM\", \"Treatments\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"DISTINCT\", \"P.first_name\", \",\", \"P.last_name\", \"FROM\", \"Professionals\", \"P\", \",\", \"Treatments\", \"T\", \"WHERE\", \"T.professional_id\", \"=\", \"P.professional_id\", \"AND\", \"T.cost_of_treatment\", \"<\", \"(\", \"SELECT\", \"AVG\", \"(\", \"cost_of_treatment\", \")\", \"FROM\", \"Treatments\", \")\", \";\"],\n  \"question\": \"Which professionals have operated a treatment that costs less than the average? Give me their first names and last names.\",\n  \"question_toks\": [\"Which\", \"professionals\", \"have\", \"operated\", \"a\", \"treatment\", \"that\", \"costs\", \"less\", \"than\", \"the\", \"average\", \"?\", \"Give\", \"me\", \"their\", \"first\", \"names\", \"and\", \"last\", \"names\", \".\"]\n}"}
{"question": "List the date of each treatment, together with the first name of the professional who operated it.", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List the date of each treatment, together with the first name of the professional who operated it.\",\n\"question_toks\": \"['List', 'the', 'date', 'of', 'each', 'treatment', ',', 'together', 'with', 'the', 'first', 'name', 'of', 'the', 'professional', 'who', 'operated', 'it', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id\",\n\"query_toks\": \"['SELECT', 'Treatments.date_of_treatment', ',', 'Professionals.first_name', 'FROM', 'Treatments', 'JOIN', 'Professionals', 'ON', 'Treatments.professional_id', '=', 'Professionals.professional_id']\",\n\"query_toks_no_value\": \"['SELECT', 'date_of_treatment', ',', 'first_name', 'FROM', 'Treatments', 'JOIN', 'Professionals', 'ON', 'Treatments.professional_id', '=', 'Professionals.professional_id']\",\n\"question\": \"List the date of each treatment, together with the first name of the professional who operated it.\",\n\"question_toks\": \"['List', 'the', 'date', 'of', 'each', 'treatment', ',', 'together', 'with', 'the', 'first', 'name', 'of', 'the', 'professional', 'who', 'operated', 'it', '.']\"\n}"}
{"question": "What are the date and the operating professional's first name of each treatment?", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the date and the operating professional's first name of each treatment?\",\n\"question_toks\": \"['What', 'are', 'the', 'date', 'and', 'the', 'operating', 'professional', \"'s\", 'first', 'name', 'of', 'each', 'treatment', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT date_of_treatment, first_name \\nFROM Treatments T\\nJOIN Professionals P ON T.professional_id = P.professional_id;\",\n  \"query_toks\": \"['SELECT', 'date_of_treatment', ',', 'first_name', 'FROM', 'Treatments', 'T', 'JOIN', 'Professionals', 'P', 'ON', 'T.professional_id', '=', 'P.professional_id', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'date_of_treatment', ',', 'first_name', 'FROM', 'Treatments', 'T', 'JOIN', 'Professionals', 'P', 'ON', 'T', '.', 'professional_id', '=', 'P', '.', 'professional_id', ';']\",\n  \"question\": \"What are the date and the operating professional's first name of each treatment?\",\n  \"question_toks\": \"['What', 'are', 'the', 'date', 'and', 'the', 'operating', 'professional', \"'s\", 'first', 'name', 'of', 'each', 'treatment', '?']\"\n}"}
{"question": "List the cost of each treatment and the corresponding treatment type description.", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List the cost of each treatment and the corresponding treatment type description.\",\n\"question_toks\": \"['List', 'the', 'cost', 'of', 'each', 'treatment', 'and', 'the', 'corresponding', 'treatment', 'type', 'description', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\",\n  \"query_toks\": [\"SELECT\", \"Treatments.cost_of_treatment\", \",\", \"Treatment_Types.treatment_type_description\", \"FROM\", \"Treatments\", \"JOIN\", \"Treatment_Types\", \"ON\", \"Treatments.treatment_type_code\", \"=\", \"Treatment_Types.treatment_type_code\"],\n  \"query_toks_no_value\": [\"SELECT\", \",\", \"FROM\", \"JOIN\", \"ON\", \"=\", \".\"],\n  \"question\": \"List the cost of each treatment and the corresponding treatment type description.\",\n  \"question_toks\": [\"List\", \"the\", \"cost\", \"of\", \"each\", \"treatment\", \"and\", \"the\", \"corresponding\", \"treatment\", \"type\", \"description\", \".\"]\n}"}
{"question": "What are the cost and treatment type description of each treatment?", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the cost and treatment type description of each treatment?\",\n\"question_toks\": \"['What', 'are', 'the', 'cost', 'and', 'treatment', 'type', 'description', 'of', 'each', 'treatment', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT cost_of_treatment, treatment_type_description FROM Treatments T1 JOIN Treatment_Types T2 ON T1.treatment_type_code=T2.treatment_type_code\",\n\"query_toks\": \"['SELECT', 'cost_of_treatment', ',', 'treatment_type_description', 'FROM', 'Treatments', 'T1', 'JOIN', 'Treatment_Types', 'T2', 'ON', 'T1', '.', 'treatment_type_code', '=', 'T2', '.', 'treatment_type_code']\",\n\"query_toks_no_value\": \"['SELECT', ',', 'FROM', 'Treatments', 'T1', 'JOIN', 'Treatment_Types', 'T2', 'ON', 'T1', '.', 'treatment_type_code', '=', 'T2', '.', 'treatment_type_code']\",\n\"question\": \"What are the cost and treatment type description of each treatment?\",\n\"question_toks\": \"['What', 'are', 'the', 'cost', 'and', 'treatment', 'type', 'description', 'of', 'each', 'treatment', '?']\"\n}"}
{"question": "List each owner's first name, last name, and the size of his for her dog.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List each owner's first name, last name, and the size of his for her dog.\",\n\"question_toks\": \"['List', 'each', 'owner', \"'s\", 'first', 'name', ',', 'last', 'name', ',', 'and', 'the', 'size', 'of', 'his', 'for', 'her', 'dog', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code\",\n    \"query_toks\": \"['SELECT', 'o.first_name', ',', 'o.last_name', ',', 's.size_description', 'FROM', 'Owners', 'o', 'JOIN', 'Dogs', 'd', 'ON', 'o.owner_id', '=', 'd.owner_id', 'JOIN', 'Sizes', 's', 'ON', 'd.size_code', '=', 's.size_code']\",\n    \"query_toks_no_value\": \"['SELECT', 'o', '.', 'first_name', ',', 'o', '.', 'last_name', ',', 's', '.', 'size_description', 'FROM', 'Owners', 'o', 'JOIN', 'Dogs', 'd', 'ON', 'o', '.', 'owner_id', '=', 'd', '.', 'owner_id', 'JOIN', 'Sizes', 's', 'ON', 'd', '.', 'size_code', '=', 's', '.', 'size_code']\",\n    \"question\": \"List each owner's first name, last name, and the size of his or her dog.\",\n    \"question_toks\": \"['List', 'each', 'owner', \\\"'s\\\", 'first', 'name', ',', 'last', 'name', ',', 'and', 'the', 'size', 'of', 'his', 'or', 'her', 'dog', '.']\"\n}"}
{"question": "What are each owner's first name, last name, and the size of their dog?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are each owner's first name, last name, and the size of their dog?\",\n\"question_toks\": \"['What', 'are', 'each', 'owner', \"'s\", 'first', 'name', ',', 'last', 'name', ',', 'and', 'the', 'size', 'of', 'their', 'dog', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;\",\n\"query_toks\": \"['SELECT', 'Owners', '.', 'first_name', ',', 'Owners', '.', 'last_name', ',', 'Sizes', '.', 'size_description', 'FROM', 'Owners', 'JOIN', 'Dogs', 'ON', 'Owners', '.', 'owner_id', '=', 'Dogs', '.', 'owner_id', 'JOIN', 'Sizes', 'ON', 'Dogs', '.', 'size_code', '=', 'Sizes', '.', 'size_code', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'Owners', '.', 'first_name', ',', 'Owners', '.', 'last_name', ',', 'Sizes', '.', 'size_description', 'FROM', 'Owners', 'JOIN', 'Dogs', 'ON', 'Owners', '.', 'owner_id', '=', 'Dogs', '.', 'owner_id', 'JOIN', 'Sizes', 'ON', 'Dogs', '.', 'size_code', '=', 'Sizes', '.', 'size_code', ';']\",\n\"question\": \"What are each owner's first name, last name, and the size of their dog?\",\n\"question_toks\": \"['What', 'are', 'each', 'owner', \"'s\", 'first', 'name', ',', 'last', 'name', ',', 'and', 'the', 'size', 'of', 'their', 'dog', '?']\"\n}"}
{"question": "List pairs of the owner's first name and the dogs's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List pairs of the owner's first name and the dogs's name.\",\n\"question_toks\": \"['List', 'pairs', 'of', 'the', 'owner', \"'s\", 'first', 'name', 'and', 'the', 'dogs', \"'s\", 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id\",\n    \"query_toks\": \"['SELECT', 'Owners.first_name', ',', 'Dogs.name', 'FROM', 'Owners', 'JOIN', 'Dogs', 'ON', 'Owners.owner_id', '=', 'Dogs.owner_id']\",\n    \"query_toks_no_value\": \"['SELECT', 'Owners', '.', 'first_name', ',', 'Dogs', '.', 'name', 'FROM', 'Owners', 'JOIN', 'Dogs', 'ON', 'Owners', '.', 'owner_id', '=', 'Dogs', '.', 'owner_id']\",\n    \"question\": \"List pairs of the owner's first name and the dogs's name.\",\n    \"question_toks\": \"['List', 'pairs', 'of', 'the', 'owner', \\\"'s\\\", 'first', 'name', 'and', 'the', 'dogs', \\\"'s\\\", 'name', '.']\"\n}"}
{"question": "What are each owner's first name and their dogs's name?", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are each owner's first name and their dogs's name?\",\n\"question_toks\": \"['What', 'are', 'each', 'owner', \"'s\", 'first', 'name', 'and', 'their', 'dogs', \"'s\", 'name', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT o.first_name, d.name FROM Owners T1 INNER JOIN Dogs T2 ON T1.owner_id = T2.owner_id\",\n  \"query_toks\": \"['SELECT', 'o', '.', 'first_name', ',', 'd', '.', 'name', 'FROM', 'Owners', 'T1', 'INNER', 'JOIN', 'Dogs', 'T2', 'ON', 'T1', '.', 'owner_id', '=', 'T2', '.', 'owner_id']\",\n  \"query_toks_no_value\": \"['SELECT', 'o', '.', 'first_name', ',', 'd', '.', 'name', 'FROM', 'Owners', 'T1', 'INNER', 'JOIN', 'Dogs', 'T2', 'ON', 'T1', '.', 'owner_id', '=', 'T2', '.', 'owner_id']\",\n  \"question\": \"What are each owner's first name and their dogs's name?\",\n  \"question_toks\": \"['What', 'are', 'each', 'owner', \\\"'s\\\", 'first', 'name', 'and', 'their', 'dogs', \\\"'s\\\", 'name', '?']\"\n}"}
{"question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List the names of the dogs of the rarest breed and the treatment dates of them.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'the', 'dogs', 'of', 'the', 'rarest', 'breed', 'and', 'the', 'treatment', 'dates', 'of', 'them', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN (SELECT dog_id, date_of_treatment FROM Treatments WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatment_Types WHERE treatment_type_description = 'rarest')) AS T ON D.dog_id = T.dog_id JOIN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1) AS R ON D.breed_code = R.breed_code\",\n\"query_toks\": \"['SELECT', 'D.name', ',', 'T.date_of_treatment', 'FROM', 'Dogs', 'AS', 'D', 'JOIN', '(', 'SELECT', 'dog_id', ',', 'date_of_treatment', 'FROM', 'Treatments', 'WHERE', 'treatment_type_code', '=', '(', 'SELECT', 'treatment_type_code', 'FROM', 'Treatment_Types', 'WHERE', 'treatment_type_description', '=', '\\\\''rarest\\\\''', ')', ')', 'AS', 'T', 'ON', 'D.dog_id', '=', 'T.dog_id', 'JOIN', '(', 'SELECT', 'breed_code', 'FROM', 'Dogs', 'GROUP', 'BY', 'breed_code', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'LIMIT', '1', ')', 'AS', 'R', 'ON', 'D.breed_code', '=', 'R.breed_code']\",\n\"query_toks_no_value\": \"['SELECT', 'D.name', ',', 'T.date_of_treatment', 'FROM', 'Dogs', 'AS', 'D', 'JOIN', '(', 'SELECT', 'dog_id', ',', 'date_of_treatment', 'FROM', 'Treatments', 'WHERE', 'treatment_type_code', '=', '(', 'SELECT', 'treatment_type_code', 'FROM', 'Treatment_Types', 'WHERE', 'treatment_type_description', '=', '\\\\''rarest\\\\''', ')', ')', 'AS', 'T', 'ON', 'D.dog_id', '=', 'T.dog_id', 'JOIN', '(', 'SELECT', 'breed_code', 'FROM', 'Dogs', 'GROUP', 'BY', 'breed_code', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'LIMIT', '1', ')', 'AS', 'R', 'ON', 'D.breed_code', '=', 'R.breed_code']\",\n\"question\": \"List the names of the dogs of the rarest breed and the treatment dates of them.\",\n\"question_toks\": \"['List', 'the', 'names', 'of', 'the', 'dogs', 'of', 'the', 'rarest', 'breed', 'and', 'the', 'treatment', 'dates', 'of', 'them', '.']\"}"}
{"question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which dogs are of the rarest breed? Show their names and treatment dates.\",\n\"question_toks\": \"['Which', 'dogs', 'are', 'of', 'the', 'rarest', 'breed', '?', 'Show', 'their', 'names', 'and', 'treatment', 'dates', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT D.name, T.date_of_treatment FROM Dogs AS D, Breeds AS B, Treatments AS T WHERE D.breed_code = B.breed_code AND D.dog_id = T.dog_id AND B.breed_name = (SELECT B.breed_name FROM Breeds AS B, Dogs AS D WHERE D.breed_code = B.breed_code GROUP BY B.breed_name ORDER BY COUNT(D.breed_code) ASC LIMIT 1);\",\n\"query_toks\": \"['SELECT', 'D.name', ',', 'T.date_of_treatment', 'FROM', 'Dogs', 'AS', 'D', ',', 'Breeds', 'AS', 'B', ',', 'Treatments', 'AS', 'T', 'WHERE', 'D.breed_code', '=', 'B.breed_code', 'AND', 'D.dog_id', '=', 'T.dog_id', 'AND', 'B.breed_name', '=', '(', 'SELECT', 'B.breed_name', 'FROM', 'Breeds', 'AS', 'B', ',', 'Dogs', 'AS', 'D', 'WHERE', 'D.breed_code', '=', 'B.breed_code', 'GROUP', 'BY', 'B.breed_name', 'ORDER', 'BY', 'COUNT(', 'D.breed_code', ')', 'ASC', 'LIMIT', '1', ')', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'D.name', ',', 'T.date_of_treatment', 'FROM', 'Dogs', 'AS', 'D', ',', 'Breeds', 'AS', 'B', ',', 'Treatments', 'AS', 'T', 'WHERE', 'D.breed_code', '=', 'B.breed_code', 'AND', 'D.dog_id', '=', 'T.dog_id', 'AND', 'B.breed_name', '=', '(', 'SELECT', 'B.breed_name', 'FROM', 'Breeds', 'AS', 'B', ',', 'Dogs', 'AS', 'D', 'WHERE', 'D.breed_code', '=', 'B.breed_code', 'GROUP', 'BY', 'B.breed_name', 'ORDER', 'BY', 'COUNT', '(', 'D.breed_code', ')', 'ASC', 'LIMIT', '1', ')', ';']\",\n\"question\": \"Which dogs are of the rarest breed? Show their names and treatment dates.\",\n\"question_toks\": \"['Which', 'dogs', 'are', 'of', 'the', 'rarest', 'breed', '?', 'Show', 'their', 'names', 'and', 'treatment', 'dates', '.']}\""}
{"question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.\",\n\"question_toks\": \"['Which', 'dogs', 'are', 'owned', 'by', 'someone', 'who', 'lives', 'in', 'Virginia', '?', 'List', 'the', 'owner', \"'s\", 'first', 'name', 'and', 'the', 'dog', \"'s\", 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT o.first_name, d.name FROM dogs d JOIN owners o ON d.owner_id=o.owner_id WHERE o.state='Virginia';\",\n    \"query_toks\": \"['SELECT', 'o', '.', 'first_name', ',', 'd', '.', 'name', 'FROM', 'dogs', 'd', 'JOIN', 'owners', 'o', 'ON', 'd', '.', 'owner_id', '=', 'o', '.', 'owner_id', 'WHERE', 'o', '.', 'state', '=', \\\"Virginia\\\", ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'o', '.', 'first_name', ',', 'd', '.', 'name', 'FROM', 'dogs', 'd', 'JOIN', 'owners', 'o', 'ON', 'd', '.', 'owner_id', '=', 'o', '.', 'owner_id', 'WHERE', 'o', '.', 'state', '=', '?', ';']\",\n    \"question\": \"Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.\",\n    \"question_toks\": \"['Which', 'dogs', 'are', 'owned', 'by', 'someone', 'who', 'lives', 'in', 'Virginia', '?', 'List', 'the', 'owner', \\\"'s\\\", 'first', 'name', 'and', 'the', 'dog', \\\"'s\\\", 'name', '.']\"\n}"}
{"question": "Find the first names of owners living in Virginia and the names of dogs they own.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the first names of owners living in Virginia and the names of dogs they own.\",\n\"question_toks\": \"['Find', 'the', 'first', 'names', 'of', 'owners', 'living', 'in', 'Virginia', 'and', 'the', 'names', 'of', 'dogs', 'they', 'own', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n \"query\": \"SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'\",\n \"query_toks\": [\"SELECT\", \"o\", \".\", \"first_name\", \",\", \"d\", \".\", \"name\", \"FROM\", \"Owners\", \"o\", \"JOIN\", \"Dogs\", \"d\", \"ON\", \"o\", \".\", \"owner_id\", \"=\", \"d\", \".\", \"owner_id\", \"WHERE\", \"o\", \".\", \"state\", \"=\", \"'Virginia'\"],\n \"query_toks_no_value\": [\"SELECT\", \"o\", \".\", \"first_name\", \",\", \"d\", \".\", \"name\", \"FROM\", \"Owners\", \"o\", \"JOIN\", \"Dogs\", \"d\", \"ON\", \"o\", \".\", \"owner_id\", \"=\", \"d\", \".\", \"owner_id\", \"WHERE\", \"o\", \".\", \"state\", \"=\"],\n \"question\": \"Find the first names of owners living in Virginia and the names of dogs they own.\",\n \"question_toks\": [\"Find\", \"the\", \"first\", \"names\", \"of\", \"owners\", \"living\", \"in\", \"Virginia\", \"and\", \"the\", \"names\", \"of\", \"dogs\", \"they\", \"own\", \".\"]\n}"}
{"question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the arriving date and the departing date of the dogs who have gone through a treatment?\",\n\"question_toks\": \"['What', 'are', 'the', 'arriving', 'date', 'and', 'the', 'departing', 'date', 'of', 'the', 'dogs', 'who', 'have', 'gone', 'through', 'a', 'treatment', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT d.date_arrived, d.date_departed FROM dogs AS d, treatments AS t WHERE d.dog_id=t.dog_id;\",\n\"query_toks\": \"['SELECT', 'd', '.', 'date_arrived', ',', 'd', '.', 'date_departed', 'FROM', 'dogs', 'AS', 'd', ',', 'treatments', 'AS', 't', 'WHERE', 'd', '.', 'dog_id', '=', 't', '.', 'dog_id', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'd', '.', 'date_arrived', ',', 'd', '.', 'date_departed', 'FROM', 'dogs', 'AS', 'd', ',', 'treatments', 'AS', 't', 'WHERE', 'd', '.', 'dog_id', '=', 't', '.', 'dog_id', ';']\",\n\"question\": \"What are the arriving date and the departing date of the dogs who have gone through a treatment?\",\n\"question_toks\": \"['What', 'are', 'the', 'arriving', 'date', 'and', 'the', 'departing', 'date', 'of', 'the', 'dogs', 'who', 'have', 'gone', 'through', 'a', 'treatment', '?']}\"\n"}
{"question": "Find the arriving date and the departing date of the dogs that received a treatment.", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the arriving date and the departing date of the dogs that received a treatment.\",\n\"question_toks\": \"['Find', 'the', 'arriving', 'date', 'and', 'the', 'departing', 'date', 'of', 'the', 'dogs', 'that', 'received', 'a', 'treatment', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id\",\n  \"query_toks\": [\"SELECT\", \"d.date_arrived,\", \"d.date_departed\", \"FROM\", \"Dogs\", \"d\", \"JOIN\", \"Treatments\", \"t\", \"ON\", \"d.dog_id\", \"=\", \"t.dog_id\"],\n  \"query_toks_no_value\": [\"SELECT\", \"date_arrived\", \",\", \"date_departed\", \"FROM\", \"Dogs\", \"d\", \"JOIN\", \"Treatments\", \"t\", \"ON\", \"d\", \".\", \"dog_id\", \"=\", \"t\", \".\", \"dog_id\"],\n  \"question\": \"Find the arriving date and the departing date of the dogs that received a treatment.\",\n  \"question_toks\": [\"Find\", \"the\", \"arriving\", \"date\", \"and\", \"the\", \"departing\", \"date\", \"of\", \"the\", \"dogs\", \"that\", \"received\", \"a\", \"treatment\", \".\"]\n}"}
{"question": "List the last name of the owner owning the youngest dog.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List the last name of the owner owning the youngest dog.\",\n\"question_toks\": \"['List', 'the', 'last', 'name', 'of', 'the', 'owner', 'owning', 'the', 'youngest', 'dog', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT o.last_name FROM Owners o, Dogs d WHERE o.owner_id = d.owner_id AND d.age = (SELECT MIN(age) FROM Dogs)\",\n    \"query_toks\": [\"SELECT\", \"o\", \".\", \"last_name\", \"FROM\", \"Owners\", \"o\", \",\", \"Dogs\", \"d\", \"WHERE\", \"o\", \".\", \"owner_id\", \"=\", \"d\", \".\", \"owner_id\", \"AND\", \"d\", \".\", \"age\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"o\", \".\", \"last_name\", \"FROM\", \"Owners\", \"o\", \",\", \"Dogs\", \"d\", \"WHERE\", \"o\", \".\", \"owner_id\", \"=\", \"d\", \".\", \"owner_id\", \"AND\", \"d\", \".\", \"age\", \"=\", \"(\", \"SELECT\", \"MIN\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\", \")\"],\n    \"question\": \"List the last name of the owner owning the youngest dog.\",\n    \"question_toks\": [\"List\", \"the\", \"last\", \"name\", \"of\", \"the\", \"owner\", \"owning\", \"the\", \"youngest\", \"dog\", \".\"]\n}"}
{"question": "Who owns the youngest dog? Give me his or her last name.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Who owns the youngest dog? Give me his or her last name.\",\n\"question_toks\": \"['Who', 'owns', 'the', 'youngest', 'dog', '?', 'Give', 'me', 'his', 'or', 'her', 'last', 'name', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT O.last_name FROM Dogs D JOIN Owners O ON D.owner_id = O.owner_id WHERE D.age = (SELECT MIN(age) FROM Dogs)\",\n\"query_toks\": ['SELECT', 'O', '.', 'last_name', 'FROM', 'Dogs', 'D', 'JOIN', 'Owners', 'O', 'ON', 'D', '.', 'owner_id', '=', 'O', '.', 'owner_id', 'WHERE', 'D', '.', 'age', '=', '(', 'SELECT', 'MIN', '(', 'age', ')', 'FROM', 'Dogs', ')'],\n\"query_toks_no_value\": ['SELECT', 'O', '.', 'last_name', 'FROM', 'Dogs', 'D', 'JOIN', 'Owners', 'O', 'ON', 'D', '.', 'owner_id', '=', 'O', '.', 'owner_id', 'WHERE', 'D', '.', 'age', '=', '(', 'SELECT', 'MIN', '(', 'age', ')', 'FROM', 'Dogs', ')'],\n\"question\": \"Who owns the youngest dog? Give me his or her last name.\",\n\"question_toks\": ['Who', 'owns', 'the', 'youngest', 'dog', '?', 'Give', 'me', 'his', 'or', 'her', 'last', 'name', '.']}"}
{"question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.\",\n\"question_toks\": \"['List', 'the', 'emails', 'of', 'the', 'professionals', 'who', 'live', 'in', 'the', 'state', 'of', 'Hawaii', 'or', 'the', 'state', 'of', 'Wisconsin', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n \"query\": \"SELECT email_address FROM Professionals WHERE state='Hawaii' OR state='Wisconsin'\",\n \"query_toks\": \"['SELECT', 'email_address', 'FROM', 'Professionals', 'WHERE', 'state', '=', '\\'Hawaii\\'', 'OR', 'state', '=', '\\'Wisconsin\\'']\",\n \"query_toks_no_value\": \"['SELECT', 'email_address', 'FROM', 'Professionals', 'WHERE', 'state', '=', '', 'OR', 'state', '=', '']\",\n \"question\": \"List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.\",\n \"question_toks\": \"['List', 'the', 'emails', 'of', 'the', 'professionals', 'who', 'live', 'in', 'the', 'state', 'of', 'Hawaii', 'or', 'the', 'state', 'of', 'Wisconsin', '.']\"}"}
{"question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?\",\n\"question_toks\": \"['What', 'are', 'the', 'emails', 'of', 'the', 'professionals', 'living', 'in', 'either', 'the', 'state', 'of', 'Hawaii', 'or', 'the', 'state', 'of', 'Wisconsin', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n \"query\": \"SELECT email_address FROM Professionals WHERE state='Hawaii' OR state='Wisconsin'\",\n \"query_toks\": \"['SELECT', 'email_address', 'FROM', 'Professionals', 'WHERE', 'state','=','Hawaii', 'OR', 'state','=','Wisconsin']\",\n \"query_toks_no_value\": \"['SELECT', 'email_address', 'FROM', 'Professionals', 'WHERE', 'state', '=', ',', 'OR', 'state', '=', ',']\",\n \"question\": \"What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?\",\n \"question_toks\": \"['What', 'are', 'the', 'emails', 'of', 'the', 'professionals', 'living', 'in', 'either', 'the', 'state', 'of', 'Hawaii', 'or', 'the', 'state', 'of', 'Wisconsin', '?']\"}"}
{"question": "What are the arriving date and the departing date of all the dogs?", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the arriving date and the departing date of all the dogs?\",\n\"question_toks\": \"['What', 'are', 'the', 'arriving', 'date', 'and', 'the', 'departing', 'date', 'of', 'all', 'the', 'dogs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"dog_kennels\",\n \"query\": \"SELECT date_arrived, date_departed FROM Dogs\",\n \"query_toks\": \"['SELECT', 'date_arrived', ',', 'date_departed', 'FROM', 'Dogs']\",\n \"query_toks_no_value\": \"['SELECT', 'date_arrived', ',', 'date_departed', 'FROM', 'Dogs']\",\n \"question\": \"What are the arriving date and the departing date of all the dogs?\",\n \"question_toks\": \"['What', 'are', 'the', 'arriving', 'date', 'and', 'the', 'departing', 'date', 'of', 'all', 'the', 'dogs', '?']\"\n}"}
{"question": "List the arrival date and the departure date for all the dogs.", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List the arrival date and the departure date for all the dogs.\",\n\"question_toks\": \"['List', 'the', 'arrival', 'date', 'and', 'the', 'departure', 'date', 'for', 'all', 'the', 'dogs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT date_arrived, date_departed FROM Dogs\",\n\"query_toks\": \"['SELECT', 'date_arrived', ',', 'date_departed', 'FROM', 'Dogs']\",\n\"query_toks_no_value\": \"['SELECT', 'date_arrived', ',', 'date_departed', 'FROM', 'Dogs']\",\n\"question\": \"List the arrival date and the departure date for all the dogs.\",\n\"question_toks\": \"['List', 'the', 'arrival', 'date', 'and', 'the', 'departure', 'date', 'for', 'all', 'the', 'dogs', '.']}\""}
{"question": "How many dogs went through any treatments?", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"How many dogs went through any treatments?\",\n\"question_toks\": \"['How', 'many', 'dogs', 'went', 'through', 'any', 'treatments', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT COUNT(DISTINCT treatment_id) FROM Treatments\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'treatment_id', ')', 'FROM', 'Treatments']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'treatment_id', ')', 'FROM', 'Treatments']\",\n\"question\": \"How many dogs went through any treatments?\",\n\"question_toks\": \"['How', 'many', 'dogs', 'went', 'through', 'any', 'treatments', '?']\"\n}"}
{"question": "Count the number of dogs that went through a treatment.", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Count the number of dogs that went through a treatment.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'dogs', 'that', 'went', 'through', 'a', 'treatment', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT COUNT(DISTINCT dog_id) FROM Treatments;\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"dog_id\", \")\", \"FROM\", \"Treatments\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"dog_id\", \")\", \"FROM\", \"Treatments\", \";\"],\n  \"question\": \"Count the number of dogs that went through a treatment.\",\n  \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"dogs\", \"that\", \"went\", \"through\", \"a\", \"treatment\", \".\"]\n}"}
{"question": "How many professionals have performed any treatment to dogs?", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"How many professionals have performed any treatment to dogs?\",\n\"question_toks\": \"['How', 'many', 'professionals', 'have', 'performed', 'any', 'treatment', 'to', 'dogs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT COUNT(DISTINCT professional_id) FROM Treatments;\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"professional_id\", \")\", \"FROM\", \"Treatments\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"DISTINCT\", \"professional_id\", \")\", \"FROM\", \"Treatments\", \";\"],\n  \"question\": \"How many professionals have performed any treatment to dogs?\",\n  \"question_toks\": [\"How\", \"many\", \"professionals\", \"have\", \"performed\", \"any\", \"treatment\", \"to\", \"dogs\", \"?\"]\n}"}
{"question": "Find the number of professionals who have ever treated dogs.", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the number of professionals who have ever treated dogs.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'professionals', 'who', 'have', 'ever', 'treated', 'dogs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT COUNT(DISTINCT professional_id) FROM Treatments\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'professional_id', ')', 'FROM', 'Treatments']\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', 'DISTINCT', 'professional_id', ')', 'FROM', 'Treatments']\",\n    \"question\": \"Find the number of professionals who have ever treated dogs.\",\n    \"question_toks\": \"['Find', 'the', 'number', 'of', 'professionals', 'who', 'have', 'ever', 'treated', 'dogs', '.']\"\n}"}
{"question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.\",\n\"question_toks\": \"['Which', 'professionals', 'live', 'in', 'a', 'city', 'containing', 'the', 'substring', \"'West\", \"'\", '?', 'List', 'his', 'or', 'her', 'role', ',', 'street', ',', 'city', 'and', 'state', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';\",\n    \"query_toks\": \"['SELECT', 'role_code', ',', 'street', ',', 'city', ',', 'state', 'FROM', 'Professionals', 'WHERE', 'city', 'LIKE', \\\"'%West%'\\\"', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'role_code', ',', 'street', ',', 'city', ',', 'state', 'FROM', 'Professionals', 'WHERE', 'city', 'LIKE', '\\\"%West%\\\"', ';']\",\n    \"question\": \"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.\",\n    \"question_toks\": \"['Which', 'professionals', 'live', 'in', 'a', 'city', 'containing', 'the', 'substring', \"'West\", \"'\", '?', 'List', 'his', 'or', 'her', 'role', ',', 'street', ',', 'city', 'and', 'state', '.']\"\n}"}
{"question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.\",\n\"question_toks\": \"['Find', 'the', 'role', ',', 'street', ',', 'city', 'and', 'state', 'of', 'the', 'professionals', 'living', 'in', 'a', 'city', 'that', 'contains', 'the', 'substring', \"'West\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'\",\n    \"query_toks\": [\"SELECT\", \"role_code\", \",\", \"street\", \",\", \"city\", \",\", \"state\", \"FROM\", \"Professionals\", \"WHERE\", \"city\", \"LIKE\", \"'\", \"%West%\", \"'\"],\n    \"query_toks_no_value\": [\"SELECT\", \"role_code\", \",\", \"street\", \",\", \"city\", \",\", \"state\", \"FROM\", \"Professionals\", \"WHERE\", \"city\", \"LIKE\", \"'%%'\"],\n    \"question\": \"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.\",\n    \"question_toks\": [\"Find\", \"the\", \"role\", \",\", \"street\", \",\", \"city\", \"and\", \"state\", \"of\", \"the\", \"professionals\", \"living\", \"in\", \"a\", \"city\", \"that\", \"contains\", \"the\", \"substring\", \"'West\", \"'\", \".\"]\n}"}
{"question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.\",\n\"question_toks\": \"['Which', 'owners', 'live', 'in', 'the', 'state', 'whose', 'name', 'contains', 'the', 'substring', \"'North\", \"'\", '?', 'List', 'his', 'first', 'name', ',', 'last', 'name', 'and', 'email', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';\",\n\"query_toks\": [\"SELECT\", \"first_name\", \",\", \"last_name\", \",\", \"email_address\", \"FROM\", \"Owners\", \"WHERE\", \"state\", \"LIKE\", \"'%North%'\", \";\"],\n\"query_toks_no_value\": [\"SELECT\", \"first_name\", \",\", \"last_name\", \",\", \"email_address\", \"FROM\", \"Owners\", \"WHERE\", \"state\", \"LIKE\", \"'%North%'\", \";\"],\n\"question\": \"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.\",\n\"question_toks\": [\"Which\", \"owners\", \"live\", \"in\", \"the\", \"state\", \"whose\", \"name\", \"contains\", \"the\", \"substring\", \"'North\", \"'\", \"?\", \"List\", \"his\", \"first\", \"name\", \",\", \"last\", \"name\", \"and\", \"email\", \".\"]\n}"}
{"question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.\",\n\"question_toks\": \"['Return', 'the', 'first', 'name', ',', 'last', 'name', 'and', 'email', 'of', 'the', 'owners', 'living', 'in', 'a', 'state', 'whose', 'name', 'contains', 'the', 'substring', \"'North\", \"'\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';\",\n    \"query_toks\": \"['SELECT', 'first_name', ',', 'last_name', ',', 'email_address', 'FROM', 'Owners', 'WHERE', 'state', 'LIKE', \\\"'%North%'\\\", ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'first_name', ',', 'last_name', ',', 'email_address', 'FROM', 'Owners', 'WHERE', 'state', 'LIKE', '\\\"%', 'North', '%\\\"', ';']\",\n    \"question\": \"Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.\",\n    \"question_toks\": \"['Return', 'the', 'first', 'name', ',', 'last', 'name', 'and', 'email', 'of', 'the', 'owners', 'living', 'in', 'a', 'state', 'whose', 'name', 'contains', 'the', 'substring', \\\"'North\\\", \\\"'\\\", '.']\"\n}"}
{"question": "How many dogs have an age below the average?", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"How many dogs have an age below the average?\",\n\"question_toks\": \"['How', 'many', 'dogs', 'have', 'an', 'age', 'below', 'the', 'average', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"age\", \"<\", \"(\", \"SELECT\", \"AVG\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"age\", \"<\", \"(\", \"SELECT\", \"AVG\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\", \")\"],\n    \"question\": \"How many dogs have an age below the average?\",\n    \"question_toks\": [\"How\", \"many\", \"dogs\", \"have\", \"an\", \"age\", \"below\", \"the\", \"average\", \"?\"],\n}"}
{"question": "Count the number of dogs of an age below the average.", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Count the number of dogs of an age below the average.\",\n\"question_toks\": \"['Count', 'the', 'number', 'of', 'dogs', 'of', 'an', 'age', 'below', 'the', 'average', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"age\", \"<\", \"(\", \"SELECT\", \"AVG\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"age\", \"<\", \"(\", \"SELECT\", \"AVG\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\", \")\"],\n  \"question\": \"Count the number of dogs of an age below the average.\",\n  \"question_toks\": [\"Count\", \"the\", \"number\", \"of\", \"dogs\", \"of\", \"an\", \"age\", \"below\", \"the\", \"average\", \".\"]\n}"}
{"question": "How much does the most recent treatment cost?", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"How much does the most recent treatment cost?\",\n\"question_toks\": \"['How', 'much', 'does', 'the', 'most', 'recent', 'treatment', 'cost', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT MAX(cost_of_treatment) FROM Treatments\",\n\"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"cost_of_treatment\", \")\", \"FROM\", \"Treatments\"],\n\"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"cost_of_treatment\", \")\", \"FROM\", \"Treatments\"],\n\"question\": \"How much does the most recent treatment cost?\",\n\"question_toks\": [\"How\", \"much\", \"does\", \"the\", \"most\", \"recent\", \"treatment\", \"cost\", \"?\"]}"}
{"question": "Show me the cost of the most recently performed treatment.", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Show me the cost of the most recently performed treatment.\",\n\"question_toks\": \"['Show', 'me', 'the', 'cost', 'of', 'the', 'most', 'recently', 'performed', 'treatment', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'cost_of_treatment', 'FROM', 'Treatments', 'ORDER', 'BY', 'date_of_treatment', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', '*', 'FROM', 'Treatments', 'ORDER', 'BY', 'date_of_treatment', 'DESC', 'LIMIT', 'number']\",\n\"question\": \"Show me the cost of the most recently performed treatment.\",\n\"question_toks\": \"['Show', 'me', 'the', 'cost', 'of', 'the', 'most', 'recently', 'performed', 'treatment', '.']\"}"}
{"question": "How many dogs have not gone through any treatment?", "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"How many dogs have not gone through any treatment?\",\n\"question_toks\": \"['How', 'many', 'dogs', 'have', 'not', 'gone', 'through', 'any', 'treatment', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT COUNT(*) FROM Dogs\\nWHERE dog_id NOT IN\\n(SELECT dog_id FROM Treatments)\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"dog_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"dog_id\", \"FROM\", \"Treatments\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"dog_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"dog_id\", \"FROM\", \"Treatments\", \")\", \";\"],\n  \"question\": \"How many dogs have not gone through any treatment?\",\n  \"question_toks\": [\"How\", \"many\", \"dogs\", \"have\", \"not\", \"gone\", \"through\", \"any\", \"treatment\", \"?\"]\n}"}
{"question": "Tell me the number of dogs that have not received any treatment .", "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Tell me the number of dogs that have not received any treatment .\",\n\"question_toks\": \"['Tell', 'me', 'the', 'number', 'of', 'dogs', 'that', 'have', 'not', 'received', 'any', 'treatment', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"dog_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"dog_id\", \"FROM\", \"Treatments\", \")\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Dogs\", \"WHERE\", \"dog_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"dog_id\", \"FROM\", \"Treatments\", \")\", \";\"],\n    \"question\": \"Tell me the number of dogs that have not received any treatment.\",\n    \"question_toks\": [\"Tell\", \"me\", \"the\", \"number\", \"of\", \"dogs\", \"that\", \"have\", \"not\", \"received\", \"any\", \"treatment\", \".\"]\n}"}
{"question": "How many owners temporarily do not have any dogs?", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"How many owners temporarily do not have any dogs?\",\n\"question_toks\": \"['How', 'many', 'owners', 'temporarily', 'do', 'not', 'have', 'any', 'dogs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT COUNT(*) FROM (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) AS T WHERE dog_count = 0;\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"(\", \"SELECT\", \"owner_id\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"dog_count\", \"FROM\", \"Dogs\", \"GROUP\", \"BY\", \"owner_id\", \")\", \"AS\", \"T\", \"WHERE\", \"dog_count\", \"=\", \"0\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"(\", \"SELECT\", \"owner_id\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"dog_count\", \"FROM\", \"Dogs\", \"GROUP\", \"BY\", \"owner_id\", \")\", \"AS\", \"T\", \"WHERE\", \"dog_count\", \"=\", \"?\"],\n  \"question\": \"How many owners temporarily do not have any dogs?\",\n  \"question_toks\": [\"How\", \"many\", \"owners\", \"temporarily\", \"do\", \"not\", \"have\", \"any\", \"dogs\", \"?\"]\n}"}
{"question": "Find the number of owners who do not own any dogs at this moment.", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the number of owners who do not own any dogs at this moment.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'owners', 'who', 'do', 'not', 'own', 'any', 'dogs', 'at', 'this', 'moment', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Owners', 'WHERE', 'owner_id', 'NOT', 'IN', '(', 'SELECT', 'owner_id', 'FROM', 'Dogs', 'WHERE', 'date_departed', 'IS', 'NULL', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Owners', 'WHERE', 'owner_id', 'NOT', 'IN', '(', 'SELECT', 'owner_id', 'FROM', 'Dogs', 'WHERE', 'date_departed', 'IS', 'NULL', ')']\",\n\"question\": \"Find the number of owners who do not own any dogs at this moment.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'owners', 'who', 'do', 'not', 'own', 'any', 'dogs', 'at', 'this', 'moment', '.']\"\n}"}
{"question": "How many professionals did not operate any treatment on dogs?", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"How many professionals did not operate any treatment on dogs?\",\n\"question_toks\": \"['How', 'many', 'professionals', 'did', 'not', 'operate', 'any', 'treatment', 'on', 'dogs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)\",\n\"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Professionals', 'WHERE', 'professional_id', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'professional_id', 'FROM', 'Treatments', ')']\",\n\"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'Professionals', 'WHERE', 'professional_id', 'NOT', 'IN', '(', 'SELECT', 'DISTINCT', 'professional_id', 'FROM', 'Treatments', ')']\",\n\"question\": \"How many professionals did not operate any treatment on dogs?\",\n\"question_toks\": \"['How', 'many', 'professionals', 'did', 'not', 'operate', 'any', 'treatment', 'on', 'dogs', '?']\"}"}
{"question": "Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the number of professionals who have not treated any dogs.\",\n\"question_toks\": \"['Find', 'the', 'number', 'of', 'professionals', 'who', 'have', 'not', 'treated', 'any', 'dogs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)\",\n  \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Professionals\", \"WHERE\", \"professional_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"professional_id\", \"FROM\", \"Treatments\", \")\"],\n  \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Professionals\", \"WHERE\", \"professional_id\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"professional_id\", \"FROM\", \"Treatments\", \")\"],\n  \"question\": \"Find the number of professionals who have not treated any dogs.\",\n  \"question_toks\": [\"Find\", \"the\", \"number\", \"of\", \"professionals\", \"who\", \"have\", \"not\", \"treated\", \"any\", \"dogs\", \".\"]\n}"}
{"question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.\",\n\"question_toks\": \"['List', 'the', 'dog', 'name', ',', 'age', 'and', 'weight', 'of', 'the', 'dogs', 'who', 'have', 'been', 'abandoned', '?', '1', 'stands', 'for', 'yes', ',', 'and', '0', 'stands', 'for', 'no', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n \"query\": \"SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1\",\n \"query_toks\": \"['SELECT', 'name', ',', 'age', ',', 'weight', 'FROM', 'Dogs', 'WHERE', 'abandoned_yn', '=', '1']\",\n \"query_toks_no_value\": \"['SELECT', 'name', ',', 'age', ',', 'weight', 'FROM', 'Dogs', 'WHERE', 'abandoned_yn', '=']\",\n \"question\": \"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.\",\n \"question_toks\": \"['List', 'the', 'dog', 'name', ',', 'age', 'and', 'weight', 'of', 'the', 'dogs', 'who', 'have', 'been', 'abandoned', '?', '1', 'stands', 'for', 'yes', ',', 'and', '0', 'stands', 'for', 'no', '.']}\"\n"}
{"question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.\",\n\"question_toks\": \"['What', 'are', 'the', 'dog', 'name', ',', 'age', 'and', 'weight', 'of', 'the', 'dogs', 'that', 'were', 'abandoned', '?', 'Note', 'that', '1', 'stands', 'for', 'yes', ',', 'and', '0', 'stands', 'for', 'no', 'in', 'the', 'tables', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT D.name, D.age, D.weight FROM Dogs D WHERE D.abandoned_yn = 1;\",\n\"query_toks\": \"['SELECT', 'D.name', ',', 'D.age', ',', 'D.weight', 'FROM', 'Dogs', 'D', 'WHERE', 'D.abandoned_yn', '=', '1', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'D.name', ',', 'D.age', ',', 'D.weight', 'FROM', 'Dogs', 'D', 'WHERE', 'D.abandoned_yn', '=', '?', ';']\",\n\"question\": \"What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.\",\n\"question_toks\": \"['What', 'are', 'the', 'dog', 'name', ',', 'age', 'and', 'weight', 'of', 'the', 'dogs', 'that', 'were', 'abandoned', '?', 'Note', 'that', '1', 'stands', 'for', 'yes', ',', 'and', '0', 'stands', 'for', 'no', 'in', 'the', 'tables', '.']}\""}
{"question": "What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What is the average age of all the dogs?\",\n\"question_toks\": \"['What', 'is', 'the', 'average', 'age', 'of', 'all', 'the', 'dogs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT AVG(age) FROM Dogs\",\n    \"query_toks\": \"['SELECT', 'AVG', '(', 'age', ')', 'FROM', 'Dogs']\",\n    \"query_toks_no_value\": \"['SELECT', 'AVG', '(', 'age', ')', 'FROM', 'Dogs']\",\n    \"question\": \"What is the average age of all the dogs?\",\n    \"question_toks\": \"['What', 'is', 'the', 'average', 'age', 'of', 'all', 'the', 'dogs', '?']\"\n}"}
{"question": "Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Compute the average age of all the dogs.\",\n\"question_toks\": \"['Compute', 'the', 'average', 'age', 'of', 'all', 'the', 'dogs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT AVG(age) FROM Dogs\",\n\"query_toks\": \"['SELECT', 'AVG(', 'age', ')', 'FROM', 'Dogs']\",\n\"query_toks_no_value\": \"['SELECT', 'AVG', '(', ')', 'FROM', 'Dogs']\",\n\"question\": \"Compute the average age of all the dogs.\",\n\"question_toks\": \"['Compute', 'the', 'average', 'age', 'of', 'all', 'the', 'dogs', '.']\"}"}
{"question": "What is the age of the oldest dog?", "sql": "SELECT max(age) FROM Dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What is the age of the oldest dog?\",\n\"question_toks\": \"['What', 'is', 'the', 'age', 'of', 'the', 'oldest', 'dog', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n \"query\": \"SELECT MAX(age) FROM Dogs\",\n \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\"],\n \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\"],\n \"question\": \"What is the age of the oldest dog?\",\n \"question_toks\": [\"What\", \"is\", \"the\", \"age\", \"of\", \"the\", \"oldest\", \"dog\", \"?\"]}\nNote: Assuming that \"age\" refers to the age of the dog in years."}
{"question": "Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Tell me the age of the oldest dog.\",\n\"question_toks\": \"['Tell', 'me', 'the', 'age', 'of', 'the', 'oldest', 'dog', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT MAX(age) FROM Dogs\",\n    \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\"],\n    \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"age\", \")\", \"FROM\", \"Dogs\"],\n    \"question\": \"Tell me the age of the oldest dog.\",\n    \"question_toks\": [\"Tell\", \"me\", \"the\", \"age\", \"of\", \"the\", \"oldest\", \"dog\", \".\"]\n}"}
{"question": "How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"How much does each charge type costs? List both charge type and amount.\",\n\"question_toks\": \"['How', 'much', 'does', 'each', 'charge', 'type', 'costs', '?', 'List', 'both', 'charge', 'type', 'and', 'amount', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT charge_type, charge_amount FROM Charges;\",\n  \"query_toks\": [\"SELECT\", \"charge_type\", \",\", \"charge_amount\", \"FROM\", \"Charges\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"charge_type\", \",\", \"charge_amount\", \"FROM\", \"Charges\", \";\"],\n  \"question\": \"How much does each charge type costs? List both charge type and amount.\",\n  \"question_toks\": [\"How\", \"much\", \"does\", \"each\", \"charge\", \"type\", \"costs\", \"?\", \"List\", \"both\", \"charge\", \"type\", \"and\", \"amount\", \".\"]\n}"}
{"question": "List each charge type and its amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List each charge type and its amount.\",\n\"question_toks\": \"['List', 'each', 'charge', 'type', 'and', 'its', 'amount', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT charge_type, charge_amount FROM Charges\",\n  \"query_toks\": [\"SELECT\", \"charge_type\", \",\", \"charge_amount\", \"FROM\", \"Charges\"],\n  \"query_toks_no_value\": [\"SELECT\", \"charge_type\", \",\", \"charge_amount\", \"FROM\", \"Charges\"],\n  \"question\": \"List each charge type and its amount.\",\n  \"question_toks\": [\"List\", \"each\", \"charge\", \"type\", \"and\", \"its\", \"amount\", \".\"]\n}"}
{"question": "How much does the most expensive charge type costs?", "sql": "SELECT max(charge_amount) FROM Charges", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"How much does the most expensive charge type costs?\",\n\"question_toks\": \"['How', 'much', 'does', 'the', 'most', 'expensive', 'charge', 'type', 'costs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT MAX(charge_amount) FROM Charges\",\n  \"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"charge_amount\", \")\", \"FROM\", \"Charges\"],\n  \"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"charge_amount\", \")\", \"FROM\", \"Charges\"],\n  \"question\": \"How much does the most expensive charge type costs?\",\n  \"question_toks\": [\"How\", \"much\", \"does\", \"the\", \"most\", \"expensive\", \"charge\", \"type\", \"cost\", \"?\"]\n}"}
{"question": "What is the charge amount of the most expensive charge type?", "sql": "SELECT max(charge_amount) FROM Charges", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What is the charge amount of the most expensive charge type?\",\n\"question_toks\": \"['What', 'is', 'the', 'charge', 'amount', 'of', 'the', 'most', 'expensive', 'charge', 'type', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT MAX(c.charge_amount) FROM Charges c WHERE c.charge_type = (SELECT MAX(c2.charge_type) FROM Charges c2)\",\n\"query_toks\": [\"SELECT\", \"MAX\", \"(\", \"c\", \".\", \"charge_amount\", \")\", \"FROM\", \"Charges\", \"c\", \"WHERE\", \"c\", \".\", \"charge_type\", \"=\", \"(\", \"SELECT\", \"MAX\", \"(\", \"c2\", \".\", \"charge_type\", \")\", \"FROM\", \"Charges\", \"c2\", \")\",],\n\"query_toks_no_value\": [\"SELECT\", \"MAX\", \"(\", \"c\", \".\", \"<column>\", \")\", \"FROM\", \"Charges\", \"c\", \"WHERE\", \"c\", \".\", \"charge_type\", \"=\", \"(\", \"SELECT\", \"MAX\", \"(\", \"c2\", \".\", \"charge_type\", \")\", \"FROM\", \"Charges\", \"c2\", \")\",],\n\"question\": \"What is the charge amount of the most expensive charge type?\",\n\"question_toks\": [\"What\", \"is\", \"the\", \"charge\", \"amount\", \"of\", \"the\", \"most\", \"expensive\", \"charge\", \"type\", \"?\"]}"}
{"question": "List the email, cell phone and home phone of all the professionals.", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List the email, cell phone and home phone of all the professionals.\",\n\"question_toks\": \"['List', 'the', 'email', ',', 'cell', 'phone', 'and', 'home', 'phone', 'of', 'all', 'the', 'professionals', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT email_address, cell_number, home_phone FROM Professionals\",\n    \"query_toks\": \"['SELECT', 'email_address', ',', 'cell_number', ',', 'home_phone', 'FROM', 'Professionals']\",\n    \"query_toks_no_value\": \"['SELECT', 'email_address', ',', 'cell_number', ',', 'home_phone', 'FROM', 'Professionals']\",\n    \"question\": \"List the email, cell phone and home phone of all the professionals.\",\n    \"question_toks\": \"['List', 'the', 'email', ',', 'cell', 'phone', 'and', 'home', 'phone', 'of', 'all', 'the', 'professionals', '.']\"\n}"}
{"question": "What are the email, cell phone and home phone of each professional?", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are the email, cell phone and home phone of each professional?\",\n\"question_toks\": \"['What', 'are', 'the', 'email', ',', 'cell', 'phone', 'and', 'home', 'phone', 'of', 'each', 'professional', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"dog_kennels\",\n  \"query\": \"SELECT email_address, cell_number, home_phone FROM Professionals\",\n  \"query_toks\": [\"SELECT\", \"email_address\", \",\", \"cell_number\", \",\", \"home_phone\", \"FROM\", \"Professionals\"],\n  \"query_toks_no_value\": [\"SELECT\", \"*\", \"FROM\", \"Professionals\"],\n  \"question\": \"What are the email, cell phone and home phone of each professional?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"email\", \",\", \"cell\", \"phone\", \"and\", \"home\", \"phone\", \"of\", \"each\", \"professional\", \"?\"]\n}"}
{"question": "What are all the possible breed type and size type combinations?", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are all the possible breed type and size type combinations?\",\n\"question_toks\": \"['What', 'are', 'all', 'the', 'possible', 'breed', 'type', 'and', 'size', 'type', 'combinations', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT DISTINCT T1.breed_name, T2.size_description FROM Dogs D JOIN Breeds T1 ON D.breed_code = T1.breed_code JOIN Sizes T2 ON D.size_code = T2.size_code\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'T1', '.', 'breed_name', ',', 'T2', '.', 'size_description', 'FROM', 'Dogs', 'D', 'JOIN', 'Breeds', 'T1', 'ON', 'D', '.', 'breed_code', '=', 'T1', '.', 'breed_code', 'JOIN', 'Sizes', 'T2', 'ON', 'D', '.', 'size_code', '=', 'T2', '.', 'size_code']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'T1', '.', '<column>', ',', 'T2', '.', '<column>', 'FROM', 'Dogs', 'D', 'JOIN', 'Breeds', 'T1', 'ON', 'D', '.', '<column>', '=', 'T1', '.', '<column>', 'JOIN', 'Sizes', 'T2', 'ON', 'D', '.', '<column>', '=', 'T2', '.', '<column>']\",\n    \"question\": \"What are all the possible breed type and size type combinations?\",\n    \"question_toks\": \"['What', 'are', 'all', 'the', 'possible', 'breed', 'type', 'and', 'size', 'type', 'combinations', '?']\"\n}"}
{"question": "Find the distinct breed type and size type combinations for dogs.", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"Find the distinct breed type and size type combinations for dogs.\",\n\"question_toks\": \"['Find', 'the', 'distinct', 'breed', 'type', 'and', 'size', 'type', 'combinations', 'for', 'dogs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT DISTINCT Dogs.breed_code, Sizes.size_code FROM Dogs, Sizes WHERE Dogs.size_code=Sizes.size_code;\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Dogs', '.', 'breed_code', ',', 'Sizes', '.', 'size_code', 'FROM', 'Dogs', ',', 'Sizes', 'WHERE', 'Dogs', '.', 'size_code', '=', 'Sizes', '.', 'size_code', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Dogs', '.', '<column>', ',', 'Sizes', '.', '<column>', 'FROM', 'Dogs', ',', 'Sizes', 'WHERE', 'Dogs', '.', '<column>', '=', 'Sizes', '.', '<column>', ';']\",\n    \"question\": \"Find the distinct breed type and size type combinations for dogs.\",\n    \"question_toks\": \"['Find', 'the', 'distinct', 'breed', 'type', 'and', 'size', 'type', 'combinations', 'for', 'dogs', '.']\"\n}"}
{"question": "List the first name of all the professionals along with the description of the treatment they have done.", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"List the first name of all the professionals along with the description of the treatment they have done.\",\n\"question_toks\": \"['List', 'the', 'first', 'name', 'of', 'all', 'the', 'professionals', 'along', 'with', 'the', 'description', 'of', 'the', 'treatment', 'they', 'have', 'done', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"dog_kennels\",\n\"query\": \"SELECT P.first_name, TT.treatment_type_description FROM Treatment_Types AS TT JOIN Treatments AS Trt ON TT.treatment_type_code = Trt.treatment_type_code JOIN Professionals AS P ON P.professional_id = Trt.professional_id;\",\n\"query_toks\": \"['SELECT', 'P', '.', 'first_name', ',', 'TT', '.', 'treatment_type_description', 'FROM', 'Treatment_Types', 'AS', 'TT', 'JOIN', 'Treatments', 'AS', 'Trt', 'ON', 'TT', '.', 'treatment_type_code', '=', 'Trt', '.', 'treatment_type_code', 'JOIN', 'Professionals', 'AS', 'P', 'ON', 'P', '.', 'professional_id', '=', 'Trt', '.', 'professional_id', ';']\",\n\"query_toks_no_value\": \"['SELECT', 'P', '.', 'first_name', ',', 'TT', '.', 'treatment_type_description', 'FROM', 'Treatment_Types', 'AS', 'TT', 'JOIN', 'Treatments', 'AS', 'Trt', 'ON', 'TT', '.', 'treatment_type_code', '=', 'Trt', '.', 'treatment_type_code', 'JOIN', 'Professionals', 'AS', 'P', 'ON', 'P', '.', 'professional_id', '=', 'Trt', '.', 'professional_id', ';']\",\n\"question\": \"List the first name of all the professionals along with the description of the treatment they have done.\",\n\"question_toks\": \"['List', 'the', 'first', 'name', 'of', 'all', 'the', 'professionals', 'along', 'with', 'the', 'description', 'of', 'the', 'treatment', 'they', 'have', 'done', '.']}\"\n"}
{"question": "What are each professional's first name and description of the treatment they have performed?", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nBreeds: 'breed_code', 'breed_name'\nCharges: 'charge_id', 'charge_type', 'charge_amount'\nSizes: 'size_code', 'size_description'\nTreatment_Types: 'treatment_type_code', 'treatment_type_description'\nOwners: 'owner_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'email_address', 'home_phone', 'cell_number'\nDogs: 'dog_id', 'owner_id', 'abandoned_yn', 'breed_code', 'size_code', 'name', 'age', 'date_of_birth', 'gender', 'weight', 'date_arrived', 'date_adopted', 'date_departed'\nProfessionals: 'professional_id', 'role_code', 'first_name', 'street', 'city', 'state', 'zip_code', 'last_name', 'email_address', 'home_phone', 'cell_number'\nTreatments: 'treatment_id', 'dog_id', 'professional_id', 'treatment_type_code', 'date_of_treatment', 'cost_of_treatment'\n\n{\"db_id\": \"dog_kennels\",\n\"question\": \"What are each professional's first name and description of the treatment they have performed?\",\n\"question_toks\": \"['What', 'are', 'each', 'professional', \"'s\", 'first', 'name', 'and', 'description', 'of', 'the', 'treatment', 'they', 'have', 'performed', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"dog_kennels\",\n    \"query\": \"SELECT Professionals.first_name, Treatments.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\",\n    \"query_toks\": \"['SELECT', 'Professionals', '.', 'first_name', ',', 'Treatments', '.', 'treatment_type_description', 'FROM', 'Professionals', 'JOIN', 'Treatments', 'ON', 'Professionals', '.', 'professional_id', '=', 'Treatments', '.', 'professional_id']\",\n    \"query_toks_no_value\": \"['SELECT', 'Professionals', '.', 'first_name', ',', 'Treatments', '.', 'treatment_type_description', 'FROM', 'Professionals', 'JOIN', 'Treatments', 'ON', 'Professionals', '.', 'professional_id', '=', 'Treatments', '.', 'professional_id']\",\n    \"question\": \"What are each professional's first name and description of the treatment they have performed?\",\n    \"question_toks\": \"['What', 'are', 'each', 'professional', \"'s\", 'first', 'name', 'and', 'description', 'of', 'the', 'treatment', 'they', 'have', 'performed', '?']\"\n}"}
{"question": "How many singers are there?", "sql": "SELECT count(*) FROM singer", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"How many singers are there?\",\n\"question_toks\": \"['How', 'many', 'singers', 'are', 'there', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT COUNT(*) FROM Singer\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Singer\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Singer\"],\n    \"question\": \"How many singers are there?\",\n    \"question_toks\": [\"How\", \"many\", \"singers\", \"are\", \"there\", \"?\"]\n}"}
{"question": "What is the count of singers?", "sql": "SELECT count(*) FROM singer", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What is the count of singers?\",\n\"question_toks\": \"['What', 'is', 'the', 'count', 'of', 'singers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT COUNT(*) FROM singer\",\n    \"query_toks\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'singer']\",\n    \"query_toks_no_value\": \"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'singer']\",\n    \"question\": \"What is the count of singers?\",\n    \"question_toks\": \"['What', 'is', 'the', 'count', 'of', 'singers', '?']\"\n}"}
{"question": "List the name of singers in ascending order of net worth.", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"List the name of singers in ascending order of net worth.\",\n\"question_toks\": \"['List', 'the', 'name', 'of', 'singers', 'in', 'ascending', 'order', 'of', 'net', 'worth', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"singer\",\n  \"query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC\",\n  \"query_toks\": [\n    \"SELECT\",\n    \"Name\",\n    \"FROM\",\n    \"singer\",\n    \"ORDER\",\n    \"BY\",\n    \"Net_Worth_Millions\",\n    \"ASC\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\",\n    \"Name\",\n    \"FROM\",\n    \"singer\",\n    \"ORDER\",\n    \"BY\",\n    \"Net_Worth_Millions\",\n    \"ASC\"\n  ],\n  \"question\": \"List the name of singers in ascending order of net worth.\",\n  \"question_toks\": [\n    \"List\",\n    \"the\",\n    \"name\",\n    \"of\",\n    \"singers\",\n    \"in\",\n    \"ascending\",\n    \"order\",\n    \"of\",\n    \"net\",\n    \"worth\",\n    \".\"\n  ]\n}"}
{"question": "What are the names of singers ordered by ascending net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What are the names of singers ordered by ascending net worth?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'singers', 'ordered', 'by', 'ascending', 'net', 'worth', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"singer\",\n  \"query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC\",\n  \"query_toks\": \"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY', 'Net_Worth_Millions', 'ASC']\",\n  \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY']\",\n  \"question\": \"What are the names of singers ordered by ascending net worth?\",\n  \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'singers', 'ordered', 'by', 'ascending', 'net', 'worth', '?']\"\n}"}
{"question": "What are the birth year and citizenship of singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What are the birth year and citizenship of singers?\",\n\"question_toks\": \"['What', 'are', 'the', 'birth', 'year', 'and', 'citizenship', 'of', 'singers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"singer\",\n  \"query\": \"SELECT Birth_Year, Citizenship FROM singer\",\n  \"query_toks\": \"['SELECT', 'Birth_Year', ',', 'Citizenship', 'FROM', 'singer']\",\n  \"query_toks_no_value\": \"['SELECT', 'Birth_Year', ',', 'Citizenship', 'FROM', 'singer']\",\n  \"question\": \"What are the birth year and citizenship of singers?\",\n  \"question_toks\": \"['What', 'are', 'the', 'birth', 'year', 'and', 'citizenship', 'of', 'singers', '?']\"\n}"}
{"question": "What are the birth years and citizenships of the singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What are the birth years and citizenships of the singers?\",\n\"question_toks\": \"['What', 'are', 'the', 'birth', 'years', 'and', 'citizenships', 'of', 'the', 'singers', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT Birth_Year, Citizenship FROM singer\",\n    \"query_toks\": [\"SELECT\", \"Birth_Year\", \",\", \"Citizenship\", \"FROM\", \"singer\"],\n    \"query_toks_no_value\": [\"SELECT\", \"*\", \"FROM\", \"singer\"],\n    \"question\": \"What are the birth years and citizenships of the singers?\",\n    \"question_toks\": [\"What\", \"are\", \"the\", \"birth\", \"years\", \"and\", \"citizenships\", \"of\", \"the\", \"singers\", \"?\"]\n}"}
{"question": "List the name of singers whose citizenship is not \"France\".", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"List the name of singers whose citizenship is not \"France\".\",\n\"question_toks\": \"['List', 'the', 'name', 'of', 'singers', 'whose', 'citizenship', 'is', 'not', '``', 'France', \"''\", '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"singer\",\n \"query\": \"SELECT Name FROM singer WHERE Citizenship <> 'France'\",\n \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"WHERE\", \"Citizenship\", \"<>\", \"'France'\"],\n \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"WHERE\", \"Citizenship\", \"<>\", \"?\"],\n \"question\": \"List the name of singers whose citizenship is not \\\"France\\\".\",\n \"question_toks\": [\"List\", \"the\", \"name\", \"of\", \"singers\", \"whose\", \"citizenship\", \"is\", \"not\", \"\\\"France\\\".\",]}\n"}
{"question": "What are the names of the singers who are not French citizens?", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What are the names of the singers who are not French citizens?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'who', 'are', 'not', 'French', 'citizens', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"singer\",\n  \"query\": \"SELECT Name FROM singer WHERE Citizenship != 'French'\",\n  \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"WHERE\", \"Citizenship\", \"!=\", \"'French'\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"WHERE\", \"Citizenship\", \"!=\", \"?\"],\n  \"question\": \"What are the names of the singers who are not French citizens?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"the\", \"singers\", \"who\", \"are\", \"not\", \"French\", \"citizens\", \"?\"]\n}"}
{"question": "Show the name of singers whose birth year is either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"Show the name of singers whose birth year is either 1948 or 1949?\",\n\"question_toks\": \"['Show', 'the', 'name', 'of', 'singers', 'whose', 'birth', 'year', 'is', 'either', '1948', 'or', '1949', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT Name FROM singer WHERE Birth_Year = '1948' OR Birth_Year = '1949'\",\n    \"query_toks\": \"['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Birth_Year', '=', '\\\\\\'1948\\\\\\'', 'OR', 'Birth_Year', '=', '\\\\\\'1949\\\\\\'']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Birth_Year', '=', '', 'OR', 'Birth_Year', '=', '']\",\n    \"question\": \"Show the name of singers whose birth year is either 1948 or 1949?\",\n    \"question_toks\": \"['Show', 'the', 'name', 'of', 'singers', 'whose', 'birth', 'year', 'is', 'either', '1948', 'or', '1949', '?']\"\n}"}
{"question": "What are the names of the singers whose birth years are either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What are the names of the singers whose birth years are either 1948 or 1949?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'whose', 'birth', 'years', 'are', 'either', '1948', 'or', '1949', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"singer\",\n  \"query\": \"SELECT Name FROM singer WHERE Birth_Year = '1948' OR Birth_Year = '1949';\",\n  \"query_toks\": \"['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Birth_Year', '=', ''', '1948', ''', 'OR', 'Birth_Year', '=', ''', '1949', ''', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Birth_Year', '=', '', 'OR', 'Birth_Year', '=', '', ';']\",\n  \"question\": \"What are the names of the singers whose birth years are either 1948 or 1949?\",\n  \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'whose', 'birth', 'years', 'are', 'either', '1948', 'or', '1949', '?']\"\n}"}
{"question": "What is the name of the singer with the largest net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What is the name of the singer with the largest net worth?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'singer', 'with', 'the', 'largest', 'net', 'worth', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\"db_id\": \"singer\",\n\"query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1\",\n\"query_toks\": \"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY', 'Net_Worth_Millions', 'DESC', 'LIMIT', '1']\",\n\"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY', 'Net_Worth_Millions', 'DESC', 'LIMIT', 'NUMBER']\",\n\"question\": \"What is the name of the singer with the largest net worth?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'singer', 'with', 'the', 'largest', 'net', 'worth', '?']}\"\n"}
{"question": "What is the name of the singer who is worth the most?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What is the name of the singer who is worth the most?\",\n\"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'singer', 'who', 'is', 'worth', 'the', 'most', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;\",\n    \"query_toks\": \"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY', 'Net_Worth_Millions', 'DESC', 'LIMIT', '1', ';']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY', 'Net_Worth_Millions', 'DESC', 'LIMIT', '1', ';']\",\n    \"question\": \"What is the name of the singer who is worth the most?\",\n    \"question_toks\": \"['What', 'is', 'the', 'name', 'of', 'the', 'singer', 'who', 'is', 'worth', 'the', 'most', '?']\"\n}"}
{"question": "Show different citizenship of singers and the number of singers of each citizenship.", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"Show different citizenship of singers and the number of singers of each citizenship.\",\n\"question_toks\": \"['Show', 'different', 'citizenship', 'of', 'singers', 'and', 'the', 'number', 'of', 'singers', 'of', 'each', 'citizenship', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship\",\n    \"query_toks\": [\"SELECT\", \"Citizenship\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"Singer_ID\", \")\", \"FROM\", \"singer\", \"GROUP\", \"BY\", \"Citizenship\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Citizenship\", \",\", \"COUNT\", \"(\", \"DISTINCT\", \"Singer_ID\", \")\", \"FROM\", \"singer\", \"GROUP\", \"BY\", \"Citizenship\"],\n    \"question\": \"Show different citizenship of singers and the number of singers of each citizenship.\",\n    \"question_toks\": [\"Show\", \"different\", \"citizenship\", \"of\", \"singers\", \"and\", \"the\", \"number\", \"of\", \"singers\", \"of\", \"each\", \"citizenship\", \".\"]\n}"}
{"question": "For each citizenship, how many singers are from that country?", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"For each citizenship, how many singers are from that country?\",\n\"question_toks\": \"['For', 'each', 'citizenship', ',', 'how', 'many', 'singers', 'are', 'from', 'that', 'country', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n\"db_id\": \"singer\",\n\"query\": \"SELECT c.Citizenship, COUNT(*) FROM Singer AS s JOIN (SELECT DISTINCT Citizenship FROM Singer) AS c ON s.Citizenship = c.Citizenship GROUP BY c.Citizenship\",\n\"query_toks\": \"['SELECT', 'c', '.', 'Citizenship', ',', 'COUNT', '(', '*', ')', 'FROM', 'Singer', 'AS', 's', 'JOIN', '(', 'SELECT', 'DISTINCT', 'Citizenship', 'FROM', 'Singer', ')', 'AS', 'c', 'ON', 's', '.', 'Citizenship', '=', 'c', '.', 'Citizenship', 'GROUP', 'BY', 'c', '.', 'Citizenship']\",\n\"query_toks_no_value\": \"['SELECT', 'c', '.', 'Citizenship', ',', 'COUNT', '(', '*', ')', 'FROM', 'Singer', 'AS', 's', 'JOIN', '(', 'SELECT', 'DISTINCT', 'Citizenship', 'FROM', 'Singer', ')', 'AS', 'c', 'ON', 's', '.', 'Citizenship', '=', 'c', '.', 'Citizenship', 'GROUP', 'BY', 'c', '.', 'Citizenship']\",\n\"question\": \"For each citizenship, how many singers are from that country?\",\n\"question_toks\": \"['For', 'each', 'citizenship', ',', 'how', 'many', 'singers', 'are', 'from', 'that', 'country', '?']\"\n}"}
{"question": "Please show the most common citizenship of singers.", "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"Please show the most common citizenship of singers.\",\n\"question_toks\": \"['Please', 'show', 'the', 'most', 'common', 'citizenship', 'of', 'singers', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"singer\",\n \"query\": \"SELECT Citizenship, COUNT(*) AS count FROM Singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1\",\n \"query_toks\": [\"SELECT\", \"Citizenship\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \"FROM\", \"Singer\", \"GROUP\", \"BY\", \"Citizenship\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"1\"],\n \"query_toks_no_value\": [\"SELECT\", \"Citizenship\", \",\", \"COUNT\", \"(\", \"*\", \")\", \"AS\", \"count\", \"FROM\", \"Singer\", \"GROUP\", \"BY\", \"Citizenship\", \"ORDER\", \"BY\", \"count\", \"DESC\", \"LIMIT\", \"1\"], \n \"question\": \"Please show the most common citizenship of singers.\",\n \"question_toks\": [\"Please\", \"show\", \"the\", \"most\", \"common\", \"citizenship\", \"of\", \"singers\", \".\"]\n}"}
{"question": "What is the most common singer citizenship ?", "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What is the most common singer citizenship ?\",\n\"question_toks\": \"['What', 'is', 'the', 'most', 'common', 'singer', 'citizenship', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT Citizenship, COUNT(*) AS count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1\",\n    \"query_toks\": \"['SELECT', 'Citizenship', ',', 'COUNT', '(', '*', ')', 'AS', 'count', 'FROM', 'singer', 'GROUP', 'BY', 'Citizenship', 'ORDER', 'BY', 'count', 'DESC', 'LIMIT', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'Citizenship', ',', 'COUNT', '(', '*', ')', 'AS', 'count', 'FROM', 'singer', 'GROUP', 'BY', 'Citizenship', 'ORDER', 'BY', 'count', 'DESC', 'LIMIT', '1']\",\n    \"question\": \"What is the most common singer citizenship?\",\n    \"question_toks\": \"['What', 'is', 'the', 'most', 'common', 'singer', 'citizenship', '?']\"\n}"}
{"question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"Show different citizenships and the maximum net worth of singers of each citizenship.\",\n\"question_toks\": \"['Show', 'different', 'citizenships', 'and', 'the', 'maximum', 'net', 'worth', 'of', 'singers', 'of', 'each', 'citizenship', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n \"db_id\": \"singer\",\n \"query\": \"SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship\",\n \"query_toks\": \"[SELECT, Citizenship, ,, MAX, (, Net_Worth_Millions, ), FROM, singer, GROUP, BY, Citizenship]\",\n \"query_toks_no_value\": \"[SELECT, Citizenship, ,, MAX, (, Net_Worth_Millions, ), FROM, singer, GROUP, BY, Citizenship]\",\n \"question\": \"Show different citizenships and the maximum net worth of singers of each citizenship.\",\n \"question_toks\": \"['Show', 'different', 'citizenships', 'and', 'the', 'maximum', 'net', 'worth', 'of', 'singers', 'of', 'each', 'citizenship', '.']\"\n}"}
{"question": "For each citizenship, what is the maximum net worth?", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"For each citizenship, what is the maximum net worth?\",\n\"question_toks\": \"['For', 'each', 'citizenship', ',', 'what', 'is', 'the', 'maximum', 'net', 'worth', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship\",\n    \"query_toks\": \"['SELECT', 'Citizenship', ',', 'MAX', '(', 'Net_Worth_Millions', ')', 'FROM', 'singer', 'GROUP', 'BY', 'Citizenship']\",\n    \"query_toks_no_value\": \"['SELECT', 'Citizenship', ',', 'MAX', '(', ')', 'FROM', 'singer', 'GROUP', 'BY', 'Citizenship']\",\n    \"question\": \"For each citizenship, what is the maximum net worth?\",\n    \"question_toks\": \"['For', 'each', 'citizenship', ',', 'what', 'is', 'the', 'maximum', 'net', 'worth', '?']\"\n}"}
{"question": "Show titles of songs and names of singers.", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"Show titles of songs and names of singers.\",\n\"question_toks\": \"['Show', 'titles', 'of', 'songs', 'and', 'names', 'of', 'singers', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT T2.Title, T1.Name FROM singer T1 JOIN song T2 ON T1.Singer_ID = T2.Singer_ID;\",\n    \"query_toks\": [\n        \"SELECT\",\n        \"T2\",\n        \".\",\n        \"Title\",\n        \",\",\n        \"T1\",\n        \".\",\n        \"Name\",\n        \"FROM\",\n        \"singer\",\n        \"T1\",\n        \"JOIN\",\n        \"song\",\n        \"T2\",\n        \"ON\",\n        \"T1\",\n        \".\",\n        \"Singer_ID\",\n        \"=\",\n        \"T2\",\n        \".\",\n        \"Singer_ID\",\n        \";\"\n    ],\n    \"query_toks_no_value\": [\n        \"SELECT\",\n        \"T2\",\n        \".\",\n        \"Title\",\n        \",\",\n        \"T1\",\n        \".\",\n        \"Name\",\n        \"FROM\",\n        \"singer\",\n        \"T1\",\n        \"JOIN\",\n        \"song\",\n        \"T2\",\n        \"ON\",\n        \"T1\",\n        \".\",\n        \"Singer_ID\",\n        \"=\",\n        \"T2\",\n        \".\",\n        \"Singer_ID\",\n        \";\"\n    ],\n    \"question\": \"Show titles of songs and names of singers.\",\n    \"question_toks\": [\n        \"Show\",\n        \"titles\",\n        \"of\",\n        \"songs\",\n        \"and\",\n        \"names\",\n        \"of\",\n        \"singers\",\n        \".\"\n    ]\n}"}
{"question": "What are the song titles and singer names?", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What are the song titles and singer names?\",\n\"question_toks\": \"['What', 'are', 'the', 'song', 'titles', 'and', 'singer', 'names', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"singer\",\n  \"query\": \"SELECT s.Title, si.Name FROM song AS s JOIN singer AS si ON s.Singer_ID = si.Singer_ID\",\n  \"query_toks\": [\n    \"SELECT\",\n    \"s.Title,\",\n    \"si.Name\",\n    \"FROM\",\n    \"song\",\n    \"AS\",\n    \"s\",\n    \"JOIN\",\n    \"singer\",\n    \"AS\",\n    \"si\",\n    \"ON\",\n    \"s.Singer_ID\",\n    \"=\",\n    \"si.Singer_ID\"\n  ],\n  \"query_toks_no_value\": [\n    \"SELECT\",\n    \"Title,\",\n    \"Name\",\n    \"FROM\",\n    \"song\",\n    \"AS\",\n    \"s\",\n    \"JOIN\",\n    \"singer\",\n    \"AS\",\n    \"si\",\n    \"ON\",\n    \"s.Singer_ID\",\n    \"=\",\n    \"si.Singer_ID\"\n  ],\n  \"question\": \"What are the song titles and singer names?\",\n  \"question_toks\": [\n    \"What\",\n    \"are\",\n    \"the\",\n    \"song\",\n    \"titles\",\n    \"and\",\n    \"singer\",\n    \"names\",\n    \"?\"\n  ]\n}"}
{"question": "Show distinct names of singers that have songs with sales more than 300000.", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"Show distinct names of singers that have songs with sales more than 300000.\",\n\"question_toks\": \"['Show', 'distinct', 'names', 'of', 'singers', 'that', 'have', 'songs', 'with', 'sales', 'more', 'than', '300000', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"singer\",\n  \"query\": \"SELECT DISTINCT s1.Name FROM singer T1 JOIN song T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000;\",\n  \"query_toks\": \"['SELECT', 'DISTINCT', 's1', '.', 'Name', 'FROM', 'singer', 'T1', 'JOIN', 'song', 'T2', 'ON', 'T1', '.', 'Singer_ID', '=', 'T2', '.', 'Singer_ID', 'WHERE', 'T2', '.', 'Sales', '>', '300000', ';']\",\n  \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 's1', '.', 'Name', 'FROM', 'singer', 'T1', 'JOIN', 'song', 'T2', 'ON', 'T1', '.', 'Singer_ID', '=', 'T2', '.', 'Singer_ID', 'WHERE', 'T2', '.', 'Sales', '>', '?', ';']\",\n  \"question\": \"Show distinct names of singers that have songs with sales more than 300000.\",\n  \"question_toks\": \"['Show', 'distinct', 'names', 'of', 'singers', 'that', 'have', 'songs', 'with', 'sales', 'more', 'than', '300000', '.']\"\n}"}
{"question": "what are the different names of the singers that have sales more than 300000?", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"what are the different names of the singers that have sales more than 300000?\",\n\"question_toks\": \"['what', 'are', 'the', 'different', 'names', 'of', 'the', 'singers', 'that', 'have', 'sales', 'more', 'than', '300000', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT DISTINCT Name FROM (SELECT * FROM song s JOIN singer si ON s.Singer_ID=si.Singer_ID WHERE s.Sales>300000) T1\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Name', 'FROM', '(', 'SELECT', '*', 'FROM', 'song', 's', 'JOIN', 'singer', 'si', 'ON', 's', '.', 'Singer_ID', '=', 'si', '.', 'Singer_ID', 'WHERE', 's', '.', 'Sales', '>', '300000', ')', 'T1']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Name', 'FROM', '(', 'SELECT', '*', 'FROM', 'song', 's', 'JOIN', 'singer', 'si', 'ON', 's', '.', 'Singer_ID', '=', 'si', '.', 'Singer_ID', 'WHERE', 's', '.', 'Sales', '>', '?', ')', 'T1']\",\n    \"question\": \"what are the different names of the singers that have sales more than 300000?\",\n    \"question_toks\": \"['what', 'are', 'the', 'different', 'names', 'of', 'the', 'singers', 'that', 'have', 'sales', 'more', 'than', '300000', '?']\"\n}"}
{"question": "Show the names of singers that have more than one song.", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"Show the names of singers that have more than one song.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'singers', 'that', 'have', 'more', 'than', 'one', 'song', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT Name FROM singer s JOIN song ON s.Singer_ID = song.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(*) > 1\",\n    \"query_toks\": \"['SELECT', 'Name', 'FROM', 'singer', 's', 'JOIN', 'song', 'ON', 's.Singer_ID', '=', 'song.Singer_ID', 'GROUP', 'BY', 's.Singer_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']\",\n    \"query_toks_no_value\": \"['SELECT', 'Name', 'FROM', 'singer', 's', 'JOIN', 'song', 'ON', 's', '.', 'Singer_ID', '=', 'song', '.', 'Singer_ID', 'GROUP', 'BY', 's', '.', 'Singer_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']\",\n    \"question\": \"Show the names of singers that have more than one song.\",\n    \"question_toks\": \"['Show', 'the', 'names', 'of', 'singers', 'that', 'have', 'more', 'than', 'one', 'song', '.']\"\n}"}
{"question": "What are the names of the singers that have more than one songs?", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What are the names of the singers that have more than one songs?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'that', 'have', 'more', 'than', 'one', 'songs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"singer\",\n  \"query\": \"SELECT Name FROM singer JOIN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*)>1) AS T1 ON singer.Singer_ID=T1.Singer_ID\",\n  \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"JOIN\", \"(\", \"SELECT\", \"Singer_ID\", \"FROM\", \"song\", \"GROUP\", \"BY\", \"Singer_ID\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">\", \"1\", \")\", \"AS\", \"T1\", \"ON\", \"singer\", \".\", \"Singer_ID\", \"=\", \"T1\", \".\", \"Singer_ID\"],\n  \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"JOIN\", \"(\", \"SELECT\", \"Singer_ID\", \"FROM\", \"song\", \"GROUP\", \"BY\", \"Singer_ID\", \"HAVING\", \"COUNT\", \"(\", \"*\", \")\", \">\", \"1\", \")\", \"AS\", \"T1\", \"ON\", \"singer\", \".\", \"Singer_ID\", \"=\", \"T1\", \".\", \"Singer_ID\"],\n  \"question\": \"What are the names of the singers that have more than one songs?\",\n  \"question_toks\": [\"What\", \"are\", \"the\", \"names\", \"of\", \"the\", \"singers\", \"that\", \"have\", \"more\", \"than\", \"one\", \"songs\", \"?\"]\n}"}
{"question": "Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"Show the names of singers and the total sales of their songs.\",\n\"question_toks\": \"['Show', 'the', 'names', 'of', 'singers', 'and', 'the', 'total', 'sales', 'of', 'their', 'songs', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name\",\n    \"query_toks\": \"[SELECT, singer.Name, ,, SUM, (, song.Sales, ), FROM, singer, JOIN, song, ON, singer.Singer_ID, =, song.Singer_ID, GROUP, BY, singer.Name]\",\n    \"query_toks_no_value\": \"[SELECT, singer.Name, ,, SUM, (, song.Sales, ), FROM, singer, JOIN, song, ON, singer.Singer_ID, =, song.Singer_ID, GROUP, BY, singer.Name]\",\n    \"question\": \"Show the names of singers and the total sales of their songs.\",\n    \"question_toks\": \"['Show', 'the', 'names', 'of', 'singers', 'and', 'the', 'total', 'sales', 'of', 'their', 'songs', '.']}\"\n}"}
{"question": "For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"For each singer name, what is the total sales for their songs?\",\n\"question_toks\": \"['For', 'each', 'singer', 'name', ',', 'what', 'is', 'the', 'total', 'sales', 'for', 'their', 'songs', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM song s JOIN singer si ON s.Singer_ID=si.Singer_ID GROUP BY si.Name\",\n    \"query_toks\": [\"SELECT\", \"s\", \".\", \"Name\", \",\", \"SUM\", \"(\", \"s\", \".\", \"Sales\", \")\", \"AS\", \"Total_Sales\", \"FROM\", \"song\", \"s\", \"JOIN\", \"singer\", \"si\", \"ON\", \"s\", \".\", \"Singer_ID\", \"=\", \"si\", \".\", \"Singer_ID\", \"GROUP\", \"BY\", \"si\", \".\", \"Name\"],\n    \"query_toks_no_value\": [\"SELECT\", \"s\", \".\", \"Name\", \",\", \"SUM\", \"(\", \"s\", \".\", \"Sales\", \")\", \"AS\", \"Total_Sales\", \"FROM\", \"song\", \"s\", \"JOIN\", \"singer\", \"si\", \"ON\", \"s\", \".\", \"Singer_ID\", \"=\", \"si\", \".\", \"Singer_ID\", \"GROUP\", \"BY\", \"si\", \".\", \"Name\"],\n    \"question\": \"For each singer name, what is the total sales for their songs?\",\n    \"question_toks\": [\"For\", \"each\", \"singer\", \"name\", \",\", \"what\", \"is\", \"the\", \"total\", \"sales\", \"for\", \"their\", \"songs\", \"?\"]\n}"}
{"question": "List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"List the name of singers that do not have any song.\",\n\"question_toks\": \"['List', 'the', 'name', 'of', 'singers', 'that', 'do', 'not', 'have', 'any', 'song', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)\",\n    \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"WHERE\", \"Singer_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Singer_ID\", \"FROM\", \"song\", \")\", \";\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"WHERE\", \"Singer_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Singer_ID\", \"FROM\", \"song\", \")\", \";\"],\n    \"question\": \"List the name of singers that do not have any song.\",\n    \"question_toks\": [\"List\", \"the\", \"name\", \"of\", \"singers\", \"that\", \"do\", \"not\", \"have\", \"any\", \"song\", \".\"]\n}"}
{"question": "What is the sname of every sing that does not have any song?", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What is the sname of every sing that does not have any song?\",\n\"question_toks\": \"['What', 'is', 'the', 'sname', 'of', 'every', 'sing', 'that', 'does', 'not', 'have', 'any', 'song', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)\",\n    \"query_toks\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"WHERE\", \"Singer_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Singer_ID\", \"FROM\", \"song\", \")\"],\n    \"query_toks_no_value\": [\"SELECT\", \"Name\", \"FROM\", \"singer\", \"WHERE\", \"Singer_ID\", \"NOT\", \"IN\", \"(\", \"SELECT\", \"Singer_ID\", \"FROM\", \"song\", \")\"],\n    \"question\": \"What is the sname of every sing that does not have any song?\",\n    \"question_toks\": [\"What\", \"is\", \"the\", \"sname\", \"of\", \"every\", \"sing\", \"that\", \"does\", \"not\", \"have\", \"any\", \"song\", \"?\"]\n}"}
{"question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"Show the citizenship shared by singers with birth year before 1945 and after 1955.\",\n\"question_toks\": \"['Show', 'the', 'citizenship', 'shared', 'by', 'singers', 'with', 'birth', 'year', 'before', '1945', 'and', 'after', '1955', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT DISTINCT s1.Citizenship \\nFROM Singer s1, Singer s2 \\nWHERE s1.Birth_Year < '1945' AND s2.Birth_Year > '1955' AND s1.Citizenship = s2.Citizenship;\",\n    \"query_toks\": \"[SELECT, DISTINCT, s1.Citizenship, FROM, Singer, s1, ,, Singer, s2, WHERE, s1.Birth_Year, <, '1945', AND, s2.Birth_Year, >, '1955', AND, s1.Citizenship, =, s2.Citizenship, ;]\",\n    \"query_toks_no_value\": \"[SELECT, DISTINCT, s1.Citizenship, FROM, Singer, s1, ,, Singer, s2, WHERE, s1.Birth_Year, <, value, AND, s2.Birth_Year, >, value, AND, s1.Citizenship, =, s2.Citizenship, ;]\",\n    \"question\": \"Show the citizenship shared by singers with birth year before 1945 and after 1955.\",\n    \"question_toks\": \"['Show', 'the', 'citizenship', 'shared', 'by', 'singers', 'with', 'birth', 'year', 'before', '1945', 'and', 'after', '1955', '.']\"\n}\n"}
{"question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nsinger: 'Singer_ID', 'Name', 'Birth_Year', 'Net_Worth_Millions', 'Citizenship'\nsong: 'Song_ID', 'Title', 'Singer_ID', 'Sales', 'Highest_Position'\n\n{\"db_id\": \"singer\",\n\"question\": \"What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?\",\n\"question_toks\": \"['What', 'are', 'the', 'citizenships', 'that', 'are', 'shared', 'by', 'singers', 'with', 'a', 'birth', 'year', 'before', '1945', 'and', 'after', '1955', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"singer\",\n    \"query\": \"SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955\",\n    \"query_toks\": \"['SELECT', 'DISTINCT', 'Citizenship', 'FROM', 'singer', 'WHERE', 'Birth_Year', '<', '1945', 'OR', 'Birth_Year', '>', '1955']\",\n    \"query_toks_no_value\": \"['SELECT', 'DISTINCT', 'Citizenship', 'FROM', 'singer', 'WHERE', 'Birth_Year', '<', '?', 'OR', 'Birth_Year', '>', '?']\",\n    \"question\": \"What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?\",\n    \"question_toks\": \"['What', 'are', 'the', 'citizenships', 'that', 'are', 'shared', 'by', 'singers', 'with', 'a', 'birth', 'year', 'before', '1945', 'and', 'after', '1955', '?']\"\n}"}
{"question": "How many available features are there in total?", "sql": "SELECT count(*) FROM Other_Available_Features", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Feature_Types: 'feature_type_code', 'feature_type_name'\nRef_Property_Types: 'property_type_code', 'property_type_description'\nOther_Available_Features: 'feature_id', 'feature_type_code', 'feature_name', 'feature_description'\nProperties: 'property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details'\nOther_Property_Features: 'property_id', 'feature_id', 'property_feature_description'\n\n{\"db_id\": \"real_estate_properties\",\n\"question\": \"How many available features are there in total?\",\n\"question_toks\": \"['How', 'many', 'available', 'features', 'are', 'there', 'in', 'total', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"real_estate_properties\",\n    \"query\": \"SELECT COUNT(*) FROM Other_Available_Features\",\n    \"query_toks\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Other_Available_Features\"],\n    \"query_toks_no_value\": [\"SELECT\", \"COUNT\", \"(\", \"*\", \")\", \"FROM\", \"Other_Available_Features\"],\n    \"question\": \"How many available features are there in total?\",\n    \"question_toks\": [\"How\", \"many\", \"available\", \"features\", \"are\", \"there\", \"in\", \"total\", \"?\"]\n}"}
{"question": "What is the feature type name of feature AirCon?", "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Feature_Types: 'feature_type_code', 'feature_type_name'\nRef_Property_Types: 'property_type_code', 'property_type_description'\nOther_Available_Features: 'feature_id', 'feature_type_code', 'feature_name', 'feature_description'\nProperties: 'property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details'\nOther_Property_Features: 'property_id', 'feature_id', 'property_feature_description'\n\n{\"db_id\": \"real_estate_properties\",\n\"question\": \"What is the feature type name of feature AirCon?\",\n\"question_toks\": \"['What', 'is', 'the', 'feature', 'type', 'name', 'of', 'feature', 'AirCon', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n  \"db_id\": \"real_estate_properties\",\n  \"query\": \"SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')\",\n  \"query_toks\": [\"SELECT\", \"feature_type_name\", \"FROM\", \"Ref_Feature_Types\", \"WHERE\", \"feature_type_code\", \"=\", \"(\", \"SELECT\", \"feature_type_code\", \"FROM\", \"Other_Available_Features\", \"WHERE\", \"feature_name\", \"=\", \"'AirCon'\", \")\", \";\"],\n  \"query_toks_no_value\": [\"SELECT\", \"feature_type_name\", \"FROM\", \"Ref_Feature_Types\", \"WHERE\", \"feature_type_code\", \"=\", \"(\", \"SELECT\", \"feature_type_code\", \"FROM\", \"Other_Available_Features\", \"WHERE\", \"feature_name\", \"=\", \"\", \")\", \";\"],\n  \"question\": \"What is the feature type name of feature AirCon?\",\n  \"question_toks\": [\"What\", \"is\", \"the\", \"feature\", \"type\", \"name\", \"of\", \"feature\", \"AirCon\", \"?\"]\n}"}
{"question": "Show the property type descriptions of properties belonging to that code.", "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Feature_Types: 'feature_type_code', 'feature_type_name'\nRef_Property_Types: 'property_type_code', 'property_type_description'\nOther_Available_Features: 'feature_id', 'feature_type_code', 'feature_name', 'feature_description'\nProperties: 'property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details'\nOther_Property_Features: 'property_id', 'feature_id', 'property_feature_description'\n\n{\"db_id\": \"real_estate_properties\",\n\"question\": \"Show the property type descriptions of properties belonging to that code.\",\n\"question_toks\": \"['Show', 'the', 'property', 'type', 'descriptions', 'of', 'properties', 'belonging', 'to', 'that', 'code', '.']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"real_estate_properties\",\n    \"query\": \"SELECT pt.property_type_description FROM Property AS p JOIN Property_Type AS pt ON p.property_type_code = pt.property_type_code WHERE p.property_type_code = <code>\",\n    \"query_toks\": [\"SELECT\", \"pt.property_type_description\", \"FROM\", \"Property\", \"AS\", \"p\", \"JOIN\", \"Property_Type\", \"AS\", \"pt\", \"ON\", \"p.property_type_code\", \"=\", \"pt.property_type_code\", \"WHERE\", \"p.property_type_code\", \"=\", \"<code>\"],\n    \"query_toks_no_value\": [\"SELECT\", \"pt.property_type_description\", \"FROM\", \"Property\", \"AS\", \"p\", \"JOIN\", \"Property_Type\", \"AS\", \"pt\", \"ON\", \"p.property_type_code\", \"=\", \"pt.property_type_code\", \"WHERE\", \"p.property_type_code\", \"=\"],\n    \"question\": \"Show the property type descriptions of properties belonging to that code.\",\n    \"question_toks\": [\"Show\", \"the\", \"property\", \"type\", \"descriptions\", \"of\", \"properties\", \"belonging\", \"to\", \"that\", \"code\", \".\"]\n}"}
{"question": "What are the names of properties that are either houses or apartments with more than 1 room?", "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "prompt": "Datasets: spider\n        Tasks: Text2Text Generation\n        Languages: English\n        Multilinguality: monolingual\n        Size Categories: 1K<n<10K\n        Language Creators: expert-generated machine-generated\n        Annotations Creators: expert-generated\n        Source Datasets: original\n        Tags: text-to-sql\n        License: cc-by-4.0\n        Dataset Preview\n        Size: 99.7 MB\n        Split validation (1.03k rows)\n\nRef_Feature_Types: 'feature_type_code', 'feature_type_name'\nRef_Property_Types: 'property_type_code', 'property_type_description'\nOther_Available_Features: 'feature_id', 'feature_type_code', 'feature_name', 'feature_description'\nProperties: 'property_id', 'property_type_code', 'date_on_market', 'date_sold', 'property_name', 'property_address', 'room_count', 'vendor_requested_price', 'buyer_offered_price', 'agreed_selling_price', 'apt_feature_1', 'apt_feature_2', 'apt_feature_3', 'fld_feature_1', 'fld_feature_2', 'fld_feature_3', 'hse_feature_1', 'hse_feature_2', 'hse_feature_3', 'oth_feature_1', 'oth_feature_2', 'oth_feature_3', 'shp_feature_1', 'shp_feature_2', 'shp_feature_3', 'other_property_details'\nOther_Property_Features: 'property_id', 'feature_id', 'property_feature_description'\n\n{\"db_id\": \"real_estate_properties\",\n\"question\": \"What are the names of properties that are either houses or apartments with more than 1 room?\",\n\"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'properties', 'that', 'are', 'either', 'houses', 'or', 'apartments', 'with', 'more', 'than', '1', 'room', '?']}\"\nComplete the json with the fields \"db_id\", \"query\", \"query_toks\", \"query_toks_no_value\", \"question\", \"question_toks\"\nuse T1, T2, T3, T4 etc for table alias if necessary", "response": "{\n    \"db_id\": \"real_estate_properties\",\n    \"query\": \"SELECT property_name FROM Properties WHERE room_count > 1 AND (property_type_code = 'hse' OR property_type_code = 'apt')\",\n    \"query_toks\": \"['SELECT', 'property_name', 'FROM', 'Properties', 'WHERE', 'room_count', '>', '1', 'AND', '(', 'property_type_code', '=', ''hse'', 'OR', 'property_type_code', '=', ''apt'', ')']\",\n    \"query_toks_no_value\": \"['SELECT', 'property_name', 'FROM', 'Properties', 'WHERE', 'room_count', '>', '1', 'AND', '(', 'property_type_code', '=', '', 'OR', 'property_type_code', '=', '', ')']\",\n    \"question\": \"What are the names of properties that are either houses or apartments with more than 1 room?\",\n    \"question_toks\": \"['What', 'are', 'the', 'names', 'of', 'properties', 'that', 'are', 'either', 'houses', 'or', 'apartments', 'with', 'more', 'than', '1', 'room', '?']\"\n}"}
